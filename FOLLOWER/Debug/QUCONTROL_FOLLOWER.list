
QUCONTROL_FOLLOWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1b8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800e390  0800e390  0001e390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9cc  0800e9cc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9cc  0800e9cc  0001e9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9d4  0800e9d4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9d4  0800e9d4  0001e9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9d8  0800e9d8  0001e9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800e9dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc8  20000068  0800ea44  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e30  0800ea44  00020e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b673  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e95  00000000  00000000  0004b74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002418  00000000  00000000  000505e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c2b  00000000  00000000  00052a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e6a2  00000000  00000000  0005462b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cf9f  00000000  00000000  00082ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00125f21  00000000  00000000  000afc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a364  00000000  00000000  001d5b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001dfef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800e378 	.word	0x0800e378

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800e378 	.word	0x0800e378

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <acc_init>:
bno055_vec3_t mag = {0, 0, 0};
bno055_vec3_t grv = {0, 0, 0};
bno055_euler_t eul = {0, 0, 0};
bno055_vec4_t qua = {0, 0, 0};

uint8_t acc_init(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	b0ae      	sub	sp, #184	; 0xb8
 8000518:	af02      	add	r7, sp, #8

    bno = (bno055_t){
 800051a:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <acc_init+0x7c>)
 800051c:	4618      	mov	r0, r3
 800051e:	23ac      	movs	r3, #172	; 0xac
 8000520:	461a      	mov	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f00d fc64 	bl	800ddf0 <memset>
 8000528:	4b19      	ldr	r3, [pc, #100]	; (8000590 <acc_init+0x7c>)
 800052a:	4a1a      	ldr	r2, [pc, #104]	; (8000594 <acc_init+0x80>)
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <acc_init+0x7c>)
 8000530:	2208      	movs	r2, #8
 8000532:	711a      	strb	r2, [r3, #4]
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <acc_init+0x7c>)
 8000536:	2228      	movs	r2, #40	; 0x28
 8000538:	719a      	strb	r2, [r3, #6]
    	.i2c = &hi2c3, .addr = IMU_ID, .mode = BNO_MODE_IMU, ._temp_unit = 0,
    };

	 if((err = bno055_init(&bno)) == BNO_OK){
 800053a:	4815      	ldr	r0, [pc, #84]	; (8000590 <acc_init+0x7c>)
 800053c:	f000 f832 	bl	80005a4 <bno055_init>
 8000540:	4603      	mov	r3, r0
 8000542:	461a      	mov	r2, r3
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <acc_init+0x84>)
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <acc_init+0x84>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d113      	bne.n	8000578 <acc_init+0x64>
	    printf("[+] BNO055 init success\r\n");
 8000550:	4812      	ldr	r0, [pc, #72]	; (800059c <acc_init+0x88>)
 8000552:	f00d fb6d 	bl	800dc30 <puts>
	 }else{
		 return 1;
	    //Error_Handler();
	 }

	 err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
 8000556:	2300      	movs	r3, #0
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	480b      	ldr	r0, [pc, #44]	; (8000590 <acc_init+0x7c>)
 8000562:	f001 fae9 	bl	8001b38 <bno055_set_unit>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <acc_init+0x84>)
 800056c:	701a      	strb	r2, [r3, #0]
	 if(err != BNO_OK) {
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <acc_init+0x84>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d004      	beq.n	8000580 <acc_init+0x6c>
 8000576:	e001      	b.n	800057c <acc_init+0x68>
		 return 1;
 8000578:	2301      	movs	r3, #1
 800057a:	e005      	b.n	8000588 <acc_init+0x74>
		 return 1;
 800057c:	2301      	movs	r3, #1
 800057e:	e003      	b.n	8000588 <acc_init+0x74>
	 }else{
		 printf("[BNO] Unit selection success\r\n");
 8000580:	4807      	ldr	r0, [pc, #28]	; (80005a0 <acc_init+0x8c>)
 8000582:	f00d fb55 	bl	800dc30 <puts>
	 }
	 return 0;
 8000586:	2300      	movs	r3, #0

}
 8000588:	4618      	mov	r0, r3
 800058a:	37b0      	adds	r7, #176	; 0xb0
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000084 	.word	0x20000084
 8000594:	20000610 	.word	0x20000610
 8000598:	20000130 	.word	0x20000130
 800059c:	0800e390 	.word	0x0800e390
 80005a0:	0800e3ac 	.word	0x0800e3ac

080005a4 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b0af      	sub	sp, #188	; 0xbc
 80005a8:	af2a      	add	r7, sp, #168	; 0xa8
 80005aa:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	799b      	ldrb	r3, [r3, #6]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 80005bc:	687c      	ldr	r4, [r7, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	9329      	str	r3, [sp, #164]	; 0xa4
 80005c2:	f107 030e 	add.w	r3, r7, #14
 80005c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80005c8:	2300      	movs	r3, #0
 80005ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80005cc:	4668      	mov	r0, sp
 80005ce:	f104 0310 	add.w	r3, r4, #16
 80005d2:	229c      	movs	r2, #156	; 0x9c
 80005d4:	4619      	mov	r1, r3
 80005d6:	f00d fc86 	bl	800dee6 <memcpy>
 80005da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005de:	f001 fbb6 	bl	8001d4e <bno055_read_regs>
 80005e2:	4603      	mov	r3, r0
 80005e4:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <bno055_init+0x4c>
        return err;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	e0b6      	b.n	800075e <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	2ba0      	cmp	r3, #160	; 0xa0
 80005f4:	d001      	beq.n	80005fa <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 80005f6:	2306      	movs	r3, #6
 80005f8:	e0b1      	b.n	800075e <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 80005fa:	2100      	movs	r1, #0
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f001 fa74 	bl	8001aea <bno055_set_opmode>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <bno055_init+0x6c>
        return err;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	e0a6      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8000610:	2002      	movs	r0, #2
 8000612:	f004 fdc3 	bl	800519c <HAL_Delay>
    bno055_reset(imu);
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f001 fb53 	bl	8001cc2 <bno055_reset>
    HAL_Delay(5000);
 800061c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000620:	f004 fdbc 	bl	800519c <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000624:	2100      	movs	r1, #0
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f001 faee 	bl	8001c08 <bno055_set_pwr_mode>
 800062c:	4603      	mov	r3, r0
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <bno055_init+0x96>
        return err;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	e091      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 800063a:	200a      	movs	r0, #10
 800063c:	f004 fdae 	bl	800519c <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000640:	2100      	movs	r1, #0
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f001 fbe6 	bl	8001e14 <bno055_set_page>
 8000648:	4603      	mov	r3, r0
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <bno055_init+0xb2>
        return err;
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	e083      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8000656:	200c      	movs	r0, #12
 8000658:	f004 fda0 	bl	800519c <HAL_Delay>
    bno055_on(imu);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f001 fb53 	bl	8001d08 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	4619      	mov	r1, r3
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f001 fa3e 	bl	8001aea <bno055_set_opmode>
 800066e:	4603      	mov	r3, r0
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <bno055_init+0xd8>
        return err;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	e070      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800067c:	2018      	movs	r0, #24
 800067e:	f004 fd8d 	bl	800519c <HAL_Delay>

    imu->temperature = &bno055_temperature;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a38      	ldr	r2, [pc, #224]	; (8000768 <bno055_init+0x1c4>)
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a38      	ldr	r2, [pc, #224]	; (800076c <bno055_init+0x1c8>)
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a37      	ldr	r2, [pc, #220]	; (8000770 <bno055_init+0x1cc>)
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a37      	ldr	r2, [pc, #220]	; (8000774 <bno055_init+0x1d0>)
 8000698:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a36      	ldr	r2, [pc, #216]	; (8000778 <bno055_init+0x1d4>)
 800069e:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a36      	ldr	r2, [pc, #216]	; (800077c <bno055_init+0x1d8>)
 80006a4:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a35      	ldr	r2, [pc, #212]	; (8000780 <bno055_init+0x1dc>)
 80006aa:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a35      	ldr	r2, [pc, #212]	; (8000784 <bno055_init+0x1e0>)
 80006b0:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <bno055_init+0x1e4>)
 80006b6:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a34      	ldr	r2, [pc, #208]	; (800078c <bno055_init+0x1e8>)
 80006bc:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a33      	ldr	r2, [pc, #204]	; (8000790 <bno055_init+0x1ec>)
 80006c2:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <bno055_init+0x1f0>)
 80006c8:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a32      	ldr	r2, [pc, #200]	; (8000798 <bno055_init+0x1f4>)
 80006ce:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a32      	ldr	r2, [pc, #200]	; (800079c <bno055_init+0x1f8>)
 80006d4:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a31      	ldr	r2, [pc, #196]	; (80007a0 <bno055_init+0x1fc>)
 80006da:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <bno055_init+0x200>)
 80006e0:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a30      	ldr	r2, [pc, #192]	; (80007a8 <bno055_init+0x204>)
 80006e6:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a30      	ldr	r2, [pc, #192]	; (80007ac <bno055_init+0x208>)
 80006ec:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a2f      	ldr	r2, [pc, #188]	; (80007b0 <bno055_init+0x20c>)
 80006f2:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a2f      	ldr	r2, [pc, #188]	; (80007b4 <bno055_init+0x210>)
 80006f8:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a2e      	ldr	r2, [pc, #184]	; (80007b8 <bno055_init+0x214>)
 80006fe:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a2e      	ldr	r2, [pc, #184]	; (80007bc <bno055_init+0x218>)
 8000704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a2d      	ldr	r2, [pc, #180]	; (80007c0 <bno055_init+0x21c>)
 800070c:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a2c      	ldr	r2, [pc, #176]	; (80007c4 <bno055_init+0x220>)
 8000712:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <bno055_init+0x224>)
 8000718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a2b      	ldr	r2, [pc, #172]	; (80007cc <bno055_init+0x228>)
 8000720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <bno055_init+0x22c>)
 8000728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a29      	ldr	r2, [pc, #164]	; (80007d4 <bno055_init+0x230>)
 8000730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a28      	ldr	r2, [pc, #160]	; (80007d8 <bno055_init+0x234>)
 8000738:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a27      	ldr	r2, [pc, #156]	; (80007dc <bno055_init+0x238>)
 8000740:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <bno055_init+0x23c>)
 8000748:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <bno055_init+0x240>)
 8000750:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a24      	ldr	r2, [pc, #144]	; (80007e8 <bno055_init+0x244>)
 8000758:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	bd90      	pop	{r4, r7, pc}
 8000766:	bf00      	nop
 8000768:	080007ed 	.word	0x080007ed
 800076c:	08000855 	.word	0x08000855
 8000770:	080008d5 	.word	0x080008d5
 8000774:	08000955 	.word	0x08000955
 8000778:	080009d5 	.word	0x080009d5
 800077c:	08000aa1 	.word	0x08000aa1
 8000780:	08000b21 	.word	0x08000b21
 8000784:	08000ba1 	.word	0x08000ba1
 8000788:	08000c21 	.word	0x08000c21
 800078c:	08000ced 	.word	0x08000ced
 8000790:	08000d6d 	.word	0x08000d6d
 8000794:	08000ded 	.word	0x08000ded
 8000798:	08000e6d 	.word	0x08000e6d
 800079c:	08000f39 	.word	0x08000f39
 80007a0:	08000fa5 	.word	0x08000fa5
 80007a4:	08001011 	.word	0x08001011
 80007a8:	0800107d 	.word	0x0800107d
 80007ac:	08001131 	.word	0x08001131
 80007b0:	080011b5 	.word	0x080011b5
 80007b4:	08001239 	.word	0x08001239
 80007b8:	080012bd 	.word	0x080012bd
 80007bc:	08001389 	.word	0x08001389
 80007c0:	0800140d 	.word	0x0800140d
 80007c4:	08001491 	.word	0x08001491
 80007c8:	08001515 	.word	0x08001515
 80007cc:	080015e1 	.word	0x080015e1
 80007d0:	08001651 	.word	0x08001651
 80007d4:	080016c1 	.word	0x080016c1
 80007d8:	08001731 	.word	0x08001731
 80007dc:	080017a1 	.word	0x080017a1
 80007e0:	0800187d 	.word	0x0800187d
 80007e4:	0800194d 	.word	0x0800194d
 80007e8:	08001a1b 	.word	0x08001a1b

080007ec <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b0af      	sub	sp, #188	; 0xbc
 80007f0:	af2a      	add	r7, sp, #168	; 0xa8
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 80007fa:	687c      	ldr	r4, [r7, #4]
 80007fc:	2301      	movs	r3, #1
 80007fe:	9329      	str	r3, [sp, #164]	; 0xa4
 8000800:	f107 030e 	add.w	r3, r7, #14
 8000804:	9328      	str	r3, [sp, #160]	; 0xa0
 8000806:	2334      	movs	r3, #52	; 0x34
 8000808:	9327      	str	r3, [sp, #156]	; 0x9c
 800080a:	4668      	mov	r0, sp
 800080c:	f104 0310 	add.w	r3, r4, #16
 8000810:	229c      	movs	r2, #156	; 0x9c
 8000812:	4619      	mov	r1, r3
 8000814:	f00d fb67 	bl	800dee6 <memcpy>
 8000818:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800081c:	f001 fa97 	bl	8001d4e <bno055_read_regs>
 8000820:	4603      	mov	r3, r0
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <bno055_temperature+0x42>
        return err;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	e00d      	b.n	800084a <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7bdb      	ldrb	r3, [r3, #15]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d004      	beq.n	8000840 <bno055_temperature+0x54>
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	b25b      	sxtb	r3, r3
 800083e:	e001      	b.n	8000844 <bno055_temperature+0x58>
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	b25b      	sxtb	r3, r3
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bd90      	pop	{r4, r7, pc}
	...

08000854 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b0af      	sub	sp, #188	; 0xbc
 8000858:	af2a      	add	r7, sp, #168	; 0xa8
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 800085e:	687c      	ldr	r4, [r7, #4]
 8000860:	2302      	movs	r3, #2
 8000862:	9329      	str	r3, [sp, #164]	; 0xa4
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	9328      	str	r3, [sp, #160]	; 0xa0
 800086a:	2308      	movs	r3, #8
 800086c:	9327      	str	r3, [sp, #156]	; 0x9c
 800086e:	4668      	mov	r0, sp
 8000870:	f104 0310 	add.w	r3, r4, #16
 8000874:	229c      	movs	r2, #156	; 0x9c
 8000876:	4619      	mov	r1, r3
 8000878:	f00d fb35 	bl	800dee6 <memcpy>
 800087c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000880:	f001 fa65 	bl	8001d4e <bno055_read_regs>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <bno055_acc_x+0x3e>
        return err;
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	e019      	b.n	80008c6 <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000892:	7b7b      	ldrb	r3, [r7, #13]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	b21a      	sxth	r2, r3
 8000898:	7b3b      	ldrb	r3, [r7, #12]
 800089a:	b21b      	sxth	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b21b      	sxth	r3, r3
 80008a0:	ee07 3a90 	vmov	s15, r3
 80008a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <bno055_acc_x+0x62>
 80008b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80008d0 <bno055_acc_x+0x7c>
 80008b4:	e001      	b.n	80008ba <bno055_acc_x+0x66>
 80008b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80008ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80008c4:	2300      	movs	r3, #0
};
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	bf00      	nop
 80008d0:	42c80000 	.word	0x42c80000

080008d4 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b0af      	sub	sp, #188	; 0xbc
 80008d8:	af2a      	add	r7, sp, #168	; 0xa8
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80008de:	687c      	ldr	r4, [r7, #4]
 80008e0:	2302      	movs	r3, #2
 80008e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80008ea:	230a      	movs	r3, #10
 80008ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80008ee:	4668      	mov	r0, sp
 80008f0:	f104 0310 	add.w	r3, r4, #16
 80008f4:	229c      	movs	r2, #156	; 0x9c
 80008f6:	4619      	mov	r1, r3
 80008f8:	f00d faf5 	bl	800dee6 <memcpy>
 80008fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000900:	f001 fa25 	bl	8001d4e <bno055_read_regs>
 8000904:	4603      	mov	r3, r0
 8000906:	73fb      	strb	r3, [r7, #15]
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <bno055_acc_y+0x3e>
        return err;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	e019      	b.n	8000946 <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000912:	7b7b      	ldrb	r3, [r7, #13]
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	b21a      	sxth	r2, r3
 8000918:	7b3b      	ldrb	r3, [r7, #12]
 800091a:	b21b      	sxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b21b      	sxth	r3, r3
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <bno055_acc_y+0x62>
 8000930:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000950 <bno055_acc_y+0x7c>
 8000934:	e001      	b.n	800093a <bno055_acc_y+0x66>
 8000936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800093a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000944:	2300      	movs	r3, #0
};
 8000946:	4618      	mov	r0, r3
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	bf00      	nop
 8000950:	42c80000 	.word	0x42c80000

08000954 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b0af      	sub	sp, #188	; 0xbc
 8000958:	af2a      	add	r7, sp, #168	; 0xa8
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800095e:	687c      	ldr	r4, [r7, #4]
 8000960:	2302      	movs	r3, #2
 8000962:	9329      	str	r3, [sp, #164]	; 0xa4
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	9328      	str	r3, [sp, #160]	; 0xa0
 800096a:	230c      	movs	r3, #12
 800096c:	9327      	str	r3, [sp, #156]	; 0x9c
 800096e:	4668      	mov	r0, sp
 8000970:	f104 0310 	add.w	r3, r4, #16
 8000974:	229c      	movs	r2, #156	; 0x9c
 8000976:	4619      	mov	r1, r3
 8000978:	f00d fab5 	bl	800dee6 <memcpy>
 800097c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000980:	f001 f9e5 	bl	8001d4e <bno055_read_regs>
 8000984:	4603      	mov	r3, r0
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <bno055_acc_z+0x3e>
        return err;
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	e019      	b.n	80009c6 <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000992:	7b7b      	ldrb	r3, [r7, #13]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b21a      	sxth	r2, r3
 8000998:	7b3b      	ldrb	r3, [r7, #12]
 800099a:	b21b      	sxth	r3, r3
 800099c:	4313      	orrs	r3, r2
 800099e:	b21b      	sxth	r3, r3
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <bno055_acc_z+0x62>
 80009b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80009d0 <bno055_acc_z+0x7c>
 80009b4:	e001      	b.n	80009ba <bno055_acc_z+0x66>
 80009b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80009ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80009c4:	2300      	movs	r3, #0
};
 80009c6:	4618      	mov	r0, r3
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	bf00      	nop
 80009d0:	42c80000 	.word	0x42c80000

080009d4 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b0b1      	sub	sp, #196	; 0xc4
 80009d8:	af2a      	add	r7, sp, #168	; 0xa8
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 80009de:	687c      	ldr	r4, [r7, #4]
 80009e0:	2306      	movs	r3, #6
 80009e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80009ea:	2308      	movs	r3, #8
 80009ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80009ee:	4668      	mov	r0, sp
 80009f0:	f104 0310 	add.w	r3, r4, #16
 80009f4:	229c      	movs	r2, #156	; 0x9c
 80009f6:	4619      	mov	r1, r3
 80009f8:	f00d fa75 	bl	800dee6 <memcpy>
 80009fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a00:	f001 f9a5 	bl	8001d4e <bno055_read_regs>
 8000a04:	4603      	mov	r3, r0
 8000a06:	75fb      	strb	r3, [r7, #23]
 8000a08:	7dfb      	ldrb	r3, [r7, #23]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <bno055_acc+0x3e>
        return err;
 8000a0e:	7dfb      	ldrb	r3, [r7, #23]
 8000a10:	e03f      	b.n	8000a92 <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <bno055_acc+0x4a>
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <bno055_acc+0xc8>)
 8000a1c:	e001      	b.n	8000a22 <bno055_acc+0x4e>
 8000a1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000a22:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000a24:	7a7b      	ldrb	r3, [r7, #9]
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	7a3b      	ldrb	r3, [r7, #8]
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000a48:	7afb      	ldrb	r3, [r7, #11]
 8000a4a:	021b      	lsls	r3, r3, #8
 8000a4c:	b21a      	sxth	r2, r3
 8000a4e:	7abb      	ldrb	r3, [r7, #10]
 8000a50:	b21b      	sxth	r3, r3
 8000a52:	4313      	orrs	r3, r2
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000a6c:	7b7b      	ldrb	r3, [r7, #13]
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	b21a      	sxth	r2, r3
 8000a72:	7b3b      	ldrb	r3, [r7, #12]
 8000a74:	b21b      	sxth	r3, r3
 8000a76:	4313      	orrs	r3, r2
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	ee07 3a90 	vmov	s15, r3
 8000a7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a82:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000a90:	2300      	movs	r3, #0
};
 8000a92:	4618      	mov	r0, r3
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	42c80000 	.word	0x42c80000

08000aa0 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b0af      	sub	sp, #188	; 0xbc
 8000aa4:	af2a      	add	r7, sp, #168	; 0xa8
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000aaa:	687c      	ldr	r4, [r7, #4]
 8000aac:	2302      	movs	r3, #2
 8000aae:	9329      	str	r3, [sp, #164]	; 0xa4
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	9328      	str	r3, [sp, #160]	; 0xa0
 8000ab6:	2328      	movs	r3, #40	; 0x28
 8000ab8:	9327      	str	r3, [sp, #156]	; 0x9c
 8000aba:	4668      	mov	r0, sp
 8000abc:	f104 0310 	add.w	r3, r4, #16
 8000ac0:	229c      	movs	r2, #156	; 0x9c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f00d fa0f 	bl	800dee6 <memcpy>
 8000ac8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000acc:	f001 f93f 	bl	8001d4e <bno055_read_regs>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <bno055_linear_acc_x+0x3e>
        return err;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	e019      	b.n	8000b12 <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000ade:	7b7b      	ldrb	r3, [r7, #13]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	7b3b      	ldrb	r3, [r7, #12]
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	ee07 3a90 	vmov	s15, r3
 8000af0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <bno055_linear_acc_x+0x62>
 8000afc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000b1c <bno055_linear_acc_x+0x7c>
 8000b00:	e001      	b.n	8000b06 <bno055_linear_acc_x+0x66>
 8000b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000b10:	2300      	movs	r3, #0
};
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	42c80000 	.word	0x42c80000

08000b20 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b0af      	sub	sp, #188	; 0xbc
 8000b24:	af2a      	add	r7, sp, #168	; 0xa8
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000b2a:	687c      	ldr	r4, [r7, #4]
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	9328      	str	r3, [sp, #160]	; 0xa0
 8000b36:	232a      	movs	r3, #42	; 0x2a
 8000b38:	9327      	str	r3, [sp, #156]	; 0x9c
 8000b3a:	4668      	mov	r0, sp
 8000b3c:	f104 0310 	add.w	r3, r4, #16
 8000b40:	229c      	movs	r2, #156	; 0x9c
 8000b42:	4619      	mov	r1, r3
 8000b44:	f00d f9cf 	bl	800dee6 <memcpy>
 8000b48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b4c:	f001 f8ff 	bl	8001d4e <bno055_read_regs>
 8000b50:	4603      	mov	r3, r0
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <bno055_linear_acc_y+0x3e>
        return err;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	e019      	b.n	8000b92 <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b5e:	7b7b      	ldrb	r3, [r7, #13]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	7b3b      	ldrb	r3, [r7, #12]
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <bno055_linear_acc_y+0x62>
 8000b7c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000b9c <bno055_linear_acc_y+0x7c>
 8000b80:	e001      	b.n	8000b86 <bno055_linear_acc_y+0x66>
 8000b82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000b90:	2300      	movs	r3, #0
};
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd90      	pop	{r4, r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	42c80000 	.word	0x42c80000

08000ba0 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b0af      	sub	sp, #188	; 0xbc
 8000ba4:	af2a      	add	r7, sp, #168	; 0xa8
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000baa:	687c      	ldr	r4, [r7, #4]
 8000bac:	2302      	movs	r3, #2
 8000bae:	9329      	str	r3, [sp, #164]	; 0xa4
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	9328      	str	r3, [sp, #160]	; 0xa0
 8000bb6:	232c      	movs	r3, #44	; 0x2c
 8000bb8:	9327      	str	r3, [sp, #156]	; 0x9c
 8000bba:	4668      	mov	r0, sp
 8000bbc:	f104 0310 	add.w	r3, r4, #16
 8000bc0:	229c      	movs	r2, #156	; 0x9c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f00d f98f 	bl	800dee6 <memcpy>
 8000bc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bcc:	f001 f8bf 	bl	8001d4e <bno055_read_regs>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <bno055_linear_acc_z+0x3e>
        return err;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	e019      	b.n	8000c12 <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000bde:	7b7b      	ldrb	r3, [r7, #13]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	7b3b      	ldrb	r3, [r7, #12]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	ee07 3a90 	vmov	s15, r3
 8000bf0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <bno055_linear_acc_z+0x62>
 8000bfc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000c1c <bno055_linear_acc_z+0x7c>
 8000c00:	e001      	b.n	8000c06 <bno055_linear_acc_z+0x66>
 8000c02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000c10:	2300      	movs	r3, #0
};
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	42c80000 	.word	0x42c80000

08000c20 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b0b1      	sub	sp, #196	; 0xc4
 8000c24:	af2a      	add	r7, sp, #168	; 0xa8
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000c2a:	687c      	ldr	r4, [r7, #4]
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	9328      	str	r3, [sp, #160]	; 0xa0
 8000c36:	2328      	movs	r3, #40	; 0x28
 8000c38:	9327      	str	r3, [sp, #156]	; 0x9c
 8000c3a:	4668      	mov	r0, sp
 8000c3c:	f104 0310 	add.w	r3, r4, #16
 8000c40:	229c      	movs	r2, #156	; 0x9c
 8000c42:	4619      	mov	r1, r3
 8000c44:	f00d f94f 	bl	800dee6 <memcpy>
 8000c48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c4c:	f001 f87f 	bl	8001d4e <bno055_read_regs>
 8000c50:	4603      	mov	r3, r0
 8000c52:	75fb      	strb	r3, [r7, #23]
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <bno055_linear_acc+0x3e>
        return err;
 8000c5a:	7dfb      	ldrb	r3, [r7, #23]
 8000c5c:	e03f      	b.n	8000cde <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <bno055_linear_acc+0x4a>
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <bno055_linear_acc+0xc8>)
 8000c68:	e001      	b.n	8000c6e <bno055_linear_acc+0x4e>
 8000c6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000c6e:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000c70:	7a7b      	ldrb	r3, [r7, #9]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	7a3b      	ldrb	r3, [r7, #8]
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c86:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000c94:	7afb      	ldrb	r3, [r7, #11]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	7abb      	ldrb	r3, [r7, #10]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000caa:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000cb8:	7b7b      	ldrb	r3, [r7, #13]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	7b3b      	ldrb	r3, [r7, #12]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	ee07 3a90 	vmov	s15, r3
 8000cca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cce:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000cdc:	2300      	movs	r3, #0
};
 8000cde:	4618      	mov	r0, r3
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	42c80000 	.word	0x42c80000

08000cec <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b0af      	sub	sp, #188	; 0xbc
 8000cf0:	af2a      	add	r7, sp, #168	; 0xa8
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000cf6:	687c      	ldr	r4, [r7, #4]
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	9329      	str	r3, [sp, #164]	; 0xa4
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	9328      	str	r3, [sp, #160]	; 0xa0
 8000d02:	2314      	movs	r3, #20
 8000d04:	9327      	str	r3, [sp, #156]	; 0x9c
 8000d06:	4668      	mov	r0, sp
 8000d08:	f104 0310 	add.w	r3, r4, #16
 8000d0c:	229c      	movs	r2, #156	; 0x9c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f00d f8e9 	bl	800dee6 <memcpy>
 8000d14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d18:	f001 f819 	bl	8001d4e <bno055_read_regs>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <bno055_gyro_x+0x3e>
        return err;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	e019      	b.n	8000d5e <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d2a:	7b7b      	ldrb	r3, [r7, #13]
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	7b3b      	ldrb	r3, [r7, #12]
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <bno055_gyro_x+0x62>
 8000d48:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000d4c:	e001      	b.n	8000d52 <bno055_gyro_x+0x66>
 8000d4e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000d68 <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000d5c:	2300      	movs	r3, #0
};
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd90      	pop	{r4, r7, pc}
 8000d66:	bf00      	nop
 8000d68:	44610000 	.word	0x44610000

08000d6c <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b0af      	sub	sp, #188	; 0xbc
 8000d70:	af2a      	add	r7, sp, #168	; 0xa8
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000d76:	687c      	ldr	r4, [r7, #4]
 8000d78:	2302      	movs	r3, #2
 8000d7a:	9329      	str	r3, [sp, #164]	; 0xa4
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	9328      	str	r3, [sp, #160]	; 0xa0
 8000d82:	2316      	movs	r3, #22
 8000d84:	9327      	str	r3, [sp, #156]	; 0x9c
 8000d86:	4668      	mov	r0, sp
 8000d88:	f104 0310 	add.w	r3, r4, #16
 8000d8c:	229c      	movs	r2, #156	; 0x9c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f00d f8a9 	bl	800dee6 <memcpy>
 8000d94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d98:	f000 ffd9 	bl	8001d4e <bno055_read_regs>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <bno055_gyro_y+0x3e>
        return err;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	e019      	b.n	8000dde <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000daa:	7b7b      	ldrb	r3, [r7, #13]
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	b21a      	sxth	r2, r3
 8000db0:	7b3b      	ldrb	r3, [r7, #12]
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <bno055_gyro_y+0x62>
 8000dc8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000dcc:	e001      	b.n	8000dd2 <bno055_gyro_y+0x66>
 8000dce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000de8 <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000ddc:	2300      	movs	r3, #0
};
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd90      	pop	{r4, r7, pc}
 8000de6:	bf00      	nop
 8000de8:	44610000 	.word	0x44610000

08000dec <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b0af      	sub	sp, #188	; 0xbc
 8000df0:	af2a      	add	r7, sp, #168	; 0xa8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000df6:	687c      	ldr	r4, [r7, #4]
 8000df8:	2302      	movs	r3, #2
 8000dfa:	9329      	str	r3, [sp, #164]	; 0xa4
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	9328      	str	r3, [sp, #160]	; 0xa0
 8000e02:	2318      	movs	r3, #24
 8000e04:	9327      	str	r3, [sp, #156]	; 0x9c
 8000e06:	4668      	mov	r0, sp
 8000e08:	f104 0310 	add.w	r3, r4, #16
 8000e0c:	229c      	movs	r2, #156	; 0x9c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f00d f869 	bl	800dee6 <memcpy>
 8000e14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e18:	f000 ff99 	bl	8001d4e <bno055_read_regs>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <bno055_gyro_z+0x3e>
        return err;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	e019      	b.n	8000e5e <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e2a:	7b7b      	ldrb	r3, [r7, #13]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	7b3b      	ldrb	r3, [r7, #12]
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <bno055_gyro_z+0x62>
 8000e48:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000e4c:	e001      	b.n	8000e52 <bno055_gyro_z+0x66>
 8000e4e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000e68 <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000e5c:	2300      	movs	r3, #0
};
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	bf00      	nop
 8000e68:	44610000 	.word	0x44610000

08000e6c <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b0b1      	sub	sp, #196	; 0xc4
 8000e70:	af2a      	add	r7, sp, #168	; 0xa8
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000e76:	687c      	ldr	r4, [r7, #4]
 8000e78:	2306      	movs	r3, #6
 8000e7a:	9329      	str	r3, [sp, #164]	; 0xa4
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	9328      	str	r3, [sp, #160]	; 0xa0
 8000e82:	2314      	movs	r3, #20
 8000e84:	9327      	str	r3, [sp, #156]	; 0x9c
 8000e86:	4668      	mov	r0, sp
 8000e88:	f104 0310 	add.w	r3, r4, #16
 8000e8c:	229c      	movs	r2, #156	; 0x9c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f00d f829 	bl	800dee6 <memcpy>
 8000e94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e98:	f000 ff59 	bl	8001d4e <bno055_read_regs>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	75fb      	strb	r3, [r7, #23]
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <bno055_gyro+0x3e>
        return err;
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	e03f      	b.n	8000f2a <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d102      	bne.n	8000eb8 <bno055_gyro+0x4c>
 8000eb2:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8000eb6:	e000      	b.n	8000eba <bno055_gyro+0x4e>
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000eba:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000ebc:	7a7b      	ldrb	r3, [r7, #9]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	7a3b      	ldrb	r3, [r7, #8]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	ee07 3a90 	vmov	s15, r3
 8000ece:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ed2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000ee0:	7afb      	ldrb	r3, [r7, #11]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	7abb      	ldrb	r3, [r7, #10]
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ef6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000f04:	7b7b      	ldrb	r3, [r7, #13]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	7b3b      	ldrb	r3, [r7, #12]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	371c      	adds	r7, #28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	44610000 	.word	0x44610000

08000f38 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b0af      	sub	sp, #188	; 0xbc
 8000f3c:	af2a      	add	r7, sp, #168	; 0xa8
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000f42:	687c      	ldr	r4, [r7, #4]
 8000f44:	2302      	movs	r3, #2
 8000f46:	9329      	str	r3, [sp, #164]	; 0xa4
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	9328      	str	r3, [sp, #160]	; 0xa0
 8000f4e:	230e      	movs	r3, #14
 8000f50:	9327      	str	r3, [sp, #156]	; 0x9c
 8000f52:	4668      	mov	r0, sp
 8000f54:	f104 0310 	add.w	r3, r4, #16
 8000f58:	229c      	movs	r2, #156	; 0x9c
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f00c ffc3 	bl	800dee6 <memcpy>
 8000f60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f64:	f000 fef3 	bl	8001d4e <bno055_read_regs>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <bno055_mag_x+0x3e>
        return err;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	e012      	b.n	8000f9c <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8000f76:	7b7b      	ldrb	r3, [r7, #13]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	7b3b      	ldrb	r3, [r7, #12]
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f8c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd90      	pop	{r4, r7, pc}

08000fa4 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b0af      	sub	sp, #188	; 0xbc
 8000fa8:	af2a      	add	r7, sp, #168	; 0xa8
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000fae:	687c      	ldr	r4, [r7, #4]
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	9329      	str	r3, [sp, #164]	; 0xa4
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	9328      	str	r3, [sp, #160]	; 0xa0
 8000fba:	2310      	movs	r3, #16
 8000fbc:	9327      	str	r3, [sp, #156]	; 0x9c
 8000fbe:	4668      	mov	r0, sp
 8000fc0:	f104 0310 	add.w	r3, r4, #16
 8000fc4:	229c      	movs	r2, #156	; 0x9c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f00c ff8d 	bl	800dee6 <memcpy>
 8000fcc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fd0:	f000 febd 	bl	8001d4e <bno055_read_regs>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <bno055_mag_y+0x3e>
        return err;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	e012      	b.n	8001008 <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	7b3b      	ldrb	r3, [r7, #12]
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000ffc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}

08001010 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b0af      	sub	sp, #188	; 0xbc
 8001014:	af2a      	add	r7, sp, #168	; 0xa8
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800101a:	687c      	ldr	r4, [r7, #4]
 800101c:	2302      	movs	r3, #2
 800101e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	9328      	str	r3, [sp, #160]	; 0xa0
 8001026:	2312      	movs	r3, #18
 8001028:	9327      	str	r3, [sp, #156]	; 0x9c
 800102a:	4668      	mov	r0, sp
 800102c:	f104 0310 	add.w	r3, r4, #16
 8001030:	229c      	movs	r2, #156	; 0x9c
 8001032:	4619      	mov	r1, r3
 8001034:	f00c ff57 	bl	800dee6 <memcpy>
 8001038:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800103c:	f000 fe87 	bl	8001d4e <bno055_read_regs>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <bno055_mag_z+0x3e>
        return err;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	e012      	b.n	8001074 <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21a      	sxth	r2, r3
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21b      	sxth	r3, r3
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	bd90      	pop	{r4, r7, pc}

0800107c <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b0af      	sub	sp, #188	; 0xbc
 8001080:	af2a      	add	r7, sp, #168	; 0xa8
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001086:	687c      	ldr	r4, [r7, #4]
 8001088:	2306      	movs	r3, #6
 800108a:	9329      	str	r3, [sp, #164]	; 0xa4
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	9328      	str	r3, [sp, #160]	; 0xa0
 8001092:	230e      	movs	r3, #14
 8001094:	9327      	str	r3, [sp, #156]	; 0x9c
 8001096:	4668      	mov	r0, sp
 8001098:	f104 0310 	add.w	r3, r4, #16
 800109c:	229c      	movs	r2, #156	; 0x9c
 800109e:	4619      	mov	r1, r3
 80010a0:	f00c ff21 	bl	800dee6 <memcpy>
 80010a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010a8:	f000 fe51 	bl	8001d4e <bno055_read_regs>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <bno055_mag+0x3e>
        return err;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	e036      	b.n	8001128 <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80010ba:	7a7b      	ldrb	r3, [r7, #9]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7a3b      	ldrb	r3, [r7, #8]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7abb      	ldrb	r3, [r7, #10]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001102:	7b7b      	ldrb	r3, [r7, #13]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	7b3b      	ldrb	r3, [r7, #12]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21b      	sxth	r3, r3
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001118:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800111c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001126:	2300      	movs	r3, #0
};
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bd90      	pop	{r4, r7, pc}

08001130 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b0b1      	sub	sp, #196	; 0xc4
 8001134:	af2a      	add	r7, sp, #168	; 0xa8
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 800113a:	687c      	ldr	r4, [r7, #4]
 800113c:	2302      	movs	r3, #2
 800113e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	9328      	str	r3, [sp, #160]	; 0xa0
 8001146:	232e      	movs	r3, #46	; 0x2e
 8001148:	9327      	str	r3, [sp, #156]	; 0x9c
 800114a:	4668      	mov	r0, sp
 800114c:	f104 0310 	add.w	r3, r4, #16
 8001150:	229c      	movs	r2, #156	; 0x9c
 8001152:	4619      	mov	r1, r3
 8001154:	f00c fec7 	bl	800dee6 <memcpy>
 8001158:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800115c:	f000 fdf7 	bl	8001d4e <bno055_read_regs>
 8001160:	4603      	mov	r3, r0
 8001162:	75fb      	strb	r3, [r7, #23]
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <bno055_gravity_x+0x3e>
        return err;
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	e01b      	b.n	80011a6 <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <bno055_gravity_x+0x4a>
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <bno055_gravity_x+0x80>)
 8001178:	e001      	b.n	800117e <bno055_gravity_x+0x4e>
 800117a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800117e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001180:	7b7b      	ldrb	r3, [r7, #13]
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	b21a      	sxth	r2, r3
 8001186:	7b3b      	ldrb	r3, [r7, #12]
 8001188:	b21b      	sxth	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b21b      	sxth	r3, r3
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001196:	ed97 7a04 	vldr	s14, [r7, #16]
 800119a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd90      	pop	{r4, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	42c80000 	.word	0x42c80000

080011b4 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b0b1      	sub	sp, #196	; 0xc4
 80011b8:	af2a      	add	r7, sp, #168	; 0xa8
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80011be:	687c      	ldr	r4, [r7, #4]
 80011c0:	2302      	movs	r3, #2
 80011c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80011ca:	2330      	movs	r3, #48	; 0x30
 80011cc:	9327      	str	r3, [sp, #156]	; 0x9c
 80011ce:	4668      	mov	r0, sp
 80011d0:	f104 0310 	add.w	r3, r4, #16
 80011d4:	229c      	movs	r2, #156	; 0x9c
 80011d6:	4619      	mov	r1, r3
 80011d8:	f00c fe85 	bl	800dee6 <memcpy>
 80011dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011e0:	f000 fdb5 	bl	8001d4e <bno055_read_regs>
 80011e4:	4603      	mov	r3, r0
 80011e6:	75fb      	strb	r3, [r7, #23]
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <bno055_gravity_y+0x3e>
        return err;
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	e01b      	b.n	800122a <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <bno055_gravity_y+0x4a>
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <bno055_gravity_y+0x80>)
 80011fc:	e001      	b.n	8001202 <bno055_gravity_y+0x4e>
 80011fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001202:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001204:	7b7b      	ldrb	r3, [r7, #13]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21a      	sxth	r2, r3
 800120a:	7b3b      	ldrb	r3, [r7, #12]
 800120c:	b21b      	sxth	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b21b      	sxth	r3, r3
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800121a:	ed97 7a04 	vldr	s14, [r7, #16]
 800121e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	bf00      	nop
 8001234:	42c80000 	.word	0x42c80000

08001238 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b0b1      	sub	sp, #196	; 0xc4
 800123c:	af2a      	add	r7, sp, #168	; 0xa8
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001242:	687c      	ldr	r4, [r7, #4]
 8001244:	2302      	movs	r3, #2
 8001246:	9329      	str	r3, [sp, #164]	; 0xa4
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	9328      	str	r3, [sp, #160]	; 0xa0
 800124e:	2332      	movs	r3, #50	; 0x32
 8001250:	9327      	str	r3, [sp, #156]	; 0x9c
 8001252:	4668      	mov	r0, sp
 8001254:	f104 0310 	add.w	r3, r4, #16
 8001258:	229c      	movs	r2, #156	; 0x9c
 800125a:	4619      	mov	r1, r3
 800125c:	f00c fe43 	bl	800dee6 <memcpy>
 8001260:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001264:	f000 fd73 	bl	8001d4e <bno055_read_regs>
 8001268:	4603      	mov	r3, r0
 800126a:	75fb      	strb	r3, [r7, #23]
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <bno055_gravity_z+0x3e>
        return err;
 8001272:	7dfb      	ldrb	r3, [r7, #23]
 8001274:	e01b      	b.n	80012ae <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <bno055_gravity_z+0x4a>
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <bno055_gravity_z+0x80>)
 8001280:	e001      	b.n	8001286 <bno055_gravity_z+0x4e>
 8001282:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001286:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001288:	7b7b      	ldrb	r3, [r7, #13]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	7b3b      	ldrb	r3, [r7, #12]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21b      	sxth	r3, r3
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800129e:	ed97 7a04 	vldr	s14, [r7, #16]
 80012a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd90      	pop	{r4, r7, pc}
 80012b6:	bf00      	nop
 80012b8:	42c80000 	.word	0x42c80000

080012bc <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b0b1      	sub	sp, #196	; 0xc4
 80012c0:	af2a      	add	r7, sp, #168	; 0xa8
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 80012c6:	687c      	ldr	r4, [r7, #4]
 80012c8:	2306      	movs	r3, #6
 80012ca:	9329      	str	r3, [sp, #164]	; 0xa4
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	9328      	str	r3, [sp, #160]	; 0xa0
 80012d2:	232e      	movs	r3, #46	; 0x2e
 80012d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80012d6:	4668      	mov	r0, sp
 80012d8:	f104 0310 	add.w	r3, r4, #16
 80012dc:	229c      	movs	r2, #156	; 0x9c
 80012de:	4619      	mov	r1, r3
 80012e0:	f00c fe01 	bl	800dee6 <memcpy>
 80012e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012e8:	f000 fd31 	bl	8001d4e <bno055_read_regs>
 80012ec:	4603      	mov	r3, r0
 80012ee:	75fb      	strb	r3, [r7, #23]
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <bno055_gravity+0x3e>
        return err;
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	e03f      	b.n	800137a <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <bno055_gravity+0x4a>
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <bno055_gravity+0xc8>)
 8001304:	e001      	b.n	800130a <bno055_gravity+0x4e>
 8001306:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800130a:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 800130c:	7a7b      	ldrb	r3, [r7, #9]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	7a3b      	ldrb	r3, [r7, #8]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001322:	ed97 7a04 	vldr	s14, [r7, #16]
 8001326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001330:	7afb      	ldrb	r3, [r7, #11]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	7abb      	ldrb	r3, [r7, #10]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001346:	ed97 7a04 	vldr	s14, [r7, #16]
 800134a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001354:	7b7b      	ldrb	r3, [r7, #13]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	7b3b      	ldrb	r3, [r7, #12]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21b      	sxth	r3, r3
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800136a:	ed97 7a04 	vldr	s14, [r7, #16]
 800136e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	42c80000 	.word	0x42c80000

08001388 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b0b1      	sub	sp, #196	; 0xc4
 800138c:	af2a      	add	r7, sp, #168	; 0xa8
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001392:	687c      	ldr	r4, [r7, #4]
 8001394:	2302      	movs	r3, #2
 8001396:	9329      	str	r3, [sp, #164]	; 0xa4
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	9328      	str	r3, [sp, #160]	; 0xa0
 800139e:	231a      	movs	r3, #26
 80013a0:	9327      	str	r3, [sp, #156]	; 0x9c
 80013a2:	4668      	mov	r0, sp
 80013a4:	f104 0310 	add.w	r3, r4, #16
 80013a8:	229c      	movs	r2, #156	; 0x9c
 80013aa:	4619      	mov	r1, r3
 80013ac:	f00c fd9b 	bl	800dee6 <memcpy>
 80013b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013b4:	f000 fccb 	bl	8001d4e <bno055_read_regs>
 80013b8:	4603      	mov	r3, r0
 80013ba:	75fb      	strb	r3, [r7, #23]
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	e01b      	b.n	80013fe <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <bno055_euler_yaw+0x4c>
 80013ce:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80013d2:	e000      	b.n	80013d6 <bno055_euler_yaw+0x4e>
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80013d6:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80013d8:	7b7b      	ldrb	r3, [r7, #13]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b21a      	sxth	r2, r3
 80013de:	7b3b      	ldrb	r3, [r7, #12]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80013f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	44610000 	.word	0x44610000

0800140c <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b0b1      	sub	sp, #196	; 0xc4
 8001410:	af2a      	add	r7, sp, #168	; 0xa8
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001416:	687c      	ldr	r4, [r7, #4]
 8001418:	2302      	movs	r3, #2
 800141a:	9329      	str	r3, [sp, #164]	; 0xa4
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	9328      	str	r3, [sp, #160]	; 0xa0
 8001422:	231c      	movs	r3, #28
 8001424:	9327      	str	r3, [sp, #156]	; 0x9c
 8001426:	4668      	mov	r0, sp
 8001428:	f104 0310 	add.w	r3, r4, #16
 800142c:	229c      	movs	r2, #156	; 0x9c
 800142e:	4619      	mov	r1, r3
 8001430:	f00c fd59 	bl	800dee6 <memcpy>
 8001434:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001438:	f000 fc89 	bl	8001d4e <bno055_read_regs>
 800143c:	4603      	mov	r3, r0
 800143e:	75fb      	strb	r3, [r7, #23]
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <bno055_euler_roll+0x3e>
        return err;
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	e01b      	b.n	8001482 <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <bno055_euler_roll+0x4c>
 8001452:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001456:	e000      	b.n	800145a <bno055_euler_roll+0x4e>
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800145a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 800145c:	7b7b      	ldrb	r3, [r7, #13]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	7b3b      	ldrb	r3, [r7, #12]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001472:	ed97 7a04 	vldr	s14, [r7, #16]
 8001476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	bf00      	nop
 800148c:	44610000 	.word	0x44610000

08001490 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b0b1      	sub	sp, #196	; 0xc4
 8001494:	af2a      	add	r7, sp, #168	; 0xa8
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 800149a:	687c      	ldr	r4, [r7, #4]
 800149c:	2302      	movs	r3, #2
 800149e:	9329      	str	r3, [sp, #164]	; 0xa4
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	9328      	str	r3, [sp, #160]	; 0xa0
 80014a6:	231e      	movs	r3, #30
 80014a8:	9327      	str	r3, [sp, #156]	; 0x9c
 80014aa:	4668      	mov	r0, sp
 80014ac:	f104 0310 	add.w	r3, r4, #16
 80014b0:	229c      	movs	r2, #156	; 0x9c
 80014b2:	4619      	mov	r1, r3
 80014b4:	f00c fd17 	bl	800dee6 <memcpy>
 80014b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014bc:	f000 fc47 	bl	8001d4e <bno055_read_regs>
 80014c0:	4603      	mov	r3, r0
 80014c2:	75fb      	strb	r3, [r7, #23]
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <bno055_euler_pitch+0x3e>
        return err;
 80014ca:	7dfb      	ldrb	r3, [r7, #23]
 80014cc:	e01b      	b.n	8001506 <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <bno055_euler_pitch+0x4c>
 80014d6:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80014da:	e000      	b.n	80014de <bno055_euler_pitch+0x4e>
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80014de:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80014e0:	7b7b      	ldrb	r3, [r7, #13]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	7b3b      	ldrb	r3, [r7, #12]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80014fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	371c      	adds	r7, #28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	bf00      	nop
 8001510:	44610000 	.word	0x44610000

08001514 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b0b1      	sub	sp, #196	; 0xc4
 8001518:	af2a      	add	r7, sp, #168	; 0xa8
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 800151e:	687c      	ldr	r4, [r7, #4]
 8001520:	2306      	movs	r3, #6
 8001522:	9329      	str	r3, [sp, #164]	; 0xa4
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	9328      	str	r3, [sp, #160]	; 0xa0
 800152a:	231a      	movs	r3, #26
 800152c:	9327      	str	r3, [sp, #156]	; 0x9c
 800152e:	4668      	mov	r0, sp
 8001530:	f104 0310 	add.w	r3, r4, #16
 8001534:	229c      	movs	r2, #156	; 0x9c
 8001536:	4619      	mov	r1, r3
 8001538:	f00c fcd5 	bl	800dee6 <memcpy>
 800153c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001540:	f000 fc05 	bl	8001d4e <bno055_read_regs>
 8001544:	4603      	mov	r3, r0
 8001546:	75fb      	strb	r3, [r7, #23]
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	e03f      	b.n	80015d2 <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <bno055_euler+0x4c>
 800155a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800155e:	e000      	b.n	8001562 <bno055_euler+0x4e>
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001562:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001564:	7a7b      	ldrb	r3, [r7, #9]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	7a3b      	ldrb	r3, [r7, #8]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21b      	sxth	r3, r3
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800157a:	ed97 7a04 	vldr	s14, [r7, #16]
 800157e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	b21a      	sxth	r2, r3
 800158e:	7abb      	ldrb	r3, [r7, #10]
 8001590:	b21b      	sxth	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b21b      	sxth	r3, r3
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800159e:	ed97 7a04 	vldr	s14, [r7, #16]
 80015a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 80015ac:	7b7b      	ldrb	r3, [r7, #13]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	7b3b      	ldrb	r3, [r7, #12]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80015c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}
 80015da:	bf00      	nop
 80015dc:	44610000 	.word	0x44610000

080015e0 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b0af      	sub	sp, #188	; 0xbc
 80015e4:	af2a      	add	r7, sp, #168	; 0xa8
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 80015ea:	687c      	ldr	r4, [r7, #4]
 80015ec:	2302      	movs	r3, #2
 80015ee:	9329      	str	r3, [sp, #164]	; 0xa4
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80015f6:	2320      	movs	r3, #32
 80015f8:	9327      	str	r3, [sp, #156]	; 0x9c
 80015fa:	4668      	mov	r0, sp
 80015fc:	f104 0310 	add.w	r3, r4, #16
 8001600:	229c      	movs	r2, #156	; 0x9c
 8001602:	4619      	mov	r1, r3
 8001604:	f00c fc6f 	bl	800dee6 <memcpy>
 8001608:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800160c:	f000 fb9f 	bl	8001d4e <bno055_read_regs>
 8001610:	4603      	mov	r3, r0
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <bno055_quaternion_w+0x3e>
        return err;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	e012      	b.n	8001644 <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	7b3b      	ldrb	r3, [r7, #12]
 8001626:	b21b      	sxth	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b21b      	sxth	r3, r3
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001634:	eddf 6a05 	vldr	s13, [pc, #20]	; 800164c <bno055_quaternion_w+0x6c>
 8001638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	46800000 	.word	0x46800000

08001650 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b0af      	sub	sp, #188	; 0xbc
 8001654:	af2a      	add	r7, sp, #168	; 0xa8
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 800165a:	687c      	ldr	r4, [r7, #4]
 800165c:	2302      	movs	r3, #2
 800165e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	9328      	str	r3, [sp, #160]	; 0xa0
 8001666:	2322      	movs	r3, #34	; 0x22
 8001668:	9327      	str	r3, [sp, #156]	; 0x9c
 800166a:	4668      	mov	r0, sp
 800166c:	f104 0310 	add.w	r3, r4, #16
 8001670:	229c      	movs	r2, #156	; 0x9c
 8001672:	4619      	mov	r1, r3
 8001674:	f00c fc37 	bl	800dee6 <memcpy>
 8001678:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800167c:	f000 fb67 	bl	8001d4e <bno055_read_regs>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <bno055_quaternion_x+0x3e>
        return err;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	e012      	b.n	80016b4 <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800168e:	7b7b      	ldrb	r3, [r7, #13]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	7b3b      	ldrb	r3, [r7, #12]
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	b21b      	sxth	r3, r3
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a4:	eddf 6a05 	vldr	s13, [pc, #20]	; 80016bc <bno055_quaternion_x+0x6c>
 80016a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	46800000 	.word	0x46800000

080016c0 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b0af      	sub	sp, #188	; 0xbc
 80016c4:	af2a      	add	r7, sp, #168	; 0xa8
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80016ca:	687c      	ldr	r4, [r7, #4]
 80016cc:	2302      	movs	r3, #2
 80016ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	9328      	str	r3, [sp, #160]	; 0xa0
 80016d6:	2324      	movs	r3, #36	; 0x24
 80016d8:	9327      	str	r3, [sp, #156]	; 0x9c
 80016da:	4668      	mov	r0, sp
 80016dc:	f104 0310 	add.w	r3, r4, #16
 80016e0:	229c      	movs	r2, #156	; 0x9c
 80016e2:	4619      	mov	r1, r3
 80016e4:	f00c fbff 	bl	800dee6 <memcpy>
 80016e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016ec:	f000 fb2f 	bl	8001d4e <bno055_read_regs>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <bno055_quaternion_y+0x3e>
        return err;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	e012      	b.n	8001724 <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80016fe:	7b7b      	ldrb	r3, [r7, #13]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b21a      	sxth	r2, r3
 8001704:	7b3b      	ldrb	r3, [r7, #12]
 8001706:	b21b      	sxth	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b21b      	sxth	r3, r3
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001714:	eddf 6a05 	vldr	s13, [pc, #20]	; 800172c <bno055_quaternion_y+0x6c>
 8001718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}
 800172c:	46800000 	.word	0x46800000

08001730 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b0af      	sub	sp, #188	; 0xbc
 8001734:	af2a      	add	r7, sp, #168	; 0xa8
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800173a:	687c      	ldr	r4, [r7, #4]
 800173c:	2302      	movs	r3, #2
 800173e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	9328      	str	r3, [sp, #160]	; 0xa0
 8001746:	2326      	movs	r3, #38	; 0x26
 8001748:	9327      	str	r3, [sp, #156]	; 0x9c
 800174a:	4668      	mov	r0, sp
 800174c:	f104 0310 	add.w	r3, r4, #16
 8001750:	229c      	movs	r2, #156	; 0x9c
 8001752:	4619      	mov	r1, r3
 8001754:	f00c fbc7 	bl	800dee6 <memcpy>
 8001758:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800175c:	f000 faf7 	bl	8001d4e <bno055_read_regs>
 8001760:	4603      	mov	r3, r0
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <bno055_quaternion_z+0x3e>
        return err;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	e012      	b.n	8001794 <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800176e:	7b7b      	ldrb	r3, [r7, #13]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b21b      	sxth	r3, r3
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001784:	eddf 6a05 	vldr	s13, [pc, #20]	; 800179c <bno055_quaternion_z+0x6c>
 8001788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bd90      	pop	{r4, r7, pc}
 800179c:	46800000 	.word	0x46800000

080017a0 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b0b1      	sub	sp, #196	; 0xc4
 80017a4:	af2a      	add	r7, sp, #168	; 0xa8
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 80017aa:	687c      	ldr	r4, [r7, #4]
 80017ac:	2308      	movs	r3, #8
 80017ae:	9329      	str	r3, [sp, #164]	; 0xa4
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	9328      	str	r3, [sp, #160]	; 0xa0
 80017b6:	2320      	movs	r3, #32
 80017b8:	9327      	str	r3, [sp, #156]	; 0x9c
 80017ba:	4668      	mov	r0, sp
 80017bc:	f104 0310 	add.w	r3, r4, #16
 80017c0:	229c      	movs	r2, #156	; 0x9c
 80017c2:	4619      	mov	r1, r3
 80017c4:	f00c fb8f 	bl	800dee6 <memcpy>
 80017c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017cc:	f000 fabf 	bl	8001d4e <bno055_read_regs>
 80017d0:	4603      	mov	r3, r0
 80017d2:	75fb      	strb	r3, [r7, #23]
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <bno055_quaternion+0x3e>
        return err;
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	e048      	b.n	8001870 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80017de:	7b7b      	ldrb	r3, [r7, #13]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	7b3b      	ldrb	r3, [r7, #12]
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f4:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001878 <bno055_quaternion+0xd8>
 80017f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21a      	sxth	r2, r3
 8001808:	7bbb      	ldrb	r3, [r7, #14]
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21b      	sxth	r3, r3
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001818:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001878 <bno055_quaternion+0xd8>
 800181c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8001826:	7c7b      	ldrb	r3, [r7, #17]
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	b21a      	sxth	r2, r3
 800182c:	7c3b      	ldrb	r3, [r7, #16]
 800182e:	b21b      	sxth	r3, r3
 8001830:	4313      	orrs	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800183c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001878 <bno055_quaternion+0xd8>
 8001840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 800184a:	7cfb      	ldrb	r3, [r7, #19]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	b21a      	sxth	r2, r3
 8001850:	7cbb      	ldrb	r3, [r7, #18]
 8001852:	b21b      	sxth	r3, r3
 8001854:	4313      	orrs	r3, r2
 8001856:	b21b      	sxth	r3, r3
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001860:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001878 <bno055_quaternion+0xd8>
 8001864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	46800000 	.word	0x46800000

0800187c <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b0af      	sub	sp, #188	; 0xbc
 8001880:	af2a      	add	r7, sp, #168	; 0xa8
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4603      	mov	r3, r0
 800188c:	70fb      	strb	r3, [r7, #3]
 800188e:	460b      	mov	r3, r1
 8001890:	70bb      	strb	r3, [r7, #2]
 8001892:	4613      	mov	r3, r2
 8001894:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001896:	2101      	movs	r1, #1
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fabb 	bl	8001e14 <bno055_set_page>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <bno055_acc_conf+0x30>
        return err;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	e04b      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80018ac:	2100      	movs	r1, #0
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f91b 	bl	8001aea <bno055_set_opmode>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <bno055_acc_conf+0x46>
        return err;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	e040      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80018c2:	200c      	movs	r0, #12
 80018c4:	f003 fc6a 	bl	800519c <HAL_Delay>
    u8 config = range | bandwidth | mode;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	78bb      	ldrb	r3, [r7, #2]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	787b      	ldrb	r3, [r7, #1]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 80018d8:	687c      	ldr	r4, [r7, #4]
 80018da:	2301      	movs	r3, #1
 80018dc:	9329      	str	r3, [sp, #164]	; 0xa4
 80018de:	f107 030e 	add.w	r3, r7, #14
 80018e2:	9328      	str	r3, [sp, #160]	; 0xa0
 80018e4:	2308      	movs	r3, #8
 80018e6:	9327      	str	r3, [sp, #156]	; 0x9c
 80018e8:	4668      	mov	r0, sp
 80018ea:	f104 0310 	add.w	r3, r4, #16
 80018ee:	229c      	movs	r2, #156	; 0x9c
 80018f0:	4619      	mov	r1, r3
 80018f2:	f00c faf8 	bl	800dee6 <memcpy>
 80018f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018fa:	f000 fa5e 	bl	8001dba <bno055_write_regs>
 80018fe:	4603      	mov	r3, r0
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <bno055_acc_conf+0x90>
        return err;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	e01b      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	791b      	ldrb	r3, [r3, #4]
 8001910:	4619      	mov	r1, r3
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f8e9 	bl	8001aea <bno055_set_opmode>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <bno055_acc_conf+0xaa>
        return err;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	e00e      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001926:	2018      	movs	r0, #24
 8001928:	f003 fc38 	bl	800519c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800192c:	2100      	movs	r1, #0
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fa70 	bl	8001e14 <bno055_set_page>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <bno055_acc_conf+0xc6>
        return err;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	e000      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}

0800194c <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b0af      	sub	sp, #188	; 0xbc
 8001950:	af2a      	add	r7, sp, #168	; 0xa8
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4603      	mov	r3, r0
 800195c:	70fb      	strb	r3, [r7, #3]
 800195e:	460b      	mov	r3, r1
 8001960:	70bb      	strb	r3, [r7, #2]
 8001962:	4613      	mov	r3, r2
 8001964:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001966:	2101      	movs	r1, #1
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fa53 	bl	8001e14 <bno055_set_page>
 800196e:	4603      	mov	r3, r0
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <bno055_gyr_conf+0x30>
        return err;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	e04a      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800197c:	2100      	movs	r1, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f8b3 	bl	8001aea <bno055_set_opmode>
 8001984:	4603      	mov	r3, r0
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <bno055_gyr_conf+0x46>
        return err;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	e03f      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001992:	200c      	movs	r0, #12
 8001994:	f003 fc02 	bl	800519c <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	78bb      	ldrb	r3, [r7, #2]
 800199c:	4313      	orrs	r3, r2
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	733b      	strb	r3, [r7, #12]
 80019a2:	787b      	ldrb	r3, [r7, #1]
 80019a4:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 80019a6:	687c      	ldr	r4, [r7, #4]
 80019a8:	2302      	movs	r3, #2
 80019aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80019b2:	230a      	movs	r3, #10
 80019b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80019b6:	4668      	mov	r0, sp
 80019b8:	f104 0310 	add.w	r3, r4, #16
 80019bc:	229c      	movs	r2, #156	; 0x9c
 80019be:	4619      	mov	r1, r3
 80019c0:	f00c fa91 	bl	800dee6 <memcpy>
 80019c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019c8:	f000 f9f7 	bl	8001dba <bno055_write_regs>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	e01b      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	791b      	ldrb	r3, [r3, #4]
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f882 	bl	8001aea <bno055_set_opmode>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <bno055_gyr_conf+0xa8>
        return err;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	e00e      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80019f4:	2018      	movs	r0, #24
 80019f6:	f003 fbd1 	bl	800519c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80019fa:	2100      	movs	r1, #0
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 fa09 	bl	8001e14 <bno055_set_page>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <bno055_gyr_conf+0xc4>
        return err;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	e000      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}

08001a1a <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 8001a1a:	b590      	push	{r4, r7, lr}
 8001a1c:	b0af      	sub	sp, #188	; 0xbc
 8001a1e:	af2a      	add	r7, sp, #168	; 0xa8
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	4608      	mov	r0, r1
 8001a24:	4611      	mov	r1, r2
 8001a26:	461a      	mov	r2, r3
 8001a28:	4603      	mov	r3, r0
 8001a2a:	70fb      	strb	r3, [r7, #3]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70bb      	strb	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001a34:	2101      	movs	r1, #1
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f9ec 	bl	8001e14 <bno055_set_page>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <bno055_mag_conf+0x30>
        return err;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	e04b      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f84c 	bl	8001aea <bno055_set_opmode>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <bno055_mag_conf+0x46>
        return err;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	e040      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001a60:	200c      	movs	r0, #12
 8001a62:	f003 fb9b 	bl	800519c <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	78bb      	ldrb	r3, [r7, #2]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	787b      	ldrb	r3, [r7, #1]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 8001a76:	687c      	ldr	r4, [r7, #4]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a7c:	f107 030e 	add.w	r3, r7, #14
 8001a80:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a82:	2309      	movs	r3, #9
 8001a84:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a86:	4668      	mov	r0, sp
 8001a88:	f104 0310 	add.w	r3, r4, #16
 8001a8c:	229c      	movs	r2, #156	; 0x9c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f00c fa29 	bl	800dee6 <memcpy>
 8001a94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a98:	f000 f98f 	bl	8001dba <bno055_write_regs>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <bno055_mag_conf+0x90>
        return err;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	e01b      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	791b      	ldrb	r3, [r3, #4]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f81a 	bl	8001aea <bno055_set_opmode>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <bno055_mag_conf+0xaa>
        return err;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	e00e      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001ac4:	2018      	movs	r0, #24
 8001ac6:	f003 fb69 	bl	800519c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8001aca:	2100      	movs	r1, #0
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f9a1 	bl	8001e14 <bno055_set_page>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <bno055_mag_conf+0xc6>
        return err;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	e000      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd90      	pop	{r4, r7, pc}

08001aea <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 8001aea:	b590      	push	{r4, r7, lr}
 8001aec:	b0af      	sub	sp, #188	; 0xbc
 8001aee:	af2a      	add	r7, sp, #168	; 0xa8
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 8001af6:	687c      	ldr	r4, [r7, #4]
 8001af8:	2301      	movs	r3, #1
 8001afa:	9329      	str	r3, [sp, #164]	; 0xa4
 8001afc:	1cfb      	adds	r3, r7, #3
 8001afe:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b00:	233d      	movs	r3, #61	; 0x3d
 8001b02:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b04:	4668      	mov	r0, sp
 8001b06:	f104 0310 	add.w	r3, r4, #16
 8001b0a:	229c      	movs	r2, #156	; 0x9c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f00c f9ea 	bl	800dee6 <memcpy>
 8001b12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b16:	f000 f950 	bl	8001dba <bno055_write_regs>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	e003      	b.n	8001b30 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001b28:	2018      	movs	r0, #24
 8001b2a:	f003 fb37 	bl	800519c <HAL_Delay>
    return BNO_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd90      	pop	{r4, r7, pc}

08001b38 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b0af      	sub	sp, #188	; 0xbc
 8001b3c:	af2a      	add	r7, sp, #168	; 0xa8
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	4608      	mov	r0, r1
 8001b42:	4611      	mov	r1, r2
 8001b44:	461a      	mov	r2, r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	70fb      	strb	r3, [r7, #3]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	70bb      	strb	r3, [r7, #2]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001b52:	2100      	movs	r1, #0
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ffc8 	bl	8001aea <bno055_set_opmode>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <bno055_set_unit+0x30>
        return err;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	e04b      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8001b68:	2100      	movs	r1, #0
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f952 	bl	8001e14 <bno055_set_page>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <bno055_set_unit+0x46>
        return err;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	e040      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	78bb      	ldrb	r3, [r7, #2]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	787b      	ldrb	r3, [r7, #1]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 8001b96:	687c      	ldr	r4, [r7, #4]
 8001b98:	2301      	movs	r3, #1
 8001b9a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b9c:	f107 030e 	add.w	r3, r7, #14
 8001ba0:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ba2:	233b      	movs	r3, #59	; 0x3b
 8001ba4:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ba6:	4668      	mov	r0, sp
 8001ba8:	f104 0310 	add.w	r3, r4, #16
 8001bac:	229c      	movs	r2, #156	; 0x9c
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f00c f999 	bl	800dee6 <memcpy>
 8001bb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bb8:	f000 f8ff 	bl	8001dba <bno055_write_regs>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <bno055_set_unit+0x92>
        return err;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	e01a      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	78ba      	ldrb	r2, [r7, #2]
 8001bce:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	787a      	ldrb	r2, [r7, #1]
 8001bd4:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bdc:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	791b      	ldrb	r3, [r3, #4]
 8001be8:	4619      	mov	r1, r3
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ff7d 	bl	8001aea <bno055_set_opmode>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <bno055_set_unit+0xc6>
        return err;
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	e000      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b0af      	sub	sp, #188	; 0xbc
 8001c0c:	af2a      	add	r7, sp, #168	; 0xa8
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e04d      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8001c1e:	2100      	movs	r1, #0
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff62 	bl	8001aea <bno055_set_opmode>
 8001c26:	4603      	mov	r3, r0
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <bno055_set_pwr_mode+0x2c>
        return err;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	e042      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001c34:	2100      	movs	r1, #0
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8ec 	bl	8001e14 <bno055_set_page>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <bno055_set_pwr_mode+0x42>
        return err;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	e037      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 8001c4a:	687c      	ldr	r4, [r7, #4]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c50:	1cfb      	adds	r3, r7, #3
 8001c52:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c54:	233e      	movs	r3, #62	; 0x3e
 8001c56:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c58:	4668      	mov	r0, sp
 8001c5a:	f104 0310 	add.w	r3, r4, #16
 8001c5e:	229c      	movs	r2, #156	; 0x9c
 8001c60:	4619      	mov	r1, r3
 8001c62:	f00c f940 	bl	800dee6 <memcpy>
 8001c66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c6a:	f000 f8a6 	bl	8001dba <bno055_write_regs>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	e01e      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001c82:	2100      	movs	r1, #0
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f8c5 	bl	8001e14 <bno055_set_page>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <bno055_set_pwr_mode+0x90>
        return err;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	e010      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	791b      	ldrb	r3, [r3, #4]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff23 	bl	8001aea <bno055_set_opmode>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <bno055_set_pwr_mode+0xaa>
        return err;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	e003      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f003 fa72 	bl	800519c <HAL_Delay>
    return BNO_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}

08001cc2 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 8001cc2:	b590      	push	{r4, r7, lr}
 8001cc4:	b0af      	sub	sp, #188	; 0xbc
 8001cc6:	af2a      	add	r7, sp, #168	; 0xa8
 8001cc8:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8001cce:	687c      	ldr	r4, [r7, #4]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001cd4:	f107 030f 	add.w	r3, r7, #15
 8001cd8:	9328      	str	r3, [sp, #160]	; 0xa0
 8001cda:	233f      	movs	r3, #63	; 0x3f
 8001cdc:	9327      	str	r3, [sp, #156]	; 0x9c
 8001cde:	4668      	mov	r0, sp
 8001ce0:	f104 0310 	add.w	r3, r4, #16
 8001ce4:	229c      	movs	r2, #156	; 0x9c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f00c f8fd 	bl	800dee6 <memcpy>
 8001cec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cf0:	f000 f863 	bl	8001dba <bno055_write_regs>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}

08001d08 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b0af      	sub	sp, #188	; 0xbc
 8001d0c:	af2a      	add	r7, sp, #168	; 0xa8
 8001d0e:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8001d14:	687c      	ldr	r4, [r7, #4]
 8001d16:	2301      	movs	r3, #1
 8001d18:	9329      	str	r3, [sp, #164]	; 0xa4
 8001d1a:	f107 030f 	add.w	r3, r7, #15
 8001d1e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001d20:	233f      	movs	r3, #63	; 0x3f
 8001d22:	9327      	str	r3, [sp, #156]	; 0x9c
 8001d24:	4668      	mov	r0, sp
 8001d26:	f104 0310 	add.w	r3, r4, #16
 8001d2a:	229c      	movs	r2, #156	; 0x9c
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f00c f8da 	bl	800dee6 <memcpy>
 8001d32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d36:	f000 f840 	bl	8001dba <bno055_write_regs>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <bno055_on+0x3e>
    }
    return BNO_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd90      	pop	{r4, r7, pc}

08001d4e <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8001d4e:	b084      	sub	sp, #16
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	f107 0c10 	add.w	ip, r7, #16
 8001d5a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8001d5e:	6938      	ldr	r0, [r7, #16]
 8001d60:	7dbb      	ldrb	r3, [r7, #22]
 8001d62:	b299      	uxth	r1, r3
 8001d64:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f006 fa38 	bl	80081e4 <HAL_I2C_Master_Transmit>
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e014      	b.n	8001dac <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 8001d82:	6938      	ldr	r0, [r7, #16]
 8001d84:	7dbb      	ldrb	r3, [r7, #22]
 8001d86:	b299      	uxth	r1, r3
 8001d88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d92:	9200      	str	r2, [sp, #0]
 8001d94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001d98:	f006 fb3c 	bl	8008414 <HAL_I2C_Master_Receive>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001db6:	b004      	add	sp, #16
 8001db8:	4770      	bx	lr

08001dba <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 8001dba:	b084      	sub	sp, #16
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	f107 0418 	add.w	r4, r7, #24
 8001dc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 8001dca:	69b8      	ldr	r0, [r7, #24]
 8001dcc:	7fbb      	ldrb	r3, [r7, #30]
 8001dce:	b299      	uxth	r1, r3
 8001dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001dda:	b29c      	uxth	r4, r3
 8001ddc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	f04f 35ff 	mov.w	r5, #4294967295
 8001de6:	9502      	str	r5, [sp, #8]
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	4623      	mov	r3, r4
 8001df2:	f006 fe09 	bl	8008a08 <HAL_I2C_Mem_Write>
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e10:	b004      	add	sp, #16
 8001e12:	4770      	bx	lr

08001e14 <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b0af      	sub	sp, #188	; 0xbc
 8001e18:	af2a      	add	r7, sp, #168	; 0xa8
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7b5a      	ldrb	r2, [r3, #13]
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <bno055_set_page+0x1a>
        return BNO_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e024      	b.n	8001e78 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d901      	bls.n	8001e38 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8001e34:	2302      	movs	r3, #2
 8001e36:	e01f      	b.n	8001e78 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8001e38:	687c      	ldr	r4, [r7, #4]
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e3e:	1cfb      	adds	r3, r7, #3
 8001e40:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e42:	2307      	movs	r3, #7
 8001e44:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e46:	4668      	mov	r0, sp
 8001e48:	f104 0310 	add.w	r3, r4, #16
 8001e4c:	229c      	movs	r2, #156	; 0x9c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f00c f849 	bl	800dee6 <memcpy>
 8001e54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e58:	f7ff ffaf 	bl	8001dba <bno055_write_regs>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <bno055_set_page+0x56>
        return err;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	e006      	b.n	8001e78 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8001e70:	2002      	movs	r0, #2
 8001e72:	f003 f993 	bl	800519c <HAL_Delay>
    return BNO_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd90      	pop	{r4, r7, pc}

08001e80 <CAN_INIT>:
uint8_t RxData_Master[64];




uint8_t CAN_INIT(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	TxHeader_Master_State.Identifier = 0x10000000;
 8001e84:	4b78      	ldr	r3, [pc, #480]	; (8002068 <CAN_INIT+0x1e8>)
 8001e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e8a:	601a      	str	r2, [r3, #0]
	TxHeader_Master_State.IdType = FDCAN_EXTENDED_ID;
 8001e8c:	4b76      	ldr	r3, [pc, #472]	; (8002068 <CAN_INIT+0x1e8>)
 8001e8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e92:	605a      	str	r2, [r3, #4]
	TxHeader_Master_State.TxFrameType = FDCAN_DATA_FRAME;
 8001e94:	4b74      	ldr	r3, [pc, #464]	; (8002068 <CAN_INIT+0x1e8>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
	TxHeader_Master_State.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001e9a:	4b73      	ldr	r3, [pc, #460]	; (8002068 <CAN_INIT+0x1e8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
	TxHeader_Master_State.DataLength = FDCAN_DLC_BYTES_1;
 8001ea0:	4b71      	ldr	r3, [pc, #452]	; (8002068 <CAN_INIT+0x1e8>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	60da      	str	r2, [r3, #12]
	TxHeader_Master_State.BitRateSwitch = FDCAN_BRS_ON;
 8001ea6:	4b70      	ldr	r3, [pc, #448]	; (8002068 <CAN_INIT+0x1e8>)
 8001ea8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eac:	615a      	str	r2, [r3, #20]
	TxHeader_Master_State.FDFormat = FDCAN_FD_CAN;
 8001eae:	4b6e      	ldr	r3, [pc, #440]	; (8002068 <CAN_INIT+0x1e8>)
 8001eb0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001eb4:	619a      	str	r2, [r3, #24]


	TxHeader_Master_Data.Identifier = 0x10000000;
 8001eb6:	4b6d      	ldr	r3, [pc, #436]	; (800206c <CAN_INIT+0x1ec>)
 8001eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ebc:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.IdType = FDCAN_EXTENDED_ID;
 8001ebe:	4b6b      	ldr	r3, [pc, #428]	; (800206c <CAN_INIT+0x1ec>)
 8001ec0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ec4:	605a      	str	r2, [r3, #4]
	TxHeader_Master_Data.TxFrameType = FDCAN_DATA_FRAME;
 8001ec6:	4b69      	ldr	r3, [pc, #420]	; (800206c <CAN_INIT+0x1ec>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
	TxHeader_Master_Data.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001ecc:	4b67      	ldr	r3, [pc, #412]	; (800206c <CAN_INIT+0x1ec>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_1;
 8001ed2:	4b66      	ldr	r3, [pc, #408]	; (800206c <CAN_INIT+0x1ec>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	60da      	str	r2, [r3, #12]
	TxHeader_Master_Data.BitRateSwitch = FDCAN_BRS_ON;
 8001ed8:	4b64      	ldr	r3, [pc, #400]	; (800206c <CAN_INIT+0x1ec>)
 8001eda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ede:	615a      	str	r2, [r3, #20]
	TxHeader_Master_Data.FDFormat = FDCAN_FD_CAN;
 8001ee0:	4b62      	ldr	r3, [pc, #392]	; (800206c <CAN_INIT+0x1ec>)
 8001ee2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ee6:	619a      	str	r2, [r3, #24]

	TxHeader_Pod.Identifier = 0x10000000;
 8001ee8:	4b61      	ldr	r3, [pc, #388]	; (8002070 <CAN_INIT+0x1f0>)
 8001eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eee:	601a      	str	r2, [r3, #0]
	TxHeader_Pod.IdType = FDCAN_EXTENDED_ID;
 8001ef0:	4b5f      	ldr	r3, [pc, #380]	; (8002070 <CAN_INIT+0x1f0>)
 8001ef2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef6:	605a      	str	r2, [r3, #4]
	TxHeader_Pod.TxFrameType = FDCAN_DATA_FRAME;
 8001ef8:	4b5d      	ldr	r3, [pc, #372]	; (8002070 <CAN_INIT+0x1f0>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
	TxHeader_Pod.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001efe:	4b5c      	ldr	r3, [pc, #368]	; (8002070 <CAN_INIT+0x1f0>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
	TxHeader_Pod.DataLength = FDCAN_DLC_BYTES_8;
 8001f04:	4b5a      	ldr	r3, [pc, #360]	; (8002070 <CAN_INIT+0x1f0>)
 8001f06:	2208      	movs	r2, #8
 8001f08:	60da      	str	r2, [r3, #12]
	TxHeader_Pod.BitRateSwitch = FDCAN_BRS_OFF;
 8001f0a:	4b59      	ldr	r3, [pc, #356]	; (8002070 <CAN_INIT+0x1f0>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	615a      	str	r2, [r3, #20]
	TxHeader_Pod.FDFormat = FDCAN_CLASSIC_CAN;
 8001f10:	4b57      	ldr	r3, [pc, #348]	; (8002070 <CAN_INIT+0x1f0>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]

	Filter_ESC.IdType = FDCAN_EXTENDED_ID;
 8001f16:	4b57      	ldr	r3, [pc, #348]	; (8002074 <CAN_INIT+0x1f4>)
 8001f18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f1c:	601a      	str	r2, [r3, #0]
	Filter_ESC.FilterIndex = 0;
 8001f1e:	4b55      	ldr	r3, [pc, #340]	; (8002074 <CAN_INIT+0x1f4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	605a      	str	r2, [r3, #4]
	Filter_ESC.FilterType = FDCAN_FILTER_MASK;
 8001f24:	4b53      	ldr	r3, [pc, #332]	; (8002074 <CAN_INIT+0x1f4>)
 8001f26:	2202      	movs	r2, #2
 8001f28:	609a      	str	r2, [r3, #8]
	Filter_ESC.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8001f2a:	4b52      	ldr	r3, [pc, #328]	; (8002074 <CAN_INIT+0x1f4>)
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	60da      	str	r2, [r3, #12]
	Filter_ESC.FilterID1 = 0x000000FF;
 8001f30:	4b50      	ldr	r3, [pc, #320]	; (8002074 <CAN_INIT+0x1f4>)
 8001f32:	22ff      	movs	r2, #255	; 0xff
 8001f34:	611a      	str	r2, [r3, #16]
	Filter_ESC.FilterID2 = ESC_ID;
 8001f36:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <CAN_INIT+0x1f4>)
 8001f38:	2265      	movs	r2, #101	; 0x65
 8001f3a:	615a      	str	r2, [r3, #20]

	Filter_BATT.IdType = FDCAN_EXTENDED_ID;
 8001f3c:	4b4e      	ldr	r3, [pc, #312]	; (8002078 <CAN_INIT+0x1f8>)
 8001f3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f42:	601a      	str	r2, [r3, #0]
	Filter_BATT.FilterIndex = 1;
 8001f44:	4b4c      	ldr	r3, [pc, #304]	; (8002078 <CAN_INIT+0x1f8>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	605a      	str	r2, [r3, #4]
	Filter_BATT.FilterType = FDCAN_FILTER_DUAL;
 8001f4a:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <CAN_INIT+0x1f8>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	609a      	str	r2, [r3, #8]
	Filter_BATT.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8001f50:	4b49      	ldr	r3, [pc, #292]	; (8002078 <CAN_INIT+0x1f8>)
 8001f52:	2202      	movs	r2, #2
 8001f54:	60da      	str	r2, [r3, #12]
	Filter_BATT.FilterID1 = IMD_ID;
 8001f56:	4b48      	ldr	r3, [pc, #288]	; (8002078 <CAN_INIT+0x1f8>)
 8001f58:	4a48      	ldr	r2, [pc, #288]	; (800207c <CAN_INIT+0x1fc>)
 8001f5a:	611a      	str	r2, [r3, #16]
	Filter_BATT.FilterID2 = BMS_ID;
 8001f5c:	4b46      	ldr	r3, [pc, #280]	; (8002078 <CAN_INIT+0x1f8>)
 8001f5e:	2299      	movs	r2, #153	; 0x99
 8001f60:	615a      	str	r2, [r3, #20]

	Filter_STATE.IdType = FDCAN_EXTENDED_ID;
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <CAN_INIT+0x200>)
 8001f64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f68:	601a      	str	r2, [r3, #0]
	Filter_STATE.FilterIndex = 2;
 8001f6a:	4b45      	ldr	r3, [pc, #276]	; (8002080 <CAN_INIT+0x200>)
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	605a      	str	r2, [r3, #4]
	Filter_STATE.FilterType = FDCAN_FILTER_MASK;
 8001f70:	4b43      	ldr	r3, [pc, #268]	; (8002080 <CAN_INIT+0x200>)
 8001f72:	2202      	movs	r2, #2
 8001f74:	609a      	str	r2, [r3, #8]
	Filter_STATE.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001f76:	4b42      	ldr	r3, [pc, #264]	; (8002080 <CAN_INIT+0x200>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	60da      	str	r2, [r3, #12]
	Filter_STATE.FilterID1 = 0x000000FF;
 8001f7c:	4b40      	ldr	r3, [pc, #256]	; (8002080 <CAN_INIT+0x200>)
 8001f7e:	22ff      	movs	r2, #255	; 0xff
 8001f80:	611a      	str	r2, [r3, #16]
	Filter_STATE.FilterID2 = 0x00;
 8001f82:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <CAN_INIT+0x200>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]

	Filter_DATA.IdType = FDCAN_EXTENDED_ID;
 8001f88:	4b3e      	ldr	r3, [pc, #248]	; (8002084 <CAN_INIT+0x204>)
 8001f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f8e:	601a      	str	r2, [r3, #0]
	Filter_DATA.FilterIndex = 3;
 8001f90:	4b3c      	ldr	r3, [pc, #240]	; (8002084 <CAN_INIT+0x204>)
 8001f92:	2203      	movs	r2, #3
 8001f94:	605a      	str	r2, [r3, #4]
	Filter_DATA.FilterType = FDCAN_FILTER_MASK;
 8001f96:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <CAN_INIT+0x204>)
 8001f98:	2202      	movs	r2, #2
 8001f9a:	609a      	str	r2, [r3, #8]
	Filter_DATA.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001f9c:	4b39      	ldr	r3, [pc, #228]	; (8002084 <CAN_INIT+0x204>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	60da      	str	r2, [r3, #12]
	Filter_DATA.FilterID1 = 0x000000FF;
 8001fa2:	4b38      	ldr	r3, [pc, #224]	; (8002084 <CAN_INIT+0x204>)
 8001fa4:	22ff      	movs	r2, #255	; 0xff
 8001fa6:	611a      	str	r2, [r3, #16]
	Filter_DATA.FilterID2 = FOLLOWER_ID;
 8001fa8:	4b36      	ldr	r3, [pc, #216]	; (8002084 <CAN_INIT+0x204>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	615a      	str	r2, [r3, #20]


	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){
 8001fae:	4836      	ldr	r0, [pc, #216]	; (8002088 <CAN_INIT+0x208>)
 8001fb0:	f005 fa1c 	bl	80073ec <HAL_FDCAN_Start>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <CAN_INIT+0x13e>
		return 1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e052      	b.n	8002064 <CAN_INIT+0x1e4>
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4831      	ldr	r0, [pc, #196]	; (8002088 <CAN_INIT+0x208>)
 8001fc4:	f005 fb86 	bl	80076d4 <HAL_FDCAN_ActivateNotification>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <CAN_INIT+0x152>
		return 1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e048      	b.n	8002064 <CAN_INIT+0x1e4>
	}
	if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK){
 8001fd2:	482e      	ldr	r0, [pc, #184]	; (800208c <CAN_INIT+0x20c>)
 8001fd4:	f005 fa0a 	bl	80073ec <HAL_FDCAN_Start>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <CAN_INIT+0x162>
		return 1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e040      	b.n	8002064 <CAN_INIT+0x1e4>
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	4829      	ldr	r0, [pc, #164]	; (800208c <CAN_INIT+0x20c>)
 8001fe8:	f005 fb74 	bl	80076d4 <HAL_FDCAN_ActivateNotification>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <CAN_INIT+0x176>
		return 1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e036      	b.n	8002064 <CAN_INIT+0x1e4>
	}
	if(HAL_FDCAN_Start(&hfdcan3)!= HAL_OK){
 8001ff6:	4826      	ldr	r0, [pc, #152]	; (8002090 <CAN_INIT+0x210>)
 8001ff8:	f005 f9f8 	bl	80073ec <HAL_FDCAN_Start>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <CAN_INIT+0x186>
		return 1;
 8002002:	2301      	movs	r3, #1
 8002004:	e02e      	b.n	8002064 <CAN_INIT+0x1e4>
	}
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &Filter_STATE) != HAL_OK){
 8002006:	491e      	ldr	r1, [pc, #120]	; (8002080 <CAN_INIT+0x200>)
 8002008:	481f      	ldr	r0, [pc, #124]	; (8002088 <CAN_INIT+0x208>)
 800200a:	f005 f995 	bl	8007338 <HAL_FDCAN_ConfigFilter>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <CAN_INIT+0x198>
		return 1;
 8002014:	2301      	movs	r3, #1
 8002016:	e025      	b.n	8002064 <CAN_INIT+0x1e4>
	}
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &Filter_DATA) != HAL_OK){
 8002018:	491a      	ldr	r1, [pc, #104]	; (8002084 <CAN_INIT+0x204>)
 800201a:	481c      	ldr	r0, [pc, #112]	; (800208c <CAN_INIT+0x20c>)
 800201c:	f005 f98c 	bl	8007338 <HAL_FDCAN_ConfigFilter>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <CAN_INIT+0x1aa>
			return 1;
 8002026:	2301      	movs	r3, #1
 8002028:	e01c      	b.n	8002064 <CAN_INIT+0x1e4>
	}
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &Filter_BATT) != HAL_OK){
 800202a:	4913      	ldr	r1, [pc, #76]	; (8002078 <CAN_INIT+0x1f8>)
 800202c:	4818      	ldr	r0, [pc, #96]	; (8002090 <CAN_INIT+0x210>)
 800202e:	f005 f983 	bl	8007338 <HAL_FDCAN_ConfigFilter>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <CAN_INIT+0x1bc>
			return 1;
 8002038:	2301      	movs	r3, #1
 800203a:	e013      	b.n	8002064 <CAN_INIT+0x1e4>
	}
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &Filter_ESC) != HAL_OK){
 800203c:	490d      	ldr	r1, [pc, #52]	; (8002074 <CAN_INIT+0x1f4>)
 800203e:	4814      	ldr	r0, [pc, #80]	; (8002090 <CAN_INIT+0x210>)
 8002040:	f005 f97a 	bl	8007338 <HAL_FDCAN_ConfigFilter>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <CAN_INIT+0x1ce>
			return 1;
 800204a:	2301      	movs	r3, #1
 800204c:	e00a      	b.n	8002064 <CAN_INIT+0x1e4>
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK){
 800204e:	2200      	movs	r2, #0
 8002050:	2108      	movs	r1, #8
 8002052:	480f      	ldr	r0, [pc, #60]	; (8002090 <CAN_INIT+0x210>)
 8002054:	f005 fb3e 	bl	80076d4 <HAL_FDCAN_ActivateNotification>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <CAN_INIT+0x1e2>
		return 1;
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <CAN_INIT+0x1e4>
	}
	return 0;
 8002062:	2300      	movs	r3, #0

}
 8002064:	4618      	mov	r0, r3
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000134 	.word	0x20000134
 800206c:	20000158 	.word	0x20000158
 8002070:	2000017c 	.word	0x2000017c
 8002074:	200001f0 	.word	0x200001f0
 8002078:	20000208 	.word	0x20000208
 800207c:	0a100101 	.word	0x0a100101
 8002080:	20000220 	.word	0x20000220
 8002084:	20000238 	.word	0x20000238
 8002088:	2000043c 	.word	0x2000043c
 800208c:	200004a0 	.word	0x200004a0
 8002090:	20000504 	.word	0x20000504

08002094 <IMD_Req_Isolation>:
		return 1;
	}
	return 0;
}

uint8_t IMD_Req_Isolation(){
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
	TxHeader_Pod.Identifier = IMD_ID;
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <IMD_Req_Isolation+0x38>)
 800209c:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <IMD_Req_Isolation+0x3c>)
 800209e:	601a      	str	r2, [r3, #0]
	TxHeader_Pod.DataLength = FDCAN_DLC_BYTES_1;
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <IMD_Req_Isolation+0x38>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	60da      	str	r2, [r3, #12]
	uint8_t temp_data[] = {0xE0};
 80020a6:	23e0      	movs	r3, #224	; 0xe0
 80020a8:	713b      	strb	r3, [r7, #4]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader_Pod, temp_data)!= HAL_OK){
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	461a      	mov	r2, r3
 80020ae:	4907      	ldr	r1, [pc, #28]	; (80020cc <IMD_Req_Isolation+0x38>)
 80020b0:	4808      	ldr	r0, [pc, #32]	; (80020d4 <IMD_Req_Isolation+0x40>)
 80020b2:	f005 f9c3 	bl	800743c <HAL_FDCAN_AddMessageToTxFifoQ>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <IMD_Req_Isolation+0x2c>
		return 1;
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <IMD_Req_Isolation+0x2e>
	}
	return 0;
 80020c0:	2300      	movs	r3, #0

}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000017c 	.word	0x2000017c
 80020d0:	0a100101 	.word	0x0a100101
 80020d4:	20000504 	.word	0x20000504

080020d8 <Sensor_Data>:
	return 0;


}

uint8_t Sensor_Data(){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
	TxHeader_Master_Data.Identifier = 0x01000100 | FOLLOWER_ID;
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <Sensor_Data+0x38>)
 80020e0:	4a0c      	ldr	r2, [pc, #48]	; (8002114 <Sensor_Data+0x3c>)
 80020e2:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.TxFrameType = FDCAN_DATA_FRAME;
 80020e4:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <Sensor_Data+0x38>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_16;
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <Sensor_Data+0x38>)
 80020ec:	220a      	movs	r2, #10
 80020ee:	60da      	str	r2, [r3, #12]
	uint8_t Temperature_Data[] = {};
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, Temperature_Data)!= HAL_OK){
 80020f0:	f107 0208 	add.w	r2, r7, #8
 80020f4:	4906      	ldr	r1, [pc, #24]	; (8002110 <Sensor_Data+0x38>)
 80020f6:	4808      	ldr	r0, [pc, #32]	; (8002118 <Sensor_Data+0x40>)
 80020f8:	f005 f9a0 	bl	800743c <HAL_FDCAN_AddMessageToTxFifoQ>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <Sensor_Data+0x2e>
		return 1;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <Sensor_Data+0x30>
	}
	return 0;
 8002106:	2300      	movs	r3, #0
		return 1;
	}
	return 0;


}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000158 	.word	0x20000158
 8002114:	01000101 	.word	0x01000101
 8002118:	200004a0 	.word	0x200004a0

0800211c <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Master, RxData_Master) != HAL_OK){
 8002126:	4b35      	ldr	r3, [pc, #212]	; (80021fc <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8002128:	4a35      	ldr	r2, [pc, #212]	; (8002200 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800212a:	2140      	movs	r1, #64	; 0x40
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f005 f9c9 	bl	80074c4 <HAL_FDCAN_GetRxMessage>
		//Error_Handler();
	}
	if((RxHeader_Master.Identifier & 0x000000FF) == 0x00){
 8002132:	4b33      	ldr	r3, [pc, #204]	; (8002200 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d147      	bne.n	80021cc <HAL_FDCAN_RxFifo0Callback+0xb0>
		if(RxHeader_Master.Identifier == 0x00001000){
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002144:	d102      	bne.n	800214c <HAL_FDCAN_RxFifo0Callback+0x30>
			//init
			Curr_State = INIT;
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001100){
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 8002154:	d102      	bne.n	800215c <HAL_FDCAN_RxFifo0Callback+0x40>
			//Fault
			Curr_State = FAULT;
 8002156:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001200){
 800215c:	4b28      	ldr	r3, [pc, #160]	; (8002200 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8002164:	d102      	bne.n	800216c <HAL_FDCAN_RxFifo0Callback+0x50>
			//safe to approach
			Curr_State = SAFE_TO_APPROACH;
 8002166:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8002168:	2202      	movs	r2, #2
 800216a:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001300){
 800216c:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 8002174:	d102      	bne.n	800217c <HAL_FDCAN_RxFifo0Callback+0x60>
			//coast
			Curr_State = COAST;
 8002176:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8002178:	2205      	movs	r2, #5
 800217a:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001400){
 800217c:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002184:	d102      	bne.n	800218c <HAL_FDCAN_RxFifo0Callback+0x70>
			//brake
			Curr_State = BRAKE;
 8002186:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8002188:	2206      	movs	r2, #6
 800218a:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001500){
 800218c:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f5b3 5fa8 	cmp.w	r3, #5376	; 0x1500
 8002194:	d102      	bne.n	800219c <HAL_FDCAN_RxFifo0Callback+0x80>
			//crawl
			Curr_State = CRAWL;
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8002198:	2207      	movs	r2, #7
 800219a:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001600){
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 80021a4:	d102      	bne.n	80021ac <HAL_FDCAN_RxFifo0Callback+0x90>
			//track
			Curr_State = TRACK;
 80021a6:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80021a8:	2208      	movs	r2, #8
 80021aa:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x0000FF00){
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80021b4:	d102      	bne.n	80021bc <HAL_FDCAN_RxFifo0Callback+0xa0>
			//launch
			Curr_State = LAUNCH;
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80021b8:	2204      	movs	r2, #4
 80021ba:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001700){
 80021bc:	4b10      	ldr	r3, [pc, #64]	; (8002200 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f5b3 5fb8 	cmp.w	r3, #5888	; 0x1700
 80021c4:	d102      	bne.n	80021cc <HAL_FDCAN_RxFifo0Callback+0xb0>
			//ready to launch
			Curr_State = READY;
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80021c8:	2203      	movs	r2, #3
 80021ca:	701a      	strb	r2, [r3, #0]
		}
	}
	if((RxHeader_Master.Identifier & 0x0000FFFF) == (0x0000FF00 | FOLLOWER_ID)){
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	f64f 7201 	movw	r2, #65281	; 0xff01
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_FDCAN_RxFifo0Callback+0xc2>
		Sensor_Data();
 80021da:	f7ff ff7d 	bl	80020d8 <Sensor_Data>

	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 80021de:	2200      	movs	r2, #0
 80021e0:	2101      	movs	r1, #1
 80021e2:	4809      	ldr	r0, [pc, #36]	; (8002208 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80021e4:	f005 fa76 	bl	80076d4 <HAL_FDCAN_ActivateNotification>
			//fault
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 80021e8:	2200      	movs	r2, #0
 80021ea:	2101      	movs	r1, #1
 80021ec:	4807      	ldr	r0, [pc, #28]	; (800220c <HAL_FDCAN_RxFifo0Callback+0xf0>)
 80021ee:	f005 fa71 	bl	80076d4 <HAL_FDCAN_ActivateNotification>
			//fault
	}


}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000258 	.word	0x20000258
 8002200:	200001a0 	.word	0x200001a0
 8002204:	20000c66 	.word	0x20000c66
 8002208:	2000043c 	.word	0x2000043c
 800220c:	200004a0 	.word	0x200004a0

08002210 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs){
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader_Pod, RxData_Pod) != HAL_OK){
 800221a:	4b45      	ldr	r3, [pc, #276]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800221c:	4a45      	ldr	r2, [pc, #276]	; (8002334 <HAL_FDCAN_RxFifo1Callback+0x124>)
 800221e:	2141      	movs	r1, #65	; 0x41
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f005 f94f 	bl	80074c4 <HAL_FDCAN_GetRxMessage>
		//Error_Handler();
	}
// HE NE HU - HV LV IS1 ISO
	if(RxHeader_Pod.Identifier == IMD_ID){
 8002226:	4b43      	ldr	r3, [pc, #268]	; (8002334 <HAL_FDCAN_RxFifo1Callback+0x124>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a43      	ldr	r2, [pc, #268]	; (8002338 <HAL_FDCAN_RxFifo1Callback+0x128>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d121      	bne.n	8002274 <HAL_FDCAN_RxFifo1Callback+0x64>
		if((RxData_Pod[1] & 0x40) == 0x40){
 8002230:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002232:	785b      	ldrb	r3, [r3, #1]
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01b      	beq.n	8002274 <HAL_FDCAN_RxFifo1Callback+0x64>
			if((RxData_Pod[1] & 0x03) == 0b10){
 800223c:	4b3c      	ldr	r3, [pc, #240]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800223e:	785b      	ldrb	r3, [r3, #1]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d105      	bne.n	8002254 <HAL_FDCAN_RxFifo1Callback+0x44>
				ISO_STATE = 0xF0; //Warning set LED to yellow
 8002248:	4b3c      	ldr	r3, [pc, #240]	; (800233c <HAL_FDCAN_RxFifo1Callback+0x12c>)
 800224a:	22f0      	movs	r2, #240	; 0xf0
 800224c:	701a      	strb	r2, [r3, #0]
				IMD_Req_Isolation();
 800224e:	f7ff ff21 	bl	8002094 <IMD_Req_Isolation>
 8002252:	e00f      	b.n	8002274 <HAL_FDCAN_RxFifo1Callback+0x64>
			}else if((RxData_Pod[1] & 0x03) == 0b11){
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002256:	785b      	ldrb	r3, [r3, #1]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b03      	cmp	r3, #3
 800225e:	d106      	bne.n	800226e <HAL_FDCAN_RxFifo1Callback+0x5e>
				ISO_STATE = 0xFF; //fault set LED to Red and full estop
 8002260:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_FDCAN_RxFifo1Callback+0x12c>)
 8002262:	22ff      	movs	r2, #255	; 0xff
 8002264:	701a      	strb	r2, [r3, #0]
				Curr_State = FAULT;
 8002266:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_FDCAN_RxFifo1Callback+0x130>)
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e002      	b.n	8002274 <HAL_FDCAN_RxFifo1Callback+0x64>
			}else{
				ISO_STATE = 0x00; //all good
 800226e:	4b33      	ldr	r3, [pc, #204]	; (800233c <HAL_FDCAN_RxFifo1Callback+0x12c>)
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
			}
		}
	}else{
		//fault
	}
	if((RxHeader_Pod.Identifier & 0x000000FF) == BMS_ID){
 8002274:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <HAL_FDCAN_RxFifo1Callback+0x124>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b99      	cmp	r3, #153	; 0x99
 800227c:	d14e      	bne.n	800231c <HAL_FDCAN_RxFifo1Callback+0x10c>
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x0900){
 800227e:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_FDCAN_RxFifo1Callback+0x124>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002286:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800228a:	d11c      	bne.n	80022c6 <HAL_FDCAN_RxFifo1Callback+0xb6>
			//status 1
			M_RPM = (RxData_Pod[7]<<24) | (RxData_Pod[6]<<16) | (RxData_Pod[5]<<8) | (RxData_Pod[4]);
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800228e:	79db      	ldrb	r3, [r3, #7]
 8002290:	061a      	lsls	r2, r3, #24
 8002292:	4b27      	ldr	r3, [pc, #156]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002294:	799b      	ldrb	r3, [r3, #6]
 8002296:	041b      	lsls	r3, r3, #16
 8002298:	431a      	orrs	r2, r3
 800229a:	4b25      	ldr	r3, [pc, #148]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800229c:	795b      	ldrb	r3, [r3, #5]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	4313      	orrs	r3, r2
 80022a2:	4a23      	ldr	r2, [pc, #140]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022a4:	7912      	ldrb	r2, [r2, #4]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <HAL_FDCAN_RxFifo1Callback+0x134>)
 80022ac:	601a      	str	r2, [r3, #0]
			M_Current = (RxData_Pod[3]<<8) | (RxData_Pod[2]);
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022b0:	78db      	ldrb	r3, [r3, #3]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022b8:	789b      	ldrb	r3, [r3, #2]
 80022ba:	b21b      	sxth	r3, r3
 80022bc:	4313      	orrs	r3, r2
 80022be:	b21b      	sxth	r3, r3
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	4b21      	ldr	r3, [pc, #132]	; (8002348 <HAL_FDCAN_RxFifo1Callback+0x138>)
 80022c4:	801a      	strh	r2, [r3, #0]
			//status 2
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x0F00){
			//status 3
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x1000){
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_FDCAN_RxFifo1Callback+0x124>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80022ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d2:	d123      	bne.n	800231c <HAL_FDCAN_RxFifo1Callback+0x10c>
			//status 4
			M_Temp_fet = (RxData_Pod[7]<<8) | (RxData_Pod[6]);
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022d6:	79db      	ldrb	r3, [r3, #7]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	b21a      	sxth	r2, r3
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022de:	799b      	ldrb	r3, [r3, #6]
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_FDCAN_RxFifo1Callback+0x13c>)
 80022ea:	801a      	strh	r2, [r3, #0]
			M_Temp_motor = (RxData_Pod[5]<<8) | (RxData_Pod[4]);
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022ee:	795b      	ldrb	r3, [r3, #5]
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	b21a      	sxth	r2, r3
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022f6:	791b      	ldrb	r3, [r3, #4]
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	4313      	orrs	r3, r2
 80022fc:	b21b      	sxth	r3, r3
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_FDCAN_RxFifo1Callback+0x140>)
 8002302:	801a      	strh	r2, [r3, #0]
			M_Current_in = (RxData_Pod[3]<<8) | (RxData_Pod[2]);
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002306:	78db      	ldrb	r3, [r3, #3]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	b21a      	sxth	r2, r3
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800230e:	789b      	ldrb	r3, [r3, #2]
 8002310:	b21b      	sxth	r3, r3
 8002312:	4313      	orrs	r3, r2
 8002314:	b21b      	sxth	r3, r3
 8002316:	b29a      	uxth	r2, r3
 8002318:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <HAL_FDCAN_RxFifo1Callback+0x144>)
 800231a:	801a      	strh	r2, [r3, #0]
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x1B00){
			//status 5
		}
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK){
 800231c:	2200      	movs	r2, #0
 800231e:	2108      	movs	r1, #8
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <HAL_FDCAN_RxFifo1Callback+0x148>)
 8002322:	f005 f9d7 	bl	80076d4 <HAL_FDCAN_ActivateNotification>
		//fault
	}

}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000250 	.word	0x20000250
 8002334:	200001c8 	.word	0x200001c8
 8002338:	0a100101 	.word	0x0a100101
 800233c:	20000c65 	.word	0x20000c65
 8002340:	20000c66 	.word	0x20000c66
 8002344:	20000298 	.word	0x20000298
 8002348:	2000029c 	.word	0x2000029c
 800234c:	2000029e 	.word	0x2000029e
 8002350:	200002a0 	.word	0x200002a0
 8002354:	200002a2 	.word	0x200002a2
 8002358:	20000504 	.word	0x20000504

0800235c <a_mcp9600_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mcp9600_iic_read(mcp9600_handle_t *handle, uint8_t reg, uint8_t *data, uint16_t len)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	461a      	mov	r2, r3
 8002368:	460b      	mov	r3, r1
 800236a:	72fb      	strb	r3, [r7, #11]
 800236c:	4613      	mov	r3, r2
 800236e:	813b      	strh	r3, [r7, #8]
    uint8_t buf[1];
    
    buf[0] = reg;                                                               /* set reg */
 8002370:	7afb      	ldrb	r3, [r7, #11]
 8002372:	753b      	strb	r3, [r7, #20]
    if (handle->iic_write_cmd(handle->iic_addr, (uint8_t *)buf, 1) != 0)        /* write command */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	7e50      	ldrb	r0, [r2, #25]
 800237c:	f107 0114 	add.w	r1, r7, #20
 8002380:	2201      	movs	r2, #1
 8002382:	4798      	blx	r3
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <a_mcp9600_iic_read+0x32>
    {   
        return 1;                                                               /* return error */
 800238a:	2301      	movs	r3, #1
 800238c:	e00c      	b.n	80023a8 <a_mcp9600_iic_read+0x4c>
    }
    if (handle->iic_read_cmd(handle->iic_addr, data, len) != 0)                 /* read data */
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	7e50      	ldrb	r0, [r2, #25]
 8002396:	893a      	ldrh	r2, [r7, #8]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4798      	blx	r3
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <a_mcp9600_iic_read+0x4a>
    {   
        return 1;                                                               /* return error */
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <a_mcp9600_iic_read+0x4c>
    }
    
    return 0;                                                                   /* success return 0 */
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <a_mcp9600_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mcp9600_iic_write(mcp9600_handle_t *handle, uint8_t reg, uint8_t *data, uint16_t len)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	461a      	mov	r2, r3
 80023bc:	460b      	mov	r3, r1
 80023be:	72fb      	strb	r3, [r7, #11]
 80023c0:	4613      	mov	r3, r2
 80023c2:	813b      	strh	r3, [r7, #8]
    uint8_t buf[16];
    uint16_t i;
        
    if ((len + 1) > 16)                                                             /* check length */
 80023c4:	893b      	ldrh	r3, [r7, #8]
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	d901      	bls.n	80023ce <a_mcp9600_iic_write+0x1e>
    {
        return 1;                                                                   /* return error */
 80023ca:	2301      	movs	r3, #1
 80023cc:	e025      	b.n	800241a <a_mcp9600_iic_write+0x6a>
    }
    buf[0] = reg;                                                                   /* set MSB of reg */
 80023ce:	7afb      	ldrb	r3, [r7, #11]
 80023d0:	753b      	strb	r3, [r7, #20]
    for (i = 0; i < len; i++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80023d6:	e00c      	b.n	80023f2 <a_mcp9600_iic_write+0x42>
    {
        buf[1 + i] = data[i];                                                       /* copy write data */
 80023d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	441a      	add	r2, r3
 80023de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023e0:	3301      	adds	r3, #1
 80023e2:	7812      	ldrb	r2, [r2, #0]
 80023e4:	3328      	adds	r3, #40	; 0x28
 80023e6:	443b      	add	r3, r7
 80023e8:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < len; i++)
 80023ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023ee:	3301      	adds	r3, #1
 80023f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80023f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80023f4:	893b      	ldrh	r3, [r7, #8]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d3ee      	bcc.n	80023d8 <a_mcp9600_iic_write+0x28>
    }
    if (handle->iic_write_cmd(handle->iic_addr, (uint8_t *)buf, len + 1) != 0)      /* write iic command */
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	7e50      	ldrb	r0, [r2, #25]
 8002402:	893a      	ldrh	r2, [r7, #8]
 8002404:	3201      	adds	r2, #1
 8002406:	b292      	uxth	r2, r2
 8002408:	f107 0114 	add.w	r1, r7, #20
 800240c:	4798      	blx	r3
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <a_mcp9600_iic_write+0x68>
    {   
        return 1;                                                                   /* return error */
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <a_mcp9600_iic_write+0x6a>
    }
    
    return 0;                                                                       /* success return 0 */
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3728      	adds	r7, #40	; 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <mcp9600_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mcp9600_set_addr_pin(mcp9600_handle_t *handle, mcp9600_address_t addr_pin)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <mcp9600_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 8002434:	2302      	movs	r3, #2
 8002436:	e003      	b.n	8002440 <mcp9600_set_addr_pin+0x1e>
    }
    
    handle->iic_addr = (uint8_t)addr_pin;        /* set pin */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	765a      	strb	r2, [r3, #25]
    
    return 0;                                    /* success return 0 */
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <mcp9600_init>:
 *            - 3 linked functions is NULL
 *            - 4 id is invalid
 * @note      none
 */
uint8_t mcp9600_init(mcp9600_handle_t *handle)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                             /* check handle */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <mcp9600_init+0x12>
    {
        return 2;                                                                   /* return error */
 800245a:	2302      	movs	r3, #2
 800245c:	e06f      	b.n	800253e <mcp9600_init+0xf2>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <mcp9600_init+0x1e>
    {
        return 3;                                                                   /* return error */
 8002466:	2303      	movs	r3, #3
 8002468:	e069      	b.n	800253e <mcp9600_init+0xf2>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <mcp9600_init+0x32>
    {
        handle->debug_print("mcp9600: iic_init is null.\n");                        /* iic_init is null */
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	4834      	ldr	r0, [pc, #208]	; (8002548 <mcp9600_init+0xfc>)
 8002478:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800247a:	2303      	movs	r3, #3
 800247c:	e05f      	b.n	800253e <mcp9600_init+0xf2>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <mcp9600_init+0x46>
    {
        handle->debug_print("mcp9600: iic_deinit is null.\n");                      /* iic_deinit is null */
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	4830      	ldr	r0, [pc, #192]	; (800254c <mcp9600_init+0x100>)
 800248c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800248e:	2303      	movs	r3, #3
 8002490:	e055      	b.n	800253e <mcp9600_init+0xf2>
    }
    if (handle->iic_read_cmd == NULL)                                               /* check iic_read_cmd */
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d105      	bne.n	80024a6 <mcp9600_init+0x5a>
    {
        handle->debug_print("mcp9600: iic_read_cmd is null.\n");                    /* iic_read_cmd is null */
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	482c      	ldr	r0, [pc, #176]	; (8002550 <mcp9600_init+0x104>)
 80024a0:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80024a2:	2303      	movs	r3, #3
 80024a4:	e04b      	b.n	800253e <mcp9600_init+0xf2>
    }
    if (handle->iic_write_cmd == NULL)                                              /* check iic_write_cmd */
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d105      	bne.n	80024ba <mcp9600_init+0x6e>
    {
        handle->debug_print("mcp9600: iic_write_cmd is null.\n");                   /* iic_write_cmd is null */
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	4828      	ldr	r0, [pc, #160]	; (8002554 <mcp9600_init+0x108>)
 80024b4:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80024b6:	2303      	movs	r3, #3
 80024b8:	e041      	b.n	800253e <mcp9600_init+0xf2>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <mcp9600_init+0x82>
    {
        handle->debug_print("mcp9600: delay_ms is null.\n");                        /* delay_ms is null */
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	4824      	ldr	r0, [pc, #144]	; (8002558 <mcp9600_init+0x10c>)
 80024c8:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80024ca:	2303      	movs	r3, #3
 80024cc:	e037      	b.n	800253e <mcp9600_init+0xf2>
    }
    
    if (handle->iic_init() != 0)                                                    /* iic init */
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4798      	blx	r3
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <mcp9600_init+0x9a>
    {
        handle->debug_print("mcp9600: iic init failed.\n");                         /* iic init failed */
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	481f      	ldr	r0, [pc, #124]	; (800255c <mcp9600_init+0x110>)
 80024e0:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80024e2:	2301      	movs	r3, #1
 80024e4:	e02b      	b.n	800253e <mcp9600_init+0xf2>
    }
    memset(buf, 0, sizeof(uint8_t) * 2);                                            /* clear the buffer */
 80024e6:	f107 030c 	add.w	r3, r7, #12
 80024ea:	2202      	movs	r2, #2
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f00b fc7e 	bl	800ddf0 <memset>
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_ID_REVISON,
 80024f4:	f107 020c 	add.w	r2, r7, #12
 80024f8:	2302      	movs	r3, #2
 80024fa:	2120      	movs	r1, #32
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff2d 	bl	800235c <a_mcp9600_iic_read>
 8002502:	4603      	mov	r3, r0
 8002504:	73fb      	strb	r3, [r7, #15]
                            (uint8_t *)buf, 2);                                     /* read device id */
    if (res != 0)                                                                   /* check result */
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <mcp9600_init+0xd2>
    {
        handle->debug_print("mcp9600: read device id failed.\n");                   /* read device id failed */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	4813      	ldr	r0, [pc, #76]	; (8002560 <mcp9600_init+0x114>)
 8002512:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4798      	blx	r3
        
        return 1;                                                                   /* return error */
 800251a:	2301      	movs	r3, #1
 800251c:	e00f      	b.n	800253e <mcp9600_init+0xf2>
    }
    if (buf[0] != 0x40)                                                             /* check id */
 800251e:	7b3b      	ldrb	r3, [r7, #12]
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d008      	beq.n	8002536 <mcp9600_init+0xea>
    {
        handle->debug_print("mcp9600: id is invalid.\n");                           /* id is invalid */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	480e      	ldr	r0, [pc, #56]	; (8002564 <mcp9600_init+0x118>)
 800252a:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4798      	blx	r3
        
        return 4;                                                                   /* return error */
 8002532:	2304      	movs	r3, #4
 8002534:	e003      	b.n	800253e <mcp9600_init+0xf2>
    }
    handle->inited = 1;                                                             /* set inited */
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	761a      	strb	r2, [r3, #24]
    
    return 0;                                                                       /* success return 0 */
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	0800e3cc 	.word	0x0800e3cc
 800254c:	0800e3e8 	.word	0x0800e3e8
 8002550:	0800e408 	.word	0x0800e408
 8002554:	0800e428 	.word	0x0800e428
 8002558:	0800e44c 	.word	0x0800e44c
 800255c:	0800e468 	.word	0x0800e468
 8002560:	0800e484 	.word	0x0800e484
 8002564:	0800e4a8 	.word	0x0800e4a8

08002568 <mcp9600_deinit>:
 *            - 3 handle is not initialized
 *            - 4 power down failed
 * @note      none
 */
uint8_t mcp9600_deinit(mcp9600_handle_t *handle)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <mcp9600_deinit+0x12>
    {
        return 2;                                                                                 /* return error */
 8002576:	2302      	movs	r3, #2
 8002578:	e045      	b.n	8002606 <mcp9600_deinit+0x9e>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7e1b      	ldrb	r3, [r3, #24]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <mcp9600_deinit+0x1e>
    {
        return 3;                                                                                 /* return error */
 8002582:	2303      	movs	r3, #3
 8002584:	e03f      	b.n	8002606 <mcp9600_deinit+0x9e>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 8002586:	f107 020e 	add.w	r2, r7, #14
 800258a:	2301      	movs	r3, #1
 800258c:	2106      	movs	r1, #6
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff fee4 	bl	800235c <a_mcp9600_iic_read>
 8002594:	4603      	mov	r3, r0
 8002596:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <mcp9600_deinit+0x42>
    {
        handle->debug_print("mcp9600: power down failed.\n");                                     /* power down failed */
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	481b      	ldr	r0, [pc, #108]	; (8002610 <mcp9600_deinit+0xa8>)
 80025a4:	4798      	blx	r3
       
        return 4;                                                                                 /* return error */
 80025a6:	2304      	movs	r3, #4
 80025a8:	e02d      	b.n	8002606 <mcp9600_deinit+0x9e>
    }
    
    reg &= ~(3 << 0);                                                                             /* clear configure */
 80025aa:	7bbb      	ldrb	r3, [r7, #14]
 80025ac:	f023 0303 	bic.w	r3, r3, #3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	73bb      	strb	r3, [r7, #14]
    reg |= 0x1 << 0;                                                                              /* set configure */
 80025b4:	7bbb      	ldrb	r3, [r7, #14]
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 80025be:	f107 020e 	add.w	r2, r7, #14
 80025c2:	2301      	movs	r3, #1
 80025c4:	2106      	movs	r1, #6
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff fef2 	bl	80023b0 <a_mcp9600_iic_write>
 80025cc:	4603      	mov	r3, r0
 80025ce:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <mcp9600_deinit+0x7a>
    {
        handle->debug_print("mcp9600: power down failed.\n");                                     /* power down failed */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	480d      	ldr	r0, [pc, #52]	; (8002610 <mcp9600_deinit+0xa8>)
 80025dc:	4798      	blx	r3
       
        return 4;                                                                                 /* return error */
 80025de:	2304      	movs	r3, #4
 80025e0:	e011      	b.n	8002606 <mcp9600_deinit+0x9e>
    }
    res = handle->iic_deinit();                                                                   /* iic deinit */
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4798      	blx	r3
 80025e8:	4603      	mov	r3, r0
 80025ea:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <mcp9600_deinit+0x96>
    {
        handle->debug_print("mcp9600: iic deinit failed.\n");                                     /* iic deinit failed */
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	4807      	ldr	r0, [pc, #28]	; (8002614 <mcp9600_deinit+0xac>)
 80025f8:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 80025fa:	2301      	movs	r3, #1
 80025fc:	e003      	b.n	8002606 <mcp9600_deinit+0x9e>
    }
    handle->inited = 0;                                                                           /* clear flag */
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	761a      	strb	r2, [r3, #24]
    
    return 0;                                                                                     /* success return 0 */
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	0800e4c4 	.word	0x0800e4c4
 8002614:	0800e4e4 	.word	0x0800e4e4

08002618 <mcp9600_single_read>:
 *             - 4 read timeout
 * @note       none
 */
uint8_t mcp9600_single_read(mcp9600_handle_t *handle, int16_t *hot_raw, float *hot_s,
                            int16_t *delta_raw, float *delta_s, int16_t *cold_raw, float *cold_s)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t reg;
    uint16_t timeout;
    uint8_t buf[2];
    
    if (handle == NULL)                                                                                 /* check handle */
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <mcp9600_single_read+0x18>
    {
        return 2;                                                                                       /* return error */
 800262c:	2302      	movs	r3, #2
 800262e:	e135      	b.n	800289c <mcp9600_single_read+0x284>
    }
    if (handle->inited != 1)                                                                            /* check handle initialization */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	7e1b      	ldrb	r3, [r3, #24]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d001      	beq.n	800263c <mcp9600_single_read+0x24>
    {
        return 3;                                                                                       /* return error */
 8002638:	2303      	movs	r3, #3
 800263a:	e12f      	b.n	800289c <mcp9600_single_read+0x284>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_STATUS, (uint8_t *)&reg, 1);                           /* read config */
 800263c:	f107 0214 	add.w	r2, r7, #20
 8002640:	2301      	movs	r3, #1
 8002642:	2104      	movs	r1, #4
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f7ff fe89 	bl	800235c <a_mcp9600_iic_read>
 800264a:	4603      	mov	r3, r0
 800264c:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 800264e:	7d7b      	ldrb	r3, [r7, #21]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <mcp9600_single_read+0x48>
    {
        handle->debug_print("mcp9600: read status failed.\n");                                          /* read status failed */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	4892      	ldr	r0, [pc, #584]	; (80028a4 <mcp9600_single_read+0x28c>)
 800265a:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 800265c:	2301      	movs	r3, #1
 800265e:	e11d      	b.n	800289c <mcp9600_single_read+0x284>
    }
    reg &= ~(1 << 7);                                                                                   /* clear flag */
 8002660:	7d3b      	ldrb	r3, [r7, #20]
 8002662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002666:	b2db      	uxtb	r3, r3
 8002668:	753b      	strb	r3, [r7, #20]
    reg &= ~(1 << 6);                                                                                   /* clear flag */
 800266a:	7d3b      	ldrb	r3, [r7, #20]
 800266c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002670:	b2db      	uxtb	r3, r3
 8002672:	753b      	strb	r3, [r7, #20]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_STATUS, (uint8_t *)&reg, 1);                          /* write config */
 8002674:	f107 0214 	add.w	r2, r7, #20
 8002678:	2301      	movs	r3, #1
 800267a:	2104      	movs	r1, #4
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f7ff fe97 	bl	80023b0 <a_mcp9600_iic_write>
 8002682:	4603      	mov	r3, r0
 8002684:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 8002686:	7d7b      	ldrb	r3, [r7, #21]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <mcp9600_single_read+0x80>
    {
        handle->debug_print("mcp9600: write status failed.\n");                                         /* write status failed */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	4885      	ldr	r0, [pc, #532]	; (80028a8 <mcp9600_single_read+0x290>)
 8002692:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 8002694:	2301      	movs	r3, #1
 8002696:	e101      	b.n	800289c <mcp9600_single_read+0x284>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);             /* read config */
 8002698:	f107 0214 	add.w	r2, r7, #20
 800269c:	2301      	movs	r3, #1
 800269e:	2106      	movs	r1, #6
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f7ff fe5b 	bl	800235c <a_mcp9600_iic_read>
 80026a6:	4603      	mov	r3, r0
 80026a8:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 80026aa:	7d7b      	ldrb	r3, [r7, #21]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <mcp9600_single_read+0xa4>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                            /* read device configuration failed */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	487d      	ldr	r0, [pc, #500]	; (80028ac <mcp9600_single_read+0x294>)
 80026b6:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0ef      	b.n	800289c <mcp9600_single_read+0x284>
    }
    reg &= ~(3 << 0);                                                                                   /* clear configure */
 80026bc:	7d3b      	ldrb	r3, [r7, #20]
 80026be:	f023 0303 	bic.w	r3, r3, #3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	753b      	strb	r3, [r7, #20]
    reg |= 0x02 << 0;                                                                                   /* set configure */
 80026c6:	7d3b      	ldrb	r3, [r7, #20]
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	753b      	strb	r3, [r7, #20]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);            /* write config */
 80026d0:	f107 0214 	add.w	r2, r7, #20
 80026d4:	2301      	movs	r3, #1
 80026d6:	2106      	movs	r1, #6
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff fe69 	bl	80023b0 <a_mcp9600_iic_write>
 80026de:	4603      	mov	r3, r0
 80026e0:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 80026e2:	7d7b      	ldrb	r3, [r7, #21]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <mcp9600_single_read+0xdc>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                           /* write device configuration failed */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	4870      	ldr	r0, [pc, #448]	; (80028b0 <mcp9600_single_read+0x298>)
 80026ee:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0d3      	b.n	800289c <mcp9600_single_read+0x284>
    }
    timeout = 10000;                                                                                    /* set timeout 10000 ms */
 80026f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80026f8:	82fb      	strh	r3, [r7, #22]
    while (timeout != 0)                                                                                /* wait timeout */
 80026fa:	e01d      	b.n	8002738 <mcp9600_single_read+0x120>
    {
        res = a_mcp9600_iic_read(handle, MCP9600_REG_STATUS, (uint8_t *)&reg, 1);                       /* read config */
 80026fc:	f107 0214 	add.w	r2, r7, #20
 8002700:	2301      	movs	r3, #1
 8002702:	2104      	movs	r1, #4
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7ff fe29 	bl	800235c <a_mcp9600_iic_read>
 800270a:	4603      	mov	r3, r0
 800270c:	757b      	strb	r3, [r7, #21]
        if (res != 0)                                                                                   /* check result */
 800270e:	7d7b      	ldrb	r3, [r7, #21]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <mcp9600_single_read+0x108>
        {
            handle->debug_print("mcp9600: read status failed.\n");                                      /* read status failed */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	4862      	ldr	r0, [pc, #392]	; (80028a4 <mcp9600_single_read+0x28c>)
 800271a:	4798      	blx	r3
           
            return 1;                                                                                   /* return error */
 800271c:	2301      	movs	r3, #1
 800271e:	e0bd      	b.n	800289c <mcp9600_single_read+0x284>
        }
        if ((reg & 0xC0) == 0xC0)                                                                       /* check flag */
 8002720:	7d3b      	ldrb	r3, [r7, #20]
 8002722:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002726:	2bc0      	cmp	r3, #192	; 0xc0
 8002728:	d00a      	beq.n	8002740 <mcp9600_single_read+0x128>
        {
            break;                                                                                      /* break */
        }
        handle->delay_ms(1);                                                                            /* delay 1 ms */
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2001      	movs	r0, #1
 8002730:	4798      	blx	r3
        timeout--;                                                                                      /* timeout-- */
 8002732:	8afb      	ldrh	r3, [r7, #22]
 8002734:	3b01      	subs	r3, #1
 8002736:	82fb      	strh	r3, [r7, #22]
    while (timeout != 0)                                                                                /* wait timeout */
 8002738:	8afb      	ldrh	r3, [r7, #22]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1de      	bne.n	80026fc <mcp9600_single_read+0xe4>
 800273e:	e000      	b.n	8002742 <mcp9600_single_read+0x12a>
            break;                                                                                      /* break */
 8002740:	bf00      	nop
    }
    if (timeout == 0)                                                                                   /* check timeout */
 8002742:	8afb      	ldrh	r3, [r7, #22]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d105      	bne.n	8002754 <mcp9600_single_read+0x13c>
    {
        handle->debug_print("mcp9600: read timeout.\n");                                                /* read timeout failed */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	4859      	ldr	r0, [pc, #356]	; (80028b4 <mcp9600_single_read+0x29c>)
 800274e:	4798      	blx	r3
       
        return 4;                                                                                       /* return error */
 8002750:	2304      	movs	r3, #4
 8002752:	e0a3      	b.n	800289c <mcp9600_single_read+0x284>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_THERMOCOUPLE_HOT_JUNCTION, (uint8_t *)buf, 2);         /* read config */
 8002754:	f107 0210 	add.w	r2, r7, #16
 8002758:	2302      	movs	r3, #2
 800275a:	2100      	movs	r1, #0
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f7ff fdfd 	bl	800235c <a_mcp9600_iic_read>
 8002762:	4603      	mov	r3, r0
 8002764:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 8002766:	7d7b      	ldrb	r3, [r7, #21]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <mcp9600_single_read+0x160>
    {
        handle->debug_print("mcp9600: read hot junction temperature failed.\n");                        /* read hot junction temperature failed */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	4851      	ldr	r0, [pc, #324]	; (80028b8 <mcp9600_single_read+0x2a0>)
 8002772:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 8002774:	2301      	movs	r3, #1
 8002776:	e091      	b.n	800289c <mcp9600_single_read+0x284>
    }
    *hot_raw = (int16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                             /* get raw data */
 8002778:	7c3b      	ldrb	r3, [r7, #16]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	b21a      	sxth	r2, r3
 800277e:	7c7b      	ldrb	r3, [r7, #17]
 8002780:	b21b      	sxth	r3, r3
 8002782:	4313      	orrs	r3, r2
 8002784:	b21a      	sxth	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	801a      	strh	r2, [r3, #0]
    *hot_s = (float)(*hot_raw) / 16.0f;                                                                 /* convert the data */
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002798:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800279c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	edc3 7a00 	vstr	s15, [r3]
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_JUNCTIONS_TEMPERATURE_DELTA, (uint8_t *)buf, 2);       /* read config */
 80027a6:	f107 0210 	add.w	r2, r7, #16
 80027aa:	2302      	movs	r3, #2
 80027ac:	2101      	movs	r1, #1
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f7ff fdd4 	bl	800235c <a_mcp9600_iic_read>
 80027b4:	4603      	mov	r3, r0
 80027b6:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 80027b8:	7d7b      	ldrb	r3, [r7, #21]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <mcp9600_single_read+0x1b2>
    {
        handle->debug_print("mcp9600: read junction thermocouple delta failed.\n");                     /* junction thermocouple delta failed */
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	483e      	ldr	r0, [pc, #248]	; (80028bc <mcp9600_single_read+0x2a4>)
 80027c4:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 80027c6:	2301      	movs	r3, #1
 80027c8:	e068      	b.n	800289c <mcp9600_single_read+0x284>
    }
    *delta_raw = (int16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                           /* get raw data */
 80027ca:	7c3b      	ldrb	r3, [r7, #16]
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	b21a      	sxth	r2, r3
 80027d0:	7c7b      	ldrb	r3, [r7, #17]
 80027d2:	b21b      	sxth	r3, r3
 80027d4:	4313      	orrs	r3, r2
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	801a      	strh	r2, [r3, #0]
    *delta_s = (float)(*delta_raw) / 16.0f;                                                             /* convert the data */
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027ea:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80027ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	edc3 7a00 	vstr	s15, [r3]
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);             /* read config */
 80027f8:	f107 0214 	add.w	r2, r7, #20
 80027fc:	2301      	movs	r3, #1
 80027fe:	2106      	movs	r1, #6
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7ff fdab 	bl	800235c <a_mcp9600_iic_read>
 8002806:	4603      	mov	r3, r0
 8002808:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 800280a:	7d7b      	ldrb	r3, [r7, #21]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <mcp9600_single_read+0x204>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                            /* read device configuration failed */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	4825      	ldr	r0, [pc, #148]	; (80028ac <mcp9600_single_read+0x294>)
 8002816:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 8002818:	2301      	movs	r3, #1
 800281a:	e03f      	b.n	800289c <mcp9600_single_read+0x284>
    }
    res = a_mcp9600_iic_read(handle, MCP9600_REG_COLD_JUNCTION_TEMPERATURE, (uint8_t *)buf, 2);         /* read config */
 800281c:	f107 0210 	add.w	r2, r7, #16
 8002820:	2302      	movs	r3, #2
 8002822:	2102      	movs	r1, #2
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f7ff fd99 	bl	800235c <a_mcp9600_iic_read>
 800282a:	4603      	mov	r3, r0
 800282c:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 800282e:	7d7b      	ldrb	r3, [r7, #21]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <mcp9600_single_read+0x228>
    {
        handle->debug_print("mcp9600: read cold junction temperature failed.\n");                       /* read cold junction temperature failed */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	4821      	ldr	r0, [pc, #132]	; (80028c0 <mcp9600_single_read+0x2a8>)
 800283a:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 800283c:	2301      	movs	r3, #1
 800283e:	e02d      	b.n	800289c <mcp9600_single_read+0x284>
    }
    *cold_raw = (int16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                            /* get raw data */
 8002840:	7c3b      	ldrb	r3, [r7, #16]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	b21a      	sxth	r2, r3
 8002846:	7c7b      	ldrb	r3, [r7, #17]
 8002848:	b21b      	sxth	r3, r3
 800284a:	4313      	orrs	r3, r2
 800284c:	b21a      	sxth	r2, r3
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	801a      	strh	r2, [r3, #0]
    if (((reg >> 7) & 0x01) != 0)                                                                       /* check the config */
 8002852:	7d3b      	ldrb	r3, [r7, #20]
 8002854:	09db      	lsrs	r3, r3, #7
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00e      	beq.n	800287e <mcp9600_single_read+0x266>
    {
        *cold_s = (float)(*cold_raw) / 16.0f;                                                           /* convert the data */
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800286e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002872:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	edc3 7a00 	vstr	s15, [r3]
 800287c:	e00d      	b.n	800289a <mcp9600_single_read+0x282>
    }
    else
    {
        *cold_s = (float)(*cold_raw) / 4.0f;                                                            /* convert the data */
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800288c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002890:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	edc3 7a00 	vstr	s15, [r3]
    }
    
    return 0;                                                                                           /* success return 0 */
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	0800e5f8 	.word	0x0800e5f8
 80028a8:	0800e618 	.word	0x0800e618
 80028ac:	0800e504 	.word	0x0800e504
 80028b0:	0800e530 	.word	0x0800e530
 80028b4:	0800e638 	.word	0x0800e638
 80028b8:	0800e560 	.word	0x0800e560
 80028bc:	0800e590 	.word	0x0800e590
 80028c0:	0800e5c4 	.word	0x0800e5c4

080028c4 <mcp9600_set_cold_junction_resolution>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_cold_junction_resolution(mcp9600_handle_t *handle, mcp9600_cold_junction_resolution_t resolution)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <mcp9600_set_cold_junction_resolution+0x16>
    {
        return 2;                                                                                 /* return error */
 80028d6:	2302      	movs	r3, #2
 80028d8:	e038      	b.n	800294c <mcp9600_set_cold_junction_resolution+0x88>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7e1b      	ldrb	r3, [r3, #24]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d001      	beq.n	80028e6 <mcp9600_set_cold_junction_resolution+0x22>
    {
        return 3;                                                                                 /* return error */
 80028e2:	2303      	movs	r3, #3
 80028e4:	e032      	b.n	800294c <mcp9600_set_cold_junction_resolution+0x88>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 80028e6:	f107 020e 	add.w	r2, r7, #14
 80028ea:	2301      	movs	r3, #1
 80028ec:	2106      	movs	r1, #6
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fd34 	bl	800235c <a_mcp9600_iic_read>
 80028f4:	4603      	mov	r3, r0
 80028f6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <mcp9600_set_cold_junction_resolution+0x46>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                      /* read device configuration failed */
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	4814      	ldr	r0, [pc, #80]	; (8002954 <mcp9600_set_cold_junction_resolution+0x90>)
 8002904:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002906:	2301      	movs	r3, #1
 8002908:	e020      	b.n	800294c <mcp9600_set_cold_junction_resolution+0x88>
    }
    
    reg &= ~(1 << 7);                                                                             /* clear configure */
 800290a:	7bbb      	ldrb	r3, [r7, #14]
 800290c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002910:	b2db      	uxtb	r3, r3
 8002912:	73bb      	strb	r3, [r7, #14]
    reg |= resolution << 7;                                                                       /* set configure */
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	01db      	lsls	r3, r3, #7
 8002918:	b25a      	sxtb	r2, r3
 800291a:	7bbb      	ldrb	r3, [r7, #14]
 800291c:	b25b      	sxtb	r3, r3
 800291e:	4313      	orrs	r3, r2
 8002920:	b25b      	sxtb	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 8002926:	f107 020e 	add.w	r2, r7, #14
 800292a:	2301      	movs	r3, #1
 800292c:	2106      	movs	r1, #6
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff fd3e 	bl	80023b0 <a_mcp9600_iic_write>
 8002934:	4603      	mov	r3, r0
 8002936:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <mcp9600_set_cold_junction_resolution+0x86>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                     /* write device configuration failed */
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	4805      	ldr	r0, [pc, #20]	; (8002958 <mcp9600_set_cold_junction_resolution+0x94>)
 8002944:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <mcp9600_set_cold_junction_resolution+0x88>
    }
    
    return 0;                                                                                     /* success return 0 */
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	0800e504 	.word	0x0800e504
 8002958:	0800e530 	.word	0x0800e530

0800295c <mcp9600_set_adc_resolution>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_adc_resolution(mcp9600_handle_t *handle, mcp9600_adc_resolution_t resolution)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <mcp9600_set_adc_resolution+0x16>
    {
        return 2;                                                                                 /* return error */
 800296e:	2302      	movs	r3, #2
 8002970:	e038      	b.n	80029e4 <mcp9600_set_adc_resolution+0x88>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7e1b      	ldrb	r3, [r3, #24]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d001      	beq.n	800297e <mcp9600_set_adc_resolution+0x22>
    {
        return 3;                                                                                 /* return error */
 800297a:	2303      	movs	r3, #3
 800297c:	e032      	b.n	80029e4 <mcp9600_set_adc_resolution+0x88>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 800297e:	f107 020e 	add.w	r2, r7, #14
 8002982:	2301      	movs	r3, #1
 8002984:	2106      	movs	r1, #6
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff fce8 	bl	800235c <a_mcp9600_iic_read>
 800298c:	4603      	mov	r3, r0
 800298e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <mcp9600_set_adc_resolution+0x46>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                      /* read device configuration failed */
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	4814      	ldr	r0, [pc, #80]	; (80029ec <mcp9600_set_adc_resolution+0x90>)
 800299c:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 800299e:	2301      	movs	r3, #1
 80029a0:	e020      	b.n	80029e4 <mcp9600_set_adc_resolution+0x88>
    }
    
    reg &= ~(3 << 5);                                                                             /* clear configure */
 80029a2:	7bbb      	ldrb	r3, [r7, #14]
 80029a4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	73bb      	strb	r3, [r7, #14]
    reg |= resolution << 5;                                                                       /* set configure */
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	015b      	lsls	r3, r3, #5
 80029b0:	b25a      	sxtb	r2, r3
 80029b2:	7bbb      	ldrb	r3, [r7, #14]
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b25b      	sxtb	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 80029be:	f107 020e 	add.w	r2, r7, #14
 80029c2:	2301      	movs	r3, #1
 80029c4:	2106      	movs	r1, #6
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff fcf2 	bl	80023b0 <a_mcp9600_iic_write>
 80029cc:	4603      	mov	r3, r0
 80029ce:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <mcp9600_set_adc_resolution+0x86>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                     /* write device configuration failed */
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	4805      	ldr	r0, [pc, #20]	; (80029f0 <mcp9600_set_adc_resolution+0x94>)
 80029dc:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <mcp9600_set_adc_resolution+0x88>
    }
    
    return 0;                                                                                     /* success return 0 */
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	0800e504 	.word	0x0800e504
 80029f0:	0800e530 	.word	0x0800e530

080029f4 <mcp9600_set_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_mode(mcp9600_handle_t *handle, mcp9600_mode_t mode)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <mcp9600_set_mode+0x16>
    {
        return 2;                                                                                 /* return error */
 8002a06:	2302      	movs	r3, #2
 8002a08:	e034      	b.n	8002a74 <mcp9600_set_mode+0x80>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	7e1b      	ldrb	r3, [r3, #24]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d001      	beq.n	8002a16 <mcp9600_set_mode+0x22>
    {
        return 3;                                                                                 /* return error */
 8002a12:	2303      	movs	r3, #3
 8002a14:	e02e      	b.n	8002a74 <mcp9600_set_mode+0x80>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 8002a16:	f107 020e 	add.w	r2, r7, #14
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	2106      	movs	r1, #6
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fc9c 	bl	800235c <a_mcp9600_iic_read>
 8002a24:	4603      	mov	r3, r0
 8002a26:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <mcp9600_set_mode+0x46>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                      /* read device configuration failed */
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	4812      	ldr	r0, [pc, #72]	; (8002a7c <mcp9600_set_mode+0x88>)
 8002a34:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002a36:	2301      	movs	r3, #1
 8002a38:	e01c      	b.n	8002a74 <mcp9600_set_mode+0x80>
    }
    
    reg &= ~(3 << 0);                                                                             /* clear configure */
 8002a3a:	7bbb      	ldrb	r3, [r7, #14]
 8002a3c:	f023 0303 	bic.w	r3, r3, #3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	73bb      	strb	r3, [r7, #14]
    reg |= mode << 0;                                                                             /* set configure */
 8002a44:	7bba      	ldrb	r2, [r7, #14]
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 8002a4e:	f107 020e 	add.w	r2, r7, #14
 8002a52:	2301      	movs	r3, #1
 8002a54:	2106      	movs	r1, #6
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff fcaa 	bl	80023b0 <a_mcp9600_iic_write>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <mcp9600_set_mode+0x7e>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                     /* write device configuration failed */
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4805      	ldr	r0, [pc, #20]	; (8002a80 <mcp9600_set_mode+0x8c>)
 8002a6c:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <mcp9600_set_mode+0x80>
    }
    
    return 0;                                                                                     /* success return 0 */
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	0800e504 	.word	0x0800e504
 8002a80:	0800e530 	.word	0x0800e530

08002a84 <mcp9600_set_thermocouple_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_thermocouple_type(mcp9600_handle_t *handle, mcp9600_thermocouple_type_t type)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                                        /* check handle */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <mcp9600_set_thermocouple_type+0x16>
    {
        return 2;                                                                                              /* return error */
 8002a96:	2302      	movs	r3, #2
 8002a98:	e038      	b.n	8002b0c <mcp9600_set_thermocouple_type+0x88>
    }
    if (handle->inited != 1)                                                                                   /* check handle initialization */
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7e1b      	ldrb	r3, [r3, #24]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d001      	beq.n	8002aa6 <mcp9600_set_thermocouple_type+0x22>
    {
        return 3;                                                                                              /* return error */
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e032      	b.n	8002b0c <mcp9600_set_thermocouple_type+0x88>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 8002aa6:	f107 020e 	add.w	r2, r7, #14
 8002aaa:	2301      	movs	r3, #1
 8002aac:	2105      	movs	r1, #5
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff fc54 	bl	800235c <a_mcp9600_iic_read>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <mcp9600_set_thermocouple_type+0x46>
    {
        handle->debug_print("mcp9600: read thermocouple sensor configuration failed.\n");                      /* read thermocouple sensor configuration failed */
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4814      	ldr	r0, [pc, #80]	; (8002b14 <mcp9600_set_thermocouple_type+0x90>)
 8002ac4:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e020      	b.n	8002b0c <mcp9600_set_thermocouple_type+0x88>
    }
    
    reg &= ~(0x7 << 4);                                                                                        /* clear configure */
 8002aca:	7bbb      	ldrb	r3, [r7, #14]
 8002acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	73bb      	strb	r3, [r7, #14]
    reg |= type << 4;                                                                                          /* set configure */
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	b25a      	sxtb	r2, r3
 8002ada:	7bbb      	ldrb	r3, [r7, #14]
 8002adc:	b25b      	sxtb	r3, r3
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	b25b      	sxtb	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 8002ae6:	f107 020e 	add.w	r2, r7, #14
 8002aea:	2301      	movs	r3, #1
 8002aec:	2105      	movs	r1, #5
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff fc5e 	bl	80023b0 <a_mcp9600_iic_write>
 8002af4:	4603      	mov	r3, r0
 8002af6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <mcp9600_set_thermocouple_type+0x86>
    {
        handle->debug_print("mcp9600: write thermocouple sensor configuration failed.\n");                     /* write thermocouple sensor configuration failed */
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	4805      	ldr	r0, [pc, #20]	; (8002b18 <mcp9600_set_thermocouple_type+0x94>)
 8002b04:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <mcp9600_set_thermocouple_type+0x88>
    }
    
    return 0;                                                                                                  /* success return 0 */
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	0800e674 	.word	0x0800e674
 8002b18:	0800e6b0 	.word	0x0800e6b0

08002b1c <mcp9600_set_filter_coefficient>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_filter_coefficient(mcp9600_handle_t *handle, mcp9600_filter_coefficient_t coefficient)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                                        /* check handle */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <mcp9600_set_filter_coefficient+0x16>
    {
        return 2;                                                                                              /* return error */
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e034      	b.n	8002b9c <mcp9600_set_filter_coefficient+0x80>
    }
    if (handle->inited != 1)                                                                                   /* check handle initialization */
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7e1b      	ldrb	r3, [r3, #24]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d001      	beq.n	8002b3e <mcp9600_set_filter_coefficient+0x22>
    {
        return 3;                                                                                              /* return error */
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e02e      	b.n	8002b9c <mcp9600_set_filter_coefficient+0x80>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 8002b3e:	f107 020e 	add.w	r2, r7, #14
 8002b42:	2301      	movs	r3, #1
 8002b44:	2105      	movs	r1, #5
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff fc08 	bl	800235c <a_mcp9600_iic_read>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <mcp9600_set_filter_coefficient+0x46>
    {
        handle->debug_print("mcp9600: read thermocouple sensor configuration failed.\n");                      /* read thermocouple sensor configuration failed */
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	4812      	ldr	r0, [pc, #72]	; (8002ba4 <mcp9600_set_filter_coefficient+0x88>)
 8002b5c:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e01c      	b.n	8002b9c <mcp9600_set_filter_coefficient+0x80>
    }
    
    reg &= ~(0x7 << 0);                                                                                        /* clear configure */
 8002b62:	7bbb      	ldrb	r3, [r7, #14]
 8002b64:	f023 0307 	bic.w	r3, r3, #7
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	73bb      	strb	r3, [r7, #14]
    reg |= coefficient << 0;                                                                                   /* set configure */
 8002b6c:	7bba      	ldrb	r2, [r7, #14]
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 8002b76:	f107 020e 	add.w	r2, r7, #14
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	2105      	movs	r1, #5
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff fc16 	bl	80023b0 <a_mcp9600_iic_write>
 8002b84:	4603      	mov	r3, r0
 8002b86:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <mcp9600_set_filter_coefficient+0x7e>
    {
        handle->debug_print("mcp9600: write thermocouple sensor configuration failed.\n");                     /* write thermocouple sensor configuration failed */
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <mcp9600_set_filter_coefficient+0x8c>)
 8002b94:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <mcp9600_set_filter_coefficient+0x80>
    }
    
    return 0;                                                                                                  /* success return 0 */
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	0800e674 	.word	0x0800e674
 8002ba8:	0800e6b0 	.word	0x0800e6b0

08002bac <mcp9600_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mcp9600_interface_iic_init(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
    return 0;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <mcp9600_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mcp9600_interface_iic_deinit(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
    return 0;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <mcp9600_interface_iic_write_cmd>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mcp9600_interface_iic_write_cmd(uint8_t addr, uint8_t *buf, uint16_t len)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	6039      	str	r1, [r7, #0]
 8002bd6:	71fb      	strb	r3, [r7, #7]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit_DMA(&hi2c1,addr,buf,len);
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	b299      	uxth	r1, r3
 8002be0:	88bb      	ldrh	r3, [r7, #4]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	4803      	ldr	r0, [pc, #12]	; (8002bf4 <mcp9600_interface_iic_write_cmd+0x28>)
 8002be6:	f005 fd0b 	bl	8008600 <HAL_I2C_Master_Transmit_DMA>
    return 0;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000568 	.word	0x20000568

08002bf8 <mcp9600_interface_iic_read_cmd>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mcp9600_interface_iic_read_cmd(uint8_t addr, uint8_t *buf, uint16_t len)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	71fb      	strb	r3, [r7, #7]
 8002c04:	4613      	mov	r3, r2
 8002c06:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Receive_DMA(&hi2c1, addr, buf, len);
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	b299      	uxth	r1, r3
 8002c0c:	88bb      	ldrh	r3, [r7, #4]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	4803      	ldr	r0, [pc, #12]	; (8002c20 <mcp9600_interface_iic_read_cmd+0x28>)
 8002c12:	f005 fe09 	bl	8008828 <HAL_I2C_Master_Receive_DMA>
    return 0;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000568 	.word	0x20000568

08002c24 <mcp9600_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void mcp9600_interface_delay_ms(uint32_t ms)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f002 fab5 	bl	800519c <HAL_Delay>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <mcp9600_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void mcp9600_interface_debug_print(const char *const fmt, ...)
{
 8002c3a:	b40f      	push	{r0, r1, r2, r3}
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
	return;
 8002c40:	bf00      	nop
    
}
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	b004      	add	sp, #16
 8002c4a:	4770      	bx	lr

08002c4c <Run_State>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t Run_State(PodState state) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]

    switch (state) {
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	f200 80aa 	bhi.w	8002db6 <Run_State+0x16a>
 8002c62:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <Run_State+0x1c>)
 8002c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c68:	08002c8d 	.word	0x08002c8d
 8002c6c:	08002cfd 	.word	0x08002cfd
 8002c70:	08002d23 	.word	0x08002d23
 8002c74:	08002d3d 	.word	0x08002d3d
 8002c78:	08002d51 	.word	0x08002d51
 8002c7c:	08002d61 	.word	0x08002d61
 8002c80:	08002d71 	.word	0x08002d71
 8002c84:	08002d87 	.word	0x08002d87
 8002c88:	08002d9d 	.word	0x08002d9d
        case INIT:
        	status = tempsensor_init();
 8002c8c:	f001 ffec 	bl	8004c68 <tempsensor_init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <Run_State+0x52>
        		return 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e08f      	b.n	8002dbe <Run_State+0x172>
        	}
        	status = acc_init();
 8002c9e:	f7fd fc39 	bl	8000514 <acc_init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <Run_State+0x64>
        		return 1;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e086      	b.n	8002dbe <Run_State+0x172>
        	}
        	status = CAN_INIT();
 8002cb0:	f7ff f8e6 	bl	8001e80 <CAN_INIT>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <Run_State+0x76>
        		return 1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e07d      	b.n	8002dbe <Run_State+0x172>
        	}
        	status = tempsensor_init();
 8002cc2:	f001 ffd1 	bl	8004c68 <tempsensor_init>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <Run_State+0x88>
        		return 1;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e074      	b.n	8002dbe <Run_State+0x172>
        	}
        	status = acc_init();
 8002cd4:	f7fd fc1e 	bl	8000514 <acc_init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <Run_State+0x9a>
        		return 1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e06b      	b.n	8002dbe <Run_State+0x172>
        	}
        	pump_control(1);
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	f001 f81c 	bl	8003d24 <pump_control>
        	HAL_TIM_Base_Start_IT(&htim5);
 8002cec:	4836      	ldr	r0, [pc, #216]	; (8002dc8 <Run_State+0x17c>)
 8002cee:	f009 f9a9 	bl	800c044 <HAL_TIM_Base_Start_IT>
        	Curr_State = SAFE_TO_APPROACH;
 8002cf2:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <Run_State+0x180>)
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	701a      	strb	r2, [r3, #0]
        	return status;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	e060      	b.n	8002dbe <Run_State+0x172>
            break;
        case FAULT:
        	HV_off();
 8002cfc:	f000 fef8 	bl	8003af0 <HV_off>
        	yellowstatus(0);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f000 ff6d 	bl	8003be0 <yellowstatus>
        	greenstatus(0);
 8002d06:	2000      	movs	r0, #0
 8002d08:	f000 ffa0 	bl	8003c4c <greenstatus>
        	redstatus(1);
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f000 ff2f 	bl	8003b70 <redstatus>
        	pump_control(0);
 8002d12:	2000      	movs	r0, #0
 8002d14:	f001 f806 	bl	8003d24 <pump_control>
        	brake_state(0);
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f000 ffcd 	bl	8003cb8 <brake_state>

        	return status;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	e04d      	b.n	8002dbe <Run_State+0x172>
            break;
        case SAFE_TO_APPROACH:
        	HV_off();
 8002d22:	f000 fee5 	bl	8003af0 <HV_off>
        	yellowstatus(0);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f000 ff5a 	bl	8003be0 <yellowstatus>
        	greenstatus(0);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f000 ff8d 	bl	8003c4c <greenstatus>
        	brake_state(1);
 8002d32:	2001      	movs	r0, #1
 8002d34:	f000 ffc0 	bl	8003cb8 <brake_state>

        	return status;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	e040      	b.n	8002dbe <Run_State+0x172>
            break;
        case READY:
        	precharge();
 8002d3c:	f000 fe4e 	bl	80039dc <precharge>
        	yellowstatus(1);
 8002d40:	2001      	movs	r0, #1
 8002d42:	f000 ff4d 	bl	8003be0 <yellowstatus>
        	brake_state(0);
 8002d46:	2000      	movs	r0, #0
 8002d48:	f000 ffb6 	bl	8003cb8 <brake_state>
        	return status;
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	e036      	b.n	8002dbe <Run_State+0x172>
            break;
        case LAUNCH:
        	yellowstatus(0);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f000 ff45 	bl	8003be0 <yellowstatus>
        	greenstatus(1);
 8002d56:	2001      	movs	r0, #1
 8002d58:	f000 ff78 	bl	8003c4c <greenstatus>

        	return status;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	e02e      	b.n	8002dbe <Run_State+0x172>
            break;
        case COAST:
        	yellowstatus(0);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f000 ff3d 	bl	8003be0 <yellowstatus>
        	greenstatus(1);
 8002d66:	2001      	movs	r0, #1
 8002d68:	f000 ff70 	bl	8003c4c <greenstatus>

        	return status;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	e026      	b.n	8002dbe <Run_State+0x172>
            break;
        case BRAKE:
        	yellowstatus(0);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f000 ff35 	bl	8003be0 <yellowstatus>
        	greenstatus(1);
 8002d76:	2001      	movs	r0, #1
 8002d78:	f000 ff68 	bl	8003c4c <greenstatus>
        	brake_state(1);
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f000 ff9b 	bl	8003cb8 <brake_state>

        	return status;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	e01b      	b.n	8002dbe <Run_State+0x172>
            break;
        case CRAWL:
        	yellowstatus(0);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f000 ff2a 	bl	8003be0 <yellowstatus>
        	greenstatus(1);
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f000 ff5d 	bl	8003c4c <greenstatus>
        	brake_state(0);
 8002d92:	2000      	movs	r0, #0
 8002d94:	f000 ff90 	bl	8003cb8 <brake_state>

        	return status;
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	e010      	b.n	8002dbe <Run_State+0x172>
            break;
        case TRACK:
        	HV_off();
 8002d9c:	f000 fea8 	bl	8003af0 <HV_off>
        	yellowstatus(0);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f000 ff1d 	bl	8003be0 <yellowstatus>
        	greenstatus(0);
 8002da6:	2000      	movs	r0, #0
 8002da8:	f000 ff50 	bl	8003c4c <greenstatus>
        	brake_state(0);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f000 ff83 	bl	8003cb8 <brake_state>

        	return status;
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	e003      	b.n	8002dbe <Run_State+0x172>
            break;
        default:
        	Curr_State = FAULT;
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <Run_State+0x180>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
        	//invalid state
            return 1;
 8002dbc:	2301      	movs	r3, #1
            break;
    }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	2000093c 	.word	0x2000093c
 8002dcc:	20000c66 	.word	0x20000c66

08002dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dd4:	f002 f971 	bl	80050ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dd8:	f000 f842 	bl	8002e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ddc:	f000 fd28 	bl	8003830 <MX_GPIO_Init>
  MX_DMA_Init();
 8002de0:	f000 fcdc 	bl	800379c <MX_DMA_Init>
  MX_ADC1_Init();
 8002de4:	f000 f892 	bl	8002f0c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8002de8:	f000 f992 	bl	8003110 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8002dec:	f000 f9d8 	bl	80031a0 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 8002df0:	f000 fa1e 	bl	8003230 <MX_FDCAN3_Init>
  MX_I2C1_Init();
 8002df4:	f000 fa64 	bl	80032c0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002df8:	f000 fb8c 	bl	8003514 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8002dfc:	f000 fca6 	bl	800374c <MX_USB_PCD_Init>
  MX_I2C2_Init();
 8002e00:	f000 fa9e 	bl	8003340 <MX_I2C2_Init>
  MX_IWDG_Init();
 8002e04:	f000 fb1c 	bl	8003440 <MX_IWDG_Init>
  MX_ADC5_Init();
 8002e08:	f000 f91c 	bl	8003044 <MX_ADC5_Init>
  MX_I2C3_Init();
 8002e0c:	f000 fad8 	bl	80033c0 <MX_I2C3_Init>
  MX_SPI3_Init();
 8002e10:	f000 fbbe 	bl	8003590 <MX_SPI3_Init>
  MX_LPUART1_UART_Init();
 8002e14:	f000 fb32 	bl	800347c <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8002e18:	f000 fbf8 	bl	800360c <MX_TIM2_Init>
  MX_TIM5_Init();
 8002e1c:	f000 fc46 	bl	80036ac <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */


  Fault_Flag = Run_State(Curr_State);
 8002e20:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <main+0x88>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff11 	bl	8002c4c <Run_State>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <main+0x8c>)
 8002e30:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Fault_Flag = Run_State(Curr_State);
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <main+0x88>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff ff08 	bl	8002c4c <Run_State>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <main+0x8c>)
 8002e42:	701a      	strb	r2, [r3, #0]
	  if(Fault_Flag != 0){
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <main+0x8c>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f1      	beq.n	8002e32 <main+0x62>
		  Curr_State = FAULT;
 8002e4e:	4b02      	ldr	r3, [pc, #8]	; (8002e58 <main+0x88>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]
	  Fault_Flag = Run_State(Curr_State);
 8002e54:	e7ed      	b.n	8002e32 <main+0x62>
 8002e56:	bf00      	nop
 8002e58:	20000c66 	.word	0x20000c66
 8002e5c:	20000c64 	.word	0x20000c64

08002e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b094      	sub	sp, #80	; 0x50
 8002e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e66:	f107 0318 	add.w	r3, r7, #24
 8002e6a:	2238      	movs	r2, #56	; 0x38
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f00a ffbe 	bl	800ddf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	60da      	str	r2, [r3, #12]
 8002e80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f007 ff80 	bl	800ad88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8002e88:	232b      	movs	r3, #43	; 0x2b
 8002e8a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e90:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e98:	2340      	movs	r3, #64	; 0x40
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002eac:	2302      	movs	r3, #2
 8002eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002eb0:	2355      	movs	r3, #85	; 0x55
 8002eb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ec0:	f107 0318 	add.w	r3, r7, #24
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f008 f813 	bl	800aef0 <HAL_RCC_OscConfig>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002ed0:	f000 fd7e 	bl	80039d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ed4:	230f      	movs	r3, #15
 8002ed6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	2104      	movs	r1, #4
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f008 fb0f 	bl	800b514 <HAL_RCC_ClockConfig>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002efc:	f000 fd68 	bl	80039d0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002f00:	f008 fcde 	bl	800b8c0 <HAL_RCC_EnableCSS>
}
 8002f04:	bf00      	nop
 8002f06:	3750      	adds	r7, #80	; 0x50
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08c      	sub	sp, #48	; 0x30
 8002f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	2220      	movs	r2, #32
 8002f22:	2100      	movs	r1, #0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f00a ff63 	bl	800ddf0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002f2a:	4b44      	ldr	r3, [pc, #272]	; (800303c <MX_ADC1_Init+0x130>)
 8002f2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002f30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f32:	4b42      	ldr	r3, [pc, #264]	; (800303c <MX_ADC1_Init+0x130>)
 8002f34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f3a:	4b40      	ldr	r3, [pc, #256]	; (800303c <MX_ADC1_Init+0x130>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f40:	4b3e      	ldr	r3, [pc, #248]	; (800303c <MX_ADC1_Init+0x130>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002f46:	4b3d      	ldr	r3, [pc, #244]	; (800303c <MX_ADC1_Init+0x130>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002f4c:	4b3b      	ldr	r3, [pc, #236]	; (800303c <MX_ADC1_Init+0x130>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f52:	4b3a      	ldr	r3, [pc, #232]	; (800303c <MX_ADC1_Init+0x130>)
 8002f54:	2204      	movs	r2, #4
 8002f56:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002f58:	4b38      	ldr	r3, [pc, #224]	; (800303c <MX_ADC1_Init+0x130>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f5e:	4b37      	ldr	r3, [pc, #220]	; (800303c <MX_ADC1_Init+0x130>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8002f64:	4b35      	ldr	r3, [pc, #212]	; (800303c <MX_ADC1_Init+0x130>)
 8002f66:	2204      	movs	r2, #4
 8002f68:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <MX_ADC1_Init+0x130>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f72:	4b32      	ldr	r3, [pc, #200]	; (800303c <MX_ADC1_Init+0x130>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f78:	4b30      	ldr	r3, [pc, #192]	; (800303c <MX_ADC1_Init+0x130>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f7e:	4b2f      	ldr	r3, [pc, #188]	; (800303c <MX_ADC1_Init+0x130>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f86:	4b2d      	ldr	r3, [pc, #180]	; (800303c <MX_ADC1_Init+0x130>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	; (800303c <MX_ADC1_Init+0x130>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f94:	4829      	ldr	r0, [pc, #164]	; (800303c <MX_ADC1_Init+0x130>)
 8002f96:	f002 fb41 	bl	800561c <HAL_ADC_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002fa0:	f000 fd16 	bl	80039d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fac:	4619      	mov	r1, r3
 8002fae:	4823      	ldr	r0, [pc, #140]	; (800303c <MX_ADC1_Init+0x130>)
 8002fb0:	f003 fb68 	bl	8006684 <HAL_ADCEx_MultiModeConfigChannel>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002fba:	f000 fd09 	bl	80039d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <MX_ADC1_Init+0x134>)
 8002fc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fc2:	2306      	movs	r3, #6
 8002fc4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002fca:	237f      	movs	r3, #127	; 0x7f
 8002fcc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002fce:	2304      	movs	r3, #4
 8002fd0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4818      	ldr	r0, [pc, #96]	; (800303c <MX_ADC1_Init+0x130>)
 8002fdc:	f002 fdc2 	bl	8005b64 <HAL_ADC_ConfigChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002fe6:	f000 fcf3 	bl	80039d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002fea:	230c      	movs	r3, #12
 8002fec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4812      	ldr	r0, [pc, #72]	; (800303c <MX_ADC1_Init+0x130>)
 8002ff4:	f002 fdb6 	bl	8005b64 <HAL_ADC_ConfigChannel>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8002ffe:	f000 fce7 	bl	80039d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003002:	2312      	movs	r3, #18
 8003004:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	4619      	mov	r1, r3
 800300a:	480c      	ldr	r0, [pc, #48]	; (800303c <MX_ADC1_Init+0x130>)
 800300c:	f002 fdaa 	bl	8005b64 <HAL_ADC_ConfigChannel>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 8003016:	f000 fcdb 	bl	80039d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800301a:	2318      	movs	r3, #24
 800301c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	4619      	mov	r1, r3
 8003022:	4806      	ldr	r0, [pc, #24]	; (800303c <MX_ADC1_Init+0x130>)
 8003024:	f002 fd9e 	bl	8005b64 <HAL_ADC_ConfigChannel>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800302e:	f000 fccf 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003032:	bf00      	nop
 8003034:	3730      	adds	r7, #48	; 0x30
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	200002a4 	.word	0x200002a4
 8003040:	04300002 	.word	0x04300002

08003044 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800304a:	463b      	mov	r3, r7
 800304c:	2220      	movs	r2, #32
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f00a fecd 	bl	800ddf0 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8003056:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <MX_ADC5_Init+0xc0>)
 8003058:	4a2b      	ldr	r2, [pc, #172]	; (8003108 <MX_ADC5_Init+0xc4>)
 800305a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800305c:	4b29      	ldr	r3, [pc, #164]	; (8003104 <MX_ADC5_Init+0xc0>)
 800305e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003062:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8003064:	4b27      	ldr	r3, [pc, #156]	; (8003104 <MX_ADC5_Init+0xc0>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800306a:	4b26      	ldr	r3, [pc, #152]	; (8003104 <MX_ADC5_Init+0xc0>)
 800306c:	2200      	movs	r2, #0
 800306e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8003070:	4b24      	ldr	r3, [pc, #144]	; (8003104 <MX_ADC5_Init+0xc0>)
 8003072:	2200      	movs	r2, #0
 8003074:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003076:	4b23      	ldr	r3, [pc, #140]	; (8003104 <MX_ADC5_Init+0xc0>)
 8003078:	2200      	movs	r2, #0
 800307a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800307c:	4b21      	ldr	r3, [pc, #132]	; (8003104 <MX_ADC5_Init+0xc0>)
 800307e:	2204      	movs	r2, #4
 8003080:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <MX_ADC5_Init+0xc0>)
 8003084:	2200      	movs	r2, #0
 8003086:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <MX_ADC5_Init+0xc0>)
 800308a:	2200      	movs	r2, #0
 800308c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <MX_ADC5_Init+0xc0>)
 8003090:	2201      	movs	r2, #1
 8003092:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <MX_ADC5_Init+0xc0>)
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <MX_ADC5_Init+0xc0>)
 800309e:	2200      	movs	r2, #0
 80030a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030a2:	4b18      	ldr	r3, [pc, #96]	; (8003104 <MX_ADC5_Init+0xc0>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <MX_ADC5_Init+0xc0>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <MX_ADC5_Init+0xc0>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80030b6:	4b13      	ldr	r3, [pc, #76]	; (8003104 <MX_ADC5_Init+0xc0>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80030be:	4811      	ldr	r0, [pc, #68]	; (8003104 <MX_ADC5_Init+0xc0>)
 80030c0:	f002 faac 	bl	800561c <HAL_ADC_Init>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80030ca:	f000 fc81 	bl	80039d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <MX_ADC5_Init+0xc8>)
 80030d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030d2:	2306      	movs	r3, #6
 80030d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80030da:	237f      	movs	r3, #127	; 0x7f
 80030dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80030de:	2304      	movs	r3, #4
 80030e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80030e6:	463b      	mov	r3, r7
 80030e8:	4619      	mov	r1, r3
 80030ea:	4806      	ldr	r0, [pc, #24]	; (8003104 <MX_ADC5_Init+0xc0>)
 80030ec:	f002 fd3a 	bl	8005b64 <HAL_ADC_ConfigChannel>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 80030f6:	f000 fc6b 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80030fa:	bf00      	nop
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000310 	.word	0x20000310
 8003108:	50000600 	.word	0x50000600
 800310c:	08600004 	.word	0x08600004

08003110 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003114:	4b20      	ldr	r3, [pc, #128]	; (8003198 <MX_FDCAN1_Init+0x88>)
 8003116:	4a21      	ldr	r2, [pc, #132]	; (800319c <MX_FDCAN1_Init+0x8c>)
 8003118:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800311a:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <MX_FDCAN1_Init+0x88>)
 800311c:	2200      	movs	r2, #0
 800311e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <MX_FDCAN1_Init+0x88>)
 8003122:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003126:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <MX_FDCAN1_Init+0x88>)
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800312e:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <MX_FDCAN1_Init+0x88>)
 8003130:	2201      	movs	r2, #1
 8003132:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003134:	4b18      	ldr	r3, [pc, #96]	; (8003198 <MX_FDCAN1_Init+0x88>)
 8003136:	2200      	movs	r2, #0
 8003138:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800313a:	4b17      	ldr	r3, [pc, #92]	; (8003198 <MX_FDCAN1_Init+0x88>)
 800313c:	2200      	movs	r2, #0
 800313e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8003140:	4b15      	ldr	r3, [pc, #84]	; (8003198 <MX_FDCAN1_Init+0x88>)
 8003142:	2202      	movs	r2, #2
 8003144:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <MX_FDCAN1_Init+0x88>)
 8003148:	2202      	movs	r2, #2
 800314a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 167;
 800314c:	4b12      	ldr	r3, [pc, #72]	; (8003198 <MX_FDCAN1_Init+0x88>)
 800314e:	22a7      	movs	r2, #167	; 0xa7
 8003150:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <MX_FDCAN1_Init+0x88>)
 8003154:	2202      	movs	r2, #2
 8003156:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 17;
 8003158:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <MX_FDCAN1_Init+0x88>)
 800315a:	2211      	movs	r2, #17
 800315c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <MX_FDCAN1_Init+0x88>)
 8003160:	2204      	movs	r2, #4
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8003164:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <MX_FDCAN1_Init+0x88>)
 8003166:	2205      	movs	r2, #5
 8003168:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <MX_FDCAN1_Init+0x88>)
 800316c:	2204      	movs	r2, #4
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003170:	4b09      	ldr	r3, [pc, #36]	; (8003198 <MX_FDCAN1_Init+0x88>)
 8003172:	2200      	movs	r2, #0
 8003174:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <MX_FDCAN1_Init+0x88>)
 8003178:	2200      	movs	r2, #0
 800317a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <MX_FDCAN1_Init+0x88>)
 800317e:	2200      	movs	r2, #0
 8003180:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003182:	4805      	ldr	r0, [pc, #20]	; (8003198 <MX_FDCAN1_Init+0x88>)
 8003184:	f003 ff7e 	bl	8007084 <HAL_FDCAN_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800318e:	f000 fc1f 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2000043c 	.word	0x2000043c
 800319c:	40006400 	.word	0x40006400

080031a0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80031a4:	4b20      	ldr	r3, [pc, #128]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031a6:	4a21      	ldr	r2, [pc, #132]	; (800322c <MX_FDCAN2_Init+0x8c>)
 80031a8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80031aa:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80031b0:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80031b6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80031b8:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 80031be:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80031c4:	4b18      	ldr	r3, [pc, #96]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80031ca:	4b17      	ldr	r3, [pc, #92]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 2;
 80031d0:	4b15      	ldr	r3, [pc, #84]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031d2:	2202      	movs	r2, #2
 80031d4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 2;
 80031d6:	4b14      	ldr	r3, [pc, #80]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031d8:	2202      	movs	r2, #2
 80031da:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 167;
 80031dc:	4b12      	ldr	r3, [pc, #72]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031de:	22a7      	movs	r2, #167	; 0xa7
 80031e0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031e4:	2202      	movs	r2, #2
 80031e6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 17;
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031ea:	2211      	movs	r2, #17
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 80031ee:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031f0:	2204      	movs	r2, #4
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 5;
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031f6:	2205      	movs	r2, #5
 80031f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 4;
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <MX_FDCAN2_Init+0x88>)
 80031fc:	2204      	movs	r2, #4
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <MX_FDCAN2_Init+0x88>)
 8003202:	2200      	movs	r2, #0
 8003204:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <MX_FDCAN2_Init+0x88>)
 8003208:	2200      	movs	r2, #0
 800320a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <MX_FDCAN2_Init+0x88>)
 800320e:	2200      	movs	r2, #0
 8003210:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003212:	4805      	ldr	r0, [pc, #20]	; (8003228 <MX_FDCAN2_Init+0x88>)
 8003214:	f003 ff36 	bl	8007084 <HAL_FDCAN_Init>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 800321e:	f000 fbd7 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200004a0 	.word	0x200004a0
 800322c:	40006800 	.word	0x40006800

08003230 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8003234:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 8003236:	4a21      	ldr	r2, [pc, #132]	; (80032bc <MX_FDCAN3_Init+0x8c>)
 8003238:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800323a:	4b1f      	ldr	r3, [pc, #124]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 800323c:	2200      	movs	r2, #0
 800323e:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003240:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 8003242:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003246:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8003248:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 800324a:	2200      	movs	r2, #0
 800324c:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 8003250:	2201      	movs	r2, #1
 8003252:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8003254:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 8003256:	2200      	movs	r2, #0
 8003258:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800325a:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 800325c:	2200      	movs	r2, #0
 800325e:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 2;
 8003260:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 8003262:	2202      	movs	r2, #2
 8003264:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 2;
 8003266:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 8003268:	2202      	movs	r2, #2
 800326a:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 167;
 800326c:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 800326e:	22a7      	movs	r2, #167	; 0xa7
 8003270:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8003272:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 8003274:	2202      	movs	r2, #2
 8003276:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 17;
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 800327a:	2211      	movs	r2, #17
 800327c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 4;
 800327e:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 8003280:	2204      	movs	r2, #4
 8003282:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 5;
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 8003286:	2205      	movs	r2, #5
 8003288:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 4;
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 800328c:	2204      	movs	r2, #4
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 8003292:	2200      	movs	r2, #0
 8003294:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 8003298:	2200      	movs	r2, #0
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 800329e:	2200      	movs	r2, #0
 80032a0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80032a2:	4805      	ldr	r0, [pc, #20]	; (80032b8 <MX_FDCAN3_Init+0x88>)
 80032a4:	f003 feee 	bl	8007084 <HAL_FDCAN_Init>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_FDCAN3_Init+0x82>
  {
    Error_Handler();
 80032ae:	f000 fb8f 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000504 	.word	0x20000504
 80032bc:	40006c00 	.word	0x40006c00

080032c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032c4:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <MX_I2C1_Init+0x74>)
 80032c6:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <MX_I2C1_Init+0x78>)
 80032c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A0A6FB;
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <MX_I2C1_Init+0x74>)
 80032cc:	4a1b      	ldr	r2, [pc, #108]	; (800333c <MX_I2C1_Init+0x7c>)
 80032ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80032d0:	4b18      	ldr	r3, [pc, #96]	; (8003334 <MX_I2C1_Init+0x74>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <MX_I2C1_Init+0x74>)
 80032d8:	2201      	movs	r2, #1
 80032da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032dc:	4b15      	ldr	r3, [pc, #84]	; (8003334 <MX_I2C1_Init+0x74>)
 80032de:	2200      	movs	r2, #0
 80032e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80032e2:	4b14      	ldr	r3, [pc, #80]	; (8003334 <MX_I2C1_Init+0x74>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <MX_I2C1_Init+0x74>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <MX_I2C1_Init+0x74>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032f4:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <MX_I2C1_Init+0x74>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032fa:	480e      	ldr	r0, [pc, #56]	; (8003334 <MX_I2C1_Init+0x74>)
 80032fc:	f004 fed6 	bl	80080ac <HAL_I2C_Init>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003306:	f000 fb63 	bl	80039d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800330a:	2100      	movs	r1, #0
 800330c:	4809      	ldr	r0, [pc, #36]	; (8003334 <MX_I2C1_Init+0x74>)
 800330e:	f007 fb5d 	bl	800a9cc <HAL_I2CEx_ConfigAnalogFilter>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003318:	f000 fb5a 	bl	80039d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800331c:	2100      	movs	r1, #0
 800331e:	4805      	ldr	r0, [pc, #20]	; (8003334 <MX_I2C1_Init+0x74>)
 8003320:	f007 fb9f 	bl	800aa62 <HAL_I2CEx_ConfigDigitalFilter>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800332a:	f000 fb51 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000568 	.word	0x20000568
 8003338:	40005400 	.word	0x40005400
 800333c:	10a0a6fb 	.word	0x10a0a6fb

08003340 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003344:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <MX_I2C2_Init+0x74>)
 8003346:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <MX_I2C2_Init+0x78>)
 8003348:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10A0A6FB;
 800334a:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <MX_I2C2_Init+0x74>)
 800334c:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <MX_I2C2_Init+0x7c>)
 800334e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003350:	4b18      	ldr	r3, [pc, #96]	; (80033b4 <MX_I2C2_Init+0x74>)
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003356:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <MX_I2C2_Init+0x74>)
 8003358:	2201      	movs	r2, #1
 800335a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800335c:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <MX_I2C2_Init+0x74>)
 800335e:	2200      	movs	r2, #0
 8003360:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003362:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <MX_I2C2_Init+0x74>)
 8003364:	2200      	movs	r2, #0
 8003366:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003368:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <MX_I2C2_Init+0x74>)
 800336a:	2200      	movs	r2, #0
 800336c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <MX_I2C2_Init+0x74>)
 8003370:	2200      	movs	r2, #0
 8003372:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003374:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <MX_I2C2_Init+0x74>)
 8003376:	2200      	movs	r2, #0
 8003378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800337a:	480e      	ldr	r0, [pc, #56]	; (80033b4 <MX_I2C2_Init+0x74>)
 800337c:	f004 fe96 	bl	80080ac <HAL_I2C_Init>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003386:	f000 fb23 	bl	80039d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800338a:	2100      	movs	r1, #0
 800338c:	4809      	ldr	r0, [pc, #36]	; (80033b4 <MX_I2C2_Init+0x74>)
 800338e:	f007 fb1d 	bl	800a9cc <HAL_I2CEx_ConfigAnalogFilter>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003398:	f000 fb1a 	bl	80039d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800339c:	2100      	movs	r1, #0
 800339e:	4805      	ldr	r0, [pc, #20]	; (80033b4 <MX_I2C2_Init+0x74>)
 80033a0:	f007 fb5f 	bl	800aa62 <HAL_I2CEx_ConfigDigitalFilter>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80033aa:	f000 fb11 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200005bc 	.word	0x200005bc
 80033b8:	40005800 	.word	0x40005800
 80033bc:	10a0a6fb 	.word	0x10a0a6fb

080033c0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <MX_I2C3_Init+0x74>)
 80033c6:	4a1c      	ldr	r2, [pc, #112]	; (8003438 <MX_I2C3_Init+0x78>)
 80033c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10A0A6FB;
 80033ca:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <MX_I2C3_Init+0x74>)
 80033cc:	4a1b      	ldr	r2, [pc, #108]	; (800343c <MX_I2C3_Init+0x7c>)
 80033ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80033d0:	4b18      	ldr	r3, [pc, #96]	; (8003434 <MX_I2C3_Init+0x74>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033d6:	4b17      	ldr	r3, [pc, #92]	; (8003434 <MX_I2C3_Init+0x74>)
 80033d8:	2201      	movs	r2, #1
 80033da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033dc:	4b15      	ldr	r3, [pc, #84]	; (8003434 <MX_I2C3_Init+0x74>)
 80033de:	2200      	movs	r2, #0
 80033e0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80033e2:	4b14      	ldr	r3, [pc, #80]	; (8003434 <MX_I2C3_Init+0x74>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033e8:	4b12      	ldr	r3, [pc, #72]	; (8003434 <MX_I2C3_Init+0x74>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <MX_I2C3_Init+0x74>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033f4:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <MX_I2C3_Init+0x74>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80033fa:	480e      	ldr	r0, [pc, #56]	; (8003434 <MX_I2C3_Init+0x74>)
 80033fc:	f004 fe56 	bl	80080ac <HAL_I2C_Init>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003406:	f000 fae3 	bl	80039d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800340a:	2100      	movs	r1, #0
 800340c:	4809      	ldr	r0, [pc, #36]	; (8003434 <MX_I2C3_Init+0x74>)
 800340e:	f007 fadd 	bl	800a9cc <HAL_I2CEx_ConfigAnalogFilter>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003418:	f000 fada 	bl	80039d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800341c:	2100      	movs	r1, #0
 800341e:	4805      	ldr	r0, [pc, #20]	; (8003434 <MX_I2C3_Init+0x74>)
 8003420:	f007 fb1f 	bl	800aa62 <HAL_I2CEx_ConfigDigitalFilter>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800342a:	f000 fad1 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000610 	.word	0x20000610
 8003438:	40007800 	.word	0x40007800
 800343c:	10a0a6fb 	.word	0x10a0a6fb

08003440 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <MX_IWDG_Init+0x34>)
 8003446:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <MX_IWDG_Init+0x38>)
 8003448:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <MX_IWDG_Init+0x34>)
 800344c:	2200      	movs	r2, #0
 800344e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8003450:	4b08      	ldr	r3, [pc, #32]	; (8003474 <MX_IWDG_Init+0x34>)
 8003452:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003456:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <MX_IWDG_Init+0x34>)
 800345a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800345e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003460:	4804      	ldr	r0, [pc, #16]	; (8003474 <MX_IWDG_Init+0x34>)
 8003462:	f007 fb4a 	bl	800aafa <HAL_IWDG_Init>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800346c:	f000 fab0 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000784 	.word	0x20000784
 8003478:	40003000 	.word	0x40003000

0800347c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003480:	4b22      	ldr	r3, [pc, #136]	; (800350c <MX_LPUART1_UART_Init+0x90>)
 8003482:	4a23      	ldr	r2, [pc, #140]	; (8003510 <MX_LPUART1_UART_Init+0x94>)
 8003484:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8003486:	4b21      	ldr	r3, [pc, #132]	; (800350c <MX_LPUART1_UART_Init+0x90>)
 8003488:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800348c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800348e:	4b1f      	ldr	r3, [pc, #124]	; (800350c <MX_LPUART1_UART_Init+0x90>)
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003494:	4b1d      	ldr	r3, [pc, #116]	; (800350c <MX_LPUART1_UART_Init+0x90>)
 8003496:	2200      	movs	r2, #0
 8003498:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800349a:	4b1c      	ldr	r3, [pc, #112]	; (800350c <MX_LPUART1_UART_Init+0x90>)
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80034a0:	4b1a      	ldr	r3, [pc, #104]	; (800350c <MX_LPUART1_UART_Init+0x90>)
 80034a2:	220c      	movs	r2, #12
 80034a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034a6:	4b19      	ldr	r3, [pc, #100]	; (800350c <MX_LPUART1_UART_Init+0x90>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034ac:	4b17      	ldr	r3, [pc, #92]	; (800350c <MX_LPUART1_UART_Init+0x90>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034b2:	4b16      	ldr	r3, [pc, #88]	; (800350c <MX_LPUART1_UART_Init+0x90>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <MX_LPUART1_UART_Init+0x90>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80034be:	2300      	movs	r3, #0
 80034c0:	2200      	movs	r2, #0
 80034c2:	2100      	movs	r1, #0
 80034c4:	4811      	ldr	r0, [pc, #68]	; (800350c <MX_LPUART1_UART_Init+0x90>)
 80034c6:	f00a f842 	bl	800d54e <HAL_RS485Ex_Init>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80034d0:	f000 fa7e 	bl	80039d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034d4:	2100      	movs	r1, #0
 80034d6:	480d      	ldr	r0, [pc, #52]	; (800350c <MX_LPUART1_UART_Init+0x90>)
 80034d8:	f00a f8db 	bl	800d692 <HAL_UARTEx_SetTxFifoThreshold>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80034e2:	f000 fa75 	bl	80039d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034e6:	2100      	movs	r1, #0
 80034e8:	4808      	ldr	r0, [pc, #32]	; (800350c <MX_LPUART1_UART_Init+0x90>)
 80034ea:	f00a f910 	bl	800d70e <HAL_UARTEx_SetRxFifoThreshold>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80034f4:	f000 fa6c 	bl	80039d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80034f8:	4804      	ldr	r0, [pc, #16]	; (800350c <MX_LPUART1_UART_Init+0x90>)
 80034fa:	f00a f891 	bl	800d620 <HAL_UARTEx_DisableFifoMode>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003504:	f000 fa64 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003508:	bf00      	nop
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000794 	.word	0x20000794
 8003510:	40008000 	.word	0x40008000

08003514 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <MX_SPI1_Init+0x74>)
 800351a:	4a1c      	ldr	r2, [pc, #112]	; (800358c <MX_SPI1_Init+0x78>)
 800351c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800351e:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <MX_SPI1_Init+0x74>)
 8003520:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003524:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003526:	4b18      	ldr	r3, [pc, #96]	; (8003588 <MX_SPI1_Init+0x74>)
 8003528:	2200      	movs	r2, #0
 800352a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800352c:	4b16      	ldr	r3, [pc, #88]	; (8003588 <MX_SPI1_Init+0x74>)
 800352e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003532:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003534:	4b14      	ldr	r3, [pc, #80]	; (8003588 <MX_SPI1_Init+0x74>)
 8003536:	2200      	movs	r2, #0
 8003538:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <MX_SPI1_Init+0x74>)
 800353c:	2200      	movs	r2, #0
 800353e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <MX_SPI1_Init+0x74>)
 8003542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003546:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003548:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <MX_SPI1_Init+0x74>)
 800354a:	2200      	movs	r2, #0
 800354c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <MX_SPI1_Init+0x74>)
 8003550:	2200      	movs	r2, #0
 8003552:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <MX_SPI1_Init+0x74>)
 8003556:	2200      	movs	r2, #0
 8003558:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <MX_SPI1_Init+0x74>)
 800355c:	2200      	movs	r2, #0
 800355e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <MX_SPI1_Init+0x74>)
 8003562:	2207      	movs	r2, #7
 8003564:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <MX_SPI1_Init+0x74>)
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <MX_SPI1_Init+0x74>)
 800356e:	2208      	movs	r2, #8
 8003570:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003572:	4805      	ldr	r0, [pc, #20]	; (8003588 <MX_SPI1_Init+0x74>)
 8003574:	f008 fc64 	bl	800be40 <HAL_SPI_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800357e:	f000 fa27 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000828 	.word	0x20000828
 800358c:	40013000 	.word	0x40013000

08003590 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <MX_SPI3_Init+0x74>)
 8003596:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <MX_SPI3_Init+0x78>)
 8003598:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800359a:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <MX_SPI3_Init+0x74>)
 800359c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80035a2:	4b18      	ldr	r3, [pc, #96]	; (8003604 <MX_SPI3_Init+0x74>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80035a8:	4b16      	ldr	r3, [pc, #88]	; (8003604 <MX_SPI3_Init+0x74>)
 80035aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80035ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <MX_SPI3_Init+0x74>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035b6:	4b13      	ldr	r3, [pc, #76]	; (8003604 <MX_SPI3_Init+0x74>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <MX_SPI3_Init+0x74>)
 80035be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035c4:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <MX_SPI3_Init+0x74>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035ca:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <MX_SPI3_Init+0x74>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <MX_SPI3_Init+0x74>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <MX_SPI3_Init+0x74>)
 80035d8:	2200      	movs	r2, #0
 80035da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <MX_SPI3_Init+0x74>)
 80035de:	2207      	movs	r2, #7
 80035e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80035e2:	4b08      	ldr	r3, [pc, #32]	; (8003604 <MX_SPI3_Init+0x74>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <MX_SPI3_Init+0x74>)
 80035ea:	2208      	movs	r2, #8
 80035ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80035ee:	4805      	ldr	r0, [pc, #20]	; (8003604 <MX_SPI3_Init+0x74>)
 80035f0:	f008 fc26 	bl	800be40 <HAL_SPI_Init>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80035fa:	f000 f9e9 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	2000088c 	.word	0x2000088c
 8003608:	40003c00 	.word	0x40003c00

0800360c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003612:	f107 0310 	add.w	r3, r7, #16
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	605a      	str	r2, [r3, #4]
 800361c:	609a      	str	r2, [r3, #8]
 800361e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003620:	1d3b      	adds	r3, r7, #4
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800362a:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <MX_TIM2_Init+0x98>)
 800362c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003630:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1699;
 8003632:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <MX_TIM2_Init+0x98>)
 8003634:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8003638:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800363a:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <MX_TIM2_Init+0x98>)
 800363c:	2210      	movs	r2, #16
 800363e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000000;
 8003640:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <MX_TIM2_Init+0x98>)
 8003642:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <MX_TIM2_Init+0x9c>)
 8003644:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003646:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <MX_TIM2_Init+0x98>)
 8003648:	2200      	movs	r2, #0
 800364a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800364c:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <MX_TIM2_Init+0x98>)
 800364e:	2200      	movs	r2, #0
 8003650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003652:	4814      	ldr	r0, [pc, #80]	; (80036a4 <MX_TIM2_Init+0x98>)
 8003654:	f008 fc9f 	bl	800bf96 <HAL_TIM_Base_Init>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800365e:	f000 f9b7 	bl	80039d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003666:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003668:	f107 0310 	add.w	r3, r7, #16
 800366c:	4619      	mov	r1, r3
 800366e:	480d      	ldr	r0, [pc, #52]	; (80036a4 <MX_TIM2_Init+0x98>)
 8003670:	f008 fede 	bl	800c430 <HAL_TIM_ConfigClockSource>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800367a:	f000 f9a9 	bl	80039d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	4619      	mov	r1, r3
 800368a:	4806      	ldr	r0, [pc, #24]	; (80036a4 <MX_TIM2_Init+0x98>)
 800368c:	f009 f968 	bl	800c960 <HAL_TIMEx_MasterConfigSynchronization>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003696:	f000 f99b 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800369a:	bf00      	nop
 800369c:	3720      	adds	r7, #32
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200008f0 	.word	0x200008f0
 80036a8:	004c4b40 	.word	0x004c4b40

080036ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036b2:	f107 0310 	add.w	r3, r7, #16
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	609a      	str	r2, [r3, #8]
 80036be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80036ca:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <MX_TIM5_Init+0x94>)
 80036cc:	4a1d      	ldr	r2, [pc, #116]	; (8003744 <MX_TIM5_Init+0x98>)
 80036ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1699;
 80036d0:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <MX_TIM5_Init+0x94>)
 80036d2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80036d6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80036d8:	4b19      	ldr	r3, [pc, #100]	; (8003740 <MX_TIM5_Init+0x94>)
 80036da:	2210      	movs	r2, #16
 80036dc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1.5E7;
 80036de:	4b18      	ldr	r3, [pc, #96]	; (8003740 <MX_TIM5_Init+0x94>)
 80036e0:	4a19      	ldr	r2, [pc, #100]	; (8003748 <MX_TIM5_Init+0x9c>)
 80036e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e4:	4b16      	ldr	r3, [pc, #88]	; (8003740 <MX_TIM5_Init+0x94>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <MX_TIM5_Init+0x94>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80036f0:	4813      	ldr	r0, [pc, #76]	; (8003740 <MX_TIM5_Init+0x94>)
 80036f2:	f008 fc50 	bl	800bf96 <HAL_TIM_Base_Init>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80036fc:	f000 f968 	bl	80039d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003704:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003706:	f107 0310 	add.w	r3, r7, #16
 800370a:	4619      	mov	r1, r3
 800370c:	480c      	ldr	r0, [pc, #48]	; (8003740 <MX_TIM5_Init+0x94>)
 800370e:	f008 fe8f 	bl	800c430 <HAL_TIM_ConfigClockSource>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003718:	f000 f95a 	bl	80039d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800371c:	2300      	movs	r3, #0
 800371e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	4619      	mov	r1, r3
 8003728:	4805      	ldr	r0, [pc, #20]	; (8003740 <MX_TIM5_Init+0x94>)
 800372a:	f009 f919 	bl	800c960 <HAL_TIMEx_MasterConfigSynchronization>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003734:	f000 f94c 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003738:	bf00      	nop
 800373a:	3720      	adds	r7, #32
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	2000093c 	.word	0x2000093c
 8003744:	40000c00 	.word	0x40000c00
 8003748:	00e4e1c0 	.word	0x00e4e1c0

0800374c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003750:	4b10      	ldr	r3, [pc, #64]	; (8003794 <MX_USB_PCD_Init+0x48>)
 8003752:	4a11      	ldr	r2, [pc, #68]	; (8003798 <MX_USB_PCD_Init+0x4c>)
 8003754:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <MX_USB_PCD_Init+0x48>)
 8003758:	2208      	movs	r2, #8
 800375a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800375c:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <MX_USB_PCD_Init+0x48>)
 800375e:	2202      	movs	r2, #2
 8003760:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <MX_USB_PCD_Init+0x48>)
 8003764:	2202      	movs	r2, #2
 8003766:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <MX_USB_PCD_Init+0x48>)
 800376a:	2200      	movs	r2, #0
 800376c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <MX_USB_PCD_Init+0x48>)
 8003770:	2200      	movs	r2, #0
 8003772:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <MX_USB_PCD_Init+0x48>)
 8003776:	2200      	movs	r2, #0
 8003778:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <MX_USB_PCD_Init+0x48>)
 800377c:	2200      	movs	r2, #0
 800377e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003780:	4804      	ldr	r0, [pc, #16]	; (8003794 <MX_USB_PCD_Init+0x48>)
 8003782:	f007 fa09 	bl	800ab98 <HAL_PCD_Init>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800378c:	f000 f920 	bl	80039d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003790:	bf00      	nop
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000988 	.word	0x20000988
 8003798:	40005c00 	.word	0x40005c00

0800379c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80037a2:	4b22      	ldr	r3, [pc, #136]	; (800382c <MX_DMA_Init+0x90>)
 80037a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a6:	4a21      	ldr	r2, [pc, #132]	; (800382c <MX_DMA_Init+0x90>)
 80037a8:	f043 0304 	orr.w	r3, r3, #4
 80037ac:	6493      	str	r3, [r2, #72]	; 0x48
 80037ae:	4b1f      	ldr	r3, [pc, #124]	; (800382c <MX_DMA_Init+0x90>)
 80037b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	607b      	str	r3, [r7, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037ba:	4b1c      	ldr	r3, [pc, #112]	; (800382c <MX_DMA_Init+0x90>)
 80037bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037be:	4a1b      	ldr	r2, [pc, #108]	; (800382c <MX_DMA_Init+0x90>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	6493      	str	r3, [r2, #72]	; 0x48
 80037c6:	4b19      	ldr	r3, [pc, #100]	; (800382c <MX_DMA_Init+0x90>)
 80037c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80037d2:	2200      	movs	r2, #0
 80037d4:	2100      	movs	r1, #0
 80037d6:	200b      	movs	r0, #11
 80037d8:	f003 f937 	bl	8006a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80037dc:	200b      	movs	r0, #11
 80037de:	f003 f94e 	bl	8006a7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80037e2:	2200      	movs	r2, #0
 80037e4:	2100      	movs	r1, #0
 80037e6:	200c      	movs	r0, #12
 80037e8:	f003 f92f 	bl	8006a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80037ec:	200c      	movs	r0, #12
 80037ee:	f003 f946 	bl	8006a7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80037f2:	2200      	movs	r2, #0
 80037f4:	2100      	movs	r1, #0
 80037f6:	200d      	movs	r0, #13
 80037f8:	f003 f927 	bl	8006a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80037fc:	200d      	movs	r0, #13
 80037fe:	f003 f93e 	bl	8006a7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003802:	2200      	movs	r2, #0
 8003804:	2100      	movs	r1, #0
 8003806:	200e      	movs	r0, #14
 8003808:	f003 f91f 	bl	8006a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800380c:	200e      	movs	r0, #14
 800380e:	f003 f936 	bl	8006a7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003812:	2200      	movs	r2, #0
 8003814:	2100      	movs	r1, #0
 8003816:	200f      	movs	r0, #15
 8003818:	f003 f917 	bl	8006a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800381c:	200f      	movs	r0, #15
 800381e:	f003 f92e 	bl	8006a7e <HAL_NVIC_EnableIRQ>

}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000

08003830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08c      	sub	sp, #48	; 0x30
 8003834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003836:	f107 031c 	add.w	r3, r7, #28
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003846:	4b5d      	ldr	r3, [pc, #372]	; (80039bc <MX_GPIO_Init+0x18c>)
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384a:	4a5c      	ldr	r2, [pc, #368]	; (80039bc <MX_GPIO_Init+0x18c>)
 800384c:	f043 0310 	orr.w	r3, r3, #16
 8003850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003852:	4b5a      	ldr	r3, [pc, #360]	; (80039bc <MX_GPIO_Init+0x18c>)
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800385e:	4b57      	ldr	r3, [pc, #348]	; (80039bc <MX_GPIO_Init+0x18c>)
 8003860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003862:	4a56      	ldr	r2, [pc, #344]	; (80039bc <MX_GPIO_Init+0x18c>)
 8003864:	f043 0304 	orr.w	r3, r3, #4
 8003868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800386a:	4b54      	ldr	r3, [pc, #336]	; (80039bc <MX_GPIO_Init+0x18c>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003876:	4b51      	ldr	r3, [pc, #324]	; (80039bc <MX_GPIO_Init+0x18c>)
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	4a50      	ldr	r2, [pc, #320]	; (80039bc <MX_GPIO_Init+0x18c>)
 800387c:	f043 0320 	orr.w	r3, r3, #32
 8003880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003882:	4b4e      	ldr	r3, [pc, #312]	; (80039bc <MX_GPIO_Init+0x18c>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800388e:	4b4b      	ldr	r3, [pc, #300]	; (80039bc <MX_GPIO_Init+0x18c>)
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	4a4a      	ldr	r2, [pc, #296]	; (80039bc <MX_GPIO_Init+0x18c>)
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800389a:	4b48      	ldr	r3, [pc, #288]	; (80039bc <MX_GPIO_Init+0x18c>)
 800389c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a6:	4b45      	ldr	r3, [pc, #276]	; (80039bc <MX_GPIO_Init+0x18c>)
 80038a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038aa:	4a44      	ldr	r2, [pc, #272]	; (80039bc <MX_GPIO_Init+0x18c>)
 80038ac:	f043 0302 	orr.w	r3, r3, #2
 80038b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038b2:	4b42      	ldr	r3, [pc, #264]	; (80039bc <MX_GPIO_Init+0x18c>)
 80038b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038be:	4b3f      	ldr	r3, [pc, #252]	; (80039bc <MX_GPIO_Init+0x18c>)
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	4a3e      	ldr	r2, [pc, #248]	; (80039bc <MX_GPIO_Init+0x18c>)
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038ca:	4b3c      	ldr	r3, [pc, #240]	; (80039bc <MX_GPIO_Init+0x18c>)
 80038cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80038d6:	2200      	movs	r2, #0
 80038d8:	f64e 71c0 	movw	r1, #61376	; 0xefc0
 80038dc:	4838      	ldr	r0, [pc, #224]	; (80039c0 <MX_GPIO_Init+0x190>)
 80038de:	f004 fbcd 	bl	800807c <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80038e2:	2200      	movs	r2, #0
 80038e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038e8:	4836      	ldr	r0, [pc, #216]	; (80039c4 <MX_GPIO_Init+0x194>)
 80038ea:	f004 fbc7 	bl	800807c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80038ee:	2200      	movs	r2, #0
 80038f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80038f4:	4834      	ldr	r0, [pc, #208]	; (80039c8 <MX_GPIO_Init+0x198>)
 80038f6:	f004 fbc1 	bl	800807c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80038fa:	2200      	movs	r2, #0
 80038fc:	f64f 711c 	movw	r1, #65308	; 0xff1c
 8003900:	4832      	ldr	r0, [pc, #200]	; (80039cc <MX_GPIO_Init+0x19c>)
 8003902:	f004 fbbb 	bl	800807c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003906:	233c      	movs	r3, #60	; 0x3c
 8003908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800390a:	2300      	movs	r3, #0
 800390c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003912:	f107 031c 	add.w	r3, r7, #28
 8003916:	4619      	mov	r1, r3
 8003918:	4829      	ldr	r0, [pc, #164]	; (80039c0 <MX_GPIO_Init+0x190>)
 800391a:	f004 fa2d 	bl	8007d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9
                           PE10 PE11 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800391e:	f64e 73c0 	movw	r3, #61376	; 0xefc0
 8003922:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003924:	2301      	movs	r3, #1
 8003926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003928:	2300      	movs	r3, #0
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392c:	2300      	movs	r3, #0
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003930:	f107 031c 	add.w	r3, r7, #28
 8003934:	4619      	mov	r1, r3
 8003936:	4822      	ldr	r0, [pc, #136]	; (80039c0 <MX_GPIO_Init+0x190>)
 8003938:	f004 fa1e 	bl	8007d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800393c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003942:	2301      	movs	r3, #1
 8003944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394a:	2300      	movs	r3, #0
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800394e:	f107 031c 	add.w	r3, r7, #28
 8003952:	4619      	mov	r1, r3
 8003954:	481b      	ldr	r0, [pc, #108]	; (80039c4 <MX_GPIO_Init+0x194>)
 8003956:	f004 fa0f 	bl	8007d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800395a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800395e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003960:	2301      	movs	r3, #1
 8003962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003968:	2300      	movs	r3, #0
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396c:	f107 031c 	add.w	r3, r7, #28
 8003970:	4619      	mov	r1, r3
 8003972:	4815      	ldr	r0, [pc, #84]	; (80039c8 <MX_GPIO_Init+0x198>)
 8003974:	f004 fa00 	bl	8007d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003978:	f64f 731c 	movw	r3, #65308	; 0xff1c
 800397c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800397e:	2301      	movs	r3, #1
 8003980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003982:	2300      	movs	r3, #0
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003986:	2300      	movs	r3, #0
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800398a:	f107 031c 	add.w	r3, r7, #28
 800398e:	4619      	mov	r1, r3
 8003990:	480e      	ldr	r0, [pc, #56]	; (80039cc <MX_GPIO_Init+0x19c>)
 8003992:	f004 f9f1 	bl	8007d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800399a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800399c:	2300      	movs	r3, #0
 800399e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a4:	f107 031c 	add.w	r3, r7, #28
 80039a8:	4619      	mov	r1, r3
 80039aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ae:	f004 f9e3 	bl	8007d78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039b2:	bf00      	nop
 80039b4:	3730      	adds	r7, #48	; 0x30
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	48001000 	.word	0x48001000
 80039c4:	48000800 	.word	0x48000800
 80039c8:	48000400 	.word	0x48000400
 80039cc:	48000c00 	.word	0x48000c00

080039d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039d4:	b672      	cpsid	i
}
 80039d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039d8:	e7fe      	b.n	80039d8 <Error_Handler+0x8>
	...

080039dc <precharge>:
extern TIM_HandleTypeDef htim2;
uint16_t RelayStates = 0x0000;

//PORT MATCHES LETTER

void precharge(void){
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
 //high side on, low side precharge resitor on wait 500ms then low side main on, resistor off
	HAL_GPIO_WritePin(GPIOE, RELAY14, GPIO_PIN_SET); //LOW SIDE ON
 80039e0:	4819      	ldr	r0, [pc, #100]	; (8003a48 <precharge+0x6c>)
 80039e2:	f009 ff7f 	bl	800d8e4 <atoi>
 80039e6:	4603      	mov	r3, r0
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2201      	movs	r2, #1
 80039ec:	4619      	mov	r1, r3
 80039ee:	4817      	ldr	r0, [pc, #92]	; (8003a4c <precharge+0x70>)
 80039f0:	f004 fb44 	bl	800807c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY9, GPIO_PIN_SET);
 80039f4:	4816      	ldr	r0, [pc, #88]	; (8003a50 <precharge+0x74>)
 80039f6:	f009 ff75 	bl	800d8e4 <atoi>
 80039fa:	4603      	mov	r3, r0
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2201      	movs	r2, #1
 8003a00:	4619      	mov	r1, r3
 8003a02:	4812      	ldr	r0, [pc, #72]	; (8003a4c <precharge+0x70>)
 8003a04:	f004 fb3a 	bl	800807c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_SET); //RESISTOR ON
 8003a08:	4812      	ldr	r0, [pc, #72]	; (8003a54 <precharge+0x78>)
 8003a0a:	f009 ff6b 	bl	800d8e4 <atoi>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2201      	movs	r2, #1
 8003a14:	4619      	mov	r1, r3
 8003a16:	480d      	ldr	r0, [pc, #52]	; (8003a4c <precharge+0x70>)
 8003a18:	f004 fb30 	bl	800807c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_SET);
 8003a1c:	480e      	ldr	r0, [pc, #56]	; (8003a58 <precharge+0x7c>)
 8003a1e:	f009 ff61 	bl	800d8e4 <atoi>
 8003a22:	4603      	mov	r3, r0
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2201      	movs	r2, #1
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4808      	ldr	r0, [pc, #32]	; (8003a4c <precharge+0x70>)
 8003a2c:	f004 fb26 	bl	800807c <HAL_GPIO_WritePin>
	RelayStates = RelayStates | 0x00C6;
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <precharge+0x80>)
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	f043 03c6 	orr.w	r3, r3, #198	; 0xc6
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <precharge+0x80>)
 8003a3c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8003a3e:	4808      	ldr	r0, [pc, #32]	; (8003a60 <precharge+0x84>)
 8003a40:	f008 fb00 	bl	800c044 <HAL_TIM_Base_Start_IT>
}
 8003a44:	bf00      	nop
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	0800e80c 	.word	0x0800e80c
 8003a4c:	48001000 	.word	0x48001000
 8003a50:	0800e818 	.word	0x0800e818
 8003a54:	0800e824 	.word	0x0800e824
 8003a58:	0800e830 	.word	0x0800e830
 8003a5c:	20000c68 	.word	0x20000c68
 8003a60:	200008f0 	.word	0x200008f0

08003a64 <HV_on>:
void HV_on(void){
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, RELAY11, GPIO_PIN_SET); //HIGHSIDE ON
 8003a68:	481b      	ldr	r0, [pc, #108]	; (8003ad8 <HV_on+0x74>)
 8003a6a:	f009 ff3b 	bl	800d8e4 <atoi>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2201      	movs	r2, #1
 8003a74:	4619      	mov	r1, r3
 8003a76:	4819      	ldr	r0, [pc, #100]	; (8003adc <HV_on+0x78>)
 8003a78:	f004 fb00 	bl	800807c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY16, GPIO_PIN_SET);
 8003a7c:	4818      	ldr	r0, [pc, #96]	; (8003ae0 <HV_on+0x7c>)
 8003a7e:	f009 ff31 	bl	800d8e4 <atoi>
 8003a82:	4603      	mov	r3, r0
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2201      	movs	r2, #1
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4814      	ldr	r0, [pc, #80]	; (8003adc <HV_on+0x78>)
 8003a8c:	f004 faf6 	bl	800807c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_RESET); //RESISTOR OFF
 8003a90:	4814      	ldr	r0, [pc, #80]	; (8003ae4 <HV_on+0x80>)
 8003a92:	f009 ff27 	bl	800d8e4 <atoi>
 8003a96:	4603      	mov	r3, r0
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	480f      	ldr	r0, [pc, #60]	; (8003adc <HV_on+0x78>)
 8003aa0:	f004 faec 	bl	800807c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_RESET);
 8003aa4:	4810      	ldr	r0, [pc, #64]	; (8003ae8 <HV_on+0x84>)
 8003aa6:	f009 ff1d 	bl	800d8e4 <atoi>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2200      	movs	r2, #0
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	480a      	ldr	r0, [pc, #40]	; (8003adc <HV_on+0x78>)
 8003ab4:	f004 fae2 	bl	800807c <HAL_GPIO_WritePin>
	RelayStates = RelayStates | 0x0021;
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <HV_on+0x88>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <HV_on+0x88>)
 8003ac4:	801a      	strh	r2, [r3, #0]
	RelayStates = RelayStates & 0xFFBD;
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HV_on+0x88>)
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	f023 0342 	bic.w	r3, r3, #66	; 0x42
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HV_on+0x88>)
 8003ad2:	801a      	strh	r2, [r3, #0]

}
 8003ad4:	bf00      	nop
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	0800e83c 	.word	0x0800e83c
 8003adc:	48001000 	.word	0x48001000
 8003ae0:	0800e848 	.word	0x0800e848
 8003ae4:	0800e824 	.word	0x0800e824
 8003ae8:	0800e830 	.word	0x0800e830
 8003aec:	20000c68 	.word	0x20000c68

08003af0 <HV_off>:

void HV_off(void){
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, RELAY11, GPIO_PIN_RESET); //HIGHSIDE OFF
 8003af4:	4818      	ldr	r0, [pc, #96]	; (8003b58 <HV_off+0x68>)
 8003af6:	f009 fef5 	bl	800d8e4 <atoi>
 8003afa:	4603      	mov	r3, r0
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2200      	movs	r2, #0
 8003b00:	4619      	mov	r1, r3
 8003b02:	4816      	ldr	r0, [pc, #88]	; (8003b5c <HV_off+0x6c>)
 8003b04:	f004 faba 	bl	800807c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY16, GPIO_PIN_RESET);
 8003b08:	4815      	ldr	r0, [pc, #84]	; (8003b60 <HV_off+0x70>)
 8003b0a:	f009 feeb 	bl	800d8e4 <atoi>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2200      	movs	r2, #0
 8003b14:	4619      	mov	r1, r3
 8003b16:	4811      	ldr	r0, [pc, #68]	; (8003b5c <HV_off+0x6c>)
 8003b18:	f004 fab0 	bl	800807c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY14, GPIO_PIN_RESET); //LOW SIDE OFF
 8003b1c:	4811      	ldr	r0, [pc, #68]	; (8003b64 <HV_off+0x74>)
 8003b1e:	f009 fee1 	bl	800d8e4 <atoi>
 8003b22:	4603      	mov	r3, r0
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2200      	movs	r2, #0
 8003b28:	4619      	mov	r1, r3
 8003b2a:	480c      	ldr	r0, [pc, #48]	; (8003b5c <HV_off+0x6c>)
 8003b2c:	f004 faa6 	bl	800807c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY9, GPIO_PIN_RESET);
 8003b30:	480d      	ldr	r0, [pc, #52]	; (8003b68 <HV_off+0x78>)
 8003b32:	f009 fed7 	bl	800d8e4 <atoi>
 8003b36:	4603      	mov	r3, r0
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4807      	ldr	r0, [pc, #28]	; (8003b5c <HV_off+0x6c>)
 8003b40:	f004 fa9c 	bl	800807c <HAL_GPIO_WritePin>
	RelayStates = RelayStates & 0xFF5A;
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HV_off+0x7c>)
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	f023 03a5 	bic.w	r3, r3, #165	; 0xa5
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <HV_off+0x7c>)
 8003b50:	801a      	strh	r2, [r3, #0]
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	0800e83c 	.word	0x0800e83c
 8003b5c:	48001000 	.word	0x48001000
 8003b60:	0800e848 	.word	0x0800e848
 8003b64:	0800e80c 	.word	0x0800e80c
 8003b68:	0800e818 	.word	0x0800e818
 8003b6c:	20000c68 	.word	0x20000c68

08003b70 <redstatus>:

void redstatus(uint8_t state){
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d113      	bne.n	8003ba8 <redstatus+0x38>
		HAL_GPIO_WritePin(GPIOD, RELAY1, GPIO_PIN_SET);
 8003b80:	4814      	ldr	r0, [pc, #80]	; (8003bd4 <redstatus+0x64>)
 8003b82:	f009 feaf 	bl	800d8e4 <atoi>
 8003b86:	4603      	mov	r3, r0
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4812      	ldr	r0, [pc, #72]	; (8003bd8 <redstatus+0x68>)
 8003b90:	f004 fa74 	bl	800807c <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x8000;
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <redstatus+0x6c>)
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <redstatus+0x6c>)
 8003ba4:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY1, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0x7FFF;
	}

}
 8003ba6:	e010      	b.n	8003bca <redstatus+0x5a>
		HAL_GPIO_WritePin(GPIOD, RELAY1, GPIO_PIN_RESET);
 8003ba8:	480a      	ldr	r0, [pc, #40]	; (8003bd4 <redstatus+0x64>)
 8003baa:	f009 fe9b 	bl	800d8e4 <atoi>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4808      	ldr	r0, [pc, #32]	; (8003bd8 <redstatus+0x68>)
 8003bb8:	f004 fa60 	bl	800807c <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0x7FFF;
 8003bbc:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <redstatus+0x6c>)
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <redstatus+0x6c>)
 8003bc8:	801a      	strh	r2, [r3, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	0800e848 	.word	0x0800e848
 8003bd8:	48000c00 	.word	0x48000c00
 8003bdc:	20000c68 	.word	0x20000c68

08003be0 <yellowstatus>:

void yellowstatus(uint8_t state){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d111      	bne.n	8003c14 <yellowstatus+0x34>
		HAL_GPIO_WritePin(GPIOD, RELAY2, GPIO_PIN_SET);
 8003bf0:	4813      	ldr	r0, [pc, #76]	; (8003c40 <yellowstatus+0x60>)
 8003bf2:	f009 fe77 	bl	800d8e4 <atoi>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4811      	ldr	r0, [pc, #68]	; (8003c44 <yellowstatus+0x64>)
 8003c00:	f004 fa3c 	bl	800807c <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x4000;
 8003c04:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <yellowstatus+0x68>)
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <yellowstatus+0x68>)
 8003c10:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY2, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xBFFF;
	}
}
 8003c12:	e010      	b.n	8003c36 <yellowstatus+0x56>
		HAL_GPIO_WritePin(GPIOD, RELAY2, GPIO_PIN_RESET);
 8003c14:	480a      	ldr	r0, [pc, #40]	; (8003c40 <yellowstatus+0x60>)
 8003c16:	f009 fe65 	bl	800d8e4 <atoi>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2200      	movs	r2, #0
 8003c20:	4619      	mov	r1, r3
 8003c22:	4808      	ldr	r0, [pc, #32]	; (8003c44 <yellowstatus+0x64>)
 8003c24:	f004 fa2a 	bl	800807c <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xBFFF;
 8003c28:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <yellowstatus+0x68>)
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <yellowstatus+0x68>)
 8003c34:	801a      	strh	r2, [r3, #0]
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	0800e824 	.word	0x0800e824
 8003c44:	48000c00 	.word	0x48000c00
 8003c48:	20000c68 	.word	0x20000c68

08003c4c <greenstatus>:

void greenstatus(uint8_t state){
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d111      	bne.n	8003c80 <greenstatus+0x34>
		HAL_GPIO_WritePin(GPIOD, RELAY3, GPIO_PIN_SET);
 8003c5c:	4813      	ldr	r0, [pc, #76]	; (8003cac <greenstatus+0x60>)
 8003c5e:	f009 fe41 	bl	800d8e4 <atoi>
 8003c62:	4603      	mov	r3, r0
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2201      	movs	r2, #1
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4811      	ldr	r0, [pc, #68]	; (8003cb0 <greenstatus+0x64>)
 8003c6c:	f004 fa06 	bl	800807c <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x2000;
 8003c70:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <greenstatus+0x68>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <greenstatus+0x68>)
 8003c7c:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY3, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xDFFF;
	}
}
 8003c7e:	e010      	b.n	8003ca2 <greenstatus+0x56>
		HAL_GPIO_WritePin(GPIOD, RELAY3, GPIO_PIN_RESET);
 8003c80:	480a      	ldr	r0, [pc, #40]	; (8003cac <greenstatus+0x60>)
 8003c82:	f009 fe2f 	bl	800d8e4 <atoi>
 8003c86:	4603      	mov	r3, r0
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4808      	ldr	r0, [pc, #32]	; (8003cb0 <greenstatus+0x64>)
 8003c90:	f004 f9f4 	bl	800807c <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xDFFF;
 8003c94:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <greenstatus+0x68>)
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <greenstatus+0x68>)
 8003ca0:	801a      	strh	r2, [r3, #0]
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	0800e80c 	.word	0x0800e80c
 8003cb0:	48000c00 	.word	0x48000c00
 8003cb4:	20000c68 	.word	0x20000c68

08003cb8 <brake_state>:

void brake_state(uint8_t state){
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d111      	bne.n	8003cec <brake_state+0x34>
		HAL_GPIO_WritePin(GPIOD, RELAY4, GPIO_PIN_SET);
 8003cc8:	4813      	ldr	r0, [pc, #76]	; (8003d18 <brake_state+0x60>)
 8003cca:	f009 fe0b 	bl	800d8e4 <atoi>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4811      	ldr	r0, [pc, #68]	; (8003d1c <brake_state+0x64>)
 8003cd8:	f004 f9d0 	bl	800807c <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x1000;
 8003cdc:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <brake_state+0x68>)
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <brake_state+0x68>)
 8003ce8:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY4, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xEFFF;
	}
}
 8003cea:	e010      	b.n	8003d0e <brake_state+0x56>
		HAL_GPIO_WritePin(GPIOD, RELAY4, GPIO_PIN_RESET);
 8003cec:	480a      	ldr	r0, [pc, #40]	; (8003d18 <brake_state+0x60>)
 8003cee:	f009 fdf9 	bl	800d8e4 <atoi>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4808      	ldr	r0, [pc, #32]	; (8003d1c <brake_state+0x64>)
 8003cfc:	f004 f9be 	bl	800807c <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xEFFF;
 8003d00:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <brake_state+0x68>)
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <brake_state+0x68>)
 8003d0c:	801a      	strh	r2, [r3, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	0800e854 	.word	0x0800e854
 8003d1c:	48000c00 	.word	0x48000c00
 8003d20:	20000c68 	.word	0x20000c68

08003d24 <pump_control>:

void pump_control(uint8_t state){
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d11b      	bne.n	8003d6c <pump_control+0x48>
		HAL_GPIO_WritePin(GPIOD, RELAY5, GPIO_PIN_SET);
 8003d34:	481d      	ldr	r0, [pc, #116]	; (8003dac <pump_control+0x88>)
 8003d36:	f009 fdd5 	bl	800d8e4 <atoi>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2201      	movs	r2, #1
 8003d40:	4619      	mov	r1, r3
 8003d42:	481b      	ldr	r0, [pc, #108]	; (8003db0 <pump_control+0x8c>)
 8003d44:	f004 f99a 	bl	800807c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, RELAY6, GPIO_PIN_RESET);
 8003d48:	481a      	ldr	r0, [pc, #104]	; (8003db4 <pump_control+0x90>)
 8003d4a:	f009 fdcb 	bl	800d8e4 <atoi>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2200      	movs	r2, #0
 8003d54:	4619      	mov	r1, r3
 8003d56:	4816      	ldr	r0, [pc, #88]	; (8003db0 <pump_control+0x8c>)
 8003d58:	f004 f990 	bl	800807c <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x0C00;
 8003d5c:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <pump_control+0x94>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <pump_control+0x94>)
 8003d68:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY5, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD, RELAY6, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xF7FF;
	}
}
 8003d6a:	e01a      	b.n	8003da2 <pump_control+0x7e>
		HAL_GPIO_WritePin(GPIOD, RELAY5, GPIO_PIN_SET);
 8003d6c:	480f      	ldr	r0, [pc, #60]	; (8003dac <pump_control+0x88>)
 8003d6e:	f009 fdb9 	bl	800d8e4 <atoi>
 8003d72:	4603      	mov	r3, r0
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2201      	movs	r2, #1
 8003d78:	4619      	mov	r1, r3
 8003d7a:	480d      	ldr	r0, [pc, #52]	; (8003db0 <pump_control+0x8c>)
 8003d7c:	f004 f97e 	bl	800807c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, RELAY6, GPIO_PIN_RESET);
 8003d80:	480c      	ldr	r0, [pc, #48]	; (8003db4 <pump_control+0x90>)
 8003d82:	f009 fdaf 	bl	800d8e4 <atoi>
 8003d86:	4603      	mov	r3, r0
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4808      	ldr	r0, [pc, #32]	; (8003db0 <pump_control+0x8c>)
 8003d90:	f004 f974 	bl	800807c <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xF7FF;
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <pump_control+0x94>)
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <pump_control+0x94>)
 8003da0:	801a      	strh	r2, [r3, #0]
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	0800e860 	.word	0x0800e860
 8003db0:	48000c00 	.word	0x48000c00
 8003db4:	0800e86c 	.word	0x0800e86c
 8003db8:	20000c68 	.word	0x20000c68

08003dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <HAL_MspInit+0x44>)
 8003dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc6:	4a0e      	ldr	r2, [pc, #56]	; (8003e00 <HAL_MspInit+0x44>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6613      	str	r3, [r2, #96]	; 0x60
 8003dce:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <HAL_MspInit+0x44>)
 8003dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	607b      	str	r3, [r7, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_MspInit+0x44>)
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dde:	4a08      	ldr	r2, [pc, #32]	; (8003e00 <HAL_MspInit+0x44>)
 8003de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de4:	6593      	str	r3, [r2, #88]	; 0x58
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_MspInit+0x44>)
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003df2:	f007 f86d 	bl	800aed0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40021000 	.word	0x40021000

08003e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b0a0      	sub	sp, #128	; 0x80
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e1c:	f107 0318 	add.w	r3, r7, #24
 8003e20:	2254      	movs	r2, #84	; 0x54
 8003e22:	2100      	movs	r1, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f009 ffe3 	bl	800ddf0 <memset>
  if(hadc->Instance==ADC1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e32:	d160      	bne.n	8003ef6 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003e34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e38:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003e3a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e40:	f107 0318 	add.w	r3, r7, #24
 8003e44:	4618      	mov	r0, r3
 8003e46:	f007 fdad 	bl	800b9a4 <HAL_RCCEx_PeriphCLKConfig>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003e50:	f7ff fdbe 	bl	80039d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003e54:	4b5d      	ldr	r3, [pc, #372]	; (8003fcc <HAL_ADC_MspInit+0x1c8>)
 8003e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e58:	4a5c      	ldr	r2, [pc, #368]	; (8003fcc <HAL_ADC_MspInit+0x1c8>)
 8003e5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e60:	4b5a      	ldr	r3, [pc, #360]	; (8003fcc <HAL_ADC_MspInit+0x1c8>)
 8003e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6c:	4b57      	ldr	r3, [pc, #348]	; (8003fcc <HAL_ADC_MspInit+0x1c8>)
 8003e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e70:	4a56      	ldr	r2, [pc, #344]	; (8003fcc <HAL_ADC_MspInit+0x1c8>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e78:	4b54      	ldr	r3, [pc, #336]	; (8003fcc <HAL_ADC_MspInit+0x1c8>)
 8003e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003e84:	230f      	movs	r3, #15
 8003e86:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e94:	4619      	mov	r1, r3
 8003e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e9a:	f003 ff6d 	bl	8007d78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003e9e:	4b4c      	ldr	r3, [pc, #304]	; (8003fd0 <HAL_ADC_MspInit+0x1cc>)
 8003ea0:	4a4c      	ldr	r2, [pc, #304]	; (8003fd4 <HAL_ADC_MspInit+0x1d0>)
 8003ea2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003ea4:	4b4a      	ldr	r3, [pc, #296]	; (8003fd0 <HAL_ADC_MspInit+0x1cc>)
 8003ea6:	2205      	movs	r2, #5
 8003ea8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eaa:	4b49      	ldr	r3, [pc, #292]	; (8003fd0 <HAL_ADC_MspInit+0x1cc>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eb0:	4b47      	ldr	r3, [pc, #284]	; (8003fd0 <HAL_ADC_MspInit+0x1cc>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003eb6:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <HAL_ADC_MspInit+0x1cc>)
 8003eb8:	2280      	movs	r2, #128	; 0x80
 8003eba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ebc:	4b44      	ldr	r3, [pc, #272]	; (8003fd0 <HAL_ADC_MspInit+0x1cc>)
 8003ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ec2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ec4:	4b42      	ldr	r3, [pc, #264]	; (8003fd0 <HAL_ADC_MspInit+0x1cc>)
 8003ec6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003ecc:	4b40      	ldr	r3, [pc, #256]	; (8003fd0 <HAL_ADC_MspInit+0x1cc>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003ed2:	4b3f      	ldr	r3, [pc, #252]	; (8003fd0 <HAL_ADC_MspInit+0x1cc>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003ed8:	483d      	ldr	r0, [pc, #244]	; (8003fd0 <HAL_ADC_MspInit+0x1cc>)
 8003eda:	f002 fdeb 	bl	8006ab4 <HAL_DMA_Init>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003ee4:	f7ff fd74 	bl	80039d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a39      	ldr	r2, [pc, #228]	; (8003fd0 <HAL_ADC_MspInit+0x1cc>)
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
 8003eee:	4a38      	ldr	r2, [pc, #224]	; (8003fd0 <HAL_ADC_MspInit+0x1cc>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003ef4:	e065      	b.n	8003fc2 <HAL_ADC_MspInit+0x1be>
  else if(hadc->Instance==ADC5)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a37      	ldr	r2, [pc, #220]	; (8003fd8 <HAL_ADC_MspInit+0x1d4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d160      	bne.n	8003fc2 <HAL_ADC_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003f00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f04:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8003f06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f0a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f0c:	f107 0318 	add.w	r3, r7, #24
 8003f10:	4618      	mov	r0, r3
 8003f12:	f007 fd47 	bl	800b9a4 <HAL_RCCEx_PeriphCLKConfig>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 8003f1c:	f7ff fd58 	bl	80039d0 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8003f20:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <HAL_ADC_MspInit+0x1c8>)
 8003f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f24:	4a29      	ldr	r2, [pc, #164]	; (8003fcc <HAL_ADC_MspInit+0x1c8>)
 8003f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f2c:	4b27      	ldr	r3, [pc, #156]	; (8003fcc <HAL_ADC_MspInit+0x1c8>)
 8003f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f38:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <HAL_ADC_MspInit+0x1c8>)
 8003f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3c:	4a23      	ldr	r2, [pc, #140]	; (8003fcc <HAL_ADC_MspInit+0x1c8>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f44:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <HAL_ADC_MspInit+0x1c8>)
 8003f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f54:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f56:	2303      	movs	r3, #3
 8003f58:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f62:	4619      	mov	r1, r3
 8003f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f68:	f003 ff06 	bl	8007d78 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <HAL_ADC_MspInit+0x1d8>)
 8003f6e:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <HAL_ADC_MspInit+0x1dc>)
 8003f70:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003f72:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <HAL_ADC_MspInit+0x1d8>)
 8003f74:	2227      	movs	r2, #39	; 0x27
 8003f76:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f78:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <HAL_ADC_MspInit+0x1d8>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f7e:	4b17      	ldr	r3, [pc, #92]	; (8003fdc <HAL_ADC_MspInit+0x1d8>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003f84:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <HAL_ADC_MspInit+0x1d8>)
 8003f86:	2280      	movs	r2, #128	; 0x80
 8003f88:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f8a:	4b14      	ldr	r3, [pc, #80]	; (8003fdc <HAL_ADC_MspInit+0x1d8>)
 8003f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f90:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f92:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <HAL_ADC_MspInit+0x1d8>)
 8003f94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f98:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 8003f9a:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <HAL_ADC_MspInit+0x1d8>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003fa0:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <HAL_ADC_MspInit+0x1d8>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8003fa6:	480d      	ldr	r0, [pc, #52]	; (8003fdc <HAL_ADC_MspInit+0x1d8>)
 8003fa8:	f002 fd84 	bl	8006ab4 <HAL_DMA_Init>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8003fb2:	f7ff fd0d 	bl	80039d0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a08      	ldr	r2, [pc, #32]	; (8003fdc <HAL_ADC_MspInit+0x1d8>)
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54
 8003fbc:	4a07      	ldr	r2, [pc, #28]	; (8003fdc <HAL_ADC_MspInit+0x1d8>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003fc2:	bf00      	nop
 8003fc4:	3780      	adds	r7, #128	; 0x80
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	2000037c 	.word	0x2000037c
 8003fd4:	40020008 	.word	0x40020008
 8003fd8:	50000600 	.word	0x50000600
 8003fdc:	200003dc 	.word	0x200003dc
 8003fe0:	40020058 	.word	0x40020058

08003fe4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b0a2      	sub	sp, #136	; 0x88
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
 8003ff8:	60da      	str	r2, [r3, #12]
 8003ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ffc:	f107 0320 	add.w	r3, r7, #32
 8004000:	2254      	movs	r2, #84	; 0x54
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f009 fef3 	bl	800ddf0 <memset>
  if(hfdcan->Instance==FDCAN1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7a      	ldr	r2, [pc, #488]	; (80041f8 <HAL_FDCAN_MspInit+0x214>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d14b      	bne.n	80040ac <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004018:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800401a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800401e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004020:	f107 0320 	add.w	r3, r7, #32
 8004024:	4618      	mov	r0, r3
 8004026:	f007 fcbd 	bl	800b9a4 <HAL_RCCEx_PeriphCLKConfig>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004030:	f7ff fcce 	bl	80039d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8004034:	4b71      	ldr	r3, [pc, #452]	; (80041fc <HAL_FDCAN_MspInit+0x218>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3301      	adds	r3, #1
 800403a:	4a70      	ldr	r2, [pc, #448]	; (80041fc <HAL_FDCAN_MspInit+0x218>)
 800403c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800403e:	4b6f      	ldr	r3, [pc, #444]	; (80041fc <HAL_FDCAN_MspInit+0x218>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d10b      	bne.n	800405e <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8004046:	4b6e      	ldr	r3, [pc, #440]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 8004048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404a:	4a6d      	ldr	r2, [pc, #436]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 800404c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004050:	6593      	str	r3, [r2, #88]	; 0x58
 8004052:	4b6b      	ldr	r3, [pc, #428]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 8004054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800405e:	4b68      	ldr	r3, [pc, #416]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 8004060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004062:	4a67      	ldr	r2, [pc, #412]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 8004064:	f043 0308 	orr.w	r3, r3, #8
 8004068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800406a:	4b65      	ldr	r3, [pc, #404]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 800406c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004076:	2303      	movs	r3, #3
 8004078:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407a:	2302      	movs	r3, #2
 800407c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407e:	2300      	movs	r3, #0
 8004080:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004082:	2300      	movs	r3, #0
 8004084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004088:	2309      	movs	r3, #9
 800408a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800408e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004092:	4619      	mov	r1, r3
 8004094:	485b      	ldr	r0, [pc, #364]	; (8004204 <HAL_FDCAN_MspInit+0x220>)
 8004096:	f003 fe6f 	bl	8007d78 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800409a:	2200      	movs	r2, #0
 800409c:	2100      	movs	r1, #0
 800409e:	2015      	movs	r0, #21
 80040a0:	f002 fcd3 	bl	8006a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80040a4:	2015      	movs	r0, #21
 80040a6:	f002 fcea 	bl	8006a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80040aa:	e0a1      	b.n	80041f0 <HAL_FDCAN_MspInit+0x20c>
  else if(hfdcan->Instance==FDCAN2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a55      	ldr	r2, [pc, #340]	; (8004208 <HAL_FDCAN_MspInit+0x224>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d14c      	bne.n	8004150 <HAL_FDCAN_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80040b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80040bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040c0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040c2:	f107 0320 	add.w	r3, r7, #32
 80040c6:	4618      	mov	r0, r3
 80040c8:	f007 fc6c 	bl	800b9a4 <HAL_RCCEx_PeriphCLKConfig>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 80040d2:	f7ff fc7d 	bl	80039d0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80040d6:	4b49      	ldr	r3, [pc, #292]	; (80041fc <HAL_FDCAN_MspInit+0x218>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3301      	adds	r3, #1
 80040dc:	4a47      	ldr	r2, [pc, #284]	; (80041fc <HAL_FDCAN_MspInit+0x218>)
 80040de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80040e0:	4b46      	ldr	r3, [pc, #280]	; (80041fc <HAL_FDCAN_MspInit+0x218>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d10b      	bne.n	8004100 <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80040e8:	4b45      	ldr	r3, [pc, #276]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	4a44      	ldr	r2, [pc, #272]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 80040ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040f2:	6593      	str	r3, [r2, #88]	; 0x58
 80040f4:	4b42      	ldr	r3, [pc, #264]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fc:	617b      	str	r3, [r7, #20]
 80040fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004100:	4b3f      	ldr	r3, [pc, #252]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 8004102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004104:	4a3e      	ldr	r2, [pc, #248]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 8004106:	f043 0302 	orr.w	r3, r3, #2
 800410a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800410c:	4b3c      	ldr	r3, [pc, #240]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 800410e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004118:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800411c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411e:	2302      	movs	r3, #2
 8004120:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004122:	2300      	movs	r3, #0
 8004124:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004126:	2300      	movs	r3, #0
 8004128:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800412c:	2309      	movs	r3, #9
 800412e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004132:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004136:	4619      	mov	r1, r3
 8004138:	4834      	ldr	r0, [pc, #208]	; (800420c <HAL_FDCAN_MspInit+0x228>)
 800413a:	f003 fe1d 	bl	8007d78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 800413e:	2200      	movs	r2, #0
 8004140:	2100      	movs	r1, #0
 8004142:	2056      	movs	r0, #86	; 0x56
 8004144:	f002 fc81 	bl	8006a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8004148:	2056      	movs	r0, #86	; 0x56
 800414a:	f002 fc98 	bl	8006a7e <HAL_NVIC_EnableIRQ>
}
 800414e:	e04f      	b.n	80041f0 <HAL_FDCAN_MspInit+0x20c>
  else if(hfdcan->Instance==FDCAN3)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a2e      	ldr	r2, [pc, #184]	; (8004210 <HAL_FDCAN_MspInit+0x22c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d14a      	bne.n	80041f0 <HAL_FDCAN_MspInit+0x20c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800415a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800415e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004164:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004166:	f107 0320 	add.w	r3, r7, #32
 800416a:	4618      	mov	r0, r3
 800416c:	f007 fc1a 	bl	800b9a4 <HAL_RCCEx_PeriphCLKConfig>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_FDCAN_MspInit+0x196>
      Error_Handler();
 8004176:	f7ff fc2b 	bl	80039d0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800417a:	4b20      	ldr	r3, [pc, #128]	; (80041fc <HAL_FDCAN_MspInit+0x218>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	4a1e      	ldr	r2, [pc, #120]	; (80041fc <HAL_FDCAN_MspInit+0x218>)
 8004182:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8004184:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <HAL_FDCAN_MspInit+0x218>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d10b      	bne.n	80041a4 <HAL_FDCAN_MspInit+0x1c0>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800418c:	4b1c      	ldr	r3, [pc, #112]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 8004192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004196:	6593      	str	r3, [r2, #88]	; 0x58
 8004198:	4b19      	ldr	r3, [pc, #100]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a4:	4b16      	ldr	r3, [pc, #88]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 80041a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a8:	4a15      	ldr	r2, [pc, #84]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 80041aa:	f043 0302 	orr.w	r3, r3, #2
 80041ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041b0:	4b13      	ldr	r3, [pc, #76]	; (8004200 <HAL_FDCAN_MspInit+0x21c>)
 80041b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80041bc:	2318      	movs	r3, #24
 80041be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c0:	2302      	movs	r3, #2
 80041c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 80041ce:	230b      	movs	r3, #11
 80041d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80041d8:	4619      	mov	r1, r3
 80041da:	480c      	ldr	r0, [pc, #48]	; (800420c <HAL_FDCAN_MspInit+0x228>)
 80041dc:	f003 fdcc 	bl	8007d78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 80041e0:	2200      	movs	r2, #0
 80041e2:	2100      	movs	r1, #0
 80041e4:	2059      	movs	r0, #89	; 0x59
 80041e6:	f002 fc30 	bl	8006a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 80041ea:	2059      	movs	r0, #89	; 0x59
 80041ec:	f002 fc47 	bl	8006a7e <HAL_NVIC_EnableIRQ>
}
 80041f0:	bf00      	nop
 80041f2:	3788      	adds	r7, #136	; 0x88
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40006400 	.word	0x40006400
 80041fc:	20000c6c 	.word	0x20000c6c
 8004200:	40021000 	.word	0x40021000
 8004204:	48000c00 	.word	0x48000c00
 8004208:	40006800 	.word	0x40006800
 800420c:	48000400 	.word	0x48000400
 8004210:	40006c00 	.word	0x40006c00

08004214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b0a4      	sub	sp, #144	; 0x90
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800421c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	609a      	str	r2, [r3, #8]
 8004228:	60da      	str	r2, [r3, #12]
 800422a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800422c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004230:	2254      	movs	r2, #84	; 0x54
 8004232:	2100      	movs	r1, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f009 fddb 	bl	800ddf0 <memset>
  if(hi2c->Instance==I2C1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a8a      	ldr	r2, [pc, #552]	; (8004468 <HAL_I2C_MspInit+0x254>)
 8004240:	4293      	cmp	r3, r2
 8004242:	f040 80af 	bne.w	80043a4 <HAL_I2C_MspInit+0x190>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004246:	2340      	movs	r3, #64	; 0x40
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800424a:	2300      	movs	r3, #0
 800424c:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800424e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004252:	4618      	mov	r0, r3
 8004254:	f007 fba6 	bl	800b9a4 <HAL_RCCEx_PeriphCLKConfig>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800425e:	f7ff fbb7 	bl	80039d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004262:	4b82      	ldr	r3, [pc, #520]	; (800446c <HAL_I2C_MspInit+0x258>)
 8004264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004266:	4a81      	ldr	r2, [pc, #516]	; (800446c <HAL_I2C_MspInit+0x258>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800426e:	4b7f      	ldr	r3, [pc, #508]	; (800446c <HAL_I2C_MspInit+0x258>)
 8004270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800427a:	4b7c      	ldr	r3, [pc, #496]	; (800446c <HAL_I2C_MspInit+0x258>)
 800427c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427e:	4a7b      	ldr	r2, [pc, #492]	; (800446c <HAL_I2C_MspInit+0x258>)
 8004280:	f043 0302 	orr.w	r3, r3, #2
 8004284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004286:	4b79      	ldr	r3, [pc, #484]	; (800446c <HAL_I2C_MspInit+0x258>)
 8004288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	623b      	str	r3, [r7, #32]
 8004290:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004296:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004298:	2312      	movs	r3, #18
 800429a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a4:	2300      	movs	r3, #0
 80042a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042aa:	2304      	movs	r3, #4
 80042ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042b4:	4619      	mov	r1, r3
 80042b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042ba:	f003 fd5d 	bl	8007d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042c2:	2312      	movs	r3, #18
 80042c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ce:	2300      	movs	r3, #0
 80042d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042d4:	2304      	movs	r3, #4
 80042d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042de:	4619      	mov	r1, r3
 80042e0:	4863      	ldr	r0, [pc, #396]	; (8004470 <HAL_I2C_MspInit+0x25c>)
 80042e2:	f003 fd49 	bl	8007d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042e6:	4b61      	ldr	r3, [pc, #388]	; (800446c <HAL_I2C_MspInit+0x258>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	4a60      	ldr	r2, [pc, #384]	; (800446c <HAL_I2C_MspInit+0x258>)
 80042ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042f0:	6593      	str	r3, [r2, #88]	; 0x58
 80042f2:	4b5e      	ldr	r3, [pc, #376]	; (800446c <HAL_I2C_MspInit+0x258>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 80042fe:	4b5d      	ldr	r3, [pc, #372]	; (8004474 <HAL_I2C_MspInit+0x260>)
 8004300:	4a5d      	ldr	r2, [pc, #372]	; (8004478 <HAL_I2C_MspInit+0x264>)
 8004302:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8004304:	4b5b      	ldr	r3, [pc, #364]	; (8004474 <HAL_I2C_MspInit+0x260>)
 8004306:	2210      	movs	r2, #16
 8004308:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800430a:	4b5a      	ldr	r3, [pc, #360]	; (8004474 <HAL_I2C_MspInit+0x260>)
 800430c:	2200      	movs	r2, #0
 800430e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004310:	4b58      	ldr	r3, [pc, #352]	; (8004474 <HAL_I2C_MspInit+0x260>)
 8004312:	2200      	movs	r2, #0
 8004314:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004316:	4b57      	ldr	r3, [pc, #348]	; (8004474 <HAL_I2C_MspInit+0x260>)
 8004318:	2280      	movs	r2, #128	; 0x80
 800431a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800431c:	4b55      	ldr	r3, [pc, #340]	; (8004474 <HAL_I2C_MspInit+0x260>)
 800431e:	2200      	movs	r2, #0
 8004320:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004322:	4b54      	ldr	r3, [pc, #336]	; (8004474 <HAL_I2C_MspInit+0x260>)
 8004324:	2200      	movs	r2, #0
 8004326:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004328:	4b52      	ldr	r3, [pc, #328]	; (8004474 <HAL_I2C_MspInit+0x260>)
 800432a:	2200      	movs	r2, #0
 800432c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800432e:	4b51      	ldr	r3, [pc, #324]	; (8004474 <HAL_I2C_MspInit+0x260>)
 8004330:	2200      	movs	r2, #0
 8004332:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004334:	484f      	ldr	r0, [pc, #316]	; (8004474 <HAL_I2C_MspInit+0x260>)
 8004336:	f002 fbbd 	bl	8006ab4 <HAL_DMA_Init>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_I2C_MspInit+0x130>
    {
      Error_Handler();
 8004340:	f7ff fb46 	bl	80039d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a4b      	ldr	r2, [pc, #300]	; (8004474 <HAL_I2C_MspInit+0x260>)
 8004348:	63da      	str	r2, [r3, #60]	; 0x3c
 800434a:	4a4a      	ldr	r2, [pc, #296]	; (8004474 <HAL_I2C_MspInit+0x260>)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 8004350:	4b4a      	ldr	r3, [pc, #296]	; (800447c <HAL_I2C_MspInit+0x268>)
 8004352:	4a4b      	ldr	r2, [pc, #300]	; (8004480 <HAL_I2C_MspInit+0x26c>)
 8004354:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8004356:	4b49      	ldr	r3, [pc, #292]	; (800447c <HAL_I2C_MspInit+0x268>)
 8004358:	2211      	movs	r2, #17
 800435a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800435c:	4b47      	ldr	r3, [pc, #284]	; (800447c <HAL_I2C_MspInit+0x268>)
 800435e:	2210      	movs	r2, #16
 8004360:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004362:	4b46      	ldr	r3, [pc, #280]	; (800447c <HAL_I2C_MspInit+0x268>)
 8004364:	2200      	movs	r2, #0
 8004366:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004368:	4b44      	ldr	r3, [pc, #272]	; (800447c <HAL_I2C_MspInit+0x268>)
 800436a:	2280      	movs	r2, #128	; 0x80
 800436c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800436e:	4b43      	ldr	r3, [pc, #268]	; (800447c <HAL_I2C_MspInit+0x268>)
 8004370:	2200      	movs	r2, #0
 8004372:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004374:	4b41      	ldr	r3, [pc, #260]	; (800447c <HAL_I2C_MspInit+0x268>)
 8004376:	2200      	movs	r2, #0
 8004378:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800437a:	4b40      	ldr	r3, [pc, #256]	; (800447c <HAL_I2C_MspInit+0x268>)
 800437c:	2200      	movs	r2, #0
 800437e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004380:	4b3e      	ldr	r3, [pc, #248]	; (800447c <HAL_I2C_MspInit+0x268>)
 8004382:	2200      	movs	r2, #0
 8004384:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004386:	483d      	ldr	r0, [pc, #244]	; (800447c <HAL_I2C_MspInit+0x268>)
 8004388:	f002 fb94 	bl	8006ab4 <HAL_DMA_Init>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_I2C_MspInit+0x182>
    {
      Error_Handler();
 8004392:	f7ff fb1d 	bl	80039d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a38      	ldr	r2, [pc, #224]	; (800447c <HAL_I2C_MspInit+0x268>)
 800439a:	639a      	str	r2, [r3, #56]	; 0x38
 800439c:	4a37      	ldr	r2, [pc, #220]	; (800447c <HAL_I2C_MspInit+0x268>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80043a2:	e0dd      	b.n	8004560 <HAL_I2C_MspInit+0x34c>
  else if(hi2c->Instance==I2C2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a36      	ldr	r2, [pc, #216]	; (8004484 <HAL_I2C_MspInit+0x270>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d16e      	bne.n	800448c <HAL_I2C_MspInit+0x278>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80043b2:	2300      	movs	r3, #0
 80043b4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043ba:	4618      	mov	r0, r3
 80043bc:	f007 faf2 	bl	800b9a4 <HAL_RCCEx_PeriphCLKConfig>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 80043c6:	f7ff fb03 	bl	80039d0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ca:	4b28      	ldr	r3, [pc, #160]	; (800446c <HAL_I2C_MspInit+0x258>)
 80043cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ce:	4a27      	ldr	r2, [pc, #156]	; (800446c <HAL_I2C_MspInit+0x258>)
 80043d0:	f043 0304 	orr.w	r3, r3, #4
 80043d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043d6:	4b25      	ldr	r3, [pc, #148]	; (800446c <HAL_I2C_MspInit+0x258>)
 80043d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e2:	4b22      	ldr	r3, [pc, #136]	; (800446c <HAL_I2C_MspInit+0x258>)
 80043e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e6:	4a21      	ldr	r2, [pc, #132]	; (800446c <HAL_I2C_MspInit+0x258>)
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043ee:	4b1f      	ldr	r3, [pc, #124]	; (800446c <HAL_I2C_MspInit+0x258>)
 80043f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80043fa:	2310      	movs	r3, #16
 80043fc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043fe:	2312      	movs	r3, #18
 8004400:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004404:	2300      	movs	r3, #0
 8004406:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440a:	2300      	movs	r3, #0
 800440c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004410:	2304      	movs	r3, #4
 8004412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004416:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800441a:	4619      	mov	r1, r3
 800441c:	481a      	ldr	r0, [pc, #104]	; (8004488 <HAL_I2C_MspInit+0x274>)
 800441e:	f003 fcab 	bl	8007d78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004426:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004428:	2312      	movs	r3, #18
 800442a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442e:	2300      	movs	r3, #0
 8004430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004434:	2300      	movs	r3, #0
 8004436:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800443a:	2304      	movs	r3, #4
 800443c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004440:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004444:	4619      	mov	r1, r3
 8004446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800444a:	f003 fc95 	bl	8007d78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800444e:	4b07      	ldr	r3, [pc, #28]	; (800446c <HAL_I2C_MspInit+0x258>)
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	4a06      	ldr	r2, [pc, #24]	; (800446c <HAL_I2C_MspInit+0x258>)
 8004454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004458:	6593      	str	r3, [r2, #88]	; 0x58
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <HAL_I2C_MspInit+0x258>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]
}
 8004466:	e07b      	b.n	8004560 <HAL_I2C_MspInit+0x34c>
 8004468:	40005400 	.word	0x40005400
 800446c:	40021000 	.word	0x40021000
 8004470:	48000400 	.word	0x48000400
 8004474:	20000664 	.word	0x20000664
 8004478:	4002001c 	.word	0x4002001c
 800447c:	200006c4 	.word	0x200006c4
 8004480:	40020030 	.word	0x40020030
 8004484:	40005800 	.word	0x40005800
 8004488:	48000800 	.word	0x48000800
  else if(hi2c->Instance==I2C3)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a35      	ldr	r2, [pc, #212]	; (8004568 <HAL_I2C_MspInit+0x354>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d164      	bne.n	8004560 <HAL_I2C_MspInit+0x34c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800449c:	2300      	movs	r3, #0
 800449e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044a4:	4618      	mov	r0, r3
 80044a6:	f007 fa7d 	bl	800b9a4 <HAL_RCCEx_PeriphCLKConfig>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_I2C_MspInit+0x2a0>
      Error_Handler();
 80044b0:	f7ff fa8e 	bl	80039d0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044b4:	4b2d      	ldr	r3, [pc, #180]	; (800456c <HAL_I2C_MspInit+0x358>)
 80044b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b8:	4a2c      	ldr	r2, [pc, #176]	; (800456c <HAL_I2C_MspInit+0x358>)
 80044ba:	f043 0304 	orr.w	r3, r3, #4
 80044be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044c0:	4b2a      	ldr	r3, [pc, #168]	; (800456c <HAL_I2C_MspInit+0x358>)
 80044c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044d2:	2312      	movs	r3, #18
 80044d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044de:	2300      	movs	r3, #0
 80044e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80044e4:	2308      	movs	r3, #8
 80044e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80044ee:	4619      	mov	r1, r3
 80044f0:	481f      	ldr	r0, [pc, #124]	; (8004570 <HAL_I2C_MspInit+0x35c>)
 80044f2:	f003 fc41 	bl	8007d78 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80044f6:	4b1d      	ldr	r3, [pc, #116]	; (800456c <HAL_I2C_MspInit+0x358>)
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fa:	4a1c      	ldr	r2, [pc, #112]	; (800456c <HAL_I2C_MspInit+0x358>)
 80044fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004500:	6593      	str	r3, [r2, #88]	; 0x58
 8004502:	4b1a      	ldr	r3, [pc, #104]	; (800456c <HAL_I2C_MspInit+0x358>)
 8004504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004506:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800450a:	60bb      	str	r3, [r7, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Channel4;
 800450e:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_I2C_MspInit+0x360>)
 8004510:	4a19      	ldr	r2, [pc, #100]	; (8004578 <HAL_I2C_MspInit+0x364>)
 8004512:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8004514:	4b17      	ldr	r3, [pc, #92]	; (8004574 <HAL_I2C_MspInit+0x360>)
 8004516:	2214      	movs	r2, #20
 8004518:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800451a:	4b16      	ldr	r3, [pc, #88]	; (8004574 <HAL_I2C_MspInit+0x360>)
 800451c:	2200      	movs	r2, #0
 800451e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004520:	4b14      	ldr	r3, [pc, #80]	; (8004574 <HAL_I2C_MspInit+0x360>)
 8004522:	2200      	movs	r2, #0
 8004524:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004526:	4b13      	ldr	r3, [pc, #76]	; (8004574 <HAL_I2C_MspInit+0x360>)
 8004528:	2280      	movs	r2, #128	; 0x80
 800452a:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800452c:	4b11      	ldr	r3, [pc, #68]	; (8004574 <HAL_I2C_MspInit+0x360>)
 800452e:	2200      	movs	r2, #0
 8004530:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <HAL_I2C_MspInit+0x360>)
 8004534:	2200      	movs	r2, #0
 8004536:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8004538:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <HAL_I2C_MspInit+0x360>)
 800453a:	2200      	movs	r2, #0
 800453c:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800453e:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <HAL_I2C_MspInit+0x360>)
 8004540:	2200      	movs	r2, #0
 8004542:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8004544:	480b      	ldr	r0, [pc, #44]	; (8004574 <HAL_I2C_MspInit+0x360>)
 8004546:	f002 fab5 	bl	8006ab4 <HAL_DMA_Init>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_I2C_MspInit+0x340>
      Error_Handler();
 8004550:	f7ff fa3e 	bl	80039d0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a07      	ldr	r2, [pc, #28]	; (8004574 <HAL_I2C_MspInit+0x360>)
 8004558:	63da      	str	r2, [r3, #60]	; 0x3c
 800455a:	4a06      	ldr	r2, [pc, #24]	; (8004574 <HAL_I2C_MspInit+0x360>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004560:	bf00      	nop
 8004562:	3790      	adds	r7, #144	; 0x90
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40007800 	.word	0x40007800
 800456c:	40021000 	.word	0x40021000
 8004570:	48000800 	.word	0x48000800
 8004574:	20000724 	.word	0x20000724
 8004578:	40020044 	.word	0x40020044

0800457c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b0a0      	sub	sp, #128	; 0x80
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004584:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	605a      	str	r2, [r3, #4]
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	60da      	str	r2, [r3, #12]
 8004592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004594:	f107 0318 	add.w	r3, r7, #24
 8004598:	2254      	movs	r2, #84	; 0x54
 800459a:	2100      	movs	r1, #0
 800459c:	4618      	mov	r0, r3
 800459e:	f009 fc27 	bl	800ddf0 <memset>
  if(huart->Instance==LPUART1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a2d      	ldr	r2, [pc, #180]	; (800465c <HAL_UART_MspInit+0xe0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d152      	bne.n	8004652 <HAL_UART_MspInit+0xd6>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80045ac:	2320      	movs	r3, #32
 80045ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 80045b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045b4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045b6:	f107 0318 	add.w	r3, r7, #24
 80045ba:	4618      	mov	r0, r3
 80045bc:	f007 f9f2 	bl	800b9a4 <HAL_RCCEx_PeriphCLKConfig>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80045c6:	f7ff fa03 	bl	80039d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80045ca:	4b25      	ldr	r3, [pc, #148]	; (8004660 <HAL_UART_MspInit+0xe4>)
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	4a24      	ldr	r2, [pc, #144]	; (8004660 <HAL_UART_MspInit+0xe4>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80045d6:	4b22      	ldr	r3, [pc, #136]	; (8004660 <HAL_UART_MspInit+0xe4>)
 80045d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045e2:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <HAL_UART_MspInit+0xe4>)
 80045e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e6:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <HAL_UART_MspInit+0xe4>)
 80045e8:	f043 0304 	orr.w	r3, r3, #4
 80045ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045ee:	4b1c      	ldr	r3, [pc, #112]	; (8004660 <HAL_UART_MspInit+0xe4>)
 80045f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	613b      	str	r3, [r7, #16]
 80045f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045fa:	4b19      	ldr	r3, [pc, #100]	; (8004660 <HAL_UART_MspInit+0xe4>)
 80045fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fe:	4a18      	ldr	r2, [pc, #96]	; (8004660 <HAL_UART_MspInit+0xe4>)
 8004600:	f043 0302 	orr.w	r3, r3, #2
 8004604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004606:	4b16      	ldr	r3, [pc, #88]	; (8004660 <HAL_UART_MspInit+0xe4>)
 8004608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004612:	2303      	movs	r3, #3
 8004614:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004616:	2302      	movs	r3, #2
 8004618:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461a:	2300      	movs	r3, #0
 800461c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800461e:	2300      	movs	r3, #0
 8004620:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004622:	2308      	movs	r3, #8
 8004624:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004626:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800462a:	4619      	mov	r1, r3
 800462c:	480d      	ldr	r0, [pc, #52]	; (8004664 <HAL_UART_MspInit+0xe8>)
 800462e:	f003 fba3 	bl	8007d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004632:	2302      	movs	r3, #2
 8004634:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004636:	2302      	movs	r3, #2
 8004638:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463a:	2300      	movs	r3, #0
 800463c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800463e:	2300      	movs	r3, #0
 8004640:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8004642:	230c      	movs	r3, #12
 8004644:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004646:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800464a:	4619      	mov	r1, r3
 800464c:	4806      	ldr	r0, [pc, #24]	; (8004668 <HAL_UART_MspInit+0xec>)
 800464e:	f003 fb93 	bl	8007d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8004652:	bf00      	nop
 8004654:	3780      	adds	r7, #128	; 0x80
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40008000 	.word	0x40008000
 8004660:	40021000 	.word	0x40021000
 8004664:	48000800 	.word	0x48000800
 8004668:	48000400 	.word	0x48000400

0800466c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08c      	sub	sp, #48	; 0x30
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004674:	f107 031c 	add.w	r3, r7, #28
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	609a      	str	r2, [r3, #8]
 8004680:	60da      	str	r2, [r3, #12]
 8004682:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a2f      	ldr	r2, [pc, #188]	; (8004748 <HAL_SPI_MspInit+0xdc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d129      	bne.n	80046e2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800468e:	4b2f      	ldr	r3, [pc, #188]	; (800474c <HAL_SPI_MspInit+0xe0>)
 8004690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004692:	4a2e      	ldr	r2, [pc, #184]	; (800474c <HAL_SPI_MspInit+0xe0>)
 8004694:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004698:	6613      	str	r3, [r2, #96]	; 0x60
 800469a:	4b2c      	ldr	r3, [pc, #176]	; (800474c <HAL_SPI_MspInit+0xe0>)
 800469c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a2:	61bb      	str	r3, [r7, #24]
 80046a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a6:	4b29      	ldr	r3, [pc, #164]	; (800474c <HAL_SPI_MspInit+0xe0>)
 80046a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046aa:	4a28      	ldr	r2, [pc, #160]	; (800474c <HAL_SPI_MspInit+0xe0>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <HAL_SPI_MspInit+0xe0>)
 80046b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80046be:	23e0      	movs	r3, #224	; 0xe0
 80046c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c2:	2302      	movs	r3, #2
 80046c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ca:	2300      	movs	r3, #0
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046ce:	2305      	movs	r3, #5
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d2:	f107 031c 	add.w	r3, r7, #28
 80046d6:	4619      	mov	r1, r3
 80046d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046dc:	f003 fb4c 	bl	8007d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80046e0:	e02d      	b.n	800473e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1a      	ldr	r2, [pc, #104]	; (8004750 <HAL_SPI_MspInit+0xe4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d128      	bne.n	800473e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80046ec:	4b17      	ldr	r3, [pc, #92]	; (800474c <HAL_SPI_MspInit+0xe0>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	4a16      	ldr	r2, [pc, #88]	; (800474c <HAL_SPI_MspInit+0xe0>)
 80046f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f6:	6593      	str	r3, [r2, #88]	; 0x58
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <HAL_SPI_MspInit+0xe0>)
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004704:	4b11      	ldr	r3, [pc, #68]	; (800474c <HAL_SPI_MspInit+0xe0>)
 8004706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004708:	4a10      	ldr	r2, [pc, #64]	; (800474c <HAL_SPI_MspInit+0xe0>)
 800470a:	f043 0304 	orr.w	r3, r3, #4
 800470e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004710:	4b0e      	ldr	r3, [pc, #56]	; (800474c <HAL_SPI_MspInit+0xe0>)
 8004712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800471c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004722:	2302      	movs	r3, #2
 8004724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004726:	2300      	movs	r3, #0
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800472a:	2300      	movs	r3, #0
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800472e:	2306      	movs	r3, #6
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004732:	f107 031c 	add.w	r3, r7, #28
 8004736:	4619      	mov	r1, r3
 8004738:	4806      	ldr	r0, [pc, #24]	; (8004754 <HAL_SPI_MspInit+0xe8>)
 800473a:	f003 fb1d 	bl	8007d78 <HAL_GPIO_Init>
}
 800473e:	bf00      	nop
 8004740:	3730      	adds	r7, #48	; 0x30
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40013000 	.word	0x40013000
 800474c:	40021000 	.word	0x40021000
 8004750:	40003c00 	.word	0x40003c00
 8004754:	48000800 	.word	0x48000800

08004758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004768:	d114      	bne.n	8004794 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800476a:	4b19      	ldr	r3, [pc, #100]	; (80047d0 <HAL_TIM_Base_MspInit+0x78>)
 800476c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476e:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <HAL_TIM_Base_MspInit+0x78>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	6593      	str	r3, [r2, #88]	; 0x58
 8004776:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <HAL_TIM_Base_MspInit+0x78>)
 8004778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004782:	2200      	movs	r2, #0
 8004784:	2100      	movs	r1, #0
 8004786:	201c      	movs	r0, #28
 8004788:	f002 f95f 	bl	8006a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800478c:	201c      	movs	r0, #28
 800478e:	f002 f976 	bl	8006a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004792:	e018      	b.n	80047c6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM5)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a0e      	ldr	r2, [pc, #56]	; (80047d4 <HAL_TIM_Base_MspInit+0x7c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d113      	bne.n	80047c6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800479e:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <HAL_TIM_Base_MspInit+0x78>)
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a2:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <HAL_TIM_Base_MspInit+0x78>)
 80047a4:	f043 0308 	orr.w	r3, r3, #8
 80047a8:	6593      	str	r3, [r2, #88]	; 0x58
 80047aa:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <HAL_TIM_Base_MspInit+0x78>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80047b6:	2200      	movs	r2, #0
 80047b8:	2100      	movs	r1, #0
 80047ba:	2032      	movs	r0, #50	; 0x32
 80047bc:	f002 f945 	bl	8006a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80047c0:	2032      	movs	r0, #50	; 0x32
 80047c2:	f002 f95c 	bl	8006a7e <HAL_NVIC_EnableIRQ>
}
 80047c6:	bf00      	nop
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40000c00 	.word	0x40000c00

080047d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b098      	sub	sp, #96	; 0x60
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047e0:	f107 030c 	add.w	r3, r7, #12
 80047e4:	2254      	movs	r2, #84	; 0x54
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f009 fb01 	bl	800ddf0 <memset>
  if(hpcd->Instance==USB)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a11      	ldr	r2, [pc, #68]	; (8004838 <HAL_PCD_MspInit+0x60>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d11a      	bne.n	800482e <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80047f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80047fe:	2300      	movs	r3, #0
 8004800:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004802:	f107 030c 	add.w	r3, r7, #12
 8004806:	4618      	mov	r0, r3
 8004808:	f007 f8cc 	bl	800b9a4 <HAL_RCCEx_PeriphCLKConfig>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8004812:	f7ff f8dd 	bl	80039d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004816:	4b09      	ldr	r3, [pc, #36]	; (800483c <HAL_PCD_MspInit+0x64>)
 8004818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481a:	4a08      	ldr	r2, [pc, #32]	; (800483c <HAL_PCD_MspInit+0x64>)
 800481c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004820:	6593      	str	r3, [r2, #88]	; 0x58
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <HAL_PCD_MspInit+0x64>)
 8004824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800482a:	60bb      	str	r3, [r7, #8]
 800482c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800482e:	bf00      	nop
 8004830:	3760      	adds	r7, #96	; 0x60
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40005c00 	.word	0x40005c00
 800483c:	40021000 	.word	0x40021000

08004840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004844:	f007 f84c 	bl	800b8e0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004848:	e7fe      	b.n	8004848 <NMI_Handler+0x8>

0800484a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800484a:	b480      	push	{r7}
 800484c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800484e:	e7fe      	b.n	800484e <HardFault_Handler+0x4>

08004850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004854:	e7fe      	b.n	8004854 <MemManage_Handler+0x4>

08004856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004856:	b480      	push	{r7}
 8004858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800485a:	e7fe      	b.n	800485a <BusFault_Handler+0x4>

0800485c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004860:	e7fe      	b.n	8004860 <UsageFault_Handler+0x4>

08004862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004862:	b480      	push	{r7}
 8004864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004866:	bf00      	nop
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004874:	bf00      	nop
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800487e:	b480      	push	{r7}
 8004880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004882:	bf00      	nop
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004890:	f000 fc66 	bl	8005160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004894:	bf00      	nop
 8004896:	bd80      	pop	{r7, pc}

08004898 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800489c:	4802      	ldr	r0, [pc, #8]	; (80048a8 <DMA1_Channel1_IRQHandler+0x10>)
 800489e:	f002 fa93 	bl	8006dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80048a2:	bf00      	nop
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	2000037c 	.word	0x2000037c

080048ac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80048b0:	4802      	ldr	r0, [pc, #8]	; (80048bc <DMA1_Channel2_IRQHandler+0x10>)
 80048b2:	f002 fa89 	bl	8006dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80048b6:	bf00      	nop
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000664 	.word	0x20000664

080048c0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80048c4:	4802      	ldr	r0, [pc, #8]	; (80048d0 <DMA1_Channel3_IRQHandler+0x10>)
 80048c6:	f002 fa7f 	bl	8006dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	200006c4 	.word	0x200006c4

080048d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80048d8:	4802      	ldr	r0, [pc, #8]	; (80048e4 <DMA1_Channel4_IRQHandler+0x10>)
 80048da:	f002 fa75 	bl	8006dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000724 	.word	0x20000724

080048e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80048ec:	4802      	ldr	r0, [pc, #8]	; (80048f8 <DMA1_Channel5_IRQHandler+0x10>)
 80048ee:	f002 fa6b 	bl	8006dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80048f2:	bf00      	nop
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	200003dc 	.word	0x200003dc

080048fc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004900:	4802      	ldr	r0, [pc, #8]	; (800490c <FDCAN1_IT0_IRQHandler+0x10>)
 8004902:	f002 ffcd 	bl	80078a0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004906:	bf00      	nop
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	2000043c 	.word	0x2000043c

08004910 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// T_out = ((ARR+1)(PSC+1))/F_clk

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004914:	4804      	ldr	r0, [pc, #16]	; (8004928 <TIM2_IRQHandler+0x18>)
 8004916:	f007 fc3c 	bl	800c192 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim2);
 800491a:	4803      	ldr	r0, [pc, #12]	; (8004928 <TIM2_IRQHandler+0x18>)
 800491c:	f007 fc0a 	bl	800c134 <HAL_TIM_Base_Stop_IT>
  HV_on();
 8004920:	f7ff f8a0 	bl	8003a64 <HV_on>
  /* USER CODE END TIM2_IRQn 1 */
}
 8004924:	bf00      	nop
 8004926:	bd80      	pop	{r7, pc}
 8004928:	200008f0 	.word	0x200008f0

0800492c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004930:	4808      	ldr	r0, [pc, #32]	; (8004954 <TIM5_IRQHandler+0x28>)
 8004932:	f007 fc2e 	bl	800c192 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  Fault_Flag = Update_Temp();
 8004936:	f000 f9fd 	bl	8004d34 <Update_Temp>
 800493a:	4603      	mov	r3, r0
 800493c:	461a      	mov	r2, r3
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <TIM5_IRQHandler+0x2c>)
 8004940:	701a      	strb	r2, [r3, #0]
  Fault_Flag = IMD_Req_Isolation();
 8004942:	f7fd fba7 	bl	8002094 <IMD_Req_Isolation>
 8004946:	4603      	mov	r3, r0
 8004948:	461a      	mov	r2, r3
 800494a:	4b03      	ldr	r3, [pc, #12]	; (8004958 <TIM5_IRQHandler+0x2c>)
 800494c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 1 */
}
 800494e:	bf00      	nop
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	2000093c 	.word	0x2000093c
 8004958:	20000c64 	.word	0x20000c64

0800495c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004960:	4802      	ldr	r0, [pc, #8]	; (800496c <FDCAN2_IT0_IRQHandler+0x10>)
 8004962:	f002 ff9d 	bl	80078a0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8004966:	bf00      	nop
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	200004a0 	.word	0x200004a0

08004970 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8004974:	4802      	ldr	r0, [pc, #8]	; (8004980 <FDCAN3_IT1_IRQHandler+0x10>)
 8004976:	f002 ff93 	bl	80078a0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 800497a:	bf00      	nop
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000504 	.word	0x20000504

08004984 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	e00a      	b.n	80049ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004996:	f3af 8000 	nop.w
 800499a:	4601      	mov	r1, r0
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	60ba      	str	r2, [r7, #8]
 80049a2:	b2ca      	uxtb	r2, r1
 80049a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3301      	adds	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	dbf0      	blt.n	8004996 <_read+0x12>
  }

  return len;
 80049b4:	687b      	ldr	r3, [r7, #4]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b086      	sub	sp, #24
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	e009      	b.n	80049e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	60ba      	str	r2, [r7, #8]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	3301      	adds	r3, #1
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	dbf1      	blt.n	80049d0 <_write+0x12>
  }
  return len;
 80049ec:	687b      	ldr	r3, [r7, #4]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <_close>:

int _close(int file)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80049fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a1e:	605a      	str	r2, [r3, #4]
  return 0;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <_isatty>:

int _isatty(int file)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a36:	2301      	movs	r3, #1
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a68:	4a14      	ldr	r2, [pc, #80]	; (8004abc <_sbrk+0x5c>)
 8004a6a:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <_sbrk+0x60>)
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a74:	4b13      	ldr	r3, [pc, #76]	; (8004ac4 <_sbrk+0x64>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a7c:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <_sbrk+0x64>)
 8004a7e:	4a12      	ldr	r2, [pc, #72]	; (8004ac8 <_sbrk+0x68>)
 8004a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a82:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <_sbrk+0x64>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4413      	add	r3, r2
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d207      	bcs.n	8004aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a90:	f009 f9fc 	bl	800de8c <__errno>
 8004a94:	4603      	mov	r3, r0
 8004a96:	220c      	movs	r2, #12
 8004a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9e:	e009      	b.n	8004ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004aa0:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <_sbrk+0x64>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004aa6:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <_sbrk+0x64>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4413      	add	r3, r2
 8004aae:	4a05      	ldr	r2, [pc, #20]	; (8004ac4 <_sbrk+0x64>)
 8004ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	20020000 	.word	0x20020000
 8004ac0:	00000400 	.word	0x00000400
 8004ac4:	20000c70 	.word	0x20000c70
 8004ac8:	20000e30 	.word	0x20000e30

08004acc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <SystemInit+0x20>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	4a05      	ldr	r2, [pc, #20]	; (8004aec <SystemInit+0x20>)
 8004ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ae0:	bf00      	nop
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	e000ed00 	.word	0xe000ed00

08004af0 <i2c_temp_init>:
volatile int adc5_convert = 0;
volatile int32_t temps[8] = {0};
volatile int32_t pressure[1] = {0};


uint8_t i2c_temp_init(mcp9600_handle_t *handle, mcp9600_address_t addr_pin, mcp9600_thermocouple_type_t type){
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
 8004afc:	4613      	mov	r3, r2
 8004afe:	70bb      	strb	r3, [r7, #2]
	uint8_t status;

	DRIVER_MCP9600_LINK_INIT(handle, mcp9600_handle_t);
 8004b00:	221c      	movs	r2, #28
 8004b02:	2100      	movs	r1, #0
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f009 f973 	bl	800ddf0 <memset>
	DRIVER_MCP9600_LINK_IIC_INIT(handle, mcp9600_interface_iic_init);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a40      	ldr	r2, [pc, #256]	; (8004c10 <i2c_temp_init+0x120>)
 8004b0e:	601a      	str	r2, [r3, #0]
	DRIVER_MCP9600_LINK_IIC_DEINIT(handle, mcp9600_interface_iic_deinit);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a40      	ldr	r2, [pc, #256]	; (8004c14 <i2c_temp_init+0x124>)
 8004b14:	605a      	str	r2, [r3, #4]
	DRIVER_MCP9600_LINK_IIC_READ_COMMAND(handle, mcp9600_interface_iic_read_cmd);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a3f      	ldr	r2, [pc, #252]	; (8004c18 <i2c_temp_init+0x128>)
 8004b1a:	60da      	str	r2, [r3, #12]
	DRIVER_MCP9600_LINK_IIC_WRITE_COMMAND(handle, mcp9600_interface_iic_write_cmd);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a3f      	ldr	r2, [pc, #252]	; (8004c1c <i2c_temp_init+0x12c>)
 8004b20:	609a      	str	r2, [r3, #8]
	DRIVER_MCP9600_LINK_IIC_DELAY_MS(handle, mcp9600_interface_delay_ms);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a3e      	ldr	r2, [pc, #248]	; (8004c20 <i2c_temp_init+0x130>)
 8004b26:	611a      	str	r2, [r3, #16]
	DRIVER_MCP9600_LINK_DEBUG_PRINT(handle, mcp9600_interface_debug_print);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a3e      	ldr	r2, [pc, #248]	; (8004c24 <i2c_temp_init+0x134>)
 8004b2c:	615a      	str	r2, [r3, #20]

	status = mcp9600_set_addr_pin(handle, addr_pin); //set i2c address
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	4619      	mov	r1, r3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fd fc75 	bl	8002422 <mcp9600_set_addr_pin>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <i2c_temp_init+0x56>
		return 1;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e05f      	b.n	8004c06 <i2c_temp_init+0x116>
	}
	status = mcp9600_init(handle); //chip init
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fd fc80 	bl	800244c <mcp9600_init>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <i2c_temp_init+0x6a>
		return 1;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e055      	b.n	8004c06 <i2c_temp_init+0x116>
	}
	status = mcp9600_set_mode(handle, MCP9600_MODE_NORMAL); //set normal
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7fd ff49 	bl	80029f4 <mcp9600_set_mode>
 8004b62:	4603      	mov	r3, r0
 8004b64:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <i2c_temp_init+0x86>
		(void)mcp9600_deinit(handle);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7fd fcfb 	bl	8002568 <mcp9600_deinit>
		return 1;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e047      	b.n	8004c06 <i2c_temp_init+0x116>
	}
	status = mcp9600_set_filter_coefficient(handle, MCP9600_FILTER_COEFFICIENT_0); //set filter
 8004b76:	2100      	movs	r1, #0
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7fd ffcf 	bl	8002b1c <mcp9600_set_filter_coefficient>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d004      	beq.n	8004b92 <i2c_temp_init+0xa2>
		(void)mcp9600_deinit(handle);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7fd fced 	bl	8002568 <mcp9600_deinit>
		return 1;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e039      	b.n	8004c06 <i2c_temp_init+0x116>
	}
	status = mcp9600_set_thermocouple_type(handle, type); //thermocouple type
 8004b92:	78bb      	ldrb	r3, [r7, #2]
 8004b94:	4619      	mov	r1, r3
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fd ff74 	bl	8002a84 <mcp9600_set_thermocouple_type>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d004      	beq.n	8004bb0 <i2c_temp_init+0xc0>
		(void)mcp9600_deinit(handle);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fd fcde 	bl	8002568 <mcp9600_deinit>
		return 1;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e02a      	b.n	8004c06 <i2c_temp_init+0x116>
	}
	status = mcp9600_set_cold_junction_resolution(handle,MCP9600_COLD_JUNCTION_RESOLUTION_0P0625);
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fd fe86 	bl	80028c4 <mcp9600_set_cold_junction_resolution>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d004      	beq.n	8004bcc <i2c_temp_init+0xdc>
		(void)mcp9600_deinit(handle);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fd fcd0 	bl	8002568 <mcp9600_deinit>
		return 1;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e01c      	b.n	8004c06 <i2c_temp_init+0x116>
	}
	status = mcp9600_set_adc_resolution(handle,MCP9600_ADC_RESOLUTION_12_BIT);
 8004bcc:	2103      	movs	r1, #3
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fd fec4 	bl	800295c <mcp9600_set_adc_resolution>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d004      	beq.n	8004be8 <i2c_temp_init+0xf8>
		(void)mcp9600_deinit(handle);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fd fcc2 	bl	8002568 <mcp9600_deinit>
		return 1;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e00e      	b.n	8004c06 <i2c_temp_init+0x116>
	}
	status = mcp9600_set_adc_resolution(handle, MCP9600_BURST_MODE_SAMPLE_4);
 8004be8:	2102      	movs	r1, #2
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fd feb6 	bl	800295c <mcp9600_set_adc_resolution>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <i2c_temp_init+0x114>
		(void)mcp9600_deinit(handle);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fd fcb4 	bl	8002568 <mcp9600_deinit>
		return 1;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <i2c_temp_init+0x116>
	}
	return 0;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	08002bad 	.word	0x08002bad
 8004c14:	08002bbd 	.word	0x08002bbd
 8004c18:	08002bf9 	.word	0x08002bf9
 8004c1c:	08002bcd 	.word	0x08002bcd
 8004c20:	08002c25 	.word	0x08002c25
 8004c24:	08002c3b 	.word	0x08002c3b

08004c28 <mcp9600_read>:
uint8_t mcp9600_read(mcp9600_handle_t *handle, int16_t *hot_raw, float *hot_s,int16_t *delta_raw, float *delta_s, int16_t *cold_raw, float *cold_s){
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af04      	add	r7, sp, #16
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
	uint8_t status;
	status = mcp9600_single_read(handle, hot_raw, hot_s, delta_raw, delta_s, cold_raw, cold_s);
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	9302      	str	r3, [sp, #8]
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	9301      	str	r3, [sp, #4]
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7fd fce5 	bl	8002618 <mcp9600_single_read>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	75fb      	strb	r3, [r7, #23]
	if(status !=0){
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <mcp9600_read+0x34>
		return 1;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <mcp9600_read+0x36>
	}
	return 0;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <tempsensor_init>:

uint8_t tempsensor_init(){
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
	uint8_t status;
	status = i2c_temp_init(&MCP_0, MCP9600_ADDRESS_0, MCP9600_THERMOCOUPLE_TYPE_K);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	21c0      	movs	r1, #192	; 0xc0
 8004c72:	4828      	ldr	r0, [pc, #160]	; (8004d14 <tempsensor_init+0xac>)
 8004c74:	f7ff ff3c 	bl	8004af0 <i2c_temp_init>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	70fb      	strb	r3, [r7, #3]
	if(status !=0){
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <tempsensor_init+0x1e>
		return 1;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e042      	b.n	8004d0c <tempsensor_init+0xa4>
	}
	status = i2c_temp_init(&MCP_1, MCP9600_ADDRESS_1, MCP9600_THERMOCOUPLE_TYPE_K);
 8004c86:	2200      	movs	r2, #0
 8004c88:	21cc      	movs	r1, #204	; 0xcc
 8004c8a:	4823      	ldr	r0, [pc, #140]	; (8004d18 <tempsensor_init+0xb0>)
 8004c8c:	f7ff ff30 	bl	8004af0 <i2c_temp_init>
 8004c90:	4603      	mov	r3, r0
 8004c92:	70fb      	strb	r3, [r7, #3]
	if(status !=0){
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <tempsensor_init+0x36>
		return 1;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e036      	b.n	8004d0c <tempsensor_init+0xa4>
	}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_result_dma,adc1_count);
 8004c9e:	2304      	movs	r3, #4
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	491e      	ldr	r1, [pc, #120]	; (8004d1c <tempsensor_init+0xb4>)
 8004ca4:	481e      	ldr	r0, [pc, #120]	; (8004d20 <tempsensor_init+0xb8>)
 8004ca6:	f000 fe75 	bl	8005994 <HAL_ADC_Start_DMA>
	while(adc1_convert == 0){
 8004caa:	bf00      	nop
 8004cac:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <tempsensor_init+0xbc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0fb      	beq.n	8004cac <tempsensor_init+0x44>
		//will hold until ready used to make sure all temp sensors are connected
	}
	adc1_convert = 0;
 8004cb4:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <tempsensor_init+0xbc>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < adc1_count; i++){
 8004cba:	2300      	movs	r3, #0
 8004cbc:	607b      	str	r3, [r7, #4]
 8004cbe:	e00b      	b.n	8004cd8 <tempsensor_init+0x70>
		if(adc1_result_dma[i] <= 0){
 8004cc0:	4a16      	ldr	r2, [pc, #88]	; (8004d1c <tempsensor_init+0xb4>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <tempsensor_init+0x6a>
			return 1;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e01c      	b.n	8004d0c <tempsensor_init+0xa4>
	for(int i = 0; i < adc1_count; i++){
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	607b      	str	r3, [r7, #4]
 8004cd8:	2204      	movs	r2, #4
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	dbef      	blt.n	8004cc0 <tempsensor_init+0x58>
		}
	}
	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_result_dma,adc5_count);
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	4910      	ldr	r1, [pc, #64]	; (8004d28 <tempsensor_init+0xc0>)
 8004ce6:	4811      	ldr	r0, [pc, #68]	; (8004d2c <tempsensor_init+0xc4>)
 8004ce8:	f000 fe54 	bl	8005994 <HAL_ADC_Start_DMA>
	while(adc5_convert == 0){
 8004cec:	bf00      	nop
 8004cee:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <tempsensor_init+0xc8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0fb      	beq.n	8004cee <tempsensor_init+0x86>
			//will hold until ready used to make sure all pressure sensors are connected
	}
	adc5_convert = 0;
 8004cf6:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <tempsensor_init+0xc8>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
	if(adc5_result_dma[0] <= 0){
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <tempsensor_init+0xc0>)
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <tempsensor_init+0xa2>
		return 1;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <tempsensor_init+0xa4>
	}
	return 0;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000c74 	.word	0x20000c74
 8004d18:	20000c90 	.word	0x20000c90
 8004d1c:	20000cac 	.word	0x20000cac
 8004d20:	200002a4 	.word	0x200002a4
 8004d24:	20000cb8 	.word	0x20000cb8
 8004d28:	20000cb4 	.word	0x20000cb4
 8004d2c:	20000310 	.word	0x20000310
 8004d30:	20000cbc 	.word	0x20000cbc

08004d34 <Update_Temp>:

uint8_t Update_Temp(){
 8004d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d38:	b094      	sub	sp, #80	; 0x50
 8004d3a:	af04      	add	r7, sp, #16
	int16_t delta_raw;
	float delta_s;
	int16_t cold_raw;
	float cold_s;

	if(adc1_convert == 1){ //when adc is done convert value to degree C and add to global temp variable
 8004d3c:	4baf      	ldr	r3, [pc, #700]	; (8004ffc <Update_Temp+0x2c8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d17f      	bne.n	8004e44 <Update_Temp+0x110>
		for(int i = 0; i < adc1_count; i++){
 8004d44:	2300      	movs	r3, #0
 8004d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d48:	e074      	b.n	8004e34 <Update_Temp+0x100>
			int32_t raw = adc1_result_dma[i];
 8004d4a:	4aad      	ldr	r2, [pc, #692]	; (8005000 <Update_Temp+0x2cc>)
 8004d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	63bb      	str	r3, [r7, #56]	; 0x38
			int32_t pow2 = raw*raw;
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	fb03 f303 	mul.w	r3, r3, r3
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
			temps[i] = (((int32_t)((((int64_t)pow2*raw>>16)*76633531) >> 16)+(int32_t)(((int64_t)pow2*-4493757)>>16)+(raw*208775)+ -126577781)>>16);
 8004d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d60:	17da      	asrs	r2, r3, #31
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	617a      	str	r2, [r7, #20]
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	17da      	asrs	r2, r3, #31
 8004d6a:	60bb      	str	r3, [r7, #8]
 8004d6c:	60fa      	str	r2, [r7, #12]
 8004d6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d72:	460b      	mov	r3, r1
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	fb02 f203 	mul.w	r2, r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004d80:	4601      	mov	r1, r0
 8004d82:	fb01 f303 	mul.w	r3, r1, r3
 8004d86:	4413      	add	r3, r2
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	fba2 4501 	umull	r4, r5, r2, r1
 8004d90:	442b      	add	r3, r5
 8004d92:	461d      	mov	r5, r3
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	0c22      	lsrs	r2, r4, #16
 8004d9e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8004da2:	142b      	asrs	r3, r5, #16
 8004da4:	4997      	ldr	r1, [pc, #604]	; (8005004 <Update_Temp+0x2d0>)
 8004da6:	fb01 f003 	mul.w	r0, r1, r3
 8004daa:	2100      	movs	r1, #0
 8004dac:	fb02 f101 	mul.w	r1, r2, r1
 8004db0:	4408      	add	r0, r1
 8004db2:	4994      	ldr	r1, [pc, #592]	; (8005004 <Update_Temp+0x2d0>)
 8004db4:	fba2 8901 	umull	r8, r9, r2, r1
 8004db8:	eb00 0309 	add.w	r3, r0, r9
 8004dbc:	4699      	mov	r9, r3
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8004dca:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8004dce:	ea4f 4329 	mov.w	r3, r9, asr #16
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd6:	17da      	asrs	r2, r3, #31
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	4b8a      	ldr	r3, [pc, #552]	; (8005008 <Update_Temp+0x2d4>)
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	fb03 f202 	mul.w	r2, r3, r2
 8004de4:	f04f 33ff 	mov.w	r3, #4294967295
 8004de8:	6838      	ldr	r0, [r7, #0]
 8004dea:	fb00 f303 	mul.w	r3, r0, r3
 8004dee:	441a      	add	r2, r3
 8004df0:	4b85      	ldr	r3, [pc, #532]	; (8005008 <Update_Temp+0x2d4>)
 8004df2:	6838      	ldr	r0, [r7, #0]
 8004df4:	fba0 ab03 	umull	sl, fp, r0, r3
 8004df8:	eb02 030b 	add.w	r3, r2, fp
 8004dfc:	469b      	mov	fp, r3
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	ea4f 421a 	mov.w	r2, sl, lsr #16
 8004e0a:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8004e0e:	ea4f 432b 	mov.w	r3, fp, asr #16
 8004e12:	4613      	mov	r3, r2
 8004e14:	4419      	add	r1, r3
 8004e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e18:	4b7c      	ldr	r3, [pc, #496]	; (800500c <Update_Temp+0x2d8>)
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	18ca      	adds	r2, r1, r3
 8004e20:	4b7b      	ldr	r3, [pc, #492]	; (8005010 <Update_Temp+0x2dc>)
 8004e22:	4413      	add	r3, r2
 8004e24:	141a      	asrs	r2, r3, #16
 8004e26:	497b      	ldr	r1, [pc, #492]	; (8005014 <Update_Temp+0x2e0>)
 8004e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < adc1_count; i++){
 8004e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e30:	3301      	adds	r3, #1
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e34:	2204      	movs	r2, #4
 8004e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	db86      	blt.n	8004d4a <Update_Temp+0x16>
			//t=c3*adc^3+c2*adc^2+c1*adc+b  c3 = 2.72257E-07 c2 = -0.001046284 c1 = 3.185654692 b = -1931.423651
		}
		adc1_convert = 0;
 8004e3c:	4b6f      	ldr	r3, [pc, #444]	; (8004ffc <Update_Temp+0x2c8>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	e00c      	b.n	8004e5e <Update_Temp+0x12a>
	}else if(adc1_convert == 0){
 8004e44:	4b6d      	ldr	r3, [pc, #436]	; (8004ffc <Update_Temp+0x2c8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d108      	bne.n	8004e5e <Update_Temp+0x12a>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_result_dma,adc1_count); //starts adc conversion sets convert to 2, indicates running prevents restarting while running.
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	461a      	mov	r2, r3
 8004e50:	496b      	ldr	r1, [pc, #428]	; (8005000 <Update_Temp+0x2cc>)
 8004e52:	4871      	ldr	r0, [pc, #452]	; (8005018 <Update_Temp+0x2e4>)
 8004e54:	f000 fd9e 	bl	8005994 <HAL_ADC_Start_DMA>
		adc1_convert = 2;
 8004e58:	4b68      	ldr	r3, [pc, #416]	; (8004ffc <Update_Temp+0x2c8>)
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	601a      	str	r2, [r3, #0]
	}
	status = mcp9600_read(&MCP_0,(int16_t *)&hot_raw, (float *)&hot_s, (int16_t *)&delta_raw, (float *)&delta_s, (int16_t *)&cold_raw, (float *)&cold_s);
 8004e5e:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 8004e62:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004e66:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004e6a:	f107 031c 	add.w	r3, r7, #28
 8004e6e:	9302      	str	r3, [sp, #8]
 8004e70:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	4867      	ldr	r0, [pc, #412]	; (800501c <Update_Temp+0x2e8>)
 8004e80:	f7ff fed2 	bl	8004c28 <mcp9600_read>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	temps[4] = (int32_t)roundf(hot_s*10.0f);
 8004e8a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004e8e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e96:	eeb0 0a67 	vmov.f32	s0, s15
 8004e9a:	f008 fcff 	bl	800d89c <roundf>
 8004e9e:	eef0 7a40 	vmov.f32	s15, s0
 8004ea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ea6:	ee17 2a90 	vmov	r2, s15
 8004eaa:	4b5a      	ldr	r3, [pc, #360]	; (8005014 <Update_Temp+0x2e0>)
 8004eac:	611a      	str	r2, [r3, #16]
	if(status !=0){
 8004eae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <Update_Temp+0x186>
		return 1; //read fail
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e09a      	b.n	8004ff0 <Update_Temp+0x2bc>
	}

	status = mcp9600_read(&MCP_1,(int16_t *)&hot_raw, (float *)&hot_s, (int16_t *)&delta_raw, (float *)&delta_s, (int16_t *)&cold_raw, (float *)&cold_s);
 8004eba:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 8004ebe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004ec2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004ec6:	f107 031c 	add.w	r3, r7, #28
 8004eca:	9302      	str	r3, [sp, #8]
 8004ecc:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4851      	ldr	r0, [pc, #324]	; (8005020 <Update_Temp+0x2ec>)
 8004edc:	f7ff fea4 	bl	8004c28 <mcp9600_read>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	temps[5] = (int32_t)roundf(hot_s*10.0f);
 8004ee6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004eea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ef6:	f008 fcd1 	bl	800d89c <roundf>
 8004efa:	eef0 7a40 	vmov.f32	s15, s0
 8004efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f02:	ee17 2a90 	vmov	r2, s15
 8004f06:	4b43      	ldr	r3, [pc, #268]	; (8005014 <Update_Temp+0x2e0>)
 8004f08:	615a      	str	r2, [r3, #20]
	if(status !=0){
 8004f0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <Update_Temp+0x1e2>
		return 1; //read fail
 8004f12:	2301      	movs	r3, #1
 8004f14:	e06c      	b.n	8004ff0 <Update_Temp+0x2bc>
	}

	if(temps[0] > ADC1_1_MAX_TEMP || temps[0] < ADC1_1_MIN_TEMP ){
 8004f16:	4b3f      	ldr	r3, [pc, #252]	; (8005014 <Update_Temp+0x2e0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2bfa      	cmp	r3, #250	; 0xfa
 8004f1c:	dc03      	bgt.n	8004f26 <Update_Temp+0x1f2>
 8004f1e:	4b3d      	ldr	r3, [pc, #244]	; (8005014 <Update_Temp+0x2e0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	da01      	bge.n	8004f2a <Update_Temp+0x1f6>
		return 1; //temp fault
 8004f26:	2301      	movs	r3, #1
 8004f28:	e062      	b.n	8004ff0 <Update_Temp+0x2bc>
	}
	if(temps[1] > ADC1_2_MAX_TEMP || temps[1] < ADC1_2_MIN_TEMP ){
 8004f2a:	4b3a      	ldr	r3, [pc, #232]	; (8005014 <Update_Temp+0x2e0>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2bfa      	cmp	r3, #250	; 0xfa
 8004f30:	dc03      	bgt.n	8004f3a <Update_Temp+0x206>
 8004f32:	4b38      	ldr	r3, [pc, #224]	; (8005014 <Update_Temp+0x2e0>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	da01      	bge.n	8004f3e <Update_Temp+0x20a>
		return 1; //temp fault
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e058      	b.n	8004ff0 <Update_Temp+0x2bc>
	}
	if(temps[2] > ADC1_3_MAX_TEMP || temps[2] < ADC1_3_MIN_TEMP ){
 8004f3e:	4b35      	ldr	r3, [pc, #212]	; (8005014 <Update_Temp+0x2e0>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2bfa      	cmp	r3, #250	; 0xfa
 8004f44:	dc03      	bgt.n	8004f4e <Update_Temp+0x21a>
 8004f46:	4b33      	ldr	r3, [pc, #204]	; (8005014 <Update_Temp+0x2e0>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	da01      	bge.n	8004f52 <Update_Temp+0x21e>
		return 1; //temp fault
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e04e      	b.n	8004ff0 <Update_Temp+0x2bc>
	}
	if(temps[3] > ADC1_4_MAX_TEMP || temps[3] < ADC1_4_MIN_TEMP ){
 8004f52:	4b30      	ldr	r3, [pc, #192]	; (8005014 <Update_Temp+0x2e0>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2bfa      	cmp	r3, #250	; 0xfa
 8004f58:	dc03      	bgt.n	8004f62 <Update_Temp+0x22e>
 8004f5a:	4b2e      	ldr	r3, [pc, #184]	; (8005014 <Update_Temp+0x2e0>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	da01      	bge.n	8004f66 <Update_Temp+0x232>
		return 1; //temp fault
 8004f62:	2301      	movs	r3, #1
 8004f64:	e044      	b.n	8004ff0 <Update_Temp+0x2bc>
	}
	if((float)(temps[4]/16.0f) > MCP_0_MAX_TEMP || (float)(temps[4]/16.0f) < MCP_0_MIN_TEMP ){
 8004f66:	4b2b      	ldr	r3, [pc, #172]	; (8005014 <Update_Temp+0x2e0>)
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f72:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8004f76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f7a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005024 <Update_Temp+0x2f0>
 8004f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f86:	dc0e      	bgt.n	8004fa6 <Update_Temp+0x272>
 8004f88:	4b22      	ldr	r3, [pc, #136]	; (8005014 <Update_Temp+0x2e0>)
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	ee07 3a90 	vmov	s15, r3
 8004f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f94:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8004f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa4:	d501      	bpl.n	8004faa <Update_Temp+0x276>
		return 1; //temp fault
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e022      	b.n	8004ff0 <Update_Temp+0x2bc>
	}
	if((float)(temps[5]/16.0f) > MCP_1_MAX_TEMP || (float)(temps[5]/16.0f) < MCP_1_MIN_TEMP ){
 8004faa:	4b1a      	ldr	r3, [pc, #104]	; (8005014 <Update_Temp+0x2e0>)
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fb6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8004fba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fbe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005024 <Update_Temp+0x2f0>
 8004fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fca:	dc0e      	bgt.n	8004fea <Update_Temp+0x2b6>
 8004fcc:	4b11      	ldr	r3, [pc, #68]	; (8005014 <Update_Temp+0x2e0>)
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	ee07 3a90 	vmov	s15, r3
 8004fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fd8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8004fdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fe0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe8:	d501      	bpl.n	8004fee <Update_Temp+0x2ba>
		return 1; //temp fault
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <Update_Temp+0x2bc>
	}
	return 0;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3740      	adds	r7, #64	; 0x40
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000cb8 	.word	0x20000cb8
 8005000:	20000cac 	.word	0x20000cac
 8005004:	049155bb 	.word	0x049155bb
 8005008:	ffbb6e43 	.word	0xffbb6e43
 800500c:	00032f87 	.word	0x00032f87
 8005010:	f874938b 	.word	0xf874938b
 8005014:	20000cc0 	.word	0x20000cc0
 8005018:	200002a4 	.word	0x200002a4
 800501c:	20000c74 	.word	0x20000c74
 8005020:	20000c90 	.word	0x20000c90
 8005024:	437a0000 	.word	0x437a0000

08005028 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){ // inidcates which adc is done running conversion and raises flag
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005038:	d102      	bne.n	8005040 <HAL_ADC_ConvCpltCallback+0x18>
		adc1_convert = 1;
 800503a:	4b08      	ldr	r3, [pc, #32]	; (800505c <HAL_ADC_ConvCpltCallback+0x34>)
 800503c:	2201      	movs	r2, #1
 800503e:	601a      	str	r2, [r3, #0]
	}
	if(hadc->Instance == ADC5){
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a06      	ldr	r2, [pc, #24]	; (8005060 <HAL_ADC_ConvCpltCallback+0x38>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d102      	bne.n	8005050 <HAL_ADC_ConvCpltCallback+0x28>
		adc5_convert = 1;
 800504a:	4b06      	ldr	r3, [pc, #24]	; (8005064 <HAL_ADC_ConvCpltCallback+0x3c>)
 800504c:	2201      	movs	r2, #1
 800504e:	601a      	str	r2, [r3, #0]
	}

}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	20000cb8 	.word	0x20000cb8
 8005060:	50000600 	.word	0x50000600
 8005064:	20000cbc 	.word	0x20000cbc

08005068 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005068:	480d      	ldr	r0, [pc, #52]	; (80050a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800506a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800506c:	f7ff fd2e 	bl	8004acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005070:	480c      	ldr	r0, [pc, #48]	; (80050a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005072:	490d      	ldr	r1, [pc, #52]	; (80050a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005074:	4a0d      	ldr	r2, [pc, #52]	; (80050ac <LoopForever+0xe>)
  movs r3, #0
 8005076:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005078:	e002      	b.n	8005080 <LoopCopyDataInit>

0800507a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800507a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800507c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800507e:	3304      	adds	r3, #4

08005080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005084:	d3f9      	bcc.n	800507a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005086:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005088:	4c0a      	ldr	r4, [pc, #40]	; (80050b4 <LoopForever+0x16>)
  movs r3, #0
 800508a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800508c:	e001      	b.n	8005092 <LoopFillZerobss>

0800508e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800508e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005090:	3204      	adds	r2, #4

08005092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005094:	d3fb      	bcc.n	800508e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005096:	f008 feff 	bl	800de98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800509a:	f7fd fe99 	bl	8002dd0 <main>

0800509e <LoopForever>:

LoopForever:
    b LoopForever
 800509e:	e7fe      	b.n	800509e <LoopForever>
  ldr   r0, =_estack
 80050a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80050a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050a8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80050ac:	0800e9dc 	.word	0x0800e9dc
  ldr r2, =_sbss
 80050b0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80050b4:	20000e30 	.word	0x20000e30

080050b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80050b8:	e7fe      	b.n	80050b8 <ADC1_2_IRQHandler>

080050ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050c0:	2300      	movs	r3, #0
 80050c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050c4:	2003      	movs	r0, #3
 80050c6:	f001 fcb5 	bl	8006a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050ca:	200f      	movs	r0, #15
 80050cc:	f000 f80e 	bl	80050ec <HAL_InitTick>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	71fb      	strb	r3, [r7, #7]
 80050da:	e001      	b.n	80050e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80050dc:	f7fe fe6e 	bl	8003dbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80050e0:	79fb      	ldrb	r3, [r7, #7]

}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80050f8:	4b16      	ldr	r3, [pc, #88]	; (8005154 <HAL_InitTick+0x68>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d022      	beq.n	8005146 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005100:	4b15      	ldr	r3, [pc, #84]	; (8005158 <HAL_InitTick+0x6c>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4b13      	ldr	r3, [pc, #76]	; (8005154 <HAL_InitTick+0x68>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800510c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	4618      	mov	r0, r3
 8005116:	f001 fcc0 	bl	8006a9a <HAL_SYSTICK_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10f      	bne.n	8005140 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b0f      	cmp	r3, #15
 8005124:	d809      	bhi.n	800513a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005126:	2200      	movs	r2, #0
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	f04f 30ff 	mov.w	r0, #4294967295
 800512e:	f001 fc8c 	bl	8006a4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005132:	4a0a      	ldr	r2, [pc, #40]	; (800515c <HAL_InitTick+0x70>)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	e007      	b.n	800514a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	e004      	b.n	800514a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
 8005144:	e001      	b.n	800514a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20000008 	.word	0x20000008
 8005158:	20000000 	.word	0x20000000
 800515c:	20000004 	.word	0x20000004

08005160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005164:	4b05      	ldr	r3, [pc, #20]	; (800517c <HAL_IncTick+0x1c>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_IncTick+0x20>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4413      	add	r3, r2
 800516e:	4a03      	ldr	r2, [pc, #12]	; (800517c <HAL_IncTick+0x1c>)
 8005170:	6013      	str	r3, [r2, #0]
}
 8005172:	bf00      	nop
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	20000ce0 	.word	0x20000ce0
 8005180:	20000008 	.word	0x20000008

08005184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return uwTick;
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <HAL_GetTick+0x14>)
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000ce0 	.word	0x20000ce0

0800519c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051a4:	f7ff ffee 	bl	8005184 <HAL_GetTick>
 80051a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b4:	d004      	beq.n	80051c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80051b6:	4b09      	ldr	r3, [pc, #36]	; (80051dc <HAL_Delay+0x40>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4413      	add	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80051c0:	bf00      	nop
 80051c2:	f7ff ffdf 	bl	8005184 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d8f7      	bhi.n	80051c2 <HAL_Delay+0x26>
  {
  }
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20000008 	.word	0x20000008

080051e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	609a      	str	r2, [r3, #8]
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	609a      	str	r2, [r3, #8]
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800523c:	4618      	mov	r0, r3
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3360      	adds	r3, #96	; 0x60
 800525a:	461a      	mov	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	4b08      	ldr	r3, [pc, #32]	; (800528c <LL_ADC_SetOffset+0x44>)
 800526a:	4013      	ands	r3, r2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	4313      	orrs	r3, r2
 8005278:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	03fff000 	.word	0x03fff000

08005290 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3360      	adds	r3, #96	; 0x60
 800529e:	461a      	mov	r2, r3
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3360      	adds	r3, #96	; 0x60
 80052cc:	461a      	mov	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	431a      	orrs	r2, r3
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b087      	sub	sp, #28
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3360      	adds	r3, #96	; 0x60
 8005302:	461a      	mov	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	431a      	orrs	r2, r3
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800531c:	bf00      	nop
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3360      	adds	r3, #96	; 0x60
 8005338:	461a      	mov	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	431a      	orrs	r2, r3
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005352:	bf00      	nop
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	615a      	str	r2, [r3, #20]
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005398:	2301      	movs	r3, #1
 800539a:	e000      	b.n	800539e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b087      	sub	sp, #28
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3330      	adds	r3, #48	; 0x30
 80053ba:	461a      	mov	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	0a1b      	lsrs	r3, r3, #8
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	f003 030c 	and.w	r3, r3, #12
 80053c6:	4413      	add	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	211f      	movs	r1, #31
 80053d6:	fa01 f303 	lsl.w	r3, r1, r3
 80053da:	43db      	mvns	r3, r3
 80053dc:	401a      	ands	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	0e9b      	lsrs	r3, r3, #26
 80053e2:	f003 011f 	and.w	r1, r3, #31
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	fa01 f303 	lsl.w	r3, r1, r3
 80053f0:	431a      	orrs	r2, r3
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005402:	b480      	push	{r7}
 8005404:	b087      	sub	sp, #28
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3314      	adds	r3, #20
 8005412:	461a      	mov	r2, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	0e5b      	lsrs	r3, r3, #25
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	4413      	add	r3, r2
 8005420:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	0d1b      	lsrs	r3, r3, #20
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	2107      	movs	r1, #7
 8005430:	fa01 f303 	lsl.w	r3, r1, r3
 8005434:	43db      	mvns	r3, r3
 8005436:	401a      	ands	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	0d1b      	lsrs	r3, r3, #20
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	fa01 f303 	lsl.w	r3, r1, r3
 8005446:	431a      	orrs	r2, r3
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005470:	43db      	mvns	r3, r3
 8005472:	401a      	ands	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f003 0318 	and.w	r3, r3, #24
 800547a:	4908      	ldr	r1, [pc, #32]	; (800549c <LL_ADC_SetChannelSingleDiff+0x44>)
 800547c:	40d9      	lsrs	r1, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	400b      	ands	r3, r1
 8005482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005486:	431a      	orrs	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	0007ffff 	.word	0x0007ffff

080054a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 031f 	and.w	r3, r3, #31
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80054cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6093      	str	r3, [r2, #8]
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f4:	d101      	bne.n	80054fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005518:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800551c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005544:	d101      	bne.n	800554a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005568:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800556c:	f043 0201 	orr.w	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <LL_ADC_IsEnabled+0x18>
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <LL_ADC_IsEnabled+0x1a>
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055ba:	f043 0204 	orr.w	r2, r3, #4
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d101      	bne.n	80055e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 0308 	and.w	r3, r3, #8
 8005604:	2b08      	cmp	r3, #8
 8005606:	d101      	bne.n	800560c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800561c:	b590      	push	{r4, r7, lr}
 800561e:	b089      	sub	sp, #36	; 0x24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e1a9      	b.n	800598a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005640:	2b00      	cmp	r3, #0
 8005642:	d109      	bne.n	8005658 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7fe fbdd 	bl	8003e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff ff3f 	bl	80054e0 <LL_ADC_IsDeepPowerDownEnabled>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d004      	beq.n	8005672 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff ff25 	bl	80054bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f7ff ff5a 	bl	8005530 <LL_ADC_IsInternalRegulatorEnabled>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d115      	bne.n	80056ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff ff3e 	bl	8005508 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800568c:	4b9c      	ldr	r3, [pc, #624]	; (8005900 <HAL_ADC_Init+0x2e4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	099b      	lsrs	r3, r3, #6
 8005692:	4a9c      	ldr	r2, [pc, #624]	; (8005904 <HAL_ADC_Init+0x2e8>)
 8005694:	fba2 2303 	umull	r2, r3, r2, r3
 8005698:	099b      	lsrs	r3, r3, #6
 800569a:	3301      	adds	r3, #1
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80056a0:	e002      	b.n	80056a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f9      	bne.n	80056a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff ff3c 	bl	8005530 <LL_ADC_IsInternalRegulatorEnabled>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10d      	bne.n	80056da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c2:	f043 0210 	orr.w	r2, r3, #16
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ce:	f043 0201 	orr.w	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff ff75 	bl	80055ce <LL_ADC_REG_IsConversionOngoing>
 80056e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 8142 	bne.w	8005978 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f040 813e 	bne.w	8005978 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005700:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005704:	f043 0202 	orr.w	r2, r3, #2
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff ff35 	bl	8005580 <LL_ADC_IsEnabled>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d141      	bne.n	80057a0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005724:	d004      	beq.n	8005730 <HAL_ADC_Init+0x114>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a77      	ldr	r2, [pc, #476]	; (8005908 <HAL_ADC_Init+0x2ec>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d10f      	bne.n	8005750 <HAL_ADC_Init+0x134>
 8005730:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005734:	f7ff ff24 	bl	8005580 <LL_ADC_IsEnabled>
 8005738:	4604      	mov	r4, r0
 800573a:	4873      	ldr	r0, [pc, #460]	; (8005908 <HAL_ADC_Init+0x2ec>)
 800573c:	f7ff ff20 	bl	8005580 <LL_ADC_IsEnabled>
 8005740:	4603      	mov	r3, r0
 8005742:	4323      	orrs	r3, r4
 8005744:	2b00      	cmp	r3, #0
 8005746:	bf0c      	ite	eq
 8005748:	2301      	moveq	r3, #1
 800574a:	2300      	movne	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e012      	b.n	8005776 <HAL_ADC_Init+0x15a>
 8005750:	486e      	ldr	r0, [pc, #440]	; (800590c <HAL_ADC_Init+0x2f0>)
 8005752:	f7ff ff15 	bl	8005580 <LL_ADC_IsEnabled>
 8005756:	4604      	mov	r4, r0
 8005758:	486d      	ldr	r0, [pc, #436]	; (8005910 <HAL_ADC_Init+0x2f4>)
 800575a:	f7ff ff11 	bl	8005580 <LL_ADC_IsEnabled>
 800575e:	4603      	mov	r3, r0
 8005760:	431c      	orrs	r4, r3
 8005762:	486c      	ldr	r0, [pc, #432]	; (8005914 <HAL_ADC_Init+0x2f8>)
 8005764:	f7ff ff0c 	bl	8005580 <LL_ADC_IsEnabled>
 8005768:	4603      	mov	r3, r0
 800576a:	4323      	orrs	r3, r4
 800576c:	2b00      	cmp	r3, #0
 800576e:	bf0c      	ite	eq
 8005770:	2301      	moveq	r3, #1
 8005772:	2300      	movne	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d012      	beq.n	80057a0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005782:	d004      	beq.n	800578e <HAL_ADC_Init+0x172>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a5f      	ldr	r2, [pc, #380]	; (8005908 <HAL_ADC_Init+0x2ec>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d101      	bne.n	8005792 <HAL_ADC_Init+0x176>
 800578e:	4a62      	ldr	r2, [pc, #392]	; (8005918 <HAL_ADC_Init+0x2fc>)
 8005790:	e000      	b.n	8005794 <HAL_ADC_Init+0x178>
 8005792:	4a62      	ldr	r2, [pc, #392]	; (800591c <HAL_ADC_Init+0x300>)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f7ff fd20 	bl	80051e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	7f5b      	ldrb	r3, [r3, #29]
 80057a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80057b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80057b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057c0:	4313      	orrs	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d106      	bne.n	80057dc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	3b01      	subs	r3, #1
 80057d4:	045b      	lsls	r3, r3, #17
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	4313      	orrs	r3, r2
 80057da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d009      	beq.n	80057f8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	4b48      	ldr	r3, [pc, #288]	; (8005920 <HAL_ADC_Init+0x304>)
 8005800:	4013      	ands	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	69b9      	ldr	r1, [r7, #24]
 8005808:	430b      	orrs	r3, r1
 800580a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff fee4 	bl	80055f4 <LL_ADC_INJ_IsConversionOngoing>
 800582c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d17f      	bne.n	8005934 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d17c      	bne.n	8005934 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800583e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005846:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005848:	4313      	orrs	r3, r2
 800584a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005856:	f023 0302 	bic.w	r3, r3, #2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	69b9      	ldr	r1, [r7, #24]
 8005860:	430b      	orrs	r3, r1
 8005862:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d017      	beq.n	800589c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800587a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005884:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6911      	ldr	r1, [r2, #16]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	430b      	orrs	r3, r1
 8005896:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800589a:	e013      	b.n	80058c4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80058aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6812      	ldr	r2, [r2, #0]
 80058b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80058bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058c0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d12a      	bne.n	8005924 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058d8:	f023 0304 	bic.w	r3, r3, #4
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058e4:	4311      	orrs	r1, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80058ea:	4311      	orrs	r1, r2
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80058f0:	430a      	orrs	r2, r1
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0201 	orr.w	r2, r2, #1
 80058fc:	611a      	str	r2, [r3, #16]
 80058fe:	e019      	b.n	8005934 <HAL_ADC_Init+0x318>
 8005900:	20000000 	.word	0x20000000
 8005904:	053e2d63 	.word	0x053e2d63
 8005908:	50000100 	.word	0x50000100
 800590c:	50000400 	.word	0x50000400
 8005910:	50000500 	.word	0x50000500
 8005914:	50000600 	.word	0x50000600
 8005918:	50000300 	.word	0x50000300
 800591c:	50000700 	.word	0x50000700
 8005920:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691a      	ldr	r2, [r3, #16]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0201 	bic.w	r2, r2, #1
 8005932:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d10c      	bne.n	8005956 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	f023 010f 	bic.w	r1, r3, #15
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	1e5a      	subs	r2, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	631a      	str	r2, [r3, #48]	; 0x30
 8005954:	e007      	b.n	8005966 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 020f 	bic.w	r2, r2, #15
 8005964:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596a:	f023 0303 	bic.w	r3, r3, #3
 800596e:	f043 0201 	orr.w	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	65da      	str	r2, [r3, #92]	; 0x5c
 8005976:	e007      	b.n	8005988 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800597c:	f043 0210 	orr.w	r2, r3, #16
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005988:	7ffb      	ldrb	r3, [r7, #31]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3724      	adds	r7, #36	; 0x24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd90      	pop	{r4, r7, pc}
 8005992:	bf00      	nop

08005994 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059a8:	d004      	beq.n	80059b4 <HAL_ADC_Start_DMA+0x20>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a5a      	ldr	r2, [pc, #360]	; (8005b18 <HAL_ADC_Start_DMA+0x184>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d101      	bne.n	80059b8 <HAL_ADC_Start_DMA+0x24>
 80059b4:	4b59      	ldr	r3, [pc, #356]	; (8005b1c <HAL_ADC_Start_DMA+0x188>)
 80059b6:	e000      	b.n	80059ba <HAL_ADC_Start_DMA+0x26>
 80059b8:	4b59      	ldr	r3, [pc, #356]	; (8005b20 <HAL_ADC_Start_DMA+0x18c>)
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff fd70 	bl	80054a0 <LL_ADC_GetMultimode>
 80059c0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff fe01 	bl	80055ce <LL_ADC_REG_IsConversionOngoing>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 809b 	bne.w	8005b0a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_ADC_Start_DMA+0x4e>
 80059de:	2302      	movs	r3, #2
 80059e0:	e096      	b.n	8005b10 <HAL_ADC_Start_DMA+0x17c>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a4d      	ldr	r2, [pc, #308]	; (8005b24 <HAL_ADC_Start_DMA+0x190>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d008      	beq.n	8005a06 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d005      	beq.n	8005a06 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b05      	cmp	r3, #5
 80059fe:	d002      	beq.n	8005a06 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b09      	cmp	r3, #9
 8005a04:	d17a      	bne.n	8005afc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 fcec 	bl	80063e4 <ADC_Enable>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d16d      	bne.n	8005af2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a1e:	f023 0301 	bic.w	r3, r3, #1
 8005a22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a3a      	ldr	r2, [pc, #232]	; (8005b18 <HAL_ADC_Start_DMA+0x184>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d009      	beq.n	8005a48 <HAL_ADC_Start_DMA+0xb4>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a3b      	ldr	r2, [pc, #236]	; (8005b28 <HAL_ADC_Start_DMA+0x194>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d002      	beq.n	8005a44 <HAL_ADC_Start_DMA+0xb0>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	e003      	b.n	8005a4c <HAL_ADC_Start_DMA+0xb8>
 8005a44:	4b39      	ldr	r3, [pc, #228]	; (8005b2c <HAL_ADC_Start_DMA+0x198>)
 8005a46:	e001      	b.n	8005a4c <HAL_ADC_Start_DMA+0xb8>
 8005a48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d002      	beq.n	8005a5a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d006      	beq.n	8005a80 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a76:	f023 0206 	bic.w	r2, r3, #6
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	661a      	str	r2, [r3, #96]	; 0x60
 8005a7e:	e002      	b.n	8005a86 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	4a29      	ldr	r2, [pc, #164]	; (8005b30 <HAL_ADC_Start_DMA+0x19c>)
 8005a8c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a92:	4a28      	ldr	r2, [pc, #160]	; (8005b34 <HAL_ADC_Start_DMA+0x1a0>)
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	4a27      	ldr	r2, [pc, #156]	; (8005b38 <HAL_ADC_Start_DMA+0x1a4>)
 8005a9c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	221c      	movs	r2, #28
 8005aa4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f042 0210 	orr.w	r2, r2, #16
 8005abc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0201 	orr.w	r2, r2, #1
 8005acc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3340      	adds	r3, #64	; 0x40
 8005ad8:	4619      	mov	r1, r3
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f001 f891 	bl	8006c04 <HAL_DMA_Start_IT>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fd5b 	bl	80055a6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005af0:	e00d      	b.n	8005b0e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005afa:	e008      	b.n	8005b0e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005b08:	e001      	b.n	8005b0e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	50000100 	.word	0x50000100
 8005b1c:	50000300 	.word	0x50000300
 8005b20:	50000700 	.word	0x50000700
 8005b24:	50000600 	.word	0x50000600
 8005b28:	50000500 	.word	0x50000500
 8005b2c:	50000400 	.word	0x50000400
 8005b30:	08006511 	.word	0x08006511
 8005b34:	080065e9 	.word	0x080065e9
 8005b38:	08006605 	.word	0x08006605

08005b3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b0b6      	sub	sp, #216	; 0xd8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d102      	bne.n	8005b88 <HAL_ADC_ConfigChannel+0x24>
 8005b82:	2302      	movs	r3, #2
 8005b84:	f000 bc13 	b.w	80063ae <HAL_ADC_ConfigChannel+0x84a>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff fd1a 	bl	80055ce <LL_ADC_REG_IsConversionOngoing>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f040 83f3 	bne.w	8006388 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	6859      	ldr	r1, [r3, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f7ff fbfb 	bl	80053aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff fd08 	bl	80055ce <LL_ADC_REG_IsConversionOngoing>
 8005bbe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff fd14 	bl	80055f4 <LL_ADC_INJ_IsConversionOngoing>
 8005bcc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005bd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f040 81d9 	bne.w	8005f8c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005bda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f040 81d4 	bne.w	8005f8c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bec:	d10f      	bne.n	8005c0e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	f7ff fc02 	bl	8005402 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff fba9 	bl	800535e <LL_ADC_SetSamplingTimeCommonConfig>
 8005c0c:	e00e      	b.n	8005c2c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	6819      	ldr	r1, [r3, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f7ff fbf1 	bl	8005402 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2100      	movs	r1, #0
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff fb99 	bl	800535e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	695a      	ldr	r2, [r3, #20]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	08db      	lsrs	r3, r3, #3
 8005c38:	f003 0303 	and.w	r3, r3, #3
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d022      	beq.n	8005c94 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6919      	ldr	r1, [r3, #16]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c5e:	f7ff faf3 	bl	8005248 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	6919      	ldr	r1, [r3, #16]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f7ff fb3f 	bl	80052f2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d102      	bne.n	8005c8a <HAL_ADC_ConfigChannel+0x126>
 8005c84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c88:	e000      	b.n	8005c8c <HAL_ADC_ConfigChannel+0x128>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f7ff fb4b 	bl	8005328 <LL_ADC_SetOffsetSaturation>
 8005c92:	e17b      	b.n	8005f8c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2100      	movs	r1, #0
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff faf8 	bl	8005290 <LL_ADC_GetOffsetChannel>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10a      	bne.n	8005cc0 <HAL_ADC_ConfigChannel+0x15c>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff faed 	bl	8005290 <LL_ADC_GetOffsetChannel>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	0e9b      	lsrs	r3, r3, #26
 8005cba:	f003 021f 	and.w	r2, r3, #31
 8005cbe:	e01e      	b.n	8005cfe <HAL_ADC_ConfigChannel+0x19a>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff fae2 	bl	8005290 <LL_ADC_GetOffsetChannel>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cd6:	fa93 f3a3 	rbit	r3, r3
 8005cda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ce2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005ce6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005cee:	2320      	movs	r3, #32
 8005cf0:	e004      	b.n	8005cfc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cf6:	fab3 f383 	clz	r3, r3
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d105      	bne.n	8005d16 <HAL_ADC_ConfigChannel+0x1b2>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	0e9b      	lsrs	r3, r3, #26
 8005d10:	f003 031f 	and.w	r3, r3, #31
 8005d14:	e018      	b.n	8005d48 <HAL_ADC_ConfigChannel+0x1e4>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d22:	fa93 f3a3 	rbit	r3, r3
 8005d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005d32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005d3a:	2320      	movs	r3, #32
 8005d3c:	e004      	b.n	8005d48 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d42:	fab3 f383 	clz	r3, r3
 8005d46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d106      	bne.n	8005d5a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2200      	movs	r2, #0
 8005d52:	2100      	movs	r1, #0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff fab1 	bl	80052bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2101      	movs	r1, #1
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fa95 	bl	8005290 <LL_ADC_GetOffsetChannel>
 8005d66:	4603      	mov	r3, r0
 8005d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <HAL_ADC_ConfigChannel+0x222>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2101      	movs	r1, #1
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fa8a 	bl	8005290 <LL_ADC_GetOffsetChannel>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	0e9b      	lsrs	r3, r3, #26
 8005d80:	f003 021f 	and.w	r2, r3, #31
 8005d84:	e01e      	b.n	8005dc4 <HAL_ADC_ConfigChannel+0x260>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff fa7f 	bl	8005290 <LL_ADC_GetOffsetChannel>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d9c:	fa93 f3a3 	rbit	r3, r3
 8005da0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005da4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005db4:	2320      	movs	r3, #32
 8005db6:	e004      	b.n	8005dc2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005db8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005dbc:	fab3 f383 	clz	r3, r3
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d105      	bne.n	8005ddc <HAL_ADC_ConfigChannel+0x278>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	0e9b      	lsrs	r3, r3, #26
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	e018      	b.n	8005e0e <HAL_ADC_ConfigChannel+0x2aa>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005de8:	fa93 f3a3 	rbit	r3, r3
 8005dec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005e00:	2320      	movs	r3, #32
 8005e02:	e004      	b.n	8005e0e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e08:	fab3 f383 	clz	r3, r3
 8005e0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d106      	bne.n	8005e20 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2200      	movs	r2, #0
 8005e18:	2101      	movs	r1, #1
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff fa4e 	bl	80052bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2102      	movs	r1, #2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fa32 	bl	8005290 <LL_ADC_GetOffsetChannel>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <HAL_ADC_ConfigChannel+0x2e8>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2102      	movs	r1, #2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff fa27 	bl	8005290 <LL_ADC_GetOffsetChannel>
 8005e42:	4603      	mov	r3, r0
 8005e44:	0e9b      	lsrs	r3, r3, #26
 8005e46:	f003 021f 	and.w	r2, r3, #31
 8005e4a:	e01e      	b.n	8005e8a <HAL_ADC_ConfigChannel+0x326>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2102      	movs	r1, #2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff fa1c 	bl	8005290 <LL_ADC_GetOffsetChannel>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e62:	fa93 f3a3 	rbit	r3, r3
 8005e66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005e7a:	2320      	movs	r3, #32
 8005e7c:	e004      	b.n	8005e88 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e82:	fab3 f383 	clz	r3, r3
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d105      	bne.n	8005ea2 <HAL_ADC_ConfigChannel+0x33e>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	0e9b      	lsrs	r3, r3, #26
 8005e9c:	f003 031f 	and.w	r3, r3, #31
 8005ea0:	e016      	b.n	8005ed0 <HAL_ADC_ConfigChannel+0x36c>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005eae:	fa93 f3a3 	rbit	r3, r3
 8005eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005ec2:	2320      	movs	r3, #32
 8005ec4:	e004      	b.n	8005ed0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eca:	fab3 f383 	clz	r3, r3
 8005ece:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d106      	bne.n	8005ee2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2102      	movs	r1, #2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff f9ed 	bl	80052bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2103      	movs	r1, #3
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff f9d1 	bl	8005290 <LL_ADC_GetOffsetChannel>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <HAL_ADC_ConfigChannel+0x3aa>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2103      	movs	r1, #3
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff f9c6 	bl	8005290 <LL_ADC_GetOffsetChannel>
 8005f04:	4603      	mov	r3, r0
 8005f06:	0e9b      	lsrs	r3, r3, #26
 8005f08:	f003 021f 	and.w	r2, r3, #31
 8005f0c:	e017      	b.n	8005f3e <HAL_ADC_ConfigChannel+0x3da>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2103      	movs	r1, #3
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff f9bb 	bl	8005290 <LL_ADC_GetOffsetChannel>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f20:	fa93 f3a3 	rbit	r3, r3
 8005f24:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f28:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005f30:	2320      	movs	r3, #32
 8005f32:	e003      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f36:	fab3 f383 	clz	r3, r3
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d105      	bne.n	8005f56 <HAL_ADC_ConfigChannel+0x3f2>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	0e9b      	lsrs	r3, r3, #26
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	e011      	b.n	8005f7a <HAL_ADC_ConfigChannel+0x416>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f5e:	fa93 f3a3 	rbit	r3, r3
 8005f62:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f66:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005f6e:	2320      	movs	r3, #32
 8005f70:	e003      	b.n	8005f7a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f74:	fab3 f383 	clz	r3, r3
 8005f78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d106      	bne.n	8005f8c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2200      	movs	r2, #0
 8005f84:	2103      	movs	r1, #3
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff f998 	bl	80052bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff faf5 	bl	8005580 <LL_ADC_IsEnabled>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f040 813d 	bne.w	8006218 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	6819      	ldr	r1, [r3, #0]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	461a      	mov	r2, r3
 8005fac:	f7ff fa54 	bl	8005458 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	4aa2      	ldr	r2, [pc, #648]	; (8006240 <HAL_ADC_ConfigChannel+0x6dc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	f040 812e 	bne.w	8006218 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10b      	bne.n	8005fe4 <HAL_ADC_ConfigChannel+0x480>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	0e9b      	lsrs	r3, r3, #26
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	2b09      	cmp	r3, #9
 8005fda:	bf94      	ite	ls
 8005fdc:	2301      	movls	r3, #1
 8005fde:	2300      	movhi	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	e019      	b.n	8006018 <HAL_ADC_ConfigChannel+0x4b4>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fec:	fa93 f3a3 	rbit	r3, r3
 8005ff0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ff4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005ffc:	2320      	movs	r3, #32
 8005ffe:	e003      	b.n	8006008 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006002:	fab3 f383 	clz	r3, r3
 8006006:	b2db      	uxtb	r3, r3
 8006008:	3301      	adds	r3, #1
 800600a:	f003 031f 	and.w	r3, r3, #31
 800600e:	2b09      	cmp	r3, #9
 8006010:	bf94      	ite	ls
 8006012:	2301      	movls	r3, #1
 8006014:	2300      	movhi	r3, #0
 8006016:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006018:	2b00      	cmp	r3, #0
 800601a:	d079      	beq.n	8006110 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006024:	2b00      	cmp	r3, #0
 8006026:	d107      	bne.n	8006038 <HAL_ADC_ConfigChannel+0x4d4>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	0e9b      	lsrs	r3, r3, #26
 800602e:	3301      	adds	r3, #1
 8006030:	069b      	lsls	r3, r3, #26
 8006032:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006036:	e015      	b.n	8006064 <HAL_ADC_ConfigChannel+0x500>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800603e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006040:	fa93 f3a3 	rbit	r3, r3
 8006044:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006048:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800604a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006050:	2320      	movs	r3, #32
 8006052:	e003      	b.n	800605c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006056:	fab3 f383 	clz	r3, r3
 800605a:	b2db      	uxtb	r3, r3
 800605c:	3301      	adds	r3, #1
 800605e:	069b      	lsls	r3, r3, #26
 8006060:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800606c:	2b00      	cmp	r3, #0
 800606e:	d109      	bne.n	8006084 <HAL_ADC_ConfigChannel+0x520>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	0e9b      	lsrs	r3, r3, #26
 8006076:	3301      	adds	r3, #1
 8006078:	f003 031f 	and.w	r3, r3, #31
 800607c:	2101      	movs	r1, #1
 800607e:	fa01 f303 	lsl.w	r3, r1, r3
 8006082:	e017      	b.n	80060b4 <HAL_ADC_ConfigChannel+0x550>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800608c:	fa93 f3a3 	rbit	r3, r3
 8006090:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006094:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800609c:	2320      	movs	r3, #32
 800609e:	e003      	b.n	80060a8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80060a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a2:	fab3 f383 	clz	r3, r3
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	3301      	adds	r3, #1
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	2101      	movs	r1, #1
 80060b0:	fa01 f303 	lsl.w	r3, r1, r3
 80060b4:	ea42 0103 	orr.w	r1, r2, r3
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <HAL_ADC_ConfigChannel+0x576>
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	0e9b      	lsrs	r3, r3, #26
 80060ca:	3301      	adds	r3, #1
 80060cc:	f003 021f 	and.w	r2, r3, #31
 80060d0:	4613      	mov	r3, r2
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	4413      	add	r3, r2
 80060d6:	051b      	lsls	r3, r3, #20
 80060d8:	e018      	b.n	800610c <HAL_ADC_ConfigChannel+0x5a8>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e2:	fa93 f3a3 	rbit	r3, r3
 80060e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80060e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80060ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80060f2:	2320      	movs	r3, #32
 80060f4:	e003      	b.n	80060fe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80060f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f8:	fab3 f383 	clz	r3, r3
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	3301      	adds	r3, #1
 8006100:	f003 021f 	and.w	r2, r3, #31
 8006104:	4613      	mov	r3, r2
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	4413      	add	r3, r2
 800610a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800610c:	430b      	orrs	r3, r1
 800610e:	e07e      	b.n	800620e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006118:	2b00      	cmp	r3, #0
 800611a:	d107      	bne.n	800612c <HAL_ADC_ConfigChannel+0x5c8>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	0e9b      	lsrs	r3, r3, #26
 8006122:	3301      	adds	r3, #1
 8006124:	069b      	lsls	r3, r3, #26
 8006126:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800612a:	e015      	b.n	8006158 <HAL_ADC_ConfigChannel+0x5f4>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	fa93 f3a3 	rbit	r3, r3
 8006138:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006144:	2320      	movs	r3, #32
 8006146:	e003      	b.n	8006150 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	fab3 f383 	clz	r3, r3
 800614e:	b2db      	uxtb	r3, r3
 8006150:	3301      	adds	r3, #1
 8006152:	069b      	lsls	r3, r3, #26
 8006154:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006160:	2b00      	cmp	r3, #0
 8006162:	d109      	bne.n	8006178 <HAL_ADC_ConfigChannel+0x614>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	0e9b      	lsrs	r3, r3, #26
 800616a:	3301      	adds	r3, #1
 800616c:	f003 031f 	and.w	r3, r3, #31
 8006170:	2101      	movs	r1, #1
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	e017      	b.n	80061a8 <HAL_ADC_ConfigChannel+0x644>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	fa93 f3a3 	rbit	r3, r3
 8006184:	61fb      	str	r3, [r7, #28]
  return result;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006190:	2320      	movs	r3, #32
 8006192:	e003      	b.n	800619c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	fab3 f383 	clz	r3, r3
 800619a:	b2db      	uxtb	r3, r3
 800619c:	3301      	adds	r3, #1
 800619e:	f003 031f 	and.w	r3, r3, #31
 80061a2:	2101      	movs	r1, #1
 80061a4:	fa01 f303 	lsl.w	r3, r1, r3
 80061a8:	ea42 0103 	orr.w	r1, r2, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10d      	bne.n	80061d4 <HAL_ADC_ConfigChannel+0x670>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	0e9b      	lsrs	r3, r3, #26
 80061be:	3301      	adds	r3, #1
 80061c0:	f003 021f 	and.w	r2, r3, #31
 80061c4:	4613      	mov	r3, r2
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	4413      	add	r3, r2
 80061ca:	3b1e      	subs	r3, #30
 80061cc:	051b      	lsls	r3, r3, #20
 80061ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061d2:	e01b      	b.n	800620c <HAL_ADC_ConfigChannel+0x6a8>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	fa93 f3a3 	rbit	r3, r3
 80061e0:	613b      	str	r3, [r7, #16]
  return result;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80061ec:	2320      	movs	r3, #32
 80061ee:	e003      	b.n	80061f8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	fab3 f383 	clz	r3, r3
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	3301      	adds	r3, #1
 80061fa:	f003 021f 	and.w	r2, r3, #31
 80061fe:	4613      	mov	r3, r2
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	4413      	add	r3, r2
 8006204:	3b1e      	subs	r3, #30
 8006206:	051b      	lsls	r3, r3, #20
 8006208:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800620c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006212:	4619      	mov	r1, r3
 8006214:	f7ff f8f5 	bl	8005402 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	4b09      	ldr	r3, [pc, #36]	; (8006244 <HAL_ADC_ConfigChannel+0x6e0>)
 800621e:	4013      	ands	r3, r2
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 80be 	beq.w	80063a2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800622e:	d004      	beq.n	800623a <HAL_ADC_ConfigChannel+0x6d6>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a04      	ldr	r2, [pc, #16]	; (8006248 <HAL_ADC_ConfigChannel+0x6e4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d10a      	bne.n	8006250 <HAL_ADC_ConfigChannel+0x6ec>
 800623a:	4b04      	ldr	r3, [pc, #16]	; (800624c <HAL_ADC_ConfigChannel+0x6e8>)
 800623c:	e009      	b.n	8006252 <HAL_ADC_ConfigChannel+0x6ee>
 800623e:	bf00      	nop
 8006240:	407f0000 	.word	0x407f0000
 8006244:	80080000 	.word	0x80080000
 8006248:	50000100 	.word	0x50000100
 800624c:	50000300 	.word	0x50000300
 8006250:	4b59      	ldr	r3, [pc, #356]	; (80063b8 <HAL_ADC_ConfigChannel+0x854>)
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe ffea 	bl	800522c <LL_ADC_GetCommonPathInternalCh>
 8006258:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a56      	ldr	r2, [pc, #344]	; (80063bc <HAL_ADC_ConfigChannel+0x858>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d004      	beq.n	8006270 <HAL_ADC_ConfigChannel+0x70c>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a55      	ldr	r2, [pc, #340]	; (80063c0 <HAL_ADC_ConfigChannel+0x85c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d13a      	bne.n	80062e6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006270:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d134      	bne.n	80062e6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006284:	d005      	beq.n	8006292 <HAL_ADC_ConfigChannel+0x72e>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a4e      	ldr	r2, [pc, #312]	; (80063c4 <HAL_ADC_ConfigChannel+0x860>)
 800628c:	4293      	cmp	r3, r2
 800628e:	f040 8085 	bne.w	800639c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800629a:	d004      	beq.n	80062a6 <HAL_ADC_ConfigChannel+0x742>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a49      	ldr	r2, [pc, #292]	; (80063c8 <HAL_ADC_ConfigChannel+0x864>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d101      	bne.n	80062aa <HAL_ADC_ConfigChannel+0x746>
 80062a6:	4a49      	ldr	r2, [pc, #292]	; (80063cc <HAL_ADC_ConfigChannel+0x868>)
 80062a8:	e000      	b.n	80062ac <HAL_ADC_ConfigChannel+0x748>
 80062aa:	4a43      	ldr	r2, [pc, #268]	; (80063b8 <HAL_ADC_ConfigChannel+0x854>)
 80062ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062b4:	4619      	mov	r1, r3
 80062b6:	4610      	mov	r0, r2
 80062b8:	f7fe ffa5 	bl	8005206 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80062bc:	4b44      	ldr	r3, [pc, #272]	; (80063d0 <HAL_ADC_ConfigChannel+0x86c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	099b      	lsrs	r3, r3, #6
 80062c2:	4a44      	ldr	r2, [pc, #272]	; (80063d4 <HAL_ADC_ConfigChannel+0x870>)
 80062c4:	fba2 2303 	umull	r2, r3, r2, r3
 80062c8:	099b      	lsrs	r3, r3, #6
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	4613      	mov	r3, r2
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80062d6:	e002      	b.n	80062de <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3b01      	subs	r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1f9      	bne.n	80062d8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80062e4:	e05a      	b.n	800639c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a3b      	ldr	r2, [pc, #236]	; (80063d8 <HAL_ADC_ConfigChannel+0x874>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d125      	bne.n	800633c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80062f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d11f      	bne.n	800633c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a31      	ldr	r2, [pc, #196]	; (80063c8 <HAL_ADC_ConfigChannel+0x864>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d104      	bne.n	8006310 <HAL_ADC_ConfigChannel+0x7ac>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a34      	ldr	r2, [pc, #208]	; (80063dc <HAL_ADC_ConfigChannel+0x878>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d047      	beq.n	80063a0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006318:	d004      	beq.n	8006324 <HAL_ADC_ConfigChannel+0x7c0>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a2a      	ldr	r2, [pc, #168]	; (80063c8 <HAL_ADC_ConfigChannel+0x864>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d101      	bne.n	8006328 <HAL_ADC_ConfigChannel+0x7c4>
 8006324:	4a29      	ldr	r2, [pc, #164]	; (80063cc <HAL_ADC_ConfigChannel+0x868>)
 8006326:	e000      	b.n	800632a <HAL_ADC_ConfigChannel+0x7c6>
 8006328:	4a23      	ldr	r2, [pc, #140]	; (80063b8 <HAL_ADC_ConfigChannel+0x854>)
 800632a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800632e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006332:	4619      	mov	r1, r3
 8006334:	4610      	mov	r0, r2
 8006336:	f7fe ff66 	bl	8005206 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800633a:	e031      	b.n	80063a0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a27      	ldr	r2, [pc, #156]	; (80063e0 <HAL_ADC_ConfigChannel+0x87c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d12d      	bne.n	80063a2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006346:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800634a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d127      	bne.n	80063a2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1c      	ldr	r2, [pc, #112]	; (80063c8 <HAL_ADC_ConfigChannel+0x864>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d022      	beq.n	80063a2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006364:	d004      	beq.n	8006370 <HAL_ADC_ConfigChannel+0x80c>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a17      	ldr	r2, [pc, #92]	; (80063c8 <HAL_ADC_ConfigChannel+0x864>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d101      	bne.n	8006374 <HAL_ADC_ConfigChannel+0x810>
 8006370:	4a16      	ldr	r2, [pc, #88]	; (80063cc <HAL_ADC_ConfigChannel+0x868>)
 8006372:	e000      	b.n	8006376 <HAL_ADC_ConfigChannel+0x812>
 8006374:	4a10      	ldr	r2, [pc, #64]	; (80063b8 <HAL_ADC_ConfigChannel+0x854>)
 8006376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800637a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800637e:	4619      	mov	r1, r3
 8006380:	4610      	mov	r0, r2
 8006382:	f7fe ff40 	bl	8005206 <LL_ADC_SetCommonPathInternalCh>
 8006386:	e00c      	b.n	80063a2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638c:	f043 0220 	orr.w	r2, r3, #32
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800639a:	e002      	b.n	80063a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800639c:	bf00      	nop
 800639e:	e000      	b.n	80063a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80063aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	37d8      	adds	r7, #216	; 0xd8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	50000700 	.word	0x50000700
 80063bc:	c3210000 	.word	0xc3210000
 80063c0:	90c00010 	.word	0x90c00010
 80063c4:	50000600 	.word	0x50000600
 80063c8:	50000100 	.word	0x50000100
 80063cc:	50000300 	.word	0x50000300
 80063d0:	20000000 	.word	0x20000000
 80063d4:	053e2d63 	.word	0x053e2d63
 80063d8:	c7520000 	.word	0xc7520000
 80063dc:	50000500 	.word	0x50000500
 80063e0:	cb840000 	.word	0xcb840000

080063e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff f8c3 	bl	8005580 <LL_ADC_IsEnabled>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d176      	bne.n	80064ee <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	4b3c      	ldr	r3, [pc, #240]	; (80064f8 <ADC_Enable+0x114>)
 8006408:	4013      	ands	r3, r2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00d      	beq.n	800642a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006412:	f043 0210 	orr.w	r2, r3, #16
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641e:	f043 0201 	orr.w	r2, r3, #1
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e062      	b.n	80064f0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff f892 	bl	8005558 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800643c:	d004      	beq.n	8006448 <ADC_Enable+0x64>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a2e      	ldr	r2, [pc, #184]	; (80064fc <ADC_Enable+0x118>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d101      	bne.n	800644c <ADC_Enable+0x68>
 8006448:	4b2d      	ldr	r3, [pc, #180]	; (8006500 <ADC_Enable+0x11c>)
 800644a:	e000      	b.n	800644e <ADC_Enable+0x6a>
 800644c:	4b2d      	ldr	r3, [pc, #180]	; (8006504 <ADC_Enable+0x120>)
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe feec 	bl	800522c <LL_ADC_GetCommonPathInternalCh>
 8006454:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006456:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800645a:	2b00      	cmp	r3, #0
 800645c:	d013      	beq.n	8006486 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800645e:	4b2a      	ldr	r3, [pc, #168]	; (8006508 <ADC_Enable+0x124>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	099b      	lsrs	r3, r3, #6
 8006464:	4a29      	ldr	r2, [pc, #164]	; (800650c <ADC_Enable+0x128>)
 8006466:	fba2 2303 	umull	r2, r3, r2, r3
 800646a:	099b      	lsrs	r3, r3, #6
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	4613      	mov	r3, r2
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006478:	e002      	b.n	8006480 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	3b01      	subs	r3, #1
 800647e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1f9      	bne.n	800647a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006486:	f7fe fe7d 	bl	8005184 <HAL_GetTick>
 800648a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800648c:	e028      	b.n	80064e0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff f874 	bl	8005580 <LL_ADC_IsEnabled>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff f858 	bl	8005558 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80064a8:	f7fe fe6c 	bl	8005184 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d914      	bls.n	80064e0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d00d      	beq.n	80064e0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c8:	f043 0210 	orr.w	r2, r3, #16
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d4:	f043 0201 	orr.w	r2, r3, #1
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e007      	b.n	80064f0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d1cf      	bne.n	800648e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	8000003f 	.word	0x8000003f
 80064fc:	50000100 	.word	0x50000100
 8006500:	50000300 	.word	0x50000300
 8006504:	50000700 	.word	0x50000700
 8006508:	20000000 	.word	0x20000000
 800650c:	053e2d63 	.word	0x053e2d63

08006510 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006522:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006526:	2b00      	cmp	r3, #0
 8006528:	d14b      	bne.n	80065c2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d021      	beq.n	8006588 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe ff1b 	bl	8005384 <LL_ADC_REG_IsTriggerSourceSWStart>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d032      	beq.n	80065ba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d12b      	bne.n	80065ba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d11f      	bne.n	80065ba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657e:	f043 0201 	orr.w	r2, r3, #1
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	65da      	str	r2, [r3, #92]	; 0x5c
 8006586:	e018      	b.n	80065ba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d111      	bne.n	80065ba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d105      	bne.n	80065ba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b2:	f043 0201 	orr.w	r2, r3, #1
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f7fe fd34 	bl	8005028 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80065c0:	e00e      	b.n	80065e0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c6:	f003 0310 	and.w	r3, r3, #16
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7ff fabe 	bl	8005b50 <HAL_ADC_ErrorCallback>
}
 80065d4:	e004      	b.n	80065e0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7ff faa0 	bl	8005b3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80065fc:	bf00      	nop
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006616:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006622:	f043 0204 	orr.w	r2, r3, #4
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f7ff fa90 	bl	8005b50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006630:	bf00      	nop
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <LL_ADC_IsEnabled>:
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b01      	cmp	r3, #1
 800664a:	d101      	bne.n	8006650 <LL_ADC_IsEnabled+0x18>
 800664c:	2301      	movs	r3, #1
 800664e:	e000      	b.n	8006652 <LL_ADC_IsEnabled+0x1a>
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <LL_ADC_REG_IsConversionOngoing>:
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b04      	cmp	r3, #4
 8006670:	d101      	bne.n	8006676 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006684:	b590      	push	{r4, r7, lr}
 8006686:	b0a1      	sub	sp, #132	; 0x84
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800669e:	2302      	movs	r3, #2
 80066a0:	e0e7      	b.n	8006872 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80066aa:	2300      	movs	r3, #0
 80066ac:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80066ae:	2300      	movs	r3, #0
 80066b0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066ba:	d102      	bne.n	80066c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80066bc:	4b6f      	ldr	r3, [pc, #444]	; (800687c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80066be:	60bb      	str	r3, [r7, #8]
 80066c0:	e009      	b.n	80066d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a6e      	ldr	r2, [pc, #440]	; (8006880 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d102      	bne.n	80066d2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80066cc:	4b6d      	ldr	r3, [pc, #436]	; (8006884 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80066ce:	60bb      	str	r3, [r7, #8]
 80066d0:	e001      	b.n	80066d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80066d2:	2300      	movs	r3, #0
 80066d4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10b      	bne.n	80066f4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e0:	f043 0220 	orr.w	r2, r3, #32
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e0be      	b.n	8006872 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff ffb1 	bl	800665e <LL_ADC_REG_IsConversionOngoing>
 80066fc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f7ff ffab 	bl	800665e <LL_ADC_REG_IsConversionOngoing>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	f040 80a0 	bne.w	8006850 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006712:	2b00      	cmp	r3, #0
 8006714:	f040 809c 	bne.w	8006850 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006720:	d004      	beq.n	800672c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a55      	ldr	r2, [pc, #340]	; (800687c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d101      	bne.n	8006730 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800672c:	4b56      	ldr	r3, [pc, #344]	; (8006888 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800672e:	e000      	b.n	8006732 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006730:	4b56      	ldr	r3, [pc, #344]	; (800688c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006732:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d04b      	beq.n	80067d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800673c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	6859      	ldr	r1, [r3, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800674e:	035b      	lsls	r3, r3, #13
 8006750:	430b      	orrs	r3, r1
 8006752:	431a      	orrs	r2, r3
 8006754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006756:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006760:	d004      	beq.n	800676c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a45      	ldr	r2, [pc, #276]	; (800687c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d10f      	bne.n	800678c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800676c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006770:	f7ff ff62 	bl	8006638 <LL_ADC_IsEnabled>
 8006774:	4604      	mov	r4, r0
 8006776:	4841      	ldr	r0, [pc, #260]	; (800687c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006778:	f7ff ff5e 	bl	8006638 <LL_ADC_IsEnabled>
 800677c:	4603      	mov	r3, r0
 800677e:	4323      	orrs	r3, r4
 8006780:	2b00      	cmp	r3, #0
 8006782:	bf0c      	ite	eq
 8006784:	2301      	moveq	r3, #1
 8006786:	2300      	movne	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	e012      	b.n	80067b2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800678c:	483c      	ldr	r0, [pc, #240]	; (8006880 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800678e:	f7ff ff53 	bl	8006638 <LL_ADC_IsEnabled>
 8006792:	4604      	mov	r4, r0
 8006794:	483b      	ldr	r0, [pc, #236]	; (8006884 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006796:	f7ff ff4f 	bl	8006638 <LL_ADC_IsEnabled>
 800679a:	4603      	mov	r3, r0
 800679c:	431c      	orrs	r4, r3
 800679e:	483c      	ldr	r0, [pc, #240]	; (8006890 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80067a0:	f7ff ff4a 	bl	8006638 <LL_ADC_IsEnabled>
 80067a4:	4603      	mov	r3, r0
 80067a6:	4323      	orrs	r3, r4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bf0c      	ite	eq
 80067ac:	2301      	moveq	r3, #1
 80067ae:	2300      	movne	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d056      	beq.n	8006864 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80067b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80067be:	f023 030f 	bic.w	r3, r3, #15
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	6811      	ldr	r1, [r2, #0]
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	6892      	ldr	r2, [r2, #8]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	431a      	orrs	r2, r3
 80067ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80067d2:	e047      	b.n	8006864 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80067d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067e8:	d004      	beq.n	80067f4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a23      	ldr	r2, [pc, #140]	; (800687c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d10f      	bne.n	8006814 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80067f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80067f8:	f7ff ff1e 	bl	8006638 <LL_ADC_IsEnabled>
 80067fc:	4604      	mov	r4, r0
 80067fe:	481f      	ldr	r0, [pc, #124]	; (800687c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006800:	f7ff ff1a 	bl	8006638 <LL_ADC_IsEnabled>
 8006804:	4603      	mov	r3, r0
 8006806:	4323      	orrs	r3, r4
 8006808:	2b00      	cmp	r3, #0
 800680a:	bf0c      	ite	eq
 800680c:	2301      	moveq	r3, #1
 800680e:	2300      	movne	r3, #0
 8006810:	b2db      	uxtb	r3, r3
 8006812:	e012      	b.n	800683a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006814:	481a      	ldr	r0, [pc, #104]	; (8006880 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006816:	f7ff ff0f 	bl	8006638 <LL_ADC_IsEnabled>
 800681a:	4604      	mov	r4, r0
 800681c:	4819      	ldr	r0, [pc, #100]	; (8006884 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800681e:	f7ff ff0b 	bl	8006638 <LL_ADC_IsEnabled>
 8006822:	4603      	mov	r3, r0
 8006824:	431c      	orrs	r4, r3
 8006826:	481a      	ldr	r0, [pc, #104]	; (8006890 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006828:	f7ff ff06 	bl	8006638 <LL_ADC_IsEnabled>
 800682c:	4603      	mov	r3, r0
 800682e:	4323      	orrs	r3, r4
 8006830:	2b00      	cmp	r3, #0
 8006832:	bf0c      	ite	eq
 8006834:	2301      	moveq	r3, #1
 8006836:	2300      	movne	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d012      	beq.n	8006864 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800683e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006846:	f023 030f 	bic.w	r3, r3, #15
 800684a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800684c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800684e:	e009      	b.n	8006864 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006854:	f043 0220 	orr.w	r2, r3, #32
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006862:	e000      	b.n	8006866 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006864:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800686e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006872:	4618      	mov	r0, r3
 8006874:	3784      	adds	r7, #132	; 0x84
 8006876:	46bd      	mov	sp, r7
 8006878:	bd90      	pop	{r4, r7, pc}
 800687a:	bf00      	nop
 800687c:	50000100 	.word	0x50000100
 8006880:	50000400 	.word	0x50000400
 8006884:	50000500 	.word	0x50000500
 8006888:	50000300 	.word	0x50000300
 800688c:	50000700 	.word	0x50000700
 8006890:	50000600 	.word	0x50000600

08006894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068a4:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <__NVIC_SetPriorityGrouping+0x44>)
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068b0:	4013      	ands	r3, r2
 80068b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80068c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068c6:	4a04      	ldr	r2, [pc, #16]	; (80068d8 <__NVIC_SetPriorityGrouping+0x44>)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	60d3      	str	r3, [r2, #12]
}
 80068cc:	bf00      	nop
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	e000ed00 	.word	0xe000ed00

080068dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068e0:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <__NVIC_GetPriorityGrouping+0x18>)
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	0a1b      	lsrs	r3, r3, #8
 80068e6:	f003 0307 	and.w	r3, r3, #7
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	e000ed00 	.word	0xe000ed00

080068f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006906:	2b00      	cmp	r3, #0
 8006908:	db0b      	blt.n	8006922 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800690a:	79fb      	ldrb	r3, [r7, #7]
 800690c:	f003 021f 	and.w	r2, r3, #31
 8006910:	4907      	ldr	r1, [pc, #28]	; (8006930 <__NVIC_EnableIRQ+0x38>)
 8006912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	2001      	movs	r0, #1
 800691a:	fa00 f202 	lsl.w	r2, r0, r2
 800691e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006922:	bf00      	nop
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	e000e100 	.word	0xe000e100

08006934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	6039      	str	r1, [r7, #0]
 800693e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006944:	2b00      	cmp	r3, #0
 8006946:	db0a      	blt.n	800695e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	b2da      	uxtb	r2, r3
 800694c:	490c      	ldr	r1, [pc, #48]	; (8006980 <__NVIC_SetPriority+0x4c>)
 800694e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006952:	0112      	lsls	r2, r2, #4
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	440b      	add	r3, r1
 8006958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800695c:	e00a      	b.n	8006974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	4908      	ldr	r1, [pc, #32]	; (8006984 <__NVIC_SetPriority+0x50>)
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	3b04      	subs	r3, #4
 800696c:	0112      	lsls	r2, r2, #4
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	440b      	add	r3, r1
 8006972:	761a      	strb	r2, [r3, #24]
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	e000e100 	.word	0xe000e100
 8006984:	e000ed00 	.word	0xe000ed00

08006988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006988:	b480      	push	{r7}
 800698a:	b089      	sub	sp, #36	; 0x24
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	f1c3 0307 	rsb	r3, r3, #7
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	bf28      	it	cs
 80069a6:	2304      	movcs	r3, #4
 80069a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	3304      	adds	r3, #4
 80069ae:	2b06      	cmp	r3, #6
 80069b0:	d902      	bls.n	80069b8 <NVIC_EncodePriority+0x30>
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	3b03      	subs	r3, #3
 80069b6:	e000      	b.n	80069ba <NVIC_EncodePriority+0x32>
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069bc:	f04f 32ff 	mov.w	r2, #4294967295
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	43da      	mvns	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	401a      	ands	r2, r3
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069d0:	f04f 31ff 	mov.w	r1, #4294967295
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	fa01 f303 	lsl.w	r3, r1, r3
 80069da:	43d9      	mvns	r1, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069e0:	4313      	orrs	r3, r2
         );
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3724      	adds	r7, #36	; 0x24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
	...

080069f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a00:	d301      	bcc.n	8006a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a02:	2301      	movs	r3, #1
 8006a04:	e00f      	b.n	8006a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a06:	4a0a      	ldr	r2, [pc, #40]	; (8006a30 <SysTick_Config+0x40>)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a0e:	210f      	movs	r1, #15
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295
 8006a14:	f7ff ff8e 	bl	8006934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a18:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <SysTick_Config+0x40>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a1e:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <SysTick_Config+0x40>)
 8006a20:	2207      	movs	r2, #7
 8006a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	e000e010 	.word	0xe000e010

08006a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff ff29 	bl	8006894 <__NVIC_SetPriorityGrouping>
}
 8006a42:	bf00      	nop
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b086      	sub	sp, #24
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	4603      	mov	r3, r0
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
 8006a56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006a58:	f7ff ff40 	bl	80068dc <__NVIC_GetPriorityGrouping>
 8006a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	6978      	ldr	r0, [r7, #20]
 8006a64:	f7ff ff90 	bl	8006988 <NVIC_EncodePriority>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a6e:	4611      	mov	r1, r2
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff ff5f 	bl	8006934 <__NVIC_SetPriority>
}
 8006a76:	bf00      	nop
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b082      	sub	sp, #8
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	4603      	mov	r3, r0
 8006a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff ff33 	bl	80068f8 <__NVIC_EnableIRQ>
}
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff ffa4 	bl	80069f0 <SysTick_Config>
 8006aa8:	4603      	mov	r3, r0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e08d      	b.n	8006be2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	4b47      	ldr	r3, [pc, #284]	; (8006bec <HAL_DMA_Init+0x138>)
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d80f      	bhi.n	8006af2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	4b45      	ldr	r3, [pc, #276]	; (8006bf0 <HAL_DMA_Init+0x13c>)
 8006ada:	4413      	add	r3, r2
 8006adc:	4a45      	ldr	r2, [pc, #276]	; (8006bf4 <HAL_DMA_Init+0x140>)
 8006ade:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae2:	091b      	lsrs	r3, r3, #4
 8006ae4:	009a      	lsls	r2, r3, #2
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a42      	ldr	r2, [pc, #264]	; (8006bf8 <HAL_DMA_Init+0x144>)
 8006aee:	641a      	str	r2, [r3, #64]	; 0x40
 8006af0:	e00e      	b.n	8006b10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	4b40      	ldr	r3, [pc, #256]	; (8006bfc <HAL_DMA_Init+0x148>)
 8006afa:	4413      	add	r3, r2
 8006afc:	4a3d      	ldr	r2, [pc, #244]	; (8006bf4 <HAL_DMA_Init+0x140>)
 8006afe:	fba2 2303 	umull	r2, r3, r2, r3
 8006b02:	091b      	lsrs	r3, r3, #4
 8006b04:	009a      	lsls	r2, r3, #2
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a3c      	ldr	r2, [pc, #240]	; (8006c00 <HAL_DMA_Init+0x14c>)
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fa2c 	bl	8006fc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b70:	d102      	bne.n	8006b78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b80:	b2d2      	uxtb	r2, r2
 8006b82:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006b8c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d010      	beq.n	8006bb8 <HAL_DMA_Init+0x104>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d80c      	bhi.n	8006bb8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa4c 	bl	800703c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	e008      	b.n	8006bca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	40020407 	.word	0x40020407
 8006bf0:	bffdfff8 	.word	0xbffdfff8
 8006bf4:	cccccccd 	.word	0xcccccccd
 8006bf8:	40020000 	.word	0x40020000
 8006bfc:	bffdfbf8 	.word	0xbffdfbf8
 8006c00:	40020400 	.word	0x40020400

08006c04 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d101      	bne.n	8006c24 <HAL_DMA_Start_IT+0x20>
 8006c20:	2302      	movs	r3, #2
 8006c22:	e066      	b.n	8006cf2 <HAL_DMA_Start_IT+0xee>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d155      	bne.n	8006ce4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f970 	bl	8006f42 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d008      	beq.n	8006c7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 020e 	orr.w	r2, r2, #14
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	e00f      	b.n	8006c9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0204 	bic.w	r2, r2, #4
 8006c8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 020a 	orr.w	r2, r2, #10
 8006c9a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cb8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d007      	beq.n	8006cd2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cd0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0201 	orr.w	r2, r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	e005      	b.n	8006cf0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006cec:	2302      	movs	r3, #2
 8006cee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d00d      	beq.n	8006d2e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2204      	movs	r2, #4
 8006d16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
 8006d2c:	e047      	b.n	8006dbe <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 020e 	bic.w	r2, r2, #14
 8006d3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0201 	bic.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d62:	f003 021f 	and.w	r2, r3, #31
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8006d70:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006d7a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00c      	beq.n	8006d9e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006d9c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	4798      	blx	r3
    }
  }
  return status;
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de4:	f003 031f 	and.w	r3, r3, #31
 8006de8:	2204      	movs	r2, #4
 8006dea:	409a      	lsls	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4013      	ands	r3, r2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d026      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x7a>
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f003 0304 	and.w	r3, r3, #4
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d021      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d107      	bne.n	8006e1c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0204 	bic.w	r2, r2, #4
 8006e1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e20:	f003 021f 	and.w	r2, r3, #31
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	2104      	movs	r1, #4
 8006e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e2e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d071      	beq.n	8006f1c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006e40:	e06c      	b.n	8006f1c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	409a      	lsls	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d02e      	beq.n	8006eb4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d029      	beq.n	8006eb4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10b      	bne.n	8006e86 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 020a 	bic.w	r2, r2, #10
 8006e7c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8a:	f003 021f 	and.w	r2, r3, #31
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	2102      	movs	r1, #2
 8006e94:	fa01 f202 	lsl.w	r2, r1, r2
 8006e98:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d038      	beq.n	8006f1c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006eb2:	e033      	b.n	8006f1c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb8:	f003 031f 	and.w	r3, r3, #31
 8006ebc:	2208      	movs	r2, #8
 8006ebe:	409a      	lsls	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d02a      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f003 0308 	and.w	r3, r3, #8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d025      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 020e 	bic.w	r2, r2, #14
 8006ee0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee6:	f003 021f 	and.w	r2, r3, #31
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	2101      	movs	r1, #1
 8006ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ef4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d004      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
}
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f34:	b2db      	uxtb	r3, r3
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b085      	sub	sp, #20
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	607a      	str	r2, [r7, #4]
 8006f4e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006f58:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d004      	beq.n	8006f6c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006f6a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f70:	f003 021f 	and.w	r2, r3, #31
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	2101      	movs	r1, #1
 8006f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8006f7e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	2b10      	cmp	r3, #16
 8006f8e:	d108      	bne.n	8006fa2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006fa0:	e007      	b.n	8006fb2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	60da      	str	r2, [r3, #12]
}
 8006fb2:	bf00      	nop
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
	...

08006fc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	4b16      	ldr	r3, [pc, #88]	; (8007028 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d802      	bhi.n	8006fda <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006fd4:	4b15      	ldr	r3, [pc, #84]	; (800702c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	e001      	b.n	8006fde <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006fda:	4b15      	ldr	r3, [pc, #84]	; (8007030 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006fdc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	3b08      	subs	r3, #8
 8006fea:	4a12      	ldr	r2, [pc, #72]	; (8007034 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006fec:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff0:	091b      	lsrs	r3, r3, #4
 8006ff2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff8:	089b      	lsrs	r3, r3, #2
 8006ffa:	009a      	lsls	r2, r3, #2
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	4413      	add	r3, r2
 8007000:	461a      	mov	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a0b      	ldr	r2, [pc, #44]	; (8007038 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800700a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	2201      	movs	r2, #1
 8007014:	409a      	lsls	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	651a      	str	r2, [r3, #80]	; 0x50
}
 800701a:	bf00      	nop
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	40020407 	.word	0x40020407
 800702c:	40020800 	.word	0x40020800
 8007030:	40020820 	.word	0x40020820
 8007034:	cccccccd 	.word	0xcccccccd
 8007038:	40020880 	.word	0x40020880

0800703c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4b0b      	ldr	r3, [pc, #44]	; (800707c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007050:	4413      	add	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	461a      	mov	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a08      	ldr	r2, [pc, #32]	; (8007080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800705e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3b01      	subs	r3, #1
 8007064:	f003 031f 	and.w	r3, r3, #31
 8007068:	2201      	movs	r2, #1
 800706a:	409a      	lsls	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007070:	bf00      	nop
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	1000823f 	.word	0x1000823f
 8007080:	40020940 	.word	0x40020940

08007084 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e147      	b.n	8007326 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d106      	bne.n	80070b0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7fc ff9a 	bl	8003fe4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	699a      	ldr	r2, [r3, #24]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0210 	bic.w	r2, r2, #16
 80070be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070c0:	f7fe f860 	bl	8005184 <HAL_GetTick>
 80070c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80070c6:	e012      	b.n	80070ee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80070c8:	f7fe f85c 	bl	8005184 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b0a      	cmp	r3, #10
 80070d4:	d90b      	bls.n	80070ee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070da:	f043 0201 	orr.w	r2, r3, #1
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2203      	movs	r2, #3
 80070e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e11b      	b.n	8007326 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d0e5      	beq.n	80070c8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f042 0201 	orr.w	r2, r2, #1
 800710a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800710c:	f7fe f83a 	bl	8005184 <HAL_GetTick>
 8007110:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007112:	e012      	b.n	800713a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007114:	f7fe f836 	bl	8005184 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b0a      	cmp	r3, #10
 8007120:	d90b      	bls.n	800713a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007126:	f043 0201 	orr.w	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2203      	movs	r2, #3
 8007132:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e0f5      	b.n	8007326 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0e5      	beq.n	8007114 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0202 	orr.w	r2, r2, #2
 8007156:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a74      	ldr	r2, [pc, #464]	; (8007330 <HAL_FDCAN_Init+0x2ac>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d103      	bne.n	800716a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007162:	4a74      	ldr	r2, [pc, #464]	; (8007334 <HAL_FDCAN_Init+0x2b0>)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	7c1b      	ldrb	r3, [r3, #16]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d108      	bne.n	8007184 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	699a      	ldr	r2, [r3, #24]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007180:	619a      	str	r2, [r3, #24]
 8007182:	e007      	b.n	8007194 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699a      	ldr	r2, [r3, #24]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007192:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	7c5b      	ldrb	r3, [r3, #17]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d108      	bne.n	80071ae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071aa:	619a      	str	r2, [r3, #24]
 80071ac:	e007      	b.n	80071be <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	699a      	ldr	r2, [r3, #24]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071bc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	7c9b      	ldrb	r3, [r3, #18]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d108      	bne.n	80071d8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	699a      	ldr	r2, [r3, #24]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071d4:	619a      	str	r2, [r3, #24]
 80071d6:	e007      	b.n	80071e8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699a      	ldr	r2, [r3, #24]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071e6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689a      	ldr	r2, [r3, #8]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	699a      	ldr	r2, [r3, #24]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800720c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	691a      	ldr	r2, [r3, #16]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0210 	bic.w	r2, r2, #16
 800721c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d108      	bne.n	8007238 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	699a      	ldr	r2, [r3, #24]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f042 0204 	orr.w	r2, r2, #4
 8007234:	619a      	str	r2, [r3, #24]
 8007236:	e02c      	b.n	8007292 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d028      	beq.n	8007292 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	2b02      	cmp	r3, #2
 8007246:	d01c      	beq.n	8007282 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007256:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0210 	orr.w	r2, r2, #16
 8007266:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	2b03      	cmp	r3, #3
 800726e:	d110      	bne.n	8007292 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	699a      	ldr	r2, [r3, #24]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0220 	orr.w	r2, r2, #32
 800727e:	619a      	str	r2, [r3, #24]
 8007280:	e007      	b.n	8007292 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	699a      	ldr	r2, [r3, #24]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0220 	orr.w	r2, r2, #32
 8007290:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	3b01      	subs	r3, #1
 8007298:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	3b01      	subs	r3, #1
 80072a0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80072a2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80072aa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80072ba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80072bc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072c6:	d115      	bne.n	80072f4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072cc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	3b01      	subs	r3, #1
 80072d4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80072d6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072dc:	3b01      	subs	r3, #1
 80072de:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80072e0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	3b01      	subs	r3, #1
 80072ea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80072f0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80072f2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fc4c 	bl	8007ba8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	40006400 	.word	0x40006400
 8007334:	40006500 	.word	0x40006500

08007338 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007348:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800734a:	7dfb      	ldrb	r3, [r7, #23]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d002      	beq.n	8007356 <HAL_FDCAN_ConfigFilter+0x1e>
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	2b02      	cmp	r3, #2
 8007354:	d13d      	bne.n	80073d2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d119      	bne.n	8007392 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800736a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007372:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007378:	4313      	orrs	r3, r2
 800737a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	e01d      	b.n	80073ce <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	075a      	lsls	r2, r3, #29
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	4313      	orrs	r3, r2
 800739e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	079a      	lsls	r2, r3, #30
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	4413      	add	r3, r2
 80073ba:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	3304      	adds	r3, #4
 80073c6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	e006      	b.n	80073e0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073d6:	f043 0202 	orr.w	r2, r3, #2
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
  }
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	371c      	adds	r7, #28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d110      	bne.n	8007422 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 0201 	bic.w	r2, r2, #1
 8007416:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	e006      	b.n	8007430 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007426:	f043 0204 	orr.w	r2, r3, #4
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
  }
}
 8007430:	4618      	mov	r0, r3
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b02      	cmp	r3, #2
 8007452:	d12c      	bne.n	80074ae <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800745c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d007      	beq.n	8007474 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007468:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e023      	b.n	80074bc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800747c:	0c1b      	lsrs	r3, r3, #16
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	68b9      	ldr	r1, [r7, #8]
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 fbf8 	bl	8007c80 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2101      	movs	r1, #1
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	fa01 f202 	lsl.w	r2, r1, r2
 800749c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80074a0:	2201      	movs	r2, #1
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	409a      	lsls	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	e006      	b.n	80074bc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b2:	f043 0208 	orr.w	r2, r3, #8
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
  }
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b08b      	sub	sp, #44	; 0x2c
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074dc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80074de:	7efb      	ldrb	r3, [r7, #27]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	f040 80e8 	bne.w	80076b6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b40      	cmp	r3, #64	; 0x40
 80074ea:	d137      	bne.n	800755c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f4:	f003 030f 	and.w	r3, r3, #15
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d107      	bne.n	800750c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007500:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e0db      	b.n	80076c4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007514:	0e1b      	lsrs	r3, r3, #24
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b01      	cmp	r3, #1
 800751c:	d10a      	bne.n	8007534 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007526:	0a5b      	lsrs	r3, r3, #9
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b01      	cmp	r3, #1
 800752e:	d101      	bne.n	8007534 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007530:	2301      	movs	r3, #1
 8007532:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800753c:	0a1b      	lsrs	r3, r3, #8
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	4613      	mov	r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	4413      	add	r3, r2
 8007554:	00db      	lsls	r3, r3, #3
 8007556:	440b      	add	r3, r1
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
 800755a:	e036      	b.n	80075ca <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007564:	f003 030f 	and.w	r3, r3, #15
 8007568:	2b00      	cmp	r3, #0
 800756a:	d107      	bne.n	800757c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007570:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e0a3      	b.n	80076c4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007584:	0e1b      	lsrs	r3, r3, #24
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b01      	cmp	r3, #1
 800758c:	d10a      	bne.n	80075a4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007596:	0a1b      	lsrs	r3, r3, #8
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80075a0:	2301      	movs	r3, #1
 80075a2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075ac:	0a1b      	lsrs	r3, r3, #8
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	69fa      	ldr	r2, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80075bc:	69fa      	ldr	r2, [r7, #28]
 80075be:	4613      	mov	r3, r2
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	4413      	add	r3, r2
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	440b      	add	r3, r1
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d107      	bne.n	80075ee <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	0c9b      	lsrs	r3, r3, #18
 80075e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	e005      	b.n	80075fa <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	3304      	adds	r3, #4
 8007616:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	b29a      	uxth	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	0c1b      	lsrs	r3, r3, #16
 8007628:	f003 020f 	and.w	r2, r3, #15
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	0e1b      	lsrs	r3, r3, #24
 800764e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	0fda      	lsrs	r2, r3, #31
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	3304      	adds	r3, #4
 8007664:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800766a:	2300      	movs	r3, #0
 800766c:	623b      	str	r3, [r7, #32]
 800766e:	e00a      	b.n	8007686 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	441a      	add	r2, r3
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	440b      	add	r3, r1
 800767c:	7812      	ldrb	r2, [r2, #0]
 800767e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	3301      	adds	r3, #1
 8007684:	623b      	str	r3, [r7, #32]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	4a11      	ldr	r2, [pc, #68]	; (80076d0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800768c:	5cd3      	ldrb	r3, [r2, r3]
 800768e:	461a      	mov	r2, r3
 8007690:	6a3b      	ldr	r3, [r7, #32]
 8007692:	4293      	cmp	r3, r2
 8007694:	d3ec      	bcc.n	8007670 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b40      	cmp	r3, #64	; 0x40
 800769a:	d105      	bne.n	80076a8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80076a6:	e004      	b.n	80076b2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69fa      	ldr	r2, [r7, #28]
 80076ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	e006      	b.n	80076c4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ba:	f043 0208 	orr.w	r2, r3, #8
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
  }
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	372c      	adds	r7, #44	; 0x2c
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	0800e890 	.word	0x0800e890

080076d4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076e6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d003      	beq.n	80076f6 <HAL_FDCAN_ActivateNotification+0x22>
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	f040 80c8 	bne.w	8007886 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076fc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	2b00      	cmp	r3, #0
 8007706:	d004      	beq.n	8007712 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	2b00      	cmp	r3, #0
 8007710:	d03b      	beq.n	800778a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007718:	2b00      	cmp	r3, #0
 800771a:	d004      	beq.n	8007726 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d031      	beq.n	800778a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800772c:	2b00      	cmp	r3, #0
 800772e:	d004      	beq.n	800773a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f003 0304 	and.w	r3, r3, #4
 8007736:	2b00      	cmp	r3, #0
 8007738:	d027      	beq.n	800778a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007740:	2b00      	cmp	r3, #0
 8007742:	d004      	beq.n	800774e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	2b00      	cmp	r3, #0
 800774c:	d01d      	beq.n	800778a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007754:	2b00      	cmp	r3, #0
 8007756:	d004      	beq.n	8007762 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f003 0310 	and.w	r3, r3, #16
 800775e:	2b00      	cmp	r3, #0
 8007760:	d013      	beq.n	800778a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007768:	2b00      	cmp	r3, #0
 800776a:	d004      	beq.n	8007776 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f003 0320 	and.w	r3, r3, #32
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00c      	beq.n	800779a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	d107      	bne.n	800779a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f042 0201 	orr.w	r2, r2, #1
 8007798:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	f003 0307 	and.w	r3, r3, #7
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d004      	beq.n	80077ae <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d13b      	bne.n	8007826 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d131      	bne.n	8007826 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d004      	beq.n	80077d6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f003 0304 	and.w	r3, r3, #4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d127      	bne.n	8007826 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d004      	beq.n	80077ea <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f003 0308 	and.w	r3, r3, #8
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d11d      	bne.n	8007826 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f003 0310 	and.w	r3, r3, #16
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d113      	bne.n	8007826 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f003 0320 	and.w	r3, r3, #32
 800780e:	2b00      	cmp	r3, #0
 8007810:	d109      	bne.n	8007826 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00c      	beq.n	8007836 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f042 0202 	orr.w	r2, r2, #2
 8007834:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783c:	2b00      	cmp	r3, #0
 800783e:	d009      	beq.n	8007854 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	430a      	orrs	r2, r1
 8007850:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785a:	2b00      	cmp	r3, #0
 800785c:	d009      	beq.n	8007872 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	430a      	orrs	r2, r1
 800786e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	430a      	orrs	r2, r1
 8007880:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	e006      	b.n	8007894 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800788a:	f043 0202 	orr.w	r2, r3, #2
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
  }
}
 8007894:	4618      	mov	r0, r3
 8007896:	371c      	adds	r7, #28
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b08c      	sub	sp, #48	; 0x30
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ae:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078bc:	4013      	ands	r3, r2
 80078be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078d4:	4013      	ands	r3, r2
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ec:	4013      	ands	r3, r2
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80078fa:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007902:	6a3a      	ldr	r2, [r7, #32]
 8007904:	4013      	ands	r3, r2
 8007906:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800790e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007912:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791a:	69fa      	ldr	r2, [r7, #28]
 800791c:	4013      	ands	r3, r2
 800791e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007926:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800792e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00b      	beq.n	8007952 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d006      	beq.n	8007952 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2240      	movs	r2, #64	; 0x40
 800794a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f90b 	bl	8007b68 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007958:	2b00      	cmp	r3, #0
 800795a:	d019      	beq.n	8007990 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007962:	2b00      	cmp	r3, #0
 8007964:	d014      	beq.n	8007990 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800796e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	4013      	ands	r3, r2
 800797c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007986:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007988:	6939      	ldr	r1, [r7, #16]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f8cd 	bl	8007b2a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d007      	beq.n	80079a6 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800799c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800799e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f8a2 	bl	8007aea <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079b2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80079b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7fa fbb0 	bl	800211c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d007      	beq.n	80079d2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80079ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7fa fc1f 	bl	8002210 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00c      	beq.n	80079f6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d007      	beq.n	80079f6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079ee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f885 	bl	8007b00 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d018      	beq.n	8007a32 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d013      	beq.n	8007a32 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007a12:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2280      	movs	r2, #128	; 0x80
 8007a28:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007a2a:	68f9      	ldr	r1, [r7, #12]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f871 	bl	8007b14 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00c      	beq.n	8007a56 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d007      	beq.n	8007a56 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a4e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f875 	bl	8007b40 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00c      	beq.n	8007a7a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d007      	beq.n	8007a7a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007a72:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f86d 	bl	8007b54 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00f      	beq.n	8007aa4 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d007      	beq.n	8007aba <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007ab2:	69f9      	ldr	r1, [r7, #28]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f86b 	bl	8007b90 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d009      	beq.n	8007ad4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6a3a      	ldr	r2, [r7, #32]
 8007ac6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f84d 	bl	8007b7c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007ae2:	bf00      	nop
 8007ae4:	3730      	adds	r7, #48	; 0x30
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
	...

08007ba8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007bb0:	4b30      	ldr	r3, [pc, #192]	; (8007c74 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8007bb2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a2f      	ldr	r2, [pc, #188]	; (8007c78 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d103      	bne.n	8007bc6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007bc4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a2c      	ldr	r2, [pc, #176]	; (8007c7c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d103      	bne.n	8007bd8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8007bd6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007be6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bee:	041a      	lsls	r2, r3, #16
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c0c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	061a      	lsls	r2, r3, #24
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	e005      	b.n	8007c5a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3304      	adds	r3, #4
 8007c58:	60fb      	str	r3, [r7, #12]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d3f3      	bcc.n	8007c4e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8007c66:	bf00      	nop
 8007c68:	bf00      	nop
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	4000a400 	.word	0x4000a400
 8007c78:	40006800 	.word	0x40006800
 8007c7c:	40006c00 	.word	0x40006c00

08007c80 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b089      	sub	sp, #36	; 0x24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10a      	bne.n	8007cac <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007c9e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	61fb      	str	r3, [r7, #28]
 8007caa:	e00a      	b.n	8007cc2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007cb4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8007cba:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007cbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cc0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007ccc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007cd2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007cd8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	4613      	mov	r3, r2
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	4413      	add	r3, r2
 8007cf0:	00db      	lsls	r3, r3, #3
 8007cf2:	440b      	add	r3, r1
 8007cf4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	69fa      	ldr	r2, [r7, #28]
 8007cfa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	3304      	adds	r3, #4
 8007d00:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007d0e:	2300      	movs	r3, #0
 8007d10:	617b      	str	r3, [r7, #20]
 8007d12:	e020      	b.n	8007d56 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	3303      	adds	r3, #3
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	3302      	adds	r3, #2
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	440b      	add	r3, r1
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007d2c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	3301      	adds	r3, #1
 8007d32:	6879      	ldr	r1, [r7, #4]
 8007d34:	440b      	add	r3, r1
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007d3a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	440a      	add	r2, r1
 8007d42:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007d44:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	3304      	adds	r3, #4
 8007d54:	617b      	str	r3, [r7, #20]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	4a06      	ldr	r2, [pc, #24]	; (8007d74 <FDCAN_CopyMessageToRAM+0xf4>)
 8007d5c:	5cd3      	ldrb	r3, [r2, r3]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d3d6      	bcc.n	8007d14 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8007d66:	bf00      	nop
 8007d68:	bf00      	nop
 8007d6a:	3724      	adds	r7, #36	; 0x24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	0800e890 	.word	0x0800e890

08007d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007d86:	e15a      	b.n	800803e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	fa01 f303 	lsl.w	r3, r1, r3
 8007d94:	4013      	ands	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 814c 	beq.w	8008038 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f003 0303 	and.w	r3, r3, #3
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d005      	beq.n	8007db8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d130      	bne.n	8007e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	005b      	lsls	r3, r3, #1
 8007dc2:	2203      	movs	r2, #3
 8007dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc8:	43db      	mvns	r3, r3
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4013      	ands	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	68da      	ldr	r2, [r3, #12]
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007dee:	2201      	movs	r2, #1
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	fa02 f303 	lsl.w	r3, r2, r3
 8007df6:	43db      	mvns	r3, r3
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	091b      	lsrs	r3, r3, #4
 8007e04:	f003 0201 	and.w	r2, r3, #1
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f003 0303 	and.w	r3, r3, #3
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d017      	beq.n	8007e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	2203      	movs	r2, #3
 8007e32:	fa02 f303 	lsl.w	r3, r2, r3
 8007e36:	43db      	mvns	r3, r3
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	689a      	ldr	r2, [r3, #8]
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d123      	bne.n	8007eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	08da      	lsrs	r2, r3, #3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3208      	adds	r2, #8
 8007e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	220f      	movs	r2, #15
 8007e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7e:	43db      	mvns	r3, r3
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	4013      	ands	r3, r2
 8007e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	691a      	ldr	r2, [r3, #16]
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f003 0307 	and.w	r3, r3, #7
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	fa02 f303 	lsl.w	r3, r2, r3
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	08da      	lsrs	r2, r3, #3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3208      	adds	r2, #8
 8007ea4:	6939      	ldr	r1, [r7, #16]
 8007ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	2203      	movs	r2, #3
 8007eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eba:	43db      	mvns	r3, r3
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f003 0203 	and.w	r2, r3, #3
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	005b      	lsls	r3, r3, #1
 8007ece:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 80a6 	beq.w	8008038 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eec:	4b5b      	ldr	r3, [pc, #364]	; (800805c <HAL_GPIO_Init+0x2e4>)
 8007eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef0:	4a5a      	ldr	r2, [pc, #360]	; (800805c <HAL_GPIO_Init+0x2e4>)
 8007ef2:	f043 0301 	orr.w	r3, r3, #1
 8007ef6:	6613      	str	r3, [r2, #96]	; 0x60
 8007ef8:	4b58      	ldr	r3, [pc, #352]	; (800805c <HAL_GPIO_Init+0x2e4>)
 8007efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	60bb      	str	r3, [r7, #8]
 8007f02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f04:	4a56      	ldr	r2, [pc, #344]	; (8008060 <HAL_GPIO_Init+0x2e8>)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	089b      	lsrs	r3, r3, #2
 8007f0a:	3302      	adds	r3, #2
 8007f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f003 0303 	and.w	r3, r3, #3
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	220f      	movs	r2, #15
 8007f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f20:	43db      	mvns	r3, r3
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4013      	ands	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007f2e:	d01f      	beq.n	8007f70 <HAL_GPIO_Init+0x1f8>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a4c      	ldr	r2, [pc, #304]	; (8008064 <HAL_GPIO_Init+0x2ec>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d019      	beq.n	8007f6c <HAL_GPIO_Init+0x1f4>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a4b      	ldr	r2, [pc, #300]	; (8008068 <HAL_GPIO_Init+0x2f0>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d013      	beq.n	8007f68 <HAL_GPIO_Init+0x1f0>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a4a      	ldr	r2, [pc, #296]	; (800806c <HAL_GPIO_Init+0x2f4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d00d      	beq.n	8007f64 <HAL_GPIO_Init+0x1ec>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a49      	ldr	r2, [pc, #292]	; (8008070 <HAL_GPIO_Init+0x2f8>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d007      	beq.n	8007f60 <HAL_GPIO_Init+0x1e8>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a48      	ldr	r2, [pc, #288]	; (8008074 <HAL_GPIO_Init+0x2fc>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d101      	bne.n	8007f5c <HAL_GPIO_Init+0x1e4>
 8007f58:	2305      	movs	r3, #5
 8007f5a:	e00a      	b.n	8007f72 <HAL_GPIO_Init+0x1fa>
 8007f5c:	2306      	movs	r3, #6
 8007f5e:	e008      	b.n	8007f72 <HAL_GPIO_Init+0x1fa>
 8007f60:	2304      	movs	r3, #4
 8007f62:	e006      	b.n	8007f72 <HAL_GPIO_Init+0x1fa>
 8007f64:	2303      	movs	r3, #3
 8007f66:	e004      	b.n	8007f72 <HAL_GPIO_Init+0x1fa>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e002      	b.n	8007f72 <HAL_GPIO_Init+0x1fa>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e000      	b.n	8007f72 <HAL_GPIO_Init+0x1fa>
 8007f70:	2300      	movs	r3, #0
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	f002 0203 	and.w	r2, r2, #3
 8007f78:	0092      	lsls	r2, r2, #2
 8007f7a:	4093      	lsls	r3, r2
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f82:	4937      	ldr	r1, [pc, #220]	; (8008060 <HAL_GPIO_Init+0x2e8>)
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	089b      	lsrs	r3, r3, #2
 8007f88:	3302      	adds	r3, #2
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f90:	4b39      	ldr	r3, [pc, #228]	; (8008078 <HAL_GPIO_Init+0x300>)
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	43db      	mvns	r3, r3
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007fb4:	4a30      	ldr	r2, [pc, #192]	; (8008078 <HAL_GPIO_Init+0x300>)
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007fba:	4b2f      	ldr	r3, [pc, #188]	; (8008078 <HAL_GPIO_Init+0x300>)
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	43db      	mvns	r3, r3
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007fde:	4a26      	ldr	r2, [pc, #152]	; (8008078 <HAL_GPIO_Init+0x300>)
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007fe4:	4b24      	ldr	r3, [pc, #144]	; (8008078 <HAL_GPIO_Init+0x300>)
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	43db      	mvns	r3, r3
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d003      	beq.n	8008008 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	4313      	orrs	r3, r2
 8008006:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008008:	4a1b      	ldr	r2, [pc, #108]	; (8008078 <HAL_GPIO_Init+0x300>)
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800800e:	4b1a      	ldr	r3, [pc, #104]	; (8008078 <HAL_GPIO_Init+0x300>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	43db      	mvns	r3, r3
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	4013      	ands	r3, r2
 800801c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4313      	orrs	r3, r2
 8008030:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008032:	4a11      	ldr	r2, [pc, #68]	; (8008078 <HAL_GPIO_Init+0x300>)
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	3301      	adds	r3, #1
 800803c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	fa22 f303 	lsr.w	r3, r2, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	f47f ae9d 	bne.w	8007d88 <HAL_GPIO_Init+0x10>
  }
}
 800804e:	bf00      	nop
 8008050:	bf00      	nop
 8008052:	371c      	adds	r7, #28
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	40021000 	.word	0x40021000
 8008060:	40010000 	.word	0x40010000
 8008064:	48000400 	.word	0x48000400
 8008068:	48000800 	.word	0x48000800
 800806c:	48000c00 	.word	0x48000c00
 8008070:	48001000 	.word	0x48001000
 8008074:	48001400 	.word	0x48001400
 8008078:	40010400 	.word	0x40010400

0800807c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	807b      	strh	r3, [r7, #2]
 8008088:	4613      	mov	r3, r2
 800808a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800808c:	787b      	ldrb	r3, [r7, #1]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008092:	887a      	ldrh	r2, [r7, #2]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008098:	e002      	b.n	80080a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800809a:	887a      	ldrh	r2, [r7, #2]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e08d      	b.n	80081da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d106      	bne.n	80080d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7fc f89e 	bl	8004214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2224      	movs	r2, #36	; 0x24
 80080dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0201 	bic.w	r2, r2, #1
 80080ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80080fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800810c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d107      	bne.n	8008126 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	689a      	ldr	r2, [r3, #8]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008122:	609a      	str	r2, [r3, #8]
 8008124:	e006      	b.n	8008134 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008132:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	2b02      	cmp	r3, #2
 800813a:	d108      	bne.n	800814e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800814a:	605a      	str	r2, [r3, #4]
 800814c:	e007      	b.n	800815e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800815c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	6812      	ldr	r2, [r2, #0]
 8008168:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800816c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008170:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68da      	ldr	r2, [r3, #12]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008180:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691a      	ldr	r2, [r3, #16]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	69d9      	ldr	r1, [r3, #28]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a1a      	ldr	r2, [r3, #32]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	430a      	orrs	r2, r1
 80081aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f042 0201 	orr.w	r2, r2, #1
 80081ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	607a      	str	r2, [r7, #4]
 80081ee:	461a      	mov	r2, r3
 80081f0:	460b      	mov	r3, r1
 80081f2:	817b      	strh	r3, [r7, #10]
 80081f4:	4613      	mov	r3, r2
 80081f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b20      	cmp	r3, #32
 8008202:	f040 80fd 	bne.w	8008400 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800820c:	2b01      	cmp	r3, #1
 800820e:	d101      	bne.n	8008214 <HAL_I2C_Master_Transmit+0x30>
 8008210:	2302      	movs	r3, #2
 8008212:	e0f6      	b.n	8008402 <HAL_I2C_Master_Transmit+0x21e>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800821c:	f7fc ffb2 	bl	8005184 <HAL_GetTick>
 8008220:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	2319      	movs	r3, #25
 8008228:	2201      	movs	r2, #1
 800822a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f002 f868 	bl	800a304 <I2C_WaitOnFlagUntilTimeout>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e0e1      	b.n	8008402 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2221      	movs	r2, #33	; 0x21
 8008242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2210      	movs	r2, #16
 800824a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	893a      	ldrh	r2, [r7, #8]
 800825e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800826a:	b29b      	uxth	r3, r3
 800826c:	2bff      	cmp	r3, #255	; 0xff
 800826e:	d906      	bls.n	800827e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	22ff      	movs	r2, #255	; 0xff
 8008274:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008276:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800827a:	617b      	str	r3, [r7, #20]
 800827c:	e007      	b.n	800828e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008282:	b29a      	uxth	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800828c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008292:	2b00      	cmp	r3, #0
 8008294:	d024      	beq.n	80082e0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	781a      	ldrb	r2, [r3, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	3b01      	subs	r3, #1
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082be:	3b01      	subs	r3, #1
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	3301      	adds	r3, #1
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	8979      	ldrh	r1, [r7, #10]
 80082d2:	4b4e      	ldr	r3, [pc, #312]	; (800840c <HAL_I2C_Master_Transmit+0x228>)
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f002 fa63 	bl	800a7a4 <I2C_TransferConfig>
 80082de:	e066      	b.n	80083ae <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	8979      	ldrh	r1, [r7, #10]
 80082e8:	4b48      	ldr	r3, [pc, #288]	; (800840c <HAL_I2C_Master_Transmit+0x228>)
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f002 fa58 	bl	800a7a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80082f4:	e05b      	b.n	80083ae <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	6a39      	ldr	r1, [r7, #32]
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f002 f85b 	bl	800a3b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e07b      	b.n	8008402 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	781a      	ldrb	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008324:	b29b      	uxth	r3, r3
 8008326:	3b01      	subs	r3, #1
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008332:	3b01      	subs	r3, #1
 8008334:	b29a      	uxth	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800833e:	b29b      	uxth	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	d034      	beq.n	80083ae <HAL_I2C_Master_Transmit+0x1ca>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008348:	2b00      	cmp	r3, #0
 800834a:	d130      	bne.n	80083ae <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	2200      	movs	r2, #0
 8008354:	2180      	movs	r1, #128	; 0x80
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f001 ffd4 	bl	800a304 <I2C_WaitOnFlagUntilTimeout>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e04d      	b.n	8008402 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800836a:	b29b      	uxth	r3, r3
 800836c:	2bff      	cmp	r3, #255	; 0xff
 800836e:	d90e      	bls.n	800838e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	22ff      	movs	r2, #255	; 0xff
 8008374:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800837a:	b2da      	uxtb	r2, r3
 800837c:	8979      	ldrh	r1, [r7, #10]
 800837e:	2300      	movs	r3, #0
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f002 fa0c 	bl	800a7a4 <I2C_TransferConfig>
 800838c:	e00f      	b.n	80083ae <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008392:	b29a      	uxth	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800839c:	b2da      	uxtb	r2, r3
 800839e:	8979      	ldrh	r1, [r7, #10]
 80083a0:	2300      	movs	r3, #0
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f002 f9fb 	bl	800a7a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d19e      	bne.n	80082f6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	6a39      	ldr	r1, [r7, #32]
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f002 f841 	bl	800a444 <I2C_WaitOnSTOPFlagUntilTimeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e01a      	b.n	8008402 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2220      	movs	r2, #32
 80083d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6859      	ldr	r1, [r3, #4]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	4b0c      	ldr	r3, [pc, #48]	; (8008410 <HAL_I2C_Master_Transmit+0x22c>)
 80083e0:	400b      	ands	r3, r1
 80083e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2220      	movs	r2, #32
 80083e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e000      	b.n	8008402 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008400:	2302      	movs	r3, #2
  }
}
 8008402:	4618      	mov	r0, r3
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	80002000 	.word	0x80002000
 8008410:	fe00e800 	.word	0xfe00e800

08008414 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b088      	sub	sp, #32
 8008418:	af02      	add	r7, sp, #8
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	607a      	str	r2, [r7, #4]
 800841e:	461a      	mov	r2, r3
 8008420:	460b      	mov	r3, r1
 8008422:	817b      	strh	r3, [r7, #10]
 8008424:	4613      	mov	r3, r2
 8008426:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b20      	cmp	r3, #32
 8008432:	f040 80db 	bne.w	80085ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800843c:	2b01      	cmp	r3, #1
 800843e:	d101      	bne.n	8008444 <HAL_I2C_Master_Receive+0x30>
 8008440:	2302      	movs	r3, #2
 8008442:	e0d4      	b.n	80085ee <HAL_I2C_Master_Receive+0x1da>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800844c:	f7fc fe9a 	bl	8005184 <HAL_GetTick>
 8008450:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	2319      	movs	r3, #25
 8008458:	2201      	movs	r2, #1
 800845a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f001 ff50 	bl	800a304 <I2C_WaitOnFlagUntilTimeout>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e0bf      	b.n	80085ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2222      	movs	r2, #34	; 0x22
 8008472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2210      	movs	r2, #16
 800847a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	893a      	ldrh	r2, [r7, #8]
 800848e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800849a:	b29b      	uxth	r3, r3
 800849c:	2bff      	cmp	r3, #255	; 0xff
 800849e:	d90e      	bls.n	80084be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	22ff      	movs	r2, #255	; 0xff
 80084a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	8979      	ldrh	r1, [r7, #10]
 80084ae:	4b52      	ldr	r3, [pc, #328]	; (80085f8 <HAL_I2C_Master_Receive+0x1e4>)
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f002 f974 	bl	800a7a4 <I2C_TransferConfig>
 80084bc:	e06d      	b.n	800859a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	8979      	ldrh	r1, [r7, #10]
 80084d0:	4b49      	ldr	r3, [pc, #292]	; (80085f8 <HAL_I2C_Master_Receive+0x1e4>)
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f002 f963 	bl	800a7a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80084de:	e05c      	b.n	800859a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	6a39      	ldr	r1, [r7, #32]
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f001 fff1 	bl	800a4cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e07c      	b.n	80085ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	b2d2      	uxtb	r2, r2
 8008500:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008510:	3b01      	subs	r3, #1
 8008512:	b29a      	uxth	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800851c:	b29b      	uxth	r3, r3
 800851e:	3b01      	subs	r3, #1
 8008520:	b29a      	uxth	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800852a:	b29b      	uxth	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d034      	beq.n	800859a <HAL_I2C_Master_Receive+0x186>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008534:	2b00      	cmp	r3, #0
 8008536:	d130      	bne.n	800859a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	2200      	movs	r2, #0
 8008540:	2180      	movs	r1, #128	; 0x80
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f001 fede 	bl	800a304 <I2C_WaitOnFlagUntilTimeout>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e04d      	b.n	80085ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008556:	b29b      	uxth	r3, r3
 8008558:	2bff      	cmp	r3, #255	; 0xff
 800855a:	d90e      	bls.n	800857a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	22ff      	movs	r2, #255	; 0xff
 8008560:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008566:	b2da      	uxtb	r2, r3
 8008568:	8979      	ldrh	r1, [r7, #10]
 800856a:	2300      	movs	r3, #0
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f002 f916 	bl	800a7a4 <I2C_TransferConfig>
 8008578:	e00f      	b.n	800859a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800857e:	b29a      	uxth	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008588:	b2da      	uxtb	r2, r3
 800858a:	8979      	ldrh	r1, [r7, #10]
 800858c:	2300      	movs	r3, #0
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f002 f905 	bl	800a7a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800859e:	b29b      	uxth	r3, r3
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d19d      	bne.n	80084e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	6a39      	ldr	r1, [r7, #32]
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f001 ff4b 	bl	800a444 <I2C_WaitOnSTOPFlagUntilTimeout>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e01a      	b.n	80085ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2220      	movs	r2, #32
 80085be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6859      	ldr	r1, [r3, #4]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	4b0c      	ldr	r3, [pc, #48]	; (80085fc <HAL_I2C_Master_Receive+0x1e8>)
 80085cc:	400b      	ands	r3, r1
 80085ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2220      	movs	r2, #32
 80085d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	e000      	b.n	80085ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80085ec:	2302      	movs	r3, #2
  }
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	80002400 	.word	0x80002400
 80085fc:	fe00e800 	.word	0xfe00e800

08008600 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08a      	sub	sp, #40	; 0x28
 8008604:	af02      	add	r7, sp, #8
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	607a      	str	r2, [r7, #4]
 800860a:	461a      	mov	r2, r3
 800860c:	460b      	mov	r3, r1
 800860e:	817b      	strh	r3, [r7, #10]
 8008610:	4613      	mov	r3, r2
 8008612:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b20      	cmp	r3, #32
 8008622:	f040 80ef 	bne.w	8008804 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008634:	d101      	bne.n	800863a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8008636:	2302      	movs	r3, #2
 8008638:	e0e5      	b.n	8008806 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008640:	2b01      	cmp	r3, #1
 8008642:	d101      	bne.n	8008648 <HAL_I2C_Master_Transmit_DMA+0x48>
 8008644:	2302      	movs	r3, #2
 8008646:	e0de      	b.n	8008806 <HAL_I2C_Master_Transmit_DMA+0x206>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2221      	movs	r2, #33	; 0x21
 8008654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2210      	movs	r2, #16
 800865c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	893a      	ldrh	r2, [r7, #8]
 8008670:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4a66      	ldr	r2, [pc, #408]	; (8008810 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8008676:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4a66      	ldr	r2, [pc, #408]	; (8008814 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800867c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008682:	b29b      	uxth	r3, r3
 8008684:	2bff      	cmp	r3, #255	; 0xff
 8008686:	d906      	bls.n	8008696 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	22ff      	movs	r2, #255	; 0xff
 800868c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800868e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008692:	61fb      	str	r3, [r7, #28]
 8008694:	e007      	b.n	80086a6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800869a:	b29a      	uxth	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80086a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086a4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d01a      	beq.n	80086e4 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	781a      	ldrb	r2, [r3, #0]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086be:	1c5a      	adds	r2, r3, #1
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	3b01      	subs	r3, #1
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086dc:	3b01      	subs	r3, #1
 80086de:	b29a      	uxth	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d074      	beq.n	80087d6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d022      	beq.n	800873a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f8:	4a47      	ldr	r2, [pc, #284]	; (8008818 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80086fa:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008700:	4a46      	ldr	r2, [pc, #280]	; (800881c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8008702:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008708:	2200      	movs	r2, #0
 800870a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008710:	2200      	movs	r2, #0
 8008712:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8008724:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800872a:	f7fe fa6b 	bl	8006c04 <HAL_DMA_Start_IT>
 800872e:	4603      	mov	r3, r0
 8008730:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d13a      	bne.n	80087ae <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8008738:	e013      	b.n	8008762 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2220      	movs	r2, #32
 800873e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e051      	b.n	8008806 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008766:	b2db      	uxtb	r3, r3
 8008768:	3301      	adds	r3, #1
 800876a:	b2da      	uxtb	r2, r3
 800876c:	8979      	ldrh	r1, [r7, #10]
 800876e:	4b2c      	ldr	r3, [pc, #176]	; (8008820 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f002 f815 	bl	800a7a4 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800877e:	b29a      	uxth	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	b29a      	uxth	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008794:	2110      	movs	r1, #16
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f002 f836 	bl	800a808 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	e028      	b.n	8008800 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2220      	movs	r2, #32
 80087b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c2:	f043 0210 	orr.w	r2, r3, #16
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e017      	b.n	8008806 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4a12      	ldr	r2, [pc, #72]	; (8008824 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80087da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	8979      	ldrh	r1, [r7, #10]
 80087e2:	4b0f      	ldr	r3, [pc, #60]	; (8008820 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f001 ffda 	bl	800a7a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80087f8:	2101      	movs	r1, #1
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f002 f804 	bl	800a808 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	e000      	b.n	8008806 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8008804:	2302      	movs	r3, #2
  }
}
 8008806:	4618      	mov	r0, r3
 8008808:	3720      	adds	r7, #32
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	ffff0000 	.word	0xffff0000
 8008814:	08009141 	.word	0x08009141
 8008818:	0800a16f 	.word	0x0800a16f
 800881c:	0800a29b 	.word	0x0800a29b
 8008820:	80002000 	.word	0x80002000
 8008824:	08008d01 	.word	0x08008d01

08008828 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b088      	sub	sp, #32
 800882c:	af02      	add	r7, sp, #8
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	607a      	str	r2, [r7, #4]
 8008832:	461a      	mov	r2, r3
 8008834:	460b      	mov	r3, r1
 8008836:	817b      	strh	r3, [r7, #10]
 8008838:	4613      	mov	r3, r2
 800883a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b20      	cmp	r3, #32
 8008846:	f040 80cd 	bne.w	80089e4 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008858:	d101      	bne.n	800885e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800885a:	2302      	movs	r3, #2
 800885c:	e0c3      	b.n	80089e6 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008864:	2b01      	cmp	r3, #1
 8008866:	d101      	bne.n	800886c <HAL_I2C_Master_Receive_DMA+0x44>
 8008868:	2302      	movs	r3, #2
 800886a:	e0bc      	b.n	80089e6 <HAL_I2C_Master_Receive_DMA+0x1be>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2222      	movs	r2, #34	; 0x22
 8008878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2210      	movs	r2, #16
 8008880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	893a      	ldrh	r2, [r7, #8]
 8008894:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	4a55      	ldr	r2, [pc, #340]	; (80089f0 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800889a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4a55      	ldr	r2, [pc, #340]	; (80089f4 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80088a0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2bff      	cmp	r3, #255	; 0xff
 80088aa:	d906      	bls.n	80088ba <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	22ff      	movs	r2, #255	; 0xff
 80088b0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80088b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088b6:	617b      	str	r3, [r7, #20]
 80088b8:	e007      	b.n	80088ca <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088be:	b29a      	uxth	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80088c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d070      	beq.n	80089b4 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d020      	beq.n	800891c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088de:	4a46      	ldr	r2, [pc, #280]	; (80089f8 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80088e0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e6:	4a45      	ldr	r2, [pc, #276]	; (80089fc <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80088e8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ee:	2200      	movs	r2, #0
 80088f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f6:	2200      	movs	r2, #0
 80088f8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3324      	adds	r3, #36	; 0x24
 8008904:	4619      	mov	r1, r3
 8008906:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800890c:	f7fe f97a 	bl	8006c04 <HAL_DMA_Start_IT>
 8008910:	4603      	mov	r3, r0
 8008912:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008914:	7cfb      	ldrb	r3, [r7, #19]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d138      	bne.n	800898c <HAL_I2C_Master_Receive_DMA+0x164>
 800891a:	e013      	b.n	8008944 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2220      	movs	r2, #32
 8008920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008930:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e050      	b.n	80089e6 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008948:	b2da      	uxtb	r2, r3
 800894a:	8979      	ldrh	r1, [r7, #10]
 800894c:	4b2c      	ldr	r3, [pc, #176]	; (8008a00 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f001 ff26 	bl	800a7a4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800895c:	b29a      	uxth	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	b29a      	uxth	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008972:	2110      	movs	r1, #16
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f001 ff47 	bl	800a808 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	e029      	b.n	80089e0 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2220      	movs	r2, #32
 8008990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a0:	f043 0210 	orr.w	r2, r3, #16
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e018      	b.n	80089e6 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4a13      	ldr	r2, [pc, #76]	; (8008a04 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80089b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	8979      	ldrh	r1, [r7, #10]
 80089c2:	4b0f      	ldr	r3, [pc, #60]	; (8008a00 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f001 feea 	bl	800a7a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80089d8:	2102      	movs	r1, #2
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f001 ff14 	bl	800a808 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	e000      	b.n	80089e6 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80089e4:	2302      	movs	r3, #2
  }
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	ffff0000 	.word	0xffff0000
 80089f4:	08009141 	.word	0x08009141
 80089f8:	0800a205 	.word	0x0800a205
 80089fc:	0800a29b 	.word	0x0800a29b
 8008a00:	80002400 	.word	0x80002400
 8008a04:	08008d01 	.word	0x08008d01

08008a08 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	4608      	mov	r0, r1
 8008a12:	4611      	mov	r1, r2
 8008a14:	461a      	mov	r2, r3
 8008a16:	4603      	mov	r3, r0
 8008a18:	817b      	strh	r3, [r7, #10]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	813b      	strh	r3, [r7, #8]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b20      	cmp	r3, #32
 8008a2c:	f040 80f9 	bne.w	8008c22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d002      	beq.n	8008a3c <HAL_I2C_Mem_Write+0x34>
 8008a36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d105      	bne.n	8008a48 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e0ed      	b.n	8008c24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d101      	bne.n	8008a56 <HAL_I2C_Mem_Write+0x4e>
 8008a52:	2302      	movs	r3, #2
 8008a54:	e0e6      	b.n	8008c24 <HAL_I2C_Mem_Write+0x21c>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a5e:	f7fc fb91 	bl	8005184 <HAL_GetTick>
 8008a62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	2319      	movs	r3, #25
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f001 fc47 	bl	800a304 <I2C_WaitOnFlagUntilTimeout>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e0d1      	b.n	8008c24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2221      	movs	r2, #33	; 0x21
 8008a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2240      	movs	r2, #64	; 0x40
 8008a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6a3a      	ldr	r2, [r7, #32]
 8008a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008aa8:	88f8      	ldrh	r0, [r7, #6]
 8008aaa:	893a      	ldrh	r2, [r7, #8]
 8008aac:	8979      	ldrh	r1, [r7, #10]
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 fe2b 	bl	8009714 <I2C_RequestMemoryWrite>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e0a9      	b.n	8008c24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2bff      	cmp	r3, #255	; 0xff
 8008ad8:	d90e      	bls.n	8008af8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	22ff      	movs	r2, #255	; 0xff
 8008ade:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	8979      	ldrh	r1, [r7, #10]
 8008ae8:	2300      	movs	r3, #0
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f001 fe57 	bl	800a7a4 <I2C_TransferConfig>
 8008af6:	e00f      	b.n	8008b18 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	8979      	ldrh	r1, [r7, #10]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f001 fe46 	bl	800a7a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f001 fc4a 	bl	800a3b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e07b      	b.n	8008c24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	781a      	ldrb	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b54:	3b01      	subs	r3, #1
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d034      	beq.n	8008bd0 <HAL_I2C_Mem_Write+0x1c8>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d130      	bne.n	8008bd0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b74:	2200      	movs	r2, #0
 8008b76:	2180      	movs	r1, #128	; 0x80
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f001 fbc3 	bl	800a304 <I2C_WaitOnFlagUntilTimeout>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e04d      	b.n	8008c24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2bff      	cmp	r3, #255	; 0xff
 8008b90:	d90e      	bls.n	8008bb0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	22ff      	movs	r2, #255	; 0xff
 8008b96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	8979      	ldrh	r1, [r7, #10]
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f001 fdfb 	bl	800a7a4 <I2C_TransferConfig>
 8008bae:	e00f      	b.n	8008bd0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	8979      	ldrh	r1, [r7, #10]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f001 fdea 	bl	800a7a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d19e      	bne.n	8008b18 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f001 fc30 	bl	800a444 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e01a      	b.n	8008c24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6859      	ldr	r1, [r3, #4]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	4b0a      	ldr	r3, [pc, #40]	; (8008c2c <HAL_I2C_Mem_Write+0x224>)
 8008c02:	400b      	ands	r3, r1
 8008c04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e000      	b.n	8008c24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008c22:	2302      	movs	r3, #2
  }
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3718      	adds	r7, #24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	fe00e800 	.word	0xfe00e800

08008c30 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b088      	sub	sp, #32
 8008d04:	af02      	add	r7, sp, #8
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d101      	bne.n	8008d1e <I2C_Master_ISR_IT+0x1e>
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	e113      	b.n	8008f46 <I2C_Master_ISR_IT+0x246>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f003 0310 	and.w	r3, r3, #16
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d012      	beq.n	8008d56 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00d      	beq.n	8008d56 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2210      	movs	r2, #16
 8008d40:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d46:	f043 0204 	orr.w	r2, r3, #4
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f001 f9e9 	bl	800a126 <I2C_Flush_TXDR>
 8008d54:	e0e4      	b.n	8008f20 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f003 0304 	and.w	r3, r3, #4
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d022      	beq.n	8008da6 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d01d      	beq.n	8008da6 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f023 0304 	bic.w	r3, r3, #4
 8008d70:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	b2d2      	uxtb	r2, r2
 8008d7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008da4:	e0bc      	b.n	8008f20 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d128      	bne.n	8008e02 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d023      	beq.n	8008e02 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d01e      	beq.n	8008e02 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 80a8 	beq.w	8008f20 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	781a      	ldrb	r2, [r3, #0]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dea:	3b01      	subs	r3, #1
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8008e00:	e08e      	b.n	8008f20 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d05c      	beq.n	8008ec6 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d057      	beq.n	8008ec6 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d040      	beq.n	8008ea2 <I2C_Master_ISR_IT+0x1a2>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d13c      	bne.n	8008ea2 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e34:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	2bff      	cmp	r3, #255	; 0xff
 8008e3e:	d90e      	bls.n	8008e5e <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	22ff      	movs	r2, #255	; 0xff
 8008e44:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	8a79      	ldrh	r1, [r7, #18]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f001 fca4 	bl	800a7a4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e5c:	e032      	b.n	8008ec4 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e70:	d00b      	beq.n	8008e8a <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e76:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008e7c:	8a79      	ldrh	r1, [r7, #18]
 8008e7e:	2000      	movs	r0, #0
 8008e80:	9000      	str	r0, [sp, #0]
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f001 fc8e 	bl	800a7a4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e88:	e01c      	b.n	8008ec4 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	8a79      	ldrh	r1, [r7, #18]
 8008e92:	2300      	movs	r3, #0
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f001 fc82 	bl	800a7a4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ea0:	e010      	b.n	8008ec4 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eb0:	d003      	beq.n	8008eba <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f000 fd06 	bl	80098c4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008eb8:	e032      	b.n	8008f20 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008eba:	2140      	movs	r1, #64	; 0x40
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f001 f81b 	bl	8009ef8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ec2:	e02d      	b.n	8008f20 <I2C_Master_ISR_IT+0x220>
 8008ec4:	e02c      	b.n	8008f20 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d027      	beq.n	8008f20 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d022      	beq.n	8008f20 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d119      	bne.n	8008f18 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ef2:	d015      	beq.n	8008f20 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008efc:	d108      	bne.n	8008f10 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f0c:	605a      	str	r2, [r3, #4]
 8008f0e:	e007      	b.n	8008f20 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f000 fcd7 	bl	80098c4 <I2C_ITMasterSeqCplt>
 8008f16:	e003      	b.n	8008f20 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008f18:	2140      	movs	r1, #64	; 0x40
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 ffec 	bl	8009ef8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f003 0320 	and.w	r3, r3, #32
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d008      	beq.n	8008f3c <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d003      	beq.n	8008f3c <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8008f34:	6979      	ldr	r1, [r7, #20]
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 fd5e 	bl	80099f8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b086      	sub	sp, #24
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d101      	bne.n	8008f72 <I2C_Slave_ISR_IT+0x24>
 8008f6e:	2302      	movs	r3, #2
 8008f70:	e0e2      	b.n	8009138 <I2C_Slave_ISR_IT+0x1ea>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f003 0320 	and.w	r3, r3, #32
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d009      	beq.n	8008f98 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d004      	beq.n	8008f98 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008f8e:	6939      	ldr	r1, [r7, #16]
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 fdf9 	bl	8009b88 <I2C_ITSlaveCplt>
 8008f96:	e0ca      	b.n	800912e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f003 0310 	and.w	r3, r3, #16
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d04b      	beq.n	800903a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d046      	beq.n	800903a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d128      	bne.n	8009008 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b28      	cmp	r3, #40	; 0x28
 8008fc0:	d108      	bne.n	8008fd4 <I2C_Slave_ISR_IT+0x86>
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fc8:	d104      	bne.n	8008fd4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008fca:	6939      	ldr	r1, [r7, #16]
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 ff3f 	bl	8009e50 <I2C_ITListenCplt>
 8008fd2:	e031      	b.n	8009038 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b29      	cmp	r3, #41	; 0x29
 8008fde:	d10e      	bne.n	8008ffe <I2C_Slave_ISR_IT+0xb0>
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008fe6:	d00a      	beq.n	8008ffe <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2210      	movs	r2, #16
 8008fee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f001 f898 	bl	800a126 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 fca1 	bl	800993e <I2C_ITSlaveSeqCplt>
 8008ffc:	e01c      	b.n	8009038 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2210      	movs	r2, #16
 8009004:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009006:	e08f      	b.n	8009128 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2210      	movs	r2, #16
 800900e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009014:	f043 0204 	orr.w	r2, r3, #4
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <I2C_Slave_ISR_IT+0xdc>
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009028:	d17e      	bne.n	8009128 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800902e:	4619      	mov	r1, r3
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 ff61 	bl	8009ef8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009036:	e077      	b.n	8009128 <I2C_Slave_ISR_IT+0x1da>
 8009038:	e076      	b.n	8009128 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b00      	cmp	r3, #0
 8009042:	d02f      	beq.n	80090a4 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800904a:	2b00      	cmp	r3, #0
 800904c:	d02a      	beq.n	80090a4 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009052:	b29b      	uxth	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d018      	beq.n	800908a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	b2d2      	uxtb	r2, r2
 8009064:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009074:	3b01      	subs	r3, #1
 8009076:	b29a      	uxth	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009080:	b29b      	uxth	r3, r3
 8009082:	3b01      	subs	r3, #1
 8009084:	b29a      	uxth	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800908e:	b29b      	uxth	r3, r3
 8009090:	2b00      	cmp	r3, #0
 8009092:	d14b      	bne.n	800912c <I2C_Slave_ISR_IT+0x1de>
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800909a:	d047      	beq.n	800912c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 fc4e 	bl	800993e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80090a2:	e043      	b.n	800912c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	f003 0308 	and.w	r3, r3, #8
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d009      	beq.n	80090c2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d004      	beq.n	80090c2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80090b8:	6939      	ldr	r1, [r7, #16]
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 fb7e 	bl	80097bc <I2C_ITAddrCplt>
 80090c0:	e035      	b.n	800912e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d030      	beq.n	800912e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d02b      	beq.n	800912e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090da:	b29b      	uxth	r3, r3
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d018      	beq.n	8009112 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	781a      	ldrb	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f0:	1c5a      	adds	r2, r3, #1
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	3b01      	subs	r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009108:	3b01      	subs	r3, #1
 800910a:	b29a      	uxth	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009110:	e00d      	b.n	800912e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009118:	d002      	beq.n	8009120 <I2C_Slave_ISR_IT+0x1d2>
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d106      	bne.n	800912e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 fc0c 	bl	800993e <I2C_ITSlaveSeqCplt>
 8009126:	e002      	b.n	800912e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8009128:	bf00      	nop
 800912a:	e000      	b.n	800912e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800912c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3718      	adds	r7, #24
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af02      	add	r7, sp, #8
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009152:	2b01      	cmp	r3, #1
 8009154:	d101      	bne.n	800915a <I2C_Master_ISR_DMA+0x1a>
 8009156:	2302      	movs	r3, #2
 8009158:	e0d9      	b.n	800930e <I2C_Master_ISR_DMA+0x1ce>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	f003 0310 	and.w	r3, r3, #16
 8009168:	2b00      	cmp	r3, #0
 800916a:	d016      	beq.n	800919a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009172:	2b00      	cmp	r3, #0
 8009174:	d011      	beq.n	800919a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2210      	movs	r2, #16
 800917c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009182:	f043 0204 	orr.w	r2, r3, #4
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800918a:	2120      	movs	r1, #32
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f001 fb3b 	bl	800a808 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 ffc7 	bl	800a126 <I2C_Flush_TXDR>
 8009198:	e0b4      	b.n	8009304 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d071      	beq.n	8009288 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d06c      	beq.n	8009288 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091bc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d04e      	beq.n	8009266 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091d4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091da:	b29b      	uxth	r3, r3
 80091dc:	2bff      	cmp	r3, #255	; 0xff
 80091de:	d906      	bls.n	80091ee <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	22ff      	movs	r2, #255	; 0xff
 80091e4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80091e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091ea:	617b      	str	r3, [r7, #20]
 80091ec:	e010      	b.n	8009210 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009200:	d003      	beq.n	800920a <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009206:	617b      	str	r3, [r7, #20]
 8009208:	e002      	b.n	8009210 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800920a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800920e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009214:	b2da      	uxtb	r2, r3
 8009216:	8a79      	ldrh	r1, [r7, #18]
 8009218:	2300      	movs	r3, #0
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f001 fac0 	bl	800a7a4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009228:	b29a      	uxth	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	b29a      	uxth	r2, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b22      	cmp	r3, #34	; 0x22
 8009240:	d108      	bne.n	8009254 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009250:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009252:	e057      	b.n	8009304 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009262:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009264:	e04e      	b.n	8009304 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009274:	d003      	beq.n	800927e <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 fb24 	bl	80098c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800927c:	e042      	b.n	8009304 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800927e:	2140      	movs	r1, #64	; 0x40
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 fe39 	bl	8009ef8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009286:	e03d      	b.n	8009304 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928e:	2b00      	cmp	r3, #0
 8009290:	d028      	beq.n	80092e4 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009298:	2b00      	cmp	r3, #0
 800929a:	d023      	beq.n	80092e4 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d119      	bne.n	80092da <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092b4:	d025      	beq.n	8009302 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80092be:	d108      	bne.n	80092d2 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092ce:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80092d0:	e017      	b.n	8009302 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f000 faf6 	bl	80098c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80092d8:	e013      	b.n	8009302 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80092da:	2140      	movs	r1, #64	; 0x40
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 fe0b 	bl	8009ef8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80092e2:	e00e      	b.n	8009302 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00a      	beq.n	8009304 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d005      	beq.n	8009304 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80092f8:	68b9      	ldr	r1, [r7, #8]
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 fb7c 	bl	80099f8 <I2C_ITMasterCplt>
 8009300:	e000      	b.n	8009304 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8009302:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af02      	add	r7, sp, #8
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8009324:	4b8d      	ldr	r3, [pc, #564]	; (800955c <I2C_Mem_ISR_DMA+0x244>)
 8009326:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800932e:	2b01      	cmp	r3, #1
 8009330:	d101      	bne.n	8009336 <I2C_Mem_ISR_DMA+0x1e>
 8009332:	2302      	movs	r3, #2
 8009334:	e10e      	b.n	8009554 <I2C_Mem_ISR_DMA+0x23c>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f003 0310 	and.w	r3, r3, #16
 8009344:	2b00      	cmp	r3, #0
 8009346:	d016      	beq.n	8009376 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800934e:	2b00      	cmp	r3, #0
 8009350:	d011      	beq.n	8009376 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2210      	movs	r2, #16
 8009358:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800935e:	f043 0204 	orr.w	r2, r3, #4
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009366:	2120      	movs	r1, #32
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f001 fa4d 	bl	800a808 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 fed9 	bl	800a126 <I2C_Flush_TXDR>
 8009374:	e0e9      	b.n	800954a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	f003 0302 	and.w	r3, r3, #2
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00e      	beq.n	800939e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009386:	2b00      	cmp	r3, #0
 8009388:	d009      	beq.n	800939e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009392:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f04f 32ff 	mov.w	r2, #4294967295
 800939a:	651a      	str	r2, [r3, #80]	; 0x50
 800939c:	e0d5      	b.n	800954a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d05f      	beq.n	8009468 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d05a      	beq.n	8009468 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80093b2:	2101      	movs	r1, #1
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f001 faab 	bl	800a910 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80093ba:	2110      	movs	r1, #16
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f001 fa23 	bl	800a808 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d048      	beq.n	800945e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	2bff      	cmp	r3, #255	; 0xff
 80093d4:	d910      	bls.n	80093f8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	22ff      	movs	r2, #255	; 0xff
 80093da:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093e0:	b299      	uxth	r1, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	2300      	movs	r3, #0
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f001 f9d7 	bl	800a7a4 <I2C_TransferConfig>
 80093f6:	e011      	b.n	800941c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009406:	b299      	uxth	r1, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800940c:	b2da      	uxtb	r2, r3
 800940e:	2300      	movs	r3, #0
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f001 f9c4 	bl	800a7a4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009420:	b29a      	uxth	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	b29a      	uxth	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b22      	cmp	r3, #34	; 0x22
 8009438:	d108      	bne.n	800944c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009448:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800944a:	e07e      	b.n	800954a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800945a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800945c:	e075      	b.n	800954a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800945e:	2140      	movs	r1, #64	; 0x40
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 fd49 	bl	8009ef8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009466:	e070      	b.n	800954a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946e:	2b00      	cmp	r3, #0
 8009470:	d05d      	beq.n	800952e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009478:	2b00      	cmp	r3, #0
 800947a:	d058      	beq.n	800952e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800947c:	2101      	movs	r1, #1
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f001 fa46 	bl	800a910 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009484:	2110      	movs	r1, #16
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f001 f9be 	bl	800a808 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b22      	cmp	r3, #34	; 0x22
 8009496:	d101      	bne.n	800949c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8009498:	4b31      	ldr	r3, [pc, #196]	; (8009560 <I2C_Mem_ISR_DMA+0x248>)
 800949a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	2bff      	cmp	r3, #255	; 0xff
 80094a4:	d910      	bls.n	80094c8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	22ff      	movs	r2, #255	; 0xff
 80094aa:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b0:	b299      	uxth	r1, r3
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f001 f96f 	bl	800a7a4 <I2C_TransferConfig>
 80094c6:	e011      	b.n	80094ec <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094d6:	b299      	uxth	r1, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f001 f95c 	bl	800a7a4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b22      	cmp	r3, #34	; 0x22
 8009508:	d108      	bne.n	800951c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009518:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800951a:	e016      	b.n	800954a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800952a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800952c:	e00d      	b.n	800954a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f003 0320 	and.w	r3, r3, #32
 8009534:	2b00      	cmp	r3, #0
 8009536:	d008      	beq.n	800954a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800953e:	2b00      	cmp	r3, #0
 8009540:	d003      	beq.n	800954a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009542:	68b9      	ldr	r1, [r7, #8]
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 fa57 	bl	80099f8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	80002000 	.word	0x80002000
 8009560:	80002400 	.word	0x80002400

08009564 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009574:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009580:	2b01      	cmp	r3, #1
 8009582:	d101      	bne.n	8009588 <I2C_Slave_ISR_DMA+0x24>
 8009584:	2302      	movs	r3, #2
 8009586:	e0c0      	b.n	800970a <I2C_Slave_ISR_DMA+0x1a6>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	f003 0320 	and.w	r3, r3, #32
 8009596:	2b00      	cmp	r3, #0
 8009598:	d009      	beq.n	80095ae <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80095a4:	68b9      	ldr	r1, [r7, #8]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f000 faee 	bl	8009b88 <I2C_ITSlaveCplt>
 80095ac:	e0a8      	b.n	8009700 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	f003 0310 	and.w	r3, r3, #16
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 8095 	beq.w	80096e4 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 808f 	beq.w	80096e4 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d104      	bne.n	80095da <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d07d      	beq.n	80096d6 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00c      	beq.n	80095fc <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d007      	beq.n	80095fc <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80095f8:	2301      	movs	r3, #1
 80095fa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00c      	beq.n	800961e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800960a:	2b00      	cmp	r3, #0
 800960c:	d007      	beq.n	800961e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800961a:	2301      	movs	r3, #1
 800961c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d128      	bne.n	8009676 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b28      	cmp	r3, #40	; 0x28
 800962e:	d108      	bne.n	8009642 <I2C_Slave_ISR_DMA+0xde>
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009636:	d104      	bne.n	8009642 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009638:	68b9      	ldr	r1, [r7, #8]
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 fc08 	bl	8009e50 <I2C_ITListenCplt>
 8009640:	e048      	b.n	80096d4 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b29      	cmp	r3, #41	; 0x29
 800964c:	d10e      	bne.n	800966c <I2C_Slave_ISR_DMA+0x108>
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009654:	d00a      	beq.n	800966c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2210      	movs	r2, #16
 800965c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 fd61 	bl	800a126 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 f96a 	bl	800993e <I2C_ITSlaveSeqCplt>
 800966a:	e033      	b.n	80096d4 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2210      	movs	r2, #16
 8009672:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009674:	e034      	b.n	80096e0 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2210      	movs	r2, #16
 800967c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009682:	f043 0204 	orr.w	r2, r3, #4
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009690:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d003      	beq.n	80096a0 <I2C_Slave_ISR_DMA+0x13c>
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800969e:	d11f      	bne.n	80096e0 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80096a0:	7dfb      	ldrb	r3, [r7, #23]
 80096a2:	2b21      	cmp	r3, #33	; 0x21
 80096a4:	d002      	beq.n	80096ac <I2C_Slave_ISR_DMA+0x148>
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
 80096a8:	2b29      	cmp	r3, #41	; 0x29
 80096aa:	d103      	bne.n	80096b4 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2221      	movs	r2, #33	; 0x21
 80096b0:	631a      	str	r2, [r3, #48]	; 0x30
 80096b2:	e008      	b.n	80096c6 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80096b4:	7dfb      	ldrb	r3, [r7, #23]
 80096b6:	2b22      	cmp	r3, #34	; 0x22
 80096b8:	d002      	beq.n	80096c0 <I2C_Slave_ISR_DMA+0x15c>
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
 80096bc:	2b2a      	cmp	r3, #42	; 0x2a
 80096be:	d102      	bne.n	80096c6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2222      	movs	r2, #34	; 0x22
 80096c4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ca:	4619      	mov	r1, r3
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 fc13 	bl	8009ef8 <I2C_ITError>
      if (treatdmanack == 1U)
 80096d2:	e005      	b.n	80096e0 <I2C_Slave_ISR_DMA+0x17c>
 80096d4:	e004      	b.n	80096e0 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2210      	movs	r2, #16
 80096dc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80096de:	e00f      	b.n	8009700 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80096e0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80096e2:	e00d      	b.n	8009700 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f003 0308 	and.w	r3, r3, #8
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d008      	beq.n	8009700 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d003      	beq.n	8009700 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80096f8:	68b9      	ldr	r1, [r7, #8]
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 f85e 	bl	80097bc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3720      	adds	r7, #32
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af02      	add	r7, sp, #8
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	4608      	mov	r0, r1
 800971e:	4611      	mov	r1, r2
 8009720:	461a      	mov	r2, r3
 8009722:	4603      	mov	r3, r0
 8009724:	817b      	strh	r3, [r7, #10]
 8009726:	460b      	mov	r3, r1
 8009728:	813b      	strh	r3, [r7, #8]
 800972a:	4613      	mov	r3, r2
 800972c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800972e:	88fb      	ldrh	r3, [r7, #6]
 8009730:	b2da      	uxtb	r2, r3
 8009732:	8979      	ldrh	r1, [r7, #10]
 8009734:	4b20      	ldr	r3, [pc, #128]	; (80097b8 <I2C_RequestMemoryWrite+0xa4>)
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f001 f831 	bl	800a7a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009742:	69fa      	ldr	r2, [r7, #28]
 8009744:	69b9      	ldr	r1, [r7, #24]
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f000 fe35 	bl	800a3b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e02c      	b.n	80097b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009756:	88fb      	ldrh	r3, [r7, #6]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d105      	bne.n	8009768 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800975c:	893b      	ldrh	r3, [r7, #8]
 800975e:	b2da      	uxtb	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	629a      	str	r2, [r3, #40]	; 0x28
 8009766:	e015      	b.n	8009794 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009768:	893b      	ldrh	r3, [r7, #8]
 800976a:	0a1b      	lsrs	r3, r3, #8
 800976c:	b29b      	uxth	r3, r3
 800976e:	b2da      	uxtb	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009776:	69fa      	ldr	r2, [r7, #28]
 8009778:	69b9      	ldr	r1, [r7, #24]
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 fe1b 	bl	800a3b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	e012      	b.n	80097b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800978a:	893b      	ldrh	r3, [r7, #8]
 800978c:	b2da      	uxtb	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	2200      	movs	r2, #0
 800979c:	2180      	movs	r1, #128	; 0x80
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 fdb0 	bl	800a304 <I2C_WaitOnFlagUntilTimeout>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e000      	b.n	80097b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	80002000 	.word	0x80002000

080097bc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80097d2:	2b28      	cmp	r3, #40	; 0x28
 80097d4:	d16a      	bne.n	80098ac <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	0c1b      	lsrs	r3, r3, #16
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	0c1b      	lsrs	r3, r3, #16
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80097f4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009802:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	b29b      	uxth	r3, r3
 800980c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009810:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	2b02      	cmp	r3, #2
 8009818:	d138      	bne.n	800988c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800981a:	897b      	ldrh	r3, [r7, #10]
 800981c:	09db      	lsrs	r3, r3, #7
 800981e:	b29a      	uxth	r2, r3
 8009820:	89bb      	ldrh	r3, [r7, #12]
 8009822:	4053      	eors	r3, r2
 8009824:	b29b      	uxth	r3, r3
 8009826:	f003 0306 	and.w	r3, r3, #6
 800982a:	2b00      	cmp	r3, #0
 800982c:	d11c      	bne.n	8009868 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800982e:	897b      	ldrh	r3, [r7, #10]
 8009830:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009840:	2b02      	cmp	r3, #2
 8009842:	d13b      	bne.n	80098bc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2208      	movs	r2, #8
 8009850:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800985a:	89ba      	ldrh	r2, [r7, #12]
 800985c:	7bfb      	ldrb	r3, [r7, #15]
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff fa0d 	bl	8008c80 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009866:	e029      	b.n	80098bc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009868:	893b      	ldrh	r3, [r7, #8]
 800986a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800986c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f001 f84d 	bl	800a910 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800987e:	89ba      	ldrh	r2, [r7, #12]
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	4619      	mov	r1, r3
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff f9fb 	bl	8008c80 <HAL_I2C_AddrCallback>
}
 800988a:	e017      	b.n	80098bc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800988c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f001 f83d 	bl	800a910 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800989e:	89ba      	ldrh	r2, [r7, #12]
 80098a0:	7bfb      	ldrb	r3, [r7, #15]
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7ff f9eb 	bl	8008c80 <HAL_I2C_AddrCallback>
}
 80098aa:	e007      	b.n	80098bc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2208      	movs	r2, #8
 80098b2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80098bc:	bf00      	nop
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b21      	cmp	r3, #33	; 0x21
 80098de:	d115      	bne.n	800990c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2220      	movs	r2, #32
 80098e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2211      	movs	r2, #17
 80098ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80098f4:	2101      	movs	r1, #1
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f001 f80a 	bl	800a910 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7ff f993 	bl	8008c30 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800990a:	e014      	b.n	8009936 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2220      	movs	r2, #32
 8009910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2212      	movs	r2, #18
 8009918:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009920:	2102      	movs	r1, #2
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fff4 	bl	800a910 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff f987 	bl	8008c44 <HAL_I2C_MasterRxCpltCallback>
}
 8009936:	bf00      	nop
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d008      	beq.n	8009972 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800996e:	601a      	str	r2, [r3, #0]
 8009970:	e00c      	b.n	800998c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d007      	beq.n	800998c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800998a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b29      	cmp	r3, #41	; 0x29
 8009996:	d112      	bne.n	80099be <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2228      	movs	r2, #40	; 0x28
 800999c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2221      	movs	r2, #33	; 0x21
 80099a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80099a6:	2101      	movs	r1, #1
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 ffb1 	bl	800a910 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7ff f94e 	bl	8008c58 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80099bc:	e017      	b.n	80099ee <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	2b2a      	cmp	r3, #42	; 0x2a
 80099c8:	d111      	bne.n	80099ee <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2228      	movs	r2, #40	; 0x28
 80099ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2222      	movs	r2, #34	; 0x22
 80099d6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80099d8:	2102      	movs	r1, #2
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 ff98 	bl	800a910 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7ff f93f 	bl	8008c6c <HAL_I2C_SlaveRxCpltCallback>
}
 80099ee:	bf00      	nop
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b21      	cmp	r3, #33	; 0x21
 8009a18:	d107      	bne.n	8009a2a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 ff77 	bl	800a910 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2211      	movs	r2, #17
 8009a26:	631a      	str	r2, [r3, #48]	; 0x30
 8009a28:	e00c      	b.n	8009a44 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b22      	cmp	r3, #34	; 0x22
 8009a34:	d106      	bne.n	8009a44 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009a36:	2102      	movs	r1, #2
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 ff69 	bl	800a910 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2212      	movs	r2, #18
 8009a42:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6859      	ldr	r1, [r3, #4]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	4b4c      	ldr	r3, [pc, #304]	; (8009b80 <I2C_ITMasterCplt+0x188>)
 8009a50:	400b      	ands	r3, r1
 8009a52:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a49      	ldr	r2, [pc, #292]	; (8009b84 <I2C_ITMasterCplt+0x18c>)
 8009a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	f003 0310 	and.w	r3, r3, #16
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d009      	beq.n	8009a7e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2210      	movs	r2, #16
 8009a70:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a76:	f043 0204 	orr.w	r2, r3, #4
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b60      	cmp	r3, #96	; 0x60
 8009a88:	d10a      	bne.n	8009aa0 <I2C_ITMasterCplt+0xa8>
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f003 0304 	and.w	r3, r3, #4
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d005      	beq.n	8009aa0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fb40 	bl	800a126 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aaa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	2b60      	cmp	r3, #96	; 0x60
 8009ab6:	d002      	beq.n	8009abe <I2C_ITMasterCplt+0xc6>
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d006      	beq.n	8009acc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fa17 	bl	8009ef8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009aca:	e054      	b.n	8009b76 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b21      	cmp	r3, #33	; 0x21
 8009ad6:	d124      	bne.n	8009b22 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2220      	movs	r2, #32
 8009adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b40      	cmp	r3, #64	; 0x40
 8009af0:	d10b      	bne.n	8009b0a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7ff f8d4 	bl	8008cb0 <HAL_I2C_MemTxCpltCallback>
}
 8009b08:	e035      	b.n	8009b76 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff f888 	bl	8008c30 <HAL_I2C_MasterTxCpltCallback>
}
 8009b20:	e029      	b.n	8009b76 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b22      	cmp	r3, #34	; 0x22
 8009b2c:	d123      	bne.n	8009b76 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2220      	movs	r2, #32
 8009b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b40      	cmp	r3, #64	; 0x40
 8009b46:	d10b      	bne.n	8009b60 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7ff f8b3 	bl	8008cc4 <HAL_I2C_MemRxCpltCallback>
}
 8009b5e:	e00a      	b.n	8009b76 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7ff f867 	bl	8008c44 <HAL_I2C_MasterRxCpltCallback>
}
 8009b76:	bf00      	nop
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	fe00e800 	.word	0xfe00e800
 8009b84:	ffff0000 	.word	0xffff0000

08009b88 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b086      	sub	sp, #24
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009baa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2220      	movs	r2, #32
 8009bb2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009bb4:	7afb      	ldrb	r3, [r7, #11]
 8009bb6:	2b21      	cmp	r3, #33	; 0x21
 8009bb8:	d002      	beq.n	8009bc0 <I2C_ITSlaveCplt+0x38>
 8009bba:	7afb      	ldrb	r3, [r7, #11]
 8009bbc:	2b29      	cmp	r3, #41	; 0x29
 8009bbe:	d108      	bne.n	8009bd2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009bc0:	f248 0101 	movw	r1, #32769	; 0x8001
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fea3 	bl	800a910 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2221      	movs	r2, #33	; 0x21
 8009bce:	631a      	str	r2, [r3, #48]	; 0x30
 8009bd0:	e019      	b.n	8009c06 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009bd2:	7afb      	ldrb	r3, [r7, #11]
 8009bd4:	2b22      	cmp	r3, #34	; 0x22
 8009bd6:	d002      	beq.n	8009bde <I2C_ITSlaveCplt+0x56>
 8009bd8:	7afb      	ldrb	r3, [r7, #11]
 8009bda:	2b2a      	cmp	r3, #42	; 0x2a
 8009bdc:	d108      	bne.n	8009bf0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009bde:	f248 0102 	movw	r1, #32770	; 0x8002
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fe94 	bl	800a910 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2222      	movs	r2, #34	; 0x22
 8009bec:	631a      	str	r2, [r3, #48]	; 0x30
 8009bee:	e00a      	b.n	8009c06 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8009bf0:	7afb      	ldrb	r3, [r7, #11]
 8009bf2:	2b28      	cmp	r3, #40	; 0x28
 8009bf4:	d107      	bne.n	8009c06 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009bf6:	f248 0103 	movw	r1, #32771	; 0x8003
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fe88 	bl	800a910 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c14:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	6859      	ldr	r1, [r3, #4]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	4b89      	ldr	r3, [pc, #548]	; (8009e48 <I2C_ITSlaveCplt+0x2c0>)
 8009c22:	400b      	ands	r3, r1
 8009c24:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa7d 	bl	800a126 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d013      	beq.n	8009c5e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009c44:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d01f      	beq.n	8009c8e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c5c:	e017      	b.n	8009c8e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d012      	beq.n	8009c8e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c76:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d006      	beq.n	8009c8e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f003 0304 	and.w	r3, r3, #4
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d020      	beq.n	8009cda <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	f023 0304 	bic.w	r3, r3, #4
 8009c9e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009caa:	b2d2      	uxtb	r2, r2
 8009cac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00c      	beq.n	8009cda <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d005      	beq.n	8009cf0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce8:	f043 0204 	orr.w	r2, r3, #4
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	f003 0310 	and.w	r3, r3, #16
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d049      	beq.n	8009d8e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d044      	beq.n	8009d8e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d128      	bne.n	8009d60 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b28      	cmp	r3, #40	; 0x28
 8009d18:	d108      	bne.n	8009d2c <I2C_ITSlaveCplt+0x1a4>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d20:	d104      	bne.n	8009d2c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009d22:	6979      	ldr	r1, [r7, #20]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f893 	bl	8009e50 <I2C_ITListenCplt>
 8009d2a:	e030      	b.n	8009d8e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b29      	cmp	r3, #41	; 0x29
 8009d36:	d10e      	bne.n	8009d56 <I2C_ITSlaveCplt+0x1ce>
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d3e:	d00a      	beq.n	8009d56 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2210      	movs	r2, #16
 8009d46:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f9ec 	bl	800a126 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7ff fdf5 	bl	800993e <I2C_ITSlaveSeqCplt>
 8009d54:	e01b      	b.n	8009d8e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2210      	movs	r2, #16
 8009d5c:	61da      	str	r2, [r3, #28]
 8009d5e:	e016      	b.n	8009d8e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2210      	movs	r2, #16
 8009d66:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d6c:	f043 0204 	orr.w	r2, r3, #4
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <I2C_ITSlaveCplt+0x1fa>
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d80:	d105      	bne.n	8009d8e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f8b5 	bl	8009ef8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d010      	beq.n	8009dc6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f8a4 	bl	8009ef8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b28      	cmp	r3, #40	; 0x28
 8009dba:	d141      	bne.n	8009e40 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009dbc:	6979      	ldr	r1, [r7, #20]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f846 	bl	8009e50 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009dc4:	e03c      	b.n	8009e40 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009dce:	d014      	beq.n	8009dfa <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff fdb4 	bl	800993e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a1c      	ldr	r2, [pc, #112]	; (8009e4c <I2C_ITSlaveCplt+0x2c4>)
 8009dda:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2220      	movs	r2, #32
 8009de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7fe ff52 	bl	8008c9c <HAL_I2C_ListenCpltCallback>
}
 8009df8:	e022      	b.n	8009e40 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b22      	cmp	r3, #34	; 0x22
 8009e04:	d10e      	bne.n	8009e24 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7fe ff25 	bl	8008c6c <HAL_I2C_SlaveRxCpltCallback>
}
 8009e22:	e00d      	b.n	8009e40 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2220      	movs	r2, #32
 8009e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7fe ff0c 	bl	8008c58 <HAL_I2C_SlaveTxCpltCallback>
}
 8009e40:	bf00      	nop
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	fe00e800 	.word	0xfe00e800
 8009e4c:	ffff0000 	.word	0xffff0000

08009e50 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a25      	ldr	r2, [pc, #148]	; (8009ef4 <I2C_ITListenCplt+0xa4>)
 8009e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2220      	movs	r2, #32
 8009e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	f003 0304 	and.w	r3, r3, #4
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d022      	beq.n	8009ecc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	b2d2      	uxtb	r2, r2
 8009e92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d012      	beq.n	8009ecc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec4:	f043 0204 	orr.w	r2, r3, #4
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009ecc:	f248 0103 	movw	r1, #32771	; 0x8003
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fd1d 	bl	800a910 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2210      	movs	r2, #16
 8009edc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f7fe fed8 	bl	8008c9c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009eec:	bf00      	nop
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	ffff0000 	.word	0xffff0000

08009ef8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f08:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a6d      	ldr	r2, [pc, #436]	; (800a0cc <I2C_ITError+0x1d4>)
 8009f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	431a      	orrs	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
 8009f2c:	2b28      	cmp	r3, #40	; 0x28
 8009f2e:	d005      	beq.n	8009f3c <I2C_ITError+0x44>
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	2b29      	cmp	r3, #41	; 0x29
 8009f34:	d002      	beq.n	8009f3c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
 8009f38:	2b2a      	cmp	r3, #42	; 0x2a
 8009f3a:	d10b      	bne.n	8009f54 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009f3c:	2103      	movs	r1, #3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fce6 	bl	800a910 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2228      	movs	r2, #40	; 0x28
 8009f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a60      	ldr	r2, [pc, #384]	; (800a0d0 <I2C_ITError+0x1d8>)
 8009f50:	635a      	str	r2, [r3, #52]	; 0x34
 8009f52:	e030      	b.n	8009fb6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009f54:	f248 0103 	movw	r1, #32771	; 0x8003
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fcd9 	bl	800a910 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f8e1 	bl	800a126 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b60      	cmp	r3, #96	; 0x60
 8009f6e:	d01f      	beq.n	8009fb0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2220      	movs	r2, #32
 8009f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	f003 0320 	and.w	r3, r3, #32
 8009f82:	2b20      	cmp	r3, #32
 8009f84:	d114      	bne.n	8009fb0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	f003 0310 	and.w	r3, r3, #16
 8009f90:	2b10      	cmp	r3, #16
 8009f92:	d109      	bne.n	8009fa8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2210      	movs	r2, #16
 8009f9a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa0:	f043 0204 	orr.w	r2, r3, #4
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2220      	movs	r2, #32
 8009fae:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d039      	beq.n	800a038 <I2C_ITError+0x140>
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2b11      	cmp	r3, #17
 8009fc8:	d002      	beq.n	8009fd0 <I2C_ITError+0xd8>
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2b21      	cmp	r3, #33	; 0x21
 8009fce:	d133      	bne.n	800a038 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fde:	d107      	bne.n	8009ff0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009fee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fc ff96 	bl	8006f26 <HAL_DMA_GetState>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d017      	beq.n	800a030 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a004:	4a33      	ldr	r2, [pc, #204]	; (800a0d4 <I2C_ITError+0x1dc>)
 800a006:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a014:	4618      	mov	r0, r3
 800a016:	f7fc fe70 	bl	8006cfa <HAL_DMA_Abort_IT>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d04d      	beq.n	800a0bc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a02a:	4610      	mov	r0, r2
 800a02c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a02e:	e045      	b.n	800a0bc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f851 	bl	800a0d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a036:	e041      	b.n	800a0bc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d039      	beq.n	800a0b4 <I2C_ITError+0x1bc>
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b12      	cmp	r3, #18
 800a044:	d002      	beq.n	800a04c <I2C_ITError+0x154>
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	2b22      	cmp	r3, #34	; 0x22
 800a04a:	d133      	bne.n	800a0b4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a05a:	d107      	bne.n	800a06c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a06a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a070:	4618      	mov	r0, r3
 800a072:	f7fc ff58 	bl	8006f26 <HAL_DMA_GetState>
 800a076:	4603      	mov	r3, r0
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d017      	beq.n	800a0ac <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a080:	4a14      	ldr	r2, [pc, #80]	; (800a0d4 <I2C_ITError+0x1dc>)
 800a082:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a090:	4618      	mov	r0, r3
 800a092:	f7fc fe32 	bl	8006cfa <HAL_DMA_Abort_IT>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d011      	beq.n	800a0c0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a0aa:	e009      	b.n	800a0c0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 f813 	bl	800a0d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a0b2:	e005      	b.n	800a0c0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f80f 	bl	800a0d8 <I2C_TreatErrorCallback>
  }
}
 800a0ba:	e002      	b.n	800a0c2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a0bc:	bf00      	nop
 800a0be:	e000      	b.n	800a0c2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a0c0:	bf00      	nop
}
 800a0c2:	bf00      	nop
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	ffff0000 	.word	0xffff0000
 800a0d0:	08008f4f 	.word	0x08008f4f
 800a0d4:	0800a2c9 	.word	0x0800a2c9

0800a0d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b60      	cmp	r3, #96	; 0x60
 800a0ea:	d10e      	bne.n	800a10a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7fe fdf2 	bl	8008cec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a108:	e009      	b.n	800a11e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7fe fddd 	bl	8008cd8 <HAL_I2C_ErrorCallback>
}
 800a11e:	bf00      	nop
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a126:	b480      	push	{r7}
 800a128:	b083      	sub	sp, #12
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	f003 0302 	and.w	r3, r3, #2
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d103      	bne.n	800a144 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2200      	movs	r2, #0
 800a142:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d007      	beq.n	800a162 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	699a      	ldr	r2, [r3, #24]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f042 0201 	orr.w	r2, r2, #1
 800a160:	619a      	str	r2, [r3, #24]
  }
}
 800a162:	bf00      	nop
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr

0800a16e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b084      	sub	sp, #16
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a18a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a190:	b29b      	uxth	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d104      	bne.n	800a1a0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a196:	2120      	movs	r1, #32
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f000 fb35 	bl	800a808 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a19e:	e02d      	b.n	800a1fc <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a1a8:	441a      	add	r2, r3
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	2bff      	cmp	r3, #255	; 0xff
 800a1b6:	d903      	bls.n	800a1c0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	22ff      	movs	r2, #255	; 0xff
 800a1bc:	851a      	strh	r2, [r3, #40]	; 0x28
 800a1be:	e004      	b.n	800a1ca <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3328      	adds	r3, #40	; 0x28
 800a1da:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a1e0:	f7fc fd10 	bl	8006c04 <HAL_DMA_Start_IT>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d004      	beq.n	800a1f4 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a1ea:	2110      	movs	r1, #16
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f7ff fe83 	bl	8009ef8 <I2C_ITError>
}
 800a1f2:	e003      	b.n	800a1fc <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a1f4:	2140      	movs	r1, #64	; 0x40
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 fb06 	bl	800a808 <I2C_Enable_IRQ>
}
 800a1fc:	bf00      	nop
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a210:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a220:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a226:	b29b      	uxth	r3, r3
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d104      	bne.n	800a236 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a22c:	2120      	movs	r1, #32
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f000 faea 	bl	800a808 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a234:	e02d      	b.n	800a292 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a23e:	441a      	add	r2, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a248:	b29b      	uxth	r3, r3
 800a24a:	2bff      	cmp	r3, #255	; 0xff
 800a24c:	d903      	bls.n	800a256 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	22ff      	movs	r2, #255	; 0xff
 800a252:	851a      	strh	r2, [r3, #40]	; 0x28
 800a254:	e004      	b.n	800a260 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	3324      	adds	r3, #36	; 0x24
 800a26a:	4619      	mov	r1, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a270:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800a276:	f7fc fcc5 	bl	8006c04 <HAL_DMA_Start_IT>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d004      	beq.n	800a28a <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a280:	2110      	movs	r1, #16
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f7ff fe38 	bl	8009ef8 <I2C_ITError>
}
 800a288:	e003      	b.n	800a292 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a28a:	2140      	movs	r1, #64	; 0x40
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f000 fabb 	bl	800a808 <I2C_Enable_IRQ>
}
 800a292:	bf00      	nop
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b084      	sub	sp, #16
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2b6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a2b8:	2110      	movs	r1, #16
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f7ff fe1c 	bl	8009ef8 <I2C_ITError>
}
 800a2c0:	bf00      	nop
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d003      	beq.n	800a2e6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d003      	beq.n	800a2f6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f7ff feee 	bl	800a0d8 <I2C_TreatErrorCallback>
}
 800a2fc:	bf00      	nop
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	603b      	str	r3, [r7, #0]
 800a310:	4613      	mov	r3, r2
 800a312:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a314:	e03b      	b.n	800a38e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a316:	69ba      	ldr	r2, [r7, #24]
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 f962 	bl	800a5e4 <I2C_IsErrorOccurred>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e041      	b.n	800a3ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a330:	d02d      	beq.n	800a38e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a332:	f7fa ff27 	bl	8005184 <HAL_GetTick>
 800a336:	4602      	mov	r2, r0
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d302      	bcc.n	800a348 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d122      	bne.n	800a38e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	699a      	ldr	r2, [r3, #24]
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	4013      	ands	r3, r2
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	429a      	cmp	r2, r3
 800a356:	bf0c      	ite	eq
 800a358:	2301      	moveq	r3, #1
 800a35a:	2300      	movne	r3, #0
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	461a      	mov	r2, r3
 800a360:	79fb      	ldrb	r3, [r7, #7]
 800a362:	429a      	cmp	r2, r3
 800a364:	d113      	bne.n	800a38e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a36a:	f043 0220 	orr.w	r2, r3, #32
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2220      	movs	r2, #32
 800a376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e00f      	b.n	800a3ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	699a      	ldr	r2, [r3, #24]
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	4013      	ands	r3, r2
 800a398:	68ba      	ldr	r2, [r7, #8]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	bf0c      	ite	eq
 800a39e:	2301      	moveq	r3, #1
 800a3a0:	2300      	movne	r3, #0
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	79fb      	ldrb	r3, [r7, #7]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d0b4      	beq.n	800a316 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b084      	sub	sp, #16
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a3c2:	e033      	b.n	800a42c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	68b9      	ldr	r1, [r7, #8]
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f000 f90b 	bl	800a5e4 <I2C_IsErrorOccurred>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e031      	b.n	800a43c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3de:	d025      	beq.n	800a42c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e0:	f7fa fed0 	bl	8005184 <HAL_GetTick>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d302      	bcc.n	800a3f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d11a      	bne.n	800a42c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	f003 0302 	and.w	r3, r3, #2
 800a400:	2b02      	cmp	r3, #2
 800a402:	d013      	beq.n	800a42c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a408:	f043 0220 	orr.w	r2, r3, #32
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2220      	movs	r2, #32
 800a414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	e007      	b.n	800a43c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	f003 0302 	and.w	r3, r3, #2
 800a436:	2b02      	cmp	r3, #2
 800a438:	d1c4      	bne.n	800a3c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a450:	e02f      	b.n	800a4b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	68b9      	ldr	r1, [r7, #8]
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f000 f8c4 	bl	800a5e4 <I2C_IsErrorOccurred>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e02d      	b.n	800a4c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a466:	f7fa fe8d 	bl	8005184 <HAL_GetTick>
 800a46a:	4602      	mov	r2, r0
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	429a      	cmp	r2, r3
 800a474:	d302      	bcc.n	800a47c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d11a      	bne.n	800a4b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	f003 0320 	and.w	r3, r3, #32
 800a486:	2b20      	cmp	r3, #32
 800a488:	d013      	beq.n	800a4b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a48e:	f043 0220 	orr.w	r2, r3, #32
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2220      	movs	r2, #32
 800a49a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e007      	b.n	800a4c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	699b      	ldr	r3, [r3, #24]
 800a4b8:	f003 0320 	and.w	r3, r3, #32
 800a4bc:	2b20      	cmp	r3, #32
 800a4be:	d1c8      	bne.n	800a452 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
	...

0800a4cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a4dc:	e071      	b.n	800a5c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	68b9      	ldr	r1, [r7, #8]
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f000 f87e 	bl	800a5e4 <I2C_IsErrorOccurred>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	699b      	ldr	r3, [r3, #24]
 800a4f8:	f003 0320 	and.w	r3, r3, #32
 800a4fc:	2b20      	cmp	r3, #32
 800a4fe:	d13b      	bne.n	800a578 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800a500:	7dfb      	ldrb	r3, [r7, #23]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d138      	bne.n	800a578 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	699b      	ldr	r3, [r3, #24]
 800a50c:	f003 0304 	and.w	r3, r3, #4
 800a510:	2b04      	cmp	r3, #4
 800a512:	d105      	bne.n	800a520 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d001      	beq.n	800a520 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800a51c:	2300      	movs	r3, #0
 800a51e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	f003 0310 	and.w	r3, r3, #16
 800a52a:	2b10      	cmp	r3, #16
 800a52c:	d121      	bne.n	800a572 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2210      	movs	r2, #16
 800a534:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2204      	movs	r2, #4
 800a53a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2220      	movs	r2, #32
 800a542:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6859      	ldr	r1, [r3, #4]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	4b24      	ldr	r3, [pc, #144]	; (800a5e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800a550:	400b      	ands	r3, r1
 800a552:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2220      	movs	r2, #32
 800a558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	75fb      	strb	r3, [r7, #23]
 800a570:	e002      	b.n	800a578 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800a578:	f7fa fe04 	bl	8005184 <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	429a      	cmp	r2, r3
 800a586:	d302      	bcc.n	800a58e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d119      	bne.n	800a5c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800a58e:	7dfb      	ldrb	r3, [r7, #23]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d116      	bne.n	800a5c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	f003 0304 	and.w	r3, r3, #4
 800a59e:	2b04      	cmp	r3, #4
 800a5a0:	d00f      	beq.n	800a5c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a6:	f043 0220 	orr.w	r2, r3, #32
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2220      	movs	r2, #32
 800a5b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	f003 0304 	and.w	r3, r3, #4
 800a5cc:	2b04      	cmp	r3, #4
 800a5ce:	d002      	beq.n	800a5d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800a5d0:	7dfb      	ldrb	r3, [r7, #23]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d083      	beq.n	800a4de <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800a5d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	fe00e800 	.word	0xfe00e800

0800a5e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b08a      	sub	sp, #40	; 0x28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	f003 0310 	and.w	r3, r3, #16
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d068      	beq.n	800a6e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2210      	movs	r2, #16
 800a616:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a618:	e049      	b.n	800a6ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a620:	d045      	beq.n	800a6ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a622:	f7fa fdaf 	bl	8005184 <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d302      	bcc.n	800a638 <I2C_IsErrorOccurred+0x54>
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d13a      	bne.n	800a6ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a642:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a64a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a65a:	d121      	bne.n	800a6a0 <I2C_IsErrorOccurred+0xbc>
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a662:	d01d      	beq.n	800a6a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a664:	7cfb      	ldrb	r3, [r7, #19]
 800a666:	2b20      	cmp	r3, #32
 800a668:	d01a      	beq.n	800a6a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a678:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a67a:	f7fa fd83 	bl	8005184 <HAL_GetTick>
 800a67e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a680:	e00e      	b.n	800a6a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a682:	f7fa fd7f 	bl	8005184 <HAL_GetTick>
 800a686:	4602      	mov	r2, r0
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	2b19      	cmp	r3, #25
 800a68e:	d907      	bls.n	800a6a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a690:	6a3b      	ldr	r3, [r7, #32]
 800a692:	f043 0320 	orr.w	r3, r3, #32
 800a696:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a69e:	e006      	b.n	800a6ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	f003 0320 	and.w	r3, r3, #32
 800a6aa:	2b20      	cmp	r3, #32
 800a6ac:	d1e9      	bne.n	800a682 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	f003 0320 	and.w	r3, r3, #32
 800a6b8:	2b20      	cmp	r3, #32
 800a6ba:	d003      	beq.n	800a6c4 <I2C_IsErrorOccurred+0xe0>
 800a6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d0aa      	beq.n	800a61a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d103      	bne.n	800a6d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a6d4:	6a3b      	ldr	r3, [r7, #32]
 800a6d6:	f043 0304 	orr.w	r3, r3, #4
 800a6da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00b      	beq.n	800a70c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	f043 0301 	orr.w	r3, r3, #1
 800a6fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a704:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00b      	beq.n	800a72e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a716:	6a3b      	ldr	r3, [r7, #32]
 800a718:	f043 0308 	orr.w	r3, r3, #8
 800a71c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a726:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00b      	beq.n	800a750 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	f043 0302 	orr.w	r3, r3, #2
 800a73e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a748:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a754:	2b00      	cmp	r3, #0
 800a756:	d01c      	beq.n	800a792 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f7ff fce4 	bl	800a126 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6859      	ldr	r1, [r3, #4]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	4b0d      	ldr	r3, [pc, #52]	; (800a7a0 <I2C_IsErrorOccurred+0x1bc>)
 800a76a:	400b      	ands	r3, r1
 800a76c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a772:	6a3b      	ldr	r3, [r7, #32]
 800a774:	431a      	orrs	r2, r3
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2220      	movs	r2, #32
 800a77e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a796:	4618      	mov	r0, r3
 800a798:	3728      	adds	r7, #40	; 0x28
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	fe00e800 	.word	0xfe00e800

0800a7a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b087      	sub	sp, #28
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	607b      	str	r3, [r7, #4]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	817b      	strh	r3, [r7, #10]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a7b6:	897b      	ldrh	r3, [r7, #10]
 800a7b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a7bc:	7a7b      	ldrb	r3, [r7, #9]
 800a7be:	041b      	lsls	r3, r3, #16
 800a7c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a7c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	685a      	ldr	r2, [r3, #4]
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	0d5b      	lsrs	r3, r3, #21
 800a7de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a7e2:	4b08      	ldr	r3, [pc, #32]	; (800a804 <I2C_TransferConfig+0x60>)
 800a7e4:	430b      	orrs	r3, r1
 800a7e6:	43db      	mvns	r3, r3
 800a7e8:	ea02 0103 	and.w	r1, r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a7f6:	bf00      	nop
 800a7f8:	371c      	adds	r7, #28
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	03ff63ff 	.word	0x03ff63ff

0800a808 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a808:	b480      	push	{r7}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	460b      	mov	r3, r1
 800a812:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a814:	2300      	movs	r3, #0
 800a816:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a81c:	4a39      	ldr	r2, [pc, #228]	; (800a904 <I2C_Enable_IRQ+0xfc>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d032      	beq.n	800a888 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a826:	4a38      	ldr	r2, [pc, #224]	; (800a908 <I2C_Enable_IRQ+0x100>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d02d      	beq.n	800a888 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a830:	4a36      	ldr	r2, [pc, #216]	; (800a90c <I2C_Enable_IRQ+0x104>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d028      	beq.n	800a888 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a836:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	da03      	bge.n	800a846 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a844:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a846:	887b      	ldrh	r3, [r7, #2]
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d003      	beq.n	800a858 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a856:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a858:	887b      	ldrh	r3, [r7, #2]
 800a85a:	f003 0302 	and.w	r3, r3, #2
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a868:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a86a:	887b      	ldrh	r3, [r7, #2]
 800a86c:	2b10      	cmp	r3, #16
 800a86e:	d103      	bne.n	800a878 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a876:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a878:	887b      	ldrh	r3, [r7, #2]
 800a87a:	2b20      	cmp	r3, #32
 800a87c:	d133      	bne.n	800a8e6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f043 0320 	orr.w	r3, r3, #32
 800a884:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a886:	e02e      	b.n	800a8e6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a888:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	da03      	bge.n	800a898 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a896:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a898:	887b      	ldrh	r3, [r7, #2]
 800a89a:	f003 0301 	and.w	r3, r3, #1
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a8a8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a8aa:	887b      	ldrh	r3, [r7, #2]
 800a8ac:	f003 0302 	and.w	r3, r3, #2
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d003      	beq.n	800a8bc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a8ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a8bc:	887b      	ldrh	r3, [r7, #2]
 800a8be:	2b10      	cmp	r3, #16
 800a8c0:	d103      	bne.n	800a8ca <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a8c8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a8ca:	887b      	ldrh	r3, [r7, #2]
 800a8cc:	2b20      	cmp	r3, #32
 800a8ce:	d103      	bne.n	800a8d8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a8d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a8d8:	887b      	ldrh	r3, [r7, #2]
 800a8da:	2b40      	cmp	r3, #64	; 0x40
 800a8dc:	d103      	bne.n	800a8e6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8e4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	6819      	ldr	r1, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	430a      	orrs	r2, r1
 800a8f4:	601a      	str	r2, [r3, #0]
}
 800a8f6:	bf00      	nop
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	08009141 	.word	0x08009141
 800a908:	08009565 	.word	0x08009565
 800a90c:	08009319 	.word	0x08009319

0800a910 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	460b      	mov	r3, r1
 800a91a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a920:	887b      	ldrh	r3, [r7, #2]
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00f      	beq.n	800a94a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a930:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a93e:	2b28      	cmp	r3, #40	; 0x28
 800a940:	d003      	beq.n	800a94a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a948:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a94a:	887b      	ldrh	r3, [r7, #2]
 800a94c:	f003 0302 	and.w	r3, r3, #2
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00f      	beq.n	800a974 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a95a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a962:	b2db      	uxtb	r3, r3
 800a964:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a968:	2b28      	cmp	r3, #40	; 0x28
 800a96a:	d003      	beq.n	800a974 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a972:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a974:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	da03      	bge.n	800a984 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a982:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a984:	887b      	ldrh	r3, [r7, #2]
 800a986:	2b10      	cmp	r3, #16
 800a988:	d103      	bne.n	800a992 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a990:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a992:	887b      	ldrh	r3, [r7, #2]
 800a994:	2b20      	cmp	r3, #32
 800a996:	d103      	bne.n	800a9a0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f043 0320 	orr.w	r3, r3, #32
 800a99e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a9a0:	887b      	ldrh	r3, [r7, #2]
 800a9a2:	2b40      	cmp	r3, #64	; 0x40
 800a9a4:	d103      	bne.n	800a9ae <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9ac:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	6819      	ldr	r1, [r3, #0]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	43da      	mvns	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	400a      	ands	r2, r1
 800a9be:	601a      	str	r2, [r3, #0]
}
 800a9c0:	bf00      	nop
 800a9c2:	3714      	adds	r7, #20
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b20      	cmp	r3, #32
 800a9e0:	d138      	bne.n	800aa54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d101      	bne.n	800a9f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	e032      	b.n	800aa56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2224      	movs	r2, #36	; 0x24
 800a9fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f022 0201 	bic.w	r2, r2, #1
 800aa0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aa1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6819      	ldr	r1, [r3, #0]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f042 0201 	orr.w	r2, r2, #1
 800aa3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	e000      	b.n	800aa56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aa54:	2302      	movs	r3, #2
  }
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800aa62:	b480      	push	{r7}
 800aa64:	b085      	sub	sp, #20
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b20      	cmp	r3, #32
 800aa76:	d139      	bne.n	800aaec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d101      	bne.n	800aa86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800aa82:	2302      	movs	r3, #2
 800aa84:	e033      	b.n	800aaee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2224      	movs	r2, #36	; 0x24
 800aa92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f022 0201 	bic.w	r2, r2, #1
 800aaa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800aab4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	021b      	lsls	r3, r3, #8
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f042 0201 	orr.w	r2, r2, #1
 800aad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2220      	movs	r2, #32
 800aadc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	e000      	b.n	800aaee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800aaec:	2302      	movs	r3, #2
  }
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b084      	sub	sp, #16
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d101      	bne.n	800ab0c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e041      	b.n	800ab90 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800ab14:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f245 5255 	movw	r2, #21845	; 0x5555
 800ab1e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	6852      	ldr	r2, [r2, #4]
 800ab28:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	6892      	ldr	r2, [r2, #8]
 800ab32:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800ab34:	f7fa fb26 	bl	8005184 <HAL_GetTick>
 800ab38:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ab3a:	e00f      	b.n	800ab5c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800ab3c:	f7fa fb22 	bl	8005184 <HAL_GetTick>
 800ab40:	4602      	mov	r2, r0
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	2b31      	cmp	r3, #49	; 0x31
 800ab48:	d908      	bls.n	800ab5c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	f003 0307 	and.w	r3, r3, #7
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e019      	b.n	800ab90 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	f003 0307 	and.w	r3, r3, #7
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1e8      	bne.n	800ab3c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	691a      	ldr	r2, [r3, #16]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d005      	beq.n	800ab84 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	68d2      	ldr	r2, [r2, #12]
 800ab80:	611a      	str	r2, [r3, #16]
 800ab82:	e004      	b.n	800ab8e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ab8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e0c0      	b.n	800ad2c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d106      	bne.n	800abc4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7f9 fe0a 	bl	80047d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2203      	movs	r2, #3
 800abc8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f002 fe29 	bl	800d828 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800abd6:	2300      	movs	r3, #0
 800abd8:	73fb      	strb	r3, [r7, #15]
 800abda:	e03e      	b.n	800ac5a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800abdc:	7bfa      	ldrb	r2, [r7, #15]
 800abde:	6879      	ldr	r1, [r7, #4]
 800abe0:	4613      	mov	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	4413      	add	r3, r2
 800abe6:	00db      	lsls	r3, r3, #3
 800abe8:	440b      	add	r3, r1
 800abea:	3311      	adds	r3, #17
 800abec:	2201      	movs	r2, #1
 800abee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800abf0:	7bfa      	ldrb	r2, [r7, #15]
 800abf2:	6879      	ldr	r1, [r7, #4]
 800abf4:	4613      	mov	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4413      	add	r3, r2
 800abfa:	00db      	lsls	r3, r3, #3
 800abfc:	440b      	add	r3, r1
 800abfe:	3310      	adds	r3, #16
 800ac00:	7bfa      	ldrb	r2, [r7, #15]
 800ac02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ac04:	7bfa      	ldrb	r2, [r7, #15]
 800ac06:	6879      	ldr	r1, [r7, #4]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	440b      	add	r3, r1
 800ac12:	3313      	adds	r3, #19
 800ac14:	2200      	movs	r2, #0
 800ac16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ac18:	7bfa      	ldrb	r2, [r7, #15]
 800ac1a:	6879      	ldr	r1, [r7, #4]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	00db      	lsls	r3, r3, #3
 800ac24:	440b      	add	r3, r1
 800ac26:	3320      	adds	r3, #32
 800ac28:	2200      	movs	r2, #0
 800ac2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ac2c:	7bfa      	ldrb	r2, [r7, #15]
 800ac2e:	6879      	ldr	r1, [r7, #4]
 800ac30:	4613      	mov	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	00db      	lsls	r3, r3, #3
 800ac38:	440b      	add	r3, r1
 800ac3a:	3324      	adds	r3, #36	; 0x24
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ac40:	7bfb      	ldrb	r3, [r7, #15]
 800ac42:	6879      	ldr	r1, [r7, #4]
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	00db      	lsls	r3, r3, #3
 800ac4e:	440b      	add	r3, r1
 800ac50:	2200      	movs	r2, #0
 800ac52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
 800ac56:	3301      	adds	r3, #1
 800ac58:	73fb      	strb	r3, [r7, #15]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	791b      	ldrb	r3, [r3, #4]
 800ac5e:	7bfa      	ldrb	r2, [r7, #15]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d3bb      	bcc.n	800abdc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac64:	2300      	movs	r3, #0
 800ac66:	73fb      	strb	r3, [r7, #15]
 800ac68:	e044      	b.n	800acf4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ac6a:	7bfa      	ldrb	r2, [r7, #15]
 800ac6c:	6879      	ldr	r1, [r7, #4]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4413      	add	r3, r2
 800ac74:	00db      	lsls	r3, r3, #3
 800ac76:	440b      	add	r3, r1
 800ac78:	f203 1351 	addw	r3, r3, #337	; 0x151
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ac80:	7bfa      	ldrb	r2, [r7, #15]
 800ac82:	6879      	ldr	r1, [r7, #4]
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	440b      	add	r3, r1
 800ac8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac92:	7bfa      	ldrb	r2, [r7, #15]
 800ac94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ac96:	7bfa      	ldrb	r2, [r7, #15]
 800ac98:	6879      	ldr	r1, [r7, #4]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	4413      	add	r3, r2
 800aca0:	00db      	lsls	r3, r3, #3
 800aca2:	440b      	add	r3, r1
 800aca4:	f203 1353 	addw	r3, r3, #339	; 0x153
 800aca8:	2200      	movs	r2, #0
 800acaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800acac:	7bfa      	ldrb	r2, [r7, #15]
 800acae:	6879      	ldr	r1, [r7, #4]
 800acb0:	4613      	mov	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	00db      	lsls	r3, r3, #3
 800acb8:	440b      	add	r3, r1
 800acba:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800acbe:	2200      	movs	r2, #0
 800acc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800acc2:	7bfa      	ldrb	r2, [r7, #15]
 800acc4:	6879      	ldr	r1, [r7, #4]
 800acc6:	4613      	mov	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	00db      	lsls	r3, r3, #3
 800acce:	440b      	add	r3, r1
 800acd0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800acd8:	7bfa      	ldrb	r2, [r7, #15]
 800acda:	6879      	ldr	r1, [r7, #4]
 800acdc:	4613      	mov	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	00db      	lsls	r3, r3, #3
 800ace4:	440b      	add	r3, r1
 800ace6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800acea:	2200      	movs	r2, #0
 800acec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acee:	7bfb      	ldrb	r3, [r7, #15]
 800acf0:	3301      	adds	r3, #1
 800acf2:	73fb      	strb	r3, [r7, #15]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	791b      	ldrb	r3, [r3, #4]
 800acf8:	7bfa      	ldrb	r2, [r7, #15]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d3b5      	bcc.n	800ac6a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	3304      	adds	r3, #4
 800ad06:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ad0a:	f002 fda8 	bl	800d85e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	7a9b      	ldrb	r3, [r3, #10]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d102      	bne.n	800ad2a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 f805 	bl	800ad34 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	f043 0301 	orr.w	r3, r3, #1
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	f043 0302 	orr.w	r3, r3, #2
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d141      	bne.n	800ae1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ad96:	4b4b      	ldr	r3, [pc, #300]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ada2:	d131      	bne.n	800ae08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ada4:	4b47      	ldr	r3, [pc, #284]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ada6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adaa:	4a46      	ldr	r2, [pc, #280]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800adb4:	4b43      	ldr	r3, [pc, #268]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800adbc:	4a41      	ldr	r2, [pc, #260]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800adc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800adc4:	4b40      	ldr	r3, [pc, #256]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2232      	movs	r2, #50	; 0x32
 800adca:	fb02 f303 	mul.w	r3, r2, r3
 800adce:	4a3f      	ldr	r2, [pc, #252]	; (800aecc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800add0:	fba2 2303 	umull	r2, r3, r2, r3
 800add4:	0c9b      	lsrs	r3, r3, #18
 800add6:	3301      	adds	r3, #1
 800add8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800adda:	e002      	b.n	800ade2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	3b01      	subs	r3, #1
 800ade0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ade2:	4b38      	ldr	r3, [pc, #224]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ade4:	695b      	ldr	r3, [r3, #20]
 800ade6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adee:	d102      	bne.n	800adf6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1f2      	bne.n	800addc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800adf6:	4b33      	ldr	r3, [pc, #204]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae02:	d158      	bne.n	800aeb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e057      	b.n	800aeb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ae08:	4b2e      	ldr	r3, [pc, #184]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae0e:	4a2d      	ldr	r2, [pc, #180]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ae18:	e04d      	b.n	800aeb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae20:	d141      	bne.n	800aea6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ae22:	4b28      	ldr	r3, [pc, #160]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ae2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae2e:	d131      	bne.n	800ae94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ae30:	4b24      	ldr	r3, [pc, #144]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae36:	4a23      	ldr	r2, [pc, #140]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ae40:	4b20      	ldr	r3, [pc, #128]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ae48:	4a1e      	ldr	r2, [pc, #120]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ae50:	4b1d      	ldr	r3, [pc, #116]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2232      	movs	r2, #50	; 0x32
 800ae56:	fb02 f303 	mul.w	r3, r2, r3
 800ae5a:	4a1c      	ldr	r2, [pc, #112]	; (800aecc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ae5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae60:	0c9b      	lsrs	r3, r3, #18
 800ae62:	3301      	adds	r3, #1
 800ae64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ae66:	e002      	b.n	800ae6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ae6e:	4b15      	ldr	r3, [pc, #84]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae7a:	d102      	bne.n	800ae82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1f2      	bne.n	800ae68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ae82:	4b10      	ldr	r3, [pc, #64]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae8e:	d112      	bne.n	800aeb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e011      	b.n	800aeb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ae94:	4b0b      	ldr	r3, [pc, #44]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae9a:	4a0a      	ldr	r2, [pc, #40]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aea0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800aea4:	e007      	b.n	800aeb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800aea6:	4b07      	ldr	r3, [pc, #28]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aeae:	4a05      	ldr	r2, [pc, #20]	; (800aec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aeb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aeb4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	40007000 	.word	0x40007000
 800aec8:	20000000 	.word	0x20000000
 800aecc:	431bde83 	.word	0x431bde83

0800aed0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800aed0:	b480      	push	{r7}
 800aed2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800aed4:	4b05      	ldr	r3, [pc, #20]	; (800aeec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	4a04      	ldr	r2, [pc, #16]	; (800aeec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800aeda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aede:	6093      	str	r3, [r2, #8]
}
 800aee0:	bf00      	nop
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	40007000 	.word	0x40007000

0800aef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b088      	sub	sp, #32
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aefe:	2301      	movs	r3, #1
 800af00:	e2fe      	b.n	800b500 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d075      	beq.n	800affa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af0e:	4b97      	ldr	r3, [pc, #604]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	f003 030c 	and.w	r3, r3, #12
 800af16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800af18:	4b94      	ldr	r3, [pc, #592]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f003 0303 	and.w	r3, r3, #3
 800af20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	2b0c      	cmp	r3, #12
 800af26:	d102      	bne.n	800af2e <HAL_RCC_OscConfig+0x3e>
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	2b03      	cmp	r3, #3
 800af2c:	d002      	beq.n	800af34 <HAL_RCC_OscConfig+0x44>
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	2b08      	cmp	r3, #8
 800af32:	d10b      	bne.n	800af4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af34:	4b8d      	ldr	r3, [pc, #564]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d05b      	beq.n	800aff8 <HAL_RCC_OscConfig+0x108>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d157      	bne.n	800aff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e2d9      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af54:	d106      	bne.n	800af64 <HAL_RCC_OscConfig+0x74>
 800af56:	4b85      	ldr	r3, [pc, #532]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a84      	ldr	r2, [pc, #528]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800af5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af60:	6013      	str	r3, [r2, #0]
 800af62:	e01d      	b.n	800afa0 <HAL_RCC_OscConfig+0xb0>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af6c:	d10c      	bne.n	800af88 <HAL_RCC_OscConfig+0x98>
 800af6e:	4b7f      	ldr	r3, [pc, #508]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a7e      	ldr	r2, [pc, #504]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800af74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af78:	6013      	str	r3, [r2, #0]
 800af7a:	4b7c      	ldr	r3, [pc, #496]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a7b      	ldr	r2, [pc, #492]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800af80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af84:	6013      	str	r3, [r2, #0]
 800af86:	e00b      	b.n	800afa0 <HAL_RCC_OscConfig+0xb0>
 800af88:	4b78      	ldr	r3, [pc, #480]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a77      	ldr	r2, [pc, #476]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800af8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	4b75      	ldr	r3, [pc, #468]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a74      	ldr	r2, [pc, #464]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800af9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d013      	beq.n	800afd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afa8:	f7fa f8ec 	bl	8005184 <HAL_GetTick>
 800afac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800afae:	e008      	b.n	800afc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afb0:	f7fa f8e8 	bl	8005184 <HAL_GetTick>
 800afb4:	4602      	mov	r2, r0
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	1ad3      	subs	r3, r2, r3
 800afba:	2b64      	cmp	r3, #100	; 0x64
 800afbc:	d901      	bls.n	800afc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800afbe:	2303      	movs	r3, #3
 800afc0:	e29e      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800afc2:	4b6a      	ldr	r3, [pc, #424]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0f0      	beq.n	800afb0 <HAL_RCC_OscConfig+0xc0>
 800afce:	e014      	b.n	800affa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afd0:	f7fa f8d8 	bl	8005184 <HAL_GetTick>
 800afd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800afd6:	e008      	b.n	800afea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afd8:	f7fa f8d4 	bl	8005184 <HAL_GetTick>
 800afdc:	4602      	mov	r2, r0
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	2b64      	cmp	r3, #100	; 0x64
 800afe4:	d901      	bls.n	800afea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e28a      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800afea:	4b60      	ldr	r3, [pc, #384]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1f0      	bne.n	800afd8 <HAL_RCC_OscConfig+0xe8>
 800aff6:	e000      	b.n	800affa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 0302 	and.w	r3, r3, #2
 800b002:	2b00      	cmp	r3, #0
 800b004:	d075      	beq.n	800b0f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b006:	4b59      	ldr	r3, [pc, #356]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	f003 030c 	and.w	r3, r3, #12
 800b00e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b010:	4b56      	ldr	r3, [pc, #344]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	f003 0303 	and.w	r3, r3, #3
 800b018:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	2b0c      	cmp	r3, #12
 800b01e:	d102      	bne.n	800b026 <HAL_RCC_OscConfig+0x136>
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	2b02      	cmp	r3, #2
 800b024:	d002      	beq.n	800b02c <HAL_RCC_OscConfig+0x13c>
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	2b04      	cmp	r3, #4
 800b02a:	d11f      	bne.n	800b06c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b02c:	4b4f      	ldr	r3, [pc, #316]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b034:	2b00      	cmp	r3, #0
 800b036:	d005      	beq.n	800b044 <HAL_RCC_OscConfig+0x154>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d101      	bne.n	800b044 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	e25d      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b044:	4b49      	ldr	r3, [pc, #292]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	061b      	lsls	r3, r3, #24
 800b052:	4946      	ldr	r1, [pc, #280]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b054:	4313      	orrs	r3, r2
 800b056:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b058:	4b45      	ldr	r3, [pc, #276]	; (800b170 <HAL_RCC_OscConfig+0x280>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fa f845 	bl	80050ec <HAL_InitTick>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d043      	beq.n	800b0f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	e249      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d023      	beq.n	800b0bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b074:	4b3d      	ldr	r3, [pc, #244]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a3c      	ldr	r2, [pc, #240]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b07a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b07e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b080:	f7fa f880 	bl	8005184 <HAL_GetTick>
 800b084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b086:	e008      	b.n	800b09a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b088:	f7fa f87c 	bl	8005184 <HAL_GetTick>
 800b08c:	4602      	mov	r2, r0
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	2b02      	cmp	r3, #2
 800b094:	d901      	bls.n	800b09a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	e232      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b09a:	4b34      	ldr	r3, [pc, #208]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d0f0      	beq.n	800b088 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0a6:	4b31      	ldr	r3, [pc, #196]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	061b      	lsls	r3, r3, #24
 800b0b4:	492d      	ldr	r1, [pc, #180]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	604b      	str	r3, [r1, #4]
 800b0ba:	e01a      	b.n	800b0f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b0bc:	4b2b      	ldr	r3, [pc, #172]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a2a      	ldr	r2, [pc, #168]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b0c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0c8:	f7fa f85c 	bl	8005184 <HAL_GetTick>
 800b0cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b0ce:	e008      	b.n	800b0e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0d0:	f7fa f858 	bl	8005184 <HAL_GetTick>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d901      	bls.n	800b0e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e20e      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b0e2:	4b22      	ldr	r3, [pc, #136]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1f0      	bne.n	800b0d0 <HAL_RCC_OscConfig+0x1e0>
 800b0ee:	e000      	b.n	800b0f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b0f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0308 	and.w	r3, r3, #8
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d041      	beq.n	800b182 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	695b      	ldr	r3, [r3, #20]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d01c      	beq.n	800b140 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b106:	4b19      	ldr	r3, [pc, #100]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b10c:	4a17      	ldr	r2, [pc, #92]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b10e:	f043 0301 	orr.w	r3, r3, #1
 800b112:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b116:	f7fa f835 	bl	8005184 <HAL_GetTick>
 800b11a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b11c:	e008      	b.n	800b130 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b11e:	f7fa f831 	bl	8005184 <HAL_GetTick>
 800b122:	4602      	mov	r2, r0
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d901      	bls.n	800b130 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b12c:	2303      	movs	r3, #3
 800b12e:	e1e7      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b130:	4b0e      	ldr	r3, [pc, #56]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d0ef      	beq.n	800b11e <HAL_RCC_OscConfig+0x22e>
 800b13e:	e020      	b.n	800b182 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b140:	4b0a      	ldr	r3, [pc, #40]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b146:	4a09      	ldr	r2, [pc, #36]	; (800b16c <HAL_RCC_OscConfig+0x27c>)
 800b148:	f023 0301 	bic.w	r3, r3, #1
 800b14c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b150:	f7fa f818 	bl	8005184 <HAL_GetTick>
 800b154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b156:	e00d      	b.n	800b174 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b158:	f7fa f814 	bl	8005184 <HAL_GetTick>
 800b15c:	4602      	mov	r2, r0
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	1ad3      	subs	r3, r2, r3
 800b162:	2b02      	cmp	r3, #2
 800b164:	d906      	bls.n	800b174 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b166:	2303      	movs	r3, #3
 800b168:	e1ca      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
 800b16a:	bf00      	nop
 800b16c:	40021000 	.word	0x40021000
 800b170:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b174:	4b8c      	ldr	r3, [pc, #560]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b17a:	f003 0302 	and.w	r3, r3, #2
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1ea      	bne.n	800b158 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f003 0304 	and.w	r3, r3, #4
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f000 80a6 	beq.w	800b2dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b190:	2300      	movs	r3, #0
 800b192:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b194:	4b84      	ldr	r3, [pc, #528]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d101      	bne.n	800b1a4 <HAL_RCC_OscConfig+0x2b4>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e000      	b.n	800b1a6 <HAL_RCC_OscConfig+0x2b6>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d00d      	beq.n	800b1c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1aa:	4b7f      	ldr	r3, [pc, #508]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b1ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ae:	4a7e      	ldr	r2, [pc, #504]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b1b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1b4:	6593      	str	r3, [r2, #88]	; 0x58
 800b1b6:	4b7c      	ldr	r3, [pc, #496]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b1b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1be:	60fb      	str	r3, [r7, #12]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1c6:	4b79      	ldr	r3, [pc, #484]	; (800b3ac <HAL_RCC_OscConfig+0x4bc>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d118      	bne.n	800b204 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b1d2:	4b76      	ldr	r3, [pc, #472]	; (800b3ac <HAL_RCC_OscConfig+0x4bc>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a75      	ldr	r2, [pc, #468]	; (800b3ac <HAL_RCC_OscConfig+0x4bc>)
 800b1d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1de:	f7f9 ffd1 	bl	8005184 <HAL_GetTick>
 800b1e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1e4:	e008      	b.n	800b1f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1e6:	f7f9 ffcd 	bl	8005184 <HAL_GetTick>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	1ad3      	subs	r3, r2, r3
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d901      	bls.n	800b1f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	e183      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1f8:	4b6c      	ldr	r3, [pc, #432]	; (800b3ac <HAL_RCC_OscConfig+0x4bc>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b200:	2b00      	cmp	r3, #0
 800b202:	d0f0      	beq.n	800b1e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d108      	bne.n	800b21e <HAL_RCC_OscConfig+0x32e>
 800b20c:	4b66      	ldr	r3, [pc, #408]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b20e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b212:	4a65      	ldr	r2, [pc, #404]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b214:	f043 0301 	orr.w	r3, r3, #1
 800b218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b21c:	e024      	b.n	800b268 <HAL_RCC_OscConfig+0x378>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	2b05      	cmp	r3, #5
 800b224:	d110      	bne.n	800b248 <HAL_RCC_OscConfig+0x358>
 800b226:	4b60      	ldr	r3, [pc, #384]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b22c:	4a5e      	ldr	r2, [pc, #376]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b22e:	f043 0304 	orr.w	r3, r3, #4
 800b232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b236:	4b5c      	ldr	r3, [pc, #368]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b23c:	4a5a      	ldr	r2, [pc, #360]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b23e:	f043 0301 	orr.w	r3, r3, #1
 800b242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b246:	e00f      	b.n	800b268 <HAL_RCC_OscConfig+0x378>
 800b248:	4b57      	ldr	r3, [pc, #348]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b24a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b24e:	4a56      	ldr	r2, [pc, #344]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b250:	f023 0301 	bic.w	r3, r3, #1
 800b254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b258:	4b53      	ldr	r3, [pc, #332]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b25a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b25e:	4a52      	ldr	r2, [pc, #328]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b260:	f023 0304 	bic.w	r3, r3, #4
 800b264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d016      	beq.n	800b29e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b270:	f7f9 ff88 	bl	8005184 <HAL_GetTick>
 800b274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b276:	e00a      	b.n	800b28e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b278:	f7f9 ff84 	bl	8005184 <HAL_GetTick>
 800b27c:	4602      	mov	r2, r0
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	f241 3288 	movw	r2, #5000	; 0x1388
 800b286:	4293      	cmp	r3, r2
 800b288:	d901      	bls.n	800b28e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e138      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b28e:	4b46      	ldr	r3, [pc, #280]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b294:	f003 0302 	and.w	r3, r3, #2
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d0ed      	beq.n	800b278 <HAL_RCC_OscConfig+0x388>
 800b29c:	e015      	b.n	800b2ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b29e:	f7f9 ff71 	bl	8005184 <HAL_GetTick>
 800b2a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b2a4:	e00a      	b.n	800b2bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2a6:	f7f9 ff6d 	bl	8005184 <HAL_GetTick>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d901      	bls.n	800b2bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	e121      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b2bc:	4b3a      	ldr	r3, [pc, #232]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2c2:	f003 0302 	and.w	r3, r3, #2
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1ed      	bne.n	800b2a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b2ca:	7ffb      	ldrb	r3, [r7, #31]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d105      	bne.n	800b2dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2d0:	4b35      	ldr	r3, [pc, #212]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b2d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2d4:	4a34      	ldr	r2, [pc, #208]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b2d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 0320 	and.w	r3, r3, #32
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d03c      	beq.n	800b362 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d01c      	beq.n	800b32a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b2f0:	4b2d      	ldr	r3, [pc, #180]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b2f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2f6:	4a2c      	ldr	r2, [pc, #176]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b2f8:	f043 0301 	orr.w	r3, r3, #1
 800b2fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b300:	f7f9 ff40 	bl	8005184 <HAL_GetTick>
 800b304:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b306:	e008      	b.n	800b31a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b308:	f7f9 ff3c 	bl	8005184 <HAL_GetTick>
 800b30c:	4602      	mov	r2, r0
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	2b02      	cmp	r3, #2
 800b314:	d901      	bls.n	800b31a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b316:	2303      	movs	r3, #3
 800b318:	e0f2      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b31a:	4b23      	ldr	r3, [pc, #140]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b31c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b320:	f003 0302 	and.w	r3, r3, #2
 800b324:	2b00      	cmp	r3, #0
 800b326:	d0ef      	beq.n	800b308 <HAL_RCC_OscConfig+0x418>
 800b328:	e01b      	b.n	800b362 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b32a:	4b1f      	ldr	r3, [pc, #124]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b32c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b330:	4a1d      	ldr	r2, [pc, #116]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b332:	f023 0301 	bic.w	r3, r3, #1
 800b336:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b33a:	f7f9 ff23 	bl	8005184 <HAL_GetTick>
 800b33e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b340:	e008      	b.n	800b354 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b342:	f7f9 ff1f 	bl	8005184 <HAL_GetTick>
 800b346:	4602      	mov	r2, r0
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	1ad3      	subs	r3, r2, r3
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d901      	bls.n	800b354 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b350:	2303      	movs	r3, #3
 800b352:	e0d5      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b354:	4b14      	ldr	r3, [pc, #80]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b356:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b35a:	f003 0302 	and.w	r3, r3, #2
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1ef      	bne.n	800b342 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	69db      	ldr	r3, [r3, #28]
 800b366:	2b00      	cmp	r3, #0
 800b368:	f000 80c9 	beq.w	800b4fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b36c:	4b0e      	ldr	r3, [pc, #56]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	f003 030c 	and.w	r3, r3, #12
 800b374:	2b0c      	cmp	r3, #12
 800b376:	f000 8083 	beq.w	800b480 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	69db      	ldr	r3, [r3, #28]
 800b37e:	2b02      	cmp	r3, #2
 800b380:	d15e      	bne.n	800b440 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b382:	4b09      	ldr	r3, [pc, #36]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a08      	ldr	r2, [pc, #32]	; (800b3a8 <HAL_RCC_OscConfig+0x4b8>)
 800b388:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b38c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b38e:	f7f9 fef9 	bl	8005184 <HAL_GetTick>
 800b392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b394:	e00c      	b.n	800b3b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b396:	f7f9 fef5 	bl	8005184 <HAL_GetTick>
 800b39a:	4602      	mov	r2, r0
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d905      	bls.n	800b3b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e0ab      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
 800b3a8:	40021000 	.word	0x40021000
 800b3ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b3b0:	4b55      	ldr	r3, [pc, #340]	; (800b508 <HAL_RCC_OscConfig+0x618>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1ec      	bne.n	800b396 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b3bc:	4b52      	ldr	r3, [pc, #328]	; (800b508 <HAL_RCC_OscConfig+0x618>)
 800b3be:	68da      	ldr	r2, [r3, #12]
 800b3c0:	4b52      	ldr	r3, [pc, #328]	; (800b50c <HAL_RCC_OscConfig+0x61c>)
 800b3c2:	4013      	ands	r3, r2
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	6a11      	ldr	r1, [r2, #32]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b3cc:	3a01      	subs	r2, #1
 800b3ce:	0112      	lsls	r2, r2, #4
 800b3d0:	4311      	orrs	r1, r2
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b3d6:	0212      	lsls	r2, r2, #8
 800b3d8:	4311      	orrs	r1, r2
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b3de:	0852      	lsrs	r2, r2, #1
 800b3e0:	3a01      	subs	r2, #1
 800b3e2:	0552      	lsls	r2, r2, #21
 800b3e4:	4311      	orrs	r1, r2
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b3ea:	0852      	lsrs	r2, r2, #1
 800b3ec:	3a01      	subs	r2, #1
 800b3ee:	0652      	lsls	r2, r2, #25
 800b3f0:	4311      	orrs	r1, r2
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b3f6:	06d2      	lsls	r2, r2, #27
 800b3f8:	430a      	orrs	r2, r1
 800b3fa:	4943      	ldr	r1, [pc, #268]	; (800b508 <HAL_RCC_OscConfig+0x618>)
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b400:	4b41      	ldr	r3, [pc, #260]	; (800b508 <HAL_RCC_OscConfig+0x618>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a40      	ldr	r2, [pc, #256]	; (800b508 <HAL_RCC_OscConfig+0x618>)
 800b406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b40a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b40c:	4b3e      	ldr	r3, [pc, #248]	; (800b508 <HAL_RCC_OscConfig+0x618>)
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	4a3d      	ldr	r2, [pc, #244]	; (800b508 <HAL_RCC_OscConfig+0x618>)
 800b412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b416:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b418:	f7f9 feb4 	bl	8005184 <HAL_GetTick>
 800b41c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b41e:	e008      	b.n	800b432 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b420:	f7f9 feb0 	bl	8005184 <HAL_GetTick>
 800b424:	4602      	mov	r2, r0
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	d901      	bls.n	800b432 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b42e:	2303      	movs	r3, #3
 800b430:	e066      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b432:	4b35      	ldr	r3, [pc, #212]	; (800b508 <HAL_RCC_OscConfig+0x618>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0f0      	beq.n	800b420 <HAL_RCC_OscConfig+0x530>
 800b43e:	e05e      	b.n	800b4fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b440:	4b31      	ldr	r3, [pc, #196]	; (800b508 <HAL_RCC_OscConfig+0x618>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a30      	ldr	r2, [pc, #192]	; (800b508 <HAL_RCC_OscConfig+0x618>)
 800b446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b44a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b44c:	f7f9 fe9a 	bl	8005184 <HAL_GetTick>
 800b450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b452:	e008      	b.n	800b466 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b454:	f7f9 fe96 	bl	8005184 <HAL_GetTick>
 800b458:	4602      	mov	r2, r0
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d901      	bls.n	800b466 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800b462:	2303      	movs	r3, #3
 800b464:	e04c      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b466:	4b28      	ldr	r3, [pc, #160]	; (800b508 <HAL_RCC_OscConfig+0x618>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1f0      	bne.n	800b454 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b472:	4b25      	ldr	r3, [pc, #148]	; (800b508 <HAL_RCC_OscConfig+0x618>)
 800b474:	68da      	ldr	r2, [r3, #12]
 800b476:	4924      	ldr	r1, [pc, #144]	; (800b508 <HAL_RCC_OscConfig+0x618>)
 800b478:	4b25      	ldr	r3, [pc, #148]	; (800b510 <HAL_RCC_OscConfig+0x620>)
 800b47a:	4013      	ands	r3, r2
 800b47c:	60cb      	str	r3, [r1, #12]
 800b47e:	e03e      	b.n	800b4fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	69db      	ldr	r3, [r3, #28]
 800b484:	2b01      	cmp	r3, #1
 800b486:	d101      	bne.n	800b48c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800b488:	2301      	movs	r3, #1
 800b48a:	e039      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b48c:	4b1e      	ldr	r3, [pc, #120]	; (800b508 <HAL_RCC_OscConfig+0x618>)
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	f003 0203 	and.w	r2, r3, #3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6a1b      	ldr	r3, [r3, #32]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d12c      	bne.n	800b4fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d123      	bne.n	800b4fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d11b      	bne.n	800b4fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d113      	bne.n	800b4fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4dc:	085b      	lsrs	r3, r3, #1
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d109      	bne.n	800b4fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4f0:	085b      	lsrs	r3, r3, #1
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d001      	beq.n	800b4fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e000      	b.n	800b500 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3720      	adds	r7, #32
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	40021000 	.word	0x40021000
 800b50c:	019f800c 	.word	0x019f800c
 800b510:	feeefffc 	.word	0xfeeefffc

0800b514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b51e:	2300      	movs	r3, #0
 800b520:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d101      	bne.n	800b52c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	e11e      	b.n	800b76a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b52c:	4b91      	ldr	r3, [pc, #580]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 030f 	and.w	r3, r3, #15
 800b534:	683a      	ldr	r2, [r7, #0]
 800b536:	429a      	cmp	r2, r3
 800b538:	d910      	bls.n	800b55c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b53a:	4b8e      	ldr	r3, [pc, #568]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f023 020f 	bic.w	r2, r3, #15
 800b542:	498c      	ldr	r1, [pc, #560]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	4313      	orrs	r3, r2
 800b548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b54a:	4b8a      	ldr	r3, [pc, #552]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 030f 	and.w	r3, r3, #15
 800b552:	683a      	ldr	r2, [r7, #0]
 800b554:	429a      	cmp	r2, r3
 800b556:	d001      	beq.n	800b55c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	e106      	b.n	800b76a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0301 	and.w	r3, r3, #1
 800b564:	2b00      	cmp	r3, #0
 800b566:	d073      	beq.n	800b650 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d129      	bne.n	800b5c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b570:	4b81      	ldr	r3, [pc, #516]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e0f4      	b.n	800b76a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b580:	f000 f9ca 	bl	800b918 <RCC_GetSysClockFreqFromPLLSource>
 800b584:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	4a7c      	ldr	r2, [pc, #496]	; (800b77c <HAL_RCC_ClockConfig+0x268>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d93f      	bls.n	800b60e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b58e:	4b7a      	ldr	r3, [pc, #488]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d009      	beq.n	800b5ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d033      	beq.n	800b60e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d12f      	bne.n	800b60e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b5ae:	4b72      	ldr	r3, [pc, #456]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5b6:	4a70      	ldr	r2, [pc, #448]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b5b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b5be:	2380      	movs	r3, #128	; 0x80
 800b5c0:	617b      	str	r3, [r7, #20]
 800b5c2:	e024      	b.n	800b60e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d107      	bne.n	800b5dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b5cc:	4b6a      	ldr	r3, [pc, #424]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d109      	bne.n	800b5ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e0c6      	b.n	800b76a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5dc:	4b66      	ldr	r3, [pc, #408]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d101      	bne.n	800b5ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e0be      	b.n	800b76a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b5ec:	f000 f8ce 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800b5f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	4a61      	ldr	r2, [pc, #388]	; (800b77c <HAL_RCC_ClockConfig+0x268>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d909      	bls.n	800b60e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b5fa:	4b5f      	ldr	r3, [pc, #380]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b602:	4a5d      	ldr	r2, [pc, #372]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b608:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b60a:	2380      	movs	r3, #128	; 0x80
 800b60c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b60e:	4b5a      	ldr	r3, [pc, #360]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	f023 0203 	bic.w	r2, r3, #3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	4957      	ldr	r1, [pc, #348]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b61c:	4313      	orrs	r3, r2
 800b61e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b620:	f7f9 fdb0 	bl	8005184 <HAL_GetTick>
 800b624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b626:	e00a      	b.n	800b63e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b628:	f7f9 fdac 	bl	8005184 <HAL_GetTick>
 800b62c:	4602      	mov	r2, r0
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	f241 3288 	movw	r2, #5000	; 0x1388
 800b636:	4293      	cmp	r3, r2
 800b638:	d901      	bls.n	800b63e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e095      	b.n	800b76a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b63e:	4b4e      	ldr	r3, [pc, #312]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	f003 020c 	and.w	r2, r3, #12
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d1eb      	bne.n	800b628 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 0302 	and.w	r3, r3, #2
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d023      	beq.n	800b6a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 0304 	and.w	r3, r3, #4
 800b664:	2b00      	cmp	r3, #0
 800b666:	d005      	beq.n	800b674 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b668:	4b43      	ldr	r3, [pc, #268]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	4a42      	ldr	r2, [pc, #264]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b66e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b672:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 0308 	and.w	r3, r3, #8
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d007      	beq.n	800b690 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b680:	4b3d      	ldr	r3, [pc, #244]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b688:	4a3b      	ldr	r2, [pc, #236]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b68a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b68e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b690:	4b39      	ldr	r3, [pc, #228]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	4936      	ldr	r1, [pc, #216]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	608b      	str	r3, [r1, #8]
 800b6a2:	e008      	b.n	800b6b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	2b80      	cmp	r3, #128	; 0x80
 800b6a8:	d105      	bne.n	800b6b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b6aa:	4b33      	ldr	r3, [pc, #204]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	4a32      	ldr	r2, [pc, #200]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b6b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b6b6:	4b2f      	ldr	r3, [pc, #188]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f003 030f 	and.w	r3, r3, #15
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d21d      	bcs.n	800b700 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6c4:	4b2b      	ldr	r3, [pc, #172]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f023 020f 	bic.w	r2, r3, #15
 800b6cc:	4929      	ldr	r1, [pc, #164]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b6d4:	f7f9 fd56 	bl	8005184 <HAL_GetTick>
 800b6d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6da:	e00a      	b.n	800b6f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6dc:	f7f9 fd52 	bl	8005184 <HAL_GetTick>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d901      	bls.n	800b6f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b6ee:	2303      	movs	r3, #3
 800b6f0:	e03b      	b.n	800b76a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6f2:	4b20      	ldr	r3, [pc, #128]	; (800b774 <HAL_RCC_ClockConfig+0x260>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 030f 	and.w	r3, r3, #15
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d1ed      	bne.n	800b6dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 0304 	and.w	r3, r3, #4
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d008      	beq.n	800b71e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b70c:	4b1a      	ldr	r3, [pc, #104]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	4917      	ldr	r1, [pc, #92]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 0308 	and.w	r3, r3, #8
 800b726:	2b00      	cmp	r3, #0
 800b728:	d009      	beq.n	800b73e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b72a:	4b13      	ldr	r3, [pc, #76]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	00db      	lsls	r3, r3, #3
 800b738:	490f      	ldr	r1, [pc, #60]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b73a:	4313      	orrs	r3, r2
 800b73c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b73e:	f000 f825 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800b742:	4602      	mov	r2, r0
 800b744:	4b0c      	ldr	r3, [pc, #48]	; (800b778 <HAL_RCC_ClockConfig+0x264>)
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	091b      	lsrs	r3, r3, #4
 800b74a:	f003 030f 	and.w	r3, r3, #15
 800b74e:	490c      	ldr	r1, [pc, #48]	; (800b780 <HAL_RCC_ClockConfig+0x26c>)
 800b750:	5ccb      	ldrb	r3, [r1, r3]
 800b752:	f003 031f 	and.w	r3, r3, #31
 800b756:	fa22 f303 	lsr.w	r3, r2, r3
 800b75a:	4a0a      	ldr	r2, [pc, #40]	; (800b784 <HAL_RCC_ClockConfig+0x270>)
 800b75c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b75e:	4b0a      	ldr	r3, [pc, #40]	; (800b788 <HAL_RCC_ClockConfig+0x274>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4618      	mov	r0, r3
 800b764:	f7f9 fcc2 	bl	80050ec <HAL_InitTick>
 800b768:	4603      	mov	r3, r0
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3718      	adds	r7, #24
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	40022000 	.word	0x40022000
 800b778:	40021000 	.word	0x40021000
 800b77c:	04c4b400 	.word	0x04c4b400
 800b780:	0800e878 	.word	0x0800e878
 800b784:	20000000 	.word	0x20000000
 800b788:	20000004 	.word	0x20000004

0800b78c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b087      	sub	sp, #28
 800b790:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b792:	4b2c      	ldr	r3, [pc, #176]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	f003 030c 	and.w	r3, r3, #12
 800b79a:	2b04      	cmp	r3, #4
 800b79c:	d102      	bne.n	800b7a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b79e:	4b2a      	ldr	r3, [pc, #168]	; (800b848 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b7a0:	613b      	str	r3, [r7, #16]
 800b7a2:	e047      	b.n	800b834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b7a4:	4b27      	ldr	r3, [pc, #156]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	f003 030c 	and.w	r3, r3, #12
 800b7ac:	2b08      	cmp	r3, #8
 800b7ae:	d102      	bne.n	800b7b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b7b0:	4b26      	ldr	r3, [pc, #152]	; (800b84c <HAL_RCC_GetSysClockFreq+0xc0>)
 800b7b2:	613b      	str	r3, [r7, #16]
 800b7b4:	e03e      	b.n	800b834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b7b6:	4b23      	ldr	r3, [pc, #140]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	f003 030c 	and.w	r3, r3, #12
 800b7be:	2b0c      	cmp	r3, #12
 800b7c0:	d136      	bne.n	800b830 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b7c2:	4b20      	ldr	r3, [pc, #128]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	f003 0303 	and.w	r3, r3, #3
 800b7ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b7cc:	4b1d      	ldr	r3, [pc, #116]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	091b      	lsrs	r3, r3, #4
 800b7d2:	f003 030f 	and.w	r3, r3, #15
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2b03      	cmp	r3, #3
 800b7de:	d10c      	bne.n	800b7fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b7e0:	4a1a      	ldr	r2, [pc, #104]	; (800b84c <HAL_RCC_GetSysClockFreq+0xc0>)
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e8:	4a16      	ldr	r2, [pc, #88]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7ea:	68d2      	ldr	r2, [r2, #12]
 800b7ec:	0a12      	lsrs	r2, r2, #8
 800b7ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b7f2:	fb02 f303 	mul.w	r3, r2, r3
 800b7f6:	617b      	str	r3, [r7, #20]
      break;
 800b7f8:	e00c      	b.n	800b814 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b7fa:	4a13      	ldr	r2, [pc, #76]	; (800b848 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b802:	4a10      	ldr	r2, [pc, #64]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b804:	68d2      	ldr	r2, [r2, #12]
 800b806:	0a12      	lsrs	r2, r2, #8
 800b808:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b80c:	fb02 f303 	mul.w	r3, r2, r3
 800b810:	617b      	str	r3, [r7, #20]
      break;
 800b812:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b814:	4b0b      	ldr	r3, [pc, #44]	; (800b844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	0e5b      	lsrs	r3, r3, #25
 800b81a:	f003 0303 	and.w	r3, r3, #3
 800b81e:	3301      	adds	r3, #1
 800b820:	005b      	lsls	r3, r3, #1
 800b822:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b824:	697a      	ldr	r2, [r7, #20]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	fbb2 f3f3 	udiv	r3, r2, r3
 800b82c:	613b      	str	r3, [r7, #16]
 800b82e:	e001      	b.n	800b834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b830:	2300      	movs	r3, #0
 800b832:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b834:	693b      	ldr	r3, [r7, #16]
}
 800b836:	4618      	mov	r0, r3
 800b838:	371c      	adds	r7, #28
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	40021000 	.word	0x40021000
 800b848:	00f42400 	.word	0x00f42400
 800b84c:	007a1200 	.word	0x007a1200

0800b850 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b850:	b480      	push	{r7}
 800b852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b854:	4b03      	ldr	r3, [pc, #12]	; (800b864 <HAL_RCC_GetHCLKFreq+0x14>)
 800b856:	681b      	ldr	r3, [r3, #0]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	20000000 	.word	0x20000000

0800b868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b86c:	f7ff fff0 	bl	800b850 <HAL_RCC_GetHCLKFreq>
 800b870:	4602      	mov	r2, r0
 800b872:	4b06      	ldr	r3, [pc, #24]	; (800b88c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	0a1b      	lsrs	r3, r3, #8
 800b878:	f003 0307 	and.w	r3, r3, #7
 800b87c:	4904      	ldr	r1, [pc, #16]	; (800b890 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b87e:	5ccb      	ldrb	r3, [r1, r3]
 800b880:	f003 031f 	and.w	r3, r3, #31
 800b884:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b888:	4618      	mov	r0, r3
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	40021000 	.word	0x40021000
 800b890:	0800e888 	.word	0x0800e888

0800b894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b898:	f7ff ffda 	bl	800b850 <HAL_RCC_GetHCLKFreq>
 800b89c:	4602      	mov	r2, r0
 800b89e:	4b06      	ldr	r3, [pc, #24]	; (800b8b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	0adb      	lsrs	r3, r3, #11
 800b8a4:	f003 0307 	and.w	r3, r3, #7
 800b8a8:	4904      	ldr	r1, [pc, #16]	; (800b8bc <HAL_RCC_GetPCLK2Freq+0x28>)
 800b8aa:	5ccb      	ldrb	r3, [r1, r3]
 800b8ac:	f003 031f 	and.w	r3, r3, #31
 800b8b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	40021000 	.word	0x40021000
 800b8bc:	0800e888 	.word	0x0800e888

0800b8c0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800b8c4:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <HAL_RCC_EnableCSS+0x1c>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a04      	ldr	r2, [pc, #16]	; (800b8dc <HAL_RCC_EnableCSS+0x1c>)
 800b8ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8ce:	6013      	str	r3, [r2, #0]
}
 800b8d0:	bf00      	nop
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	40021000 	.word	0x40021000

0800b8e0 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800b8e4:	4b07      	ldr	r3, [pc, #28]	; (800b904 <HAL_RCC_NMI_IRQHandler+0x24>)
 800b8e6:	69db      	ldr	r3, [r3, #28]
 800b8e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8f0:	d105      	bne.n	800b8fe <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800b8f2:	f000 f809 	bl	800b908 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800b8f6:	4b03      	ldr	r3, [pc, #12]	; (800b904 <HAL_RCC_NMI_IRQHandler+0x24>)
 800b8f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8fc:	621a      	str	r2, [r3, #32]
  }
}
 800b8fe:	bf00      	nop
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	40021000 	.word	0x40021000

0800b908 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800b908:	b480      	push	{r7}
 800b90a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800b90c:	bf00      	nop
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
	...

0800b918 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b918:	b480      	push	{r7}
 800b91a:	b087      	sub	sp, #28
 800b91c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b91e:	4b1e      	ldr	r3, [pc, #120]	; (800b998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	f003 0303 	and.w	r3, r3, #3
 800b926:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b928:	4b1b      	ldr	r3, [pc, #108]	; (800b998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	091b      	lsrs	r3, r3, #4
 800b92e:	f003 030f 	and.w	r3, r3, #15
 800b932:	3301      	adds	r3, #1
 800b934:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	2b03      	cmp	r3, #3
 800b93a:	d10c      	bne.n	800b956 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b93c:	4a17      	ldr	r2, [pc, #92]	; (800b99c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	fbb2 f3f3 	udiv	r3, r2, r3
 800b944:	4a14      	ldr	r2, [pc, #80]	; (800b998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b946:	68d2      	ldr	r2, [r2, #12]
 800b948:	0a12      	lsrs	r2, r2, #8
 800b94a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b94e:	fb02 f303 	mul.w	r3, r2, r3
 800b952:	617b      	str	r3, [r7, #20]
    break;
 800b954:	e00c      	b.n	800b970 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b956:	4a12      	ldr	r2, [pc, #72]	; (800b9a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b95e:	4a0e      	ldr	r2, [pc, #56]	; (800b998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b960:	68d2      	ldr	r2, [r2, #12]
 800b962:	0a12      	lsrs	r2, r2, #8
 800b964:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b968:	fb02 f303 	mul.w	r3, r2, r3
 800b96c:	617b      	str	r3, [r7, #20]
    break;
 800b96e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b970:	4b09      	ldr	r3, [pc, #36]	; (800b998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	0e5b      	lsrs	r3, r3, #25
 800b976:	f003 0303 	and.w	r3, r3, #3
 800b97a:	3301      	adds	r3, #1
 800b97c:	005b      	lsls	r3, r3, #1
 800b97e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b980:	697a      	ldr	r2, [r7, #20]
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	fbb2 f3f3 	udiv	r3, r2, r3
 800b988:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b98a:	687b      	ldr	r3, [r7, #4]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	371c      	adds	r7, #28
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr
 800b998:	40021000 	.word	0x40021000
 800b99c:	007a1200 	.word	0x007a1200
 800b9a0:	00f42400 	.word	0x00f42400

0800b9a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f000 8098 	beq.w	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b9c6:	4b43      	ldr	r3, [pc, #268]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10d      	bne.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b9d2:	4b40      	ldr	r3, [pc, #256]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d6:	4a3f      	ldr	r2, [pc, #252]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9dc:	6593      	str	r3, [r2, #88]	; 0x58
 800b9de:	4b3d      	ldr	r3, [pc, #244]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9e6:	60bb      	str	r3, [r7, #8]
 800b9e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b9ee:	4b3a      	ldr	r3, [pc, #232]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a39      	ldr	r2, [pc, #228]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b9f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b9fa:	f7f9 fbc3 	bl	8005184 <HAL_GetTick>
 800b9fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba00:	e009      	b.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba02:	f7f9 fbbf 	bl	8005184 <HAL_GetTick>
 800ba06:	4602      	mov	r2, r0
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	1ad3      	subs	r3, r2, r3
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d902      	bls.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	74fb      	strb	r3, [r7, #19]
        break;
 800ba14:	e005      	b.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba16:	4b30      	ldr	r3, [pc, #192]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d0ef      	beq.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ba22:	7cfb      	ldrb	r3, [r7, #19]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d159      	bne.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ba28:	4b2a      	ldr	r3, [pc, #168]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d01e      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d019      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ba44:	4b23      	ldr	r3, [pc, #140]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ba50:	4b20      	ldr	r3, [pc, #128]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba56:	4a1f      	ldr	r2, [pc, #124]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ba60:	4b1c      	ldr	r3, [pc, #112]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba66:	4a1b      	ldr	r2, [pc, #108]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ba70:	4a18      	ldr	r2, [pc, #96]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	f003 0301 	and.w	r3, r3, #1
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d016      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba82:	f7f9 fb7f 	bl	8005184 <HAL_GetTick>
 800ba86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ba88:	e00b      	b.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba8a:	f7f9 fb7b 	bl	8005184 <HAL_GetTick>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	1ad3      	subs	r3, r2, r3
 800ba94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d902      	bls.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	74fb      	strb	r3, [r7, #19]
            break;
 800baa0:	e006      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800baa2:	4b0c      	ldr	r3, [pc, #48]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800baa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baa8:	f003 0302 	and.w	r3, r3, #2
 800baac:	2b00      	cmp	r3, #0
 800baae:	d0ec      	beq.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bab0:	7cfb      	ldrb	r3, [r7, #19]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10b      	bne.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bab6:	4b07      	ldr	r3, [pc, #28]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800babc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bac4:	4903      	ldr	r1, [pc, #12]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bac6:	4313      	orrs	r3, r2
 800bac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bacc:	e008      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bace:	7cfb      	ldrb	r3, [r7, #19]
 800bad0:	74bb      	strb	r3, [r7, #18]
 800bad2:	e005      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bad4:	40021000 	.word	0x40021000
 800bad8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800badc:	7cfb      	ldrb	r3, [r7, #19]
 800bade:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bae0:	7c7b      	ldrb	r3, [r7, #17]
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d105      	bne.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bae6:	4ba7      	ldr	r3, [pc, #668]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baea:	4aa6      	ldr	r2, [pc, #664]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800baec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800baf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f003 0301 	and.w	r3, r3, #1
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00a      	beq.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bafe:	4ba1      	ldr	r3, [pc, #644]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb04:	f023 0203 	bic.w	r2, r3, #3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	499d      	ldr	r1, [pc, #628]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f003 0302 	and.w	r3, r3, #2
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00a      	beq.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bb20:	4b98      	ldr	r3, [pc, #608]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb26:	f023 020c 	bic.w	r2, r3, #12
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	4995      	ldr	r1, [pc, #596]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb30:	4313      	orrs	r3, r2
 800bb32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f003 0304 	and.w	r3, r3, #4
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00a      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bb42:	4b90      	ldr	r3, [pc, #576]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	498c      	ldr	r1, [pc, #560]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb52:	4313      	orrs	r3, r2
 800bb54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 0308 	and.w	r3, r3, #8
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00a      	beq.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bb64:	4b87      	ldr	r3, [pc, #540]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	4984      	ldr	r1, [pc, #528]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb74:	4313      	orrs	r3, r2
 800bb76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f003 0310 	and.w	r3, r3, #16
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00a      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bb86:	4b7f      	ldr	r3, [pc, #508]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	695b      	ldr	r3, [r3, #20]
 800bb94:	497b      	ldr	r1, [pc, #492]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb96:	4313      	orrs	r3, r2
 800bb98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f003 0320 	and.w	r3, r3, #32
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00a      	beq.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bba8:	4b76      	ldr	r3, [pc, #472]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	699b      	ldr	r3, [r3, #24]
 800bbb6:	4973      	ldr	r1, [pc, #460]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00a      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bbca:	4b6e      	ldr	r3, [pc, #440]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbd0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	69db      	ldr	r3, [r3, #28]
 800bbd8:	496a      	ldr	r1, [pc, #424]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00a      	beq.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bbec:	4b65      	ldr	r3, [pc, #404]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbf2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a1b      	ldr	r3, [r3, #32]
 800bbfa:	4962      	ldr	r1, [pc, #392]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00a      	beq.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bc0e:	4b5d      	ldr	r3, [pc, #372]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1c:	4959      	ldr	r1, [pc, #356]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00a      	beq.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bc30:	4b54      	ldr	r3, [pc, #336]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc36:	f023 0203 	bic.w	r2, r3, #3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc3e:	4951      	ldr	r1, [pc, #324]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc40:	4313      	orrs	r3, r2
 800bc42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00a      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc52:	4b4c      	ldr	r3, [pc, #304]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc60:	4948      	ldr	r1, [pc, #288]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc62:	4313      	orrs	r3, r2
 800bc64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d015      	beq.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc74:	4b43      	ldr	r3, [pc, #268]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc82:	4940      	ldr	r1, [pc, #256]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc84:	4313      	orrs	r3, r2
 800bc86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc92:	d105      	bne.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc94:	4b3b      	ldr	r3, [pc, #236]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	4a3a      	ldr	r2, [pc, #232]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d015      	beq.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bcac:	4b35      	ldr	r3, [pc, #212]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcba:	4932      	ldr	r1, [pc, #200]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcca:	d105      	bne.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bccc:	4b2d      	ldr	r3, [pc, #180]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	4a2c      	ldr	r2, [pc, #176]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcd6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d015      	beq.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bce4:	4b27      	ldr	r3, [pc, #156]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf2:	4924      	ldr	r1, [pc, #144]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd02:	d105      	bne.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd04:	4b1f      	ldr	r3, [pc, #124]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	4a1e      	ldr	r2, [pc, #120]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d015      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd1c:	4b19      	ldr	r3, [pc, #100]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd2a:	4916      	ldr	r1, [pc, #88]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd3a:	d105      	bne.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd3c:	4b11      	ldr	r3, [pc, #68]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	4a10      	ldr	r2, [pc, #64]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d019      	beq.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bd54:	4b0b      	ldr	r3, [pc, #44]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd62:	4908      	ldr	r1, [pc, #32]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd64:	4313      	orrs	r3, r2
 800bd66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd72:	d109      	bne.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd74:	4b03      	ldr	r3, [pc, #12]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	4a02      	ldr	r2, [pc, #8]	; (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd7e:	60d3      	str	r3, [r2, #12]
 800bd80:	e002      	b.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bd82:	bf00      	nop
 800bd84:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d015      	beq.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bd94:	4b29      	ldr	r3, [pc, #164]	; (800be3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bda2:	4926      	ldr	r1, [pc, #152]	; (800be3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bda4:	4313      	orrs	r3, r2
 800bda6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdb2:	d105      	bne.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bdb4:	4b21      	ldr	r3, [pc, #132]	; (800be3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	4a20      	ldr	r2, [pc, #128]	; (800be3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bdba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdbe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d015      	beq.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bdcc:	4b1b      	ldr	r3, [pc, #108]	; (800be3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bdce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdd2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdda:	4918      	ldr	r1, [pc, #96]	; (800be3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bddc:	4313      	orrs	r3, r2
 800bdde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bde6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdea:	d105      	bne.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bdec:	4b13      	ldr	r3, [pc, #76]	; (800be3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bdee:	68db      	ldr	r3, [r3, #12]
 800bdf0:	4a12      	ldr	r2, [pc, #72]	; (800be3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bdf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdf6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be00:	2b00      	cmp	r3, #0
 800be02:	d015      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800be04:	4b0d      	ldr	r3, [pc, #52]	; (800be3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800be06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be12:	490a      	ldr	r1, [pc, #40]	; (800be3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800be14:	4313      	orrs	r3, r2
 800be16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be22:	d105      	bne.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be24:	4b05      	ldr	r3, [pc, #20]	; (800be3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	4a04      	ldr	r2, [pc, #16]	; (800be3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800be2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be2e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800be30:	7cbb      	ldrb	r3, [r7, #18]
}
 800be32:	4618      	mov	r0, r3
 800be34:	3718      	adds	r7, #24
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	40021000 	.word	0x40021000

0800be40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d101      	bne.n	800be52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be4e:	2301      	movs	r3, #1
 800be50:	e09d      	b.n	800bf8e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be56:	2b00      	cmp	r3, #0
 800be58:	d108      	bne.n	800be6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be62:	d009      	beq.n	800be78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	61da      	str	r2, [r3, #28]
 800be6a:	e005      	b.n	800be78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800be84:	b2db      	uxtb	r3, r3
 800be86:	2b00      	cmp	r3, #0
 800be88:	d106      	bne.n	800be98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f7f8 fbea 	bl	800466c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2202      	movs	r2, #2
 800be9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800beae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800beb8:	d902      	bls.n	800bec0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800beba:	2300      	movs	r3, #0
 800bebc:	60fb      	str	r3, [r7, #12]
 800bebe:	e002      	b.n	800bec6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bec4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bece:	d007      	beq.n	800bee0 <HAL_SPI_Init+0xa0>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bed8:	d002      	beq.n	800bee0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bef0:	431a      	orrs	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	f003 0302 	and.w	r3, r3, #2
 800befa:	431a      	orrs	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	695b      	ldr	r3, [r3, #20]
 800bf00:	f003 0301 	and.w	r3, r3, #1
 800bf04:	431a      	orrs	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf0e:	431a      	orrs	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	69db      	ldr	r3, [r3, #28]
 800bf14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf18:	431a      	orrs	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf22:	ea42 0103 	orr.w	r1, r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	430a      	orrs	r2, r1
 800bf34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	0c1b      	lsrs	r3, r3, #16
 800bf3c:	f003 0204 	and.w	r2, r3, #4
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf44:	f003 0310 	and.w	r3, r3, #16
 800bf48:	431a      	orrs	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf4e:	f003 0308 	and.w	r3, r3, #8
 800bf52:	431a      	orrs	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bf5c:	ea42 0103 	orr.w	r1, r2, r3
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	69da      	ldr	r2, [r3, #28]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2201      	movs	r2, #1
 800bf88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b082      	sub	sp, #8
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d101      	bne.n	800bfa8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e049      	b.n	800c03c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d106      	bne.n	800bfc2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f7f8 fbcb 	bl	8004758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2202      	movs	r2, #2
 800bfc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	3304      	adds	r3, #4
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	f000 fb73 	bl	800c6c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2201      	movs	r2, #1
 800bfee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2201      	movs	r2, #1
 800bff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2201      	movs	r2, #1
 800bffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2201      	movs	r2, #1
 800c006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2201      	movs	r2, #1
 800c00e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2201      	movs	r2, #1
 800c016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2201      	movs	r2, #1
 800c01e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2201      	movs	r2, #1
 800c02e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2201      	movs	r2, #1
 800c036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3708      	adds	r7, #8
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c052:	b2db      	uxtb	r3, r3
 800c054:	2b01      	cmp	r3, #1
 800c056:	d001      	beq.n	800c05c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	e054      	b.n	800c106 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2202      	movs	r2, #2
 800c060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68da      	ldr	r2, [r3, #12]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f042 0201 	orr.w	r2, r2, #1
 800c072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a26      	ldr	r2, [pc, #152]	; (800c114 <HAL_TIM_Base_Start_IT+0xd0>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d022      	beq.n	800c0c4 <HAL_TIM_Base_Start_IT+0x80>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c086:	d01d      	beq.n	800c0c4 <HAL_TIM_Base_Start_IT+0x80>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a22      	ldr	r2, [pc, #136]	; (800c118 <HAL_TIM_Base_Start_IT+0xd4>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d018      	beq.n	800c0c4 <HAL_TIM_Base_Start_IT+0x80>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a21      	ldr	r2, [pc, #132]	; (800c11c <HAL_TIM_Base_Start_IT+0xd8>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d013      	beq.n	800c0c4 <HAL_TIM_Base_Start_IT+0x80>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a1f      	ldr	r2, [pc, #124]	; (800c120 <HAL_TIM_Base_Start_IT+0xdc>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d00e      	beq.n	800c0c4 <HAL_TIM_Base_Start_IT+0x80>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a1e      	ldr	r2, [pc, #120]	; (800c124 <HAL_TIM_Base_Start_IT+0xe0>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d009      	beq.n	800c0c4 <HAL_TIM_Base_Start_IT+0x80>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a1c      	ldr	r2, [pc, #112]	; (800c128 <HAL_TIM_Base_Start_IT+0xe4>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d004      	beq.n	800c0c4 <HAL_TIM_Base_Start_IT+0x80>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a1b      	ldr	r2, [pc, #108]	; (800c12c <HAL_TIM_Base_Start_IT+0xe8>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d115      	bne.n	800c0f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	689a      	ldr	r2, [r3, #8]
 800c0ca:	4b19      	ldr	r3, [pc, #100]	; (800c130 <HAL_TIM_Base_Start_IT+0xec>)
 800c0cc:	4013      	ands	r3, r2
 800c0ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2b06      	cmp	r3, #6
 800c0d4:	d015      	beq.n	800c102 <HAL_TIM_Base_Start_IT+0xbe>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0dc:	d011      	beq.n	800c102 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f042 0201 	orr.w	r2, r2, #1
 800c0ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0ee:	e008      	b.n	800c102 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f042 0201 	orr.w	r2, r2, #1
 800c0fe:	601a      	str	r2, [r3, #0]
 800c100:	e000      	b.n	800c104 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c102:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	40012c00 	.word	0x40012c00
 800c118:	40000400 	.word	0x40000400
 800c11c:	40000800 	.word	0x40000800
 800c120:	40000c00 	.word	0x40000c00
 800c124:	40013400 	.word	0x40013400
 800c128:	40014000 	.word	0x40014000
 800c12c:	40015000 	.word	0x40015000
 800c130:	00010007 	.word	0x00010007

0800c134 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	68da      	ldr	r2, [r3, #12]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f022 0201 	bic.w	r2, r2, #1
 800c14a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	6a1a      	ldr	r2, [r3, #32]
 800c152:	f241 1311 	movw	r3, #4369	; 0x1111
 800c156:	4013      	ands	r3, r2
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10f      	bne.n	800c17c <HAL_TIM_Base_Stop_IT+0x48>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	6a1a      	ldr	r2, [r3, #32]
 800c162:	f244 4344 	movw	r3, #17476	; 0x4444
 800c166:	4013      	ands	r3, r2
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d107      	bne.n	800c17c <HAL_TIM_Base_Stop_IT+0x48>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f022 0201 	bic.w	r2, r2, #1
 800c17a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	370c      	adds	r7, #12
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr

0800c192 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b084      	sub	sp, #16
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	f003 0302 	and.w	r3, r3, #2
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d020      	beq.n	800c1f6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f003 0302 	and.w	r3, r3, #2
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d01b      	beq.n	800c1f6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f06f 0202 	mvn.w	r2, #2
 800c1c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	f003 0303 	and.w	r3, r3, #3
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d003      	beq.n	800c1e4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fa51 	bl	800c684 <HAL_TIM_IC_CaptureCallback>
 800c1e2:	e005      	b.n	800c1f0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 fa43 	bl	800c670 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 fa54 	bl	800c698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	f003 0304 	and.w	r3, r3, #4
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d020      	beq.n	800c242 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f003 0304 	and.w	r3, r3, #4
 800c206:	2b00      	cmp	r3, #0
 800c208:	d01b      	beq.n	800c242 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f06f 0204 	mvn.w	r2, #4
 800c212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2202      	movs	r2, #2
 800c218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	699b      	ldr	r3, [r3, #24]
 800c220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c224:	2b00      	cmp	r3, #0
 800c226:	d003      	beq.n	800c230 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fa2b 	bl	800c684 <HAL_TIM_IC_CaptureCallback>
 800c22e:	e005      	b.n	800c23c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 fa1d 	bl	800c670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 fa2e 	bl	800c698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	f003 0308 	and.w	r3, r3, #8
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d020      	beq.n	800c28e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f003 0308 	and.w	r3, r3, #8
 800c252:	2b00      	cmp	r3, #0
 800c254:	d01b      	beq.n	800c28e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f06f 0208 	mvn.w	r2, #8
 800c25e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2204      	movs	r2, #4
 800c264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	69db      	ldr	r3, [r3, #28]
 800c26c:	f003 0303 	and.w	r3, r3, #3
 800c270:	2b00      	cmp	r3, #0
 800c272:	d003      	beq.n	800c27c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 fa05 	bl	800c684 <HAL_TIM_IC_CaptureCallback>
 800c27a:	e005      	b.n	800c288 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 f9f7 	bl	800c670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fa08 	bl	800c698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	f003 0310 	and.w	r3, r3, #16
 800c294:	2b00      	cmp	r3, #0
 800c296:	d020      	beq.n	800c2da <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f003 0310 	and.w	r3, r3, #16
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d01b      	beq.n	800c2da <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f06f 0210 	mvn.w	r2, #16
 800c2aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2208      	movs	r2, #8
 800c2b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	69db      	ldr	r3, [r3, #28]
 800c2b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d003      	beq.n	800c2c8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 f9df 	bl	800c684 <HAL_TIM_IC_CaptureCallback>
 800c2c6:	e005      	b.n	800c2d4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 f9d1 	bl	800c670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f9e2 	bl	800c698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	f003 0301 	and.w	r3, r3, #1
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00c      	beq.n	800c2fe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f003 0301 	and.w	r3, r3, #1
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d007      	beq.n	800c2fe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f06f 0201 	mvn.w	r2, #1
 800c2f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 f9af 	bl	800c65c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c304:	2b00      	cmp	r3, #0
 800c306:	d104      	bne.n	800c312 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00c      	beq.n	800c32c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d007      	beq.n	800c32c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800c324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 fbba 	bl	800caa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00c      	beq.n	800c350 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d007      	beq.n	800c350 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fbb2 	bl	800cab4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00c      	beq.n	800c374 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c360:	2b00      	cmp	r3, #0
 800c362:	d007      	beq.n	800c374 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c36c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 f99c 	bl	800c6ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	f003 0320 	and.w	r3, r3, #32
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00c      	beq.n	800c398 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f003 0320 	and.w	r3, r3, #32
 800c384:	2b00      	cmp	r3, #0
 800c386:	d007      	beq.n	800c398 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f06f 0220 	mvn.w	r2, #32
 800c390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 fb7a 	bl	800ca8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00c      	beq.n	800c3bc <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d007      	beq.n	800c3bc <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c3b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 fb86 	bl	800cac8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00c      	beq.n	800c3e0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d007      	beq.n	800c3e0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c3d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 fb7e 	bl	800cadc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00c      	beq.n	800c404 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d007      	beq.n	800c404 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c3fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 fb76 	bl	800caf0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00c      	beq.n	800c428 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c414:	2b00      	cmp	r3, #0
 800c416:	d007      	beq.n	800c428 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fb6e 	bl	800cb04 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c428:	bf00      	nop
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c444:	2b01      	cmp	r3, #1
 800c446:	d101      	bne.n	800c44c <HAL_TIM_ConfigClockSource+0x1c>
 800c448:	2302      	movs	r3, #2
 800c44a:	e0f6      	b.n	800c63a <HAL_TIM_ConfigClockSource+0x20a>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2202      	movs	r2, #2
 800c458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c46a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c46e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	68ba      	ldr	r2, [r7, #8]
 800c47e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a6f      	ldr	r2, [pc, #444]	; (800c644 <HAL_TIM_ConfigClockSource+0x214>)
 800c486:	4293      	cmp	r3, r2
 800c488:	f000 80c1 	beq.w	800c60e <HAL_TIM_ConfigClockSource+0x1de>
 800c48c:	4a6d      	ldr	r2, [pc, #436]	; (800c644 <HAL_TIM_ConfigClockSource+0x214>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	f200 80c6 	bhi.w	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c494:	4a6c      	ldr	r2, [pc, #432]	; (800c648 <HAL_TIM_ConfigClockSource+0x218>)
 800c496:	4293      	cmp	r3, r2
 800c498:	f000 80b9 	beq.w	800c60e <HAL_TIM_ConfigClockSource+0x1de>
 800c49c:	4a6a      	ldr	r2, [pc, #424]	; (800c648 <HAL_TIM_ConfigClockSource+0x218>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	f200 80be 	bhi.w	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c4a4:	4a69      	ldr	r2, [pc, #420]	; (800c64c <HAL_TIM_ConfigClockSource+0x21c>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	f000 80b1 	beq.w	800c60e <HAL_TIM_ConfigClockSource+0x1de>
 800c4ac:	4a67      	ldr	r2, [pc, #412]	; (800c64c <HAL_TIM_ConfigClockSource+0x21c>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	f200 80b6 	bhi.w	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c4b4:	4a66      	ldr	r2, [pc, #408]	; (800c650 <HAL_TIM_ConfigClockSource+0x220>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	f000 80a9 	beq.w	800c60e <HAL_TIM_ConfigClockSource+0x1de>
 800c4bc:	4a64      	ldr	r2, [pc, #400]	; (800c650 <HAL_TIM_ConfigClockSource+0x220>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	f200 80ae 	bhi.w	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c4c4:	4a63      	ldr	r2, [pc, #396]	; (800c654 <HAL_TIM_ConfigClockSource+0x224>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	f000 80a1 	beq.w	800c60e <HAL_TIM_ConfigClockSource+0x1de>
 800c4cc:	4a61      	ldr	r2, [pc, #388]	; (800c654 <HAL_TIM_ConfigClockSource+0x224>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	f200 80a6 	bhi.w	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c4d4:	4a60      	ldr	r2, [pc, #384]	; (800c658 <HAL_TIM_ConfigClockSource+0x228>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	f000 8099 	beq.w	800c60e <HAL_TIM_ConfigClockSource+0x1de>
 800c4dc:	4a5e      	ldr	r2, [pc, #376]	; (800c658 <HAL_TIM_ConfigClockSource+0x228>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	f200 809e 	bhi.w	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c4e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c4e8:	f000 8091 	beq.w	800c60e <HAL_TIM_ConfigClockSource+0x1de>
 800c4ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c4f0:	f200 8096 	bhi.w	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c4f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4f8:	f000 8089 	beq.w	800c60e <HAL_TIM_ConfigClockSource+0x1de>
 800c4fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c500:	f200 808e 	bhi.w	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c508:	d03e      	beq.n	800c588 <HAL_TIM_ConfigClockSource+0x158>
 800c50a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c50e:	f200 8087 	bhi.w	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c516:	f000 8086 	beq.w	800c626 <HAL_TIM_ConfigClockSource+0x1f6>
 800c51a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c51e:	d87f      	bhi.n	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c520:	2b70      	cmp	r3, #112	; 0x70
 800c522:	d01a      	beq.n	800c55a <HAL_TIM_ConfigClockSource+0x12a>
 800c524:	2b70      	cmp	r3, #112	; 0x70
 800c526:	d87b      	bhi.n	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c528:	2b60      	cmp	r3, #96	; 0x60
 800c52a:	d050      	beq.n	800c5ce <HAL_TIM_ConfigClockSource+0x19e>
 800c52c:	2b60      	cmp	r3, #96	; 0x60
 800c52e:	d877      	bhi.n	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c530:	2b50      	cmp	r3, #80	; 0x50
 800c532:	d03c      	beq.n	800c5ae <HAL_TIM_ConfigClockSource+0x17e>
 800c534:	2b50      	cmp	r3, #80	; 0x50
 800c536:	d873      	bhi.n	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c538:	2b40      	cmp	r3, #64	; 0x40
 800c53a:	d058      	beq.n	800c5ee <HAL_TIM_ConfigClockSource+0x1be>
 800c53c:	2b40      	cmp	r3, #64	; 0x40
 800c53e:	d86f      	bhi.n	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c540:	2b30      	cmp	r3, #48	; 0x30
 800c542:	d064      	beq.n	800c60e <HAL_TIM_ConfigClockSource+0x1de>
 800c544:	2b30      	cmp	r3, #48	; 0x30
 800c546:	d86b      	bhi.n	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c548:	2b20      	cmp	r3, #32
 800c54a:	d060      	beq.n	800c60e <HAL_TIM_ConfigClockSource+0x1de>
 800c54c:	2b20      	cmp	r3, #32
 800c54e:	d867      	bhi.n	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
 800c550:	2b00      	cmp	r3, #0
 800c552:	d05c      	beq.n	800c60e <HAL_TIM_ConfigClockSource+0x1de>
 800c554:	2b10      	cmp	r3, #16
 800c556:	d05a      	beq.n	800c60e <HAL_TIM_ConfigClockSource+0x1de>
 800c558:	e062      	b.n	800c620 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c56a:	f000 f9d9 	bl	800c920 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c57c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	609a      	str	r2, [r3, #8]
      break;
 800c586:	e04f      	b.n	800c628 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c598:	f000 f9c2 	bl	800c920 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	689a      	ldr	r2, [r3, #8]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c5aa:	609a      	str	r2, [r3, #8]
      break;
 800c5ac:	e03c      	b.n	800c628 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	f000 f934 	bl	800c828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2150      	movs	r1, #80	; 0x50
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 f98d 	bl	800c8e6 <TIM_ITRx_SetConfig>
      break;
 800c5cc:	e02c      	b.n	800c628 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c5da:	461a      	mov	r2, r3
 800c5dc:	f000 f953 	bl	800c886 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2160      	movs	r1, #96	; 0x60
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f000 f97d 	bl	800c8e6 <TIM_ITRx_SetConfig>
      break;
 800c5ec:	e01c      	b.n	800c628 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	f000 f914 	bl	800c828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2140      	movs	r1, #64	; 0x40
 800c606:	4618      	mov	r0, r3
 800c608:	f000 f96d 	bl	800c8e6 <TIM_ITRx_SetConfig>
      break;
 800c60c:	e00c      	b.n	800c628 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4619      	mov	r1, r3
 800c618:	4610      	mov	r0, r2
 800c61a:	f000 f964 	bl	800c8e6 <TIM_ITRx_SetConfig>
      break;
 800c61e:	e003      	b.n	800c628 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800c620:	2301      	movs	r3, #1
 800c622:	73fb      	strb	r3, [r7, #15]
      break;
 800c624:	e000      	b.n	800c628 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800c626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c638:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	00100070 	.word	0x00100070
 800c648:	00100060 	.word	0x00100060
 800c64c:	00100050 	.word	0x00100050
 800c650:	00100040 	.word	0x00100040
 800c654:	00100030 	.word	0x00100030
 800c658:	00100020 	.word	0x00100020

0800c65c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c664:	bf00      	nop
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c678:	bf00      	nop
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c68c:	bf00      	nop
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c6a0:	bf00      	nop
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c6b4:	bf00      	nop
 800c6b6:	370c      	adds	r7, #12
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b085      	sub	sp, #20
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4a4c      	ldr	r2, [pc, #304]	; (800c804 <TIM_Base_SetConfig+0x144>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d017      	beq.n	800c708 <TIM_Base_SetConfig+0x48>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6de:	d013      	beq.n	800c708 <TIM_Base_SetConfig+0x48>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	4a49      	ldr	r2, [pc, #292]	; (800c808 <TIM_Base_SetConfig+0x148>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d00f      	beq.n	800c708 <TIM_Base_SetConfig+0x48>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a48      	ldr	r2, [pc, #288]	; (800c80c <TIM_Base_SetConfig+0x14c>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d00b      	beq.n	800c708 <TIM_Base_SetConfig+0x48>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	4a47      	ldr	r2, [pc, #284]	; (800c810 <TIM_Base_SetConfig+0x150>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d007      	beq.n	800c708 <TIM_Base_SetConfig+0x48>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4a46      	ldr	r2, [pc, #280]	; (800c814 <TIM_Base_SetConfig+0x154>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d003      	beq.n	800c708 <TIM_Base_SetConfig+0x48>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4a45      	ldr	r2, [pc, #276]	; (800c818 <TIM_Base_SetConfig+0x158>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d108      	bne.n	800c71a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c70e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	4313      	orrs	r3, r2
 800c718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4a39      	ldr	r2, [pc, #228]	; (800c804 <TIM_Base_SetConfig+0x144>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d023      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c728:	d01f      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4a36      	ldr	r2, [pc, #216]	; (800c808 <TIM_Base_SetConfig+0x148>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d01b      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4a35      	ldr	r2, [pc, #212]	; (800c80c <TIM_Base_SetConfig+0x14c>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d017      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	4a34      	ldr	r2, [pc, #208]	; (800c810 <TIM_Base_SetConfig+0x150>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d013      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	4a33      	ldr	r2, [pc, #204]	; (800c814 <TIM_Base_SetConfig+0x154>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d00f      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	4a33      	ldr	r2, [pc, #204]	; (800c81c <TIM_Base_SetConfig+0x15c>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d00b      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	4a32      	ldr	r2, [pc, #200]	; (800c820 <TIM_Base_SetConfig+0x160>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d007      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4a31      	ldr	r2, [pc, #196]	; (800c824 <TIM_Base_SetConfig+0x164>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d003      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	4a2c      	ldr	r2, [pc, #176]	; (800c818 <TIM_Base_SetConfig+0x158>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d108      	bne.n	800c77c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	4313      	orrs	r3, r2
 800c77a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	695b      	ldr	r3, [r3, #20]
 800c786:	4313      	orrs	r3, r2
 800c788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	689a      	ldr	r2, [r3, #8]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a18      	ldr	r2, [pc, #96]	; (800c804 <TIM_Base_SetConfig+0x144>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d013      	beq.n	800c7d0 <TIM_Base_SetConfig+0x110>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a1a      	ldr	r2, [pc, #104]	; (800c814 <TIM_Base_SetConfig+0x154>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d00f      	beq.n	800c7d0 <TIM_Base_SetConfig+0x110>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a1a      	ldr	r2, [pc, #104]	; (800c81c <TIM_Base_SetConfig+0x15c>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d00b      	beq.n	800c7d0 <TIM_Base_SetConfig+0x110>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4a19      	ldr	r2, [pc, #100]	; (800c820 <TIM_Base_SetConfig+0x160>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d007      	beq.n	800c7d0 <TIM_Base_SetConfig+0x110>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a18      	ldr	r2, [pc, #96]	; (800c824 <TIM_Base_SetConfig+0x164>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d003      	beq.n	800c7d0 <TIM_Base_SetConfig+0x110>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4a13      	ldr	r2, [pc, #76]	; (800c818 <TIM_Base_SetConfig+0x158>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d103      	bne.n	800c7d8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	691a      	ldr	r2, [r3, #16]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d105      	bne.n	800c7f6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	691b      	ldr	r3, [r3, #16]
 800c7ee:	f023 0201 	bic.w	r2, r3, #1
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	611a      	str	r2, [r3, #16]
  }
}
 800c7f6:	bf00      	nop
 800c7f8:	3714      	adds	r7, #20
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	40012c00 	.word	0x40012c00
 800c808:	40000400 	.word	0x40000400
 800c80c:	40000800 	.word	0x40000800
 800c810:	40000c00 	.word	0x40000c00
 800c814:	40013400 	.word	0x40013400
 800c818:	40015000 	.word	0x40015000
 800c81c:	40014000 	.word	0x40014000
 800c820:	40014400 	.word	0x40014400
 800c824:	40014800 	.word	0x40014800

0800c828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c828:	b480      	push	{r7}
 800c82a:	b087      	sub	sp, #28
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6a1b      	ldr	r3, [r3, #32]
 800c838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	f023 0201 	bic.w	r2, r3, #1
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	699b      	ldr	r3, [r3, #24]
 800c84a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	011b      	lsls	r3, r3, #4
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	4313      	orrs	r3, r2
 800c85c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	f023 030a 	bic.w	r3, r3, #10
 800c864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c866:	697a      	ldr	r2, [r7, #20]
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	4313      	orrs	r3, r2
 800c86c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	693a      	ldr	r2, [r7, #16]
 800c872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	697a      	ldr	r2, [r7, #20]
 800c878:	621a      	str	r2, [r3, #32]
}
 800c87a:	bf00      	nop
 800c87c:	371c      	adds	r7, #28
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr

0800c886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c886:	b480      	push	{r7}
 800c888:	b087      	sub	sp, #28
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	60b9      	str	r1, [r7, #8]
 800c890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6a1b      	ldr	r3, [r3, #32]
 800c89c:	f023 0210 	bic.w	r2, r3, #16
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	699b      	ldr	r3, [r3, #24]
 800c8a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c8b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	031b      	lsls	r3, r3, #12
 800c8b6:	693a      	ldr	r2, [r7, #16]
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c8c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	011b      	lsls	r3, r3, #4
 800c8c8:	697a      	ldr	r2, [r7, #20]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	693a      	ldr	r2, [r7, #16]
 800c8d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	621a      	str	r2, [r3, #32]
}
 800c8da:	bf00      	nop
 800c8dc:	371c      	adds	r7, #28
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr

0800c8e6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c8e6:	b480      	push	{r7}
 800c8e8:	b085      	sub	sp, #20
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
 800c8ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c8fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c902:	683a      	ldr	r2, [r7, #0]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	4313      	orrs	r3, r2
 800c908:	f043 0307 	orr.w	r3, r3, #7
 800c90c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	609a      	str	r2, [r3, #8]
}
 800c914:	bf00      	nop
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c920:	b480      	push	{r7}
 800c922:	b087      	sub	sp, #28
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
 800c92c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c93a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	021a      	lsls	r2, r3, #8
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	431a      	orrs	r2, r3
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	4313      	orrs	r3, r2
 800c948:	697a      	ldr	r2, [r7, #20]
 800c94a:	4313      	orrs	r3, r2
 800c94c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	697a      	ldr	r2, [r7, #20]
 800c952:	609a      	str	r2, [r3, #8]
}
 800c954:	bf00      	nop
 800c956:	371c      	adds	r7, #28
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c970:	2b01      	cmp	r3, #1
 800c972:	d101      	bne.n	800c978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c974:	2302      	movs	r3, #2
 800c976:	e074      	b.n	800ca62 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2202      	movs	r2, #2
 800c984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a34      	ldr	r2, [pc, #208]	; (800ca70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d009      	beq.n	800c9b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a33      	ldr	r2, [pc, #204]	; (800ca74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d004      	beq.n	800c9b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a31      	ldr	r2, [pc, #196]	; (800ca78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d108      	bne.n	800c9c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c9bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c9ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a21      	ldr	r2, [pc, #132]	; (800ca70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d022      	beq.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9f8:	d01d      	beq.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a1f      	ldr	r2, [pc, #124]	; (800ca7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d018      	beq.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a1d      	ldr	r2, [pc, #116]	; (800ca80 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d013      	beq.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a1c      	ldr	r2, [pc, #112]	; (800ca84 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d00e      	beq.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a15      	ldr	r2, [pc, #84]	; (800ca74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d009      	beq.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a18      	ldr	r2, [pc, #96]	; (800ca88 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d004      	beq.n	800ca36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a11      	ldr	r2, [pc, #68]	; (800ca78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d10c      	bne.n	800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	4313      	orrs	r3, r2
 800ca46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3714      	adds	r7, #20
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	40012c00 	.word	0x40012c00
 800ca74:	40013400 	.word	0x40013400
 800ca78:	40015000 	.word	0x40015000
 800ca7c:	40000400 	.word	0x40000400
 800ca80:	40000800 	.word	0x40000800
 800ca84:	40000c00 	.word	0x40000c00
 800ca88:	40014000 	.word	0x40014000

0800ca8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca94:	bf00      	nop
 800ca96:	370c      	adds	r7, #12
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr

0800caa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800caa8:	bf00      	nop
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cabc:	bf00      	nop
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cad0:	bf00      	nop
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr

0800cadc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cae4:	bf00      	nop
 800cae6:	370c      	adds	r7, #12
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800caf8:	bf00      	nop
 800cafa:	370c      	adds	r7, #12
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr

0800cb04 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cb0c:	bf00      	nop
 800cb0e:	370c      	adds	r7, #12
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr

0800cb18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb1c:	b08c      	sub	sp, #48	; 0x30
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	689a      	ldr	r2, [r3, #8]
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	691b      	ldr	r3, [r3, #16]
 800cb30:	431a      	orrs	r2, r3
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	695b      	ldr	r3, [r3, #20]
 800cb36:	431a      	orrs	r2, r3
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	69db      	ldr	r3, [r3, #28]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	4baa      	ldr	r3, [pc, #680]	; (800cdf0 <UART_SetConfig+0x2d8>)
 800cb48:	4013      	ands	r3, r2
 800cb4a:	697a      	ldr	r2, [r7, #20]
 800cb4c:	6812      	ldr	r2, [r2, #0]
 800cb4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb50:	430b      	orrs	r3, r1
 800cb52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	68da      	ldr	r2, [r3, #12]
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	430a      	orrs	r2, r1
 800cb68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a9f      	ldr	r2, [pc, #636]	; (800cdf4 <UART_SetConfig+0x2dc>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d004      	beq.n	800cb84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	6a1b      	ldr	r3, [r3, #32]
 800cb7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb80:	4313      	orrs	r3, r2
 800cb82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800cb8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800cb92:	697a      	ldr	r2, [r7, #20]
 800cb94:	6812      	ldr	r2, [r2, #0]
 800cb96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb98:	430b      	orrs	r3, r1
 800cb9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba2:	f023 010f 	bic.w	r1, r3, #15
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	430a      	orrs	r2, r1
 800cbb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a90      	ldr	r2, [pc, #576]	; (800cdf8 <UART_SetConfig+0x2e0>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d125      	bne.n	800cc08 <UART_SetConfig+0xf0>
 800cbbc:	4b8f      	ldr	r3, [pc, #572]	; (800cdfc <UART_SetConfig+0x2e4>)
 800cbbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbc2:	f003 0303 	and.w	r3, r3, #3
 800cbc6:	2b03      	cmp	r3, #3
 800cbc8:	d81a      	bhi.n	800cc00 <UART_SetConfig+0xe8>
 800cbca:	a201      	add	r2, pc, #4	; (adr r2, 800cbd0 <UART_SetConfig+0xb8>)
 800cbcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd0:	0800cbe1 	.word	0x0800cbe1
 800cbd4:	0800cbf1 	.word	0x0800cbf1
 800cbd8:	0800cbe9 	.word	0x0800cbe9
 800cbdc:	0800cbf9 	.word	0x0800cbf9
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbe6:	e116      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cbe8:	2302      	movs	r3, #2
 800cbea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbee:	e112      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cbf0:	2304      	movs	r3, #4
 800cbf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbf6:	e10e      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cbf8:	2308      	movs	r3, #8
 800cbfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbfe:	e10a      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cc00:	2310      	movs	r3, #16
 800cc02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc06:	e106      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a7c      	ldr	r2, [pc, #496]	; (800ce00 <UART_SetConfig+0x2e8>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d138      	bne.n	800cc84 <UART_SetConfig+0x16c>
 800cc12:	4b7a      	ldr	r3, [pc, #488]	; (800cdfc <UART_SetConfig+0x2e4>)
 800cc14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc18:	f003 030c 	and.w	r3, r3, #12
 800cc1c:	2b0c      	cmp	r3, #12
 800cc1e:	d82d      	bhi.n	800cc7c <UART_SetConfig+0x164>
 800cc20:	a201      	add	r2, pc, #4	; (adr r2, 800cc28 <UART_SetConfig+0x110>)
 800cc22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc26:	bf00      	nop
 800cc28:	0800cc5d 	.word	0x0800cc5d
 800cc2c:	0800cc7d 	.word	0x0800cc7d
 800cc30:	0800cc7d 	.word	0x0800cc7d
 800cc34:	0800cc7d 	.word	0x0800cc7d
 800cc38:	0800cc6d 	.word	0x0800cc6d
 800cc3c:	0800cc7d 	.word	0x0800cc7d
 800cc40:	0800cc7d 	.word	0x0800cc7d
 800cc44:	0800cc7d 	.word	0x0800cc7d
 800cc48:	0800cc65 	.word	0x0800cc65
 800cc4c:	0800cc7d 	.word	0x0800cc7d
 800cc50:	0800cc7d 	.word	0x0800cc7d
 800cc54:	0800cc7d 	.word	0x0800cc7d
 800cc58:	0800cc75 	.word	0x0800cc75
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc62:	e0d8      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cc64:	2302      	movs	r3, #2
 800cc66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc6a:	e0d4      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cc6c:	2304      	movs	r3, #4
 800cc6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc72:	e0d0      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cc74:	2308      	movs	r3, #8
 800cc76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc7a:	e0cc      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cc7c:	2310      	movs	r3, #16
 800cc7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc82:	e0c8      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a5e      	ldr	r2, [pc, #376]	; (800ce04 <UART_SetConfig+0x2ec>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d125      	bne.n	800ccda <UART_SetConfig+0x1c2>
 800cc8e:	4b5b      	ldr	r3, [pc, #364]	; (800cdfc <UART_SetConfig+0x2e4>)
 800cc90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cc98:	2b30      	cmp	r3, #48	; 0x30
 800cc9a:	d016      	beq.n	800ccca <UART_SetConfig+0x1b2>
 800cc9c:	2b30      	cmp	r3, #48	; 0x30
 800cc9e:	d818      	bhi.n	800ccd2 <UART_SetConfig+0x1ba>
 800cca0:	2b20      	cmp	r3, #32
 800cca2:	d00a      	beq.n	800ccba <UART_SetConfig+0x1a2>
 800cca4:	2b20      	cmp	r3, #32
 800cca6:	d814      	bhi.n	800ccd2 <UART_SetConfig+0x1ba>
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d002      	beq.n	800ccb2 <UART_SetConfig+0x19a>
 800ccac:	2b10      	cmp	r3, #16
 800ccae:	d008      	beq.n	800ccc2 <UART_SetConfig+0x1aa>
 800ccb0:	e00f      	b.n	800ccd2 <UART_SetConfig+0x1ba>
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccb8:	e0ad      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800ccba:	2302      	movs	r3, #2
 800ccbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccc0:	e0a9      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800ccc2:	2304      	movs	r3, #4
 800ccc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccc8:	e0a5      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800ccca:	2308      	movs	r3, #8
 800cccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccd0:	e0a1      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800ccd2:	2310      	movs	r3, #16
 800ccd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccd8:	e09d      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4a4a      	ldr	r2, [pc, #296]	; (800ce08 <UART_SetConfig+0x2f0>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d125      	bne.n	800cd30 <UART_SetConfig+0x218>
 800cce4:	4b45      	ldr	r3, [pc, #276]	; (800cdfc <UART_SetConfig+0x2e4>)
 800cce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ccee:	2bc0      	cmp	r3, #192	; 0xc0
 800ccf0:	d016      	beq.n	800cd20 <UART_SetConfig+0x208>
 800ccf2:	2bc0      	cmp	r3, #192	; 0xc0
 800ccf4:	d818      	bhi.n	800cd28 <UART_SetConfig+0x210>
 800ccf6:	2b80      	cmp	r3, #128	; 0x80
 800ccf8:	d00a      	beq.n	800cd10 <UART_SetConfig+0x1f8>
 800ccfa:	2b80      	cmp	r3, #128	; 0x80
 800ccfc:	d814      	bhi.n	800cd28 <UART_SetConfig+0x210>
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d002      	beq.n	800cd08 <UART_SetConfig+0x1f0>
 800cd02:	2b40      	cmp	r3, #64	; 0x40
 800cd04:	d008      	beq.n	800cd18 <UART_SetConfig+0x200>
 800cd06:	e00f      	b.n	800cd28 <UART_SetConfig+0x210>
 800cd08:	2300      	movs	r3, #0
 800cd0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd0e:	e082      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cd10:	2302      	movs	r3, #2
 800cd12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd16:	e07e      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cd18:	2304      	movs	r3, #4
 800cd1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd1e:	e07a      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cd20:	2308      	movs	r3, #8
 800cd22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd26:	e076      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cd28:	2310      	movs	r3, #16
 800cd2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd2e:	e072      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a35      	ldr	r2, [pc, #212]	; (800ce0c <UART_SetConfig+0x2f4>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d12a      	bne.n	800cd90 <UART_SetConfig+0x278>
 800cd3a:	4b30      	ldr	r3, [pc, #192]	; (800cdfc <UART_SetConfig+0x2e4>)
 800cd3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd48:	d01a      	beq.n	800cd80 <UART_SetConfig+0x268>
 800cd4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd4e:	d81b      	bhi.n	800cd88 <UART_SetConfig+0x270>
 800cd50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd54:	d00c      	beq.n	800cd70 <UART_SetConfig+0x258>
 800cd56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd5a:	d815      	bhi.n	800cd88 <UART_SetConfig+0x270>
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d003      	beq.n	800cd68 <UART_SetConfig+0x250>
 800cd60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd64:	d008      	beq.n	800cd78 <UART_SetConfig+0x260>
 800cd66:	e00f      	b.n	800cd88 <UART_SetConfig+0x270>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd6e:	e052      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cd70:	2302      	movs	r3, #2
 800cd72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd76:	e04e      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cd78:	2304      	movs	r3, #4
 800cd7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd7e:	e04a      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cd80:	2308      	movs	r3, #8
 800cd82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd86:	e046      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cd88:	2310      	movs	r3, #16
 800cd8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd8e:	e042      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a17      	ldr	r2, [pc, #92]	; (800cdf4 <UART_SetConfig+0x2dc>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d13a      	bne.n	800ce10 <UART_SetConfig+0x2f8>
 800cd9a:	4b18      	ldr	r3, [pc, #96]	; (800cdfc <UART_SetConfig+0x2e4>)
 800cd9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cda0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cda4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cda8:	d01a      	beq.n	800cde0 <UART_SetConfig+0x2c8>
 800cdaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cdae:	d81b      	bhi.n	800cde8 <UART_SetConfig+0x2d0>
 800cdb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdb4:	d00c      	beq.n	800cdd0 <UART_SetConfig+0x2b8>
 800cdb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdba:	d815      	bhi.n	800cde8 <UART_SetConfig+0x2d0>
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d003      	beq.n	800cdc8 <UART_SetConfig+0x2b0>
 800cdc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cdc4:	d008      	beq.n	800cdd8 <UART_SetConfig+0x2c0>
 800cdc6:	e00f      	b.n	800cde8 <UART_SetConfig+0x2d0>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cdce:	e022      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cdd0:	2302      	movs	r3, #2
 800cdd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cdd6:	e01e      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cdd8:	2304      	movs	r3, #4
 800cdda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cdde:	e01a      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cde0:	2308      	movs	r3, #8
 800cde2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cde6:	e016      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cde8:	2310      	movs	r3, #16
 800cdea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cdee:	e012      	b.n	800ce16 <UART_SetConfig+0x2fe>
 800cdf0:	cfff69f3 	.word	0xcfff69f3
 800cdf4:	40008000 	.word	0x40008000
 800cdf8:	40013800 	.word	0x40013800
 800cdfc:	40021000 	.word	0x40021000
 800ce00:	40004400 	.word	0x40004400
 800ce04:	40004800 	.word	0x40004800
 800ce08:	40004c00 	.word	0x40004c00
 800ce0c:	40005000 	.word	0x40005000
 800ce10:	2310      	movs	r3, #16
 800ce12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4aae      	ldr	r2, [pc, #696]	; (800d0d4 <UART_SetConfig+0x5bc>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	f040 8097 	bne.w	800cf50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce26:	2b08      	cmp	r3, #8
 800ce28:	d823      	bhi.n	800ce72 <UART_SetConfig+0x35a>
 800ce2a:	a201      	add	r2, pc, #4	; (adr r2, 800ce30 <UART_SetConfig+0x318>)
 800ce2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce30:	0800ce55 	.word	0x0800ce55
 800ce34:	0800ce73 	.word	0x0800ce73
 800ce38:	0800ce5d 	.word	0x0800ce5d
 800ce3c:	0800ce73 	.word	0x0800ce73
 800ce40:	0800ce63 	.word	0x0800ce63
 800ce44:	0800ce73 	.word	0x0800ce73
 800ce48:	0800ce73 	.word	0x0800ce73
 800ce4c:	0800ce73 	.word	0x0800ce73
 800ce50:	0800ce6b 	.word	0x0800ce6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce54:	f7fe fd08 	bl	800b868 <HAL_RCC_GetPCLK1Freq>
 800ce58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ce5a:	e010      	b.n	800ce7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce5c:	4b9e      	ldr	r3, [pc, #632]	; (800d0d8 <UART_SetConfig+0x5c0>)
 800ce5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ce60:	e00d      	b.n	800ce7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce62:	f7fe fc93 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800ce66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ce68:	e009      	b.n	800ce7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ce70:	e005      	b.n	800ce7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ce72:	2300      	movs	r3, #0
 800ce74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ce76:	2301      	movs	r3, #1
 800ce78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ce7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f000 8130 	beq.w	800d0e6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8a:	4a94      	ldr	r2, [pc, #592]	; (800d0dc <UART_SetConfig+0x5c4>)
 800ce8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce90:	461a      	mov	r2, r3
 800ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce94:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	685a      	ldr	r2, [r3, #4]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	005b      	lsls	r3, r3, #1
 800cea2:	4413      	add	r3, r2
 800cea4:	69ba      	ldr	r2, [r7, #24]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d305      	bcc.n	800ceb6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ceb0:	69ba      	ldr	r2, [r7, #24]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d903      	bls.n	800cebe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cebc:	e113      	b.n	800d0e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec0:	2200      	movs	r2, #0
 800cec2:	60bb      	str	r3, [r7, #8]
 800cec4:	60fa      	str	r2, [r7, #12]
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceca:	4a84      	ldr	r2, [pc, #528]	; (800d0dc <UART_SetConfig+0x5c4>)
 800cecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	2200      	movs	r2, #0
 800ced4:	603b      	str	r3, [r7, #0]
 800ced6:	607a      	str	r2, [r7, #4]
 800ced8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cedc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cee0:	f7f3 f99a 	bl	8000218 <__aeabi_uldivmod>
 800cee4:	4602      	mov	r2, r0
 800cee6:	460b      	mov	r3, r1
 800cee8:	4610      	mov	r0, r2
 800ceea:	4619      	mov	r1, r3
 800ceec:	f04f 0200 	mov.w	r2, #0
 800cef0:	f04f 0300 	mov.w	r3, #0
 800cef4:	020b      	lsls	r3, r1, #8
 800cef6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cefa:	0202      	lsls	r2, r0, #8
 800cefc:	6979      	ldr	r1, [r7, #20]
 800cefe:	6849      	ldr	r1, [r1, #4]
 800cf00:	0849      	lsrs	r1, r1, #1
 800cf02:	2000      	movs	r0, #0
 800cf04:	460c      	mov	r4, r1
 800cf06:	4605      	mov	r5, r0
 800cf08:	eb12 0804 	adds.w	r8, r2, r4
 800cf0c:	eb43 0905 	adc.w	r9, r3, r5
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	2200      	movs	r2, #0
 800cf16:	469a      	mov	sl, r3
 800cf18:	4693      	mov	fp, r2
 800cf1a:	4652      	mov	r2, sl
 800cf1c:	465b      	mov	r3, fp
 800cf1e:	4640      	mov	r0, r8
 800cf20:	4649      	mov	r1, r9
 800cf22:	f7f3 f979 	bl	8000218 <__aeabi_uldivmod>
 800cf26:	4602      	mov	r2, r0
 800cf28:	460b      	mov	r3, r1
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cf2e:	6a3b      	ldr	r3, [r7, #32]
 800cf30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf34:	d308      	bcc.n	800cf48 <UART_SetConfig+0x430>
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf3c:	d204      	bcs.n	800cf48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	6a3a      	ldr	r2, [r7, #32]
 800cf44:	60da      	str	r2, [r3, #12]
 800cf46:	e0ce      	b.n	800d0e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cf4e:	e0ca      	b.n	800d0e6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	69db      	ldr	r3, [r3, #28]
 800cf54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf58:	d166      	bne.n	800d028 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800cf5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cf5e:	2b08      	cmp	r3, #8
 800cf60:	d827      	bhi.n	800cfb2 <UART_SetConfig+0x49a>
 800cf62:	a201      	add	r2, pc, #4	; (adr r2, 800cf68 <UART_SetConfig+0x450>)
 800cf64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf68:	0800cf8d 	.word	0x0800cf8d
 800cf6c:	0800cf95 	.word	0x0800cf95
 800cf70:	0800cf9d 	.word	0x0800cf9d
 800cf74:	0800cfb3 	.word	0x0800cfb3
 800cf78:	0800cfa3 	.word	0x0800cfa3
 800cf7c:	0800cfb3 	.word	0x0800cfb3
 800cf80:	0800cfb3 	.word	0x0800cfb3
 800cf84:	0800cfb3 	.word	0x0800cfb3
 800cf88:	0800cfab 	.word	0x0800cfab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf8c:	f7fe fc6c 	bl	800b868 <HAL_RCC_GetPCLK1Freq>
 800cf90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cf92:	e014      	b.n	800cfbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf94:	f7fe fc7e 	bl	800b894 <HAL_RCC_GetPCLK2Freq>
 800cf98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cf9a:	e010      	b.n	800cfbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf9c:	4b4e      	ldr	r3, [pc, #312]	; (800d0d8 <UART_SetConfig+0x5c0>)
 800cf9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cfa0:	e00d      	b.n	800cfbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cfa2:	f7fe fbf3 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800cfa6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cfa8:	e009      	b.n	800cfbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cfb0:	e005      	b.n	800cfbe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cfbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f000 8090 	beq.w	800d0e6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfca:	4a44      	ldr	r2, [pc, #272]	; (800d0dc <UART_SetConfig+0x5c4>)
 800cfcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfd8:	005a      	lsls	r2, r3, #1
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	085b      	lsrs	r3, r3, #1
 800cfe0:	441a      	add	r2, r3
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfec:	6a3b      	ldr	r3, [r7, #32]
 800cfee:	2b0f      	cmp	r3, #15
 800cff0:	d916      	bls.n	800d020 <UART_SetConfig+0x508>
 800cff2:	6a3b      	ldr	r3, [r7, #32]
 800cff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cff8:	d212      	bcs.n	800d020 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cffa:	6a3b      	ldr	r3, [r7, #32]
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	f023 030f 	bic.w	r3, r3, #15
 800d002:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d004:	6a3b      	ldr	r3, [r7, #32]
 800d006:	085b      	lsrs	r3, r3, #1
 800d008:	b29b      	uxth	r3, r3
 800d00a:	f003 0307 	and.w	r3, r3, #7
 800d00e:	b29a      	uxth	r2, r3
 800d010:	8bfb      	ldrh	r3, [r7, #30]
 800d012:	4313      	orrs	r3, r2
 800d014:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	8bfa      	ldrh	r2, [r7, #30]
 800d01c:	60da      	str	r2, [r3, #12]
 800d01e:	e062      	b.n	800d0e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d020:	2301      	movs	r3, #1
 800d022:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d026:	e05e      	b.n	800d0e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d028:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d02c:	2b08      	cmp	r3, #8
 800d02e:	d828      	bhi.n	800d082 <UART_SetConfig+0x56a>
 800d030:	a201      	add	r2, pc, #4	; (adr r2, 800d038 <UART_SetConfig+0x520>)
 800d032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d036:	bf00      	nop
 800d038:	0800d05d 	.word	0x0800d05d
 800d03c:	0800d065 	.word	0x0800d065
 800d040:	0800d06d 	.word	0x0800d06d
 800d044:	0800d083 	.word	0x0800d083
 800d048:	0800d073 	.word	0x0800d073
 800d04c:	0800d083 	.word	0x0800d083
 800d050:	0800d083 	.word	0x0800d083
 800d054:	0800d083 	.word	0x0800d083
 800d058:	0800d07b 	.word	0x0800d07b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d05c:	f7fe fc04 	bl	800b868 <HAL_RCC_GetPCLK1Freq>
 800d060:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d062:	e014      	b.n	800d08e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d064:	f7fe fc16 	bl	800b894 <HAL_RCC_GetPCLK2Freq>
 800d068:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d06a:	e010      	b.n	800d08e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d06c:	4b1a      	ldr	r3, [pc, #104]	; (800d0d8 <UART_SetConfig+0x5c0>)
 800d06e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d070:	e00d      	b.n	800d08e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d072:	f7fe fb8b 	bl	800b78c <HAL_RCC_GetSysClockFreq>
 800d076:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d078:	e009      	b.n	800d08e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d07a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d07e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d080:	e005      	b.n	800d08e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d082:	2300      	movs	r3, #0
 800d084:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d086:	2301      	movs	r3, #1
 800d088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d08c:	bf00      	nop
    }

    if (pclk != 0U)
 800d08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d090:	2b00      	cmp	r3, #0
 800d092:	d028      	beq.n	800d0e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d098:	4a10      	ldr	r2, [pc, #64]	; (800d0dc <UART_SetConfig+0x5c4>)
 800d09a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	085b      	lsrs	r3, r3, #1
 800d0ac:	441a      	add	r2, r3
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0b8:	6a3b      	ldr	r3, [r7, #32]
 800d0ba:	2b0f      	cmp	r3, #15
 800d0bc:	d910      	bls.n	800d0e0 <UART_SetConfig+0x5c8>
 800d0be:	6a3b      	ldr	r3, [r7, #32]
 800d0c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0c4:	d20c      	bcs.n	800d0e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	60da      	str	r2, [r3, #12]
 800d0d0:	e009      	b.n	800d0e6 <UART_SetConfig+0x5ce>
 800d0d2:	bf00      	nop
 800d0d4:	40008000 	.word	0x40008000
 800d0d8:	00f42400 	.word	0x00f42400
 800d0dc:	0800e8a0 	.word	0x0800e8a0
      }
      else
      {
        ret = HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	2200      	movs	r2, #0
 800d100:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d102:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800d106:	4618      	mov	r0, r3
 800d108:	3730      	adds	r7, #48	; 0x30
 800d10a:	46bd      	mov	sp, r7
 800d10c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d110 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d11c:	f003 0308 	and.w	r3, r3, #8
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00a      	beq.n	800d13a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	430a      	orrs	r2, r1
 800d138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d13e:	f003 0301 	and.w	r3, r3, #1
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00a      	beq.n	800d15c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	430a      	orrs	r2, r1
 800d15a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d160:	f003 0302 	and.w	r3, r3, #2
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00a      	beq.n	800d17e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	430a      	orrs	r2, r1
 800d17c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d182:	f003 0304 	and.w	r3, r3, #4
 800d186:	2b00      	cmp	r3, #0
 800d188:	d00a      	beq.n	800d1a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	430a      	orrs	r2, r1
 800d19e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a4:	f003 0310 	and.w	r3, r3, #16
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00a      	beq.n	800d1c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	430a      	orrs	r2, r1
 800d1c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c6:	f003 0320 	and.w	r3, r3, #32
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00a      	beq.n	800d1e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	430a      	orrs	r2, r1
 800d1e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d01a      	beq.n	800d226 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	430a      	orrs	r2, r1
 800d204:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d20a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d20e:	d10a      	bne.n	800d226 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	430a      	orrs	r2, r1
 800d224:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d22a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d00a      	beq.n	800d248 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	430a      	orrs	r2, r1
 800d246:	605a      	str	r2, [r3, #4]
  }
}
 800d248:	bf00      	nop
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b098      	sub	sp, #96	; 0x60
 800d258:	af02      	add	r7, sp, #8
 800d25a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d264:	f7f7 ff8e 	bl	8005184 <HAL_GetTick>
 800d268:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f003 0308 	and.w	r3, r3, #8
 800d274:	2b08      	cmp	r3, #8
 800d276:	d12f      	bne.n	800d2d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d278:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d280:	2200      	movs	r2, #0
 800d282:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f88e 	bl	800d3a8 <UART_WaitOnFlagUntilTimeout>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d022      	beq.n	800d2d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29a:	e853 3f00 	ldrex	r3, [r3]
 800d29e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2a6:	653b      	str	r3, [r7, #80]	; 0x50
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2b0:	647b      	str	r3, [r7, #68]	; 0x44
 800d2b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2b8:	e841 2300 	strex	r3, r2, [r1]
 800d2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1e6      	bne.n	800d292 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2220      	movs	r2, #32
 800d2c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d2d4:	2303      	movs	r3, #3
 800d2d6:	e063      	b.n	800d3a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f003 0304 	and.w	r3, r3, #4
 800d2e2:	2b04      	cmp	r3, #4
 800d2e4:	d149      	bne.n	800d37a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d2e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d2ea:	9300      	str	r3, [sp, #0]
 800d2ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 f857 	bl	800d3a8 <UART_WaitOnFlagUntilTimeout>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d03c      	beq.n	800d37a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d308:	e853 3f00 	ldrex	r3, [r3]
 800d30c:	623b      	str	r3, [r7, #32]
   return(result);
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d314:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	461a      	mov	r2, r3
 800d31c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d31e:	633b      	str	r3, [r7, #48]	; 0x30
 800d320:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d326:	e841 2300 	strex	r3, r2, [r1]
 800d32a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d1e6      	bne.n	800d300 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	3308      	adds	r3, #8
 800d338:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	e853 3f00 	ldrex	r3, [r3]
 800d340:	60fb      	str	r3, [r7, #12]
   return(result);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f023 0301 	bic.w	r3, r3, #1
 800d348:	64bb      	str	r3, [r7, #72]	; 0x48
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	3308      	adds	r3, #8
 800d350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d352:	61fa      	str	r2, [r7, #28]
 800d354:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d356:	69b9      	ldr	r1, [r7, #24]
 800d358:	69fa      	ldr	r2, [r7, #28]
 800d35a:	e841 2300 	strex	r3, r2, [r1]
 800d35e:	617b      	str	r3, [r7, #20]
   return(result);
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d1e5      	bne.n	800d332 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2220      	movs	r2, #32
 800d36a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d376:	2303      	movs	r3, #3
 800d378:	e012      	b.n	800d3a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2220      	movs	r2, #32
 800d37e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2220      	movs	r2, #32
 800d386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2200      	movs	r2, #0
 800d39a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3758      	adds	r7, #88	; 0x58
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	603b      	str	r3, [r7, #0]
 800d3b4:	4613      	mov	r3, r2
 800d3b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3b8:	e04f      	b.n	800d45a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c0:	d04b      	beq.n	800d45a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3c2:	f7f7 fedf 	bl	8005184 <HAL_GetTick>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	1ad3      	subs	r3, r2, r3
 800d3cc:	69ba      	ldr	r2, [r7, #24]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d302      	bcc.n	800d3d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d101      	bne.n	800d3dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d3d8:	2303      	movs	r3, #3
 800d3da:	e04e      	b.n	800d47a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f003 0304 	and.w	r3, r3, #4
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d037      	beq.n	800d45a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	2b80      	cmp	r3, #128	; 0x80
 800d3ee:	d034      	beq.n	800d45a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	2b40      	cmp	r3, #64	; 0x40
 800d3f4:	d031      	beq.n	800d45a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	69db      	ldr	r3, [r3, #28]
 800d3fc:	f003 0308 	and.w	r3, r3, #8
 800d400:	2b08      	cmp	r3, #8
 800d402:	d110      	bne.n	800d426 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2208      	movs	r2, #8
 800d40a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d40c:	68f8      	ldr	r0, [r7, #12]
 800d40e:	f000 f838 	bl	800d482 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2208      	movs	r2, #8
 800d416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2200      	movs	r2, #0
 800d41e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800d422:	2301      	movs	r3, #1
 800d424:	e029      	b.n	800d47a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	69db      	ldr	r3, [r3, #28]
 800d42c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d434:	d111      	bne.n	800d45a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d43e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f000 f81e 	bl	800d482 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2220      	movs	r2, #32
 800d44a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2200      	movs	r2, #0
 800d452:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d456:	2303      	movs	r3, #3
 800d458:	e00f      	b.n	800d47a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	69da      	ldr	r2, [r3, #28]
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	4013      	ands	r3, r2
 800d464:	68ba      	ldr	r2, [r7, #8]
 800d466:	429a      	cmp	r2, r3
 800d468:	bf0c      	ite	eq
 800d46a:	2301      	moveq	r3, #1
 800d46c:	2300      	movne	r3, #0
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	461a      	mov	r2, r3
 800d472:	79fb      	ldrb	r3, [r7, #7]
 800d474:	429a      	cmp	r2, r3
 800d476:	d0a0      	beq.n	800d3ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d478:	2300      	movs	r3, #0
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3710      	adds	r7, #16
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}

0800d482 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d482:	b480      	push	{r7}
 800d484:	b095      	sub	sp, #84	; 0x54
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d492:	e853 3f00 	ldrex	r3, [r3]
 800d496:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d49e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4a8:	643b      	str	r3, [r7, #64]	; 0x40
 800d4aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d4ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4b0:	e841 2300 	strex	r3, r2, [r1]
 800d4b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d1e6      	bne.n	800d48a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c4:	6a3b      	ldr	r3, [r7, #32]
 800d4c6:	e853 3f00 	ldrex	r3, [r3]
 800d4ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4d2:	f023 0301 	bic.w	r3, r3, #1
 800d4d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	3308      	adds	r3, #8
 800d4de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d4e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4e8:	e841 2300 	strex	r3, r2, [r1]
 800d4ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d1e3      	bne.n	800d4bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d118      	bne.n	800d52e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	e853 3f00 	ldrex	r3, [r3]
 800d508:	60bb      	str	r3, [r7, #8]
   return(result);
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	f023 0310 	bic.w	r3, r3, #16
 800d510:	647b      	str	r3, [r7, #68]	; 0x44
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	461a      	mov	r2, r3
 800d518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d51a:	61bb      	str	r3, [r7, #24]
 800d51c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51e:	6979      	ldr	r1, [r7, #20]
 800d520:	69ba      	ldr	r2, [r7, #24]
 800d522:	e841 2300 	strex	r3, r2, [r1]
 800d526:	613b      	str	r3, [r7, #16]
   return(result);
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1e6      	bne.n	800d4fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2220      	movs	r2, #32
 800d532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2200      	movs	r2, #0
 800d540:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d542:	bf00      	nop
 800d544:	3754      	adds	r7, #84	; 0x54
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr

0800d54e <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800d54e:	b580      	push	{r7, lr}
 800d550:	b086      	sub	sp, #24
 800d552:	af00      	add	r7, sp, #0
 800d554:	60f8      	str	r0, [r7, #12]
 800d556:	60b9      	str	r1, [r7, #8]
 800d558:	607a      	str	r2, [r7, #4]
 800d55a:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d101      	bne.n	800d566 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800d562:	2301      	movs	r3, #1
 800d564:	e058      	b.n	800d618 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d106      	bne.n	800d57e <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2200      	movs	r2, #0
 800d574:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f7f6 ffff 	bl	800457c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2224      	movs	r2, #36	; 0x24
 800d582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f022 0201 	bic.w	r2, r2, #1
 800d594:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d002      	beq.n	800d5a4 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f7ff fdb6 	bl	800d110 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f7ff fab7 	bl	800cb18 <UART_SetConfig>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d101      	bne.n	800d5b4 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	e031      	b.n	800d618 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	689a      	ldr	r2, [r3, #8]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d5c2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	689b      	ldr	r3, [r3, #8]
 800d5ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	68ba      	ldr	r2, [r7, #8]
 800d5d4:	430a      	orrs	r2, r1
 800d5d6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	055b      	lsls	r3, r3, #21
 800d5dc:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	041b      	lsls	r3, r3, #16
 800d5e2:	697a      	ldr	r2, [r7, #20]
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800d5f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	6812      	ldr	r2, [r2, #0]
 800d5fa:	6979      	ldr	r1, [r7, #20]
 800d5fc:	430b      	orrs	r3, r1
 800d5fe:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f042 0201 	orr.w	r2, r2, #1
 800d60e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f7ff fe1f 	bl	800d254 <UART_CheckIdleState>
 800d616:	4603      	mov	r3, r0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3718      	adds	r7, #24
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d620:	b480      	push	{r7}
 800d622:	b085      	sub	sp, #20
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d101      	bne.n	800d636 <HAL_UARTEx_DisableFifoMode+0x16>
 800d632:	2302      	movs	r3, #2
 800d634:	e027      	b.n	800d686 <HAL_UARTEx_DisableFifoMode+0x66>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2201      	movs	r2, #1
 800d63a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2224      	movs	r2, #36	; 0x24
 800d642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f022 0201 	bic.w	r2, r2, #1
 800d65c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d664:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	68fa      	ldr	r2, [r7, #12]
 800d672:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2220      	movs	r2, #32
 800d678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b084      	sub	sp, #16
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
 800d69a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d101      	bne.n	800d6aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d6a6:	2302      	movs	r3, #2
 800d6a8:	e02d      	b.n	800d706 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2224      	movs	r2, #36	; 0x24
 800d6b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f022 0201 	bic.w	r2, r2, #1
 800d6d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	689b      	ldr	r3, [r3, #8]
 800d6d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	683a      	ldr	r2, [r7, #0]
 800d6e2:	430a      	orrs	r2, r1
 800d6e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 f850 	bl	800d78c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	68fa      	ldr	r2, [r7, #12]
 800d6f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2220      	movs	r2, #32
 800d6f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d704:	2300      	movs	r3, #0
}
 800d706:	4618      	mov	r0, r3
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b084      	sub	sp, #16
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
 800d716:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d101      	bne.n	800d726 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d722:	2302      	movs	r3, #2
 800d724:	e02d      	b.n	800d782 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2201      	movs	r2, #1
 800d72a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2224      	movs	r2, #36	; 0x24
 800d732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f022 0201 	bic.w	r2, r2, #1
 800d74c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	689b      	ldr	r3, [r3, #8]
 800d754:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	683a      	ldr	r2, [r7, #0]
 800d75e:	430a      	orrs	r2, r1
 800d760:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 f812 	bl	800d78c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2220      	movs	r2, #32
 800d774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d780:	2300      	movs	r3, #0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
	...

0800d78c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b085      	sub	sp, #20
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d108      	bne.n	800d7ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d7ac:	e031      	b.n	800d812 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d7ae:	2308      	movs	r3, #8
 800d7b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d7b2:	2308      	movs	r3, #8
 800d7b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	0e5b      	lsrs	r3, r3, #25
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	f003 0307 	and.w	r3, r3, #7
 800d7c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	689b      	ldr	r3, [r3, #8]
 800d7cc:	0f5b      	lsrs	r3, r3, #29
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	f003 0307 	and.w	r3, r3, #7
 800d7d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7d6:	7bbb      	ldrb	r3, [r7, #14]
 800d7d8:	7b3a      	ldrb	r2, [r7, #12]
 800d7da:	4911      	ldr	r1, [pc, #68]	; (800d820 <UARTEx_SetNbDataToProcess+0x94>)
 800d7dc:	5c8a      	ldrb	r2, [r1, r2]
 800d7de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d7e2:	7b3a      	ldrb	r2, [r7, #12]
 800d7e4:	490f      	ldr	r1, [pc, #60]	; (800d824 <UARTEx_SetNbDataToProcess+0x98>)
 800d7e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7ec:	b29a      	uxth	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7f4:	7bfb      	ldrb	r3, [r7, #15]
 800d7f6:	7b7a      	ldrb	r2, [r7, #13]
 800d7f8:	4909      	ldr	r1, [pc, #36]	; (800d820 <UARTEx_SetNbDataToProcess+0x94>)
 800d7fa:	5c8a      	ldrb	r2, [r1, r2]
 800d7fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d800:	7b7a      	ldrb	r2, [r7, #13]
 800d802:	4908      	ldr	r1, [pc, #32]	; (800d824 <UARTEx_SetNbDataToProcess+0x98>)
 800d804:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d806:	fb93 f3f2 	sdiv	r3, r3, r2
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d812:	bf00      	nop
 800d814:	3714      	adds	r7, #20
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop
 800d820:	0800e8b8 	.word	0x0800e8b8
 800d824:	0800e8c0 	.word	0x0800e8c0

0800d828 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d830:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d834:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d83c:	b29a      	uxth	r2, r3
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	b29b      	uxth	r3, r3
 800d842:	43db      	mvns	r3, r3
 800d844:	b29b      	uxth	r3, r3
 800d846:	4013      	ands	r3, r2
 800d848:	b29a      	uxth	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d850:	2300      	movs	r3, #0
}
 800d852:	4618      	mov	r0, r3
 800d854:	3714      	adds	r7, #20
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr

0800d85e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d85e:	b480      	push	{r7}
 800d860:	b085      	sub	sp, #20
 800d862:	af00      	add	r7, sp, #0
 800d864:	60f8      	str	r0, [r7, #12]
 800d866:	1d3b      	adds	r3, r7, #4
 800d868:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2201      	movs	r2, #1
 800d870:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2200      	movs	r2, #0
 800d878:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2200      	movs	r2, #0
 800d880:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2200      	movs	r2, #0
 800d888:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d88c:	2300      	movs	r3, #0
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3714      	adds	r7, #20
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr
	...

0800d89c <roundf>:
 800d89c:	ee10 0a10 	vmov	r0, s0
 800d8a0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800d8a4:	3a7f      	subs	r2, #127	; 0x7f
 800d8a6:	2a16      	cmp	r2, #22
 800d8a8:	dc15      	bgt.n	800d8d6 <roundf+0x3a>
 800d8aa:	2a00      	cmp	r2, #0
 800d8ac:	da08      	bge.n	800d8c0 <roundf+0x24>
 800d8ae:	3201      	adds	r2, #1
 800d8b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d8b4:	d101      	bne.n	800d8ba <roundf+0x1e>
 800d8b6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d8ba:	ee00 3a10 	vmov	s0, r3
 800d8be:	4770      	bx	lr
 800d8c0:	4907      	ldr	r1, [pc, #28]	; (800d8e0 <roundf+0x44>)
 800d8c2:	4111      	asrs	r1, r2
 800d8c4:	4208      	tst	r0, r1
 800d8c6:	d0fa      	beq.n	800d8be <roundf+0x22>
 800d8c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d8cc:	4113      	asrs	r3, r2
 800d8ce:	4403      	add	r3, r0
 800d8d0:	ea23 0301 	bic.w	r3, r3, r1
 800d8d4:	e7f1      	b.n	800d8ba <roundf+0x1e>
 800d8d6:	2a80      	cmp	r2, #128	; 0x80
 800d8d8:	d1f1      	bne.n	800d8be <roundf+0x22>
 800d8da:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d8de:	4770      	bx	lr
 800d8e0:	007fffff 	.word	0x007fffff

0800d8e4 <atoi>:
 800d8e4:	220a      	movs	r2, #10
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	f000 b882 	b.w	800d9f0 <strtol>

0800d8ec <_strtol_l.constprop.0>:
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8f2:	d001      	beq.n	800d8f8 <_strtol_l.constprop.0+0xc>
 800d8f4:	2b24      	cmp	r3, #36	; 0x24
 800d8f6:	d906      	bls.n	800d906 <_strtol_l.constprop.0+0x1a>
 800d8f8:	f000 fac8 	bl	800de8c <__errno>
 800d8fc:	2316      	movs	r3, #22
 800d8fe:	6003      	str	r3, [r0, #0]
 800d900:	2000      	movs	r0, #0
 800d902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d906:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d9ec <_strtol_l.constprop.0+0x100>
 800d90a:	460d      	mov	r5, r1
 800d90c:	462e      	mov	r6, r5
 800d90e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d912:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d916:	f017 0708 	ands.w	r7, r7, #8
 800d91a:	d1f7      	bne.n	800d90c <_strtol_l.constprop.0+0x20>
 800d91c:	2c2d      	cmp	r4, #45	; 0x2d
 800d91e:	d132      	bne.n	800d986 <_strtol_l.constprop.0+0x9a>
 800d920:	782c      	ldrb	r4, [r5, #0]
 800d922:	2701      	movs	r7, #1
 800d924:	1cb5      	adds	r5, r6, #2
 800d926:	2b00      	cmp	r3, #0
 800d928:	d05b      	beq.n	800d9e2 <_strtol_l.constprop.0+0xf6>
 800d92a:	2b10      	cmp	r3, #16
 800d92c:	d109      	bne.n	800d942 <_strtol_l.constprop.0+0x56>
 800d92e:	2c30      	cmp	r4, #48	; 0x30
 800d930:	d107      	bne.n	800d942 <_strtol_l.constprop.0+0x56>
 800d932:	782c      	ldrb	r4, [r5, #0]
 800d934:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d938:	2c58      	cmp	r4, #88	; 0x58
 800d93a:	d14d      	bne.n	800d9d8 <_strtol_l.constprop.0+0xec>
 800d93c:	786c      	ldrb	r4, [r5, #1]
 800d93e:	2310      	movs	r3, #16
 800d940:	3502      	adds	r5, #2
 800d942:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d946:	f108 38ff 	add.w	r8, r8, #4294967295
 800d94a:	f04f 0e00 	mov.w	lr, #0
 800d94e:	fbb8 f9f3 	udiv	r9, r8, r3
 800d952:	4676      	mov	r6, lr
 800d954:	fb03 8a19 	mls	sl, r3, r9, r8
 800d958:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d95c:	f1bc 0f09 	cmp.w	ip, #9
 800d960:	d816      	bhi.n	800d990 <_strtol_l.constprop.0+0xa4>
 800d962:	4664      	mov	r4, ip
 800d964:	42a3      	cmp	r3, r4
 800d966:	dd24      	ble.n	800d9b2 <_strtol_l.constprop.0+0xc6>
 800d968:	f1be 3fff 	cmp.w	lr, #4294967295
 800d96c:	d008      	beq.n	800d980 <_strtol_l.constprop.0+0x94>
 800d96e:	45b1      	cmp	r9, r6
 800d970:	d31c      	bcc.n	800d9ac <_strtol_l.constprop.0+0xc0>
 800d972:	d101      	bne.n	800d978 <_strtol_l.constprop.0+0x8c>
 800d974:	45a2      	cmp	sl, r4
 800d976:	db19      	blt.n	800d9ac <_strtol_l.constprop.0+0xc0>
 800d978:	fb06 4603 	mla	r6, r6, r3, r4
 800d97c:	f04f 0e01 	mov.w	lr, #1
 800d980:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d984:	e7e8      	b.n	800d958 <_strtol_l.constprop.0+0x6c>
 800d986:	2c2b      	cmp	r4, #43	; 0x2b
 800d988:	bf04      	itt	eq
 800d98a:	782c      	ldrbeq	r4, [r5, #0]
 800d98c:	1cb5      	addeq	r5, r6, #2
 800d98e:	e7ca      	b.n	800d926 <_strtol_l.constprop.0+0x3a>
 800d990:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d994:	f1bc 0f19 	cmp.w	ip, #25
 800d998:	d801      	bhi.n	800d99e <_strtol_l.constprop.0+0xb2>
 800d99a:	3c37      	subs	r4, #55	; 0x37
 800d99c:	e7e2      	b.n	800d964 <_strtol_l.constprop.0+0x78>
 800d99e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d9a2:	f1bc 0f19 	cmp.w	ip, #25
 800d9a6:	d804      	bhi.n	800d9b2 <_strtol_l.constprop.0+0xc6>
 800d9a8:	3c57      	subs	r4, #87	; 0x57
 800d9aa:	e7db      	b.n	800d964 <_strtol_l.constprop.0+0x78>
 800d9ac:	f04f 3eff 	mov.w	lr, #4294967295
 800d9b0:	e7e6      	b.n	800d980 <_strtol_l.constprop.0+0x94>
 800d9b2:	f1be 3fff 	cmp.w	lr, #4294967295
 800d9b6:	d105      	bne.n	800d9c4 <_strtol_l.constprop.0+0xd8>
 800d9b8:	2322      	movs	r3, #34	; 0x22
 800d9ba:	6003      	str	r3, [r0, #0]
 800d9bc:	4646      	mov	r6, r8
 800d9be:	b942      	cbnz	r2, 800d9d2 <_strtol_l.constprop.0+0xe6>
 800d9c0:	4630      	mov	r0, r6
 800d9c2:	e79e      	b.n	800d902 <_strtol_l.constprop.0+0x16>
 800d9c4:	b107      	cbz	r7, 800d9c8 <_strtol_l.constprop.0+0xdc>
 800d9c6:	4276      	negs	r6, r6
 800d9c8:	2a00      	cmp	r2, #0
 800d9ca:	d0f9      	beq.n	800d9c0 <_strtol_l.constprop.0+0xd4>
 800d9cc:	f1be 0f00 	cmp.w	lr, #0
 800d9d0:	d000      	beq.n	800d9d4 <_strtol_l.constprop.0+0xe8>
 800d9d2:	1e69      	subs	r1, r5, #1
 800d9d4:	6011      	str	r1, [r2, #0]
 800d9d6:	e7f3      	b.n	800d9c0 <_strtol_l.constprop.0+0xd4>
 800d9d8:	2430      	movs	r4, #48	; 0x30
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d1b1      	bne.n	800d942 <_strtol_l.constprop.0+0x56>
 800d9de:	2308      	movs	r3, #8
 800d9e0:	e7af      	b.n	800d942 <_strtol_l.constprop.0+0x56>
 800d9e2:	2c30      	cmp	r4, #48	; 0x30
 800d9e4:	d0a5      	beq.n	800d932 <_strtol_l.constprop.0+0x46>
 800d9e6:	230a      	movs	r3, #10
 800d9e8:	e7ab      	b.n	800d942 <_strtol_l.constprop.0+0x56>
 800d9ea:	bf00      	nop
 800d9ec:	0800e8c9 	.word	0x0800e8c9

0800d9f0 <strtol>:
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	460a      	mov	r2, r1
 800d9f4:	4601      	mov	r1, r0
 800d9f6:	4802      	ldr	r0, [pc, #8]	; (800da00 <strtol+0x10>)
 800d9f8:	6800      	ldr	r0, [r0, #0]
 800d9fa:	f7ff bf77 	b.w	800d8ec <_strtol_l.constprop.0>
 800d9fe:	bf00      	nop
 800da00:	20000064 	.word	0x20000064

0800da04 <std>:
 800da04:	2300      	movs	r3, #0
 800da06:	b510      	push	{r4, lr}
 800da08:	4604      	mov	r4, r0
 800da0a:	e9c0 3300 	strd	r3, r3, [r0]
 800da0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da12:	6083      	str	r3, [r0, #8]
 800da14:	8181      	strh	r1, [r0, #12]
 800da16:	6643      	str	r3, [r0, #100]	; 0x64
 800da18:	81c2      	strh	r2, [r0, #14]
 800da1a:	6183      	str	r3, [r0, #24]
 800da1c:	4619      	mov	r1, r3
 800da1e:	2208      	movs	r2, #8
 800da20:	305c      	adds	r0, #92	; 0x5c
 800da22:	f000 f9e5 	bl	800ddf0 <memset>
 800da26:	4b0d      	ldr	r3, [pc, #52]	; (800da5c <std+0x58>)
 800da28:	6263      	str	r3, [r4, #36]	; 0x24
 800da2a:	4b0d      	ldr	r3, [pc, #52]	; (800da60 <std+0x5c>)
 800da2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800da2e:	4b0d      	ldr	r3, [pc, #52]	; (800da64 <std+0x60>)
 800da30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da32:	4b0d      	ldr	r3, [pc, #52]	; (800da68 <std+0x64>)
 800da34:	6323      	str	r3, [r4, #48]	; 0x30
 800da36:	4b0d      	ldr	r3, [pc, #52]	; (800da6c <std+0x68>)
 800da38:	6224      	str	r4, [r4, #32]
 800da3a:	429c      	cmp	r4, r3
 800da3c:	d006      	beq.n	800da4c <std+0x48>
 800da3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800da42:	4294      	cmp	r4, r2
 800da44:	d002      	beq.n	800da4c <std+0x48>
 800da46:	33d0      	adds	r3, #208	; 0xd0
 800da48:	429c      	cmp	r4, r3
 800da4a:	d105      	bne.n	800da58 <std+0x54>
 800da4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800da50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da54:	f000 ba44 	b.w	800dee0 <__retarget_lock_init_recursive>
 800da58:	bd10      	pop	{r4, pc}
 800da5a:	bf00      	nop
 800da5c:	0800dc41 	.word	0x0800dc41
 800da60:	0800dc63 	.word	0x0800dc63
 800da64:	0800dc9b 	.word	0x0800dc9b
 800da68:	0800dcbf 	.word	0x0800dcbf
 800da6c:	20000ce4 	.word	0x20000ce4

0800da70 <stdio_exit_handler>:
 800da70:	4a02      	ldr	r2, [pc, #8]	; (800da7c <stdio_exit_handler+0xc>)
 800da72:	4903      	ldr	r1, [pc, #12]	; (800da80 <stdio_exit_handler+0x10>)
 800da74:	4803      	ldr	r0, [pc, #12]	; (800da84 <stdio_exit_handler+0x14>)
 800da76:	f000 b869 	b.w	800db4c <_fwalk_sglue>
 800da7a:	bf00      	nop
 800da7c:	2000000c 	.word	0x2000000c
 800da80:	0800e201 	.word	0x0800e201
 800da84:	20000018 	.word	0x20000018

0800da88 <cleanup_stdio>:
 800da88:	6841      	ldr	r1, [r0, #4]
 800da8a:	4b0c      	ldr	r3, [pc, #48]	; (800dabc <cleanup_stdio+0x34>)
 800da8c:	4299      	cmp	r1, r3
 800da8e:	b510      	push	{r4, lr}
 800da90:	4604      	mov	r4, r0
 800da92:	d001      	beq.n	800da98 <cleanup_stdio+0x10>
 800da94:	f000 fbb4 	bl	800e200 <_fflush_r>
 800da98:	68a1      	ldr	r1, [r4, #8]
 800da9a:	4b09      	ldr	r3, [pc, #36]	; (800dac0 <cleanup_stdio+0x38>)
 800da9c:	4299      	cmp	r1, r3
 800da9e:	d002      	beq.n	800daa6 <cleanup_stdio+0x1e>
 800daa0:	4620      	mov	r0, r4
 800daa2:	f000 fbad 	bl	800e200 <_fflush_r>
 800daa6:	68e1      	ldr	r1, [r4, #12]
 800daa8:	4b06      	ldr	r3, [pc, #24]	; (800dac4 <cleanup_stdio+0x3c>)
 800daaa:	4299      	cmp	r1, r3
 800daac:	d004      	beq.n	800dab8 <cleanup_stdio+0x30>
 800daae:	4620      	mov	r0, r4
 800dab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dab4:	f000 bba4 	b.w	800e200 <_fflush_r>
 800dab8:	bd10      	pop	{r4, pc}
 800daba:	bf00      	nop
 800dabc:	20000ce4 	.word	0x20000ce4
 800dac0:	20000d4c 	.word	0x20000d4c
 800dac4:	20000db4 	.word	0x20000db4

0800dac8 <global_stdio_init.part.0>:
 800dac8:	b510      	push	{r4, lr}
 800daca:	4b0b      	ldr	r3, [pc, #44]	; (800daf8 <global_stdio_init.part.0+0x30>)
 800dacc:	4c0b      	ldr	r4, [pc, #44]	; (800dafc <global_stdio_init.part.0+0x34>)
 800dace:	4a0c      	ldr	r2, [pc, #48]	; (800db00 <global_stdio_init.part.0+0x38>)
 800dad0:	601a      	str	r2, [r3, #0]
 800dad2:	4620      	mov	r0, r4
 800dad4:	2200      	movs	r2, #0
 800dad6:	2104      	movs	r1, #4
 800dad8:	f7ff ff94 	bl	800da04 <std>
 800dadc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dae0:	2201      	movs	r2, #1
 800dae2:	2109      	movs	r1, #9
 800dae4:	f7ff ff8e 	bl	800da04 <std>
 800dae8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800daec:	2202      	movs	r2, #2
 800daee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daf2:	2112      	movs	r1, #18
 800daf4:	f7ff bf86 	b.w	800da04 <std>
 800daf8:	20000e1c 	.word	0x20000e1c
 800dafc:	20000ce4 	.word	0x20000ce4
 800db00:	0800da71 	.word	0x0800da71

0800db04 <__sfp_lock_acquire>:
 800db04:	4801      	ldr	r0, [pc, #4]	; (800db0c <__sfp_lock_acquire+0x8>)
 800db06:	f000 b9ec 	b.w	800dee2 <__retarget_lock_acquire_recursive>
 800db0a:	bf00      	nop
 800db0c:	20000e25 	.word	0x20000e25

0800db10 <__sfp_lock_release>:
 800db10:	4801      	ldr	r0, [pc, #4]	; (800db18 <__sfp_lock_release+0x8>)
 800db12:	f000 b9e7 	b.w	800dee4 <__retarget_lock_release_recursive>
 800db16:	bf00      	nop
 800db18:	20000e25 	.word	0x20000e25

0800db1c <__sinit>:
 800db1c:	b510      	push	{r4, lr}
 800db1e:	4604      	mov	r4, r0
 800db20:	f7ff fff0 	bl	800db04 <__sfp_lock_acquire>
 800db24:	6a23      	ldr	r3, [r4, #32]
 800db26:	b11b      	cbz	r3, 800db30 <__sinit+0x14>
 800db28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db2c:	f7ff bff0 	b.w	800db10 <__sfp_lock_release>
 800db30:	4b04      	ldr	r3, [pc, #16]	; (800db44 <__sinit+0x28>)
 800db32:	6223      	str	r3, [r4, #32]
 800db34:	4b04      	ldr	r3, [pc, #16]	; (800db48 <__sinit+0x2c>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1f5      	bne.n	800db28 <__sinit+0xc>
 800db3c:	f7ff ffc4 	bl	800dac8 <global_stdio_init.part.0>
 800db40:	e7f2      	b.n	800db28 <__sinit+0xc>
 800db42:	bf00      	nop
 800db44:	0800da89 	.word	0x0800da89
 800db48:	20000e1c 	.word	0x20000e1c

0800db4c <_fwalk_sglue>:
 800db4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db50:	4607      	mov	r7, r0
 800db52:	4688      	mov	r8, r1
 800db54:	4614      	mov	r4, r2
 800db56:	2600      	movs	r6, #0
 800db58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db5c:	f1b9 0901 	subs.w	r9, r9, #1
 800db60:	d505      	bpl.n	800db6e <_fwalk_sglue+0x22>
 800db62:	6824      	ldr	r4, [r4, #0]
 800db64:	2c00      	cmp	r4, #0
 800db66:	d1f7      	bne.n	800db58 <_fwalk_sglue+0xc>
 800db68:	4630      	mov	r0, r6
 800db6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db6e:	89ab      	ldrh	r3, [r5, #12]
 800db70:	2b01      	cmp	r3, #1
 800db72:	d907      	bls.n	800db84 <_fwalk_sglue+0x38>
 800db74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db78:	3301      	adds	r3, #1
 800db7a:	d003      	beq.n	800db84 <_fwalk_sglue+0x38>
 800db7c:	4629      	mov	r1, r5
 800db7e:	4638      	mov	r0, r7
 800db80:	47c0      	blx	r8
 800db82:	4306      	orrs	r6, r0
 800db84:	3568      	adds	r5, #104	; 0x68
 800db86:	e7e9      	b.n	800db5c <_fwalk_sglue+0x10>

0800db88 <_puts_r>:
 800db88:	6a03      	ldr	r3, [r0, #32]
 800db8a:	b570      	push	{r4, r5, r6, lr}
 800db8c:	6884      	ldr	r4, [r0, #8]
 800db8e:	4605      	mov	r5, r0
 800db90:	460e      	mov	r6, r1
 800db92:	b90b      	cbnz	r3, 800db98 <_puts_r+0x10>
 800db94:	f7ff ffc2 	bl	800db1c <__sinit>
 800db98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db9a:	07db      	lsls	r3, r3, #31
 800db9c:	d405      	bmi.n	800dbaa <_puts_r+0x22>
 800db9e:	89a3      	ldrh	r3, [r4, #12]
 800dba0:	0598      	lsls	r0, r3, #22
 800dba2:	d402      	bmi.n	800dbaa <_puts_r+0x22>
 800dba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dba6:	f000 f99c 	bl	800dee2 <__retarget_lock_acquire_recursive>
 800dbaa:	89a3      	ldrh	r3, [r4, #12]
 800dbac:	0719      	lsls	r1, r3, #28
 800dbae:	d513      	bpl.n	800dbd8 <_puts_r+0x50>
 800dbb0:	6923      	ldr	r3, [r4, #16]
 800dbb2:	b18b      	cbz	r3, 800dbd8 <_puts_r+0x50>
 800dbb4:	3e01      	subs	r6, #1
 800dbb6:	68a3      	ldr	r3, [r4, #8]
 800dbb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dbbc:	3b01      	subs	r3, #1
 800dbbe:	60a3      	str	r3, [r4, #8]
 800dbc0:	b9e9      	cbnz	r1, 800dbfe <_puts_r+0x76>
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	da2e      	bge.n	800dc24 <_puts_r+0x9c>
 800dbc6:	4622      	mov	r2, r4
 800dbc8:	210a      	movs	r1, #10
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f000 f87b 	bl	800dcc6 <__swbuf_r>
 800dbd0:	3001      	adds	r0, #1
 800dbd2:	d007      	beq.n	800dbe4 <_puts_r+0x5c>
 800dbd4:	250a      	movs	r5, #10
 800dbd6:	e007      	b.n	800dbe8 <_puts_r+0x60>
 800dbd8:	4621      	mov	r1, r4
 800dbda:	4628      	mov	r0, r5
 800dbdc:	f000 f8b0 	bl	800dd40 <__swsetup_r>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	d0e7      	beq.n	800dbb4 <_puts_r+0x2c>
 800dbe4:	f04f 35ff 	mov.w	r5, #4294967295
 800dbe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbea:	07da      	lsls	r2, r3, #31
 800dbec:	d405      	bmi.n	800dbfa <_puts_r+0x72>
 800dbee:	89a3      	ldrh	r3, [r4, #12]
 800dbf0:	059b      	lsls	r3, r3, #22
 800dbf2:	d402      	bmi.n	800dbfa <_puts_r+0x72>
 800dbf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbf6:	f000 f975 	bl	800dee4 <__retarget_lock_release_recursive>
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	bd70      	pop	{r4, r5, r6, pc}
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	da04      	bge.n	800dc0c <_puts_r+0x84>
 800dc02:	69a2      	ldr	r2, [r4, #24]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	dc06      	bgt.n	800dc16 <_puts_r+0x8e>
 800dc08:	290a      	cmp	r1, #10
 800dc0a:	d004      	beq.n	800dc16 <_puts_r+0x8e>
 800dc0c:	6823      	ldr	r3, [r4, #0]
 800dc0e:	1c5a      	adds	r2, r3, #1
 800dc10:	6022      	str	r2, [r4, #0]
 800dc12:	7019      	strb	r1, [r3, #0]
 800dc14:	e7cf      	b.n	800dbb6 <_puts_r+0x2e>
 800dc16:	4622      	mov	r2, r4
 800dc18:	4628      	mov	r0, r5
 800dc1a:	f000 f854 	bl	800dcc6 <__swbuf_r>
 800dc1e:	3001      	adds	r0, #1
 800dc20:	d1c9      	bne.n	800dbb6 <_puts_r+0x2e>
 800dc22:	e7df      	b.n	800dbe4 <_puts_r+0x5c>
 800dc24:	6823      	ldr	r3, [r4, #0]
 800dc26:	250a      	movs	r5, #10
 800dc28:	1c5a      	adds	r2, r3, #1
 800dc2a:	6022      	str	r2, [r4, #0]
 800dc2c:	701d      	strb	r5, [r3, #0]
 800dc2e:	e7db      	b.n	800dbe8 <_puts_r+0x60>

0800dc30 <puts>:
 800dc30:	4b02      	ldr	r3, [pc, #8]	; (800dc3c <puts+0xc>)
 800dc32:	4601      	mov	r1, r0
 800dc34:	6818      	ldr	r0, [r3, #0]
 800dc36:	f7ff bfa7 	b.w	800db88 <_puts_r>
 800dc3a:	bf00      	nop
 800dc3c:	20000064 	.word	0x20000064

0800dc40 <__sread>:
 800dc40:	b510      	push	{r4, lr}
 800dc42:	460c      	mov	r4, r1
 800dc44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc48:	f000 f8fc 	bl	800de44 <_read_r>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	bfab      	itete	ge
 800dc50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc52:	89a3      	ldrhlt	r3, [r4, #12]
 800dc54:	181b      	addge	r3, r3, r0
 800dc56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc5a:	bfac      	ite	ge
 800dc5c:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc5e:	81a3      	strhlt	r3, [r4, #12]
 800dc60:	bd10      	pop	{r4, pc}

0800dc62 <__swrite>:
 800dc62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc66:	461f      	mov	r7, r3
 800dc68:	898b      	ldrh	r3, [r1, #12]
 800dc6a:	05db      	lsls	r3, r3, #23
 800dc6c:	4605      	mov	r5, r0
 800dc6e:	460c      	mov	r4, r1
 800dc70:	4616      	mov	r6, r2
 800dc72:	d505      	bpl.n	800dc80 <__swrite+0x1e>
 800dc74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc78:	2302      	movs	r3, #2
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f000 f8d0 	bl	800de20 <_lseek_r>
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc8a:	81a3      	strh	r3, [r4, #12]
 800dc8c:	4632      	mov	r2, r6
 800dc8e:	463b      	mov	r3, r7
 800dc90:	4628      	mov	r0, r5
 800dc92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc96:	f000 b8e7 	b.w	800de68 <_write_r>

0800dc9a <__sseek>:
 800dc9a:	b510      	push	{r4, lr}
 800dc9c:	460c      	mov	r4, r1
 800dc9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dca2:	f000 f8bd 	bl	800de20 <_lseek_r>
 800dca6:	1c43      	adds	r3, r0, #1
 800dca8:	89a3      	ldrh	r3, [r4, #12]
 800dcaa:	bf15      	itete	ne
 800dcac:	6560      	strne	r0, [r4, #84]	; 0x54
 800dcae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dcb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dcb6:	81a3      	strheq	r3, [r4, #12]
 800dcb8:	bf18      	it	ne
 800dcba:	81a3      	strhne	r3, [r4, #12]
 800dcbc:	bd10      	pop	{r4, pc}

0800dcbe <__sclose>:
 800dcbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcc2:	f000 b89d 	b.w	800de00 <_close_r>

0800dcc6 <__swbuf_r>:
 800dcc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc8:	460e      	mov	r6, r1
 800dcca:	4614      	mov	r4, r2
 800dccc:	4605      	mov	r5, r0
 800dcce:	b118      	cbz	r0, 800dcd8 <__swbuf_r+0x12>
 800dcd0:	6a03      	ldr	r3, [r0, #32]
 800dcd2:	b90b      	cbnz	r3, 800dcd8 <__swbuf_r+0x12>
 800dcd4:	f7ff ff22 	bl	800db1c <__sinit>
 800dcd8:	69a3      	ldr	r3, [r4, #24]
 800dcda:	60a3      	str	r3, [r4, #8]
 800dcdc:	89a3      	ldrh	r3, [r4, #12]
 800dcde:	071a      	lsls	r2, r3, #28
 800dce0:	d525      	bpl.n	800dd2e <__swbuf_r+0x68>
 800dce2:	6923      	ldr	r3, [r4, #16]
 800dce4:	b31b      	cbz	r3, 800dd2e <__swbuf_r+0x68>
 800dce6:	6823      	ldr	r3, [r4, #0]
 800dce8:	6922      	ldr	r2, [r4, #16]
 800dcea:	1a98      	subs	r0, r3, r2
 800dcec:	6963      	ldr	r3, [r4, #20]
 800dcee:	b2f6      	uxtb	r6, r6
 800dcf0:	4283      	cmp	r3, r0
 800dcf2:	4637      	mov	r7, r6
 800dcf4:	dc04      	bgt.n	800dd00 <__swbuf_r+0x3a>
 800dcf6:	4621      	mov	r1, r4
 800dcf8:	4628      	mov	r0, r5
 800dcfa:	f000 fa81 	bl	800e200 <_fflush_r>
 800dcfe:	b9e0      	cbnz	r0, 800dd3a <__swbuf_r+0x74>
 800dd00:	68a3      	ldr	r3, [r4, #8]
 800dd02:	3b01      	subs	r3, #1
 800dd04:	60a3      	str	r3, [r4, #8]
 800dd06:	6823      	ldr	r3, [r4, #0]
 800dd08:	1c5a      	adds	r2, r3, #1
 800dd0a:	6022      	str	r2, [r4, #0]
 800dd0c:	701e      	strb	r6, [r3, #0]
 800dd0e:	6962      	ldr	r2, [r4, #20]
 800dd10:	1c43      	adds	r3, r0, #1
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d004      	beq.n	800dd20 <__swbuf_r+0x5a>
 800dd16:	89a3      	ldrh	r3, [r4, #12]
 800dd18:	07db      	lsls	r3, r3, #31
 800dd1a:	d506      	bpl.n	800dd2a <__swbuf_r+0x64>
 800dd1c:	2e0a      	cmp	r6, #10
 800dd1e:	d104      	bne.n	800dd2a <__swbuf_r+0x64>
 800dd20:	4621      	mov	r1, r4
 800dd22:	4628      	mov	r0, r5
 800dd24:	f000 fa6c 	bl	800e200 <_fflush_r>
 800dd28:	b938      	cbnz	r0, 800dd3a <__swbuf_r+0x74>
 800dd2a:	4638      	mov	r0, r7
 800dd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd2e:	4621      	mov	r1, r4
 800dd30:	4628      	mov	r0, r5
 800dd32:	f000 f805 	bl	800dd40 <__swsetup_r>
 800dd36:	2800      	cmp	r0, #0
 800dd38:	d0d5      	beq.n	800dce6 <__swbuf_r+0x20>
 800dd3a:	f04f 37ff 	mov.w	r7, #4294967295
 800dd3e:	e7f4      	b.n	800dd2a <__swbuf_r+0x64>

0800dd40 <__swsetup_r>:
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	4b2a      	ldr	r3, [pc, #168]	; (800ddec <__swsetup_r+0xac>)
 800dd44:	4605      	mov	r5, r0
 800dd46:	6818      	ldr	r0, [r3, #0]
 800dd48:	460c      	mov	r4, r1
 800dd4a:	b118      	cbz	r0, 800dd54 <__swsetup_r+0x14>
 800dd4c:	6a03      	ldr	r3, [r0, #32]
 800dd4e:	b90b      	cbnz	r3, 800dd54 <__swsetup_r+0x14>
 800dd50:	f7ff fee4 	bl	800db1c <__sinit>
 800dd54:	89a3      	ldrh	r3, [r4, #12]
 800dd56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd5a:	0718      	lsls	r0, r3, #28
 800dd5c:	d422      	bmi.n	800dda4 <__swsetup_r+0x64>
 800dd5e:	06d9      	lsls	r1, r3, #27
 800dd60:	d407      	bmi.n	800dd72 <__swsetup_r+0x32>
 800dd62:	2309      	movs	r3, #9
 800dd64:	602b      	str	r3, [r5, #0]
 800dd66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd6a:	81a3      	strh	r3, [r4, #12]
 800dd6c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd70:	e034      	b.n	800dddc <__swsetup_r+0x9c>
 800dd72:	0758      	lsls	r0, r3, #29
 800dd74:	d512      	bpl.n	800dd9c <__swsetup_r+0x5c>
 800dd76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd78:	b141      	cbz	r1, 800dd8c <__swsetup_r+0x4c>
 800dd7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd7e:	4299      	cmp	r1, r3
 800dd80:	d002      	beq.n	800dd88 <__swsetup_r+0x48>
 800dd82:	4628      	mov	r0, r5
 800dd84:	f000 f8be 	bl	800df04 <_free_r>
 800dd88:	2300      	movs	r3, #0
 800dd8a:	6363      	str	r3, [r4, #52]	; 0x34
 800dd8c:	89a3      	ldrh	r3, [r4, #12]
 800dd8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd92:	81a3      	strh	r3, [r4, #12]
 800dd94:	2300      	movs	r3, #0
 800dd96:	6063      	str	r3, [r4, #4]
 800dd98:	6923      	ldr	r3, [r4, #16]
 800dd9a:	6023      	str	r3, [r4, #0]
 800dd9c:	89a3      	ldrh	r3, [r4, #12]
 800dd9e:	f043 0308 	orr.w	r3, r3, #8
 800dda2:	81a3      	strh	r3, [r4, #12]
 800dda4:	6923      	ldr	r3, [r4, #16]
 800dda6:	b94b      	cbnz	r3, 800ddbc <__swsetup_r+0x7c>
 800dda8:	89a3      	ldrh	r3, [r4, #12]
 800ddaa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ddae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddb2:	d003      	beq.n	800ddbc <__swsetup_r+0x7c>
 800ddb4:	4621      	mov	r1, r4
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	f000 fa70 	bl	800e29c <__smakebuf_r>
 800ddbc:	89a0      	ldrh	r0, [r4, #12]
 800ddbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddc2:	f010 0301 	ands.w	r3, r0, #1
 800ddc6:	d00a      	beq.n	800ddde <__swsetup_r+0x9e>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	60a3      	str	r3, [r4, #8]
 800ddcc:	6963      	ldr	r3, [r4, #20]
 800ddce:	425b      	negs	r3, r3
 800ddd0:	61a3      	str	r3, [r4, #24]
 800ddd2:	6923      	ldr	r3, [r4, #16]
 800ddd4:	b943      	cbnz	r3, 800dde8 <__swsetup_r+0xa8>
 800ddd6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ddda:	d1c4      	bne.n	800dd66 <__swsetup_r+0x26>
 800dddc:	bd38      	pop	{r3, r4, r5, pc}
 800ddde:	0781      	lsls	r1, r0, #30
 800dde0:	bf58      	it	pl
 800dde2:	6963      	ldrpl	r3, [r4, #20]
 800dde4:	60a3      	str	r3, [r4, #8]
 800dde6:	e7f4      	b.n	800ddd2 <__swsetup_r+0x92>
 800dde8:	2000      	movs	r0, #0
 800ddea:	e7f7      	b.n	800dddc <__swsetup_r+0x9c>
 800ddec:	20000064 	.word	0x20000064

0800ddf0 <memset>:
 800ddf0:	4402      	add	r2, r0
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d100      	bne.n	800ddfa <memset+0xa>
 800ddf8:	4770      	bx	lr
 800ddfa:	f803 1b01 	strb.w	r1, [r3], #1
 800ddfe:	e7f9      	b.n	800ddf4 <memset+0x4>

0800de00 <_close_r>:
 800de00:	b538      	push	{r3, r4, r5, lr}
 800de02:	4d06      	ldr	r5, [pc, #24]	; (800de1c <_close_r+0x1c>)
 800de04:	2300      	movs	r3, #0
 800de06:	4604      	mov	r4, r0
 800de08:	4608      	mov	r0, r1
 800de0a:	602b      	str	r3, [r5, #0]
 800de0c:	f7f6 fdf3 	bl	80049f6 <_close>
 800de10:	1c43      	adds	r3, r0, #1
 800de12:	d102      	bne.n	800de1a <_close_r+0x1a>
 800de14:	682b      	ldr	r3, [r5, #0]
 800de16:	b103      	cbz	r3, 800de1a <_close_r+0x1a>
 800de18:	6023      	str	r3, [r4, #0]
 800de1a:	bd38      	pop	{r3, r4, r5, pc}
 800de1c:	20000e20 	.word	0x20000e20

0800de20 <_lseek_r>:
 800de20:	b538      	push	{r3, r4, r5, lr}
 800de22:	4d07      	ldr	r5, [pc, #28]	; (800de40 <_lseek_r+0x20>)
 800de24:	4604      	mov	r4, r0
 800de26:	4608      	mov	r0, r1
 800de28:	4611      	mov	r1, r2
 800de2a:	2200      	movs	r2, #0
 800de2c:	602a      	str	r2, [r5, #0]
 800de2e:	461a      	mov	r2, r3
 800de30:	f7f6 fe08 	bl	8004a44 <_lseek>
 800de34:	1c43      	adds	r3, r0, #1
 800de36:	d102      	bne.n	800de3e <_lseek_r+0x1e>
 800de38:	682b      	ldr	r3, [r5, #0]
 800de3a:	b103      	cbz	r3, 800de3e <_lseek_r+0x1e>
 800de3c:	6023      	str	r3, [r4, #0]
 800de3e:	bd38      	pop	{r3, r4, r5, pc}
 800de40:	20000e20 	.word	0x20000e20

0800de44 <_read_r>:
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	4d07      	ldr	r5, [pc, #28]	; (800de64 <_read_r+0x20>)
 800de48:	4604      	mov	r4, r0
 800de4a:	4608      	mov	r0, r1
 800de4c:	4611      	mov	r1, r2
 800de4e:	2200      	movs	r2, #0
 800de50:	602a      	str	r2, [r5, #0]
 800de52:	461a      	mov	r2, r3
 800de54:	f7f6 fd96 	bl	8004984 <_read>
 800de58:	1c43      	adds	r3, r0, #1
 800de5a:	d102      	bne.n	800de62 <_read_r+0x1e>
 800de5c:	682b      	ldr	r3, [r5, #0]
 800de5e:	b103      	cbz	r3, 800de62 <_read_r+0x1e>
 800de60:	6023      	str	r3, [r4, #0]
 800de62:	bd38      	pop	{r3, r4, r5, pc}
 800de64:	20000e20 	.word	0x20000e20

0800de68 <_write_r>:
 800de68:	b538      	push	{r3, r4, r5, lr}
 800de6a:	4d07      	ldr	r5, [pc, #28]	; (800de88 <_write_r+0x20>)
 800de6c:	4604      	mov	r4, r0
 800de6e:	4608      	mov	r0, r1
 800de70:	4611      	mov	r1, r2
 800de72:	2200      	movs	r2, #0
 800de74:	602a      	str	r2, [r5, #0]
 800de76:	461a      	mov	r2, r3
 800de78:	f7f6 fda1 	bl	80049be <_write>
 800de7c:	1c43      	adds	r3, r0, #1
 800de7e:	d102      	bne.n	800de86 <_write_r+0x1e>
 800de80:	682b      	ldr	r3, [r5, #0]
 800de82:	b103      	cbz	r3, 800de86 <_write_r+0x1e>
 800de84:	6023      	str	r3, [r4, #0]
 800de86:	bd38      	pop	{r3, r4, r5, pc}
 800de88:	20000e20 	.word	0x20000e20

0800de8c <__errno>:
 800de8c:	4b01      	ldr	r3, [pc, #4]	; (800de94 <__errno+0x8>)
 800de8e:	6818      	ldr	r0, [r3, #0]
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop
 800de94:	20000064 	.word	0x20000064

0800de98 <__libc_init_array>:
 800de98:	b570      	push	{r4, r5, r6, lr}
 800de9a:	4d0d      	ldr	r5, [pc, #52]	; (800ded0 <__libc_init_array+0x38>)
 800de9c:	4c0d      	ldr	r4, [pc, #52]	; (800ded4 <__libc_init_array+0x3c>)
 800de9e:	1b64      	subs	r4, r4, r5
 800dea0:	10a4      	asrs	r4, r4, #2
 800dea2:	2600      	movs	r6, #0
 800dea4:	42a6      	cmp	r6, r4
 800dea6:	d109      	bne.n	800debc <__libc_init_array+0x24>
 800dea8:	4d0b      	ldr	r5, [pc, #44]	; (800ded8 <__libc_init_array+0x40>)
 800deaa:	4c0c      	ldr	r4, [pc, #48]	; (800dedc <__libc_init_array+0x44>)
 800deac:	f000 fa64 	bl	800e378 <_init>
 800deb0:	1b64      	subs	r4, r4, r5
 800deb2:	10a4      	asrs	r4, r4, #2
 800deb4:	2600      	movs	r6, #0
 800deb6:	42a6      	cmp	r6, r4
 800deb8:	d105      	bne.n	800dec6 <__libc_init_array+0x2e>
 800deba:	bd70      	pop	{r4, r5, r6, pc}
 800debc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dec0:	4798      	blx	r3
 800dec2:	3601      	adds	r6, #1
 800dec4:	e7ee      	b.n	800dea4 <__libc_init_array+0xc>
 800dec6:	f855 3b04 	ldr.w	r3, [r5], #4
 800deca:	4798      	blx	r3
 800decc:	3601      	adds	r6, #1
 800dece:	e7f2      	b.n	800deb6 <__libc_init_array+0x1e>
 800ded0:	0800e9d4 	.word	0x0800e9d4
 800ded4:	0800e9d4 	.word	0x0800e9d4
 800ded8:	0800e9d4 	.word	0x0800e9d4
 800dedc:	0800e9d8 	.word	0x0800e9d8

0800dee0 <__retarget_lock_init_recursive>:
 800dee0:	4770      	bx	lr

0800dee2 <__retarget_lock_acquire_recursive>:
 800dee2:	4770      	bx	lr

0800dee4 <__retarget_lock_release_recursive>:
 800dee4:	4770      	bx	lr

0800dee6 <memcpy>:
 800dee6:	440a      	add	r2, r1
 800dee8:	4291      	cmp	r1, r2
 800deea:	f100 33ff 	add.w	r3, r0, #4294967295
 800deee:	d100      	bne.n	800def2 <memcpy+0xc>
 800def0:	4770      	bx	lr
 800def2:	b510      	push	{r4, lr}
 800def4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800def8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800defc:	4291      	cmp	r1, r2
 800defe:	d1f9      	bne.n	800def4 <memcpy+0xe>
 800df00:	bd10      	pop	{r4, pc}
	...

0800df04 <_free_r>:
 800df04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df06:	2900      	cmp	r1, #0
 800df08:	d044      	beq.n	800df94 <_free_r+0x90>
 800df0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df0e:	9001      	str	r0, [sp, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	f1a1 0404 	sub.w	r4, r1, #4
 800df16:	bfb8      	it	lt
 800df18:	18e4      	addlt	r4, r4, r3
 800df1a:	f000 f8df 	bl	800e0dc <__malloc_lock>
 800df1e:	4a1e      	ldr	r2, [pc, #120]	; (800df98 <_free_r+0x94>)
 800df20:	9801      	ldr	r0, [sp, #4]
 800df22:	6813      	ldr	r3, [r2, #0]
 800df24:	b933      	cbnz	r3, 800df34 <_free_r+0x30>
 800df26:	6063      	str	r3, [r4, #4]
 800df28:	6014      	str	r4, [r2, #0]
 800df2a:	b003      	add	sp, #12
 800df2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df30:	f000 b8da 	b.w	800e0e8 <__malloc_unlock>
 800df34:	42a3      	cmp	r3, r4
 800df36:	d908      	bls.n	800df4a <_free_r+0x46>
 800df38:	6825      	ldr	r5, [r4, #0]
 800df3a:	1961      	adds	r1, r4, r5
 800df3c:	428b      	cmp	r3, r1
 800df3e:	bf01      	itttt	eq
 800df40:	6819      	ldreq	r1, [r3, #0]
 800df42:	685b      	ldreq	r3, [r3, #4]
 800df44:	1949      	addeq	r1, r1, r5
 800df46:	6021      	streq	r1, [r4, #0]
 800df48:	e7ed      	b.n	800df26 <_free_r+0x22>
 800df4a:	461a      	mov	r2, r3
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	b10b      	cbz	r3, 800df54 <_free_r+0x50>
 800df50:	42a3      	cmp	r3, r4
 800df52:	d9fa      	bls.n	800df4a <_free_r+0x46>
 800df54:	6811      	ldr	r1, [r2, #0]
 800df56:	1855      	adds	r5, r2, r1
 800df58:	42a5      	cmp	r5, r4
 800df5a:	d10b      	bne.n	800df74 <_free_r+0x70>
 800df5c:	6824      	ldr	r4, [r4, #0]
 800df5e:	4421      	add	r1, r4
 800df60:	1854      	adds	r4, r2, r1
 800df62:	42a3      	cmp	r3, r4
 800df64:	6011      	str	r1, [r2, #0]
 800df66:	d1e0      	bne.n	800df2a <_free_r+0x26>
 800df68:	681c      	ldr	r4, [r3, #0]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	6053      	str	r3, [r2, #4]
 800df6e:	440c      	add	r4, r1
 800df70:	6014      	str	r4, [r2, #0]
 800df72:	e7da      	b.n	800df2a <_free_r+0x26>
 800df74:	d902      	bls.n	800df7c <_free_r+0x78>
 800df76:	230c      	movs	r3, #12
 800df78:	6003      	str	r3, [r0, #0]
 800df7a:	e7d6      	b.n	800df2a <_free_r+0x26>
 800df7c:	6825      	ldr	r5, [r4, #0]
 800df7e:	1961      	adds	r1, r4, r5
 800df80:	428b      	cmp	r3, r1
 800df82:	bf04      	itt	eq
 800df84:	6819      	ldreq	r1, [r3, #0]
 800df86:	685b      	ldreq	r3, [r3, #4]
 800df88:	6063      	str	r3, [r4, #4]
 800df8a:	bf04      	itt	eq
 800df8c:	1949      	addeq	r1, r1, r5
 800df8e:	6021      	streq	r1, [r4, #0]
 800df90:	6054      	str	r4, [r2, #4]
 800df92:	e7ca      	b.n	800df2a <_free_r+0x26>
 800df94:	b003      	add	sp, #12
 800df96:	bd30      	pop	{r4, r5, pc}
 800df98:	20000e28 	.word	0x20000e28

0800df9c <sbrk_aligned>:
 800df9c:	b570      	push	{r4, r5, r6, lr}
 800df9e:	4e0e      	ldr	r6, [pc, #56]	; (800dfd8 <sbrk_aligned+0x3c>)
 800dfa0:	460c      	mov	r4, r1
 800dfa2:	6831      	ldr	r1, [r6, #0]
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	b911      	cbnz	r1, 800dfae <sbrk_aligned+0x12>
 800dfa8:	f000 f9d6 	bl	800e358 <_sbrk_r>
 800dfac:	6030      	str	r0, [r6, #0]
 800dfae:	4621      	mov	r1, r4
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	f000 f9d1 	bl	800e358 <_sbrk_r>
 800dfb6:	1c43      	adds	r3, r0, #1
 800dfb8:	d00a      	beq.n	800dfd0 <sbrk_aligned+0x34>
 800dfba:	1cc4      	adds	r4, r0, #3
 800dfbc:	f024 0403 	bic.w	r4, r4, #3
 800dfc0:	42a0      	cmp	r0, r4
 800dfc2:	d007      	beq.n	800dfd4 <sbrk_aligned+0x38>
 800dfc4:	1a21      	subs	r1, r4, r0
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	f000 f9c6 	bl	800e358 <_sbrk_r>
 800dfcc:	3001      	adds	r0, #1
 800dfce:	d101      	bne.n	800dfd4 <sbrk_aligned+0x38>
 800dfd0:	f04f 34ff 	mov.w	r4, #4294967295
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	bd70      	pop	{r4, r5, r6, pc}
 800dfd8:	20000e2c 	.word	0x20000e2c

0800dfdc <_malloc_r>:
 800dfdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfe0:	1ccd      	adds	r5, r1, #3
 800dfe2:	f025 0503 	bic.w	r5, r5, #3
 800dfe6:	3508      	adds	r5, #8
 800dfe8:	2d0c      	cmp	r5, #12
 800dfea:	bf38      	it	cc
 800dfec:	250c      	movcc	r5, #12
 800dfee:	2d00      	cmp	r5, #0
 800dff0:	4607      	mov	r7, r0
 800dff2:	db01      	blt.n	800dff8 <_malloc_r+0x1c>
 800dff4:	42a9      	cmp	r1, r5
 800dff6:	d905      	bls.n	800e004 <_malloc_r+0x28>
 800dff8:	230c      	movs	r3, #12
 800dffa:	603b      	str	r3, [r7, #0]
 800dffc:	2600      	movs	r6, #0
 800dffe:	4630      	mov	r0, r6
 800e000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e004:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e0d8 <_malloc_r+0xfc>
 800e008:	f000 f868 	bl	800e0dc <__malloc_lock>
 800e00c:	f8d8 3000 	ldr.w	r3, [r8]
 800e010:	461c      	mov	r4, r3
 800e012:	bb5c      	cbnz	r4, 800e06c <_malloc_r+0x90>
 800e014:	4629      	mov	r1, r5
 800e016:	4638      	mov	r0, r7
 800e018:	f7ff ffc0 	bl	800df9c <sbrk_aligned>
 800e01c:	1c43      	adds	r3, r0, #1
 800e01e:	4604      	mov	r4, r0
 800e020:	d155      	bne.n	800e0ce <_malloc_r+0xf2>
 800e022:	f8d8 4000 	ldr.w	r4, [r8]
 800e026:	4626      	mov	r6, r4
 800e028:	2e00      	cmp	r6, #0
 800e02a:	d145      	bne.n	800e0b8 <_malloc_r+0xdc>
 800e02c:	2c00      	cmp	r4, #0
 800e02e:	d048      	beq.n	800e0c2 <_malloc_r+0xe6>
 800e030:	6823      	ldr	r3, [r4, #0]
 800e032:	4631      	mov	r1, r6
 800e034:	4638      	mov	r0, r7
 800e036:	eb04 0903 	add.w	r9, r4, r3
 800e03a:	f000 f98d 	bl	800e358 <_sbrk_r>
 800e03e:	4581      	cmp	r9, r0
 800e040:	d13f      	bne.n	800e0c2 <_malloc_r+0xe6>
 800e042:	6821      	ldr	r1, [r4, #0]
 800e044:	1a6d      	subs	r5, r5, r1
 800e046:	4629      	mov	r1, r5
 800e048:	4638      	mov	r0, r7
 800e04a:	f7ff ffa7 	bl	800df9c <sbrk_aligned>
 800e04e:	3001      	adds	r0, #1
 800e050:	d037      	beq.n	800e0c2 <_malloc_r+0xe6>
 800e052:	6823      	ldr	r3, [r4, #0]
 800e054:	442b      	add	r3, r5
 800e056:	6023      	str	r3, [r4, #0]
 800e058:	f8d8 3000 	ldr.w	r3, [r8]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d038      	beq.n	800e0d2 <_malloc_r+0xf6>
 800e060:	685a      	ldr	r2, [r3, #4]
 800e062:	42a2      	cmp	r2, r4
 800e064:	d12b      	bne.n	800e0be <_malloc_r+0xe2>
 800e066:	2200      	movs	r2, #0
 800e068:	605a      	str	r2, [r3, #4]
 800e06a:	e00f      	b.n	800e08c <_malloc_r+0xb0>
 800e06c:	6822      	ldr	r2, [r4, #0]
 800e06e:	1b52      	subs	r2, r2, r5
 800e070:	d41f      	bmi.n	800e0b2 <_malloc_r+0xd6>
 800e072:	2a0b      	cmp	r2, #11
 800e074:	d917      	bls.n	800e0a6 <_malloc_r+0xca>
 800e076:	1961      	adds	r1, r4, r5
 800e078:	42a3      	cmp	r3, r4
 800e07a:	6025      	str	r5, [r4, #0]
 800e07c:	bf18      	it	ne
 800e07e:	6059      	strne	r1, [r3, #4]
 800e080:	6863      	ldr	r3, [r4, #4]
 800e082:	bf08      	it	eq
 800e084:	f8c8 1000 	streq.w	r1, [r8]
 800e088:	5162      	str	r2, [r4, r5]
 800e08a:	604b      	str	r3, [r1, #4]
 800e08c:	4638      	mov	r0, r7
 800e08e:	f104 060b 	add.w	r6, r4, #11
 800e092:	f000 f829 	bl	800e0e8 <__malloc_unlock>
 800e096:	f026 0607 	bic.w	r6, r6, #7
 800e09a:	1d23      	adds	r3, r4, #4
 800e09c:	1af2      	subs	r2, r6, r3
 800e09e:	d0ae      	beq.n	800dffe <_malloc_r+0x22>
 800e0a0:	1b9b      	subs	r3, r3, r6
 800e0a2:	50a3      	str	r3, [r4, r2]
 800e0a4:	e7ab      	b.n	800dffe <_malloc_r+0x22>
 800e0a6:	42a3      	cmp	r3, r4
 800e0a8:	6862      	ldr	r2, [r4, #4]
 800e0aa:	d1dd      	bne.n	800e068 <_malloc_r+0x8c>
 800e0ac:	f8c8 2000 	str.w	r2, [r8]
 800e0b0:	e7ec      	b.n	800e08c <_malloc_r+0xb0>
 800e0b2:	4623      	mov	r3, r4
 800e0b4:	6864      	ldr	r4, [r4, #4]
 800e0b6:	e7ac      	b.n	800e012 <_malloc_r+0x36>
 800e0b8:	4634      	mov	r4, r6
 800e0ba:	6876      	ldr	r6, [r6, #4]
 800e0bc:	e7b4      	b.n	800e028 <_malloc_r+0x4c>
 800e0be:	4613      	mov	r3, r2
 800e0c0:	e7cc      	b.n	800e05c <_malloc_r+0x80>
 800e0c2:	230c      	movs	r3, #12
 800e0c4:	603b      	str	r3, [r7, #0]
 800e0c6:	4638      	mov	r0, r7
 800e0c8:	f000 f80e 	bl	800e0e8 <__malloc_unlock>
 800e0cc:	e797      	b.n	800dffe <_malloc_r+0x22>
 800e0ce:	6025      	str	r5, [r4, #0]
 800e0d0:	e7dc      	b.n	800e08c <_malloc_r+0xb0>
 800e0d2:	605b      	str	r3, [r3, #4]
 800e0d4:	deff      	udf	#255	; 0xff
 800e0d6:	bf00      	nop
 800e0d8:	20000e28 	.word	0x20000e28

0800e0dc <__malloc_lock>:
 800e0dc:	4801      	ldr	r0, [pc, #4]	; (800e0e4 <__malloc_lock+0x8>)
 800e0de:	f7ff bf00 	b.w	800dee2 <__retarget_lock_acquire_recursive>
 800e0e2:	bf00      	nop
 800e0e4:	20000e24 	.word	0x20000e24

0800e0e8 <__malloc_unlock>:
 800e0e8:	4801      	ldr	r0, [pc, #4]	; (800e0f0 <__malloc_unlock+0x8>)
 800e0ea:	f7ff befb 	b.w	800dee4 <__retarget_lock_release_recursive>
 800e0ee:	bf00      	nop
 800e0f0:	20000e24 	.word	0x20000e24

0800e0f4 <__sflush_r>:
 800e0f4:	898a      	ldrh	r2, [r1, #12]
 800e0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0fa:	4605      	mov	r5, r0
 800e0fc:	0710      	lsls	r0, r2, #28
 800e0fe:	460c      	mov	r4, r1
 800e100:	d458      	bmi.n	800e1b4 <__sflush_r+0xc0>
 800e102:	684b      	ldr	r3, [r1, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	dc05      	bgt.n	800e114 <__sflush_r+0x20>
 800e108:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	dc02      	bgt.n	800e114 <__sflush_r+0x20>
 800e10e:	2000      	movs	r0, #0
 800e110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e116:	2e00      	cmp	r6, #0
 800e118:	d0f9      	beq.n	800e10e <__sflush_r+0x1a>
 800e11a:	2300      	movs	r3, #0
 800e11c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e120:	682f      	ldr	r7, [r5, #0]
 800e122:	6a21      	ldr	r1, [r4, #32]
 800e124:	602b      	str	r3, [r5, #0]
 800e126:	d032      	beq.n	800e18e <__sflush_r+0x9a>
 800e128:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e12a:	89a3      	ldrh	r3, [r4, #12]
 800e12c:	075a      	lsls	r2, r3, #29
 800e12e:	d505      	bpl.n	800e13c <__sflush_r+0x48>
 800e130:	6863      	ldr	r3, [r4, #4]
 800e132:	1ac0      	subs	r0, r0, r3
 800e134:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e136:	b10b      	cbz	r3, 800e13c <__sflush_r+0x48>
 800e138:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e13a:	1ac0      	subs	r0, r0, r3
 800e13c:	2300      	movs	r3, #0
 800e13e:	4602      	mov	r2, r0
 800e140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e142:	6a21      	ldr	r1, [r4, #32]
 800e144:	4628      	mov	r0, r5
 800e146:	47b0      	blx	r6
 800e148:	1c43      	adds	r3, r0, #1
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	d106      	bne.n	800e15c <__sflush_r+0x68>
 800e14e:	6829      	ldr	r1, [r5, #0]
 800e150:	291d      	cmp	r1, #29
 800e152:	d82b      	bhi.n	800e1ac <__sflush_r+0xb8>
 800e154:	4a29      	ldr	r2, [pc, #164]	; (800e1fc <__sflush_r+0x108>)
 800e156:	410a      	asrs	r2, r1
 800e158:	07d6      	lsls	r6, r2, #31
 800e15a:	d427      	bmi.n	800e1ac <__sflush_r+0xb8>
 800e15c:	2200      	movs	r2, #0
 800e15e:	6062      	str	r2, [r4, #4]
 800e160:	04d9      	lsls	r1, r3, #19
 800e162:	6922      	ldr	r2, [r4, #16]
 800e164:	6022      	str	r2, [r4, #0]
 800e166:	d504      	bpl.n	800e172 <__sflush_r+0x7e>
 800e168:	1c42      	adds	r2, r0, #1
 800e16a:	d101      	bne.n	800e170 <__sflush_r+0x7c>
 800e16c:	682b      	ldr	r3, [r5, #0]
 800e16e:	b903      	cbnz	r3, 800e172 <__sflush_r+0x7e>
 800e170:	6560      	str	r0, [r4, #84]	; 0x54
 800e172:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e174:	602f      	str	r7, [r5, #0]
 800e176:	2900      	cmp	r1, #0
 800e178:	d0c9      	beq.n	800e10e <__sflush_r+0x1a>
 800e17a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e17e:	4299      	cmp	r1, r3
 800e180:	d002      	beq.n	800e188 <__sflush_r+0x94>
 800e182:	4628      	mov	r0, r5
 800e184:	f7ff febe 	bl	800df04 <_free_r>
 800e188:	2000      	movs	r0, #0
 800e18a:	6360      	str	r0, [r4, #52]	; 0x34
 800e18c:	e7c0      	b.n	800e110 <__sflush_r+0x1c>
 800e18e:	2301      	movs	r3, #1
 800e190:	4628      	mov	r0, r5
 800e192:	47b0      	blx	r6
 800e194:	1c41      	adds	r1, r0, #1
 800e196:	d1c8      	bne.n	800e12a <__sflush_r+0x36>
 800e198:	682b      	ldr	r3, [r5, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d0c5      	beq.n	800e12a <__sflush_r+0x36>
 800e19e:	2b1d      	cmp	r3, #29
 800e1a0:	d001      	beq.n	800e1a6 <__sflush_r+0xb2>
 800e1a2:	2b16      	cmp	r3, #22
 800e1a4:	d101      	bne.n	800e1aa <__sflush_r+0xb6>
 800e1a6:	602f      	str	r7, [r5, #0]
 800e1a8:	e7b1      	b.n	800e10e <__sflush_r+0x1a>
 800e1aa:	89a3      	ldrh	r3, [r4, #12]
 800e1ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1b0:	81a3      	strh	r3, [r4, #12]
 800e1b2:	e7ad      	b.n	800e110 <__sflush_r+0x1c>
 800e1b4:	690f      	ldr	r7, [r1, #16]
 800e1b6:	2f00      	cmp	r7, #0
 800e1b8:	d0a9      	beq.n	800e10e <__sflush_r+0x1a>
 800e1ba:	0793      	lsls	r3, r2, #30
 800e1bc:	680e      	ldr	r6, [r1, #0]
 800e1be:	bf08      	it	eq
 800e1c0:	694b      	ldreq	r3, [r1, #20]
 800e1c2:	600f      	str	r7, [r1, #0]
 800e1c4:	bf18      	it	ne
 800e1c6:	2300      	movne	r3, #0
 800e1c8:	eba6 0807 	sub.w	r8, r6, r7
 800e1cc:	608b      	str	r3, [r1, #8]
 800e1ce:	f1b8 0f00 	cmp.w	r8, #0
 800e1d2:	dd9c      	ble.n	800e10e <__sflush_r+0x1a>
 800e1d4:	6a21      	ldr	r1, [r4, #32]
 800e1d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e1d8:	4643      	mov	r3, r8
 800e1da:	463a      	mov	r2, r7
 800e1dc:	4628      	mov	r0, r5
 800e1de:	47b0      	blx	r6
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	dc06      	bgt.n	800e1f2 <__sflush_r+0xfe>
 800e1e4:	89a3      	ldrh	r3, [r4, #12]
 800e1e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1ea:	81a3      	strh	r3, [r4, #12]
 800e1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f0:	e78e      	b.n	800e110 <__sflush_r+0x1c>
 800e1f2:	4407      	add	r7, r0
 800e1f4:	eba8 0800 	sub.w	r8, r8, r0
 800e1f8:	e7e9      	b.n	800e1ce <__sflush_r+0xda>
 800e1fa:	bf00      	nop
 800e1fc:	dfbffffe 	.word	0xdfbffffe

0800e200 <_fflush_r>:
 800e200:	b538      	push	{r3, r4, r5, lr}
 800e202:	690b      	ldr	r3, [r1, #16]
 800e204:	4605      	mov	r5, r0
 800e206:	460c      	mov	r4, r1
 800e208:	b913      	cbnz	r3, 800e210 <_fflush_r+0x10>
 800e20a:	2500      	movs	r5, #0
 800e20c:	4628      	mov	r0, r5
 800e20e:	bd38      	pop	{r3, r4, r5, pc}
 800e210:	b118      	cbz	r0, 800e21a <_fflush_r+0x1a>
 800e212:	6a03      	ldr	r3, [r0, #32]
 800e214:	b90b      	cbnz	r3, 800e21a <_fflush_r+0x1a>
 800e216:	f7ff fc81 	bl	800db1c <__sinit>
 800e21a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d0f3      	beq.n	800e20a <_fflush_r+0xa>
 800e222:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e224:	07d0      	lsls	r0, r2, #31
 800e226:	d404      	bmi.n	800e232 <_fflush_r+0x32>
 800e228:	0599      	lsls	r1, r3, #22
 800e22a:	d402      	bmi.n	800e232 <_fflush_r+0x32>
 800e22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e22e:	f7ff fe58 	bl	800dee2 <__retarget_lock_acquire_recursive>
 800e232:	4628      	mov	r0, r5
 800e234:	4621      	mov	r1, r4
 800e236:	f7ff ff5d 	bl	800e0f4 <__sflush_r>
 800e23a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e23c:	07da      	lsls	r2, r3, #31
 800e23e:	4605      	mov	r5, r0
 800e240:	d4e4      	bmi.n	800e20c <_fflush_r+0xc>
 800e242:	89a3      	ldrh	r3, [r4, #12]
 800e244:	059b      	lsls	r3, r3, #22
 800e246:	d4e1      	bmi.n	800e20c <_fflush_r+0xc>
 800e248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e24a:	f7ff fe4b 	bl	800dee4 <__retarget_lock_release_recursive>
 800e24e:	e7dd      	b.n	800e20c <_fflush_r+0xc>

0800e250 <__swhatbuf_r>:
 800e250:	b570      	push	{r4, r5, r6, lr}
 800e252:	460c      	mov	r4, r1
 800e254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e258:	2900      	cmp	r1, #0
 800e25a:	b096      	sub	sp, #88	; 0x58
 800e25c:	4615      	mov	r5, r2
 800e25e:	461e      	mov	r6, r3
 800e260:	da0d      	bge.n	800e27e <__swhatbuf_r+0x2e>
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e268:	f04f 0100 	mov.w	r1, #0
 800e26c:	bf0c      	ite	eq
 800e26e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e272:	2340      	movne	r3, #64	; 0x40
 800e274:	2000      	movs	r0, #0
 800e276:	6031      	str	r1, [r6, #0]
 800e278:	602b      	str	r3, [r5, #0]
 800e27a:	b016      	add	sp, #88	; 0x58
 800e27c:	bd70      	pop	{r4, r5, r6, pc}
 800e27e:	466a      	mov	r2, sp
 800e280:	f000 f848 	bl	800e314 <_fstat_r>
 800e284:	2800      	cmp	r0, #0
 800e286:	dbec      	blt.n	800e262 <__swhatbuf_r+0x12>
 800e288:	9901      	ldr	r1, [sp, #4]
 800e28a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e28e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e292:	4259      	negs	r1, r3
 800e294:	4159      	adcs	r1, r3
 800e296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e29a:	e7eb      	b.n	800e274 <__swhatbuf_r+0x24>

0800e29c <__smakebuf_r>:
 800e29c:	898b      	ldrh	r3, [r1, #12]
 800e29e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2a0:	079d      	lsls	r5, r3, #30
 800e2a2:	4606      	mov	r6, r0
 800e2a4:	460c      	mov	r4, r1
 800e2a6:	d507      	bpl.n	800e2b8 <__smakebuf_r+0x1c>
 800e2a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2ac:	6023      	str	r3, [r4, #0]
 800e2ae:	6123      	str	r3, [r4, #16]
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	6163      	str	r3, [r4, #20]
 800e2b4:	b002      	add	sp, #8
 800e2b6:	bd70      	pop	{r4, r5, r6, pc}
 800e2b8:	ab01      	add	r3, sp, #4
 800e2ba:	466a      	mov	r2, sp
 800e2bc:	f7ff ffc8 	bl	800e250 <__swhatbuf_r>
 800e2c0:	9900      	ldr	r1, [sp, #0]
 800e2c2:	4605      	mov	r5, r0
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	f7ff fe89 	bl	800dfdc <_malloc_r>
 800e2ca:	b948      	cbnz	r0, 800e2e0 <__smakebuf_r+0x44>
 800e2cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2d0:	059a      	lsls	r2, r3, #22
 800e2d2:	d4ef      	bmi.n	800e2b4 <__smakebuf_r+0x18>
 800e2d4:	f023 0303 	bic.w	r3, r3, #3
 800e2d8:	f043 0302 	orr.w	r3, r3, #2
 800e2dc:	81a3      	strh	r3, [r4, #12]
 800e2de:	e7e3      	b.n	800e2a8 <__smakebuf_r+0xc>
 800e2e0:	89a3      	ldrh	r3, [r4, #12]
 800e2e2:	6020      	str	r0, [r4, #0]
 800e2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2e8:	81a3      	strh	r3, [r4, #12]
 800e2ea:	9b00      	ldr	r3, [sp, #0]
 800e2ec:	6163      	str	r3, [r4, #20]
 800e2ee:	9b01      	ldr	r3, [sp, #4]
 800e2f0:	6120      	str	r0, [r4, #16]
 800e2f2:	b15b      	cbz	r3, 800e30c <__smakebuf_r+0x70>
 800e2f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	f000 f81d 	bl	800e338 <_isatty_r>
 800e2fe:	b128      	cbz	r0, 800e30c <__smakebuf_r+0x70>
 800e300:	89a3      	ldrh	r3, [r4, #12]
 800e302:	f023 0303 	bic.w	r3, r3, #3
 800e306:	f043 0301 	orr.w	r3, r3, #1
 800e30a:	81a3      	strh	r3, [r4, #12]
 800e30c:	89a3      	ldrh	r3, [r4, #12]
 800e30e:	431d      	orrs	r5, r3
 800e310:	81a5      	strh	r5, [r4, #12]
 800e312:	e7cf      	b.n	800e2b4 <__smakebuf_r+0x18>

0800e314 <_fstat_r>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	4d07      	ldr	r5, [pc, #28]	; (800e334 <_fstat_r+0x20>)
 800e318:	2300      	movs	r3, #0
 800e31a:	4604      	mov	r4, r0
 800e31c:	4608      	mov	r0, r1
 800e31e:	4611      	mov	r1, r2
 800e320:	602b      	str	r3, [r5, #0]
 800e322:	f7f6 fb74 	bl	8004a0e <_fstat>
 800e326:	1c43      	adds	r3, r0, #1
 800e328:	d102      	bne.n	800e330 <_fstat_r+0x1c>
 800e32a:	682b      	ldr	r3, [r5, #0]
 800e32c:	b103      	cbz	r3, 800e330 <_fstat_r+0x1c>
 800e32e:	6023      	str	r3, [r4, #0]
 800e330:	bd38      	pop	{r3, r4, r5, pc}
 800e332:	bf00      	nop
 800e334:	20000e20 	.word	0x20000e20

0800e338 <_isatty_r>:
 800e338:	b538      	push	{r3, r4, r5, lr}
 800e33a:	4d06      	ldr	r5, [pc, #24]	; (800e354 <_isatty_r+0x1c>)
 800e33c:	2300      	movs	r3, #0
 800e33e:	4604      	mov	r4, r0
 800e340:	4608      	mov	r0, r1
 800e342:	602b      	str	r3, [r5, #0]
 800e344:	f7f6 fb73 	bl	8004a2e <_isatty>
 800e348:	1c43      	adds	r3, r0, #1
 800e34a:	d102      	bne.n	800e352 <_isatty_r+0x1a>
 800e34c:	682b      	ldr	r3, [r5, #0]
 800e34e:	b103      	cbz	r3, 800e352 <_isatty_r+0x1a>
 800e350:	6023      	str	r3, [r4, #0]
 800e352:	bd38      	pop	{r3, r4, r5, pc}
 800e354:	20000e20 	.word	0x20000e20

0800e358 <_sbrk_r>:
 800e358:	b538      	push	{r3, r4, r5, lr}
 800e35a:	4d06      	ldr	r5, [pc, #24]	; (800e374 <_sbrk_r+0x1c>)
 800e35c:	2300      	movs	r3, #0
 800e35e:	4604      	mov	r4, r0
 800e360:	4608      	mov	r0, r1
 800e362:	602b      	str	r3, [r5, #0]
 800e364:	f7f6 fb7c 	bl	8004a60 <_sbrk>
 800e368:	1c43      	adds	r3, r0, #1
 800e36a:	d102      	bne.n	800e372 <_sbrk_r+0x1a>
 800e36c:	682b      	ldr	r3, [r5, #0]
 800e36e:	b103      	cbz	r3, 800e372 <_sbrk_r+0x1a>
 800e370:	6023      	str	r3, [r4, #0]
 800e372:	bd38      	pop	{r3, r4, r5, pc}
 800e374:	20000e20 	.word	0x20000e20

0800e378 <_init>:
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37a:	bf00      	nop
 800e37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e37e:	bc08      	pop	{r3}
 800e380:	469e      	mov	lr, r3
 800e382:	4770      	bx	lr

0800e384 <_fini>:
 800e384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e386:	bf00      	nop
 800e388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e38a:	bc08      	pop	{r3}
 800e38c:	469e      	mov	lr, r3
 800e38e:	4770      	bx	lr
