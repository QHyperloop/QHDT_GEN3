
QUCONTROL_FOLLOWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007494  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800785c  0800785c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007864  08007864  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007864  08007864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800786c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a88  20000068  080078d4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af0  080078d4  00020af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023a9b  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ffd  00000000  00000000  00043b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f70  00000000  00000000  00047b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001882  00000000  00000000  00049ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005438  00000000  00000000  0004b36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025de2  00000000  00000000  000507a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001223da  00000000  00000000  00076584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008fe8  00000000  00000000  00198960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a1948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007654 	.word	0x08007654

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08007654 	.word	0x08007654

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Run_State>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Run_State(enum PodState state) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b09      	cmp	r3, #9
 8000522:	d83f      	bhi.n	80005a4 <Run_State+0x90>
 8000524:	a201      	add	r2, pc, #4	; (adr r2, 800052c <Run_State+0x18>)
 8000526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052a:	bf00      	nop
 800052c:	08000555 	.word	0x08000555
 8000530:	0800055d 	.word	0x0800055d
 8000534:	08000565 	.word	0x08000565
 8000538:	0800056d 	.word	0x0800056d
 800053c:	08000575 	.word	0x08000575
 8000540:	0800057d 	.word	0x0800057d
 8000544:	08000585 	.word	0x08000585
 8000548:	0800058d 	.word	0x0800058d
 800054c:	08000595 	.word	0x08000595
 8000550:	0800059d 	.word	0x0800059d
        case INIT:
            printf("In RED state\n");
 8000554:	4817      	ldr	r0, [pc, #92]	; (80005b4 <Run_State+0xa0>)
 8000556:	f006 fd93 	bl	8007080 <puts>
            // Code specific to RED state
            break;
 800055a:	e027      	b.n	80005ac <Run_State+0x98>
        case FAULT:
            printf("In YELLOW state\n");
 800055c:	4816      	ldr	r0, [pc, #88]	; (80005b8 <Run_State+0xa4>)
 800055e:	f006 fd8f 	bl	8007080 <puts>
            // Code specific to YELLOW state
            break;
 8000562:	e023      	b.n	80005ac <Run_State+0x98>
        case SAFE_TO_APPROACH:
            printf("In GREEN state\n");
 8000564:	4815      	ldr	r0, [pc, #84]	; (80005bc <Run_State+0xa8>)
 8000566:	f006 fd8b 	bl	8007080 <puts>
            // Code specific to GREEN state
            break;
 800056a:	e01f      	b.n	80005ac <Run_State+0x98>
        case READY:
            printf("In GREEN state\n");
 800056c:	4813      	ldr	r0, [pc, #76]	; (80005bc <Run_State+0xa8>)
 800056e:	f006 fd87 	bl	8007080 <puts>
            // Code specific to GREEN state
            break;
 8000572:	e01b      	b.n	80005ac <Run_State+0x98>
        case LAUNCH:
            printf("In GREEN state\n");
 8000574:	4811      	ldr	r0, [pc, #68]	; (80005bc <Run_State+0xa8>)
 8000576:	f006 fd83 	bl	8007080 <puts>
            // Code specific to GREEN state
            break;
 800057a:	e017      	b.n	80005ac <Run_State+0x98>
        case COAST:
            printf("In GREEN state\n");
 800057c:	480f      	ldr	r0, [pc, #60]	; (80005bc <Run_State+0xa8>)
 800057e:	f006 fd7f 	bl	8007080 <puts>
            // Code specific to GREEN state
            break;
 8000582:	e013      	b.n	80005ac <Run_State+0x98>
        case BRAKE:
            printf("In GREEN state\n");
 8000584:	480d      	ldr	r0, [pc, #52]	; (80005bc <Run_State+0xa8>)
 8000586:	f006 fd7b 	bl	8007080 <puts>
            // Code specific to GREEN state
            break;
 800058a:	e00f      	b.n	80005ac <Run_State+0x98>
        case CRAWL:
            printf("In GREEN state\n");
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <Run_State+0xa8>)
 800058e:	f006 fd77 	bl	8007080 <puts>
            // Code specific to GREEN state
            break;
 8000592:	e00b      	b.n	80005ac <Run_State+0x98>
        case GROUNDWARNING:
            printf("In GREEN state\n");
 8000594:	4809      	ldr	r0, [pc, #36]	; (80005bc <Run_State+0xa8>)
 8000596:	f006 fd73 	bl	8007080 <puts>
            // Code specific to GREEN state
            break;
 800059a:	e007      	b.n	80005ac <Run_State+0x98>
        case STDBY:
            printf("In GREEN state\n");
 800059c:	4807      	ldr	r0, [pc, #28]	; (80005bc <Run_State+0xa8>)
 800059e:	f006 fd6f 	bl	8007080 <puts>
            // Code specific to GREEN state
            break;
 80005a2:	e003      	b.n	80005ac <Run_State+0x98>
        default:
            printf("Invalid state\n");
 80005a4:	4806      	ldr	r0, [pc, #24]	; (80005c0 <Run_State+0xac>)
 80005a6:	f006 fd6b 	bl	8007080 <puts>
            break;
 80005aa:	bf00      	nop
    }
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	0800766c 	.word	0x0800766c
 80005b8:	0800767c 	.word	0x0800767c
 80005bc:	0800768c 	.word	0x0800768c
 80005c0:	0800769c 	.word	0x0800769c

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f001 fbe0 	bl	8001d8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f82b 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 fcb1 	bl	8000f38 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d6:	f000 fc6d 	bl	8000eb4 <MX_DMA_Init>
  MX_ADC1_Init();
 80005da:	f000 f87b 	bl	80006d4 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80005de:	f000 f97b 	bl	80008d8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80005e2:	f000 f9bf 	bl	8000964 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 80005e6:	f000 fa03 	bl	80009f0 <MX_FDCAN3_Init>
  MX_I2C1_Init();
 80005ea:	f000 fa47 	bl	8000a7c <MX_I2C1_Init>
  MX_SPI1_Init();
 80005ee:	f000 fb6f 	bl	8000cd0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80005f2:	f000 fc37 	bl	8000e64 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 80005f6:	f000 fa81 	bl	8000afc <MX_I2C2_Init>
  MX_IWDG_Init();
 80005fa:	f000 faff 	bl	8000bfc <MX_IWDG_Init>
  MX_ADC5_Init();
 80005fe:	f000 f905 	bl	800080c <MX_ADC5_Init>
  MX_I2C3_Init();
 8000602:	f000 fabb 	bl	8000b7c <MX_I2C3_Init>
  MX_SPI3_Init();
 8000606:	f000 fba1 	bl	8000d4c <MX_SPI3_Init>
  MX_LPUART1_UART_Init();
 800060a:	f000 fb15 	bl	8000c38 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800060e:	f000 fbdb 	bl	8000dc8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  enum PodState Curr_State = INIT;
 8000612:	2300      	movs	r3, #0
 8000614:	71fb      	strb	r3, [r7, #7]
  Run_State(Curr_State);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ff7b 	bl	8000514 <Run_State>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	Run_State(Curr_State);
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ff77 	bl	8000514 <Run_State>
 8000626:	e7fa      	b.n	800061e <main+0x5a>

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	2238      	movs	r2, #56	; 0x38
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 fe02 	bl	8007240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800064a:	2000      	movs	r0, #0
 800064c:	f003 fdb4 	bl	80041b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8000650:	232b      	movs	r3, #43	; 0x2b
 8000652:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000658:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2340      	movs	r3, #64	; 0x40
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000670:	2303      	movs	r3, #3
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000678:	2355      	movs	r3, #85	; 0x55
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0318 	add.w	r3, r7, #24
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fe47 	bl	8004320 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000698:	f000 fd1e 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2303      	movs	r3, #3
 80006a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2104      	movs	r1, #4
 80006b8:	4618      	mov	r0, r3
 80006ba:	f004 f943 	bl	8004944 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006c4:	f000 fd08 	bl	80010d8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80006c8:	f004 fb12 	bl	8004cf0 <HAL_RCC_EnableCSS>
}
 80006cc:	bf00      	nop
 80006ce:	3750      	adds	r7, #80	; 0x50
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	; 0x30
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2220      	movs	r2, #32
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f006 fda7 	bl	8007240 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006f2:	4b44      	ldr	r3, [pc, #272]	; (8000804 <MX_ADC1_Init+0x130>)
 80006f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006fa:	4b42      	ldr	r3, [pc, #264]	; (8000804 <MX_ADC1_Init+0x130>)
 80006fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000700:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000702:	4b40      	ldr	r3, [pc, #256]	; (8000804 <MX_ADC1_Init+0x130>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <MX_ADC1_Init+0x130>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800070e:	4b3d      	ldr	r3, [pc, #244]	; (8000804 <MX_ADC1_Init+0x130>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000714:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <MX_ADC1_Init+0x130>)
 8000716:	2201      	movs	r2, #1
 8000718:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <MX_ADC1_Init+0x130>)
 800071c:	2204      	movs	r2, #4
 800071e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000720:	4b38      	ldr	r3, [pc, #224]	; (8000804 <MX_ADC1_Init+0x130>)
 8000722:	2200      	movs	r2, #0
 8000724:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000726:	4b37      	ldr	r3, [pc, #220]	; (8000804 <MX_ADC1_Init+0x130>)
 8000728:	2201      	movs	r2, #1
 800072a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 800072c:	4b35      	ldr	r3, [pc, #212]	; (8000804 <MX_ADC1_Init+0x130>)
 800072e:	2204      	movs	r2, #4
 8000730:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000732:	4b34      	ldr	r3, [pc, #208]	; (8000804 <MX_ADC1_Init+0x130>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <MX_ADC1_Init+0x130>)
 800073c:	2200      	movs	r2, #0
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000740:	4b30      	ldr	r3, [pc, #192]	; (8000804 <MX_ADC1_Init+0x130>)
 8000742:	2200      	movs	r2, #0
 8000744:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <MX_ADC1_Init+0x130>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <MX_ADC1_Init+0x130>)
 8000750:	2200      	movs	r2, #0
 8000752:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <MX_ADC1_Init+0x130>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075c:	4829      	ldr	r0, [pc, #164]	; (8000804 <MX_ADC1_Init+0x130>)
 800075e:	f001 fd5d 	bl	800221c <HAL_ADC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000768:	f000 fcb6 	bl	80010d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	4619      	mov	r1, r3
 8000776:	4823      	ldr	r0, [pc, #140]	; (8000804 <MX_ADC1_Init+0x130>)
 8000778:	f002 fb72 	bl	8002e60 <HAL_ADCEx_MultiModeConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000782:	f000 fca9 	bl	80010d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MX_ADC1_Init+0x134>)
 8000788:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078a:	2306      	movs	r3, #6
 800078c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000792:	237f      	movs	r3, #127	; 0x7f
 8000794:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000796:	2304      	movs	r3, #4
 8000798:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	4818      	ldr	r0, [pc, #96]	; (8000804 <MX_ADC1_Init+0x130>)
 80007a4:	f001 fef6 	bl	8002594 <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007ae:	f000 fc93 	bl	80010d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007b2:	230c      	movs	r3, #12
 80007b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4812      	ldr	r0, [pc, #72]	; (8000804 <MX_ADC1_Init+0x130>)
 80007bc:	f001 feea 	bl	8002594 <HAL_ADC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80007c6:	f000 fc87 	bl	80010d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007ca:	2312      	movs	r3, #18
 80007cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_ADC1_Init+0x130>)
 80007d4:	f001 fede 	bl	8002594 <HAL_ADC_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 80007de:	f000 fc7b 	bl	80010d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007e2:	2318      	movs	r3, #24
 80007e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_ADC1_Init+0x130>)
 80007ec:	f001 fed2 	bl	8002594 <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80007f6:	f000 fc6f 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3730      	adds	r7, #48	; 0x30
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000084 	.word	0x20000084
 8000808:	04300002 	.word	0x04300002

0800080c <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2220      	movs	r2, #32
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f006 fd11 	bl	8007240 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_ADC5_Init+0xc0>)
 8000820:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <MX_ADC5_Init+0xc4>)
 8000822:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_ADC5_Init+0xc0>)
 8000826:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800082a:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 800082c:	4b27      	ldr	r3, [pc, #156]	; (80008cc <MX_ADC5_Init+0xc0>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_ADC5_Init+0xc0>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_ADC5_Init+0xc0>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_ADC5_Init+0xc0>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_ADC5_Init+0xc0>)
 8000846:	2204      	movs	r2, #4
 8000848:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_ADC5_Init+0xc0>)
 800084c:	2200      	movs	r2, #0
 800084e:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_ADC5_Init+0xc0>)
 8000852:	2200      	movs	r2, #0
 8000854:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_ADC5_Init+0xc0>)
 8000858:	2201      	movs	r2, #1
 800085a:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_ADC5_Init+0xc0>)
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_ADC5_Init+0xc0>)
 8000866:	2200      	movs	r2, #0
 8000868:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_ADC5_Init+0xc0>)
 800086c:	2200      	movs	r2, #0
 800086e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_ADC5_Init+0xc0>)
 8000872:	2200      	movs	r2, #0
 8000874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_ADC5_Init+0xc0>)
 800087a:	2200      	movs	r2, #0
 800087c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_ADC5_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000886:	4811      	ldr	r0, [pc, #68]	; (80008cc <MX_ADC5_Init+0xc0>)
 8000888:	f001 fcc8 	bl	800221c <HAL_ADC_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000892:	f000 fc21 	bl	80010d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_ADC5_Init+0xc8>)
 8000898:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800089a:	2306      	movs	r3, #6
 800089c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008a2:	237f      	movs	r3, #127	; 0x7f
 80008a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a6:	2304      	movs	r3, #4
 80008a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	; (80008cc <MX_ADC5_Init+0xc0>)
 80008b4:	f001 fe6e 	bl	8002594 <HAL_ADC_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 80008be:	f000 fc0b 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	3720      	adds	r7, #32
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000f0 	.word	0x200000f0
 80008d0:	50000600 	.word	0x50000600
 80008d4:	08600004 	.word	0x08600004

080008d8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_FDCAN1_Init+0x84>)
 80008de:	4a20      	ldr	r2, [pc, #128]	; (8000960 <MX_FDCAN1_Init+0x88>)
 80008e0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_FDCAN1_Init+0x84>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_FDCAN1_Init+0x84>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_FDCAN1_Init+0x84>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_FDCAN1_Init+0x84>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_FDCAN1_Init+0x84>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_FDCAN1_Init+0x84>)
 8000902:	2200      	movs	r2, #0
 8000904:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_FDCAN1_Init+0x84>)
 8000908:	2210      	movs	r2, #16
 800090a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_FDCAN1_Init+0x84>)
 800090e:	2201      	movs	r2, #1
 8000910:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_FDCAN1_Init+0x84>)
 8000914:	2202      	movs	r2, #2
 8000916:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_FDCAN1_Init+0x84>)
 800091a:	2202      	movs	r2, #2
 800091c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_FDCAN1_Init+0x84>)
 8000920:	2201      	movs	r2, #1
 8000922:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MX_FDCAN1_Init+0x84>)
 8000926:	2201      	movs	r2, #1
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_FDCAN1_Init+0x84>)
 800092c:	2201      	movs	r2, #1
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_FDCAN1_Init+0x84>)
 8000932:	2201      	movs	r2, #1
 8000934:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_FDCAN1_Init+0x84>)
 8000938:	2200      	movs	r2, #0
 800093a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_FDCAN1_Init+0x84>)
 800093e:	2200      	movs	r2, #0
 8000940:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_FDCAN1_Init+0x84>)
 8000944:	2200      	movs	r2, #0
 8000946:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_FDCAN1_Init+0x84>)
 800094a:	f002 fe5b 	bl	8003604 <HAL_FDCAN_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000954:	f000 fbc0 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200001bc 	.word	0x200001bc
 8000960:	40006400 	.word	0x40006400

08000964 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 800096a:	4a20      	ldr	r2, [pc, #128]	; (80009ec <MX_FDCAN2_Init+0x88>)
 800096c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 8000982:	2200      	movs	r2, #0
 8000984:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 8000988:	2200      	movs	r2, #0
 800098a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 800098e:	2200      	movs	r2, #0
 8000990:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 8000994:	2210      	movs	r2, #16
 8000996:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 800099a:	2201      	movs	r2, #1
 800099c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 80009a0:	2202      	movs	r2, #2
 80009a2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 80009be:	2201      	movs	r2, #1
 80009c0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_FDCAN2_Init+0x84>)
 80009d6:	f002 fe15 	bl	8003604 <HAL_FDCAN_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80009e0:	f000 fb7a 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000220 	.word	0x20000220
 80009ec:	40006800 	.word	0x40006800

080009f0 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 80009f6:	4a20      	ldr	r2, [pc, #128]	; (8000a78 <MX_FDCAN3_Init+0x88>)
 80009f8:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a20:	2210      	movs	r2, #16
 8000a22:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_FDCAN3_Init+0x84>)
 8000a62:	f002 fdcf 	bl	8003604 <HAL_FDCAN_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 8000a6c:	f000 fb34 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000284 	.word	0x20000284
 8000a78:	40006c00 	.word	0x40006c00

08000a7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <MX_I2C1_Init+0x74>)
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <MX_I2C1_Init+0x78>)
 8000a84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A0A6FB;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_I2C1_Init+0x74>)
 8000a88:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <MX_I2C1_Init+0x7c>)
 8000a8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_I2C1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_I2C1_Init+0x74>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_I2C1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_I2C1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab6:	480e      	ldr	r0, [pc, #56]	; (8000af0 <MX_I2C1_Init+0x74>)
 8000ab8:	f003 f904 	bl	8003cc4 <HAL_I2C_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ac2:	f000 fb09 	bl	80010d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4809      	ldr	r0, [pc, #36]	; (8000af0 <MX_I2C1_Init+0x74>)
 8000aca:	f003 f996 	bl	8003dfa <HAL_I2CEx_ConfigAnalogFilter>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ad4:	f000 fb00 	bl	80010d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_I2C1_Init+0x74>)
 8000adc:	f003 f9d8 	bl	8003e90 <HAL_I2CEx_ConfigDigitalFilter>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ae6:	f000 faf7 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200002e8 	.word	0x200002e8
 8000af4:	40005400 	.word	0x40005400
 8000af8:	10a0a6fb 	.word	0x10a0a6fb

08000afc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b02:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <MX_I2C2_Init+0x78>)
 8000b04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10A0A6FB;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b08:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <MX_I2C2_Init+0x7c>)
 8000b0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b36:	480e      	ldr	r0, [pc, #56]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b38:	f003 f8c4 	bl	8003cc4 <HAL_I2C_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b42:	f000 fac9 	bl	80010d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b4a:	f003 f956 	bl	8003dfa <HAL_I2CEx_ConfigAnalogFilter>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b54:	f000 fac0 	bl	80010d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b5c:	f003 f998 	bl	8003e90 <HAL_I2CEx_ConfigDigitalFilter>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b66:	f000 fab7 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000033c 	.word	0x2000033c
 8000b74:	40005800 	.word	0x40005800
 8000b78:	10a0a6fb 	.word	0x10a0a6fb

08000b7c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_I2C3_Init+0x74>)
 8000b82:	4a1c      	ldr	r2, [pc, #112]	; (8000bf4 <MX_I2C3_Init+0x78>)
 8000b84:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10A0A6FB;
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_I2C3_Init+0x74>)
 8000b88:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <MX_I2C3_Init+0x7c>)
 8000b8a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_I2C3_Init+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_I2C3_Init+0x74>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_I2C3_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_I2C3_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_I2C3_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_I2C3_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_I2C3_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bb6:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <MX_I2C3_Init+0x74>)
 8000bb8:	f003 f884 	bl	8003cc4 <HAL_I2C_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000bc2:	f000 fa89 	bl	80010d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <MX_I2C3_Init+0x74>)
 8000bca:	f003 f916 	bl	8003dfa <HAL_I2CEx_ConfigAnalogFilter>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000bd4:	f000 fa80 	bl	80010d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_I2C3_Init+0x74>)
 8000bdc:	f003 f958 	bl	8003e90 <HAL_I2CEx_ConfigDigitalFilter>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000be6:	f000 fa77 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000390 	.word	0x20000390
 8000bf4:	40007800 	.word	0x40007800
 8000bf8:	10a0a6fb 	.word	0x10a0a6fb

08000bfc <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_IWDG_Init+0x34>)
 8000c02:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <MX_IWDG_Init+0x38>)
 8000c04:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <MX_IWDG_Init+0x34>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_IWDG_Init+0x34>)
 8000c0e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c12:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_IWDG_Init+0x34>)
 8000c16:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c1a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <MX_IWDG_Init+0x34>)
 8000c1e:	f003 f983 	bl	8003f28 <HAL_IWDG_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000c28:	f000 fa56 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000504 	.word	0x20000504
 8000c34:	40003000 	.word	0x40003000

08000c38 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c3c:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <MX_LPUART1_UART_Init+0x90>)
 8000c3e:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <MX_LPUART1_UART_Init+0x94>)
 8000c40:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <MX_LPUART1_UART_Init+0x90>)
 8000c44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c48:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <MX_LPUART1_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <MX_LPUART1_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <MX_LPUART1_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_LPUART1_UART_Init+0x90>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <MX_LPUART1_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_LPUART1_UART_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_LPUART1_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_LPUART1_UART_Init+0x90>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <MX_LPUART1_UART_Init+0x90>)
 8000c82:	f005 fe04 	bl	800688e <HAL_RS485Ex_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c8c:	f000 fa24 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c90:	2100      	movs	r1, #0
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <MX_LPUART1_UART_Init+0x90>)
 8000c94:	f005 fe9d 	bl	80069d2 <HAL_UARTEx_SetTxFifoThreshold>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c9e:	f000 fa1b 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <MX_LPUART1_UART_Init+0x90>)
 8000ca6:	f005 fed2 	bl	8006a4e <HAL_UARTEx_SetRxFifoThreshold>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cb0:	f000 fa12 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_LPUART1_UART_Init+0x90>)
 8000cb6:	f005 fe53 	bl	8006960 <HAL_UARTEx_DisableFifoMode>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cc0:	f000 fa0a 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000514 	.word	0x20000514
 8000ccc:	40008000 	.word	0x40008000

08000cd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	; (8000d48 <MX_SPI1_Init+0x78>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000cdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ce0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000cea:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d1e:	2207      	movs	r2, #7
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_SPI1_Init+0x74>)
 8000d30:	f004 fa9e 	bl	8005270 <HAL_SPI_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d3a:	f000 f9cd 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200005a8 	.word	0x200005a8
 8000d48:	40013000 	.word	0x40013000

08000d4c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000d52:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <MX_SPI3_Init+0x78>)
 8000d54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000d58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d5c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000d66:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d6a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000d9a:	2207      	movs	r2, #7
 8000d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000da6:	2208      	movs	r2, #8
 8000da8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_SPI3_Init+0x74>)
 8000dac:	f004 fa60 	bl	8005270 <HAL_SPI_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000db6:	f000 f98f 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000060c 	.word	0x2000060c
 8000dc4:	40003c00 	.word	0x40003c00

08000dc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <MX_TIM2_Init+0x98>)
 8000de8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16999;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_TIM2_Init+0x98>)
 8000df0:	f244 2267 	movw	r2, #16999	; 0x4267
 8000df4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_TIM2_Init+0x98>)
 8000df8:	2210      	movs	r2, #16
 8000dfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_TIM2_Init+0x98>)
 8000dfe:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_TIM2_Init+0x98>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_TIM2_Init+0x98>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e10:	4813      	ldr	r0, [pc, #76]	; (8000e60 <MX_TIM2_Init+0x98>)
 8000e12:	f004 fad8 	bl	80053c6 <HAL_TIM_Base_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000e1c:	f000 f95c 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480c      	ldr	r0, [pc, #48]	; (8000e60 <MX_TIM2_Init+0x98>)
 8000e2e:	f004 fc9f 	bl	8005770 <HAL_TIM_ConfigClockSource>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000e38:	f000 f94e 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_TIM2_Init+0x98>)
 8000e4a:	f004 ff29 	bl	8005ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000e54:	f000 f940 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000670 	.word	0x20000670

08000e64 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_USB_PCD_Init+0x48>)
 8000e6a:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <MX_USB_PCD_Init+0x4c>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_USB_PCD_Init+0x48>)
 8000e70:	2208      	movs	r2, #8
 8000e72:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <MX_USB_PCD_Init+0x48>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_USB_PCD_Init+0x48>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <MX_USB_PCD_Init+0x48>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_USB_PCD_Init+0x48>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <MX_USB_PCD_Init+0x48>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_USB_PCD_Init+0x48>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <MX_USB_PCD_Init+0x48>)
 8000e9a:	f003 f894 	bl	8003fc6 <HAL_PCD_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ea4:	f000 f918 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200006bc 	.word	0x200006bc
 8000eb0:	40005c00 	.word	0x40005c00

08000eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000eba:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_DMA_Init+0x80>)
 8000ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ebe:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <MX_DMA_Init+0x80>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <MX_DMA_Init+0x80>)
 8000ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_DMA_Init+0x80>)
 8000ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed6:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <MX_DMA_Init+0x80>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6493      	str	r3, [r2, #72]	; 0x48
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_DMA_Init+0x80>)
 8000ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	200b      	movs	r0, #11
 8000ef0:	f002 f999 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ef4:	200b      	movs	r0, #11
 8000ef6:	f002 f9b0 	bl	800325a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	200c      	movs	r0, #12
 8000f00:	f002 f991 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f04:	200c      	movs	r0, #12
 8000f06:	f002 f9a8 	bl	800325a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	200d      	movs	r0, #13
 8000f10:	f002 f989 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f14:	200d      	movs	r0, #13
 8000f16:	f002 f9a0 	bl	800325a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	200e      	movs	r0, #14
 8000f20:	f002 f981 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f24:	200e      	movs	r0, #14
 8000f26:	f002 f998 	bl	800325a <HAL_NVIC_EnableIRQ>

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4e:	4b5d      	ldr	r3, [pc, #372]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a5c      	ldr	r2, [pc, #368]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b5a      	ldr	r3, [pc, #360]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b57      	ldr	r3, [pc, #348]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a56      	ldr	r2, [pc, #344]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b54      	ldr	r3, [pc, #336]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7e:	4b51      	ldr	r3, [pc, #324]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a50      	ldr	r2, [pc, #320]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b4e      	ldr	r3, [pc, #312]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0320 	and.w	r3, r3, #32
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b4b      	ldr	r3, [pc, #300]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a4a      	ldr	r2, [pc, #296]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b48      	ldr	r3, [pc, #288]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	4b45      	ldr	r3, [pc, #276]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a44      	ldr	r2, [pc, #272]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b42      	ldr	r3, [pc, #264]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	4b3f      	ldr	r3, [pc, #252]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a3e      	ldr	r2, [pc, #248]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b3c      	ldr	r3, [pc, #240]	; (80010c4 <MX_GPIO_Init+0x18c>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f64e 71c0 	movw	r1, #61376	; 0xefc0
 8000fe4:	4838      	ldr	r0, [pc, #224]	; (80010c8 <MX_GPIO_Init+0x190>)
 8000fe6:	f002 fe55 	bl	8003c94 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff0:	4836      	ldr	r0, [pc, #216]	; (80010cc <MX_GPIO_Init+0x194>)
 8000ff2:	f002 fe4f 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ffc:	4834      	ldr	r0, [pc, #208]	; (80010d0 <MX_GPIO_Init+0x198>)
 8000ffe:	f002 fe49 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001002:	2200      	movs	r2, #0
 8001004:	f64f 711c 	movw	r1, #65308	; 0xff1c
 8001008:	4832      	ldr	r0, [pc, #200]	; (80010d4 <MX_GPIO_Init+0x19c>)
 800100a:	f002 fe43 	bl	8003c94 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800100e:	233c      	movs	r3, #60	; 0x3c
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4829      	ldr	r0, [pc, #164]	; (80010c8 <MX_GPIO_Init+0x190>)
 8001022:	f002 fcb5 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9
                           PE10 PE11 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001026:	f64e 73c0 	movw	r3, #61376	; 0xefc0
 800102a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	4822      	ldr	r0, [pc, #136]	; (80010c8 <MX_GPIO_Init+0x190>)
 8001040:	f002 fca6 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	481b      	ldr	r0, [pc, #108]	; (80010cc <MX_GPIO_Init+0x194>)
 800105e:	f002 fc97 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	4815      	ldr	r0, [pc, #84]	; (80010d0 <MX_GPIO_Init+0x198>)
 800107c:	f002 fc88 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001080:	f64f 731c 	movw	r3, #65308	; 0xff1c
 8001084:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	480e      	ldr	r0, [pc, #56]	; (80010d4 <MX_GPIO_Init+0x19c>)
 800109a:	f002 fc79 	bl	8003990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800109e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f002 fc6b 	bl	8003990 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ba:	bf00      	nop
 80010bc:	3730      	adds	r7, #48	; 0x30
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48001000 	.word	0x48001000
 80010cc:	48000800 	.word	0x48000800
 80010d0:	48000400 	.word	0x48000400
 80010d4:	48000c00 	.word	0x48000c00

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <HV_on>:
	HAL_GPIO_WritePin(GPIOE, RELAY9, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_SET); //RESISTOR ON
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_SET);
	HAL_TIM_Base_Start_IT(&htim2);
}
void HV_on(void){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, RELAY11, GPIO_PIN_SET); //HIGHSIDE ON
 80010e8:	4814      	ldr	r0, [pc, #80]	; (800113c <HV_on+0x58>)
 80010ea:	f005 fd76 	bl	8006bda <atoi>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	4812      	ldr	r0, [pc, #72]	; (8001140 <HV_on+0x5c>)
 80010f8:	f002 fdcc 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY16, GPIO_PIN_SET);
 80010fc:	4811      	ldr	r0, [pc, #68]	; (8001144 <HV_on+0x60>)
 80010fe:	f005 fd6c 	bl	8006bda <atoi>
 8001102:	4603      	mov	r3, r0
 8001104:	b29b      	uxth	r3, r3
 8001106:	2201      	movs	r2, #1
 8001108:	4619      	mov	r1, r3
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <HV_on+0x5c>)
 800110c:	f002 fdc2 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_RESET); //RESISTOR OFF
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <HV_on+0x64>)
 8001112:	f005 fd62 	bl	8006bda <atoi>
 8001116:	4603      	mov	r3, r0
 8001118:	b29b      	uxth	r3, r3
 800111a:	2200      	movs	r2, #0
 800111c:	4619      	mov	r1, r3
 800111e:	4808      	ldr	r0, [pc, #32]	; (8001140 <HV_on+0x5c>)
 8001120:	f002 fdb8 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_RESET);
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <HV_on+0x68>)
 8001126:	f005 fd58 	bl	8006bda <atoi>
 800112a:	4603      	mov	r3, r0
 800112c:	b29b      	uxth	r3, r3
 800112e:	2200      	movs	r2, #0
 8001130:	4619      	mov	r1, r3
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <HV_on+0x5c>)
 8001134:	f002 fdae 	bl	8003c94 <HAL_GPIO_WritePin>

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	080076dc 	.word	0x080076dc
 8001140:	48001000 	.word	0x48001000
 8001144:	080076e8 	.word	0x080076e8
 8001148:	080076c4 	.word	0x080076c4
 800114c:	080076d0 	.word	0x080076d0

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_MspInit+0x44>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <HAL_MspInit+0x44>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6613      	str	r3, [r2, #96]	; 0x60
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_MspInit+0x44>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_MspInit+0x44>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	4a08      	ldr	r2, [pc, #32]	; (8001194 <HAL_MspInit+0x44>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	6593      	str	r3, [r2, #88]	; 0x58
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_MspInit+0x44>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001186:	f003 f8bb 	bl	8004300 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000

08001198 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0a0      	sub	sp, #128	; 0x80
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b0:	f107 0318 	add.w	r3, r7, #24
 80011b4:	2254      	movs	r2, #84	; 0x54
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f006 f841 	bl	8007240 <memset>
  if(hadc->Instance==ADC1)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011c6:	d160      	bne.n	800128a <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	4618      	mov	r0, r3
 80011da:	f003 fdfb 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011e4:	f7ff ff78 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011e8:	4b47      	ldr	r3, [pc, #284]	; (8001308 <HAL_ADC_MspInit+0x170>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ec:	4a46      	ldr	r2, [pc, #280]	; (8001308 <HAL_ADC_MspInit+0x170>)
 80011ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f4:	4b44      	ldr	r3, [pc, #272]	; (8001308 <HAL_ADC_MspInit+0x170>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b41      	ldr	r3, [pc, #260]	; (8001308 <HAL_ADC_MspInit+0x170>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001204:	4a40      	ldr	r2, [pc, #256]	; (8001308 <HAL_ADC_MspInit+0x170>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120c:	4b3e      	ldr	r3, [pc, #248]	; (8001308 <HAL_ADC_MspInit+0x170>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001218:	230f      	movs	r3, #15
 800121a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121c:	2303      	movs	r3, #3
 800121e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f002 fbaf 	bl	8003990 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001232:	4b36      	ldr	r3, [pc, #216]	; (800130c <HAL_ADC_MspInit+0x174>)
 8001234:	4a36      	ldr	r2, [pc, #216]	; (8001310 <HAL_ADC_MspInit+0x178>)
 8001236:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001238:	4b34      	ldr	r3, [pc, #208]	; (800130c <HAL_ADC_MspInit+0x174>)
 800123a:	2205      	movs	r2, #5
 800123c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800123e:	4b33      	ldr	r3, [pc, #204]	; (800130c <HAL_ADC_MspInit+0x174>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <HAL_ADC_MspInit+0x174>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800124a:	4b30      	ldr	r3, [pc, #192]	; (800130c <HAL_ADC_MspInit+0x174>)
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001250:	4b2e      	ldr	r3, [pc, #184]	; (800130c <HAL_ADC_MspInit+0x174>)
 8001252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001256:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001258:	4b2c      	ldr	r3, [pc, #176]	; (800130c <HAL_ADC_MspInit+0x174>)
 800125a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <HAL_ADC_MspInit+0x174>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <HAL_ADC_MspInit+0x174>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800126c:	4827      	ldr	r0, [pc, #156]	; (800130c <HAL_ADC_MspInit+0x174>)
 800126e:	f002 f80f 	bl	8003290 <HAL_DMA_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001278:	f7ff ff2e 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a23      	ldr	r2, [pc, #140]	; (800130c <HAL_ADC_MspInit+0x174>)
 8001280:	655a      	str	r2, [r3, #84]	; 0x54
 8001282:	4a22      	ldr	r2, [pc, #136]	; (800130c <HAL_ADC_MspInit+0x174>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8001288:	e03a      	b.n	8001300 <HAL_ADC_MspInit+0x168>
  else if(hadc->Instance==ADC5)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a21      	ldr	r2, [pc, #132]	; (8001314 <HAL_ADC_MspInit+0x17c>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d135      	bne.n	8001300 <HAL_ADC_MspInit+0x168>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001298:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800129a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800129e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a0:	f107 0318 	add.w	r3, r7, #24
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 fd95 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 80012b0:	f7ff ff12 	bl	80010d8 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HAL_ADC_MspInit+0x170>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	4a13      	ldr	r2, [pc, #76]	; (8001308 <HAL_ADC_MspInit+0x170>)
 80012ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_ADC_MspInit+0x170>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_ADC_MspInit+0x170>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <HAL_ADC_MspInit+0x170>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_ADC_MspInit+0x170>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ea:	2303      	movs	r3, #3
 80012ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012f6:	4619      	mov	r1, r3
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fc:	f002 fb48 	bl	8003990 <HAL_GPIO_Init>
}
 8001300:	bf00      	nop
 8001302:	3780      	adds	r7, #128	; 0x80
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000
 800130c:	2000015c 	.word	0x2000015c
 8001310:	40020008 	.word	0x40020008
 8001314:	50000600 	.word	0x50000600

08001318 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0a2      	sub	sp, #136	; 0x88
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	2254      	movs	r2, #84	; 0x54
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f005 ff81 	bl	8007240 <memset>
  if(hfdcan->Instance==FDCAN1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6e      	ldr	r2, [pc, #440]	; (80014fc <HAL_FDCAN_MspInit+0x1e4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d143      	bne.n	80013d0 <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800134e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001352:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	4618      	mov	r0, r3
 800135a:	f003 fd3b 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001364:	f7ff feb8 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001368:	4b65      	ldr	r3, [pc, #404]	; (8001500 <HAL_FDCAN_MspInit+0x1e8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	4a64      	ldr	r2, [pc, #400]	; (8001500 <HAL_FDCAN_MspInit+0x1e8>)
 8001370:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001372:	4b63      	ldr	r3, [pc, #396]	; (8001500 <HAL_FDCAN_MspInit+0x1e8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d10b      	bne.n	8001392 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800137a:	4b62      	ldr	r3, [pc, #392]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	4a61      	ldr	r2, [pc, #388]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 8001380:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001384:	6593      	str	r3, [r2, #88]	; 0x58
 8001386:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001392:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	4a5b      	ldr	r2, [pc, #364]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139e:	4b59      	ldr	r3, [pc, #356]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013aa:	2303      	movs	r3, #3
 80013ac:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80013bc:	2309      	movs	r3, #9
 80013be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013c6:	4619      	mov	r1, r3
 80013c8:	484f      	ldr	r0, [pc, #316]	; (8001508 <HAL_FDCAN_MspInit+0x1f0>)
 80013ca:	f002 fae1 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80013ce:	e091      	b.n	80014f4 <HAL_FDCAN_MspInit+0x1dc>
  else if(hfdcan->Instance==FDCAN2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a4d      	ldr	r2, [pc, #308]	; (800150c <HAL_FDCAN_MspInit+0x1f4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d144      	bne.n	8001464 <HAL_FDCAN_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80013da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013de:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80013e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e4:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e6:	f107 0320 	add.w	r3, r7, #32
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fcf2 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_FDCAN_MspInit+0xe2>
      Error_Handler();
 80013f6:	f7ff fe6f 	bl	80010d8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80013fa:	4b41      	ldr	r3, [pc, #260]	; (8001500 <HAL_FDCAN_MspInit+0x1e8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	3301      	adds	r3, #1
 8001400:	4a3f      	ldr	r2, [pc, #252]	; (8001500 <HAL_FDCAN_MspInit+0x1e8>)
 8001402:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001404:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <HAL_FDCAN_MspInit+0x1e8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d10b      	bne.n	8001424 <HAL_FDCAN_MspInit+0x10c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800140c:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 800140e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001410:	4a3c      	ldr	r2, [pc, #240]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 8001412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001416:	6593      	str	r3, [r2, #88]	; 0x58
 8001418:	4b3a      	ldr	r3, [pc, #232]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	4b37      	ldr	r3, [pc, #220]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001428:	4a36      	ldr	r2, [pc, #216]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001430:	4b34      	ldr	r3, [pc, #208]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800143c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001440:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001450:	2309      	movs	r3, #9
 8001452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800145a:	4619      	mov	r1, r3
 800145c:	482c      	ldr	r0, [pc, #176]	; (8001510 <HAL_FDCAN_MspInit+0x1f8>)
 800145e:	f002 fa97 	bl	8003990 <HAL_GPIO_Init>
}
 8001462:	e047      	b.n	80014f4 <HAL_FDCAN_MspInit+0x1dc>
  else if(hfdcan->Instance==FDCAN3)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a2a      	ldr	r2, [pc, #168]	; (8001514 <HAL_FDCAN_MspInit+0x1fc>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d142      	bne.n	80014f4 <HAL_FDCAN_MspInit+0x1dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001478:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	4618      	mov	r0, r3
 8001480:	f003 fca8 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_FDCAN_MspInit+0x176>
      Error_Handler();
 800148a:	f7ff fe25 	bl	80010d8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_FDCAN_MspInit+0x1e8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	4a1a      	ldr	r2, [pc, #104]	; (8001500 <HAL_FDCAN_MspInit+0x1e8>)
 8001496:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_FDCAN_MspInit+0x1e8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d10b      	bne.n	80014b8 <HAL_FDCAN_MspInit+0x1a0>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 80014a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014aa:	6593      	str	r3, [r2, #88]	; 0x58
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	4a11      	ldr	r2, [pc, #68]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 80014be:	f043 0302 	orr.w	r3, r3, #2
 80014c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_FDCAN_MspInit+0x1ec>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80014d0:	2318      	movs	r3, #24
 80014d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 80014e2:	230b      	movs	r3, #11
 80014e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014ec:	4619      	mov	r1, r3
 80014ee:	4808      	ldr	r0, [pc, #32]	; (8001510 <HAL_FDCAN_MspInit+0x1f8>)
 80014f0:	f002 fa4e 	bl	8003990 <HAL_GPIO_Init>
}
 80014f4:	bf00      	nop
 80014f6:	3788      	adds	r7, #136	; 0x88
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40006400 	.word	0x40006400
 8001500:	20000998 	.word	0x20000998
 8001504:	40021000 	.word	0x40021000
 8001508:	48000c00 	.word	0x48000c00
 800150c:	40006800 	.word	0x40006800
 8001510:	48000400 	.word	0x48000400
 8001514:	40006c00 	.word	0x40006c00

08001518 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b0a4      	sub	sp, #144	; 0x90
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001534:	2254      	movs	r2, #84	; 0x54
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f005 fe81 	bl	8007240 <memset>
  if(hi2c->Instance==I2C1)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a8a      	ldr	r2, [pc, #552]	; (800176c <HAL_I2C_MspInit+0x254>)
 8001544:	4293      	cmp	r3, r2
 8001546:	f040 80af 	bne.w	80016a8 <HAL_I2C_MspInit+0x190>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800154a:	2340      	movs	r3, #64	; 0x40
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800154e:	2300      	movs	r3, #0
 8001550:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fc3c 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001562:	f7ff fdb9 	bl	80010d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	4b82      	ldr	r3, [pc, #520]	; (8001770 <HAL_I2C_MspInit+0x258>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	4a81      	ldr	r2, [pc, #516]	; (8001770 <HAL_I2C_MspInit+0x258>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001572:	4b7f      	ldr	r3, [pc, #508]	; (8001770 <HAL_I2C_MspInit+0x258>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	4b7c      	ldr	r3, [pc, #496]	; (8001770 <HAL_I2C_MspInit+0x258>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	4a7b      	ldr	r2, [pc, #492]	; (8001770 <HAL_I2C_MspInit+0x258>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158a:	4b79      	ldr	r3, [pc, #484]	; (8001770 <HAL_I2C_MspInit+0x258>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	623b      	str	r3, [r7, #32]
 8001594:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800159a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159c:	2312      	movs	r3, #18
 800159e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ae:	2304      	movs	r3, #4
 80015b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015b8:	4619      	mov	r1, r3
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015be:	f002 f9e7 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c6:	2312      	movs	r3, #18
 80015c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d8:	2304      	movs	r3, #4
 80015da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015e2:	4619      	mov	r1, r3
 80015e4:	4863      	ldr	r0, [pc, #396]	; (8001774 <HAL_I2C_MspInit+0x25c>)
 80015e6:	f002 f9d3 	bl	8003990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ea:	4b61      	ldr	r3, [pc, #388]	; (8001770 <HAL_I2C_MspInit+0x258>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	4a60      	ldr	r2, [pc, #384]	; (8001770 <HAL_I2C_MspInit+0x258>)
 80015f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015f4:	6593      	str	r3, [r2, #88]	; 0x58
 80015f6:	4b5e      	ldr	r3, [pc, #376]	; (8001770 <HAL_I2C_MspInit+0x258>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 8001602:	4b5d      	ldr	r3, [pc, #372]	; (8001778 <HAL_I2C_MspInit+0x260>)
 8001604:	4a5d      	ldr	r2, [pc, #372]	; (800177c <HAL_I2C_MspInit+0x264>)
 8001606:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001608:	4b5b      	ldr	r3, [pc, #364]	; (8001778 <HAL_I2C_MspInit+0x260>)
 800160a:	2210      	movs	r2, #16
 800160c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160e:	4b5a      	ldr	r3, [pc, #360]	; (8001778 <HAL_I2C_MspInit+0x260>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001614:	4b58      	ldr	r3, [pc, #352]	; (8001778 <HAL_I2C_MspInit+0x260>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800161a:	4b57      	ldr	r3, [pc, #348]	; (8001778 <HAL_I2C_MspInit+0x260>)
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001620:	4b55      	ldr	r3, [pc, #340]	; (8001778 <HAL_I2C_MspInit+0x260>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001626:	4b54      	ldr	r3, [pc, #336]	; (8001778 <HAL_I2C_MspInit+0x260>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800162c:	4b52      	ldr	r3, [pc, #328]	; (8001778 <HAL_I2C_MspInit+0x260>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001632:	4b51      	ldr	r3, [pc, #324]	; (8001778 <HAL_I2C_MspInit+0x260>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001638:	484f      	ldr	r0, [pc, #316]	; (8001778 <HAL_I2C_MspInit+0x260>)
 800163a:	f001 fe29 	bl	8003290 <HAL_DMA_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_I2C_MspInit+0x130>
    {
      Error_Handler();
 8001644:	f7ff fd48 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a4b      	ldr	r2, [pc, #300]	; (8001778 <HAL_I2C_MspInit+0x260>)
 800164c:	63da      	str	r2, [r3, #60]	; 0x3c
 800164e:	4a4a      	ldr	r2, [pc, #296]	; (8001778 <HAL_I2C_MspInit+0x260>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 8001654:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <HAL_I2C_MspInit+0x268>)
 8001656:	4a4b      	ldr	r2, [pc, #300]	; (8001784 <HAL_I2C_MspInit+0x26c>)
 8001658:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800165a:	4b49      	ldr	r3, [pc, #292]	; (8001780 <HAL_I2C_MspInit+0x268>)
 800165c:	2211      	movs	r2, #17
 800165e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001660:	4b47      	ldr	r3, [pc, #284]	; (8001780 <HAL_I2C_MspInit+0x268>)
 8001662:	2210      	movs	r2, #16
 8001664:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001666:	4b46      	ldr	r3, [pc, #280]	; (8001780 <HAL_I2C_MspInit+0x268>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800166c:	4b44      	ldr	r3, [pc, #272]	; (8001780 <HAL_I2C_MspInit+0x268>)
 800166e:	2280      	movs	r2, #128	; 0x80
 8001670:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001672:	4b43      	ldr	r3, [pc, #268]	; (8001780 <HAL_I2C_MspInit+0x268>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001678:	4b41      	ldr	r3, [pc, #260]	; (8001780 <HAL_I2C_MspInit+0x268>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800167e:	4b40      	ldr	r3, [pc, #256]	; (8001780 <HAL_I2C_MspInit+0x268>)
 8001680:	2200      	movs	r2, #0
 8001682:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001684:	4b3e      	ldr	r3, [pc, #248]	; (8001780 <HAL_I2C_MspInit+0x268>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800168a:	483d      	ldr	r0, [pc, #244]	; (8001780 <HAL_I2C_MspInit+0x268>)
 800168c:	f001 fe00 	bl	8003290 <HAL_DMA_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_MspInit+0x182>
    {
      Error_Handler();
 8001696:	f7ff fd1f 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a38      	ldr	r2, [pc, #224]	; (8001780 <HAL_I2C_MspInit+0x268>)
 800169e:	639a      	str	r2, [r3, #56]	; 0x38
 80016a0:	4a37      	ldr	r2, [pc, #220]	; (8001780 <HAL_I2C_MspInit+0x268>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80016a6:	e0dd      	b.n	8001864 <HAL_I2C_MspInit+0x34c>
  else if(hi2c->Instance==I2C2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a36      	ldr	r2, [pc, #216]	; (8001788 <HAL_I2C_MspInit+0x270>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d16e      	bne.n	8001790 <HAL_I2C_MspInit+0x278>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 fb88 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 80016ca:	f7ff fd05 	bl	80010d8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4b28      	ldr	r3, [pc, #160]	; (8001770 <HAL_I2C_MspInit+0x258>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a27      	ldr	r2, [pc, #156]	; (8001770 <HAL_I2C_MspInit+0x258>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <HAL_I2C_MspInit+0x258>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <HAL_I2C_MspInit+0x258>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a21      	ldr	r2, [pc, #132]	; (8001770 <HAL_I2C_MspInit+0x258>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <HAL_I2C_MspInit+0x258>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016fe:	2310      	movs	r3, #16
 8001700:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001702:	2312      	movs	r3, #18
 8001704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001714:	2304      	movs	r3, #4
 8001716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800171e:	4619      	mov	r1, r3
 8001720:	481a      	ldr	r0, [pc, #104]	; (800178c <HAL_I2C_MspInit+0x274>)
 8001722:	f002 f935 	bl	8003990 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800172c:	2312      	movs	r3, #18
 800172e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800173e:	2304      	movs	r3, #4
 8001740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174e:	f002 f91f 	bl	8003990 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_I2C_MspInit+0x258>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001756:	4a06      	ldr	r2, [pc, #24]	; (8001770 <HAL_I2C_MspInit+0x258>)
 8001758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800175c:	6593      	str	r3, [r2, #88]	; 0x58
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <HAL_I2C_MspInit+0x258>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
}
 800176a:	e07b      	b.n	8001864 <HAL_I2C_MspInit+0x34c>
 800176c:	40005400 	.word	0x40005400
 8001770:	40021000 	.word	0x40021000
 8001774:	48000400 	.word	0x48000400
 8001778:	200003e4 	.word	0x200003e4
 800177c:	4002001c 	.word	0x4002001c
 8001780:	20000444 	.word	0x20000444
 8001784:	40020030 	.word	0x40020030
 8001788:	40005800 	.word	0x40005800
 800178c:	48000800 	.word	0x48000800
  else if(hi2c->Instance==I2C3)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a35      	ldr	r2, [pc, #212]	; (800186c <HAL_I2C_MspInit+0x354>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d164      	bne.n	8001864 <HAL_I2C_MspInit+0x34c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800179a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 fb13 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_I2C_MspInit+0x2a0>
      Error_Handler();
 80017b4:	f7ff fc90 	bl	80010d8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_I2C_MspInit+0x358>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017bc:	4a2c      	ldr	r2, [pc, #176]	; (8001870 <HAL_I2C_MspInit+0x358>)
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c4:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <HAL_I2C_MspInit+0x358>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d6:	2312      	movs	r3, #18
 80017d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80017e8:	2308      	movs	r3, #8
 80017ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017f2:	4619      	mov	r1, r3
 80017f4:	481f      	ldr	r0, [pc, #124]	; (8001874 <HAL_I2C_MspInit+0x35c>)
 80017f6:	f002 f8cb 	bl	8003990 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_I2C_MspInit+0x358>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	4a1c      	ldr	r2, [pc, #112]	; (8001870 <HAL_I2C_MspInit+0x358>)
 8001800:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001804:	6593      	str	r3, [r2, #88]	; 0x58
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_I2C_MspInit+0x358>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Channel4;
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_I2C_MspInit+0x360>)
 8001814:	4a19      	ldr	r2, [pc, #100]	; (800187c <HAL_I2C_MspInit+0x364>)
 8001816:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <HAL_I2C_MspInit+0x360>)
 800181a:	2214      	movs	r2, #20
 800181c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_I2C_MspInit+0x360>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_I2C_MspInit+0x360>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_I2C_MspInit+0x360>)
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_I2C_MspInit+0x360>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_I2C_MspInit+0x360>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_I2C_MspInit+0x360>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_I2C_MspInit+0x360>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8001848:	480b      	ldr	r0, [pc, #44]	; (8001878 <HAL_I2C_MspInit+0x360>)
 800184a:	f001 fd21 	bl	8003290 <HAL_DMA_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_I2C_MspInit+0x340>
      Error_Handler();
 8001854:	f7ff fc40 	bl	80010d8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_I2C_MspInit+0x360>)
 800185c:	63da      	str	r2, [r3, #60]	; 0x3c
 800185e:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_I2C_MspInit+0x360>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001864:	bf00      	nop
 8001866:	3790      	adds	r7, #144	; 0x90
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40007800 	.word	0x40007800
 8001870:	40021000 	.word	0x40021000
 8001874:	48000800 	.word	0x48000800
 8001878:	200004a4 	.word	0x200004a4
 800187c:	40020044 	.word	0x40020044

08001880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b0a0      	sub	sp, #128	; 0x80
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001898:	f107 0318 	add.w	r3, r7, #24
 800189c:	2254      	movs	r2, #84	; 0x54
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f005 fccd 	bl	8007240 <memset>
  if(huart->Instance==LPUART1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a2d      	ldr	r2, [pc, #180]	; (8001960 <HAL_UART_MspInit+0xe0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d152      	bne.n	8001956 <HAL_UART_MspInit+0xd6>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018b0:	2320      	movs	r3, #32
 80018b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 80018b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ba:	f107 0318 	add.w	r3, r7, #24
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 fa88 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018ca:	f7ff fc05 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018ce:	4b25      	ldr	r3, [pc, #148]	; (8001964 <HAL_UART_MspInit+0xe4>)
 80018d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d2:	4a24      	ldr	r2, [pc, #144]	; (8001964 <HAL_UART_MspInit+0xe4>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <HAL_UART_MspInit+0xe4>)
 80018dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <HAL_UART_MspInit+0xe4>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	4a1e      	ldr	r2, [pc, #120]	; (8001964 <HAL_UART_MspInit+0xe4>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_UART_MspInit+0xe4>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_UART_MspInit+0xe4>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	4a18      	ldr	r2, [pc, #96]	; (8001964 <HAL_UART_MspInit+0xe4>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_UART_MspInit+0xe4>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001916:	2303      	movs	r3, #3
 8001918:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001926:	2308      	movs	r3, #8
 8001928:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800192e:	4619      	mov	r1, r3
 8001930:	480d      	ldr	r0, [pc, #52]	; (8001968 <HAL_UART_MspInit+0xe8>)
 8001932:	f002 f82d 	bl	8003990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001936:	2302      	movs	r3, #2
 8001938:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001946:	230c      	movs	r3, #12
 8001948:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800194e:	4619      	mov	r1, r3
 8001950:	4806      	ldr	r0, [pc, #24]	; (800196c <HAL_UART_MspInit+0xec>)
 8001952:	f002 f81d 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001956:	bf00      	nop
 8001958:	3780      	adds	r7, #128	; 0x80
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40008000 	.word	0x40008000
 8001964:	40021000 	.word	0x40021000
 8001968:	48000800 	.word	0x48000800
 800196c:	48000400 	.word	0x48000400

08001970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	; 0x30
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a2f      	ldr	r2, [pc, #188]	; (8001a4c <HAL_SPI_MspInit+0xdc>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d129      	bne.n	80019e6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001992:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <HAL_SPI_MspInit+0xe0>)
 8001994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001996:	4a2e      	ldr	r2, [pc, #184]	; (8001a50 <HAL_SPI_MspInit+0xe0>)
 8001998:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800199c:	6613      	str	r3, [r2, #96]	; 0x60
 800199e:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <HAL_SPI_MspInit+0xe0>)
 80019a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <HAL_SPI_MspInit+0xe0>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	4a28      	ldr	r2, [pc, #160]	; (8001a50 <HAL_SPI_MspInit+0xe0>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b6:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <HAL_SPI_MspInit+0xe0>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019c2:	23e0      	movs	r3, #224	; 0xe0
 80019c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019d2:	2305      	movs	r3, #5
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e0:	f001 ffd6 	bl	8003990 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019e4:	e02d      	b.n	8001a42 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1a      	ldr	r2, [pc, #104]	; (8001a54 <HAL_SPI_MspInit+0xe4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d128      	bne.n	8001a42 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_SPI_MspInit+0xe0>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <HAL_SPI_MspInit+0xe0>)
 80019f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fa:	6593      	str	r3, [r2, #88]	; 0x58
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_SPI_MspInit+0xe0>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_SPI_MspInit+0xe0>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0c:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <HAL_SPI_MspInit+0xe0>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_SPI_MspInit+0xe0>)
 8001a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a20:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a32:	2306      	movs	r3, #6
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4806      	ldr	r0, [pc, #24]	; (8001a58 <HAL_SPI_MspInit+0xe8>)
 8001a3e:	f001 ffa7 	bl	8003990 <HAL_GPIO_Init>
}
 8001a42:	bf00      	nop
 8001a44:	3730      	adds	r7, #48	; 0x30
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40013000 	.word	0x40013000
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40003c00 	.word	0x40003c00
 8001a58:	48000800 	.word	0x48000800

08001a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6c:	d113      	bne.n	8001a96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_TIM_Base_MspInit+0x44>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <HAL_TIM_Base_MspInit+0x44>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_TIM_Base_MspInit+0x44>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	201c      	movs	r0, #28
 8001a8c:	f001 fbcb 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a90:	201c      	movs	r0, #28
 8001a92:	f001 fbe2 	bl	800325a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b098      	sub	sp, #96	; 0x60
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	2254      	movs	r2, #84	; 0x54
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f005 fbc3 	bl	8007240 <memset>
  if(hpcd->Instance==USB)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a11      	ldr	r2, [pc, #68]	; (8001b04 <HAL_PCD_MspInit+0x60>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d11a      	bne.n	8001afa <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001aca:	2300      	movs	r3, #0
 8001acc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 f97e 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8001ade:	f7ff fafb 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_PCD_MspInit+0x64>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <HAL_PCD_MspInit+0x64>)
 8001ae8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001aec:	6593      	str	r3, [r2, #88]	; 0x58
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_PCD_MspInit+0x64>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001afa:	bf00      	nop
 8001afc:	3760      	adds	r7, #96	; 0x60
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40005c00 	.word	0x40005c00
 8001b08:	40021000 	.word	0x40021000

08001b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001b10:	f003 f8fe 	bl	8004d10 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b14:	e7fe      	b.n	8001b14 <NMI_Handler+0x8>

08001b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <HardFault_Handler+0x4>

08001b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <MemManage_Handler+0x4>

08001b22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <BusFault_Handler+0x4>

08001b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <UsageFault_Handler+0x4>

08001b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5c:	f000 f96a 	bl	8001e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <DMA1_Channel1_IRQHandler+0x10>)
 8001b6a:	f001 fc39 	bl	80033e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000015c 	.word	0x2000015c

08001b78 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <DMA1_Channel2_IRQHandler+0x10>)
 8001b7e:	f001 fc2f 	bl	80033e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200003e4 	.word	0x200003e4

08001b8c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <DMA1_Channel3_IRQHandler+0x10>)
 8001b92:	f001 fc25 	bl	80033e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000444 	.word	0x20000444

08001ba0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <DMA1_Channel4_IRQHandler+0x10>)
 8001ba6:	f001 fc1b 	bl	80033e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200004a4 	.word	0x200004a4

08001bb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bb8:	4804      	ldr	r0, [pc, #16]	; (8001bcc <TIM2_IRQHandler+0x18>)
 8001bba:	f003 fc8a 	bl	80054d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim2);
 8001bbe:	4803      	ldr	r0, [pc, #12]	; (8001bcc <TIM2_IRQHandler+0x18>)
 8001bc0:	f003 fc58 	bl	8005474 <HAL_TIM_Base_Stop_IT>
  HV_on();
 8001bc4:	f7ff fa8e 	bl	80010e4 <HV_on>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000670 	.word	0x20000670

08001bd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	e00a      	b.n	8001bf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001be2:	f3af 8000 	nop.w
 8001be6:	4601      	mov	r1, r0
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	60ba      	str	r2, [r7, #8]
 8001bee:	b2ca      	uxtb	r2, r1
 8001bf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbf0      	blt.n	8001be2 <_read+0x12>
  }

  return len;
 8001c00:	687b      	ldr	r3, [r7, #4]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e009      	b.n	8001c30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	60ba      	str	r2, [r7, #8]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dbf1      	blt.n	8001c1c <_write+0x12>
  }
  return len;
 8001c38:	687b      	ldr	r3, [r7, #4]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_close>:

int _close(int file)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <_isatty>:

int _isatty(int file)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <_sbrk+0x5c>)
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <_sbrk+0x60>)
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d102      	bne.n	8001cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <_sbrk+0x64>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <_sbrk+0x68>)
 8001ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d207      	bcs.n	8001cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cdc:	f005 fb0e 	bl	80072fc <__errno>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	e009      	b.n	8001d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <_sbrk+0x64>)
 8001cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20020000 	.word	0x20020000
 8001d0c:	00000400 	.word	0x00000400
 8001d10:	2000099c 	.word	0x2000099c
 8001d14:	20000af0 	.word	0x20000af0

08001d18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <SystemInit+0x20>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <SystemInit+0x20>)
 8001d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d3c:	480d      	ldr	r0, [pc, #52]	; (8001d74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d40:	f7ff ffea 	bl	8001d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d46:	490d      	ldr	r1, [pc, #52]	; (8001d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <LoopForever+0xe>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d5c:	4c0a      	ldr	r4, [pc, #40]	; (8001d88 <LoopForever+0x16>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f005 facd 	bl	8007308 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d6e:	f7fe fc29 	bl	80005c4 <main>

08001d72 <LoopForever>:

LoopForever:
    b LoopForever
 8001d72:	e7fe      	b.n	8001d72 <LoopForever>
  ldr   r0, =_estack
 8001d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d80:	0800786c 	.word	0x0800786c
  ldr r2, =_sbss
 8001d84:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d88:	20000af0 	.word	0x20000af0

08001d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC1_2_IRQHandler>

08001d8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f001 fa39 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d9e:	200f      	movs	r0, #15
 8001da0:	f000 f80e 	bl	8001dc0 <HAL_InitTick>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	71fb      	strb	r3, [r7, #7]
 8001dae:	e001      	b.n	8001db4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001db0:	f7ff f9ce 	bl	8001150 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001db4:	79fb      	ldrb	r3, [r7, #7]

}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_InitTick+0x68>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d022      	beq.n	8001e1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_InitTick+0x6c>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_InitTick+0x68>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001de0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	f001 fa44 	bl	8003276 <HAL_SYSTICK_Config>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10f      	bne.n	8001e14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	d809      	bhi.n	8001e0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8001e02:	f001 fa10 	bl	8003226 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_InitTick+0x70>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	e007      	b.n	8001e1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e004      	b.n	8001e1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	e001      	b.n	8001e1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000004 	.word	0x20000004

08001e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_IncTick+0x1c>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_IncTick+0x20>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	4a03      	ldr	r2, [pc, #12]	; (8001e50 <HAL_IncTick+0x1c>)
 8001e44:	6013      	str	r3, [r2, #0]
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	200009a0 	.word	0x200009a0
 8001e54:	20000008 	.word	0x20000008

08001e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_GetTick+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	200009a0 	.word	0x200009a0

08001e70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	609a      	str	r2, [r3, #8]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	609a      	str	r2, [r3, #8]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3360      	adds	r3, #96	; 0x60
 8001eea:	461a      	mov	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <LL_ADC_SetOffset+0x44>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f10:	bf00      	nop
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	03fff000 	.word	0x03fff000

08001f20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3360      	adds	r3, #96	; 0x60
 8001f2e:	461a      	mov	r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3360      	adds	r3, #96	; 0x60
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f76:	bf00      	nop
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b087      	sub	sp, #28
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3360      	adds	r3, #96	; 0x60
 8001f92:	461a      	mov	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001fac:	bf00      	nop
 8001fae:	371c      	adds	r7, #28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3360      	adds	r3, #96	; 0x60
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	615a      	str	r2, [r3, #20]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3330      	adds	r3, #48	; 0x30
 8002024:	461a      	mov	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	0a1b      	lsrs	r3, r3, #8
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	4413      	add	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 031f 	and.w	r3, r3, #31
 800203e:	211f      	movs	r1, #31
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	401a      	ands	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	0e9b      	lsrs	r3, r3, #26
 800204c:	f003 011f 	and.w	r1, r3, #31
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	431a      	orrs	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002060:	bf00      	nop
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3314      	adds	r3, #20
 800207c:	461a      	mov	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	0e5b      	lsrs	r3, r3, #25
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	4413      	add	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	0d1b      	lsrs	r3, r3, #20
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	2107      	movs	r1, #7
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	401a      	ands	r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	0d1b      	lsrs	r3, r3, #20
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	431a      	orrs	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020b6:	bf00      	nop
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	43db      	mvns	r3, r3
 80020de:	401a      	ands	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0318 	and.w	r3, r3, #24
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020e8:	40d9      	lsrs	r1, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	400b      	ands	r3, r1
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	431a      	orrs	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	0007ffff 	.word	0x0007ffff

0800210c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800211c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6093      	str	r3, [r2, #8]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002144:	d101      	bne.n	800214a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002168:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800216c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002194:	d101      	bne.n	800219a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <LL_ADC_IsEnabled+0x18>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <LL_ADC_IsEnabled+0x1a>
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d101      	bne.n	80021e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b08      	cmp	r3, #8
 8002206:	d101      	bne.n	800220c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e1a9      	b.n	800258a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7fe ffa7 	bl	8001198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff67 	bl	8002130 <LL_ADC_IsDeepPowerDownEnabled>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff4d 	bl	800210c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff82 	bl	8002180 <LL_ADC_IsInternalRegulatorEnabled>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d115      	bne.n	80022ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ff66 	bl	8002158 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800228c:	4b9c      	ldr	r3, [pc, #624]	; (8002500 <HAL_ADC_Init+0x2e4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	4a9c      	ldr	r2, [pc, #624]	; (8002504 <HAL_ADC_Init+0x2e8>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	3301      	adds	r3, #1
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022a0:	e002      	b.n	80022a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f9      	bne.n	80022a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff64 	bl	8002180 <LL_ADC_IsInternalRegulatorEnabled>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10d      	bne.n	80022da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	f043 0210 	orr.w	r2, r3, #16
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ce:	f043 0201 	orr.w	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff75 	bl	80021ce <LL_ADC_REG_IsConversionOngoing>
 80022e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 8142 	bne.w	8002578 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 813e 	bne.w	8002578 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002304:	f043 0202 	orr.w	r2, r3, #2
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff49 	bl	80021a8 <LL_ADC_IsEnabled>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d141      	bne.n	80023a0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002324:	d004      	beq.n	8002330 <HAL_ADC_Init+0x114>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a77      	ldr	r2, [pc, #476]	; (8002508 <HAL_ADC_Init+0x2ec>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d10f      	bne.n	8002350 <HAL_ADC_Init+0x134>
 8002330:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002334:	f7ff ff38 	bl	80021a8 <LL_ADC_IsEnabled>
 8002338:	4604      	mov	r4, r0
 800233a:	4873      	ldr	r0, [pc, #460]	; (8002508 <HAL_ADC_Init+0x2ec>)
 800233c:	f7ff ff34 	bl	80021a8 <LL_ADC_IsEnabled>
 8002340:	4603      	mov	r3, r0
 8002342:	4323      	orrs	r3, r4
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf0c      	ite	eq
 8002348:	2301      	moveq	r3, #1
 800234a:	2300      	movne	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	e012      	b.n	8002376 <HAL_ADC_Init+0x15a>
 8002350:	486e      	ldr	r0, [pc, #440]	; (800250c <HAL_ADC_Init+0x2f0>)
 8002352:	f7ff ff29 	bl	80021a8 <LL_ADC_IsEnabled>
 8002356:	4604      	mov	r4, r0
 8002358:	486d      	ldr	r0, [pc, #436]	; (8002510 <HAL_ADC_Init+0x2f4>)
 800235a:	f7ff ff25 	bl	80021a8 <LL_ADC_IsEnabled>
 800235e:	4603      	mov	r3, r0
 8002360:	431c      	orrs	r4, r3
 8002362:	486c      	ldr	r0, [pc, #432]	; (8002514 <HAL_ADC_Init+0x2f8>)
 8002364:	f7ff ff20 	bl	80021a8 <LL_ADC_IsEnabled>
 8002368:	4603      	mov	r3, r0
 800236a:	4323      	orrs	r3, r4
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d012      	beq.n	80023a0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002382:	d004      	beq.n	800238e <HAL_ADC_Init+0x172>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a5f      	ldr	r2, [pc, #380]	; (8002508 <HAL_ADC_Init+0x2ec>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Init+0x176>
 800238e:	4a62      	ldr	r2, [pc, #392]	; (8002518 <HAL_ADC_Init+0x2fc>)
 8002390:	e000      	b.n	8002394 <HAL_ADC_Init+0x178>
 8002392:	4a62      	ldr	r2, [pc, #392]	; (800251c <HAL_ADC_Init+0x300>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f7ff fd68 	bl	8001e70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7f5b      	ldrb	r3, [r3, #29]
 80023a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80023b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d106      	bne.n	80023dc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	3b01      	subs	r3, #1
 80023d4:	045b      	lsls	r3, r3, #17
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	4b48      	ldr	r3, [pc, #288]	; (8002520 <HAL_ADC_Init+0x304>)
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	69b9      	ldr	r1, [r7, #24]
 8002408:	430b      	orrs	r3, r1
 800240a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fee4 	bl	80021f4 <LL_ADC_INJ_IsConversionOngoing>
 800242c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d17f      	bne.n	8002534 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d17c      	bne.n	8002534 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800243e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002446:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002456:	f023 0302 	bic.w	r3, r3, #2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	69b9      	ldr	r1, [r7, #24]
 8002460:	430b      	orrs	r3, r1
 8002462:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d017      	beq.n	800249c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800247a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002484:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002488:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6911      	ldr	r1, [r2, #16]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	430b      	orrs	r3, r1
 8002496:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800249a:	e013      	b.n	80024c4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d12a      	bne.n	8002524 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024e4:	4311      	orrs	r1, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024ea:	4311      	orrs	r1, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024f0:	430a      	orrs	r2, r1
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 0201 	orr.w	r2, r2, #1
 80024fc:	611a      	str	r2, [r3, #16]
 80024fe:	e019      	b.n	8002534 <HAL_ADC_Init+0x318>
 8002500:	20000000 	.word	0x20000000
 8002504:	053e2d63 	.word	0x053e2d63
 8002508:	50000100 	.word	0x50000100
 800250c:	50000400 	.word	0x50000400
 8002510:	50000500 	.word	0x50000500
 8002514:	50000600 	.word	0x50000600
 8002518:	50000300 	.word	0x50000300
 800251c:	50000700 	.word	0x50000700
 8002520:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d10c      	bne.n	8002556 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f023 010f 	bic.w	r1, r3, #15
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	1e5a      	subs	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
 8002554:	e007      	b.n	8002566 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 020f 	bic.w	r2, r2, #15
 8002564:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	f023 0303 	bic.w	r3, r3, #3
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	65da      	str	r2, [r3, #92]	; 0x5c
 8002576:	e007      	b.n	8002588 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	f043 0210 	orr.w	r2, r3, #16
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002588:	7ffb      	ldrb	r3, [r7, #31]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3724      	adds	r7, #36	; 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd90      	pop	{r4, r7, pc}
 8002592:	bf00      	nop

08002594 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b0b6      	sub	sp, #216	; 0xd8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d102      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x24>
 80025b2:	2302      	movs	r3, #2
 80025b4:	f000 bc13 	b.w	8002dde <HAL_ADC_ConfigChannel+0x84a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fe02 	bl	80021ce <LL_ADC_REG_IsConversionOngoing>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f040 83f3 	bne.w	8002db8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	f7ff fd18 	bl	8002014 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fdf0 	bl	80021ce <LL_ADC_REG_IsConversionOngoing>
 80025ee:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fdfc 	bl	80021f4 <LL_ADC_INJ_IsConversionOngoing>
 80025fc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002600:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 81d9 	bne.w	80029bc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800260a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 81d4 	bne.w	80029bc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800261c:	d10f      	bne.n	800263e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	4619      	mov	r1, r3
 800262a:	f7ff fd1f 	bl	800206c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fcd9 	bl	8001fee <LL_ADC_SetSamplingTimeCommonConfig>
 800263c:	e00e      	b.n	800265c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	461a      	mov	r2, r3
 800264c:	f7ff fd0e 	bl	800206c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fcc9 	bl	8001fee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	08db      	lsrs	r3, r3, #3
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b04      	cmp	r3, #4
 800267c:	d022      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6919      	ldr	r1, [r3, #16]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800268e:	f7ff fc23 	bl	8001ed8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6919      	ldr	r1, [r3, #16]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	461a      	mov	r2, r3
 80026a0:	f7ff fc6f 	bl	8001f82 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d102      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x126>
 80026b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026b8:	e000      	b.n	80026bc <HAL_ADC_ConfigChannel+0x128>
 80026ba:	2300      	movs	r3, #0
 80026bc:	461a      	mov	r2, r3
 80026be:	f7ff fc7b 	bl	8001fb8 <LL_ADC_SetOffsetSaturation>
 80026c2:	e17b      	b.n	80029bc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fc28 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x15c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fc1d 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	0e9b      	lsrs	r3, r3, #26
 80026ea:	f003 021f 	and.w	r2, r3, #31
 80026ee:	e01e      	b.n	800272e <HAL_ADC_ConfigChannel+0x19a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fc12 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800270e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002712:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800271e:	2320      	movs	r3, #32
 8002720:	e004      	b.n	800272c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002722:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x1b2>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	e018      	b.n	8002778 <HAL_ADC_ConfigChannel+0x1e4>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800275a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800275e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002762:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800276a:	2320      	movs	r3, #32
 800276c:	e004      	b.n	8002778 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800276e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002778:	429a      	cmp	r2, r3
 800277a:	d106      	bne.n	800278a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2200      	movs	r2, #0
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fbe1 	bl	8001f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2101      	movs	r1, #1
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fbc5 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x222>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fbba 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	0e9b      	lsrs	r3, r3, #26
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	e01e      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x260>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2101      	movs	r1, #1
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fbaf 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80027e4:	2320      	movs	r3, #32
 80027e6:	e004      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80027e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <HAL_ADC_ConfigChannel+0x278>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	e018      	b.n	800283e <HAL_ADC_ConfigChannel+0x2aa>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002820:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002830:	2320      	movs	r3, #32
 8002832:	e004      	b.n	800283e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002834:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002838:	fab3 f383 	clz	r3, r3
 800283c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800283e:	429a      	cmp	r2, r3
 8002840:	d106      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2200      	movs	r2, #0
 8002848:	2101      	movs	r1, #1
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fb7e 	bl	8001f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2102      	movs	r1, #2
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fb62 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10a      	bne.n	800287c <HAL_ADC_ConfigChannel+0x2e8>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2102      	movs	r1, #2
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fb57 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002872:	4603      	mov	r3, r0
 8002874:	0e9b      	lsrs	r3, r3, #26
 8002876:	f003 021f 	and.w	r2, r3, #31
 800287a:	e01e      	b.n	80028ba <HAL_ADC_ConfigChannel+0x326>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2102      	movs	r1, #2
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fb4c 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002888:	4603      	mov	r3, r0
 800288a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800289a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800289e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80028aa:	2320      	movs	r3, #32
 80028ac:	e004      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80028ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d105      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x33e>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0e9b      	lsrs	r3, r3, #26
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	e016      	b.n	8002900 <HAL_ADC_ConfigChannel+0x36c>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80028f2:	2320      	movs	r3, #32
 80028f4:	e004      	b.n	8002900 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80028f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002900:	429a      	cmp	r2, r3
 8002902:	d106      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2200      	movs	r2, #0
 800290a:	2102      	movs	r1, #2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fb1d 	bl	8001f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2103      	movs	r1, #3
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fb01 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <HAL_ADC_ConfigChannel+0x3aa>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2103      	movs	r1, #3
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff faf6 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002934:	4603      	mov	r3, r0
 8002936:	0e9b      	lsrs	r3, r3, #26
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	e017      	b.n	800296e <HAL_ADC_ConfigChannel+0x3da>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2103      	movs	r1, #3
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff faeb 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002958:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800295a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002960:	2320      	movs	r3, #32
 8002962:	e003      	b.n	800296c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x3f2>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	e011      	b.n	80029aa <HAL_ADC_ConfigChannel+0x416>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002996:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800299e:	2320      	movs	r3, #32
 80029a0:	e003      	b.n	80029aa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80029a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d106      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2200      	movs	r2, #0
 80029b4:	2103      	movs	r1, #3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fac8 	bl	8001f4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fbf1 	bl	80021a8 <LL_ADC_IsEnabled>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f040 813d 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	461a      	mov	r2, r3
 80029dc:	f7ff fb72 	bl	80020c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4aa2      	ldr	r2, [pc, #648]	; (8002c70 <HAL_ADC_ConfigChannel+0x6dc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	f040 812e 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10b      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x480>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	0e9b      	lsrs	r3, r3, #26
 8002a02:	3301      	adds	r3, #1
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2b09      	cmp	r3, #9
 8002a0a:	bf94      	ite	ls
 8002a0c:	2301      	movls	r3, #1
 8002a0e:	2300      	movhi	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e019      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x4b4>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a24:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	e003      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	2b09      	cmp	r3, #9
 8002a40:	bf94      	ite	ls
 8002a42:	2301      	movls	r3, #1
 8002a44:	2300      	movhi	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d079      	beq.n	8002b40 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d107      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x4d4>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0e9b      	lsrs	r3, r3, #26
 8002a5e:	3301      	adds	r3, #1
 8002a60:	069b      	lsls	r3, r3, #26
 8002a62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a66:	e015      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x500>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a78:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e003      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	069b      	lsls	r3, r3, #26
 8002a90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d109      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x520>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	2101      	movs	r1, #1
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	e017      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x550>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002acc:	2320      	movs	r3, #32
 8002ace:	e003      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	ea42 0103 	orr.w	r1, r2, r3
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x576>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0e9b      	lsrs	r3, r3, #26
 8002afa:	3301      	adds	r3, #1
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	051b      	lsls	r3, r3, #20
 8002b08:	e018      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x5a8>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b22:	2320      	movs	r3, #32
 8002b24:	e003      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	e07e      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d107      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x5c8>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0e9b      	lsrs	r3, r3, #26
 8002b52:	3301      	adds	r3, #1
 8002b54:	069b      	lsls	r3, r3, #26
 8002b56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b5a:	e015      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x5f4>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b74:	2320      	movs	r3, #32
 8002b76:	e003      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	069b      	lsls	r3, r3, #26
 8002b84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x614>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0e9b      	lsrs	r3, r3, #26
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba6:	e017      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x644>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	61fb      	str	r3, [r7, #28]
  return result;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	e003      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd8:	ea42 0103 	orr.w	r1, r2, r3
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10d      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x670>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	0e9b      	lsrs	r3, r3, #26
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3b1e      	subs	r3, #30
 8002bfc:	051b      	lsls	r3, r3, #20
 8002bfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c02:	e01b      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x6a8>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	613b      	str	r3, [r7, #16]
  return result;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	e003      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f003 021f 	and.w	r2, r3, #31
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	3b1e      	subs	r3, #30
 8002c36:	051b      	lsls	r3, r3, #20
 8002c38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c3c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c42:	4619      	mov	r1, r3
 8002c44:	f7ff fa12 	bl	800206c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_ADC_ConfigChannel+0x6e0>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80be 	beq.w	8002dd2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c5e:	d004      	beq.n	8002c6a <HAL_ADC_ConfigChannel+0x6d6>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_ADC_ConfigChannel+0x6e4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10a      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x6ec>
 8002c6a:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <HAL_ADC_ConfigChannel+0x6e8>)
 8002c6c:	e009      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x6ee>
 8002c6e:	bf00      	nop
 8002c70:	407f0000 	.word	0x407f0000
 8002c74:	80080000 	.word	0x80080000
 8002c78:	50000100 	.word	0x50000100
 8002c7c:	50000300 	.word	0x50000300
 8002c80:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_ADC_ConfigChannel+0x854>)
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff f91a 	bl	8001ebc <LL_ADC_GetCommonPathInternalCh>
 8002c88:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a56      	ldr	r2, [pc, #344]	; (8002dec <HAL_ADC_ConfigChannel+0x858>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d004      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x70c>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a55      	ldr	r2, [pc, #340]	; (8002df0 <HAL_ADC_ConfigChannel+0x85c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d13a      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ca0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d134      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cb4:	d005      	beq.n	8002cc2 <HAL_ADC_ConfigChannel+0x72e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a4e      	ldr	r2, [pc, #312]	; (8002df4 <HAL_ADC_ConfigChannel+0x860>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	f040 8085 	bne.w	8002dcc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cca:	d004      	beq.n	8002cd6 <HAL_ADC_ConfigChannel+0x742>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a49      	ldr	r2, [pc, #292]	; (8002df8 <HAL_ADC_ConfigChannel+0x864>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x746>
 8002cd6:	4a49      	ldr	r2, [pc, #292]	; (8002dfc <HAL_ADC_ConfigChannel+0x868>)
 8002cd8:	e000      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x748>
 8002cda:	4a43      	ldr	r2, [pc, #268]	; (8002de8 <HAL_ADC_ConfigChannel+0x854>)
 8002cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	f7ff f8d5 	bl	8001e96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cec:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <HAL_ADC_ConfigChannel+0x86c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	4a44      	ldr	r2, [pc, #272]	; (8002e04 <HAL_ADC_ConfigChannel+0x870>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d06:	e002      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f9      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d14:	e05a      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a3b      	ldr	r2, [pc, #236]	; (8002e08 <HAL_ADC_ConfigChannel+0x874>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d125      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d11f      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a31      	ldr	r2, [pc, #196]	; (8002df8 <HAL_ADC_ConfigChannel+0x864>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d104      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x7ac>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a34      	ldr	r2, [pc, #208]	; (8002e0c <HAL_ADC_ConfigChannel+0x878>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d047      	beq.n	8002dd0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d48:	d004      	beq.n	8002d54 <HAL_ADC_ConfigChannel+0x7c0>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2a      	ldr	r2, [pc, #168]	; (8002df8 <HAL_ADC_ConfigChannel+0x864>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x7c4>
 8002d54:	4a29      	ldr	r2, [pc, #164]	; (8002dfc <HAL_ADC_ConfigChannel+0x868>)
 8002d56:	e000      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x7c6>
 8002d58:	4a23      	ldr	r2, [pc, #140]	; (8002de8 <HAL_ADC_ConfigChannel+0x854>)
 8002d5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d62:	4619      	mov	r1, r3
 8002d64:	4610      	mov	r0, r2
 8002d66:	f7ff f896 	bl	8001e96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d6a:	e031      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <HAL_ADC_ConfigChannel+0x87c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d12d      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d127      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1c      	ldr	r2, [pc, #112]	; (8002df8 <HAL_ADC_ConfigChannel+0x864>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d022      	beq.n	8002dd2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d94:	d004      	beq.n	8002da0 <HAL_ADC_ConfigChannel+0x80c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <HAL_ADC_ConfigChannel+0x864>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x810>
 8002da0:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <HAL_ADC_ConfigChannel+0x868>)
 8002da2:	e000      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x812>
 8002da4:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <HAL_ADC_ConfigChannel+0x854>)
 8002da6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002daa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dae:	4619      	mov	r1, r3
 8002db0:	4610      	mov	r0, r2
 8002db2:	f7ff f870 	bl	8001e96 <LL_ADC_SetCommonPathInternalCh>
 8002db6:	e00c      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002dca:	e002      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dcc:	bf00      	nop
 8002dce:	e000      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dd0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002dda:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	37d8      	adds	r7, #216	; 0xd8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	50000700 	.word	0x50000700
 8002dec:	c3210000 	.word	0xc3210000
 8002df0:	90c00010 	.word	0x90c00010
 8002df4:	50000600 	.word	0x50000600
 8002df8:	50000100 	.word	0x50000100
 8002dfc:	50000300 	.word	0x50000300
 8002e00:	20000000 	.word	0x20000000
 8002e04:	053e2d63 	.word	0x053e2d63
 8002e08:	c7520000 	.word	0xc7520000
 8002e0c:	50000500 	.word	0x50000500
 8002e10:	cb840000 	.word	0xcb840000

08002e14 <LL_ADC_IsEnabled>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <LL_ADC_IsEnabled+0x18>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <LL_ADC_IsEnabled+0x1a>
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LL_ADC_REG_IsConversionOngoing>:
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d101      	bne.n	8002e52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b0a1      	sub	sp, #132	; 0x84
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e0e7      	b.n	800304e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002e86:	2300      	movs	r3, #0
 8002e88:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e96:	d102      	bne.n	8002e9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e98:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	e009      	b.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a6e      	ldr	r2, [pc, #440]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d102      	bne.n	8002eae <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002ea8:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	e001      	b.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0be      	b.n	800304e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ffb1 	bl	8002e3a <LL_ADC_REG_IsConversionOngoing>
 8002ed8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ffab 	bl	8002e3a <LL_ADC_REG_IsConversionOngoing>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 80a0 	bne.w	800302c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 809c 	bne.w	800302c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002efc:	d004      	beq.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a55      	ldr	r2, [pc, #340]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d101      	bne.n	8002f0c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002f08:	4b56      	ldr	r3, [pc, #344]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002f0a:	e000      	b.n	8002f0e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002f0c:	4b56      	ldr	r3, [pc, #344]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002f0e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d04b      	beq.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f2a:	035b      	lsls	r3, r3, #13
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f3c:	d004      	beq.n	8002f48 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a45      	ldr	r2, [pc, #276]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d10f      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002f48:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f4c:	f7ff ff62 	bl	8002e14 <LL_ADC_IsEnabled>
 8002f50:	4604      	mov	r4, r0
 8002f52:	4841      	ldr	r0, [pc, #260]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f54:	f7ff ff5e 	bl	8002e14 <LL_ADC_IsEnabled>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4323      	orrs	r3, r4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	e012      	b.n	8002f8e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002f68:	483c      	ldr	r0, [pc, #240]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f6a:	f7ff ff53 	bl	8002e14 <LL_ADC_IsEnabled>
 8002f6e:	4604      	mov	r4, r0
 8002f70:	483b      	ldr	r0, [pc, #236]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f72:	f7ff ff4f 	bl	8002e14 <LL_ADC_IsEnabled>
 8002f76:	4603      	mov	r3, r0
 8002f78:	431c      	orrs	r4, r3
 8002f7a:	483c      	ldr	r0, [pc, #240]	; (800306c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002f7c:	f7ff ff4a 	bl	8002e14 <LL_ADC_IsEnabled>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4323      	orrs	r3, r4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d056      	beq.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f9a:	f023 030f 	bic.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	6811      	ldr	r1, [r2, #0]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	6892      	ldr	r2, [r2, #8]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fac:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fae:	e047      	b.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc4:	d004      	beq.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a23      	ldr	r2, [pc, #140]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d10f      	bne.n	8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002fd0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fd4:	f7ff ff1e 	bl	8002e14 <LL_ADC_IsEnabled>
 8002fd8:	4604      	mov	r4, r0
 8002fda:	481f      	ldr	r0, [pc, #124]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fdc:	f7ff ff1a 	bl	8002e14 <LL_ADC_IsEnabled>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4323      	orrs	r3, r4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e012      	b.n	8003016 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002ff0:	481a      	ldr	r0, [pc, #104]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ff2:	f7ff ff0f 	bl	8002e14 <LL_ADC_IsEnabled>
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	4819      	ldr	r0, [pc, #100]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ffa:	f7ff ff0b 	bl	8002e14 <LL_ADC_IsEnabled>
 8002ffe:	4603      	mov	r3, r0
 8003000:	431c      	orrs	r4, r3
 8003002:	481a      	ldr	r0, [pc, #104]	; (800306c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003004:	f7ff ff06 	bl	8002e14 <LL_ADC_IsEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	4323      	orrs	r3, r4
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d012      	beq.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800301a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003022:	f023 030f 	bic.w	r3, r3, #15
 8003026:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003028:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800302a:	e009      	b.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800303e:	e000      	b.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003040:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800304a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800304e:	4618      	mov	r0, r3
 8003050:	3784      	adds	r7, #132	; 0x84
 8003052:	46bd      	mov	sp, r7
 8003054:	bd90      	pop	{r4, r7, pc}
 8003056:	bf00      	nop
 8003058:	50000100 	.word	0x50000100
 800305c:	50000400 	.word	0x50000400
 8003060:	50000500 	.word	0x50000500
 8003064:	50000300 	.word	0x50000300
 8003068:	50000700 	.word	0x50000700
 800306c:	50000600 	.word	0x50000600

08003070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800308c:	4013      	ands	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800309c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a2:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	60d3      	str	r3, [r2, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <__NVIC_GetPriorityGrouping+0x18>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	f003 0307 	and.w	r3, r3, #7
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db0b      	blt.n	80030fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4907      	ldr	r1, [pc, #28]	; (800310c <__NVIC_EnableIRQ+0x38>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e100 	.word	0xe000e100

08003110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db0a      	blt.n	800313a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	490c      	ldr	r1, [pc, #48]	; (800315c <__NVIC_SetPriority+0x4c>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	440b      	add	r3, r1
 8003134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003138:	e00a      	b.n	8003150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4908      	ldr	r1, [pc, #32]	; (8003160 <__NVIC_SetPriority+0x50>)
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3b04      	subs	r3, #4
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	440b      	add	r3, r1
 800314e:	761a      	strb	r2, [r3, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000e100 	.word	0xe000e100
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f1c3 0307 	rsb	r3, r3, #7
 800317e:	2b04      	cmp	r3, #4
 8003180:	bf28      	it	cs
 8003182:	2304      	movcs	r3, #4
 8003184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3304      	adds	r3, #4
 800318a:	2b06      	cmp	r3, #6
 800318c:	d902      	bls.n	8003194 <NVIC_EncodePriority+0x30>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3b03      	subs	r3, #3
 8003192:	e000      	b.n	8003196 <NVIC_EncodePriority+0x32>
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	4313      	orrs	r3, r2
         );
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	; 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031dc:	d301      	bcc.n	80031e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031de:	2301      	movs	r3, #1
 80031e0:	e00f      	b.n	8003202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e2:	4a0a      	ldr	r2, [pc, #40]	; (800320c <SysTick_Config+0x40>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ea:	210f      	movs	r1, #15
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	f7ff ff8e 	bl	8003110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <SysTick_Config+0x40>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <SysTick_Config+0x40>)
 80031fc:	2207      	movs	r2, #7
 80031fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	e000e010 	.word	0xe000e010

08003210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ff29 	bl	8003070 <__NVIC_SetPriorityGrouping>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003234:	f7ff ff40 	bl	80030b8 <__NVIC_GetPriorityGrouping>
 8003238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	6978      	ldr	r0, [r7, #20]
 8003240:	f7ff ff90 	bl	8003164 <NVIC_EncodePriority>
 8003244:	4602      	mov	r2, r0
 8003246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff5f 	bl	8003110 <__NVIC_SetPriority>
}
 8003252:	bf00      	nop
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	4603      	mov	r3, r0
 8003262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff33 	bl	80030d4 <__NVIC_EnableIRQ>
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff ffa4 	bl	80031cc <SysTick_Config>
 8003284:	4603      	mov	r3, r0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e08d      	b.n	80033be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <HAL_DMA_Init+0x138>)
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d80f      	bhi.n	80032ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	4b45      	ldr	r3, [pc, #276]	; (80033cc <HAL_DMA_Init+0x13c>)
 80032b6:	4413      	add	r3, r2
 80032b8:	4a45      	ldr	r2, [pc, #276]	; (80033d0 <HAL_DMA_Init+0x140>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	009a      	lsls	r2, r3, #2
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a42      	ldr	r2, [pc, #264]	; (80033d4 <HAL_DMA_Init+0x144>)
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40
 80032cc:	e00e      	b.n	80032ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <HAL_DMA_Init+0x148>)
 80032d6:	4413      	add	r3, r2
 80032d8:	4a3d      	ldr	r2, [pc, #244]	; (80033d0 <HAL_DMA_Init+0x140>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	009a      	lsls	r2, r3, #2
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a3c      	ldr	r2, [pc, #240]	; (80033dc <HAL_DMA_Init+0x14c>)
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003310:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8fe 	bl	8003540 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800334c:	d102      	bne.n	8003354 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003368:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d010      	beq.n	8003394 <HAL_DMA_Init+0x104>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b04      	cmp	r3, #4
 8003378:	d80c      	bhi.n	8003394 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f91e 	bl	80035bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	e008      	b.n	80033a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40020407 	.word	0x40020407
 80033cc:	bffdfff8 	.word	0xbffdfff8
 80033d0:	cccccccd 	.word	0xcccccccd
 80033d4:	40020000 	.word	0x40020000
 80033d8:	bffdfbf8 	.word	0xbffdfbf8
 80033dc:	40020400 	.word	0x40020400

080033e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	2204      	movs	r2, #4
 8003402:	409a      	lsls	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d026      	beq.n	800345a <HAL_DMA_IRQHandler+0x7a>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d021      	beq.n	800345a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b00      	cmp	r3, #0
 8003422:	d107      	bne.n	8003434 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0204 	bic.w	r2, r2, #4
 8003432:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	2104      	movs	r1, #4
 8003442:	fa01 f202 	lsl.w	r2, r1, r2
 8003446:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	2b00      	cmp	r3, #0
 800344e:	d071      	beq.n	8003534 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003458:	e06c      	b.n	8003534 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2202      	movs	r2, #2
 8003464:	409a      	lsls	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d02e      	beq.n	80034cc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d029      	beq.n	80034cc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 020a 	bic.w	r2, r2, #10
 8003494:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f003 021f 	and.w	r2, r3, #31
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2102      	movs	r1, #2
 80034ac:	fa01 f202 	lsl.w	r2, r1, r2
 80034b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d038      	beq.n	8003534 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80034ca:	e033      	b.n	8003534 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	2208      	movs	r2, #8
 80034d6:	409a      	lsls	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d02a      	beq.n	8003536 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d025      	beq.n	8003536 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 020e 	bic.w	r2, r2, #14
 80034f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	f003 021f 	and.w	r2, r3, #31
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2101      	movs	r1, #1
 8003508:	fa01 f202 	lsl.w	r2, r1, r2
 800350c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003528:	2b00      	cmp	r3, #0
 800352a:	d004      	beq.n	8003536 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003534:	bf00      	nop
 8003536:	bf00      	nop
}
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003550:	429a      	cmp	r2, r3
 8003552:	d802      	bhi.n	800355a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003554:	4b15      	ldr	r3, [pc, #84]	; (80035ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	e001      	b.n	800355e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800355c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	3b08      	subs	r3, #8
 800356a:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	009a      	lsls	r2, r3, #2
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	461a      	mov	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a0b      	ldr	r2, [pc, #44]	; (80035b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800358a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	2201      	movs	r2, #1
 8003594:	409a      	lsls	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	651a      	str	r2, [r3, #80]	; 0x50
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40020407 	.word	0x40020407
 80035ac:	40020800 	.word	0x40020800
 80035b0:	40020820 	.word	0x40020820
 80035b4:	cccccccd 	.word	0xcccccccd
 80035b8:	40020880 	.word	0x40020880

080035bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	461a      	mov	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a08      	ldr	r2, [pc, #32]	; (8003600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80035de:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	2201      	movs	r2, #1
 80035ea:	409a      	lsls	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	1000823f 	.word	0x1000823f
 8003600:	40020940 	.word	0x40020940

08003604 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e147      	b.n	80038a6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd fe74 	bl	8001318 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0210 	bic.w	r2, r2, #16
 800363e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003640:	f7fe fc0a 	bl	8001e58 <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003646:	e012      	b.n	800366e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003648:	f7fe fc06 	bl	8001e58 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b0a      	cmp	r3, #10
 8003654:	d90b      	bls.n	800366e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365a:	f043 0201 	orr.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2203      	movs	r2, #3
 8003666:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e11b      	b.n	80038a6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b08      	cmp	r3, #8
 800367a:	d0e5      	beq.n	8003648 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800368c:	f7fe fbe4 	bl	8001e58 <HAL_GetTick>
 8003690:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003692:	e012      	b.n	80036ba <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003694:	f7fe fbe0 	bl	8001e58 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b0a      	cmp	r3, #10
 80036a0:	d90b      	bls.n	80036ba <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2203      	movs	r2, #3
 80036b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e0f5      	b.n	80038a6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0e5      	beq.n	8003694 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0202 	orr.w	r2, r2, #2
 80036d6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a74      	ldr	r2, [pc, #464]	; (80038b0 <HAL_FDCAN_Init+0x2ac>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d103      	bne.n	80036ea <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80036e2:	4a74      	ldr	r2, [pc, #464]	; (80038b4 <HAL_FDCAN_Init+0x2b0>)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7c1b      	ldrb	r3, [r3, #16]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d108      	bne.n	8003704 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003700:	619a      	str	r2, [r3, #24]
 8003702:	e007      	b.n	8003714 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003712:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7c5b      	ldrb	r3, [r3, #17]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d108      	bne.n	800372e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800372a:	619a      	str	r2, [r3, #24]
 800372c:	e007      	b.n	800373e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699a      	ldr	r2, [r3, #24]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800373c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	7c9b      	ldrb	r3, [r3, #18]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d108      	bne.n	8003758 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699a      	ldr	r2, [r3, #24]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003754:	619a      	str	r2, [r3, #24]
 8003756:	e007      	b.n	8003768 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003766:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699a      	ldr	r2, [r3, #24]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800378c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0210 	bic.w	r2, r2, #16
 800379c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d108      	bne.n	80037b8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699a      	ldr	r2, [r3, #24]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0204 	orr.w	r2, r2, #4
 80037b4:	619a      	str	r2, [r3, #24]
 80037b6:	e02c      	b.n	8003812 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d028      	beq.n	8003812 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d01c      	beq.n	8003802 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037d6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0210 	orr.w	r2, r2, #16
 80037e6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d110      	bne.n	8003812 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0220 	orr.w	r2, r2, #32
 80037fe:	619a      	str	r2, [r3, #24]
 8003800:	e007      	b.n	8003812 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699a      	ldr	r2, [r3, #24]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0220 	orr.w	r2, r2, #32
 8003810:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	3b01      	subs	r3, #1
 8003818:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	3b01      	subs	r3, #1
 8003820:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003822:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800382a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	3b01      	subs	r3, #1
 8003834:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800383a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800383c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003846:	d115      	bne.n	8003874 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	3b01      	subs	r3, #1
 8003854:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003856:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	3b01      	subs	r3, #1
 800385e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003860:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	3b01      	subs	r3, #1
 800386a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003870:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003872:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f814 	bl	80038b8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40006400 	.word	0x40006400
 80038b4:	40006500 	.word	0x40006500

080038b8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80038c0:	4b30      	ldr	r3, [pc, #192]	; (8003984 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80038c2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a2f      	ldr	r2, [pc, #188]	; (8003988 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d103      	bne.n	80038d6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80038d4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a2c      	ldr	r2, [pc, #176]	; (800398c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d103      	bne.n	80038e8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80038e6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038f6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fe:	041a      	lsls	r2, r3, #16
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800391c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	061a      	lsls	r2, r3, #24
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e005      	b.n	800396a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	3304      	adds	r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	429a      	cmp	r2, r3
 8003974:	d3f3      	bcc.n	800395e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	4000a400 	.word	0x4000a400
 8003988:	40006800 	.word	0x40006800
 800398c:	40006c00 	.word	0x40006c00

08003990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800399e:	e15a      	b.n	8003c56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	2101      	movs	r1, #1
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	4013      	ands	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 814c 	beq.w	8003c50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d005      	beq.n	80039d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d130      	bne.n	8003a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	2203      	movs	r2, #3
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a06:	2201      	movs	r2, #1
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	f003 0201 	and.w	r2, r3, #1
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d017      	beq.n	8003a6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	2203      	movs	r2, #3
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d123      	bne.n	8003ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	08da      	lsrs	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3208      	adds	r2, #8
 8003a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	220f      	movs	r2, #15
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	08da      	lsrs	r2, r3, #3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3208      	adds	r2, #8
 8003abc:	6939      	ldr	r1, [r7, #16]
 8003abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	2203      	movs	r2, #3
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 0203 	and.w	r2, r3, #3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80a6 	beq.w	8003c50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b04:	4b5b      	ldr	r3, [pc, #364]	; (8003c74 <HAL_GPIO_Init+0x2e4>)
 8003b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b08:	4a5a      	ldr	r2, [pc, #360]	; (8003c74 <HAL_GPIO_Init+0x2e4>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6613      	str	r3, [r2, #96]	; 0x60
 8003b10:	4b58      	ldr	r3, [pc, #352]	; (8003c74 <HAL_GPIO_Init+0x2e4>)
 8003b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b1c:	4a56      	ldr	r2, [pc, #344]	; (8003c78 <HAL_GPIO_Init+0x2e8>)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	3302      	adds	r3, #2
 8003b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	220f      	movs	r2, #15
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b46:	d01f      	beq.n	8003b88 <HAL_GPIO_Init+0x1f8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a4c      	ldr	r2, [pc, #304]	; (8003c7c <HAL_GPIO_Init+0x2ec>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d019      	beq.n	8003b84 <HAL_GPIO_Init+0x1f4>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a4b      	ldr	r2, [pc, #300]	; (8003c80 <HAL_GPIO_Init+0x2f0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <HAL_GPIO_Init+0x1f0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a4a      	ldr	r2, [pc, #296]	; (8003c84 <HAL_GPIO_Init+0x2f4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00d      	beq.n	8003b7c <HAL_GPIO_Init+0x1ec>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a49      	ldr	r2, [pc, #292]	; (8003c88 <HAL_GPIO_Init+0x2f8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d007      	beq.n	8003b78 <HAL_GPIO_Init+0x1e8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a48      	ldr	r2, [pc, #288]	; (8003c8c <HAL_GPIO_Init+0x2fc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d101      	bne.n	8003b74 <HAL_GPIO_Init+0x1e4>
 8003b70:	2305      	movs	r3, #5
 8003b72:	e00a      	b.n	8003b8a <HAL_GPIO_Init+0x1fa>
 8003b74:	2306      	movs	r3, #6
 8003b76:	e008      	b.n	8003b8a <HAL_GPIO_Init+0x1fa>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	e006      	b.n	8003b8a <HAL_GPIO_Init+0x1fa>
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e004      	b.n	8003b8a <HAL_GPIO_Init+0x1fa>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e002      	b.n	8003b8a <HAL_GPIO_Init+0x1fa>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <HAL_GPIO_Init+0x1fa>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	f002 0203 	and.w	r2, r2, #3
 8003b90:	0092      	lsls	r2, r2, #2
 8003b92:	4093      	lsls	r3, r2
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b9a:	4937      	ldr	r1, [pc, #220]	; (8003c78 <HAL_GPIO_Init+0x2e8>)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ba8:	4b39      	ldr	r3, [pc, #228]	; (8003c90 <HAL_GPIO_Init+0x300>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bcc:	4a30      	ldr	r2, [pc, #192]	; (8003c90 <HAL_GPIO_Init+0x300>)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bd2:	4b2f      	ldr	r3, [pc, #188]	; (8003c90 <HAL_GPIO_Init+0x300>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bf6:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <HAL_GPIO_Init+0x300>)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003bfc:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_GPIO_Init+0x300>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c20:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <HAL_GPIO_Init+0x300>)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_GPIO_Init+0x300>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c4a:	4a11      	ldr	r2, [pc, #68]	; (8003c90 <HAL_GPIO_Init+0x300>)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3301      	adds	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f47f ae9d 	bne.w	80039a0 <HAL_GPIO_Init+0x10>
  }
}
 8003c66:	bf00      	nop
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	48000400 	.word	0x48000400
 8003c80:	48000800 	.word	0x48000800
 8003c84:	48000c00 	.word	0x48000c00
 8003c88:	48001000 	.word	0x48001000
 8003c8c:	48001400 	.word	0x48001400
 8003c90:	40010400 	.word	0x40010400

08003c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ca4:	787b      	ldrb	r3, [r7, #1]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cb0:	e002      	b.n	8003cb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cb2:	887a      	ldrh	r2, [r7, #2]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e08d      	b.n	8003df2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd fc14 	bl	8001518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	; 0x24
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d107      	bne.n	8003d3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	e006      	b.n	8003d4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d108      	bne.n	8003d66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d62:	605a      	str	r2, [r3, #4]
 8003d64:	e007      	b.n	8003d76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69d9      	ldr	r1, [r3, #28]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d138      	bne.n	8003e82 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e032      	b.n	8003e84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2224      	movs	r2, #36	; 0x24
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0201 	bic.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e4c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0201 	orr.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e000      	b.n	8003e84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
  }
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d139      	bne.n	8003f1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e033      	b.n	8003f1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2224      	movs	r2, #36	; 0x24
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0201 	bic.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ee2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e000      	b.n	8003f1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f1a:	2302      	movs	r3, #2
  }
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e041      	b.n	8003fbe <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003f42:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f245 5255 	movw	r2, #21845	; 0x5555
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6852      	ldr	r2, [r2, #4]
 8003f56:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6892      	ldr	r2, [r2, #8]
 8003f60:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003f62:	f7fd ff79 	bl	8001e58 <HAL_GetTick>
 8003f66:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f68:	e00f      	b.n	8003f8a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003f6a:	f7fd ff75 	bl	8001e58 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b31      	cmp	r3, #49	; 0x31
 8003f76:	d908      	bls.n	8003f8a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e019      	b.n	8003fbe <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e8      	bne.n	8003f6a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d005      	beq.n	8003fb2 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68d2      	ldr	r2, [r2, #12]
 8003fae:	611a      	str	r2, [r3, #16]
 8003fb0:	e004      	b.n	8003fbc <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0c0      	b.n	800415a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7fd fd59 	bl	8001aa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f002 fdb2 	bl	8006b68 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004004:	2300      	movs	r3, #0
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e03e      	b.n	8004088 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800400a:	7bfa      	ldrb	r2, [r7, #15]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	440b      	add	r3, r1
 8004018:	3311      	adds	r3, #17
 800401a:	2201      	movs	r2, #1
 800401c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800401e:	7bfa      	ldrb	r2, [r7, #15]
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	440b      	add	r3, r1
 800402c:	3310      	adds	r3, #16
 800402e:	7bfa      	ldrb	r2, [r7, #15]
 8004030:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	440b      	add	r3, r1
 8004040:	3313      	adds	r3, #19
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004046:	7bfa      	ldrb	r2, [r7, #15]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	440b      	add	r3, r1
 8004054:	3320      	adds	r3, #32
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800405a:	7bfa      	ldrb	r2, [r7, #15]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	440b      	add	r3, r1
 8004068:	3324      	adds	r3, #36	; 0x24
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	440b      	add	r3, r1
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	3301      	adds	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	791b      	ldrb	r3, [r3, #4]
 800408c:	7bfa      	ldrb	r2, [r7, #15]
 800408e:	429a      	cmp	r2, r3
 8004090:	d3bb      	bcc.n	800400a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
 8004096:	e044      	b.n	8004122 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	440b      	add	r3, r1
 80040a6:	f203 1351 	addw	r3, r3, #337	; 0x151
 80040aa:	2200      	movs	r2, #0
 80040ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040ae:	7bfa      	ldrb	r2, [r7, #15]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	440b      	add	r3, r1
 80040bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80040c0:	7bfa      	ldrb	r2, [r7, #15]
 80040c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040c4:	7bfa      	ldrb	r2, [r7, #15]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	440b      	add	r3, r1
 80040d2:	f203 1353 	addw	r3, r3, #339	; 0x153
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040da:	7bfa      	ldrb	r2, [r7, #15]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	440b      	add	r3, r1
 80040e8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040f0:	7bfa      	ldrb	r2, [r7, #15]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	440b      	add	r3, r1
 80040fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004106:	7bfa      	ldrb	r2, [r7, #15]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	440b      	add	r3, r1
 8004114:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	3301      	adds	r3, #1
 8004120:	73fb      	strb	r3, [r7, #15]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	791b      	ldrb	r3, [r3, #4]
 8004126:	7bfa      	ldrb	r2, [r7, #15]
 8004128:	429a      	cmp	r2, r3
 800412a:	d3b5      	bcc.n	8004098 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004138:	f002 fd31 	bl	8006b9e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	7a9b      	ldrb	r3, [r3, #10]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d102      	bne.n	8004158 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f805 	bl	8004162 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004186:	b29b      	uxth	r3, r3
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800419a:	b29b      	uxth	r3, r3
 800419c:	f043 0302 	orr.w	r3, r3, #2
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d141      	bne.n	800424a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041c6:	4b4b      	ldr	r3, [pc, #300]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d131      	bne.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041d4:	4b47      	ldr	r3, [pc, #284]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041da:	4a46      	ldr	r2, [pc, #280]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041e4:	4b43      	ldr	r3, [pc, #268]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ec:	4a41      	ldr	r2, [pc, #260]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041f4:	4b40      	ldr	r3, [pc, #256]	; (80042f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2232      	movs	r2, #50	; 0x32
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	4a3f      	ldr	r2, [pc, #252]	; (80042fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	0c9b      	lsrs	r3, r3, #18
 8004206:	3301      	adds	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800420a:	e002      	b.n	8004212 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3b01      	subs	r3, #1
 8004210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004212:	4b38      	ldr	r3, [pc, #224]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421e:	d102      	bne.n	8004226 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f2      	bne.n	800420c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004226:	4b33      	ldr	r3, [pc, #204]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004232:	d158      	bne.n	80042e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e057      	b.n	80042e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004238:	4b2e      	ldr	r3, [pc, #184]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800423e:	4a2d      	ldr	r2, [pc, #180]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004244:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004248:	e04d      	b.n	80042e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004250:	d141      	bne.n	80042d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004252:	4b28      	ldr	r3, [pc, #160]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800425a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425e:	d131      	bne.n	80042c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004260:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004266:	4a23      	ldr	r2, [pc, #140]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004270:	4b20      	ldr	r3, [pc, #128]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004278:	4a1e      	ldr	r2, [pc, #120]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800427e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004280:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2232      	movs	r2, #50	; 0x32
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	0c9b      	lsrs	r3, r3, #18
 8004292:	3301      	adds	r3, #1
 8004294:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004296:	e002      	b.n	800429e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3b01      	subs	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042aa:	d102      	bne.n	80042b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f2      	bne.n	8004298 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042be:	d112      	bne.n	80042e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e011      	b.n	80042e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ca:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80042d4:	e007      	b.n	80042e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042d6:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042de:	4a05      	ldr	r2, [pc, #20]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	40007000 	.word	0x40007000
 80042f8:	20000000 	.word	0x20000000
 80042fc:	431bde83 	.word	0x431bde83

08004300 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a04      	ldr	r2, [pc, #16]	; (800431c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800430a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800430e:	6093      	str	r3, [r2, #8]
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40007000 	.word	0x40007000

08004320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e2fe      	b.n	8004930 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d075      	beq.n	800442a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800433e:	4b97      	ldr	r3, [pc, #604]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004348:	4b94      	ldr	r3, [pc, #592]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d102      	bne.n	800435e <HAL_RCC_OscConfig+0x3e>
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b03      	cmp	r3, #3
 800435c:	d002      	beq.n	8004364 <HAL_RCC_OscConfig+0x44>
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b08      	cmp	r3, #8
 8004362:	d10b      	bne.n	800437c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	4b8d      	ldr	r3, [pc, #564]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d05b      	beq.n	8004428 <HAL_RCC_OscConfig+0x108>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d157      	bne.n	8004428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e2d9      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004384:	d106      	bne.n	8004394 <HAL_RCC_OscConfig+0x74>
 8004386:	4b85      	ldr	r3, [pc, #532]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a84      	ldr	r2, [pc, #528]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e01d      	b.n	80043d0 <HAL_RCC_OscConfig+0xb0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x98>
 800439e:	4b7f      	ldr	r3, [pc, #508]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a7e      	ldr	r2, [pc, #504]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80043a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b7c      	ldr	r3, [pc, #496]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a7b      	ldr	r2, [pc, #492]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e00b      	b.n	80043d0 <HAL_RCC_OscConfig+0xb0>
 80043b8:	4b78      	ldr	r3, [pc, #480]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a77      	ldr	r2, [pc, #476]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80043be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4b75      	ldr	r3, [pc, #468]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a74      	ldr	r2, [pc, #464]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80043ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fd fd3e 	bl	8001e58 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e0:	f7fd fd3a 	bl	8001e58 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	; 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e29e      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043f2:	4b6a      	ldr	r3, [pc, #424]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0xc0>
 80043fe:	e014      	b.n	800442a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fd fd2a 	bl	8001e58 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004408:	f7fd fd26 	bl	8001e58 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	; 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e28a      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800441a:	4b60      	ldr	r3, [pc, #384]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0xe8>
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d075      	beq.n	8004522 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004436:	4b59      	ldr	r3, [pc, #356]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004440:	4b56      	ldr	r3, [pc, #344]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b0c      	cmp	r3, #12
 800444e:	d102      	bne.n	8004456 <HAL_RCC_OscConfig+0x136>
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d002      	beq.n	800445c <HAL_RCC_OscConfig+0x13c>
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d11f      	bne.n	800449c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800445c:	4b4f      	ldr	r3, [pc, #316]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_RCC_OscConfig+0x154>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e25d      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004474:	4b49      	ldr	r3, [pc, #292]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	4946      	ldr	r1, [pc, #280]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004488:	4b45      	ldr	r3, [pc, #276]	; (80045a0 <HAL_RCC_OscConfig+0x280>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f7fd fc97 	bl	8001dc0 <HAL_InitTick>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d043      	beq.n	8004520 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e249      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d023      	beq.n	80044ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a4:	4b3d      	ldr	r3, [pc, #244]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a3c      	ldr	r2, [pc, #240]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80044aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fd fcd2 	bl	8001e58 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b8:	f7fd fcce 	bl	8001e58 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e232      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044ca:	4b34      	ldr	r3, [pc, #208]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d6:	4b31      	ldr	r3, [pc, #196]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	492d      	ldr	r1, [pc, #180]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]
 80044ea:	e01a      	b.n	8004522 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ec:	4b2b      	ldr	r3, [pc, #172]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a2a      	ldr	r2, [pc, #168]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 80044f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fd fcae 	bl	8001e58 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004500:	f7fd fcaa 	bl	8001e58 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e20e      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004512:	4b22      	ldr	r3, [pc, #136]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x1e0>
 800451e:	e000      	b.n	8004522 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004520:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d041      	beq.n	80045b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d01c      	beq.n	8004570 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004536:	4b19      	ldr	r3, [pc, #100]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 8004538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800453c:	4a17      	ldr	r2, [pc, #92]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004546:	f7fd fc87 	bl	8001e58 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800454e:	f7fd fc83 	bl	8001e58 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e1e7      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004560:	4b0e      	ldr	r3, [pc, #56]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 8004562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0ef      	beq.n	800454e <HAL_RCC_OscConfig+0x22e>
 800456e:	e020      	b.n	80045b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004570:	4b0a      	ldr	r3, [pc, #40]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 8004572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004576:	4a09      	ldr	r2, [pc, #36]	; (800459c <HAL_RCC_OscConfig+0x27c>)
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004580:	f7fd fc6a 	bl	8001e58 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004586:	e00d      	b.n	80045a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004588:	f7fd fc66 	bl	8001e58 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d906      	bls.n	80045a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e1ca      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
 800459a:	bf00      	nop
 800459c:	40021000 	.word	0x40021000
 80045a0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045a4:	4b8c      	ldr	r3, [pc, #560]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 80045a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1ea      	bne.n	8004588 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 80a6 	beq.w	800470c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c0:	2300      	movs	r3, #0
 80045c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045c4:	4b84      	ldr	r3, [pc, #528]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_OscConfig+0x2b4>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_RCC_OscConfig+0x2b6>
 80045d4:	2300      	movs	r3, #0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00d      	beq.n	80045f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045da:	4b7f      	ldr	r3, [pc, #508]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 80045dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045de:	4a7e      	ldr	r2, [pc, #504]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 80045e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e4:	6593      	str	r3, [r2, #88]	; 0x58
 80045e6:	4b7c      	ldr	r3, [pc, #496]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 80045e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045f2:	2301      	movs	r3, #1
 80045f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f6:	4b79      	ldr	r3, [pc, #484]	; (80047dc <HAL_RCC_OscConfig+0x4bc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d118      	bne.n	8004634 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004602:	4b76      	ldr	r3, [pc, #472]	; (80047dc <HAL_RCC_OscConfig+0x4bc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a75      	ldr	r2, [pc, #468]	; (80047dc <HAL_RCC_OscConfig+0x4bc>)
 8004608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460e:	f7fd fc23 	bl	8001e58 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004616:	f7fd fc1f 	bl	8001e58 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e183      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004628:	4b6c      	ldr	r3, [pc, #432]	; (80047dc <HAL_RCC_OscConfig+0x4bc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d108      	bne.n	800464e <HAL_RCC_OscConfig+0x32e>
 800463c:	4b66      	ldr	r3, [pc, #408]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004642:	4a65      	ldr	r2, [pc, #404]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800464c:	e024      	b.n	8004698 <HAL_RCC_OscConfig+0x378>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b05      	cmp	r3, #5
 8004654:	d110      	bne.n	8004678 <HAL_RCC_OscConfig+0x358>
 8004656:	4b60      	ldr	r3, [pc, #384]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465c:	4a5e      	ldr	r2, [pc, #376]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 800465e:	f043 0304 	orr.w	r3, r3, #4
 8004662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004666:	4b5c      	ldr	r3, [pc, #368]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466c:	4a5a      	ldr	r2, [pc, #360]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 800466e:	f043 0301 	orr.w	r3, r3, #1
 8004672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004676:	e00f      	b.n	8004698 <HAL_RCC_OscConfig+0x378>
 8004678:	4b57      	ldr	r3, [pc, #348]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	4a56      	ldr	r2, [pc, #344]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 8004680:	f023 0301 	bic.w	r3, r3, #1
 8004684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004688:	4b53      	ldr	r3, [pc, #332]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	4a52      	ldr	r2, [pc, #328]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 8004690:	f023 0304 	bic.w	r3, r3, #4
 8004694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d016      	beq.n	80046ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a0:	f7fd fbda 	bl	8001e58 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a6:	e00a      	b.n	80046be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a8:	f7fd fbd6 	bl	8001e58 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e138      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046be:	4b46      	ldr	r3, [pc, #280]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0ed      	beq.n	80046a8 <HAL_RCC_OscConfig+0x388>
 80046cc:	e015      	b.n	80046fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ce:	f7fd fbc3 	bl	8001e58 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046d4:	e00a      	b.n	80046ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d6:	f7fd fbbf 	bl	8001e58 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e121      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046ec:	4b3a      	ldr	r3, [pc, #232]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1ed      	bne.n	80046d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046fa:	7ffb      	ldrb	r3, [r7, #31]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d105      	bne.n	800470c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004700:	4b35      	ldr	r3, [pc, #212]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 8004702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004704:	4a34      	ldr	r2, [pc, #208]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 8004706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800470a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d03c      	beq.n	8004792 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01c      	beq.n	800475a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004720:	4b2d      	ldr	r3, [pc, #180]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 8004722:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004726:	4a2c      	ldr	r2, [pc, #176]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004730:	f7fd fb92 	bl	8001e58 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004738:	f7fd fb8e 	bl	8001e58 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e0f2      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800474a:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 800474c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ef      	beq.n	8004738 <HAL_RCC_OscConfig+0x418>
 8004758:	e01b      	b.n	8004792 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800475a:	4b1f      	ldr	r3, [pc, #124]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 800475c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004760:	4a1d      	ldr	r2, [pc, #116]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476a:	f7fd fb75 	bl	8001e58 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004772:	f7fd fb71 	bl	8001e58 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e0d5      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004784:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 8004786:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1ef      	bne.n	8004772 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80c9 	beq.w	800492e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800479c:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 030c 	and.w	r3, r3, #12
 80047a4:	2b0c      	cmp	r3, #12
 80047a6:	f000 8083 	beq.w	80048b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d15e      	bne.n	8004870 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <HAL_RCC_OscConfig+0x4b8>)
 80047b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047be:	f7fd fb4b 	bl	8001e58 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047c4:	e00c      	b.n	80047e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c6:	f7fd fb47 	bl	8001e58 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d905      	bls.n	80047e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e0ab      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
 80047d8:	40021000 	.word	0x40021000
 80047dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e0:	4b55      	ldr	r3, [pc, #340]	; (8004938 <HAL_RCC_OscConfig+0x618>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1ec      	bne.n	80047c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ec:	4b52      	ldr	r3, [pc, #328]	; (8004938 <HAL_RCC_OscConfig+0x618>)
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	4b52      	ldr	r3, [pc, #328]	; (800493c <HAL_RCC_OscConfig+0x61c>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6a11      	ldr	r1, [r2, #32]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047fc:	3a01      	subs	r2, #1
 80047fe:	0112      	lsls	r2, r2, #4
 8004800:	4311      	orrs	r1, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004806:	0212      	lsls	r2, r2, #8
 8004808:	4311      	orrs	r1, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800480e:	0852      	lsrs	r2, r2, #1
 8004810:	3a01      	subs	r2, #1
 8004812:	0552      	lsls	r2, r2, #21
 8004814:	4311      	orrs	r1, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800481a:	0852      	lsrs	r2, r2, #1
 800481c:	3a01      	subs	r2, #1
 800481e:	0652      	lsls	r2, r2, #25
 8004820:	4311      	orrs	r1, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004826:	06d2      	lsls	r2, r2, #27
 8004828:	430a      	orrs	r2, r1
 800482a:	4943      	ldr	r1, [pc, #268]	; (8004938 <HAL_RCC_OscConfig+0x618>)
 800482c:	4313      	orrs	r3, r2
 800482e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004830:	4b41      	ldr	r3, [pc, #260]	; (8004938 <HAL_RCC_OscConfig+0x618>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a40      	ldr	r2, [pc, #256]	; (8004938 <HAL_RCC_OscConfig+0x618>)
 8004836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800483a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800483c:	4b3e      	ldr	r3, [pc, #248]	; (8004938 <HAL_RCC_OscConfig+0x618>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4a3d      	ldr	r2, [pc, #244]	; (8004938 <HAL_RCC_OscConfig+0x618>)
 8004842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004846:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fd fb06 	bl	8001e58 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004850:	f7fd fb02 	bl	8001e58 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e066      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004862:	4b35      	ldr	r3, [pc, #212]	; (8004938 <HAL_RCC_OscConfig+0x618>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x530>
 800486e:	e05e      	b.n	800492e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004870:	4b31      	ldr	r3, [pc, #196]	; (8004938 <HAL_RCC_OscConfig+0x618>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a30      	ldr	r2, [pc, #192]	; (8004938 <HAL_RCC_OscConfig+0x618>)
 8004876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800487a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fd faec 	bl	8001e58 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004884:	f7fd fae8 	bl	8001e58 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e04c      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004896:	4b28      	ldr	r3, [pc, #160]	; (8004938 <HAL_RCC_OscConfig+0x618>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80048a2:	4b25      	ldr	r3, [pc, #148]	; (8004938 <HAL_RCC_OscConfig+0x618>)
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	4924      	ldr	r1, [pc, #144]	; (8004938 <HAL_RCC_OscConfig+0x618>)
 80048a8:	4b25      	ldr	r3, [pc, #148]	; (8004940 <HAL_RCC_OscConfig+0x620>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	60cb      	str	r3, [r1, #12]
 80048ae:	e03e      	b.n	800492e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e039      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80048bc:	4b1e      	ldr	r3, [pc, #120]	; (8004938 <HAL_RCC_OscConfig+0x618>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f003 0203 	and.w	r2, r3, #3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d12c      	bne.n	800492a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	3b01      	subs	r3, #1
 80048dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d123      	bne.n	800492a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d11b      	bne.n	800492a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d113      	bne.n	800492a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	3b01      	subs	r3, #1
 8004910:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d109      	bne.n	800492a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004920:	085b      	lsrs	r3, r3, #1
 8004922:	3b01      	subs	r3, #1
 8004924:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004926:	429a      	cmp	r2, r3
 8004928:	d001      	beq.n	800492e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3720      	adds	r7, #32
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40021000 	.word	0x40021000
 800493c:	019f800c 	.word	0x019f800c
 8004940:	feeefffc 	.word	0xfeeefffc

08004944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e11e      	b.n	8004b9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800495c:	4b91      	ldr	r3, [pc, #580]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d910      	bls.n	800498c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b8e      	ldr	r3, [pc, #568]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 020f 	bic.w	r2, r3, #15
 8004972:	498c      	ldr	r1, [pc, #560]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4313      	orrs	r3, r2
 8004978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b8a      	ldr	r3, [pc, #552]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e106      	b.n	8004b9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d073      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d129      	bne.n	80049f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a0:	4b81      	ldr	r3, [pc, #516]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0f4      	b.n	8004b9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80049b0:	f000 f9ca 	bl	8004d48 <RCC_GetSysClockFreqFromPLLSource>
 80049b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4a7c      	ldr	r2, [pc, #496]	; (8004bac <HAL_RCC_ClockConfig+0x268>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d93f      	bls.n	8004a3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049be:	4b7a      	ldr	r3, [pc, #488]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d033      	beq.n	8004a3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d12f      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049de:	4b72      	ldr	r3, [pc, #456]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e6:	4a70      	ldr	r2, [pc, #448]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 80049e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049ee:	2380      	movs	r3, #128	; 0x80
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	e024      	b.n	8004a3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d107      	bne.n	8004a0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049fc:	4b6a      	ldr	r3, [pc, #424]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d109      	bne.n	8004a1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0c6      	b.n	8004b9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a0c:	4b66      	ldr	r3, [pc, #408]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0be      	b.n	8004b9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a1c:	f000 f8ce 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 8004a20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4a61      	ldr	r2, [pc, #388]	; (8004bac <HAL_RCC_ClockConfig+0x268>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d909      	bls.n	8004a3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a2a:	4b5f      	ldr	r3, [pc, #380]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a32:	4a5d      	ldr	r2, [pc, #372]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a3e:	4b5a      	ldr	r3, [pc, #360]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f023 0203 	bic.w	r2, r3, #3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	4957      	ldr	r1, [pc, #348]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a50:	f7fd fa02 	bl	8001e58 <HAL_GetTick>
 8004a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a56:	e00a      	b.n	8004a6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a58:	f7fd f9fe 	bl	8001e58 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e095      	b.n	8004b9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6e:	4b4e      	ldr	r3, [pc, #312]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 020c 	and.w	r2, r3, #12
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d1eb      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d023      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a98:	4b43      	ldr	r3, [pc, #268]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4a42      	ldr	r2, [pc, #264]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004a9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004aa2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004ab0:	4b3d      	ldr	r3, [pc, #244]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ab8:	4a3b      	ldr	r2, [pc, #236]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004aba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004abe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac0:	4b39      	ldr	r3, [pc, #228]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4936      	ldr	r1, [pc, #216]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2b80      	cmp	r3, #128	; 0x80
 8004ad8:	d105      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004ada:	4b33      	ldr	r3, [pc, #204]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	4a32      	ldr	r2, [pc, #200]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004ae0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ae4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae6:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d21d      	bcs.n	8004b30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af4:	4b2b      	ldr	r3, [pc, #172]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f023 020f 	bic.w	r2, r3, #15
 8004afc:	4929      	ldr	r1, [pc, #164]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b04:	f7fd f9a8 	bl	8001e58 <HAL_GetTick>
 8004b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0c:	f7fd f9a4 	bl	8001e58 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e03b      	b.n	8004b9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b22:	4b20      	ldr	r3, [pc, #128]	; (8004ba4 <HAL_RCC_ClockConfig+0x260>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d1ed      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4917      	ldr	r1, [pc, #92]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b5a:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	490f      	ldr	r1, [pc, #60]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b6e:	f000 f825 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 8004b72:	4602      	mov	r2, r0
 8004b74:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <HAL_RCC_ClockConfig+0x264>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	490c      	ldr	r1, [pc, #48]	; (8004bb0 <HAL_RCC_ClockConfig+0x26c>)
 8004b80:	5ccb      	ldrb	r3, [r1, r3]
 8004b82:	f003 031f 	and.w	r3, r3, #31
 8004b86:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8a:	4a0a      	ldr	r2, [pc, #40]	; (8004bb4 <HAL_RCC_ClockConfig+0x270>)
 8004b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <HAL_RCC_ClockConfig+0x274>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fd f914 	bl	8001dc0 <HAL_InitTick>
 8004b98:	4603      	mov	r3, r0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40022000 	.word	0x40022000
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	04c4b400 	.word	0x04c4b400
 8004bb0:	08007718 	.word	0x08007718
 8004bb4:	20000000 	.word	0x20000000
 8004bb8:	20000004 	.word	0x20000004

08004bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004bc2:	4b2c      	ldr	r3, [pc, #176]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d102      	bne.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bce:	4b2a      	ldr	r3, [pc, #168]	; (8004c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	e047      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004bd4:	4b27      	ldr	r3, [pc, #156]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d102      	bne.n	8004be6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004be0:	4b26      	ldr	r3, [pc, #152]	; (8004c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	e03e      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004be6:	4b23      	ldr	r3, [pc, #140]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b0c      	cmp	r3, #12
 8004bf0:	d136      	bne.n	8004c60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bf2:	4b20      	ldr	r3, [pc, #128]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	3301      	adds	r3, #1
 8004c08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d10c      	bne.n	8004c2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c10:	4a1a      	ldr	r2, [pc, #104]	; (8004c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	4a16      	ldr	r2, [pc, #88]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c1a:	68d2      	ldr	r2, [r2, #12]
 8004c1c:	0a12      	lsrs	r2, r2, #8
 8004c1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	617b      	str	r3, [r7, #20]
      break;
 8004c28:	e00c      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c2a:	4a13      	ldr	r2, [pc, #76]	; (8004c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c32:	4a10      	ldr	r2, [pc, #64]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c34:	68d2      	ldr	r2, [r2, #12]
 8004c36:	0a12      	lsrs	r2, r2, #8
 8004c38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c3c:	fb02 f303 	mul.w	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]
      break;
 8004c42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	0e5b      	lsrs	r3, r3, #25
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	3301      	adds	r3, #1
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	e001      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c64:	693b      	ldr	r3, [r7, #16]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40021000 	.word	0x40021000
 8004c78:	00f42400 	.word	0x00f42400
 8004c7c:	007a1200 	.word	0x007a1200

08004c80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c84:	4b03      	ldr	r3, [pc, #12]	; (8004c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c86:	681b      	ldr	r3, [r3, #0]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	20000000 	.word	0x20000000

08004c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c9c:	f7ff fff0 	bl	8004c80 <HAL_RCC_GetHCLKFreq>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	0a1b      	lsrs	r3, r3, #8
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	4904      	ldr	r1, [pc, #16]	; (8004cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cae:	5ccb      	ldrb	r3, [r1, r3]
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	08007728 	.word	0x08007728

08004cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cc8:	f7ff ffda 	bl	8004c80 <HAL_RCC_GetHCLKFreq>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	0adb      	lsrs	r3, r3, #11
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	4904      	ldr	r1, [pc, #16]	; (8004cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cda:	5ccb      	ldrb	r3, [r1, r3]
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	08007728 	.word	0x08007728

08004cf0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_RCC_EnableCSS+0x1c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a04      	ldr	r2, [pc, #16]	; (8004d0c <HAL_RCC_EnableCSS+0x1c>)
 8004cfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cfe:	6013      	str	r3, [r2, #0]
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40021000 	.word	0x40021000

08004d10 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004d14:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d20:	d105      	bne.n	8004d2e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004d22:	f000 f809 	bl	8004d38 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004d26:	4b03      	ldr	r3, [pc, #12]	; (8004d34 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d2c:	621a      	str	r2, [r3, #32]
  }
}
 8004d2e:	bf00      	nop
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000

08004d38 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d4e:	4b1e      	ldr	r3, [pc, #120]	; (8004dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d58:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	3301      	adds	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d10c      	bne.n	8004d86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d6c:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	4a14      	ldr	r2, [pc, #80]	; (8004dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d76:	68d2      	ldr	r2, [r2, #12]
 8004d78:	0a12      	lsrs	r2, r2, #8
 8004d7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	617b      	str	r3, [r7, #20]
    break;
 8004d84:	e00c      	b.n	8004da0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d86:	4a12      	ldr	r2, [pc, #72]	; (8004dd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8e:	4a0e      	ldr	r2, [pc, #56]	; (8004dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d90:	68d2      	ldr	r2, [r2, #12]
 8004d92:	0a12      	lsrs	r2, r2, #8
 8004d94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d98:	fb02 f303 	mul.w	r3, r2, r3
 8004d9c:	617b      	str	r3, [r7, #20]
    break;
 8004d9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004da0:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	0e5b      	lsrs	r3, r3, #25
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	3301      	adds	r3, #1
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004dba:	687b      	ldr	r3, [r7, #4]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	007a1200 	.word	0x007a1200
 8004dd0:	00f42400 	.word	0x00f42400

08004dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ddc:	2300      	movs	r3, #0
 8004dde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004de0:	2300      	movs	r3, #0
 8004de2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8098 	beq.w	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df2:	2300      	movs	r3, #0
 8004df4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df6:	4b43      	ldr	r3, [pc, #268]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10d      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e02:	4b40      	ldr	r3, [pc, #256]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e06:	4a3f      	ldr	r2, [pc, #252]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e0e:	4b3d      	ldr	r3, [pc, #244]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e16:	60bb      	str	r3, [r7, #8]
 8004e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e1e:	4b3a      	ldr	r3, [pc, #232]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a39      	ldr	r2, [pc, #228]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e2a:	f7fd f815 	bl	8001e58 <HAL_GetTick>
 8004e2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e30:	e009      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e32:	f7fd f811 	bl	8001e58 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d902      	bls.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	74fb      	strb	r3, [r7, #19]
        break;
 8004e44:	e005      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e46:	4b30      	ldr	r3, [pc, #192]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0ef      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e52:	7cfb      	ldrb	r3, [r7, #19]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d159      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e58:	4b2a      	ldr	r3, [pc, #168]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d01e      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d019      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e74:	4b23      	ldr	r3, [pc, #140]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e80:	4b20      	ldr	r3, [pc, #128]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e86:	4a1f      	ldr	r2, [pc, #124]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e90:	4b1c      	ldr	r3, [pc, #112]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e96:	4a1b      	ldr	r2, [pc, #108]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ea0:	4a18      	ldr	r2, [pc, #96]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d016      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb2:	f7fc ffd1 	bl	8001e58 <HAL_GetTick>
 8004eb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb8:	e00b      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fc ffcd 	bl	8001e58 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d902      	bls.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	74fb      	strb	r3, [r7, #19]
            break;
 8004ed0:	e006      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0ec      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ee0:	7cfb      	ldrb	r3, [r7, #19]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10b      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ee6:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef4:	4903      	ldr	r1, [pc, #12]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004efc:	e008      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004efe:	7cfb      	ldrb	r3, [r7, #19]
 8004f00:	74bb      	strb	r3, [r7, #18]
 8004f02:	e005      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f04:	40021000 	.word	0x40021000
 8004f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0c:	7cfb      	ldrb	r3, [r7, #19]
 8004f0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f10:	7c7b      	ldrb	r3, [r7, #17]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d105      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f16:	4ba7      	ldr	r3, [pc, #668]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1a:	4aa6      	ldr	r2, [pc, #664]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f2e:	4ba1      	ldr	r3, [pc, #644]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f34:	f023 0203 	bic.w	r2, r3, #3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	499d      	ldr	r1, [pc, #628]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f50:	4b98      	ldr	r3, [pc, #608]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	f023 020c 	bic.w	r2, r3, #12
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	4995      	ldr	r1, [pc, #596]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f72:	4b90      	ldr	r3, [pc, #576]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	498c      	ldr	r1, [pc, #560]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f94:	4b87      	ldr	r3, [pc, #540]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	4984      	ldr	r1, [pc, #528]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fb6:	4b7f      	ldr	r3, [pc, #508]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	497b      	ldr	r1, [pc, #492]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fd8:	4b76      	ldr	r3, [pc, #472]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	4973      	ldr	r1, [pc, #460]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ffa:	4b6e      	ldr	r3, [pc, #440]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	496a      	ldr	r1, [pc, #424]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800501c:	4b65      	ldr	r3, [pc, #404]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	4962      	ldr	r1, [pc, #392]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800503e:	4b5d      	ldr	r3, [pc, #372]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	4959      	ldr	r1, [pc, #356]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005060:	4b54      	ldr	r3, [pc, #336]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005066:	f023 0203 	bic.w	r2, r3, #3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	4951      	ldr	r1, [pc, #324]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005082:	4b4c      	ldr	r3, [pc, #304]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005088:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	4948      	ldr	r1, [pc, #288]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d015      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050a4:	4b43      	ldr	r3, [pc, #268]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	4940      	ldr	r1, [pc, #256]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c2:	d105      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050c4:	4b3b      	ldr	r3, [pc, #236]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4a3a      	ldr	r2, [pc, #232]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d015      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050dc:	4b35      	ldr	r3, [pc, #212]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ea:	4932      	ldr	r1, [pc, #200]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050fa:	d105      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050fc:	4b2d      	ldr	r3, [pc, #180]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4a2c      	ldr	r2, [pc, #176]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005106:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d015      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005114:	4b27      	ldr	r3, [pc, #156]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	4924      	ldr	r1, [pc, #144]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005132:	d105      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005134:	4b1f      	ldr	r3, [pc, #124]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800513e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800514c:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	4916      	ldr	r1, [pc, #88]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800516a:	d105      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800516c:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	4a10      	ldr	r2, [pc, #64]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005176:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d019      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005184:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	4908      	ldr	r1, [pc, #32]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a2:	d109      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a4:	4b03      	ldr	r3, [pc, #12]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4a02      	ldr	r2, [pc, #8]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ae:	60d3      	str	r3, [r2, #12]
 80051b0:	e002      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80051b2:	bf00      	nop
 80051b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d015      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051c4:	4b29      	ldr	r3, [pc, #164]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	4926      	ldr	r1, [pc, #152]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051e2:	d105      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051e4:	4b21      	ldr	r3, [pc, #132]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	4a20      	ldr	r2, [pc, #128]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d015      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80051fc:	4b1b      	ldr	r3, [pc, #108]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005202:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520a:	4918      	ldr	r1, [pc, #96]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521a:	d105      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800521c:	4b13      	ldr	r3, [pc, #76]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	4a12      	ldr	r2, [pc, #72]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005226:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d015      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005234:	4b0d      	ldr	r3, [pc, #52]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800523a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005242:	490a      	ldr	r1, [pc, #40]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800524e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005252:	d105      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005254:	4b05      	ldr	r3, [pc, #20]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	4a04      	ldr	r2, [pc, #16]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800525a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800525e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005260:	7cbb      	ldrb	r3, [r7, #18]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000

08005270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e09d      	b.n	80053be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	2b00      	cmp	r3, #0
 8005288:	d108      	bne.n	800529c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005292:	d009      	beq.n	80052a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	61da      	str	r2, [r3, #28]
 800529a:	e005      	b.n	80052a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fc fb54 	bl	8001970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052e8:	d902      	bls.n	80052f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e002      	b.n	80052f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052fe:	d007      	beq.n	8005310 <HAL_SPI_Init+0xa0>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005308:	d002      	beq.n	8005310 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005352:	ea42 0103 	orr.w	r1, r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	0c1b      	lsrs	r3, r3, #16
 800536c:	f003 0204 	and.w	r2, r3, #4
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800538c:	ea42 0103 	orr.w	r1, r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e049      	b.n	800546c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d106      	bne.n	80053f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7fc fb35 	bl	8001a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3304      	adds	r3, #4
 8005402:	4619      	mov	r1, r3
 8005404:	4610      	mov	r0, r2
 8005406:	f000 fafb 	bl	8005a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6a1a      	ldr	r2, [r3, #32]
 8005492:	f241 1311 	movw	r3, #4369	; 0x1111
 8005496:	4013      	ands	r3, r2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10f      	bne.n	80054bc <HAL_TIM_Base_Stop_IT+0x48>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a1a      	ldr	r2, [r3, #32]
 80054a2:	f244 4344 	movw	r3, #17476	; 0x4444
 80054a6:	4013      	ands	r3, r2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d107      	bne.n	80054bc <HAL_TIM_Base_Stop_IT+0x48>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d020      	beq.n	8005536 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01b      	beq.n	8005536 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f06f 0202 	mvn.w	r2, #2
 8005506:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fa51 	bl	80059c4 <HAL_TIM_IC_CaptureCallback>
 8005522:	e005      	b.n	8005530 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fa43 	bl	80059b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fa54 	bl	80059d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d020      	beq.n	8005582 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01b      	beq.n	8005582 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f06f 0204 	mvn.w	r2, #4
 8005552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fa2b 	bl	80059c4 <HAL_TIM_IC_CaptureCallback>
 800556e:	e005      	b.n	800557c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fa1d 	bl	80059b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fa2e 	bl	80059d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d020      	beq.n	80055ce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01b      	beq.n	80055ce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f06f 0208 	mvn.w	r2, #8
 800559e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2204      	movs	r2, #4
 80055a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fa05 	bl	80059c4 <HAL_TIM_IC_CaptureCallback>
 80055ba:	e005      	b.n	80055c8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f9f7 	bl	80059b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa08 	bl	80059d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d020      	beq.n	800561a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d01b      	beq.n	800561a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f06f 0210 	mvn.w	r2, #16
 80055ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2208      	movs	r2, #8
 80055f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f9df 	bl	80059c4 <HAL_TIM_IC_CaptureCallback>
 8005606:	e005      	b.n	8005614 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f9d1 	bl	80059b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f9e2 	bl	80059d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00c      	beq.n	800563e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f06f 0201 	mvn.w	r2, #1
 8005636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f9af 	bl	800599c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005644:	2b00      	cmp	r3, #0
 8005646:	d104      	bne.n	8005652 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00c      	beq.n	800566c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005658:	2b00      	cmp	r3, #0
 800565a:	d007      	beq.n	800566c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fbba 	bl	8005de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00c      	beq.n	8005690 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567c:	2b00      	cmp	r3, #0
 800567e:	d007      	beq.n	8005690 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fbb2 	bl	8005df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00c      	beq.n	80056b4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f99c 	bl	80059ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00c      	beq.n	80056d8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0220 	mvn.w	r2, #32
 80056d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fb7a 	bl	8005dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00c      	beq.n	80056fc <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d007      	beq.n	80056fc <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80056f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fb86 	bl	8005e08 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00c      	beq.n	8005720 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d007      	beq.n	8005720 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fb7e 	bl	8005e1c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00c      	beq.n	8005744 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800573c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fb76 	bl	8005e30 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00c      	beq.n	8005768 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fb6e 	bl	8005e44 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_TIM_ConfigClockSource+0x1c>
 8005788:	2302      	movs	r3, #2
 800578a:	e0f6      	b.n	800597a <HAL_TIM_ConfigClockSource+0x20a>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80057aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a6f      	ldr	r2, [pc, #444]	; (8005984 <HAL_TIM_ConfigClockSource+0x214>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	f000 80c1 	beq.w	800594e <HAL_TIM_ConfigClockSource+0x1de>
 80057cc:	4a6d      	ldr	r2, [pc, #436]	; (8005984 <HAL_TIM_ConfigClockSource+0x214>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	f200 80c6 	bhi.w	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 80057d4:	4a6c      	ldr	r2, [pc, #432]	; (8005988 <HAL_TIM_ConfigClockSource+0x218>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	f000 80b9 	beq.w	800594e <HAL_TIM_ConfigClockSource+0x1de>
 80057dc:	4a6a      	ldr	r2, [pc, #424]	; (8005988 <HAL_TIM_ConfigClockSource+0x218>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	f200 80be 	bhi.w	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 80057e4:	4a69      	ldr	r2, [pc, #420]	; (800598c <HAL_TIM_ConfigClockSource+0x21c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	f000 80b1 	beq.w	800594e <HAL_TIM_ConfigClockSource+0x1de>
 80057ec:	4a67      	ldr	r2, [pc, #412]	; (800598c <HAL_TIM_ConfigClockSource+0x21c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	f200 80b6 	bhi.w	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 80057f4:	4a66      	ldr	r2, [pc, #408]	; (8005990 <HAL_TIM_ConfigClockSource+0x220>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	f000 80a9 	beq.w	800594e <HAL_TIM_ConfigClockSource+0x1de>
 80057fc:	4a64      	ldr	r2, [pc, #400]	; (8005990 <HAL_TIM_ConfigClockSource+0x220>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	f200 80ae 	bhi.w	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 8005804:	4a63      	ldr	r2, [pc, #396]	; (8005994 <HAL_TIM_ConfigClockSource+0x224>)
 8005806:	4293      	cmp	r3, r2
 8005808:	f000 80a1 	beq.w	800594e <HAL_TIM_ConfigClockSource+0x1de>
 800580c:	4a61      	ldr	r2, [pc, #388]	; (8005994 <HAL_TIM_ConfigClockSource+0x224>)
 800580e:	4293      	cmp	r3, r2
 8005810:	f200 80a6 	bhi.w	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 8005814:	4a60      	ldr	r2, [pc, #384]	; (8005998 <HAL_TIM_ConfigClockSource+0x228>)
 8005816:	4293      	cmp	r3, r2
 8005818:	f000 8099 	beq.w	800594e <HAL_TIM_ConfigClockSource+0x1de>
 800581c:	4a5e      	ldr	r2, [pc, #376]	; (8005998 <HAL_TIM_ConfigClockSource+0x228>)
 800581e:	4293      	cmp	r3, r2
 8005820:	f200 809e 	bhi.w	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 8005824:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005828:	f000 8091 	beq.w	800594e <HAL_TIM_ConfigClockSource+0x1de>
 800582c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005830:	f200 8096 	bhi.w	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 8005834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005838:	f000 8089 	beq.w	800594e <HAL_TIM_ConfigClockSource+0x1de>
 800583c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005840:	f200 808e 	bhi.w	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 8005844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005848:	d03e      	beq.n	80058c8 <HAL_TIM_ConfigClockSource+0x158>
 800584a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800584e:	f200 8087 	bhi.w	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 8005852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005856:	f000 8086 	beq.w	8005966 <HAL_TIM_ConfigClockSource+0x1f6>
 800585a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585e:	d87f      	bhi.n	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 8005860:	2b70      	cmp	r3, #112	; 0x70
 8005862:	d01a      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x12a>
 8005864:	2b70      	cmp	r3, #112	; 0x70
 8005866:	d87b      	bhi.n	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 8005868:	2b60      	cmp	r3, #96	; 0x60
 800586a:	d050      	beq.n	800590e <HAL_TIM_ConfigClockSource+0x19e>
 800586c:	2b60      	cmp	r3, #96	; 0x60
 800586e:	d877      	bhi.n	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 8005870:	2b50      	cmp	r3, #80	; 0x50
 8005872:	d03c      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0x17e>
 8005874:	2b50      	cmp	r3, #80	; 0x50
 8005876:	d873      	bhi.n	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	d058      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x1be>
 800587c:	2b40      	cmp	r3, #64	; 0x40
 800587e:	d86f      	bhi.n	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 8005880:	2b30      	cmp	r3, #48	; 0x30
 8005882:	d064      	beq.n	800594e <HAL_TIM_ConfigClockSource+0x1de>
 8005884:	2b30      	cmp	r3, #48	; 0x30
 8005886:	d86b      	bhi.n	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 8005888:	2b20      	cmp	r3, #32
 800588a:	d060      	beq.n	800594e <HAL_TIM_ConfigClockSource+0x1de>
 800588c:	2b20      	cmp	r3, #32
 800588e:	d867      	bhi.n	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
 8005890:	2b00      	cmp	r3, #0
 8005892:	d05c      	beq.n	800594e <HAL_TIM_ConfigClockSource+0x1de>
 8005894:	2b10      	cmp	r3, #16
 8005896:	d05a      	beq.n	800594e <HAL_TIM_ConfigClockSource+0x1de>
 8005898:	e062      	b.n	8005960 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058aa:	f000 f9d9 	bl	8005c60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	609a      	str	r2, [r3, #8]
      break;
 80058c6:	e04f      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058d8:	f000 f9c2 	bl	8005c60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ea:	609a      	str	r2, [r3, #8]
      break;
 80058ec:	e03c      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fa:	461a      	mov	r2, r3
 80058fc:	f000 f934 	bl	8005b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2150      	movs	r1, #80	; 0x50
 8005906:	4618      	mov	r0, r3
 8005908:	f000 f98d 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 800590c:	e02c      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800591a:	461a      	mov	r2, r3
 800591c:	f000 f953 	bl	8005bc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2160      	movs	r1, #96	; 0x60
 8005926:	4618      	mov	r0, r3
 8005928:	f000 f97d 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 800592c:	e01c      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800593a:	461a      	mov	r2, r3
 800593c:	f000 f914 	bl	8005b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2140      	movs	r1, #64	; 0x40
 8005946:	4618      	mov	r0, r3
 8005948:	f000 f96d 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 800594c:	e00c      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4619      	mov	r1, r3
 8005958:	4610      	mov	r0, r2
 800595a:	f000 f964 	bl	8005c26 <TIM_ITRx_SetConfig>
      break;
 800595e:	e003      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	73fb      	strb	r3, [r7, #15]
      break;
 8005964:	e000      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005978:	7bfb      	ldrb	r3, [r7, #15]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	00100070 	.word	0x00100070
 8005988:	00100060 	.word	0x00100060
 800598c:	00100050 	.word	0x00100050
 8005990:	00100040 	.word	0x00100040
 8005994:	00100030 	.word	0x00100030
 8005998:	00100020 	.word	0x00100020

0800599c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a4c      	ldr	r2, [pc, #304]	; (8005b44 <TIM_Base_SetConfig+0x144>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d017      	beq.n	8005a48 <TIM_Base_SetConfig+0x48>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1e:	d013      	beq.n	8005a48 <TIM_Base_SetConfig+0x48>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a49      	ldr	r2, [pc, #292]	; (8005b48 <TIM_Base_SetConfig+0x148>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00f      	beq.n	8005a48 <TIM_Base_SetConfig+0x48>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a48      	ldr	r2, [pc, #288]	; (8005b4c <TIM_Base_SetConfig+0x14c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00b      	beq.n	8005a48 <TIM_Base_SetConfig+0x48>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a47      	ldr	r2, [pc, #284]	; (8005b50 <TIM_Base_SetConfig+0x150>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d007      	beq.n	8005a48 <TIM_Base_SetConfig+0x48>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a46      	ldr	r2, [pc, #280]	; (8005b54 <TIM_Base_SetConfig+0x154>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_Base_SetConfig+0x48>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a45      	ldr	r2, [pc, #276]	; (8005b58 <TIM_Base_SetConfig+0x158>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d108      	bne.n	8005a5a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a39      	ldr	r2, [pc, #228]	; (8005b44 <TIM_Base_SetConfig+0x144>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d023      	beq.n	8005aaa <TIM_Base_SetConfig+0xaa>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a68:	d01f      	beq.n	8005aaa <TIM_Base_SetConfig+0xaa>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a36      	ldr	r2, [pc, #216]	; (8005b48 <TIM_Base_SetConfig+0x148>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d01b      	beq.n	8005aaa <TIM_Base_SetConfig+0xaa>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a35      	ldr	r2, [pc, #212]	; (8005b4c <TIM_Base_SetConfig+0x14c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d017      	beq.n	8005aaa <TIM_Base_SetConfig+0xaa>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a34      	ldr	r2, [pc, #208]	; (8005b50 <TIM_Base_SetConfig+0x150>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <TIM_Base_SetConfig+0xaa>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a33      	ldr	r2, [pc, #204]	; (8005b54 <TIM_Base_SetConfig+0x154>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00f      	beq.n	8005aaa <TIM_Base_SetConfig+0xaa>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a33      	ldr	r2, [pc, #204]	; (8005b5c <TIM_Base_SetConfig+0x15c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00b      	beq.n	8005aaa <TIM_Base_SetConfig+0xaa>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a32      	ldr	r2, [pc, #200]	; (8005b60 <TIM_Base_SetConfig+0x160>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <TIM_Base_SetConfig+0xaa>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a31      	ldr	r2, [pc, #196]	; (8005b64 <TIM_Base_SetConfig+0x164>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <TIM_Base_SetConfig+0xaa>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a2c      	ldr	r2, [pc, #176]	; (8005b58 <TIM_Base_SetConfig+0x158>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d108      	bne.n	8005abc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <TIM_Base_SetConfig+0x144>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d013      	beq.n	8005b10 <TIM_Base_SetConfig+0x110>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a1a      	ldr	r2, [pc, #104]	; (8005b54 <TIM_Base_SetConfig+0x154>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d00f      	beq.n	8005b10 <TIM_Base_SetConfig+0x110>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a1a      	ldr	r2, [pc, #104]	; (8005b5c <TIM_Base_SetConfig+0x15c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00b      	beq.n	8005b10 <TIM_Base_SetConfig+0x110>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a19      	ldr	r2, [pc, #100]	; (8005b60 <TIM_Base_SetConfig+0x160>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d007      	beq.n	8005b10 <TIM_Base_SetConfig+0x110>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <TIM_Base_SetConfig+0x164>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <TIM_Base_SetConfig+0x110>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a13      	ldr	r2, [pc, #76]	; (8005b58 <TIM_Base_SetConfig+0x158>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d103      	bne.n	8005b18 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d105      	bne.n	8005b36 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f023 0201 	bic.w	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	611a      	str	r2, [r3, #16]
  }
}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40012c00 	.word	0x40012c00
 8005b48:	40000400 	.word	0x40000400
 8005b4c:	40000800 	.word	0x40000800
 8005b50:	40000c00 	.word	0x40000c00
 8005b54:	40013400 	.word	0x40013400
 8005b58:	40015000 	.word	0x40015000
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40014400 	.word	0x40014400
 8005b64:	40014800 	.word	0x40014800

08005b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f023 0201 	bic.w	r2, r3, #1
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f023 030a 	bic.w	r3, r3, #10
 8005ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b087      	sub	sp, #28
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	f023 0210 	bic.w	r2, r3, #16
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	031b      	lsls	r3, r3, #12
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f043 0307 	orr.w	r3, r3, #7
 8005c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	609a      	str	r2, [r3, #8]
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	609a      	str	r2, [r3, #8]
}
 8005c94:	bf00      	nop
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e074      	b.n	8005da2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a34      	ldr	r2, [pc, #208]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d009      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a33      	ldr	r2, [pc, #204]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d004      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a31      	ldr	r2, [pc, #196]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d108      	bne.n	8005d08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cfc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a21      	ldr	r2, [pc, #132]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d022      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d38:	d01d      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1f      	ldr	r2, [pc, #124]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d018      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1d      	ldr	r2, [pc, #116]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d013      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1c      	ldr	r2, [pc, #112]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00e      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a15      	ldr	r2, [pc, #84]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d009      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d004      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a11      	ldr	r2, [pc, #68]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d10c      	bne.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40013400 	.word	0x40013400
 8005db8:	40015000 	.word	0x40015000
 8005dbc:	40000400 	.word	0x40000400
 8005dc0:	40000800 	.word	0x40000800
 8005dc4:	40000c00 	.word	0x40000c00
 8005dc8:	40014000 	.word	0x40014000

08005dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e5c:	b08c      	sub	sp, #48	; 0x30
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	431a      	orrs	r2, r3
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	4baa      	ldr	r3, [pc, #680]	; (8006130 <UART_SetConfig+0x2d8>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e90:	430b      	orrs	r3, r1
 8005e92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a9f      	ldr	r2, [pc, #636]	; (8006134 <UART_SetConfig+0x2dc>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d004      	beq.n	8005ec4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005ece:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	f023 010f 	bic.w	r1, r3, #15
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a90      	ldr	r2, [pc, #576]	; (8006138 <UART_SetConfig+0x2e0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d125      	bne.n	8005f48 <UART_SetConfig+0xf0>
 8005efc:	4b8f      	ldr	r3, [pc, #572]	; (800613c <UART_SetConfig+0x2e4>)
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d81a      	bhi.n	8005f40 <UART_SetConfig+0xe8>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <UART_SetConfig+0xb8>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005f21 	.word	0x08005f21
 8005f14:	08005f31 	.word	0x08005f31
 8005f18:	08005f29 	.word	0x08005f29
 8005f1c:	08005f39 	.word	0x08005f39
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f26:	e116      	b.n	8006156 <UART_SetConfig+0x2fe>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f2e:	e112      	b.n	8006156 <UART_SetConfig+0x2fe>
 8005f30:	2304      	movs	r3, #4
 8005f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f36:	e10e      	b.n	8006156 <UART_SetConfig+0x2fe>
 8005f38:	2308      	movs	r3, #8
 8005f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f3e:	e10a      	b.n	8006156 <UART_SetConfig+0x2fe>
 8005f40:	2310      	movs	r3, #16
 8005f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f46:	e106      	b.n	8006156 <UART_SetConfig+0x2fe>
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a7c      	ldr	r2, [pc, #496]	; (8006140 <UART_SetConfig+0x2e8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d138      	bne.n	8005fc4 <UART_SetConfig+0x16c>
 8005f52:	4b7a      	ldr	r3, [pc, #488]	; (800613c <UART_SetConfig+0x2e4>)
 8005f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f58:	f003 030c 	and.w	r3, r3, #12
 8005f5c:	2b0c      	cmp	r3, #12
 8005f5e:	d82d      	bhi.n	8005fbc <UART_SetConfig+0x164>
 8005f60:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <UART_SetConfig+0x110>)
 8005f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f66:	bf00      	nop
 8005f68:	08005f9d 	.word	0x08005f9d
 8005f6c:	08005fbd 	.word	0x08005fbd
 8005f70:	08005fbd 	.word	0x08005fbd
 8005f74:	08005fbd 	.word	0x08005fbd
 8005f78:	08005fad 	.word	0x08005fad
 8005f7c:	08005fbd 	.word	0x08005fbd
 8005f80:	08005fbd 	.word	0x08005fbd
 8005f84:	08005fbd 	.word	0x08005fbd
 8005f88:	08005fa5 	.word	0x08005fa5
 8005f8c:	08005fbd 	.word	0x08005fbd
 8005f90:	08005fbd 	.word	0x08005fbd
 8005f94:	08005fbd 	.word	0x08005fbd
 8005f98:	08005fb5 	.word	0x08005fb5
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fa2:	e0d8      	b.n	8006156 <UART_SetConfig+0x2fe>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005faa:	e0d4      	b.n	8006156 <UART_SetConfig+0x2fe>
 8005fac:	2304      	movs	r3, #4
 8005fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fb2:	e0d0      	b.n	8006156 <UART_SetConfig+0x2fe>
 8005fb4:	2308      	movs	r3, #8
 8005fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fba:	e0cc      	b.n	8006156 <UART_SetConfig+0x2fe>
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fc2:	e0c8      	b.n	8006156 <UART_SetConfig+0x2fe>
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a5e      	ldr	r2, [pc, #376]	; (8006144 <UART_SetConfig+0x2ec>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d125      	bne.n	800601a <UART_SetConfig+0x1c2>
 8005fce:	4b5b      	ldr	r3, [pc, #364]	; (800613c <UART_SetConfig+0x2e4>)
 8005fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fd8:	2b30      	cmp	r3, #48	; 0x30
 8005fda:	d016      	beq.n	800600a <UART_SetConfig+0x1b2>
 8005fdc:	2b30      	cmp	r3, #48	; 0x30
 8005fde:	d818      	bhi.n	8006012 <UART_SetConfig+0x1ba>
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	d00a      	beq.n	8005ffa <UART_SetConfig+0x1a2>
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d814      	bhi.n	8006012 <UART_SetConfig+0x1ba>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <UART_SetConfig+0x19a>
 8005fec:	2b10      	cmp	r3, #16
 8005fee:	d008      	beq.n	8006002 <UART_SetConfig+0x1aa>
 8005ff0:	e00f      	b.n	8006012 <UART_SetConfig+0x1ba>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ff8:	e0ad      	b.n	8006156 <UART_SetConfig+0x2fe>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006000:	e0a9      	b.n	8006156 <UART_SetConfig+0x2fe>
 8006002:	2304      	movs	r3, #4
 8006004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006008:	e0a5      	b.n	8006156 <UART_SetConfig+0x2fe>
 800600a:	2308      	movs	r3, #8
 800600c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006010:	e0a1      	b.n	8006156 <UART_SetConfig+0x2fe>
 8006012:	2310      	movs	r3, #16
 8006014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006018:	e09d      	b.n	8006156 <UART_SetConfig+0x2fe>
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a4a      	ldr	r2, [pc, #296]	; (8006148 <UART_SetConfig+0x2f0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d125      	bne.n	8006070 <UART_SetConfig+0x218>
 8006024:	4b45      	ldr	r3, [pc, #276]	; (800613c <UART_SetConfig+0x2e4>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800602e:	2bc0      	cmp	r3, #192	; 0xc0
 8006030:	d016      	beq.n	8006060 <UART_SetConfig+0x208>
 8006032:	2bc0      	cmp	r3, #192	; 0xc0
 8006034:	d818      	bhi.n	8006068 <UART_SetConfig+0x210>
 8006036:	2b80      	cmp	r3, #128	; 0x80
 8006038:	d00a      	beq.n	8006050 <UART_SetConfig+0x1f8>
 800603a:	2b80      	cmp	r3, #128	; 0x80
 800603c:	d814      	bhi.n	8006068 <UART_SetConfig+0x210>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <UART_SetConfig+0x1f0>
 8006042:	2b40      	cmp	r3, #64	; 0x40
 8006044:	d008      	beq.n	8006058 <UART_SetConfig+0x200>
 8006046:	e00f      	b.n	8006068 <UART_SetConfig+0x210>
 8006048:	2300      	movs	r3, #0
 800604a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800604e:	e082      	b.n	8006156 <UART_SetConfig+0x2fe>
 8006050:	2302      	movs	r3, #2
 8006052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006056:	e07e      	b.n	8006156 <UART_SetConfig+0x2fe>
 8006058:	2304      	movs	r3, #4
 800605a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800605e:	e07a      	b.n	8006156 <UART_SetConfig+0x2fe>
 8006060:	2308      	movs	r3, #8
 8006062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006066:	e076      	b.n	8006156 <UART_SetConfig+0x2fe>
 8006068:	2310      	movs	r3, #16
 800606a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800606e:	e072      	b.n	8006156 <UART_SetConfig+0x2fe>
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a35      	ldr	r2, [pc, #212]	; (800614c <UART_SetConfig+0x2f4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d12a      	bne.n	80060d0 <UART_SetConfig+0x278>
 800607a:	4b30      	ldr	r3, [pc, #192]	; (800613c <UART_SetConfig+0x2e4>)
 800607c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006088:	d01a      	beq.n	80060c0 <UART_SetConfig+0x268>
 800608a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800608e:	d81b      	bhi.n	80060c8 <UART_SetConfig+0x270>
 8006090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006094:	d00c      	beq.n	80060b0 <UART_SetConfig+0x258>
 8006096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800609a:	d815      	bhi.n	80060c8 <UART_SetConfig+0x270>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <UART_SetConfig+0x250>
 80060a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a4:	d008      	beq.n	80060b8 <UART_SetConfig+0x260>
 80060a6:	e00f      	b.n	80060c8 <UART_SetConfig+0x270>
 80060a8:	2300      	movs	r3, #0
 80060aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ae:	e052      	b.n	8006156 <UART_SetConfig+0x2fe>
 80060b0:	2302      	movs	r3, #2
 80060b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060b6:	e04e      	b.n	8006156 <UART_SetConfig+0x2fe>
 80060b8:	2304      	movs	r3, #4
 80060ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060be:	e04a      	b.n	8006156 <UART_SetConfig+0x2fe>
 80060c0:	2308      	movs	r3, #8
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060c6:	e046      	b.n	8006156 <UART_SetConfig+0x2fe>
 80060c8:	2310      	movs	r3, #16
 80060ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ce:	e042      	b.n	8006156 <UART_SetConfig+0x2fe>
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a17      	ldr	r2, [pc, #92]	; (8006134 <UART_SetConfig+0x2dc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d13a      	bne.n	8006150 <UART_SetConfig+0x2f8>
 80060da:	4b18      	ldr	r3, [pc, #96]	; (800613c <UART_SetConfig+0x2e4>)
 80060dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060e8:	d01a      	beq.n	8006120 <UART_SetConfig+0x2c8>
 80060ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ee:	d81b      	bhi.n	8006128 <UART_SetConfig+0x2d0>
 80060f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f4:	d00c      	beq.n	8006110 <UART_SetConfig+0x2b8>
 80060f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060fa:	d815      	bhi.n	8006128 <UART_SetConfig+0x2d0>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <UART_SetConfig+0x2b0>
 8006100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006104:	d008      	beq.n	8006118 <UART_SetConfig+0x2c0>
 8006106:	e00f      	b.n	8006128 <UART_SetConfig+0x2d0>
 8006108:	2300      	movs	r3, #0
 800610a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800610e:	e022      	b.n	8006156 <UART_SetConfig+0x2fe>
 8006110:	2302      	movs	r3, #2
 8006112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006116:	e01e      	b.n	8006156 <UART_SetConfig+0x2fe>
 8006118:	2304      	movs	r3, #4
 800611a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800611e:	e01a      	b.n	8006156 <UART_SetConfig+0x2fe>
 8006120:	2308      	movs	r3, #8
 8006122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006126:	e016      	b.n	8006156 <UART_SetConfig+0x2fe>
 8006128:	2310      	movs	r3, #16
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800612e:	e012      	b.n	8006156 <UART_SetConfig+0x2fe>
 8006130:	cfff69f3 	.word	0xcfff69f3
 8006134:	40008000 	.word	0x40008000
 8006138:	40013800 	.word	0x40013800
 800613c:	40021000 	.word	0x40021000
 8006140:	40004400 	.word	0x40004400
 8006144:	40004800 	.word	0x40004800
 8006148:	40004c00 	.word	0x40004c00
 800614c:	40005000 	.word	0x40005000
 8006150:	2310      	movs	r3, #16
 8006152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4aae      	ldr	r2, [pc, #696]	; (8006414 <UART_SetConfig+0x5bc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	f040 8097 	bne.w	8006290 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006162:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006166:	2b08      	cmp	r3, #8
 8006168:	d823      	bhi.n	80061b2 <UART_SetConfig+0x35a>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <UART_SetConfig+0x318>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	08006195 	.word	0x08006195
 8006174:	080061b3 	.word	0x080061b3
 8006178:	0800619d 	.word	0x0800619d
 800617c:	080061b3 	.word	0x080061b3
 8006180:	080061a3 	.word	0x080061a3
 8006184:	080061b3 	.word	0x080061b3
 8006188:	080061b3 	.word	0x080061b3
 800618c:	080061b3 	.word	0x080061b3
 8006190:	080061ab 	.word	0x080061ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006194:	f7fe fd80 	bl	8004c98 <HAL_RCC_GetPCLK1Freq>
 8006198:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800619a:	e010      	b.n	80061be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800619c:	4b9e      	ldr	r3, [pc, #632]	; (8006418 <UART_SetConfig+0x5c0>)
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061a0:	e00d      	b.n	80061be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061a2:	f7fe fd0b 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 80061a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061a8:	e009      	b.n	80061be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061b0:	e005      	b.n	80061be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 8130 	beq.w	8006426 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	4a94      	ldr	r2, [pc, #592]	; (800641c <UART_SetConfig+0x5c4>)
 80061cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061d0:	461a      	mov	r2, r3
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80061d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	4413      	add	r3, r2
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d305      	bcc.n	80061f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d903      	bls.n	80061fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80061fc:	e113      	b.n	8006426 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	2200      	movs	r2, #0
 8006202:	60bb      	str	r3, [r7, #8]
 8006204:	60fa      	str	r2, [r7, #12]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	4a84      	ldr	r2, [pc, #528]	; (800641c <UART_SetConfig+0x5c4>)
 800620c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006210:	b29b      	uxth	r3, r3
 8006212:	2200      	movs	r2, #0
 8006214:	603b      	str	r3, [r7, #0]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800621c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006220:	f7f9 fffa 	bl	8000218 <__aeabi_uldivmod>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4610      	mov	r0, r2
 800622a:	4619      	mov	r1, r3
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	020b      	lsls	r3, r1, #8
 8006236:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800623a:	0202      	lsls	r2, r0, #8
 800623c:	6979      	ldr	r1, [r7, #20]
 800623e:	6849      	ldr	r1, [r1, #4]
 8006240:	0849      	lsrs	r1, r1, #1
 8006242:	2000      	movs	r0, #0
 8006244:	460c      	mov	r4, r1
 8006246:	4605      	mov	r5, r0
 8006248:	eb12 0804 	adds.w	r8, r2, r4
 800624c:	eb43 0905 	adc.w	r9, r3, r5
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	469a      	mov	sl, r3
 8006258:	4693      	mov	fp, r2
 800625a:	4652      	mov	r2, sl
 800625c:	465b      	mov	r3, fp
 800625e:	4640      	mov	r0, r8
 8006260:	4649      	mov	r1, r9
 8006262:	f7f9 ffd9 	bl	8000218 <__aeabi_uldivmod>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4613      	mov	r3, r2
 800626c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006274:	d308      	bcc.n	8006288 <UART_SetConfig+0x430>
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800627c:	d204      	bcs.n	8006288 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6a3a      	ldr	r2, [r7, #32]
 8006284:	60da      	str	r2, [r3, #12]
 8006286:	e0ce      	b.n	8006426 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800628e:	e0ca      	b.n	8006426 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006298:	d166      	bne.n	8006368 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800629a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d827      	bhi.n	80062f2 <UART_SetConfig+0x49a>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <UART_SetConfig+0x450>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062cd 	.word	0x080062cd
 80062ac:	080062d5 	.word	0x080062d5
 80062b0:	080062dd 	.word	0x080062dd
 80062b4:	080062f3 	.word	0x080062f3
 80062b8:	080062e3 	.word	0x080062e3
 80062bc:	080062f3 	.word	0x080062f3
 80062c0:	080062f3 	.word	0x080062f3
 80062c4:	080062f3 	.word	0x080062f3
 80062c8:	080062eb 	.word	0x080062eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062cc:	f7fe fce4 	bl	8004c98 <HAL_RCC_GetPCLK1Freq>
 80062d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062d2:	e014      	b.n	80062fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d4:	f7fe fcf6 	bl	8004cc4 <HAL_RCC_GetPCLK2Freq>
 80062d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062da:	e010      	b.n	80062fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062dc:	4b4e      	ldr	r3, [pc, #312]	; (8006418 <UART_SetConfig+0x5c0>)
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062e0:	e00d      	b.n	80062fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062e2:	f7fe fc6b 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 80062e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062e8:	e009      	b.n	80062fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062f0:	e005      	b.n	80062fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8090 	beq.w	8006426 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	4a44      	ldr	r2, [pc, #272]	; (800641c <UART_SetConfig+0x5c4>)
 800630c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006310:	461a      	mov	r2, r3
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	fbb3 f3f2 	udiv	r3, r3, r2
 8006318:	005a      	lsls	r2, r3, #1
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	441a      	add	r2, r3
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	fbb2 f3f3 	udiv	r3, r2, r3
 800632a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	2b0f      	cmp	r3, #15
 8006330:	d916      	bls.n	8006360 <UART_SetConfig+0x508>
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006338:	d212      	bcs.n	8006360 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f023 030f 	bic.w	r3, r3, #15
 8006342:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	085b      	lsrs	r3, r3, #1
 8006348:	b29b      	uxth	r3, r3
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	b29a      	uxth	r2, r3
 8006350:	8bfb      	ldrh	r3, [r7, #30]
 8006352:	4313      	orrs	r3, r2
 8006354:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	8bfa      	ldrh	r2, [r7, #30]
 800635c:	60da      	str	r2, [r3, #12]
 800635e:	e062      	b.n	8006426 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006366:	e05e      	b.n	8006426 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006368:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800636c:	2b08      	cmp	r3, #8
 800636e:	d828      	bhi.n	80063c2 <UART_SetConfig+0x56a>
 8006370:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <UART_SetConfig+0x520>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	0800639d 	.word	0x0800639d
 800637c:	080063a5 	.word	0x080063a5
 8006380:	080063ad 	.word	0x080063ad
 8006384:	080063c3 	.word	0x080063c3
 8006388:	080063b3 	.word	0x080063b3
 800638c:	080063c3 	.word	0x080063c3
 8006390:	080063c3 	.word	0x080063c3
 8006394:	080063c3 	.word	0x080063c3
 8006398:	080063bb 	.word	0x080063bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800639c:	f7fe fc7c 	bl	8004c98 <HAL_RCC_GetPCLK1Freq>
 80063a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063a2:	e014      	b.n	80063ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063a4:	f7fe fc8e 	bl	8004cc4 <HAL_RCC_GetPCLK2Freq>
 80063a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063aa:	e010      	b.n	80063ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063ac:	4b1a      	ldr	r3, [pc, #104]	; (8006418 <UART_SetConfig+0x5c0>)
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063b0:	e00d      	b.n	80063ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063b2:	f7fe fc03 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 80063b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063b8:	e009      	b.n	80063ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063c0:	e005      	b.n	80063ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80063cc:	bf00      	nop
    }

    if (pclk != 0U)
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d028      	beq.n	8006426 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	4a10      	ldr	r2, [pc, #64]	; (800641c <UART_SetConfig+0x5c4>)
 80063da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063de:	461a      	mov	r2, r3
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	085b      	lsrs	r3, r3, #1
 80063ec:	441a      	add	r2, r3
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	2b0f      	cmp	r3, #15
 80063fc:	d910      	bls.n	8006420 <UART_SetConfig+0x5c8>
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006404:	d20c      	bcs.n	8006420 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	b29a      	uxth	r2, r3
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	60da      	str	r2, [r3, #12]
 8006410:	e009      	b.n	8006426 <UART_SetConfig+0x5ce>
 8006412:	bf00      	nop
 8006414:	40008000 	.word	0x40008000
 8006418:	00f42400 	.word	0x00f42400
 800641c:	08007730 	.word	0x08007730
      }
      else
      {
        ret = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2201      	movs	r2, #1
 800642a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2201      	movs	r2, #1
 8006432:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2200      	movs	r2, #0
 800643a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2200      	movs	r2, #0
 8006440:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006442:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006446:	4618      	mov	r0, r3
 8006448:	3730      	adds	r7, #48	; 0x30
 800644a:	46bd      	mov	sp, r7
 800644c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	f003 0304 	and.w	r3, r3, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01a      	beq.n	8006566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800654e:	d10a      	bne.n	8006566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	605a      	str	r2, [r3, #4]
  }
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b098      	sub	sp, #96	; 0x60
 8006598:	af02      	add	r7, sp, #8
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065a4:	f7fb fc58 	bl	8001e58 <HAL_GetTick>
 80065a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d12f      	bne.n	8006618 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065c0:	2200      	movs	r2, #0
 80065c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f88e 	bl	80066e8 <UART_WaitOnFlagUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d022      	beq.n	8006618 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065e6:	653b      	str	r3, [r7, #80]	; 0x50
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065f0:	647b      	str	r3, [r7, #68]	; 0x44
 80065f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e6      	bne.n	80065d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e063      	b.n	80066e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	2b04      	cmp	r3, #4
 8006624:	d149      	bne.n	80066ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006626:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800662e:	2200      	movs	r2, #0
 8006630:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f857 	bl	80066e8 <UART_WaitOnFlagUntilTimeout>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d03c      	beq.n	80066ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	623b      	str	r3, [r7, #32]
   return(result);
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006654:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800665e:	633b      	str	r3, [r7, #48]	; 0x30
 8006660:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e6      	bne.n	8006640 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3308      	adds	r3, #8
 8006678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	60fb      	str	r3, [r7, #12]
   return(result);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f023 0301 	bic.w	r3, r3, #1
 8006688:	64bb      	str	r3, [r7, #72]	; 0x48
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3308      	adds	r3, #8
 8006690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006692:	61fa      	str	r2, [r7, #28]
 8006694:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	69b9      	ldr	r1, [r7, #24]
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	617b      	str	r3, [r7, #20]
   return(result);
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e5      	bne.n	8006672 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e012      	b.n	80066e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3758      	adds	r7, #88	; 0x58
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	4613      	mov	r3, r2
 80066f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f8:	e04f      	b.n	800679a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006700:	d04b      	beq.n	800679a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006702:	f7fb fba9 	bl	8001e58 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	429a      	cmp	r2, r3
 8006710:	d302      	bcc.n	8006718 <UART_WaitOnFlagUntilTimeout+0x30>
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e04e      	b.n	80067ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d037      	beq.n	800679a <UART_WaitOnFlagUntilTimeout+0xb2>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b80      	cmp	r3, #128	; 0x80
 800672e:	d034      	beq.n	800679a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b40      	cmp	r3, #64	; 0x40
 8006734:	d031      	beq.n	800679a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	f003 0308 	and.w	r3, r3, #8
 8006740:	2b08      	cmp	r3, #8
 8006742:	d110      	bne.n	8006766 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2208      	movs	r2, #8
 800674a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 f838 	bl	80067c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2208      	movs	r2, #8
 8006756:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e029      	b.n	80067ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006774:	d111      	bne.n	800679a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800677e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 f81e 	bl	80067c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e00f      	b.n	80067ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69da      	ldr	r2, [r3, #28]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4013      	ands	r3, r2
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	bf0c      	ite	eq
 80067aa:	2301      	moveq	r3, #1
 80067ac:	2300      	movne	r3, #0
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	461a      	mov	r2, r3
 80067b2:	79fb      	ldrb	r3, [r7, #7]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d0a0      	beq.n	80066fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b095      	sub	sp, #84	; 0x54
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e8:	643b      	str	r3, [r7, #64]	; 0x40
 80067ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e6      	bne.n	80067ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3308      	adds	r3, #8
 8006802:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	e853 3f00 	ldrex	r3, [r3]
 800680a:	61fb      	str	r3, [r7, #28]
   return(result);
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006812:	f023 0301 	bic.w	r3, r3, #1
 8006816:	64bb      	str	r3, [r7, #72]	; 0x48
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3308      	adds	r3, #8
 800681e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006820:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006828:	e841 2300 	strex	r3, r2, [r1]
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e3      	bne.n	80067fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006838:	2b01      	cmp	r3, #1
 800683a:	d118      	bne.n	800686e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	60bb      	str	r3, [r7, #8]
   return(result);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f023 0310 	bic.w	r3, r3, #16
 8006850:	647b      	str	r3, [r7, #68]	; 0x44
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	6979      	ldr	r1, [r7, #20]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	613b      	str	r3, [r7, #16]
   return(result);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e6      	bne.n	800683c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006882:	bf00      	nop
 8006884:	3754      	adds	r7, #84	; 0x54
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b086      	sub	sp, #24
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	607a      	str	r2, [r7, #4]
 800689a:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e058      	b.n	8006958 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f7fa ffe1 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2224      	movs	r2, #36	; 0x24
 80068c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0201 	bic.w	r2, r2, #1
 80068d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f7ff fdb6 	bl	8006450 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff fab7 	bl	8005e58 <UART_SetConfig>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e031      	b.n	8006958 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006902:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	430a      	orrs	r2, r1
 8006916:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	055b      	lsls	r3, r3, #21
 800691c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	041b      	lsls	r3, r3, #16
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	4313      	orrs	r3, r2
 8006926:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8006932:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	6812      	ldr	r2, [r2, #0]
 800693a:	6979      	ldr	r1, [r7, #20]
 800693c:	430b      	orrs	r3, r1
 800693e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0201 	orr.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7ff fe1f 	bl	8006594 <UART_CheckIdleState>
 8006956:	4603      	mov	r3, r0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800696e:	2b01      	cmp	r3, #1
 8006970:	d101      	bne.n	8006976 <HAL_UARTEx_DisableFifoMode+0x16>
 8006972:	2302      	movs	r3, #2
 8006974:	e027      	b.n	80069c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2224      	movs	r2, #36	; 0x24
 8006982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80069a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d101      	bne.n	80069ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069e6:	2302      	movs	r3, #2
 80069e8:	e02d      	b.n	8006a46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2224      	movs	r2, #36	; 0x24
 80069f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0201 	bic.w	r2, r2, #1
 8006a10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f850 	bl	8006acc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d101      	bne.n	8006a66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a62:	2302      	movs	r3, #2
 8006a64:	e02d      	b.n	8006ac2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2224      	movs	r2, #36	; 0x24
 8006a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f022 0201 	bic.w	r2, r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f812 	bl	8006acc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d108      	bne.n	8006aee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006aec:	e031      	b.n	8006b52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006aee:	2308      	movs	r3, #8
 8006af0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006af2:	2308      	movs	r3, #8
 8006af4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	0e5b      	lsrs	r3, r3, #25
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	0f5b      	lsrs	r3, r3, #29
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	7b3a      	ldrb	r2, [r7, #12]
 8006b1a:	4911      	ldr	r1, [pc, #68]	; (8006b60 <UARTEx_SetNbDataToProcess+0x94>)
 8006b1c:	5c8a      	ldrb	r2, [r1, r2]
 8006b1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b22:	7b3a      	ldrb	r2, [r7, #12]
 8006b24:	490f      	ldr	r1, [pc, #60]	; (8006b64 <UARTEx_SetNbDataToProcess+0x98>)
 8006b26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b28:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	7b7a      	ldrb	r2, [r7, #13]
 8006b38:	4909      	ldr	r1, [pc, #36]	; (8006b60 <UARTEx_SetNbDataToProcess+0x94>)
 8006b3a:	5c8a      	ldrb	r2, [r1, r2]
 8006b3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b40:	7b7a      	ldrb	r2, [r7, #13]
 8006b42:	4908      	ldr	r1, [pc, #32]	; (8006b64 <UARTEx_SetNbDataToProcess+0x98>)
 8006b44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b46:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b52:	bf00      	nop
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	08007748 	.word	0x08007748
 8006b64:	08007750 	.word	0x08007750

08006b68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b70:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	43db      	mvns	r3, r3
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	4013      	ands	r3, r2
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b085      	sub	sp, #20
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <atoi>:
 8006bda:	220a      	movs	r2, #10
 8006bdc:	2100      	movs	r1, #0
 8006bde:	f000 b92f 	b.w	8006e40 <strtol>
	...

08006be4 <sbrk_aligned>:
 8006be4:	b570      	push	{r4, r5, r6, lr}
 8006be6:	4e0e      	ldr	r6, [pc, #56]	; (8006c20 <sbrk_aligned+0x3c>)
 8006be8:	460c      	mov	r4, r1
 8006bea:	6831      	ldr	r1, [r6, #0]
 8006bec:	4605      	mov	r5, r0
 8006bee:	b911      	cbnz	r1, 8006bf6 <sbrk_aligned+0x12>
 8006bf0:	f000 fb62 	bl	80072b8 <_sbrk_r>
 8006bf4:	6030      	str	r0, [r6, #0]
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f000 fb5d 	bl	80072b8 <_sbrk_r>
 8006bfe:	1c43      	adds	r3, r0, #1
 8006c00:	d00a      	beq.n	8006c18 <sbrk_aligned+0x34>
 8006c02:	1cc4      	adds	r4, r0, #3
 8006c04:	f024 0403 	bic.w	r4, r4, #3
 8006c08:	42a0      	cmp	r0, r4
 8006c0a:	d007      	beq.n	8006c1c <sbrk_aligned+0x38>
 8006c0c:	1a21      	subs	r1, r4, r0
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 fb52 	bl	80072b8 <_sbrk_r>
 8006c14:	3001      	adds	r0, #1
 8006c16:	d101      	bne.n	8006c1c <sbrk_aligned+0x38>
 8006c18:	f04f 34ff 	mov.w	r4, #4294967295
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	bd70      	pop	{r4, r5, r6, pc}
 8006c20:	200009a8 	.word	0x200009a8

08006c24 <_malloc_r>:
 8006c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c28:	1ccd      	adds	r5, r1, #3
 8006c2a:	f025 0503 	bic.w	r5, r5, #3
 8006c2e:	3508      	adds	r5, #8
 8006c30:	2d0c      	cmp	r5, #12
 8006c32:	bf38      	it	cc
 8006c34:	250c      	movcc	r5, #12
 8006c36:	2d00      	cmp	r5, #0
 8006c38:	4607      	mov	r7, r0
 8006c3a:	db01      	blt.n	8006c40 <_malloc_r+0x1c>
 8006c3c:	42a9      	cmp	r1, r5
 8006c3e:	d905      	bls.n	8006c4c <_malloc_r+0x28>
 8006c40:	230c      	movs	r3, #12
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	2600      	movs	r6, #0
 8006c46:	4630      	mov	r0, r6
 8006c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d20 <_malloc_r+0xfc>
 8006c50:	f000 f868 	bl	8006d24 <__malloc_lock>
 8006c54:	f8d8 3000 	ldr.w	r3, [r8]
 8006c58:	461c      	mov	r4, r3
 8006c5a:	bb5c      	cbnz	r4, 8006cb4 <_malloc_r+0x90>
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	4638      	mov	r0, r7
 8006c60:	f7ff ffc0 	bl	8006be4 <sbrk_aligned>
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	4604      	mov	r4, r0
 8006c68:	d155      	bne.n	8006d16 <_malloc_r+0xf2>
 8006c6a:	f8d8 4000 	ldr.w	r4, [r8]
 8006c6e:	4626      	mov	r6, r4
 8006c70:	2e00      	cmp	r6, #0
 8006c72:	d145      	bne.n	8006d00 <_malloc_r+0xdc>
 8006c74:	2c00      	cmp	r4, #0
 8006c76:	d048      	beq.n	8006d0a <_malloc_r+0xe6>
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	eb04 0903 	add.w	r9, r4, r3
 8006c82:	f000 fb19 	bl	80072b8 <_sbrk_r>
 8006c86:	4581      	cmp	r9, r0
 8006c88:	d13f      	bne.n	8006d0a <_malloc_r+0xe6>
 8006c8a:	6821      	ldr	r1, [r4, #0]
 8006c8c:	1a6d      	subs	r5, r5, r1
 8006c8e:	4629      	mov	r1, r5
 8006c90:	4638      	mov	r0, r7
 8006c92:	f7ff ffa7 	bl	8006be4 <sbrk_aligned>
 8006c96:	3001      	adds	r0, #1
 8006c98:	d037      	beq.n	8006d0a <_malloc_r+0xe6>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	442b      	add	r3, r5
 8006c9e:	6023      	str	r3, [r4, #0]
 8006ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d038      	beq.n	8006d1a <_malloc_r+0xf6>
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	42a2      	cmp	r2, r4
 8006cac:	d12b      	bne.n	8006d06 <_malloc_r+0xe2>
 8006cae:	2200      	movs	r2, #0
 8006cb0:	605a      	str	r2, [r3, #4]
 8006cb2:	e00f      	b.n	8006cd4 <_malloc_r+0xb0>
 8006cb4:	6822      	ldr	r2, [r4, #0]
 8006cb6:	1b52      	subs	r2, r2, r5
 8006cb8:	d41f      	bmi.n	8006cfa <_malloc_r+0xd6>
 8006cba:	2a0b      	cmp	r2, #11
 8006cbc:	d917      	bls.n	8006cee <_malloc_r+0xca>
 8006cbe:	1961      	adds	r1, r4, r5
 8006cc0:	42a3      	cmp	r3, r4
 8006cc2:	6025      	str	r5, [r4, #0]
 8006cc4:	bf18      	it	ne
 8006cc6:	6059      	strne	r1, [r3, #4]
 8006cc8:	6863      	ldr	r3, [r4, #4]
 8006cca:	bf08      	it	eq
 8006ccc:	f8c8 1000 	streq.w	r1, [r8]
 8006cd0:	5162      	str	r2, [r4, r5]
 8006cd2:	604b      	str	r3, [r1, #4]
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	f104 060b 	add.w	r6, r4, #11
 8006cda:	f000 f829 	bl	8006d30 <__malloc_unlock>
 8006cde:	f026 0607 	bic.w	r6, r6, #7
 8006ce2:	1d23      	adds	r3, r4, #4
 8006ce4:	1af2      	subs	r2, r6, r3
 8006ce6:	d0ae      	beq.n	8006c46 <_malloc_r+0x22>
 8006ce8:	1b9b      	subs	r3, r3, r6
 8006cea:	50a3      	str	r3, [r4, r2]
 8006cec:	e7ab      	b.n	8006c46 <_malloc_r+0x22>
 8006cee:	42a3      	cmp	r3, r4
 8006cf0:	6862      	ldr	r2, [r4, #4]
 8006cf2:	d1dd      	bne.n	8006cb0 <_malloc_r+0x8c>
 8006cf4:	f8c8 2000 	str.w	r2, [r8]
 8006cf8:	e7ec      	b.n	8006cd4 <_malloc_r+0xb0>
 8006cfa:	4623      	mov	r3, r4
 8006cfc:	6864      	ldr	r4, [r4, #4]
 8006cfe:	e7ac      	b.n	8006c5a <_malloc_r+0x36>
 8006d00:	4634      	mov	r4, r6
 8006d02:	6876      	ldr	r6, [r6, #4]
 8006d04:	e7b4      	b.n	8006c70 <_malloc_r+0x4c>
 8006d06:	4613      	mov	r3, r2
 8006d08:	e7cc      	b.n	8006ca4 <_malloc_r+0x80>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	603b      	str	r3, [r7, #0]
 8006d0e:	4638      	mov	r0, r7
 8006d10:	f000 f80e 	bl	8006d30 <__malloc_unlock>
 8006d14:	e797      	b.n	8006c46 <_malloc_r+0x22>
 8006d16:	6025      	str	r5, [r4, #0]
 8006d18:	e7dc      	b.n	8006cd4 <_malloc_r+0xb0>
 8006d1a:	605b      	str	r3, [r3, #4]
 8006d1c:	deff      	udf	#255	; 0xff
 8006d1e:	bf00      	nop
 8006d20:	200009a4 	.word	0x200009a4

08006d24 <__malloc_lock>:
 8006d24:	4801      	ldr	r0, [pc, #4]	; (8006d2c <__malloc_lock+0x8>)
 8006d26:	f000 bb14 	b.w	8007352 <__retarget_lock_acquire_recursive>
 8006d2a:	bf00      	nop
 8006d2c:	20000aec 	.word	0x20000aec

08006d30 <__malloc_unlock>:
 8006d30:	4801      	ldr	r0, [pc, #4]	; (8006d38 <__malloc_unlock+0x8>)
 8006d32:	f000 bb0f 	b.w	8007354 <__retarget_lock_release_recursive>
 8006d36:	bf00      	nop
 8006d38:	20000aec 	.word	0x20000aec

08006d3c <_strtol_l.constprop.0>:
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d42:	d001      	beq.n	8006d48 <_strtol_l.constprop.0+0xc>
 8006d44:	2b24      	cmp	r3, #36	; 0x24
 8006d46:	d906      	bls.n	8006d56 <_strtol_l.constprop.0+0x1a>
 8006d48:	f000 fad8 	bl	80072fc <__errno>
 8006d4c:	2316      	movs	r3, #22
 8006d4e:	6003      	str	r3, [r0, #0]
 8006d50:	2000      	movs	r0, #0
 8006d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006e3c <_strtol_l.constprop.0+0x100>
 8006d5a:	460d      	mov	r5, r1
 8006d5c:	462e      	mov	r6, r5
 8006d5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d62:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006d66:	f017 0708 	ands.w	r7, r7, #8
 8006d6a:	d1f7      	bne.n	8006d5c <_strtol_l.constprop.0+0x20>
 8006d6c:	2c2d      	cmp	r4, #45	; 0x2d
 8006d6e:	d132      	bne.n	8006dd6 <_strtol_l.constprop.0+0x9a>
 8006d70:	782c      	ldrb	r4, [r5, #0]
 8006d72:	2701      	movs	r7, #1
 8006d74:	1cb5      	adds	r5, r6, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d05b      	beq.n	8006e32 <_strtol_l.constprop.0+0xf6>
 8006d7a:	2b10      	cmp	r3, #16
 8006d7c:	d109      	bne.n	8006d92 <_strtol_l.constprop.0+0x56>
 8006d7e:	2c30      	cmp	r4, #48	; 0x30
 8006d80:	d107      	bne.n	8006d92 <_strtol_l.constprop.0+0x56>
 8006d82:	782c      	ldrb	r4, [r5, #0]
 8006d84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006d88:	2c58      	cmp	r4, #88	; 0x58
 8006d8a:	d14d      	bne.n	8006e28 <_strtol_l.constprop.0+0xec>
 8006d8c:	786c      	ldrb	r4, [r5, #1]
 8006d8e:	2310      	movs	r3, #16
 8006d90:	3502      	adds	r5, #2
 8006d92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006d96:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d9a:	f04f 0e00 	mov.w	lr, #0
 8006d9e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006da2:	4676      	mov	r6, lr
 8006da4:	fb03 8a19 	mls	sl, r3, r9, r8
 8006da8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006dac:	f1bc 0f09 	cmp.w	ip, #9
 8006db0:	d816      	bhi.n	8006de0 <_strtol_l.constprop.0+0xa4>
 8006db2:	4664      	mov	r4, ip
 8006db4:	42a3      	cmp	r3, r4
 8006db6:	dd24      	ble.n	8006e02 <_strtol_l.constprop.0+0xc6>
 8006db8:	f1be 3fff 	cmp.w	lr, #4294967295
 8006dbc:	d008      	beq.n	8006dd0 <_strtol_l.constprop.0+0x94>
 8006dbe:	45b1      	cmp	r9, r6
 8006dc0:	d31c      	bcc.n	8006dfc <_strtol_l.constprop.0+0xc0>
 8006dc2:	d101      	bne.n	8006dc8 <_strtol_l.constprop.0+0x8c>
 8006dc4:	45a2      	cmp	sl, r4
 8006dc6:	db19      	blt.n	8006dfc <_strtol_l.constprop.0+0xc0>
 8006dc8:	fb06 4603 	mla	r6, r6, r3, r4
 8006dcc:	f04f 0e01 	mov.w	lr, #1
 8006dd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006dd4:	e7e8      	b.n	8006da8 <_strtol_l.constprop.0+0x6c>
 8006dd6:	2c2b      	cmp	r4, #43	; 0x2b
 8006dd8:	bf04      	itt	eq
 8006dda:	782c      	ldrbeq	r4, [r5, #0]
 8006ddc:	1cb5      	addeq	r5, r6, #2
 8006dde:	e7ca      	b.n	8006d76 <_strtol_l.constprop.0+0x3a>
 8006de0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006de4:	f1bc 0f19 	cmp.w	ip, #25
 8006de8:	d801      	bhi.n	8006dee <_strtol_l.constprop.0+0xb2>
 8006dea:	3c37      	subs	r4, #55	; 0x37
 8006dec:	e7e2      	b.n	8006db4 <_strtol_l.constprop.0+0x78>
 8006dee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006df2:	f1bc 0f19 	cmp.w	ip, #25
 8006df6:	d804      	bhi.n	8006e02 <_strtol_l.constprop.0+0xc6>
 8006df8:	3c57      	subs	r4, #87	; 0x57
 8006dfa:	e7db      	b.n	8006db4 <_strtol_l.constprop.0+0x78>
 8006dfc:	f04f 3eff 	mov.w	lr, #4294967295
 8006e00:	e7e6      	b.n	8006dd0 <_strtol_l.constprop.0+0x94>
 8006e02:	f1be 3fff 	cmp.w	lr, #4294967295
 8006e06:	d105      	bne.n	8006e14 <_strtol_l.constprop.0+0xd8>
 8006e08:	2322      	movs	r3, #34	; 0x22
 8006e0a:	6003      	str	r3, [r0, #0]
 8006e0c:	4646      	mov	r6, r8
 8006e0e:	b942      	cbnz	r2, 8006e22 <_strtol_l.constprop.0+0xe6>
 8006e10:	4630      	mov	r0, r6
 8006e12:	e79e      	b.n	8006d52 <_strtol_l.constprop.0+0x16>
 8006e14:	b107      	cbz	r7, 8006e18 <_strtol_l.constprop.0+0xdc>
 8006e16:	4276      	negs	r6, r6
 8006e18:	2a00      	cmp	r2, #0
 8006e1a:	d0f9      	beq.n	8006e10 <_strtol_l.constprop.0+0xd4>
 8006e1c:	f1be 0f00 	cmp.w	lr, #0
 8006e20:	d000      	beq.n	8006e24 <_strtol_l.constprop.0+0xe8>
 8006e22:	1e69      	subs	r1, r5, #1
 8006e24:	6011      	str	r1, [r2, #0]
 8006e26:	e7f3      	b.n	8006e10 <_strtol_l.constprop.0+0xd4>
 8006e28:	2430      	movs	r4, #48	; 0x30
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1b1      	bne.n	8006d92 <_strtol_l.constprop.0+0x56>
 8006e2e:	2308      	movs	r3, #8
 8006e30:	e7af      	b.n	8006d92 <_strtol_l.constprop.0+0x56>
 8006e32:	2c30      	cmp	r4, #48	; 0x30
 8006e34:	d0a5      	beq.n	8006d82 <_strtol_l.constprop.0+0x46>
 8006e36:	230a      	movs	r3, #10
 8006e38:	e7ab      	b.n	8006d92 <_strtol_l.constprop.0+0x56>
 8006e3a:	bf00      	nop
 8006e3c:	08007759 	.word	0x08007759

08006e40 <strtol>:
 8006e40:	4613      	mov	r3, r2
 8006e42:	460a      	mov	r2, r1
 8006e44:	4601      	mov	r1, r0
 8006e46:	4802      	ldr	r0, [pc, #8]	; (8006e50 <strtol+0x10>)
 8006e48:	6800      	ldr	r0, [r0, #0]
 8006e4a:	f7ff bf77 	b.w	8006d3c <_strtol_l.constprop.0>
 8006e4e:	bf00      	nop
 8006e50:	20000064 	.word	0x20000064

08006e54 <std>:
 8006e54:	2300      	movs	r3, #0
 8006e56:	b510      	push	{r4, lr}
 8006e58:	4604      	mov	r4, r0
 8006e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e62:	6083      	str	r3, [r0, #8]
 8006e64:	8181      	strh	r1, [r0, #12]
 8006e66:	6643      	str	r3, [r0, #100]	; 0x64
 8006e68:	81c2      	strh	r2, [r0, #14]
 8006e6a:	6183      	str	r3, [r0, #24]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	2208      	movs	r2, #8
 8006e70:	305c      	adds	r0, #92	; 0x5c
 8006e72:	f000 f9e5 	bl	8007240 <memset>
 8006e76:	4b0d      	ldr	r3, [pc, #52]	; (8006eac <std+0x58>)
 8006e78:	6263      	str	r3, [r4, #36]	; 0x24
 8006e7a:	4b0d      	ldr	r3, [pc, #52]	; (8006eb0 <std+0x5c>)
 8006e7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <std+0x60>)
 8006e80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e82:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <std+0x64>)
 8006e84:	6323      	str	r3, [r4, #48]	; 0x30
 8006e86:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <std+0x68>)
 8006e88:	6224      	str	r4, [r4, #32]
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d006      	beq.n	8006e9c <std+0x48>
 8006e8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006e92:	4294      	cmp	r4, r2
 8006e94:	d002      	beq.n	8006e9c <std+0x48>
 8006e96:	33d0      	adds	r3, #208	; 0xd0
 8006e98:	429c      	cmp	r4, r3
 8006e9a:	d105      	bne.n	8006ea8 <std+0x54>
 8006e9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea4:	f000 ba54 	b.w	8007350 <__retarget_lock_init_recursive>
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	bf00      	nop
 8006eac:	08007091 	.word	0x08007091
 8006eb0:	080070b3 	.word	0x080070b3
 8006eb4:	080070eb 	.word	0x080070eb
 8006eb8:	0800710f 	.word	0x0800710f
 8006ebc:	200009ac 	.word	0x200009ac

08006ec0 <stdio_exit_handler>:
 8006ec0:	4a02      	ldr	r2, [pc, #8]	; (8006ecc <stdio_exit_handler+0xc>)
 8006ec2:	4903      	ldr	r1, [pc, #12]	; (8006ed0 <stdio_exit_handler+0x10>)
 8006ec4:	4803      	ldr	r0, [pc, #12]	; (8006ed4 <stdio_exit_handler+0x14>)
 8006ec6:	f000 b869 	b.w	8006f9c <_fwalk_sglue>
 8006eca:	bf00      	nop
 8006ecc:	2000000c 	.word	0x2000000c
 8006ed0:	080074fd 	.word	0x080074fd
 8006ed4:	20000018 	.word	0x20000018

08006ed8 <cleanup_stdio>:
 8006ed8:	6841      	ldr	r1, [r0, #4]
 8006eda:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <cleanup_stdio+0x34>)
 8006edc:	4299      	cmp	r1, r3
 8006ede:	b510      	push	{r4, lr}
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	d001      	beq.n	8006ee8 <cleanup_stdio+0x10>
 8006ee4:	f000 fb0a 	bl	80074fc <_fflush_r>
 8006ee8:	68a1      	ldr	r1, [r4, #8]
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <cleanup_stdio+0x38>)
 8006eec:	4299      	cmp	r1, r3
 8006eee:	d002      	beq.n	8006ef6 <cleanup_stdio+0x1e>
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f000 fb03 	bl	80074fc <_fflush_r>
 8006ef6:	68e1      	ldr	r1, [r4, #12]
 8006ef8:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <cleanup_stdio+0x3c>)
 8006efa:	4299      	cmp	r1, r3
 8006efc:	d004      	beq.n	8006f08 <cleanup_stdio+0x30>
 8006efe:	4620      	mov	r0, r4
 8006f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f04:	f000 bafa 	b.w	80074fc <_fflush_r>
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	bf00      	nop
 8006f0c:	200009ac 	.word	0x200009ac
 8006f10:	20000a14 	.word	0x20000a14
 8006f14:	20000a7c 	.word	0x20000a7c

08006f18 <global_stdio_init.part.0>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <global_stdio_init.part.0+0x30>)
 8006f1c:	4c0b      	ldr	r4, [pc, #44]	; (8006f4c <global_stdio_init.part.0+0x34>)
 8006f1e:	4a0c      	ldr	r2, [pc, #48]	; (8006f50 <global_stdio_init.part.0+0x38>)
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	4620      	mov	r0, r4
 8006f24:	2200      	movs	r2, #0
 8006f26:	2104      	movs	r1, #4
 8006f28:	f7ff ff94 	bl	8006e54 <std>
 8006f2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f30:	2201      	movs	r2, #1
 8006f32:	2109      	movs	r1, #9
 8006f34:	f7ff ff8e 	bl	8006e54 <std>
 8006f38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f42:	2112      	movs	r1, #18
 8006f44:	f7ff bf86 	b.w	8006e54 <std>
 8006f48:	20000ae4 	.word	0x20000ae4
 8006f4c:	200009ac 	.word	0x200009ac
 8006f50:	08006ec1 	.word	0x08006ec1

08006f54 <__sfp_lock_acquire>:
 8006f54:	4801      	ldr	r0, [pc, #4]	; (8006f5c <__sfp_lock_acquire+0x8>)
 8006f56:	f000 b9fc 	b.w	8007352 <__retarget_lock_acquire_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	20000aed 	.word	0x20000aed

08006f60 <__sfp_lock_release>:
 8006f60:	4801      	ldr	r0, [pc, #4]	; (8006f68 <__sfp_lock_release+0x8>)
 8006f62:	f000 b9f7 	b.w	8007354 <__retarget_lock_release_recursive>
 8006f66:	bf00      	nop
 8006f68:	20000aed 	.word	0x20000aed

08006f6c <__sinit>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	4604      	mov	r4, r0
 8006f70:	f7ff fff0 	bl	8006f54 <__sfp_lock_acquire>
 8006f74:	6a23      	ldr	r3, [r4, #32]
 8006f76:	b11b      	cbz	r3, 8006f80 <__sinit+0x14>
 8006f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f7c:	f7ff bff0 	b.w	8006f60 <__sfp_lock_release>
 8006f80:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <__sinit+0x28>)
 8006f82:	6223      	str	r3, [r4, #32]
 8006f84:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <__sinit+0x2c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1f5      	bne.n	8006f78 <__sinit+0xc>
 8006f8c:	f7ff ffc4 	bl	8006f18 <global_stdio_init.part.0>
 8006f90:	e7f2      	b.n	8006f78 <__sinit+0xc>
 8006f92:	bf00      	nop
 8006f94:	08006ed9 	.word	0x08006ed9
 8006f98:	20000ae4 	.word	0x20000ae4

08006f9c <_fwalk_sglue>:
 8006f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	4688      	mov	r8, r1
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fac:	f1b9 0901 	subs.w	r9, r9, #1
 8006fb0:	d505      	bpl.n	8006fbe <_fwalk_sglue+0x22>
 8006fb2:	6824      	ldr	r4, [r4, #0]
 8006fb4:	2c00      	cmp	r4, #0
 8006fb6:	d1f7      	bne.n	8006fa8 <_fwalk_sglue+0xc>
 8006fb8:	4630      	mov	r0, r6
 8006fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fbe:	89ab      	ldrh	r3, [r5, #12]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d907      	bls.n	8006fd4 <_fwalk_sglue+0x38>
 8006fc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	d003      	beq.n	8006fd4 <_fwalk_sglue+0x38>
 8006fcc:	4629      	mov	r1, r5
 8006fce:	4638      	mov	r0, r7
 8006fd0:	47c0      	blx	r8
 8006fd2:	4306      	orrs	r6, r0
 8006fd4:	3568      	adds	r5, #104	; 0x68
 8006fd6:	e7e9      	b.n	8006fac <_fwalk_sglue+0x10>

08006fd8 <_puts_r>:
 8006fd8:	6a03      	ldr	r3, [r0, #32]
 8006fda:	b570      	push	{r4, r5, r6, lr}
 8006fdc:	6884      	ldr	r4, [r0, #8]
 8006fde:	4605      	mov	r5, r0
 8006fe0:	460e      	mov	r6, r1
 8006fe2:	b90b      	cbnz	r3, 8006fe8 <_puts_r+0x10>
 8006fe4:	f7ff ffc2 	bl	8006f6c <__sinit>
 8006fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fea:	07db      	lsls	r3, r3, #31
 8006fec:	d405      	bmi.n	8006ffa <_puts_r+0x22>
 8006fee:	89a3      	ldrh	r3, [r4, #12]
 8006ff0:	0598      	lsls	r0, r3, #22
 8006ff2:	d402      	bmi.n	8006ffa <_puts_r+0x22>
 8006ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ff6:	f000 f9ac 	bl	8007352 <__retarget_lock_acquire_recursive>
 8006ffa:	89a3      	ldrh	r3, [r4, #12]
 8006ffc:	0719      	lsls	r1, r3, #28
 8006ffe:	d513      	bpl.n	8007028 <_puts_r+0x50>
 8007000:	6923      	ldr	r3, [r4, #16]
 8007002:	b18b      	cbz	r3, 8007028 <_puts_r+0x50>
 8007004:	3e01      	subs	r6, #1
 8007006:	68a3      	ldr	r3, [r4, #8]
 8007008:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800700c:	3b01      	subs	r3, #1
 800700e:	60a3      	str	r3, [r4, #8]
 8007010:	b9e9      	cbnz	r1, 800704e <_puts_r+0x76>
 8007012:	2b00      	cmp	r3, #0
 8007014:	da2e      	bge.n	8007074 <_puts_r+0x9c>
 8007016:	4622      	mov	r2, r4
 8007018:	210a      	movs	r1, #10
 800701a:	4628      	mov	r0, r5
 800701c:	f000 f87b 	bl	8007116 <__swbuf_r>
 8007020:	3001      	adds	r0, #1
 8007022:	d007      	beq.n	8007034 <_puts_r+0x5c>
 8007024:	250a      	movs	r5, #10
 8007026:	e007      	b.n	8007038 <_puts_r+0x60>
 8007028:	4621      	mov	r1, r4
 800702a:	4628      	mov	r0, r5
 800702c:	f000 f8b0 	bl	8007190 <__swsetup_r>
 8007030:	2800      	cmp	r0, #0
 8007032:	d0e7      	beq.n	8007004 <_puts_r+0x2c>
 8007034:	f04f 35ff 	mov.w	r5, #4294967295
 8007038:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800703a:	07da      	lsls	r2, r3, #31
 800703c:	d405      	bmi.n	800704a <_puts_r+0x72>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	059b      	lsls	r3, r3, #22
 8007042:	d402      	bmi.n	800704a <_puts_r+0x72>
 8007044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007046:	f000 f985 	bl	8007354 <__retarget_lock_release_recursive>
 800704a:	4628      	mov	r0, r5
 800704c:	bd70      	pop	{r4, r5, r6, pc}
 800704e:	2b00      	cmp	r3, #0
 8007050:	da04      	bge.n	800705c <_puts_r+0x84>
 8007052:	69a2      	ldr	r2, [r4, #24]
 8007054:	429a      	cmp	r2, r3
 8007056:	dc06      	bgt.n	8007066 <_puts_r+0x8e>
 8007058:	290a      	cmp	r1, #10
 800705a:	d004      	beq.n	8007066 <_puts_r+0x8e>
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	6022      	str	r2, [r4, #0]
 8007062:	7019      	strb	r1, [r3, #0]
 8007064:	e7cf      	b.n	8007006 <_puts_r+0x2e>
 8007066:	4622      	mov	r2, r4
 8007068:	4628      	mov	r0, r5
 800706a:	f000 f854 	bl	8007116 <__swbuf_r>
 800706e:	3001      	adds	r0, #1
 8007070:	d1c9      	bne.n	8007006 <_puts_r+0x2e>
 8007072:	e7df      	b.n	8007034 <_puts_r+0x5c>
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	250a      	movs	r5, #10
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	6022      	str	r2, [r4, #0]
 800707c:	701d      	strb	r5, [r3, #0]
 800707e:	e7db      	b.n	8007038 <_puts_r+0x60>

08007080 <puts>:
 8007080:	4b02      	ldr	r3, [pc, #8]	; (800708c <puts+0xc>)
 8007082:	4601      	mov	r1, r0
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f7ff bfa7 	b.w	8006fd8 <_puts_r>
 800708a:	bf00      	nop
 800708c:	20000064 	.word	0x20000064

08007090 <__sread>:
 8007090:	b510      	push	{r4, lr}
 8007092:	460c      	mov	r4, r1
 8007094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007098:	f000 f8fc 	bl	8007294 <_read_r>
 800709c:	2800      	cmp	r0, #0
 800709e:	bfab      	itete	ge
 80070a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070a2:	89a3      	ldrhlt	r3, [r4, #12]
 80070a4:	181b      	addge	r3, r3, r0
 80070a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070aa:	bfac      	ite	ge
 80070ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80070ae:	81a3      	strhlt	r3, [r4, #12]
 80070b0:	bd10      	pop	{r4, pc}

080070b2 <__swrite>:
 80070b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b6:	461f      	mov	r7, r3
 80070b8:	898b      	ldrh	r3, [r1, #12]
 80070ba:	05db      	lsls	r3, r3, #23
 80070bc:	4605      	mov	r5, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	4616      	mov	r6, r2
 80070c2:	d505      	bpl.n	80070d0 <__swrite+0x1e>
 80070c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070c8:	2302      	movs	r3, #2
 80070ca:	2200      	movs	r2, #0
 80070cc:	f000 f8d0 	bl	8007270 <_lseek_r>
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070da:	81a3      	strh	r3, [r4, #12]
 80070dc:	4632      	mov	r2, r6
 80070de:	463b      	mov	r3, r7
 80070e0:	4628      	mov	r0, r5
 80070e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070e6:	f000 b8f7 	b.w	80072d8 <_write_r>

080070ea <__sseek>:
 80070ea:	b510      	push	{r4, lr}
 80070ec:	460c      	mov	r4, r1
 80070ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f2:	f000 f8bd 	bl	8007270 <_lseek_r>
 80070f6:	1c43      	adds	r3, r0, #1
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	bf15      	itete	ne
 80070fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80070fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007106:	81a3      	strheq	r3, [r4, #12]
 8007108:	bf18      	it	ne
 800710a:	81a3      	strhne	r3, [r4, #12]
 800710c:	bd10      	pop	{r4, pc}

0800710e <__sclose>:
 800710e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007112:	f000 b89d 	b.w	8007250 <_close_r>

08007116 <__swbuf_r>:
 8007116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007118:	460e      	mov	r6, r1
 800711a:	4614      	mov	r4, r2
 800711c:	4605      	mov	r5, r0
 800711e:	b118      	cbz	r0, 8007128 <__swbuf_r+0x12>
 8007120:	6a03      	ldr	r3, [r0, #32]
 8007122:	b90b      	cbnz	r3, 8007128 <__swbuf_r+0x12>
 8007124:	f7ff ff22 	bl	8006f6c <__sinit>
 8007128:	69a3      	ldr	r3, [r4, #24]
 800712a:	60a3      	str	r3, [r4, #8]
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	071a      	lsls	r2, r3, #28
 8007130:	d525      	bpl.n	800717e <__swbuf_r+0x68>
 8007132:	6923      	ldr	r3, [r4, #16]
 8007134:	b31b      	cbz	r3, 800717e <__swbuf_r+0x68>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	6922      	ldr	r2, [r4, #16]
 800713a:	1a98      	subs	r0, r3, r2
 800713c:	6963      	ldr	r3, [r4, #20]
 800713e:	b2f6      	uxtb	r6, r6
 8007140:	4283      	cmp	r3, r0
 8007142:	4637      	mov	r7, r6
 8007144:	dc04      	bgt.n	8007150 <__swbuf_r+0x3a>
 8007146:	4621      	mov	r1, r4
 8007148:	4628      	mov	r0, r5
 800714a:	f000 f9d7 	bl	80074fc <_fflush_r>
 800714e:	b9e0      	cbnz	r0, 800718a <__swbuf_r+0x74>
 8007150:	68a3      	ldr	r3, [r4, #8]
 8007152:	3b01      	subs	r3, #1
 8007154:	60a3      	str	r3, [r4, #8]
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	6022      	str	r2, [r4, #0]
 800715c:	701e      	strb	r6, [r3, #0]
 800715e:	6962      	ldr	r2, [r4, #20]
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	429a      	cmp	r2, r3
 8007164:	d004      	beq.n	8007170 <__swbuf_r+0x5a>
 8007166:	89a3      	ldrh	r3, [r4, #12]
 8007168:	07db      	lsls	r3, r3, #31
 800716a:	d506      	bpl.n	800717a <__swbuf_r+0x64>
 800716c:	2e0a      	cmp	r6, #10
 800716e:	d104      	bne.n	800717a <__swbuf_r+0x64>
 8007170:	4621      	mov	r1, r4
 8007172:	4628      	mov	r0, r5
 8007174:	f000 f9c2 	bl	80074fc <_fflush_r>
 8007178:	b938      	cbnz	r0, 800718a <__swbuf_r+0x74>
 800717a:	4638      	mov	r0, r7
 800717c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800717e:	4621      	mov	r1, r4
 8007180:	4628      	mov	r0, r5
 8007182:	f000 f805 	bl	8007190 <__swsetup_r>
 8007186:	2800      	cmp	r0, #0
 8007188:	d0d5      	beq.n	8007136 <__swbuf_r+0x20>
 800718a:	f04f 37ff 	mov.w	r7, #4294967295
 800718e:	e7f4      	b.n	800717a <__swbuf_r+0x64>

08007190 <__swsetup_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4b2a      	ldr	r3, [pc, #168]	; (800723c <__swsetup_r+0xac>)
 8007194:	4605      	mov	r5, r0
 8007196:	6818      	ldr	r0, [r3, #0]
 8007198:	460c      	mov	r4, r1
 800719a:	b118      	cbz	r0, 80071a4 <__swsetup_r+0x14>
 800719c:	6a03      	ldr	r3, [r0, #32]
 800719e:	b90b      	cbnz	r3, 80071a4 <__swsetup_r+0x14>
 80071a0:	f7ff fee4 	bl	8006f6c <__sinit>
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071aa:	0718      	lsls	r0, r3, #28
 80071ac:	d422      	bmi.n	80071f4 <__swsetup_r+0x64>
 80071ae:	06d9      	lsls	r1, r3, #27
 80071b0:	d407      	bmi.n	80071c2 <__swsetup_r+0x32>
 80071b2:	2309      	movs	r3, #9
 80071b4:	602b      	str	r3, [r5, #0]
 80071b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071ba:	81a3      	strh	r3, [r4, #12]
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295
 80071c0:	e034      	b.n	800722c <__swsetup_r+0x9c>
 80071c2:	0758      	lsls	r0, r3, #29
 80071c4:	d512      	bpl.n	80071ec <__swsetup_r+0x5c>
 80071c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071c8:	b141      	cbz	r1, 80071dc <__swsetup_r+0x4c>
 80071ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071ce:	4299      	cmp	r1, r3
 80071d0:	d002      	beq.n	80071d8 <__swsetup_r+0x48>
 80071d2:	4628      	mov	r0, r5
 80071d4:	f000 f8c0 	bl	8007358 <_free_r>
 80071d8:	2300      	movs	r3, #0
 80071da:	6363      	str	r3, [r4, #52]	; 0x34
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071e2:	81a3      	strh	r3, [r4, #12]
 80071e4:	2300      	movs	r3, #0
 80071e6:	6063      	str	r3, [r4, #4]
 80071e8:	6923      	ldr	r3, [r4, #16]
 80071ea:	6023      	str	r3, [r4, #0]
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	f043 0308 	orr.w	r3, r3, #8
 80071f2:	81a3      	strh	r3, [r4, #12]
 80071f4:	6923      	ldr	r3, [r4, #16]
 80071f6:	b94b      	cbnz	r3, 800720c <__swsetup_r+0x7c>
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007202:	d003      	beq.n	800720c <__swsetup_r+0x7c>
 8007204:	4621      	mov	r1, r4
 8007206:	4628      	mov	r0, r5
 8007208:	f000 f9c6 	bl	8007598 <__smakebuf_r>
 800720c:	89a0      	ldrh	r0, [r4, #12]
 800720e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007212:	f010 0301 	ands.w	r3, r0, #1
 8007216:	d00a      	beq.n	800722e <__swsetup_r+0x9e>
 8007218:	2300      	movs	r3, #0
 800721a:	60a3      	str	r3, [r4, #8]
 800721c:	6963      	ldr	r3, [r4, #20]
 800721e:	425b      	negs	r3, r3
 8007220:	61a3      	str	r3, [r4, #24]
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	b943      	cbnz	r3, 8007238 <__swsetup_r+0xa8>
 8007226:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800722a:	d1c4      	bne.n	80071b6 <__swsetup_r+0x26>
 800722c:	bd38      	pop	{r3, r4, r5, pc}
 800722e:	0781      	lsls	r1, r0, #30
 8007230:	bf58      	it	pl
 8007232:	6963      	ldrpl	r3, [r4, #20]
 8007234:	60a3      	str	r3, [r4, #8]
 8007236:	e7f4      	b.n	8007222 <__swsetup_r+0x92>
 8007238:	2000      	movs	r0, #0
 800723a:	e7f7      	b.n	800722c <__swsetup_r+0x9c>
 800723c:	20000064 	.word	0x20000064

08007240 <memset>:
 8007240:	4402      	add	r2, r0
 8007242:	4603      	mov	r3, r0
 8007244:	4293      	cmp	r3, r2
 8007246:	d100      	bne.n	800724a <memset+0xa>
 8007248:	4770      	bx	lr
 800724a:	f803 1b01 	strb.w	r1, [r3], #1
 800724e:	e7f9      	b.n	8007244 <memset+0x4>

08007250 <_close_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4d06      	ldr	r5, [pc, #24]	; (800726c <_close_r+0x1c>)
 8007254:	2300      	movs	r3, #0
 8007256:	4604      	mov	r4, r0
 8007258:	4608      	mov	r0, r1
 800725a:	602b      	str	r3, [r5, #0]
 800725c:	f7fa fcf1 	bl	8001c42 <_close>
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	d102      	bne.n	800726a <_close_r+0x1a>
 8007264:	682b      	ldr	r3, [r5, #0]
 8007266:	b103      	cbz	r3, 800726a <_close_r+0x1a>
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	bd38      	pop	{r3, r4, r5, pc}
 800726c:	20000ae8 	.word	0x20000ae8

08007270 <_lseek_r>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	4d07      	ldr	r5, [pc, #28]	; (8007290 <_lseek_r+0x20>)
 8007274:	4604      	mov	r4, r0
 8007276:	4608      	mov	r0, r1
 8007278:	4611      	mov	r1, r2
 800727a:	2200      	movs	r2, #0
 800727c:	602a      	str	r2, [r5, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	f7fa fd06 	bl	8001c90 <_lseek>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d102      	bne.n	800728e <_lseek_r+0x1e>
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	b103      	cbz	r3, 800728e <_lseek_r+0x1e>
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	20000ae8 	.word	0x20000ae8

08007294 <_read_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d07      	ldr	r5, [pc, #28]	; (80072b4 <_read_r+0x20>)
 8007298:	4604      	mov	r4, r0
 800729a:	4608      	mov	r0, r1
 800729c:	4611      	mov	r1, r2
 800729e:	2200      	movs	r2, #0
 80072a0:	602a      	str	r2, [r5, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	f7fa fc94 	bl	8001bd0 <_read>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_read_r+0x1e>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_read_r+0x1e>
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	20000ae8 	.word	0x20000ae8

080072b8 <_sbrk_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4d06      	ldr	r5, [pc, #24]	; (80072d4 <_sbrk_r+0x1c>)
 80072bc:	2300      	movs	r3, #0
 80072be:	4604      	mov	r4, r0
 80072c0:	4608      	mov	r0, r1
 80072c2:	602b      	str	r3, [r5, #0]
 80072c4:	f7fa fcf2 	bl	8001cac <_sbrk>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_sbrk_r+0x1a>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_sbrk_r+0x1a>
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	20000ae8 	.word	0x20000ae8

080072d8 <_write_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4d07      	ldr	r5, [pc, #28]	; (80072f8 <_write_r+0x20>)
 80072dc:	4604      	mov	r4, r0
 80072de:	4608      	mov	r0, r1
 80072e0:	4611      	mov	r1, r2
 80072e2:	2200      	movs	r2, #0
 80072e4:	602a      	str	r2, [r5, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f7fa fc8f 	bl	8001c0a <_write>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_write_r+0x1e>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_write_r+0x1e>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	20000ae8 	.word	0x20000ae8

080072fc <__errno>:
 80072fc:	4b01      	ldr	r3, [pc, #4]	; (8007304 <__errno+0x8>)
 80072fe:	6818      	ldr	r0, [r3, #0]
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	20000064 	.word	0x20000064

08007308 <__libc_init_array>:
 8007308:	b570      	push	{r4, r5, r6, lr}
 800730a:	4d0d      	ldr	r5, [pc, #52]	; (8007340 <__libc_init_array+0x38>)
 800730c:	4c0d      	ldr	r4, [pc, #52]	; (8007344 <__libc_init_array+0x3c>)
 800730e:	1b64      	subs	r4, r4, r5
 8007310:	10a4      	asrs	r4, r4, #2
 8007312:	2600      	movs	r6, #0
 8007314:	42a6      	cmp	r6, r4
 8007316:	d109      	bne.n	800732c <__libc_init_array+0x24>
 8007318:	4d0b      	ldr	r5, [pc, #44]	; (8007348 <__libc_init_array+0x40>)
 800731a:	4c0c      	ldr	r4, [pc, #48]	; (800734c <__libc_init_array+0x44>)
 800731c:	f000 f99a 	bl	8007654 <_init>
 8007320:	1b64      	subs	r4, r4, r5
 8007322:	10a4      	asrs	r4, r4, #2
 8007324:	2600      	movs	r6, #0
 8007326:	42a6      	cmp	r6, r4
 8007328:	d105      	bne.n	8007336 <__libc_init_array+0x2e>
 800732a:	bd70      	pop	{r4, r5, r6, pc}
 800732c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007330:	4798      	blx	r3
 8007332:	3601      	adds	r6, #1
 8007334:	e7ee      	b.n	8007314 <__libc_init_array+0xc>
 8007336:	f855 3b04 	ldr.w	r3, [r5], #4
 800733a:	4798      	blx	r3
 800733c:	3601      	adds	r6, #1
 800733e:	e7f2      	b.n	8007326 <__libc_init_array+0x1e>
 8007340:	08007864 	.word	0x08007864
 8007344:	08007864 	.word	0x08007864
 8007348:	08007864 	.word	0x08007864
 800734c:	08007868 	.word	0x08007868

08007350 <__retarget_lock_init_recursive>:
 8007350:	4770      	bx	lr

08007352 <__retarget_lock_acquire_recursive>:
 8007352:	4770      	bx	lr

08007354 <__retarget_lock_release_recursive>:
 8007354:	4770      	bx	lr
	...

08007358 <_free_r>:
 8007358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800735a:	2900      	cmp	r1, #0
 800735c:	d044      	beq.n	80073e8 <_free_r+0x90>
 800735e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007362:	9001      	str	r0, [sp, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	f1a1 0404 	sub.w	r4, r1, #4
 800736a:	bfb8      	it	lt
 800736c:	18e4      	addlt	r4, r4, r3
 800736e:	f7ff fcd9 	bl	8006d24 <__malloc_lock>
 8007372:	4a1e      	ldr	r2, [pc, #120]	; (80073ec <_free_r+0x94>)
 8007374:	9801      	ldr	r0, [sp, #4]
 8007376:	6813      	ldr	r3, [r2, #0]
 8007378:	b933      	cbnz	r3, 8007388 <_free_r+0x30>
 800737a:	6063      	str	r3, [r4, #4]
 800737c:	6014      	str	r4, [r2, #0]
 800737e:	b003      	add	sp, #12
 8007380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007384:	f7ff bcd4 	b.w	8006d30 <__malloc_unlock>
 8007388:	42a3      	cmp	r3, r4
 800738a:	d908      	bls.n	800739e <_free_r+0x46>
 800738c:	6825      	ldr	r5, [r4, #0]
 800738e:	1961      	adds	r1, r4, r5
 8007390:	428b      	cmp	r3, r1
 8007392:	bf01      	itttt	eq
 8007394:	6819      	ldreq	r1, [r3, #0]
 8007396:	685b      	ldreq	r3, [r3, #4]
 8007398:	1949      	addeq	r1, r1, r5
 800739a:	6021      	streq	r1, [r4, #0]
 800739c:	e7ed      	b.n	800737a <_free_r+0x22>
 800739e:	461a      	mov	r2, r3
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	b10b      	cbz	r3, 80073a8 <_free_r+0x50>
 80073a4:	42a3      	cmp	r3, r4
 80073a6:	d9fa      	bls.n	800739e <_free_r+0x46>
 80073a8:	6811      	ldr	r1, [r2, #0]
 80073aa:	1855      	adds	r5, r2, r1
 80073ac:	42a5      	cmp	r5, r4
 80073ae:	d10b      	bne.n	80073c8 <_free_r+0x70>
 80073b0:	6824      	ldr	r4, [r4, #0]
 80073b2:	4421      	add	r1, r4
 80073b4:	1854      	adds	r4, r2, r1
 80073b6:	42a3      	cmp	r3, r4
 80073b8:	6011      	str	r1, [r2, #0]
 80073ba:	d1e0      	bne.n	800737e <_free_r+0x26>
 80073bc:	681c      	ldr	r4, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	6053      	str	r3, [r2, #4]
 80073c2:	440c      	add	r4, r1
 80073c4:	6014      	str	r4, [r2, #0]
 80073c6:	e7da      	b.n	800737e <_free_r+0x26>
 80073c8:	d902      	bls.n	80073d0 <_free_r+0x78>
 80073ca:	230c      	movs	r3, #12
 80073cc:	6003      	str	r3, [r0, #0]
 80073ce:	e7d6      	b.n	800737e <_free_r+0x26>
 80073d0:	6825      	ldr	r5, [r4, #0]
 80073d2:	1961      	adds	r1, r4, r5
 80073d4:	428b      	cmp	r3, r1
 80073d6:	bf04      	itt	eq
 80073d8:	6819      	ldreq	r1, [r3, #0]
 80073da:	685b      	ldreq	r3, [r3, #4]
 80073dc:	6063      	str	r3, [r4, #4]
 80073de:	bf04      	itt	eq
 80073e0:	1949      	addeq	r1, r1, r5
 80073e2:	6021      	streq	r1, [r4, #0]
 80073e4:	6054      	str	r4, [r2, #4]
 80073e6:	e7ca      	b.n	800737e <_free_r+0x26>
 80073e8:	b003      	add	sp, #12
 80073ea:	bd30      	pop	{r4, r5, pc}
 80073ec:	200009a4 	.word	0x200009a4

080073f0 <__sflush_r>:
 80073f0:	898a      	ldrh	r2, [r1, #12]
 80073f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f6:	4605      	mov	r5, r0
 80073f8:	0710      	lsls	r0, r2, #28
 80073fa:	460c      	mov	r4, r1
 80073fc:	d458      	bmi.n	80074b0 <__sflush_r+0xc0>
 80073fe:	684b      	ldr	r3, [r1, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	dc05      	bgt.n	8007410 <__sflush_r+0x20>
 8007404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	dc02      	bgt.n	8007410 <__sflush_r+0x20>
 800740a:	2000      	movs	r0, #0
 800740c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007412:	2e00      	cmp	r6, #0
 8007414:	d0f9      	beq.n	800740a <__sflush_r+0x1a>
 8007416:	2300      	movs	r3, #0
 8007418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800741c:	682f      	ldr	r7, [r5, #0]
 800741e:	6a21      	ldr	r1, [r4, #32]
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	d032      	beq.n	800748a <__sflush_r+0x9a>
 8007424:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	075a      	lsls	r2, r3, #29
 800742a:	d505      	bpl.n	8007438 <__sflush_r+0x48>
 800742c:	6863      	ldr	r3, [r4, #4]
 800742e:	1ac0      	subs	r0, r0, r3
 8007430:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007432:	b10b      	cbz	r3, 8007438 <__sflush_r+0x48>
 8007434:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007436:	1ac0      	subs	r0, r0, r3
 8007438:	2300      	movs	r3, #0
 800743a:	4602      	mov	r2, r0
 800743c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800743e:	6a21      	ldr	r1, [r4, #32]
 8007440:	4628      	mov	r0, r5
 8007442:	47b0      	blx	r6
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	d106      	bne.n	8007458 <__sflush_r+0x68>
 800744a:	6829      	ldr	r1, [r5, #0]
 800744c:	291d      	cmp	r1, #29
 800744e:	d82b      	bhi.n	80074a8 <__sflush_r+0xb8>
 8007450:	4a29      	ldr	r2, [pc, #164]	; (80074f8 <__sflush_r+0x108>)
 8007452:	410a      	asrs	r2, r1
 8007454:	07d6      	lsls	r6, r2, #31
 8007456:	d427      	bmi.n	80074a8 <__sflush_r+0xb8>
 8007458:	2200      	movs	r2, #0
 800745a:	6062      	str	r2, [r4, #4]
 800745c:	04d9      	lsls	r1, r3, #19
 800745e:	6922      	ldr	r2, [r4, #16]
 8007460:	6022      	str	r2, [r4, #0]
 8007462:	d504      	bpl.n	800746e <__sflush_r+0x7e>
 8007464:	1c42      	adds	r2, r0, #1
 8007466:	d101      	bne.n	800746c <__sflush_r+0x7c>
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	b903      	cbnz	r3, 800746e <__sflush_r+0x7e>
 800746c:	6560      	str	r0, [r4, #84]	; 0x54
 800746e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007470:	602f      	str	r7, [r5, #0]
 8007472:	2900      	cmp	r1, #0
 8007474:	d0c9      	beq.n	800740a <__sflush_r+0x1a>
 8007476:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800747a:	4299      	cmp	r1, r3
 800747c:	d002      	beq.n	8007484 <__sflush_r+0x94>
 800747e:	4628      	mov	r0, r5
 8007480:	f7ff ff6a 	bl	8007358 <_free_r>
 8007484:	2000      	movs	r0, #0
 8007486:	6360      	str	r0, [r4, #52]	; 0x34
 8007488:	e7c0      	b.n	800740c <__sflush_r+0x1c>
 800748a:	2301      	movs	r3, #1
 800748c:	4628      	mov	r0, r5
 800748e:	47b0      	blx	r6
 8007490:	1c41      	adds	r1, r0, #1
 8007492:	d1c8      	bne.n	8007426 <__sflush_r+0x36>
 8007494:	682b      	ldr	r3, [r5, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0c5      	beq.n	8007426 <__sflush_r+0x36>
 800749a:	2b1d      	cmp	r3, #29
 800749c:	d001      	beq.n	80074a2 <__sflush_r+0xb2>
 800749e:	2b16      	cmp	r3, #22
 80074a0:	d101      	bne.n	80074a6 <__sflush_r+0xb6>
 80074a2:	602f      	str	r7, [r5, #0]
 80074a4:	e7b1      	b.n	800740a <__sflush_r+0x1a>
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ac:	81a3      	strh	r3, [r4, #12]
 80074ae:	e7ad      	b.n	800740c <__sflush_r+0x1c>
 80074b0:	690f      	ldr	r7, [r1, #16]
 80074b2:	2f00      	cmp	r7, #0
 80074b4:	d0a9      	beq.n	800740a <__sflush_r+0x1a>
 80074b6:	0793      	lsls	r3, r2, #30
 80074b8:	680e      	ldr	r6, [r1, #0]
 80074ba:	bf08      	it	eq
 80074bc:	694b      	ldreq	r3, [r1, #20]
 80074be:	600f      	str	r7, [r1, #0]
 80074c0:	bf18      	it	ne
 80074c2:	2300      	movne	r3, #0
 80074c4:	eba6 0807 	sub.w	r8, r6, r7
 80074c8:	608b      	str	r3, [r1, #8]
 80074ca:	f1b8 0f00 	cmp.w	r8, #0
 80074ce:	dd9c      	ble.n	800740a <__sflush_r+0x1a>
 80074d0:	6a21      	ldr	r1, [r4, #32]
 80074d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074d4:	4643      	mov	r3, r8
 80074d6:	463a      	mov	r2, r7
 80074d8:	4628      	mov	r0, r5
 80074da:	47b0      	blx	r6
 80074dc:	2800      	cmp	r0, #0
 80074de:	dc06      	bgt.n	80074ee <__sflush_r+0xfe>
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ec:	e78e      	b.n	800740c <__sflush_r+0x1c>
 80074ee:	4407      	add	r7, r0
 80074f0:	eba8 0800 	sub.w	r8, r8, r0
 80074f4:	e7e9      	b.n	80074ca <__sflush_r+0xda>
 80074f6:	bf00      	nop
 80074f8:	dfbffffe 	.word	0xdfbffffe

080074fc <_fflush_r>:
 80074fc:	b538      	push	{r3, r4, r5, lr}
 80074fe:	690b      	ldr	r3, [r1, #16]
 8007500:	4605      	mov	r5, r0
 8007502:	460c      	mov	r4, r1
 8007504:	b913      	cbnz	r3, 800750c <_fflush_r+0x10>
 8007506:	2500      	movs	r5, #0
 8007508:	4628      	mov	r0, r5
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	b118      	cbz	r0, 8007516 <_fflush_r+0x1a>
 800750e:	6a03      	ldr	r3, [r0, #32]
 8007510:	b90b      	cbnz	r3, 8007516 <_fflush_r+0x1a>
 8007512:	f7ff fd2b 	bl	8006f6c <__sinit>
 8007516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0f3      	beq.n	8007506 <_fflush_r+0xa>
 800751e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007520:	07d0      	lsls	r0, r2, #31
 8007522:	d404      	bmi.n	800752e <_fflush_r+0x32>
 8007524:	0599      	lsls	r1, r3, #22
 8007526:	d402      	bmi.n	800752e <_fflush_r+0x32>
 8007528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800752a:	f7ff ff12 	bl	8007352 <__retarget_lock_acquire_recursive>
 800752e:	4628      	mov	r0, r5
 8007530:	4621      	mov	r1, r4
 8007532:	f7ff ff5d 	bl	80073f0 <__sflush_r>
 8007536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007538:	07da      	lsls	r2, r3, #31
 800753a:	4605      	mov	r5, r0
 800753c:	d4e4      	bmi.n	8007508 <_fflush_r+0xc>
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	059b      	lsls	r3, r3, #22
 8007542:	d4e1      	bmi.n	8007508 <_fflush_r+0xc>
 8007544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007546:	f7ff ff05 	bl	8007354 <__retarget_lock_release_recursive>
 800754a:	e7dd      	b.n	8007508 <_fflush_r+0xc>

0800754c <__swhatbuf_r>:
 800754c:	b570      	push	{r4, r5, r6, lr}
 800754e:	460c      	mov	r4, r1
 8007550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007554:	2900      	cmp	r1, #0
 8007556:	b096      	sub	sp, #88	; 0x58
 8007558:	4615      	mov	r5, r2
 800755a:	461e      	mov	r6, r3
 800755c:	da0d      	bge.n	800757a <__swhatbuf_r+0x2e>
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007564:	f04f 0100 	mov.w	r1, #0
 8007568:	bf0c      	ite	eq
 800756a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800756e:	2340      	movne	r3, #64	; 0x40
 8007570:	2000      	movs	r0, #0
 8007572:	6031      	str	r1, [r6, #0]
 8007574:	602b      	str	r3, [r5, #0]
 8007576:	b016      	add	sp, #88	; 0x58
 8007578:	bd70      	pop	{r4, r5, r6, pc}
 800757a:	466a      	mov	r2, sp
 800757c:	f000 f848 	bl	8007610 <_fstat_r>
 8007580:	2800      	cmp	r0, #0
 8007582:	dbec      	blt.n	800755e <__swhatbuf_r+0x12>
 8007584:	9901      	ldr	r1, [sp, #4]
 8007586:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800758a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800758e:	4259      	negs	r1, r3
 8007590:	4159      	adcs	r1, r3
 8007592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007596:	e7eb      	b.n	8007570 <__swhatbuf_r+0x24>

08007598 <__smakebuf_r>:
 8007598:	898b      	ldrh	r3, [r1, #12]
 800759a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800759c:	079d      	lsls	r5, r3, #30
 800759e:	4606      	mov	r6, r0
 80075a0:	460c      	mov	r4, r1
 80075a2:	d507      	bpl.n	80075b4 <__smakebuf_r+0x1c>
 80075a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	6123      	str	r3, [r4, #16]
 80075ac:	2301      	movs	r3, #1
 80075ae:	6163      	str	r3, [r4, #20]
 80075b0:	b002      	add	sp, #8
 80075b2:	bd70      	pop	{r4, r5, r6, pc}
 80075b4:	ab01      	add	r3, sp, #4
 80075b6:	466a      	mov	r2, sp
 80075b8:	f7ff ffc8 	bl	800754c <__swhatbuf_r>
 80075bc:	9900      	ldr	r1, [sp, #0]
 80075be:	4605      	mov	r5, r0
 80075c0:	4630      	mov	r0, r6
 80075c2:	f7ff fb2f 	bl	8006c24 <_malloc_r>
 80075c6:	b948      	cbnz	r0, 80075dc <__smakebuf_r+0x44>
 80075c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075cc:	059a      	lsls	r2, r3, #22
 80075ce:	d4ef      	bmi.n	80075b0 <__smakebuf_r+0x18>
 80075d0:	f023 0303 	bic.w	r3, r3, #3
 80075d4:	f043 0302 	orr.w	r3, r3, #2
 80075d8:	81a3      	strh	r3, [r4, #12]
 80075da:	e7e3      	b.n	80075a4 <__smakebuf_r+0xc>
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	6020      	str	r0, [r4, #0]
 80075e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e4:	81a3      	strh	r3, [r4, #12]
 80075e6:	9b00      	ldr	r3, [sp, #0]
 80075e8:	6163      	str	r3, [r4, #20]
 80075ea:	9b01      	ldr	r3, [sp, #4]
 80075ec:	6120      	str	r0, [r4, #16]
 80075ee:	b15b      	cbz	r3, 8007608 <__smakebuf_r+0x70>
 80075f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075f4:	4630      	mov	r0, r6
 80075f6:	f000 f81d 	bl	8007634 <_isatty_r>
 80075fa:	b128      	cbz	r0, 8007608 <__smakebuf_r+0x70>
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	f023 0303 	bic.w	r3, r3, #3
 8007602:	f043 0301 	orr.w	r3, r3, #1
 8007606:	81a3      	strh	r3, [r4, #12]
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	431d      	orrs	r5, r3
 800760c:	81a5      	strh	r5, [r4, #12]
 800760e:	e7cf      	b.n	80075b0 <__smakebuf_r+0x18>

08007610 <_fstat_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	4d07      	ldr	r5, [pc, #28]	; (8007630 <_fstat_r+0x20>)
 8007614:	2300      	movs	r3, #0
 8007616:	4604      	mov	r4, r0
 8007618:	4608      	mov	r0, r1
 800761a:	4611      	mov	r1, r2
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	f7fa fb1c 	bl	8001c5a <_fstat>
 8007622:	1c43      	adds	r3, r0, #1
 8007624:	d102      	bne.n	800762c <_fstat_r+0x1c>
 8007626:	682b      	ldr	r3, [r5, #0]
 8007628:	b103      	cbz	r3, 800762c <_fstat_r+0x1c>
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	bd38      	pop	{r3, r4, r5, pc}
 800762e:	bf00      	nop
 8007630:	20000ae8 	.word	0x20000ae8

08007634 <_isatty_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4d06      	ldr	r5, [pc, #24]	; (8007650 <_isatty_r+0x1c>)
 8007638:	2300      	movs	r3, #0
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	602b      	str	r3, [r5, #0]
 8007640:	f7fa fb1b 	bl	8001c7a <_isatty>
 8007644:	1c43      	adds	r3, r0, #1
 8007646:	d102      	bne.n	800764e <_isatty_r+0x1a>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	b103      	cbz	r3, 800764e <_isatty_r+0x1a>
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	20000ae8 	.word	0x20000ae8

08007654 <_init>:
 8007654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007656:	bf00      	nop
 8007658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765a:	bc08      	pop	{r3}
 800765c:	469e      	mov	lr, r3
 800765e:	4770      	bx	lr

08007660 <_fini>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	bf00      	nop
 8007664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007666:	bc08      	pop	{r3}
 8007668:	469e      	mov	lr, r3
 800766a:	4770      	bx	lr
