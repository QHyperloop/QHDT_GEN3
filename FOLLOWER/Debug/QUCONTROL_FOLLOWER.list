
QUCONTROL_FOLLOWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e25c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800e434  0800e434  0001e434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea70  0800ea70  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea70  0800ea70  0001ea70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea78  0800ea78  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea78  0800ea78  0001ea78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea7c  0800ea7c  0001ea7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800ea80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc8  20000068  0800eae8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e30  0800eae8  00020e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b711  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ebd  00000000  00000000  0004b7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002418  00000000  00000000  000506b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c2c  00000000  00000000  00052ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e6a2  00000000  00000000  000546f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cfcc  00000000  00000000  00082d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00125f77  00000000  00000000  000afd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a36c  00000000  00000000  001d5cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001e0048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800e41c 	.word	0x0800e41c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800e41c 	.word	0x0800e41c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <acc_init>:
bno055_vec3_t mag = {0, 0, 0};
bno055_vec3_t grv = {0, 0, 0};
bno055_euler_t eul = {0, 0, 0};
bno055_vec4_t qua = {0, 0, 0};

uint8_t acc_init(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	b0ae      	sub	sp, #184	; 0xb8
 8000518:	af02      	add	r7, sp, #8

    bno = (bno055_t){
 800051a:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <acc_init+0x7c>)
 800051c:	4618      	mov	r0, r3
 800051e:	23ac      	movs	r3, #172	; 0xac
 8000520:	461a      	mov	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f00d fcb6 	bl	800de94 <memset>
 8000528:	4b19      	ldr	r3, [pc, #100]	; (8000590 <acc_init+0x7c>)
 800052a:	4a1a      	ldr	r2, [pc, #104]	; (8000594 <acc_init+0x80>)
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <acc_init+0x7c>)
 8000530:	2208      	movs	r2, #8
 8000532:	711a      	strb	r2, [r3, #4]
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <acc_init+0x7c>)
 8000536:	2228      	movs	r2, #40	; 0x28
 8000538:	719a      	strb	r2, [r3, #6]
    	.i2c = &hi2c3, .addr = IMU_ID, .mode = BNO_MODE_IMU, ._temp_unit = 0,
    };

	 if((err = bno055_init(&bno)) == BNO_OK){
 800053a:	4815      	ldr	r0, [pc, #84]	; (8000590 <acc_init+0x7c>)
 800053c:	f000 f832 	bl	80005a4 <bno055_init>
 8000540:	4603      	mov	r3, r0
 8000542:	461a      	mov	r2, r3
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <acc_init+0x84>)
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <acc_init+0x84>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d113      	bne.n	8000578 <acc_init+0x64>
	    printf("[+] BNO055 init success\r\n");
 8000550:	4812      	ldr	r0, [pc, #72]	; (800059c <acc_init+0x88>)
 8000552:	f00d fbbf 	bl	800dcd4 <puts>
	 }else{
		 return 1;
	    //Error_Handler();
	 }

	 err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
 8000556:	2300      	movs	r3, #0
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	480b      	ldr	r0, [pc, #44]	; (8000590 <acc_init+0x7c>)
 8000562:	f001 fae9 	bl	8001b38 <bno055_set_unit>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <acc_init+0x84>)
 800056c:	701a      	strb	r2, [r3, #0]
	 if(err != BNO_OK) {
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <acc_init+0x84>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d004      	beq.n	8000580 <acc_init+0x6c>
 8000576:	e001      	b.n	800057c <acc_init+0x68>
		 return 1;
 8000578:	2301      	movs	r3, #1
 800057a:	e005      	b.n	8000588 <acc_init+0x74>
		 return 1;
 800057c:	2301      	movs	r3, #1
 800057e:	e003      	b.n	8000588 <acc_init+0x74>
	 }else{
		 printf("[BNO] Unit selection success\r\n");
 8000580:	4807      	ldr	r0, [pc, #28]	; (80005a0 <acc_init+0x8c>)
 8000582:	f00d fba7 	bl	800dcd4 <puts>
	 }
	 return 0;
 8000586:	2300      	movs	r3, #0

}
 8000588:	4618      	mov	r0, r3
 800058a:	37b0      	adds	r7, #176	; 0xb0
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000084 	.word	0x20000084
 8000594:	20000610 	.word	0x20000610
 8000598:	20000130 	.word	0x20000130
 800059c:	0800e434 	.word	0x0800e434
 80005a0:	0800e450 	.word	0x0800e450

080005a4 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b0af      	sub	sp, #188	; 0xbc
 80005a8:	af2a      	add	r7, sp, #168	; 0xa8
 80005aa:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	799b      	ldrb	r3, [r3, #6]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 80005bc:	687c      	ldr	r4, [r7, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	9329      	str	r3, [sp, #164]	; 0xa4
 80005c2:	f107 030e 	add.w	r3, r7, #14
 80005c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80005c8:	2300      	movs	r3, #0
 80005ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80005cc:	4668      	mov	r0, sp
 80005ce:	f104 0310 	add.w	r3, r4, #16
 80005d2:	229c      	movs	r2, #156	; 0x9c
 80005d4:	4619      	mov	r1, r3
 80005d6:	f00d fcd8 	bl	800df8a <memcpy>
 80005da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005de:	f001 fbb6 	bl	8001d4e <bno055_read_regs>
 80005e2:	4603      	mov	r3, r0
 80005e4:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <bno055_init+0x4c>
        return err;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	e0b6      	b.n	800075e <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	2ba0      	cmp	r3, #160	; 0xa0
 80005f4:	d001      	beq.n	80005fa <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 80005f6:	2306      	movs	r3, #6
 80005f8:	e0b1      	b.n	800075e <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 80005fa:	2100      	movs	r1, #0
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f001 fa74 	bl	8001aea <bno055_set_opmode>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <bno055_init+0x6c>
        return err;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	e0a6      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8000610:	2002      	movs	r0, #2
 8000612:	f004 fe15 	bl	8005240 <HAL_Delay>
    bno055_reset(imu);
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f001 fb53 	bl	8001cc2 <bno055_reset>
    HAL_Delay(5000);
 800061c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000620:	f004 fe0e 	bl	8005240 <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000624:	2100      	movs	r1, #0
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f001 faee 	bl	8001c08 <bno055_set_pwr_mode>
 800062c:	4603      	mov	r3, r0
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <bno055_init+0x96>
        return err;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	e091      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 800063a:	200a      	movs	r0, #10
 800063c:	f004 fe00 	bl	8005240 <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000640:	2100      	movs	r1, #0
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f001 fbe6 	bl	8001e14 <bno055_set_page>
 8000648:	4603      	mov	r3, r0
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <bno055_init+0xb2>
        return err;
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	e083      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8000656:	200c      	movs	r0, #12
 8000658:	f004 fdf2 	bl	8005240 <HAL_Delay>
    bno055_on(imu);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f001 fb53 	bl	8001d08 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	4619      	mov	r1, r3
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f001 fa3e 	bl	8001aea <bno055_set_opmode>
 800066e:	4603      	mov	r3, r0
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <bno055_init+0xd8>
        return err;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	e070      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800067c:	2018      	movs	r0, #24
 800067e:	f004 fddf 	bl	8005240 <HAL_Delay>

    imu->temperature = &bno055_temperature;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a38      	ldr	r2, [pc, #224]	; (8000768 <bno055_init+0x1c4>)
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a38      	ldr	r2, [pc, #224]	; (800076c <bno055_init+0x1c8>)
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a37      	ldr	r2, [pc, #220]	; (8000770 <bno055_init+0x1cc>)
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a37      	ldr	r2, [pc, #220]	; (8000774 <bno055_init+0x1d0>)
 8000698:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a36      	ldr	r2, [pc, #216]	; (8000778 <bno055_init+0x1d4>)
 800069e:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a36      	ldr	r2, [pc, #216]	; (800077c <bno055_init+0x1d8>)
 80006a4:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a35      	ldr	r2, [pc, #212]	; (8000780 <bno055_init+0x1dc>)
 80006aa:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a35      	ldr	r2, [pc, #212]	; (8000784 <bno055_init+0x1e0>)
 80006b0:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <bno055_init+0x1e4>)
 80006b6:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a34      	ldr	r2, [pc, #208]	; (800078c <bno055_init+0x1e8>)
 80006bc:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a33      	ldr	r2, [pc, #204]	; (8000790 <bno055_init+0x1ec>)
 80006c2:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <bno055_init+0x1f0>)
 80006c8:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a32      	ldr	r2, [pc, #200]	; (8000798 <bno055_init+0x1f4>)
 80006ce:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a32      	ldr	r2, [pc, #200]	; (800079c <bno055_init+0x1f8>)
 80006d4:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a31      	ldr	r2, [pc, #196]	; (80007a0 <bno055_init+0x1fc>)
 80006da:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <bno055_init+0x200>)
 80006e0:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a30      	ldr	r2, [pc, #192]	; (80007a8 <bno055_init+0x204>)
 80006e6:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a30      	ldr	r2, [pc, #192]	; (80007ac <bno055_init+0x208>)
 80006ec:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a2f      	ldr	r2, [pc, #188]	; (80007b0 <bno055_init+0x20c>)
 80006f2:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a2f      	ldr	r2, [pc, #188]	; (80007b4 <bno055_init+0x210>)
 80006f8:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a2e      	ldr	r2, [pc, #184]	; (80007b8 <bno055_init+0x214>)
 80006fe:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a2e      	ldr	r2, [pc, #184]	; (80007bc <bno055_init+0x218>)
 8000704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a2d      	ldr	r2, [pc, #180]	; (80007c0 <bno055_init+0x21c>)
 800070c:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a2c      	ldr	r2, [pc, #176]	; (80007c4 <bno055_init+0x220>)
 8000712:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <bno055_init+0x224>)
 8000718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a2b      	ldr	r2, [pc, #172]	; (80007cc <bno055_init+0x228>)
 8000720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <bno055_init+0x22c>)
 8000728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a29      	ldr	r2, [pc, #164]	; (80007d4 <bno055_init+0x230>)
 8000730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a28      	ldr	r2, [pc, #160]	; (80007d8 <bno055_init+0x234>)
 8000738:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a27      	ldr	r2, [pc, #156]	; (80007dc <bno055_init+0x238>)
 8000740:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <bno055_init+0x23c>)
 8000748:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <bno055_init+0x240>)
 8000750:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a24      	ldr	r2, [pc, #144]	; (80007e8 <bno055_init+0x244>)
 8000758:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	bd90      	pop	{r4, r7, pc}
 8000766:	bf00      	nop
 8000768:	080007ed 	.word	0x080007ed
 800076c:	08000855 	.word	0x08000855
 8000770:	080008d5 	.word	0x080008d5
 8000774:	08000955 	.word	0x08000955
 8000778:	080009d5 	.word	0x080009d5
 800077c:	08000aa1 	.word	0x08000aa1
 8000780:	08000b21 	.word	0x08000b21
 8000784:	08000ba1 	.word	0x08000ba1
 8000788:	08000c21 	.word	0x08000c21
 800078c:	08000ced 	.word	0x08000ced
 8000790:	08000d6d 	.word	0x08000d6d
 8000794:	08000ded 	.word	0x08000ded
 8000798:	08000e6d 	.word	0x08000e6d
 800079c:	08000f39 	.word	0x08000f39
 80007a0:	08000fa5 	.word	0x08000fa5
 80007a4:	08001011 	.word	0x08001011
 80007a8:	0800107d 	.word	0x0800107d
 80007ac:	08001131 	.word	0x08001131
 80007b0:	080011b5 	.word	0x080011b5
 80007b4:	08001239 	.word	0x08001239
 80007b8:	080012bd 	.word	0x080012bd
 80007bc:	08001389 	.word	0x08001389
 80007c0:	0800140d 	.word	0x0800140d
 80007c4:	08001491 	.word	0x08001491
 80007c8:	08001515 	.word	0x08001515
 80007cc:	080015e1 	.word	0x080015e1
 80007d0:	08001651 	.word	0x08001651
 80007d4:	080016c1 	.word	0x080016c1
 80007d8:	08001731 	.word	0x08001731
 80007dc:	080017a1 	.word	0x080017a1
 80007e0:	0800187d 	.word	0x0800187d
 80007e4:	0800194d 	.word	0x0800194d
 80007e8:	08001a1b 	.word	0x08001a1b

080007ec <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b0af      	sub	sp, #188	; 0xbc
 80007f0:	af2a      	add	r7, sp, #168	; 0xa8
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 80007fa:	687c      	ldr	r4, [r7, #4]
 80007fc:	2301      	movs	r3, #1
 80007fe:	9329      	str	r3, [sp, #164]	; 0xa4
 8000800:	f107 030e 	add.w	r3, r7, #14
 8000804:	9328      	str	r3, [sp, #160]	; 0xa0
 8000806:	2334      	movs	r3, #52	; 0x34
 8000808:	9327      	str	r3, [sp, #156]	; 0x9c
 800080a:	4668      	mov	r0, sp
 800080c:	f104 0310 	add.w	r3, r4, #16
 8000810:	229c      	movs	r2, #156	; 0x9c
 8000812:	4619      	mov	r1, r3
 8000814:	f00d fbb9 	bl	800df8a <memcpy>
 8000818:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800081c:	f001 fa97 	bl	8001d4e <bno055_read_regs>
 8000820:	4603      	mov	r3, r0
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <bno055_temperature+0x42>
        return err;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	e00d      	b.n	800084a <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7bdb      	ldrb	r3, [r3, #15]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d004      	beq.n	8000840 <bno055_temperature+0x54>
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	b25b      	sxtb	r3, r3
 800083e:	e001      	b.n	8000844 <bno055_temperature+0x58>
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	b25b      	sxtb	r3, r3
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bd90      	pop	{r4, r7, pc}
	...

08000854 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b0af      	sub	sp, #188	; 0xbc
 8000858:	af2a      	add	r7, sp, #168	; 0xa8
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 800085e:	687c      	ldr	r4, [r7, #4]
 8000860:	2302      	movs	r3, #2
 8000862:	9329      	str	r3, [sp, #164]	; 0xa4
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	9328      	str	r3, [sp, #160]	; 0xa0
 800086a:	2308      	movs	r3, #8
 800086c:	9327      	str	r3, [sp, #156]	; 0x9c
 800086e:	4668      	mov	r0, sp
 8000870:	f104 0310 	add.w	r3, r4, #16
 8000874:	229c      	movs	r2, #156	; 0x9c
 8000876:	4619      	mov	r1, r3
 8000878:	f00d fb87 	bl	800df8a <memcpy>
 800087c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000880:	f001 fa65 	bl	8001d4e <bno055_read_regs>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <bno055_acc_x+0x3e>
        return err;
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	e019      	b.n	80008c6 <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000892:	7b7b      	ldrb	r3, [r7, #13]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	b21a      	sxth	r2, r3
 8000898:	7b3b      	ldrb	r3, [r7, #12]
 800089a:	b21b      	sxth	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b21b      	sxth	r3, r3
 80008a0:	ee07 3a90 	vmov	s15, r3
 80008a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <bno055_acc_x+0x62>
 80008b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80008d0 <bno055_acc_x+0x7c>
 80008b4:	e001      	b.n	80008ba <bno055_acc_x+0x66>
 80008b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80008ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80008c4:	2300      	movs	r3, #0
};
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	bf00      	nop
 80008d0:	42c80000 	.word	0x42c80000

080008d4 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b0af      	sub	sp, #188	; 0xbc
 80008d8:	af2a      	add	r7, sp, #168	; 0xa8
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80008de:	687c      	ldr	r4, [r7, #4]
 80008e0:	2302      	movs	r3, #2
 80008e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80008ea:	230a      	movs	r3, #10
 80008ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80008ee:	4668      	mov	r0, sp
 80008f0:	f104 0310 	add.w	r3, r4, #16
 80008f4:	229c      	movs	r2, #156	; 0x9c
 80008f6:	4619      	mov	r1, r3
 80008f8:	f00d fb47 	bl	800df8a <memcpy>
 80008fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000900:	f001 fa25 	bl	8001d4e <bno055_read_regs>
 8000904:	4603      	mov	r3, r0
 8000906:	73fb      	strb	r3, [r7, #15]
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <bno055_acc_y+0x3e>
        return err;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	e019      	b.n	8000946 <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000912:	7b7b      	ldrb	r3, [r7, #13]
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	b21a      	sxth	r2, r3
 8000918:	7b3b      	ldrb	r3, [r7, #12]
 800091a:	b21b      	sxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b21b      	sxth	r3, r3
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <bno055_acc_y+0x62>
 8000930:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000950 <bno055_acc_y+0x7c>
 8000934:	e001      	b.n	800093a <bno055_acc_y+0x66>
 8000936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800093a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000944:	2300      	movs	r3, #0
};
 8000946:	4618      	mov	r0, r3
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	bf00      	nop
 8000950:	42c80000 	.word	0x42c80000

08000954 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b0af      	sub	sp, #188	; 0xbc
 8000958:	af2a      	add	r7, sp, #168	; 0xa8
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800095e:	687c      	ldr	r4, [r7, #4]
 8000960:	2302      	movs	r3, #2
 8000962:	9329      	str	r3, [sp, #164]	; 0xa4
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	9328      	str	r3, [sp, #160]	; 0xa0
 800096a:	230c      	movs	r3, #12
 800096c:	9327      	str	r3, [sp, #156]	; 0x9c
 800096e:	4668      	mov	r0, sp
 8000970:	f104 0310 	add.w	r3, r4, #16
 8000974:	229c      	movs	r2, #156	; 0x9c
 8000976:	4619      	mov	r1, r3
 8000978:	f00d fb07 	bl	800df8a <memcpy>
 800097c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000980:	f001 f9e5 	bl	8001d4e <bno055_read_regs>
 8000984:	4603      	mov	r3, r0
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <bno055_acc_z+0x3e>
        return err;
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	e019      	b.n	80009c6 <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000992:	7b7b      	ldrb	r3, [r7, #13]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b21a      	sxth	r2, r3
 8000998:	7b3b      	ldrb	r3, [r7, #12]
 800099a:	b21b      	sxth	r3, r3
 800099c:	4313      	orrs	r3, r2
 800099e:	b21b      	sxth	r3, r3
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <bno055_acc_z+0x62>
 80009b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80009d0 <bno055_acc_z+0x7c>
 80009b4:	e001      	b.n	80009ba <bno055_acc_z+0x66>
 80009b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80009ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80009c4:	2300      	movs	r3, #0
};
 80009c6:	4618      	mov	r0, r3
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	bf00      	nop
 80009d0:	42c80000 	.word	0x42c80000

080009d4 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b0b1      	sub	sp, #196	; 0xc4
 80009d8:	af2a      	add	r7, sp, #168	; 0xa8
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 80009de:	687c      	ldr	r4, [r7, #4]
 80009e0:	2306      	movs	r3, #6
 80009e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80009ea:	2308      	movs	r3, #8
 80009ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80009ee:	4668      	mov	r0, sp
 80009f0:	f104 0310 	add.w	r3, r4, #16
 80009f4:	229c      	movs	r2, #156	; 0x9c
 80009f6:	4619      	mov	r1, r3
 80009f8:	f00d fac7 	bl	800df8a <memcpy>
 80009fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a00:	f001 f9a5 	bl	8001d4e <bno055_read_regs>
 8000a04:	4603      	mov	r3, r0
 8000a06:	75fb      	strb	r3, [r7, #23]
 8000a08:	7dfb      	ldrb	r3, [r7, #23]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <bno055_acc+0x3e>
        return err;
 8000a0e:	7dfb      	ldrb	r3, [r7, #23]
 8000a10:	e03f      	b.n	8000a92 <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <bno055_acc+0x4a>
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <bno055_acc+0xc8>)
 8000a1c:	e001      	b.n	8000a22 <bno055_acc+0x4e>
 8000a1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000a22:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000a24:	7a7b      	ldrb	r3, [r7, #9]
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	7a3b      	ldrb	r3, [r7, #8]
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000a48:	7afb      	ldrb	r3, [r7, #11]
 8000a4a:	021b      	lsls	r3, r3, #8
 8000a4c:	b21a      	sxth	r2, r3
 8000a4e:	7abb      	ldrb	r3, [r7, #10]
 8000a50:	b21b      	sxth	r3, r3
 8000a52:	4313      	orrs	r3, r2
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000a6c:	7b7b      	ldrb	r3, [r7, #13]
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	b21a      	sxth	r2, r3
 8000a72:	7b3b      	ldrb	r3, [r7, #12]
 8000a74:	b21b      	sxth	r3, r3
 8000a76:	4313      	orrs	r3, r2
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	ee07 3a90 	vmov	s15, r3
 8000a7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a82:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000a90:	2300      	movs	r3, #0
};
 8000a92:	4618      	mov	r0, r3
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	42c80000 	.word	0x42c80000

08000aa0 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b0af      	sub	sp, #188	; 0xbc
 8000aa4:	af2a      	add	r7, sp, #168	; 0xa8
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000aaa:	687c      	ldr	r4, [r7, #4]
 8000aac:	2302      	movs	r3, #2
 8000aae:	9329      	str	r3, [sp, #164]	; 0xa4
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	9328      	str	r3, [sp, #160]	; 0xa0
 8000ab6:	2328      	movs	r3, #40	; 0x28
 8000ab8:	9327      	str	r3, [sp, #156]	; 0x9c
 8000aba:	4668      	mov	r0, sp
 8000abc:	f104 0310 	add.w	r3, r4, #16
 8000ac0:	229c      	movs	r2, #156	; 0x9c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f00d fa61 	bl	800df8a <memcpy>
 8000ac8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000acc:	f001 f93f 	bl	8001d4e <bno055_read_regs>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <bno055_linear_acc_x+0x3e>
        return err;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	e019      	b.n	8000b12 <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000ade:	7b7b      	ldrb	r3, [r7, #13]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	7b3b      	ldrb	r3, [r7, #12]
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	ee07 3a90 	vmov	s15, r3
 8000af0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <bno055_linear_acc_x+0x62>
 8000afc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000b1c <bno055_linear_acc_x+0x7c>
 8000b00:	e001      	b.n	8000b06 <bno055_linear_acc_x+0x66>
 8000b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000b10:	2300      	movs	r3, #0
};
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	42c80000 	.word	0x42c80000

08000b20 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b0af      	sub	sp, #188	; 0xbc
 8000b24:	af2a      	add	r7, sp, #168	; 0xa8
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000b2a:	687c      	ldr	r4, [r7, #4]
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	9328      	str	r3, [sp, #160]	; 0xa0
 8000b36:	232a      	movs	r3, #42	; 0x2a
 8000b38:	9327      	str	r3, [sp, #156]	; 0x9c
 8000b3a:	4668      	mov	r0, sp
 8000b3c:	f104 0310 	add.w	r3, r4, #16
 8000b40:	229c      	movs	r2, #156	; 0x9c
 8000b42:	4619      	mov	r1, r3
 8000b44:	f00d fa21 	bl	800df8a <memcpy>
 8000b48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b4c:	f001 f8ff 	bl	8001d4e <bno055_read_regs>
 8000b50:	4603      	mov	r3, r0
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <bno055_linear_acc_y+0x3e>
        return err;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	e019      	b.n	8000b92 <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b5e:	7b7b      	ldrb	r3, [r7, #13]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	7b3b      	ldrb	r3, [r7, #12]
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <bno055_linear_acc_y+0x62>
 8000b7c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000b9c <bno055_linear_acc_y+0x7c>
 8000b80:	e001      	b.n	8000b86 <bno055_linear_acc_y+0x66>
 8000b82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000b90:	2300      	movs	r3, #0
};
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd90      	pop	{r4, r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	42c80000 	.word	0x42c80000

08000ba0 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b0af      	sub	sp, #188	; 0xbc
 8000ba4:	af2a      	add	r7, sp, #168	; 0xa8
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000baa:	687c      	ldr	r4, [r7, #4]
 8000bac:	2302      	movs	r3, #2
 8000bae:	9329      	str	r3, [sp, #164]	; 0xa4
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	9328      	str	r3, [sp, #160]	; 0xa0
 8000bb6:	232c      	movs	r3, #44	; 0x2c
 8000bb8:	9327      	str	r3, [sp, #156]	; 0x9c
 8000bba:	4668      	mov	r0, sp
 8000bbc:	f104 0310 	add.w	r3, r4, #16
 8000bc0:	229c      	movs	r2, #156	; 0x9c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f00d f9e1 	bl	800df8a <memcpy>
 8000bc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bcc:	f001 f8bf 	bl	8001d4e <bno055_read_regs>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <bno055_linear_acc_z+0x3e>
        return err;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	e019      	b.n	8000c12 <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000bde:	7b7b      	ldrb	r3, [r7, #13]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	7b3b      	ldrb	r3, [r7, #12]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	ee07 3a90 	vmov	s15, r3
 8000bf0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <bno055_linear_acc_z+0x62>
 8000bfc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000c1c <bno055_linear_acc_z+0x7c>
 8000c00:	e001      	b.n	8000c06 <bno055_linear_acc_z+0x66>
 8000c02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000c10:	2300      	movs	r3, #0
};
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	42c80000 	.word	0x42c80000

08000c20 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b0b1      	sub	sp, #196	; 0xc4
 8000c24:	af2a      	add	r7, sp, #168	; 0xa8
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000c2a:	687c      	ldr	r4, [r7, #4]
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	9328      	str	r3, [sp, #160]	; 0xa0
 8000c36:	2328      	movs	r3, #40	; 0x28
 8000c38:	9327      	str	r3, [sp, #156]	; 0x9c
 8000c3a:	4668      	mov	r0, sp
 8000c3c:	f104 0310 	add.w	r3, r4, #16
 8000c40:	229c      	movs	r2, #156	; 0x9c
 8000c42:	4619      	mov	r1, r3
 8000c44:	f00d f9a1 	bl	800df8a <memcpy>
 8000c48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c4c:	f001 f87f 	bl	8001d4e <bno055_read_regs>
 8000c50:	4603      	mov	r3, r0
 8000c52:	75fb      	strb	r3, [r7, #23]
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <bno055_linear_acc+0x3e>
        return err;
 8000c5a:	7dfb      	ldrb	r3, [r7, #23]
 8000c5c:	e03f      	b.n	8000cde <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <bno055_linear_acc+0x4a>
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <bno055_linear_acc+0xc8>)
 8000c68:	e001      	b.n	8000c6e <bno055_linear_acc+0x4e>
 8000c6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000c6e:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000c70:	7a7b      	ldrb	r3, [r7, #9]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	7a3b      	ldrb	r3, [r7, #8]
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c86:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000c94:	7afb      	ldrb	r3, [r7, #11]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	7abb      	ldrb	r3, [r7, #10]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000caa:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000cb8:	7b7b      	ldrb	r3, [r7, #13]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	7b3b      	ldrb	r3, [r7, #12]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	ee07 3a90 	vmov	s15, r3
 8000cca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cce:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000cdc:	2300      	movs	r3, #0
};
 8000cde:	4618      	mov	r0, r3
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	42c80000 	.word	0x42c80000

08000cec <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b0af      	sub	sp, #188	; 0xbc
 8000cf0:	af2a      	add	r7, sp, #168	; 0xa8
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000cf6:	687c      	ldr	r4, [r7, #4]
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	9329      	str	r3, [sp, #164]	; 0xa4
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	9328      	str	r3, [sp, #160]	; 0xa0
 8000d02:	2314      	movs	r3, #20
 8000d04:	9327      	str	r3, [sp, #156]	; 0x9c
 8000d06:	4668      	mov	r0, sp
 8000d08:	f104 0310 	add.w	r3, r4, #16
 8000d0c:	229c      	movs	r2, #156	; 0x9c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f00d f93b 	bl	800df8a <memcpy>
 8000d14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d18:	f001 f819 	bl	8001d4e <bno055_read_regs>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <bno055_gyro_x+0x3e>
        return err;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	e019      	b.n	8000d5e <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d2a:	7b7b      	ldrb	r3, [r7, #13]
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	7b3b      	ldrb	r3, [r7, #12]
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <bno055_gyro_x+0x62>
 8000d48:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000d4c:	e001      	b.n	8000d52 <bno055_gyro_x+0x66>
 8000d4e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000d68 <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000d5c:	2300      	movs	r3, #0
};
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd90      	pop	{r4, r7, pc}
 8000d66:	bf00      	nop
 8000d68:	44610000 	.word	0x44610000

08000d6c <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b0af      	sub	sp, #188	; 0xbc
 8000d70:	af2a      	add	r7, sp, #168	; 0xa8
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000d76:	687c      	ldr	r4, [r7, #4]
 8000d78:	2302      	movs	r3, #2
 8000d7a:	9329      	str	r3, [sp, #164]	; 0xa4
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	9328      	str	r3, [sp, #160]	; 0xa0
 8000d82:	2316      	movs	r3, #22
 8000d84:	9327      	str	r3, [sp, #156]	; 0x9c
 8000d86:	4668      	mov	r0, sp
 8000d88:	f104 0310 	add.w	r3, r4, #16
 8000d8c:	229c      	movs	r2, #156	; 0x9c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f00d f8fb 	bl	800df8a <memcpy>
 8000d94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d98:	f000 ffd9 	bl	8001d4e <bno055_read_regs>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <bno055_gyro_y+0x3e>
        return err;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	e019      	b.n	8000dde <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000daa:	7b7b      	ldrb	r3, [r7, #13]
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	b21a      	sxth	r2, r3
 8000db0:	7b3b      	ldrb	r3, [r7, #12]
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <bno055_gyro_y+0x62>
 8000dc8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000dcc:	e001      	b.n	8000dd2 <bno055_gyro_y+0x66>
 8000dce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000de8 <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000ddc:	2300      	movs	r3, #0
};
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd90      	pop	{r4, r7, pc}
 8000de6:	bf00      	nop
 8000de8:	44610000 	.word	0x44610000

08000dec <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b0af      	sub	sp, #188	; 0xbc
 8000df0:	af2a      	add	r7, sp, #168	; 0xa8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000df6:	687c      	ldr	r4, [r7, #4]
 8000df8:	2302      	movs	r3, #2
 8000dfa:	9329      	str	r3, [sp, #164]	; 0xa4
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	9328      	str	r3, [sp, #160]	; 0xa0
 8000e02:	2318      	movs	r3, #24
 8000e04:	9327      	str	r3, [sp, #156]	; 0x9c
 8000e06:	4668      	mov	r0, sp
 8000e08:	f104 0310 	add.w	r3, r4, #16
 8000e0c:	229c      	movs	r2, #156	; 0x9c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f00d f8bb 	bl	800df8a <memcpy>
 8000e14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e18:	f000 ff99 	bl	8001d4e <bno055_read_regs>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <bno055_gyro_z+0x3e>
        return err;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	e019      	b.n	8000e5e <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e2a:	7b7b      	ldrb	r3, [r7, #13]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	7b3b      	ldrb	r3, [r7, #12]
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <bno055_gyro_z+0x62>
 8000e48:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000e4c:	e001      	b.n	8000e52 <bno055_gyro_z+0x66>
 8000e4e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000e68 <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000e5c:	2300      	movs	r3, #0
};
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	bf00      	nop
 8000e68:	44610000 	.word	0x44610000

08000e6c <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b0b1      	sub	sp, #196	; 0xc4
 8000e70:	af2a      	add	r7, sp, #168	; 0xa8
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000e76:	687c      	ldr	r4, [r7, #4]
 8000e78:	2306      	movs	r3, #6
 8000e7a:	9329      	str	r3, [sp, #164]	; 0xa4
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	9328      	str	r3, [sp, #160]	; 0xa0
 8000e82:	2314      	movs	r3, #20
 8000e84:	9327      	str	r3, [sp, #156]	; 0x9c
 8000e86:	4668      	mov	r0, sp
 8000e88:	f104 0310 	add.w	r3, r4, #16
 8000e8c:	229c      	movs	r2, #156	; 0x9c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f00d f87b 	bl	800df8a <memcpy>
 8000e94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e98:	f000 ff59 	bl	8001d4e <bno055_read_regs>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	75fb      	strb	r3, [r7, #23]
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <bno055_gyro+0x3e>
        return err;
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	e03f      	b.n	8000f2a <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d102      	bne.n	8000eb8 <bno055_gyro+0x4c>
 8000eb2:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8000eb6:	e000      	b.n	8000eba <bno055_gyro+0x4e>
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000eba:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000ebc:	7a7b      	ldrb	r3, [r7, #9]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	7a3b      	ldrb	r3, [r7, #8]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	ee07 3a90 	vmov	s15, r3
 8000ece:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ed2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000ee0:	7afb      	ldrb	r3, [r7, #11]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	7abb      	ldrb	r3, [r7, #10]
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ef6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000f04:	7b7b      	ldrb	r3, [r7, #13]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	7b3b      	ldrb	r3, [r7, #12]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	371c      	adds	r7, #28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	44610000 	.word	0x44610000

08000f38 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b0af      	sub	sp, #188	; 0xbc
 8000f3c:	af2a      	add	r7, sp, #168	; 0xa8
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000f42:	687c      	ldr	r4, [r7, #4]
 8000f44:	2302      	movs	r3, #2
 8000f46:	9329      	str	r3, [sp, #164]	; 0xa4
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	9328      	str	r3, [sp, #160]	; 0xa0
 8000f4e:	230e      	movs	r3, #14
 8000f50:	9327      	str	r3, [sp, #156]	; 0x9c
 8000f52:	4668      	mov	r0, sp
 8000f54:	f104 0310 	add.w	r3, r4, #16
 8000f58:	229c      	movs	r2, #156	; 0x9c
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f00d f815 	bl	800df8a <memcpy>
 8000f60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f64:	f000 fef3 	bl	8001d4e <bno055_read_regs>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <bno055_mag_x+0x3e>
        return err;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	e012      	b.n	8000f9c <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8000f76:	7b7b      	ldrb	r3, [r7, #13]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	7b3b      	ldrb	r3, [r7, #12]
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f8c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd90      	pop	{r4, r7, pc}

08000fa4 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b0af      	sub	sp, #188	; 0xbc
 8000fa8:	af2a      	add	r7, sp, #168	; 0xa8
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000fae:	687c      	ldr	r4, [r7, #4]
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	9329      	str	r3, [sp, #164]	; 0xa4
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	9328      	str	r3, [sp, #160]	; 0xa0
 8000fba:	2310      	movs	r3, #16
 8000fbc:	9327      	str	r3, [sp, #156]	; 0x9c
 8000fbe:	4668      	mov	r0, sp
 8000fc0:	f104 0310 	add.w	r3, r4, #16
 8000fc4:	229c      	movs	r2, #156	; 0x9c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f00c ffdf 	bl	800df8a <memcpy>
 8000fcc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fd0:	f000 febd 	bl	8001d4e <bno055_read_regs>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <bno055_mag_y+0x3e>
        return err;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	e012      	b.n	8001008 <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	7b3b      	ldrb	r3, [r7, #12]
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000ffc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}

08001010 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b0af      	sub	sp, #188	; 0xbc
 8001014:	af2a      	add	r7, sp, #168	; 0xa8
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800101a:	687c      	ldr	r4, [r7, #4]
 800101c:	2302      	movs	r3, #2
 800101e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	9328      	str	r3, [sp, #160]	; 0xa0
 8001026:	2312      	movs	r3, #18
 8001028:	9327      	str	r3, [sp, #156]	; 0x9c
 800102a:	4668      	mov	r0, sp
 800102c:	f104 0310 	add.w	r3, r4, #16
 8001030:	229c      	movs	r2, #156	; 0x9c
 8001032:	4619      	mov	r1, r3
 8001034:	f00c ffa9 	bl	800df8a <memcpy>
 8001038:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800103c:	f000 fe87 	bl	8001d4e <bno055_read_regs>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <bno055_mag_z+0x3e>
        return err;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	e012      	b.n	8001074 <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21a      	sxth	r2, r3
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21b      	sxth	r3, r3
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	bd90      	pop	{r4, r7, pc}

0800107c <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b0af      	sub	sp, #188	; 0xbc
 8001080:	af2a      	add	r7, sp, #168	; 0xa8
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001086:	687c      	ldr	r4, [r7, #4]
 8001088:	2306      	movs	r3, #6
 800108a:	9329      	str	r3, [sp, #164]	; 0xa4
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	9328      	str	r3, [sp, #160]	; 0xa0
 8001092:	230e      	movs	r3, #14
 8001094:	9327      	str	r3, [sp, #156]	; 0x9c
 8001096:	4668      	mov	r0, sp
 8001098:	f104 0310 	add.w	r3, r4, #16
 800109c:	229c      	movs	r2, #156	; 0x9c
 800109e:	4619      	mov	r1, r3
 80010a0:	f00c ff73 	bl	800df8a <memcpy>
 80010a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010a8:	f000 fe51 	bl	8001d4e <bno055_read_regs>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <bno055_mag+0x3e>
        return err;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	e036      	b.n	8001128 <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80010ba:	7a7b      	ldrb	r3, [r7, #9]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7a3b      	ldrb	r3, [r7, #8]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7abb      	ldrb	r3, [r7, #10]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001102:	7b7b      	ldrb	r3, [r7, #13]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	7b3b      	ldrb	r3, [r7, #12]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21b      	sxth	r3, r3
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001118:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800111c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001126:	2300      	movs	r3, #0
};
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bd90      	pop	{r4, r7, pc}

08001130 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b0b1      	sub	sp, #196	; 0xc4
 8001134:	af2a      	add	r7, sp, #168	; 0xa8
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 800113a:	687c      	ldr	r4, [r7, #4]
 800113c:	2302      	movs	r3, #2
 800113e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	9328      	str	r3, [sp, #160]	; 0xa0
 8001146:	232e      	movs	r3, #46	; 0x2e
 8001148:	9327      	str	r3, [sp, #156]	; 0x9c
 800114a:	4668      	mov	r0, sp
 800114c:	f104 0310 	add.w	r3, r4, #16
 8001150:	229c      	movs	r2, #156	; 0x9c
 8001152:	4619      	mov	r1, r3
 8001154:	f00c ff19 	bl	800df8a <memcpy>
 8001158:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800115c:	f000 fdf7 	bl	8001d4e <bno055_read_regs>
 8001160:	4603      	mov	r3, r0
 8001162:	75fb      	strb	r3, [r7, #23]
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <bno055_gravity_x+0x3e>
        return err;
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	e01b      	b.n	80011a6 <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <bno055_gravity_x+0x4a>
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <bno055_gravity_x+0x80>)
 8001178:	e001      	b.n	800117e <bno055_gravity_x+0x4e>
 800117a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800117e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001180:	7b7b      	ldrb	r3, [r7, #13]
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	b21a      	sxth	r2, r3
 8001186:	7b3b      	ldrb	r3, [r7, #12]
 8001188:	b21b      	sxth	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b21b      	sxth	r3, r3
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001196:	ed97 7a04 	vldr	s14, [r7, #16]
 800119a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd90      	pop	{r4, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	42c80000 	.word	0x42c80000

080011b4 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b0b1      	sub	sp, #196	; 0xc4
 80011b8:	af2a      	add	r7, sp, #168	; 0xa8
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80011be:	687c      	ldr	r4, [r7, #4]
 80011c0:	2302      	movs	r3, #2
 80011c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80011ca:	2330      	movs	r3, #48	; 0x30
 80011cc:	9327      	str	r3, [sp, #156]	; 0x9c
 80011ce:	4668      	mov	r0, sp
 80011d0:	f104 0310 	add.w	r3, r4, #16
 80011d4:	229c      	movs	r2, #156	; 0x9c
 80011d6:	4619      	mov	r1, r3
 80011d8:	f00c fed7 	bl	800df8a <memcpy>
 80011dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011e0:	f000 fdb5 	bl	8001d4e <bno055_read_regs>
 80011e4:	4603      	mov	r3, r0
 80011e6:	75fb      	strb	r3, [r7, #23]
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <bno055_gravity_y+0x3e>
        return err;
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	e01b      	b.n	800122a <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <bno055_gravity_y+0x4a>
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <bno055_gravity_y+0x80>)
 80011fc:	e001      	b.n	8001202 <bno055_gravity_y+0x4e>
 80011fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001202:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001204:	7b7b      	ldrb	r3, [r7, #13]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21a      	sxth	r2, r3
 800120a:	7b3b      	ldrb	r3, [r7, #12]
 800120c:	b21b      	sxth	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b21b      	sxth	r3, r3
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800121a:	ed97 7a04 	vldr	s14, [r7, #16]
 800121e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	bf00      	nop
 8001234:	42c80000 	.word	0x42c80000

08001238 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b0b1      	sub	sp, #196	; 0xc4
 800123c:	af2a      	add	r7, sp, #168	; 0xa8
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001242:	687c      	ldr	r4, [r7, #4]
 8001244:	2302      	movs	r3, #2
 8001246:	9329      	str	r3, [sp, #164]	; 0xa4
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	9328      	str	r3, [sp, #160]	; 0xa0
 800124e:	2332      	movs	r3, #50	; 0x32
 8001250:	9327      	str	r3, [sp, #156]	; 0x9c
 8001252:	4668      	mov	r0, sp
 8001254:	f104 0310 	add.w	r3, r4, #16
 8001258:	229c      	movs	r2, #156	; 0x9c
 800125a:	4619      	mov	r1, r3
 800125c:	f00c fe95 	bl	800df8a <memcpy>
 8001260:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001264:	f000 fd73 	bl	8001d4e <bno055_read_regs>
 8001268:	4603      	mov	r3, r0
 800126a:	75fb      	strb	r3, [r7, #23]
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <bno055_gravity_z+0x3e>
        return err;
 8001272:	7dfb      	ldrb	r3, [r7, #23]
 8001274:	e01b      	b.n	80012ae <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <bno055_gravity_z+0x4a>
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <bno055_gravity_z+0x80>)
 8001280:	e001      	b.n	8001286 <bno055_gravity_z+0x4e>
 8001282:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001286:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001288:	7b7b      	ldrb	r3, [r7, #13]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	7b3b      	ldrb	r3, [r7, #12]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21b      	sxth	r3, r3
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800129e:	ed97 7a04 	vldr	s14, [r7, #16]
 80012a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd90      	pop	{r4, r7, pc}
 80012b6:	bf00      	nop
 80012b8:	42c80000 	.word	0x42c80000

080012bc <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b0b1      	sub	sp, #196	; 0xc4
 80012c0:	af2a      	add	r7, sp, #168	; 0xa8
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 80012c6:	687c      	ldr	r4, [r7, #4]
 80012c8:	2306      	movs	r3, #6
 80012ca:	9329      	str	r3, [sp, #164]	; 0xa4
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	9328      	str	r3, [sp, #160]	; 0xa0
 80012d2:	232e      	movs	r3, #46	; 0x2e
 80012d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80012d6:	4668      	mov	r0, sp
 80012d8:	f104 0310 	add.w	r3, r4, #16
 80012dc:	229c      	movs	r2, #156	; 0x9c
 80012de:	4619      	mov	r1, r3
 80012e0:	f00c fe53 	bl	800df8a <memcpy>
 80012e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012e8:	f000 fd31 	bl	8001d4e <bno055_read_regs>
 80012ec:	4603      	mov	r3, r0
 80012ee:	75fb      	strb	r3, [r7, #23]
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <bno055_gravity+0x3e>
        return err;
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	e03f      	b.n	800137a <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <bno055_gravity+0x4a>
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <bno055_gravity+0xc8>)
 8001304:	e001      	b.n	800130a <bno055_gravity+0x4e>
 8001306:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800130a:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 800130c:	7a7b      	ldrb	r3, [r7, #9]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	7a3b      	ldrb	r3, [r7, #8]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001322:	ed97 7a04 	vldr	s14, [r7, #16]
 8001326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001330:	7afb      	ldrb	r3, [r7, #11]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	7abb      	ldrb	r3, [r7, #10]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001346:	ed97 7a04 	vldr	s14, [r7, #16]
 800134a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001354:	7b7b      	ldrb	r3, [r7, #13]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	7b3b      	ldrb	r3, [r7, #12]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21b      	sxth	r3, r3
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800136a:	ed97 7a04 	vldr	s14, [r7, #16]
 800136e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	42c80000 	.word	0x42c80000

08001388 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b0b1      	sub	sp, #196	; 0xc4
 800138c:	af2a      	add	r7, sp, #168	; 0xa8
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001392:	687c      	ldr	r4, [r7, #4]
 8001394:	2302      	movs	r3, #2
 8001396:	9329      	str	r3, [sp, #164]	; 0xa4
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	9328      	str	r3, [sp, #160]	; 0xa0
 800139e:	231a      	movs	r3, #26
 80013a0:	9327      	str	r3, [sp, #156]	; 0x9c
 80013a2:	4668      	mov	r0, sp
 80013a4:	f104 0310 	add.w	r3, r4, #16
 80013a8:	229c      	movs	r2, #156	; 0x9c
 80013aa:	4619      	mov	r1, r3
 80013ac:	f00c fded 	bl	800df8a <memcpy>
 80013b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013b4:	f000 fccb 	bl	8001d4e <bno055_read_regs>
 80013b8:	4603      	mov	r3, r0
 80013ba:	75fb      	strb	r3, [r7, #23]
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	e01b      	b.n	80013fe <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <bno055_euler_yaw+0x4c>
 80013ce:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80013d2:	e000      	b.n	80013d6 <bno055_euler_yaw+0x4e>
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80013d6:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80013d8:	7b7b      	ldrb	r3, [r7, #13]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b21a      	sxth	r2, r3
 80013de:	7b3b      	ldrb	r3, [r7, #12]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80013f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	44610000 	.word	0x44610000

0800140c <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b0b1      	sub	sp, #196	; 0xc4
 8001410:	af2a      	add	r7, sp, #168	; 0xa8
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001416:	687c      	ldr	r4, [r7, #4]
 8001418:	2302      	movs	r3, #2
 800141a:	9329      	str	r3, [sp, #164]	; 0xa4
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	9328      	str	r3, [sp, #160]	; 0xa0
 8001422:	231c      	movs	r3, #28
 8001424:	9327      	str	r3, [sp, #156]	; 0x9c
 8001426:	4668      	mov	r0, sp
 8001428:	f104 0310 	add.w	r3, r4, #16
 800142c:	229c      	movs	r2, #156	; 0x9c
 800142e:	4619      	mov	r1, r3
 8001430:	f00c fdab 	bl	800df8a <memcpy>
 8001434:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001438:	f000 fc89 	bl	8001d4e <bno055_read_regs>
 800143c:	4603      	mov	r3, r0
 800143e:	75fb      	strb	r3, [r7, #23]
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <bno055_euler_roll+0x3e>
        return err;
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	e01b      	b.n	8001482 <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <bno055_euler_roll+0x4c>
 8001452:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001456:	e000      	b.n	800145a <bno055_euler_roll+0x4e>
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800145a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 800145c:	7b7b      	ldrb	r3, [r7, #13]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	7b3b      	ldrb	r3, [r7, #12]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001472:	ed97 7a04 	vldr	s14, [r7, #16]
 8001476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	bf00      	nop
 800148c:	44610000 	.word	0x44610000

08001490 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b0b1      	sub	sp, #196	; 0xc4
 8001494:	af2a      	add	r7, sp, #168	; 0xa8
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 800149a:	687c      	ldr	r4, [r7, #4]
 800149c:	2302      	movs	r3, #2
 800149e:	9329      	str	r3, [sp, #164]	; 0xa4
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	9328      	str	r3, [sp, #160]	; 0xa0
 80014a6:	231e      	movs	r3, #30
 80014a8:	9327      	str	r3, [sp, #156]	; 0x9c
 80014aa:	4668      	mov	r0, sp
 80014ac:	f104 0310 	add.w	r3, r4, #16
 80014b0:	229c      	movs	r2, #156	; 0x9c
 80014b2:	4619      	mov	r1, r3
 80014b4:	f00c fd69 	bl	800df8a <memcpy>
 80014b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014bc:	f000 fc47 	bl	8001d4e <bno055_read_regs>
 80014c0:	4603      	mov	r3, r0
 80014c2:	75fb      	strb	r3, [r7, #23]
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <bno055_euler_pitch+0x3e>
        return err;
 80014ca:	7dfb      	ldrb	r3, [r7, #23]
 80014cc:	e01b      	b.n	8001506 <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <bno055_euler_pitch+0x4c>
 80014d6:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80014da:	e000      	b.n	80014de <bno055_euler_pitch+0x4e>
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80014de:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80014e0:	7b7b      	ldrb	r3, [r7, #13]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	7b3b      	ldrb	r3, [r7, #12]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80014fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	371c      	adds	r7, #28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	bf00      	nop
 8001510:	44610000 	.word	0x44610000

08001514 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b0b1      	sub	sp, #196	; 0xc4
 8001518:	af2a      	add	r7, sp, #168	; 0xa8
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 800151e:	687c      	ldr	r4, [r7, #4]
 8001520:	2306      	movs	r3, #6
 8001522:	9329      	str	r3, [sp, #164]	; 0xa4
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	9328      	str	r3, [sp, #160]	; 0xa0
 800152a:	231a      	movs	r3, #26
 800152c:	9327      	str	r3, [sp, #156]	; 0x9c
 800152e:	4668      	mov	r0, sp
 8001530:	f104 0310 	add.w	r3, r4, #16
 8001534:	229c      	movs	r2, #156	; 0x9c
 8001536:	4619      	mov	r1, r3
 8001538:	f00c fd27 	bl	800df8a <memcpy>
 800153c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001540:	f000 fc05 	bl	8001d4e <bno055_read_regs>
 8001544:	4603      	mov	r3, r0
 8001546:	75fb      	strb	r3, [r7, #23]
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	e03f      	b.n	80015d2 <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <bno055_euler+0x4c>
 800155a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800155e:	e000      	b.n	8001562 <bno055_euler+0x4e>
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001562:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001564:	7a7b      	ldrb	r3, [r7, #9]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	7a3b      	ldrb	r3, [r7, #8]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21b      	sxth	r3, r3
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800157a:	ed97 7a04 	vldr	s14, [r7, #16]
 800157e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	b21a      	sxth	r2, r3
 800158e:	7abb      	ldrb	r3, [r7, #10]
 8001590:	b21b      	sxth	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b21b      	sxth	r3, r3
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800159e:	ed97 7a04 	vldr	s14, [r7, #16]
 80015a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 80015ac:	7b7b      	ldrb	r3, [r7, #13]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	7b3b      	ldrb	r3, [r7, #12]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80015c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}
 80015da:	bf00      	nop
 80015dc:	44610000 	.word	0x44610000

080015e0 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b0af      	sub	sp, #188	; 0xbc
 80015e4:	af2a      	add	r7, sp, #168	; 0xa8
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 80015ea:	687c      	ldr	r4, [r7, #4]
 80015ec:	2302      	movs	r3, #2
 80015ee:	9329      	str	r3, [sp, #164]	; 0xa4
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80015f6:	2320      	movs	r3, #32
 80015f8:	9327      	str	r3, [sp, #156]	; 0x9c
 80015fa:	4668      	mov	r0, sp
 80015fc:	f104 0310 	add.w	r3, r4, #16
 8001600:	229c      	movs	r2, #156	; 0x9c
 8001602:	4619      	mov	r1, r3
 8001604:	f00c fcc1 	bl	800df8a <memcpy>
 8001608:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800160c:	f000 fb9f 	bl	8001d4e <bno055_read_regs>
 8001610:	4603      	mov	r3, r0
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <bno055_quaternion_w+0x3e>
        return err;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	e012      	b.n	8001644 <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	7b3b      	ldrb	r3, [r7, #12]
 8001626:	b21b      	sxth	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b21b      	sxth	r3, r3
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001634:	eddf 6a05 	vldr	s13, [pc, #20]	; 800164c <bno055_quaternion_w+0x6c>
 8001638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	46800000 	.word	0x46800000

08001650 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b0af      	sub	sp, #188	; 0xbc
 8001654:	af2a      	add	r7, sp, #168	; 0xa8
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 800165a:	687c      	ldr	r4, [r7, #4]
 800165c:	2302      	movs	r3, #2
 800165e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	9328      	str	r3, [sp, #160]	; 0xa0
 8001666:	2322      	movs	r3, #34	; 0x22
 8001668:	9327      	str	r3, [sp, #156]	; 0x9c
 800166a:	4668      	mov	r0, sp
 800166c:	f104 0310 	add.w	r3, r4, #16
 8001670:	229c      	movs	r2, #156	; 0x9c
 8001672:	4619      	mov	r1, r3
 8001674:	f00c fc89 	bl	800df8a <memcpy>
 8001678:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800167c:	f000 fb67 	bl	8001d4e <bno055_read_regs>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <bno055_quaternion_x+0x3e>
        return err;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	e012      	b.n	80016b4 <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800168e:	7b7b      	ldrb	r3, [r7, #13]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	7b3b      	ldrb	r3, [r7, #12]
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	b21b      	sxth	r3, r3
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a4:	eddf 6a05 	vldr	s13, [pc, #20]	; 80016bc <bno055_quaternion_x+0x6c>
 80016a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	46800000 	.word	0x46800000

080016c0 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b0af      	sub	sp, #188	; 0xbc
 80016c4:	af2a      	add	r7, sp, #168	; 0xa8
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80016ca:	687c      	ldr	r4, [r7, #4]
 80016cc:	2302      	movs	r3, #2
 80016ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	9328      	str	r3, [sp, #160]	; 0xa0
 80016d6:	2324      	movs	r3, #36	; 0x24
 80016d8:	9327      	str	r3, [sp, #156]	; 0x9c
 80016da:	4668      	mov	r0, sp
 80016dc:	f104 0310 	add.w	r3, r4, #16
 80016e0:	229c      	movs	r2, #156	; 0x9c
 80016e2:	4619      	mov	r1, r3
 80016e4:	f00c fc51 	bl	800df8a <memcpy>
 80016e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016ec:	f000 fb2f 	bl	8001d4e <bno055_read_regs>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <bno055_quaternion_y+0x3e>
        return err;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	e012      	b.n	8001724 <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80016fe:	7b7b      	ldrb	r3, [r7, #13]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b21a      	sxth	r2, r3
 8001704:	7b3b      	ldrb	r3, [r7, #12]
 8001706:	b21b      	sxth	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b21b      	sxth	r3, r3
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001714:	eddf 6a05 	vldr	s13, [pc, #20]	; 800172c <bno055_quaternion_y+0x6c>
 8001718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}
 800172c:	46800000 	.word	0x46800000

08001730 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b0af      	sub	sp, #188	; 0xbc
 8001734:	af2a      	add	r7, sp, #168	; 0xa8
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800173a:	687c      	ldr	r4, [r7, #4]
 800173c:	2302      	movs	r3, #2
 800173e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	9328      	str	r3, [sp, #160]	; 0xa0
 8001746:	2326      	movs	r3, #38	; 0x26
 8001748:	9327      	str	r3, [sp, #156]	; 0x9c
 800174a:	4668      	mov	r0, sp
 800174c:	f104 0310 	add.w	r3, r4, #16
 8001750:	229c      	movs	r2, #156	; 0x9c
 8001752:	4619      	mov	r1, r3
 8001754:	f00c fc19 	bl	800df8a <memcpy>
 8001758:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800175c:	f000 faf7 	bl	8001d4e <bno055_read_regs>
 8001760:	4603      	mov	r3, r0
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <bno055_quaternion_z+0x3e>
        return err;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	e012      	b.n	8001794 <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800176e:	7b7b      	ldrb	r3, [r7, #13]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b21b      	sxth	r3, r3
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001784:	eddf 6a05 	vldr	s13, [pc, #20]	; 800179c <bno055_quaternion_z+0x6c>
 8001788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bd90      	pop	{r4, r7, pc}
 800179c:	46800000 	.word	0x46800000

080017a0 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b0b1      	sub	sp, #196	; 0xc4
 80017a4:	af2a      	add	r7, sp, #168	; 0xa8
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 80017aa:	687c      	ldr	r4, [r7, #4]
 80017ac:	2308      	movs	r3, #8
 80017ae:	9329      	str	r3, [sp, #164]	; 0xa4
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	9328      	str	r3, [sp, #160]	; 0xa0
 80017b6:	2320      	movs	r3, #32
 80017b8:	9327      	str	r3, [sp, #156]	; 0x9c
 80017ba:	4668      	mov	r0, sp
 80017bc:	f104 0310 	add.w	r3, r4, #16
 80017c0:	229c      	movs	r2, #156	; 0x9c
 80017c2:	4619      	mov	r1, r3
 80017c4:	f00c fbe1 	bl	800df8a <memcpy>
 80017c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017cc:	f000 fabf 	bl	8001d4e <bno055_read_regs>
 80017d0:	4603      	mov	r3, r0
 80017d2:	75fb      	strb	r3, [r7, #23]
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <bno055_quaternion+0x3e>
        return err;
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	e048      	b.n	8001870 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80017de:	7b7b      	ldrb	r3, [r7, #13]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	7b3b      	ldrb	r3, [r7, #12]
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f4:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001878 <bno055_quaternion+0xd8>
 80017f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21a      	sxth	r2, r3
 8001808:	7bbb      	ldrb	r3, [r7, #14]
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21b      	sxth	r3, r3
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001818:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001878 <bno055_quaternion+0xd8>
 800181c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8001826:	7c7b      	ldrb	r3, [r7, #17]
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	b21a      	sxth	r2, r3
 800182c:	7c3b      	ldrb	r3, [r7, #16]
 800182e:	b21b      	sxth	r3, r3
 8001830:	4313      	orrs	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800183c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001878 <bno055_quaternion+0xd8>
 8001840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 800184a:	7cfb      	ldrb	r3, [r7, #19]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	b21a      	sxth	r2, r3
 8001850:	7cbb      	ldrb	r3, [r7, #18]
 8001852:	b21b      	sxth	r3, r3
 8001854:	4313      	orrs	r3, r2
 8001856:	b21b      	sxth	r3, r3
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001860:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001878 <bno055_quaternion+0xd8>
 8001864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	46800000 	.word	0x46800000

0800187c <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b0af      	sub	sp, #188	; 0xbc
 8001880:	af2a      	add	r7, sp, #168	; 0xa8
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4603      	mov	r3, r0
 800188c:	70fb      	strb	r3, [r7, #3]
 800188e:	460b      	mov	r3, r1
 8001890:	70bb      	strb	r3, [r7, #2]
 8001892:	4613      	mov	r3, r2
 8001894:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001896:	2101      	movs	r1, #1
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fabb 	bl	8001e14 <bno055_set_page>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <bno055_acc_conf+0x30>
        return err;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	e04b      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80018ac:	2100      	movs	r1, #0
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f91b 	bl	8001aea <bno055_set_opmode>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <bno055_acc_conf+0x46>
        return err;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	e040      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80018c2:	200c      	movs	r0, #12
 80018c4:	f003 fcbc 	bl	8005240 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	78bb      	ldrb	r3, [r7, #2]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	787b      	ldrb	r3, [r7, #1]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 80018d8:	687c      	ldr	r4, [r7, #4]
 80018da:	2301      	movs	r3, #1
 80018dc:	9329      	str	r3, [sp, #164]	; 0xa4
 80018de:	f107 030e 	add.w	r3, r7, #14
 80018e2:	9328      	str	r3, [sp, #160]	; 0xa0
 80018e4:	2308      	movs	r3, #8
 80018e6:	9327      	str	r3, [sp, #156]	; 0x9c
 80018e8:	4668      	mov	r0, sp
 80018ea:	f104 0310 	add.w	r3, r4, #16
 80018ee:	229c      	movs	r2, #156	; 0x9c
 80018f0:	4619      	mov	r1, r3
 80018f2:	f00c fb4a 	bl	800df8a <memcpy>
 80018f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018fa:	f000 fa5e 	bl	8001dba <bno055_write_regs>
 80018fe:	4603      	mov	r3, r0
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <bno055_acc_conf+0x90>
        return err;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	e01b      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	791b      	ldrb	r3, [r3, #4]
 8001910:	4619      	mov	r1, r3
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f8e9 	bl	8001aea <bno055_set_opmode>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <bno055_acc_conf+0xaa>
        return err;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	e00e      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001926:	2018      	movs	r0, #24
 8001928:	f003 fc8a 	bl	8005240 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800192c:	2100      	movs	r1, #0
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fa70 	bl	8001e14 <bno055_set_page>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <bno055_acc_conf+0xc6>
        return err;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	e000      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}

0800194c <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b0af      	sub	sp, #188	; 0xbc
 8001950:	af2a      	add	r7, sp, #168	; 0xa8
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4603      	mov	r3, r0
 800195c:	70fb      	strb	r3, [r7, #3]
 800195e:	460b      	mov	r3, r1
 8001960:	70bb      	strb	r3, [r7, #2]
 8001962:	4613      	mov	r3, r2
 8001964:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001966:	2101      	movs	r1, #1
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fa53 	bl	8001e14 <bno055_set_page>
 800196e:	4603      	mov	r3, r0
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <bno055_gyr_conf+0x30>
        return err;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	e04a      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800197c:	2100      	movs	r1, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f8b3 	bl	8001aea <bno055_set_opmode>
 8001984:	4603      	mov	r3, r0
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <bno055_gyr_conf+0x46>
        return err;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	e03f      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001992:	200c      	movs	r0, #12
 8001994:	f003 fc54 	bl	8005240 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	78bb      	ldrb	r3, [r7, #2]
 800199c:	4313      	orrs	r3, r2
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	733b      	strb	r3, [r7, #12]
 80019a2:	787b      	ldrb	r3, [r7, #1]
 80019a4:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 80019a6:	687c      	ldr	r4, [r7, #4]
 80019a8:	2302      	movs	r3, #2
 80019aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80019b2:	230a      	movs	r3, #10
 80019b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80019b6:	4668      	mov	r0, sp
 80019b8:	f104 0310 	add.w	r3, r4, #16
 80019bc:	229c      	movs	r2, #156	; 0x9c
 80019be:	4619      	mov	r1, r3
 80019c0:	f00c fae3 	bl	800df8a <memcpy>
 80019c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019c8:	f000 f9f7 	bl	8001dba <bno055_write_regs>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	e01b      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	791b      	ldrb	r3, [r3, #4]
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f882 	bl	8001aea <bno055_set_opmode>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <bno055_gyr_conf+0xa8>
        return err;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	e00e      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80019f4:	2018      	movs	r0, #24
 80019f6:	f003 fc23 	bl	8005240 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80019fa:	2100      	movs	r1, #0
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 fa09 	bl	8001e14 <bno055_set_page>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <bno055_gyr_conf+0xc4>
        return err;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	e000      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}

08001a1a <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 8001a1a:	b590      	push	{r4, r7, lr}
 8001a1c:	b0af      	sub	sp, #188	; 0xbc
 8001a1e:	af2a      	add	r7, sp, #168	; 0xa8
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	4608      	mov	r0, r1
 8001a24:	4611      	mov	r1, r2
 8001a26:	461a      	mov	r2, r3
 8001a28:	4603      	mov	r3, r0
 8001a2a:	70fb      	strb	r3, [r7, #3]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70bb      	strb	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001a34:	2101      	movs	r1, #1
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f9ec 	bl	8001e14 <bno055_set_page>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <bno055_mag_conf+0x30>
        return err;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	e04b      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f84c 	bl	8001aea <bno055_set_opmode>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <bno055_mag_conf+0x46>
        return err;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	e040      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001a60:	200c      	movs	r0, #12
 8001a62:	f003 fbed 	bl	8005240 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	78bb      	ldrb	r3, [r7, #2]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	787b      	ldrb	r3, [r7, #1]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 8001a76:	687c      	ldr	r4, [r7, #4]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a7c:	f107 030e 	add.w	r3, r7, #14
 8001a80:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a82:	2309      	movs	r3, #9
 8001a84:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a86:	4668      	mov	r0, sp
 8001a88:	f104 0310 	add.w	r3, r4, #16
 8001a8c:	229c      	movs	r2, #156	; 0x9c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f00c fa7b 	bl	800df8a <memcpy>
 8001a94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a98:	f000 f98f 	bl	8001dba <bno055_write_regs>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <bno055_mag_conf+0x90>
        return err;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	e01b      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	791b      	ldrb	r3, [r3, #4]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f81a 	bl	8001aea <bno055_set_opmode>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <bno055_mag_conf+0xaa>
        return err;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	e00e      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001ac4:	2018      	movs	r0, #24
 8001ac6:	f003 fbbb 	bl	8005240 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8001aca:	2100      	movs	r1, #0
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f9a1 	bl	8001e14 <bno055_set_page>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <bno055_mag_conf+0xc6>
        return err;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	e000      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd90      	pop	{r4, r7, pc}

08001aea <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 8001aea:	b590      	push	{r4, r7, lr}
 8001aec:	b0af      	sub	sp, #188	; 0xbc
 8001aee:	af2a      	add	r7, sp, #168	; 0xa8
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 8001af6:	687c      	ldr	r4, [r7, #4]
 8001af8:	2301      	movs	r3, #1
 8001afa:	9329      	str	r3, [sp, #164]	; 0xa4
 8001afc:	1cfb      	adds	r3, r7, #3
 8001afe:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b00:	233d      	movs	r3, #61	; 0x3d
 8001b02:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b04:	4668      	mov	r0, sp
 8001b06:	f104 0310 	add.w	r3, r4, #16
 8001b0a:	229c      	movs	r2, #156	; 0x9c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f00c fa3c 	bl	800df8a <memcpy>
 8001b12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b16:	f000 f950 	bl	8001dba <bno055_write_regs>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	e003      	b.n	8001b30 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001b28:	2018      	movs	r0, #24
 8001b2a:	f003 fb89 	bl	8005240 <HAL_Delay>
    return BNO_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd90      	pop	{r4, r7, pc}

08001b38 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b0af      	sub	sp, #188	; 0xbc
 8001b3c:	af2a      	add	r7, sp, #168	; 0xa8
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	4608      	mov	r0, r1
 8001b42:	4611      	mov	r1, r2
 8001b44:	461a      	mov	r2, r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	70fb      	strb	r3, [r7, #3]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	70bb      	strb	r3, [r7, #2]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001b52:	2100      	movs	r1, #0
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ffc8 	bl	8001aea <bno055_set_opmode>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <bno055_set_unit+0x30>
        return err;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	e04b      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8001b68:	2100      	movs	r1, #0
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f952 	bl	8001e14 <bno055_set_page>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <bno055_set_unit+0x46>
        return err;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	e040      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	78bb      	ldrb	r3, [r7, #2]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	787b      	ldrb	r3, [r7, #1]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 8001b96:	687c      	ldr	r4, [r7, #4]
 8001b98:	2301      	movs	r3, #1
 8001b9a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b9c:	f107 030e 	add.w	r3, r7, #14
 8001ba0:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ba2:	233b      	movs	r3, #59	; 0x3b
 8001ba4:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ba6:	4668      	mov	r0, sp
 8001ba8:	f104 0310 	add.w	r3, r4, #16
 8001bac:	229c      	movs	r2, #156	; 0x9c
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f00c f9eb 	bl	800df8a <memcpy>
 8001bb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bb8:	f000 f8ff 	bl	8001dba <bno055_write_regs>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <bno055_set_unit+0x92>
        return err;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	e01a      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	78ba      	ldrb	r2, [r7, #2]
 8001bce:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	787a      	ldrb	r2, [r7, #1]
 8001bd4:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bdc:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	791b      	ldrb	r3, [r3, #4]
 8001be8:	4619      	mov	r1, r3
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ff7d 	bl	8001aea <bno055_set_opmode>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <bno055_set_unit+0xc6>
        return err;
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	e000      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b0af      	sub	sp, #188	; 0xbc
 8001c0c:	af2a      	add	r7, sp, #168	; 0xa8
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e04d      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8001c1e:	2100      	movs	r1, #0
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff62 	bl	8001aea <bno055_set_opmode>
 8001c26:	4603      	mov	r3, r0
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <bno055_set_pwr_mode+0x2c>
        return err;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	e042      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001c34:	2100      	movs	r1, #0
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8ec 	bl	8001e14 <bno055_set_page>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <bno055_set_pwr_mode+0x42>
        return err;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	e037      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 8001c4a:	687c      	ldr	r4, [r7, #4]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c50:	1cfb      	adds	r3, r7, #3
 8001c52:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c54:	233e      	movs	r3, #62	; 0x3e
 8001c56:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c58:	4668      	mov	r0, sp
 8001c5a:	f104 0310 	add.w	r3, r4, #16
 8001c5e:	229c      	movs	r2, #156	; 0x9c
 8001c60:	4619      	mov	r1, r3
 8001c62:	f00c f992 	bl	800df8a <memcpy>
 8001c66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c6a:	f000 f8a6 	bl	8001dba <bno055_write_regs>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	e01e      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001c82:	2100      	movs	r1, #0
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f8c5 	bl	8001e14 <bno055_set_page>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <bno055_set_pwr_mode+0x90>
        return err;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	e010      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	791b      	ldrb	r3, [r3, #4]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff23 	bl	8001aea <bno055_set_opmode>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <bno055_set_pwr_mode+0xaa>
        return err;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	e003      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f003 fac4 	bl	8005240 <HAL_Delay>
    return BNO_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}

08001cc2 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 8001cc2:	b590      	push	{r4, r7, lr}
 8001cc4:	b0af      	sub	sp, #188	; 0xbc
 8001cc6:	af2a      	add	r7, sp, #168	; 0xa8
 8001cc8:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8001cce:	687c      	ldr	r4, [r7, #4]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001cd4:	f107 030f 	add.w	r3, r7, #15
 8001cd8:	9328      	str	r3, [sp, #160]	; 0xa0
 8001cda:	233f      	movs	r3, #63	; 0x3f
 8001cdc:	9327      	str	r3, [sp, #156]	; 0x9c
 8001cde:	4668      	mov	r0, sp
 8001ce0:	f104 0310 	add.w	r3, r4, #16
 8001ce4:	229c      	movs	r2, #156	; 0x9c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f00c f94f 	bl	800df8a <memcpy>
 8001cec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cf0:	f000 f863 	bl	8001dba <bno055_write_regs>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}

08001d08 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b0af      	sub	sp, #188	; 0xbc
 8001d0c:	af2a      	add	r7, sp, #168	; 0xa8
 8001d0e:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8001d14:	687c      	ldr	r4, [r7, #4]
 8001d16:	2301      	movs	r3, #1
 8001d18:	9329      	str	r3, [sp, #164]	; 0xa4
 8001d1a:	f107 030f 	add.w	r3, r7, #15
 8001d1e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001d20:	233f      	movs	r3, #63	; 0x3f
 8001d22:	9327      	str	r3, [sp, #156]	; 0x9c
 8001d24:	4668      	mov	r0, sp
 8001d26:	f104 0310 	add.w	r3, r4, #16
 8001d2a:	229c      	movs	r2, #156	; 0x9c
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f00c f92c 	bl	800df8a <memcpy>
 8001d32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d36:	f000 f840 	bl	8001dba <bno055_write_regs>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <bno055_on+0x3e>
    }
    return BNO_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd90      	pop	{r4, r7, pc}

08001d4e <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8001d4e:	b084      	sub	sp, #16
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	f107 0c10 	add.w	ip, r7, #16
 8001d5a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8001d5e:	6938      	ldr	r0, [r7, #16]
 8001d60:	7dbb      	ldrb	r3, [r7, #22]
 8001d62:	b299      	uxth	r1, r3
 8001d64:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f006 fa8a 	bl	8008288 <HAL_I2C_Master_Transmit>
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e014      	b.n	8001dac <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 8001d82:	6938      	ldr	r0, [r7, #16]
 8001d84:	7dbb      	ldrb	r3, [r7, #22]
 8001d86:	b299      	uxth	r1, r3
 8001d88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d92:	9200      	str	r2, [sp, #0]
 8001d94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001d98:	f006 fb8e 	bl	80084b8 <HAL_I2C_Master_Receive>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001db6:	b004      	add	sp, #16
 8001db8:	4770      	bx	lr

08001dba <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 8001dba:	b084      	sub	sp, #16
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	f107 0418 	add.w	r4, r7, #24
 8001dc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 8001dca:	69b8      	ldr	r0, [r7, #24]
 8001dcc:	7fbb      	ldrb	r3, [r7, #30]
 8001dce:	b299      	uxth	r1, r3
 8001dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001dda:	b29c      	uxth	r4, r3
 8001ddc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	f04f 35ff 	mov.w	r5, #4294967295
 8001de6:	9502      	str	r5, [sp, #8]
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	4623      	mov	r3, r4
 8001df2:	f006 fe5b 	bl	8008aac <HAL_I2C_Mem_Write>
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e10:	b004      	add	sp, #16
 8001e12:	4770      	bx	lr

08001e14 <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b0af      	sub	sp, #188	; 0xbc
 8001e18:	af2a      	add	r7, sp, #168	; 0xa8
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7b5a      	ldrb	r2, [r3, #13]
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <bno055_set_page+0x1a>
        return BNO_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e024      	b.n	8001e78 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d901      	bls.n	8001e38 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8001e34:	2302      	movs	r3, #2
 8001e36:	e01f      	b.n	8001e78 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8001e38:	687c      	ldr	r4, [r7, #4]
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e3e:	1cfb      	adds	r3, r7, #3
 8001e40:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e42:	2307      	movs	r3, #7
 8001e44:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e46:	4668      	mov	r0, sp
 8001e48:	f104 0310 	add.w	r3, r4, #16
 8001e4c:	229c      	movs	r2, #156	; 0x9c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f00c f89b 	bl	800df8a <memcpy>
 8001e54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e58:	f7ff ffaf 	bl	8001dba <bno055_write_regs>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <bno055_set_page+0x56>
        return err;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	e006      	b.n	8001e78 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8001e70:	2002      	movs	r0, #2
 8001e72:	f003 f9e5 	bl	8005240 <HAL_Delay>
    return BNO_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd90      	pop	{r4, r7, pc}

08001e80 <CAN_INIT>:
uint8_t RxData_Master[64];




error_handler CAN_INIT(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
	error_handler err;
	TxHeader_Master_State.Identifier = 0x10000000;
 8001e86:	4b7b      	ldr	r3, [pc, #492]	; (8002074 <CAN_INIT+0x1f4>)
 8001e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e8c:	601a      	str	r2, [r3, #0]
	TxHeader_Master_State.IdType = FDCAN_EXTENDED_ID;
 8001e8e:	4b79      	ldr	r3, [pc, #484]	; (8002074 <CAN_INIT+0x1f4>)
 8001e90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e94:	605a      	str	r2, [r3, #4]
	TxHeader_Master_State.TxFrameType = FDCAN_DATA_FRAME;
 8001e96:	4b77      	ldr	r3, [pc, #476]	; (8002074 <CAN_INIT+0x1f4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
	TxHeader_Master_State.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001e9c:	4b75      	ldr	r3, [pc, #468]	; (8002074 <CAN_INIT+0x1f4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
	TxHeader_Master_State.DataLength = FDCAN_DLC_BYTES_1;
 8001ea2:	4b74      	ldr	r3, [pc, #464]	; (8002074 <CAN_INIT+0x1f4>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	60da      	str	r2, [r3, #12]
	TxHeader_Master_State.BitRateSwitch = FDCAN_BRS_ON;
 8001ea8:	4b72      	ldr	r3, [pc, #456]	; (8002074 <CAN_INIT+0x1f4>)
 8001eaa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eae:	615a      	str	r2, [r3, #20]
	TxHeader_Master_State.FDFormat = FDCAN_FD_CAN;
 8001eb0:	4b70      	ldr	r3, [pc, #448]	; (8002074 <CAN_INIT+0x1f4>)
 8001eb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001eb6:	619a      	str	r2, [r3, #24]


	TxHeader_Master_Data.Identifier = 0x10000000;
 8001eb8:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <CAN_INIT+0x1f8>)
 8001eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ebe:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.IdType = FDCAN_EXTENDED_ID;
 8001ec0:	4b6d      	ldr	r3, [pc, #436]	; (8002078 <CAN_INIT+0x1f8>)
 8001ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ec6:	605a      	str	r2, [r3, #4]
	TxHeader_Master_Data.TxFrameType = FDCAN_DATA_FRAME;
 8001ec8:	4b6b      	ldr	r3, [pc, #428]	; (8002078 <CAN_INIT+0x1f8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
	TxHeader_Master_Data.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001ece:	4b6a      	ldr	r3, [pc, #424]	; (8002078 <CAN_INIT+0x1f8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_1;
 8001ed4:	4b68      	ldr	r3, [pc, #416]	; (8002078 <CAN_INIT+0x1f8>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	60da      	str	r2, [r3, #12]
	TxHeader_Master_Data.BitRateSwitch = FDCAN_BRS_ON;
 8001eda:	4b67      	ldr	r3, [pc, #412]	; (8002078 <CAN_INIT+0x1f8>)
 8001edc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ee0:	615a      	str	r2, [r3, #20]
	TxHeader_Master_Data.FDFormat = FDCAN_FD_CAN;
 8001ee2:	4b65      	ldr	r3, [pc, #404]	; (8002078 <CAN_INIT+0x1f8>)
 8001ee4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ee8:	619a      	str	r2, [r3, #24]

	TxHeader_Pod.Identifier = 0x10000000;
 8001eea:	4b64      	ldr	r3, [pc, #400]	; (800207c <CAN_INIT+0x1fc>)
 8001eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ef0:	601a      	str	r2, [r3, #0]
	TxHeader_Pod.IdType = FDCAN_EXTENDED_ID;
 8001ef2:	4b62      	ldr	r3, [pc, #392]	; (800207c <CAN_INIT+0x1fc>)
 8001ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef8:	605a      	str	r2, [r3, #4]
	TxHeader_Pod.TxFrameType = FDCAN_DATA_FRAME;
 8001efa:	4b60      	ldr	r3, [pc, #384]	; (800207c <CAN_INIT+0x1fc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
	TxHeader_Pod.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001f00:	4b5e      	ldr	r3, [pc, #376]	; (800207c <CAN_INIT+0x1fc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
	TxHeader_Pod.DataLength = FDCAN_DLC_BYTES_8;
 8001f06:	4b5d      	ldr	r3, [pc, #372]	; (800207c <CAN_INIT+0x1fc>)
 8001f08:	2208      	movs	r2, #8
 8001f0a:	60da      	str	r2, [r3, #12]
	TxHeader_Pod.BitRateSwitch = FDCAN_BRS_OFF;
 8001f0c:	4b5b      	ldr	r3, [pc, #364]	; (800207c <CAN_INIT+0x1fc>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
	TxHeader_Pod.FDFormat = FDCAN_CLASSIC_CAN;
 8001f12:	4b5a      	ldr	r3, [pc, #360]	; (800207c <CAN_INIT+0x1fc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]

	Filter_ESC.IdType = FDCAN_EXTENDED_ID;
 8001f18:	4b59      	ldr	r3, [pc, #356]	; (8002080 <CAN_INIT+0x200>)
 8001f1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f1e:	601a      	str	r2, [r3, #0]
	Filter_ESC.FilterIndex = 0;
 8001f20:	4b57      	ldr	r3, [pc, #348]	; (8002080 <CAN_INIT+0x200>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
	Filter_ESC.FilterType = FDCAN_FILTER_MASK;
 8001f26:	4b56      	ldr	r3, [pc, #344]	; (8002080 <CAN_INIT+0x200>)
 8001f28:	2202      	movs	r2, #2
 8001f2a:	609a      	str	r2, [r3, #8]
	Filter_ESC.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8001f2c:	4b54      	ldr	r3, [pc, #336]	; (8002080 <CAN_INIT+0x200>)
 8001f2e:	2202      	movs	r2, #2
 8001f30:	60da      	str	r2, [r3, #12]
	Filter_ESC.FilterID1 = 0x000000FF;
 8001f32:	4b53      	ldr	r3, [pc, #332]	; (8002080 <CAN_INIT+0x200>)
 8001f34:	22ff      	movs	r2, #255	; 0xff
 8001f36:	611a      	str	r2, [r3, #16]
	Filter_ESC.FilterID2 = ESC_ID;
 8001f38:	4b51      	ldr	r3, [pc, #324]	; (8002080 <CAN_INIT+0x200>)
 8001f3a:	2265      	movs	r2, #101	; 0x65
 8001f3c:	615a      	str	r2, [r3, #20]

	Filter_BATT.IdType = FDCAN_EXTENDED_ID;
 8001f3e:	4b51      	ldr	r3, [pc, #324]	; (8002084 <CAN_INIT+0x204>)
 8001f40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f44:	601a      	str	r2, [r3, #0]
	Filter_BATT.FilterIndex = 1;
 8001f46:	4b4f      	ldr	r3, [pc, #316]	; (8002084 <CAN_INIT+0x204>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	605a      	str	r2, [r3, #4]
	Filter_BATT.FilterType = FDCAN_FILTER_DUAL;
 8001f4c:	4b4d      	ldr	r3, [pc, #308]	; (8002084 <CAN_INIT+0x204>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	609a      	str	r2, [r3, #8]
	Filter_BATT.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8001f52:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <CAN_INIT+0x204>)
 8001f54:	2202      	movs	r2, #2
 8001f56:	60da      	str	r2, [r3, #12]
	Filter_BATT.FilterID1 = IMD_ID;
 8001f58:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <CAN_INIT+0x204>)
 8001f5a:	4a4b      	ldr	r2, [pc, #300]	; (8002088 <CAN_INIT+0x208>)
 8001f5c:	611a      	str	r2, [r3, #16]
	Filter_BATT.FilterID2 = BMS_ID;
 8001f5e:	4b49      	ldr	r3, [pc, #292]	; (8002084 <CAN_INIT+0x204>)
 8001f60:	2299      	movs	r2, #153	; 0x99
 8001f62:	615a      	str	r2, [r3, #20]

	Filter_STATE.IdType = FDCAN_EXTENDED_ID;
 8001f64:	4b49      	ldr	r3, [pc, #292]	; (800208c <CAN_INIT+0x20c>)
 8001f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f6a:	601a      	str	r2, [r3, #0]
	Filter_STATE.FilterIndex = 2;
 8001f6c:	4b47      	ldr	r3, [pc, #284]	; (800208c <CAN_INIT+0x20c>)
 8001f6e:	2202      	movs	r2, #2
 8001f70:	605a      	str	r2, [r3, #4]
	Filter_STATE.FilterType = FDCAN_FILTER_MASK;
 8001f72:	4b46      	ldr	r3, [pc, #280]	; (800208c <CAN_INIT+0x20c>)
 8001f74:	2202      	movs	r2, #2
 8001f76:	609a      	str	r2, [r3, #8]
	Filter_STATE.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001f78:	4b44      	ldr	r3, [pc, #272]	; (800208c <CAN_INIT+0x20c>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	60da      	str	r2, [r3, #12]
	Filter_STATE.FilterID1 = 0x000000FF;
 8001f7e:	4b43      	ldr	r3, [pc, #268]	; (800208c <CAN_INIT+0x20c>)
 8001f80:	22ff      	movs	r2, #255	; 0xff
 8001f82:	611a      	str	r2, [r3, #16]
	Filter_STATE.FilterID2 = 0x00;
 8001f84:	4b41      	ldr	r3, [pc, #260]	; (800208c <CAN_INIT+0x20c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	615a      	str	r2, [r3, #20]

	Filter_DATA.IdType = FDCAN_EXTENDED_ID;
 8001f8a:	4b41      	ldr	r3, [pc, #260]	; (8002090 <CAN_INIT+0x210>)
 8001f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f90:	601a      	str	r2, [r3, #0]
	Filter_DATA.FilterIndex = 3;
 8001f92:	4b3f      	ldr	r3, [pc, #252]	; (8002090 <CAN_INIT+0x210>)
 8001f94:	2203      	movs	r2, #3
 8001f96:	605a      	str	r2, [r3, #4]
	Filter_DATA.FilterType = FDCAN_FILTER_MASK;
 8001f98:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <CAN_INIT+0x210>)
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	609a      	str	r2, [r3, #8]
	Filter_DATA.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001f9e:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <CAN_INIT+0x210>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	60da      	str	r2, [r3, #12]
	Filter_DATA.FilterID1 = 0x000000FF;
 8001fa4:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <CAN_INIT+0x210>)
 8001fa6:	22ff      	movs	r2, #255	; 0xff
 8001fa8:	611a      	str	r2, [r3, #16]
	Filter_DATA.FilterID2 = FOLLOWER_ID;
 8001faa:	4b39      	ldr	r3, [pc, #228]	; (8002090 <CAN_INIT+0x210>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	615a      	str	r2, [r3, #20]

	err = CAN_INIT_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	71fb      	strb	r3, [r7, #7]
	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){
 8001fb4:	4837      	ldr	r0, [pc, #220]	; (8002094 <CAN_INIT+0x214>)
 8001fb6:	f005 fa6b 	bl	8007490 <HAL_FDCAN_Start>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <CAN_INIT+0x144>
		err = CAN_INIT_ERR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	4832      	ldr	r0, [pc, #200]	; (8002094 <CAN_INIT+0x214>)
 8001fca:	f005 fbd5 	bl	8007778 <HAL_FDCAN_ActivateNotification>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <CAN_INIT+0x158>
		err = CAN_INIT_ERR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK){
 8001fd8:	482f      	ldr	r0, [pc, #188]	; (8002098 <CAN_INIT+0x218>)
 8001fda:	f005 fa59 	bl	8007490 <HAL_FDCAN_Start>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <CAN_INIT+0x168>
		err = CAN_INIT_ERR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2101      	movs	r1, #1
 8001fec:	482a      	ldr	r0, [pc, #168]	; (8002098 <CAN_INIT+0x218>)
 8001fee:	f005 fbc3 	bl	8007778 <HAL_FDCAN_ActivateNotification>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <CAN_INIT+0x17c>
		err = CAN_INIT_ERR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_FDCAN_Start(&hfdcan3)!= HAL_OK){
 8001ffc:	4827      	ldr	r0, [pc, #156]	; (800209c <CAN_INIT+0x21c>)
 8001ffe:	f005 fa47 	bl	8007490 <HAL_FDCAN_Start>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <CAN_INIT+0x18c>
		err = CAN_INIT_ERR;
 8002008:	2301      	movs	r3, #1
 800200a:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &Filter_STATE) != HAL_OK){
 800200c:	491f      	ldr	r1, [pc, #124]	; (800208c <CAN_INIT+0x20c>)
 800200e:	4821      	ldr	r0, [pc, #132]	; (8002094 <CAN_INIT+0x214>)
 8002010:	f005 f9e4 	bl	80073dc <HAL_FDCAN_ConfigFilter>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <CAN_INIT+0x19e>
		err = CAN_INIT_ERR;
 800201a:	2301      	movs	r3, #1
 800201c:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &Filter_DATA) != HAL_OK){
 800201e:	491c      	ldr	r1, [pc, #112]	; (8002090 <CAN_INIT+0x210>)
 8002020:	481d      	ldr	r0, [pc, #116]	; (8002098 <CAN_INIT+0x218>)
 8002022:	f005 f9db 	bl	80073dc <HAL_FDCAN_ConfigFilter>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <CAN_INIT+0x1b0>
		err = CAN_INIT_ERR;
 800202c:	2301      	movs	r3, #1
 800202e:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &Filter_BATT) != HAL_OK){
 8002030:	4914      	ldr	r1, [pc, #80]	; (8002084 <CAN_INIT+0x204>)
 8002032:	481a      	ldr	r0, [pc, #104]	; (800209c <CAN_INIT+0x21c>)
 8002034:	f005 f9d2 	bl	80073dc <HAL_FDCAN_ConfigFilter>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <CAN_INIT+0x1c2>
		err = CAN_INIT_ERR;
 800203e:	2301      	movs	r3, #1
 8002040:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &Filter_ESC) != HAL_OK){
 8002042:	490f      	ldr	r1, [pc, #60]	; (8002080 <CAN_INIT+0x200>)
 8002044:	4815      	ldr	r0, [pc, #84]	; (800209c <CAN_INIT+0x21c>)
 8002046:	f005 f9c9 	bl	80073dc <HAL_FDCAN_ConfigFilter>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <CAN_INIT+0x1d4>
		err = CAN_INIT_ERR;
 8002050:	2301      	movs	r3, #1
 8002052:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK){
 8002054:	2200      	movs	r2, #0
 8002056:	2108      	movs	r1, #8
 8002058:	4810      	ldr	r0, [pc, #64]	; (800209c <CAN_INIT+0x21c>)
 800205a:	f005 fb8d 	bl	8007778 <HAL_FDCAN_ActivateNotification>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <CAN_INIT+0x1e8>
		err = CAN_INIT_ERR;
 8002064:	2301      	movs	r3, #1
 8002066:	71fb      	strb	r3, [r7, #7]
	}
	return err;
 8002068:	79fb      	ldrb	r3, [r7, #7]

}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000134 	.word	0x20000134
 8002078:	20000158 	.word	0x20000158
 800207c:	2000017c 	.word	0x2000017c
 8002080:	200001f0 	.word	0x200001f0
 8002084:	20000208 	.word	0x20000208
 8002088:	0a100101 	.word	0x0a100101
 800208c:	20000220 	.word	0x20000220
 8002090:	20000238 	.word	0x20000238
 8002094:	2000043c 	.word	0x2000043c
 8002098:	200004a0 	.word	0x200004a0
 800209c:	20000504 	.word	0x20000504

080020a0 <IMD_Req_Isolation>:
		err = CAN3_MSG_ERR;
	}
	return err;
}

error_handler IMD_Req_Isolation(){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
	error_handler err;
	err = CAN_OK;
 80020a6:	2305      	movs	r3, #5
 80020a8:	71fb      	strb	r3, [r7, #7]
	TxHeader_Pod.Identifier = IMD_ID;
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <IMD_Req_Isolation+0x3c>)
 80020ac:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <IMD_Req_Isolation+0x40>)
 80020ae:	601a      	str	r2, [r3, #0]
	TxHeader_Pod.DataLength = FDCAN_DLC_BYTES_1;
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <IMD_Req_Isolation+0x3c>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	60da      	str	r2, [r3, #12]
	uint8_t temp_data[] = {0xE0};
 80020b6:	23e0      	movs	r3, #224	; 0xe0
 80020b8:	713b      	strb	r3, [r7, #4]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader_Pod, temp_data)!= HAL_OK){
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	461a      	mov	r2, r3
 80020be:	4907      	ldr	r1, [pc, #28]	; (80020dc <IMD_Req_Isolation+0x3c>)
 80020c0:	4808      	ldr	r0, [pc, #32]	; (80020e4 <IMD_Req_Isolation+0x44>)
 80020c2:	f005 fa0d 	bl	80074e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <IMD_Req_Isolation+0x30>
		err = CAN3_MSG_ERR;
 80020cc:	2302      	movs	r3, #2
 80020ce:	71fb      	strb	r3, [r7, #7]
	}
	return err;
 80020d0:	79fb      	ldrb	r3, [r7, #7]

}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000017c 	.word	0x2000017c
 80020e0:	0a100101 	.word	0x0a100101
 80020e4:	20000504 	.word	0x20000504

080020e8 <Sensor_Data>:
	return err;


}

error_handler Sensor_Data(){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
	error_handler err;
	err = CAN_OK;
 80020ee:	2305      	movs	r3, #5
 80020f0:	71fb      	strb	r3, [r7, #7]
	TxHeader_Master_Data.Identifier = 0x01000100 | FOLLOWER_ID;
 80020f2:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <Sensor_Data+0xbc>)
 80020f4:	4a2c      	ldr	r2, [pc, #176]	; (80021a8 <Sensor_Data+0xc0>)
 80020f6:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.TxFrameType = FDCAN_DATA_FRAME;
 80020f8:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <Sensor_Data+0xbc>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_16;
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <Sensor_Data+0xbc>)
 8002100:	220a      	movs	r2, #10
 8002102:	60da      	str	r2, [r3, #12]
	uint8_t Temperature_Data[] = {};
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, Temperature_Data)!= HAL_OK){
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	461a      	mov	r2, r3
 8002108:	4926      	ldr	r1, [pc, #152]	; (80021a4 <Sensor_Data+0xbc>)
 800210a:	4828      	ldr	r0, [pc, #160]	; (80021ac <Sensor_Data+0xc4>)
 800210c:	f005 f9e8 	bl	80074e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <Sensor_Data+0x32>
		err = CAN1_MSG_ERR;
 8002116:	2304      	movs	r3, #4
 8002118:	71fb      	strb	r3, [r7, #7]
	}


	TxHeader_Master_Data.Identifier = 0x01000200 | FOLLOWER_ID;
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <Sensor_Data+0xbc>)
 800211c:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <Sensor_Data+0xc8>)
 800211e:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_16;
 8002120:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <Sensor_Data+0xbc>)
 8002122:	220a      	movs	r2, #10
 8002124:	60da      	str	r2, [r3, #12]
	uint8_t ESC_Data[] = {};
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, ESC_Data)!= HAL_OK){
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	461a      	mov	r2, r3
 800212a:	491e      	ldr	r1, [pc, #120]	; (80021a4 <Sensor_Data+0xbc>)
 800212c:	481f      	ldr	r0, [pc, #124]	; (80021ac <Sensor_Data+0xc4>)
 800212e:	f005 f9d7 	bl	80074e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <Sensor_Data+0x54>
		err = CAN2_MSG_ERR;
 8002138:	2303      	movs	r3, #3
 800213a:	71fb      	strb	r3, [r7, #7]
	}


	TxHeader_Master_Data.Identifier = 0x01000300 | FOLLOWER_ID;
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <Sensor_Data+0xbc>)
 800213e:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <Sensor_Data+0xcc>)
 8002140:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_2;
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <Sensor_Data+0xbc>)
 8002144:	2202      	movs	r2, #2
 8002146:	60da      	str	r2, [r3, #12]
	uint8_t Relay_Data[] = {0x00,0x00};
 8002148:	2300      	movs	r3, #0
 800214a:	803b      	strh	r3, [r7, #0]
	Relay_Data[0] = (RelayStates & 0xFF00) >> 8;
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <Sensor_Data+0xd0>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	b29b      	uxth	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	703b      	strb	r3, [r7, #0]
	Relay_Data[1] = (RelayStates & 0x00FF);
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <Sensor_Data+0xd0>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	707b      	strb	r3, [r7, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, Relay_Data)!= HAL_OK){
 8002160:	463b      	mov	r3, r7
 8002162:	461a      	mov	r2, r3
 8002164:	490f      	ldr	r1, [pc, #60]	; (80021a4 <Sensor_Data+0xbc>)
 8002166:	4811      	ldr	r0, [pc, #68]	; (80021ac <Sensor_Data+0xc4>)
 8002168:	f005 f9ba 	bl	80074e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <Sensor_Data+0x8e>
		err = CAN2_MSG_ERR;
 8002172:	2303      	movs	r3, #3
 8002174:	71fb      	strb	r3, [r7, #7]
	}


	TxHeader_Master_Data.Identifier = 0x01000400 | FOLLOWER_ID;
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <Sensor_Data+0xbc>)
 8002178:	4a10      	ldr	r2, [pc, #64]	; (80021bc <Sensor_Data+0xd4>)
 800217a:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_16;
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <Sensor_Data+0xbc>)
 800217e:	220a      	movs	r2, #10
 8002180:	60da      	str	r2, [r3, #12]
	uint8_t Batt_Data[] = {};
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, Batt_Data)!= HAL_OK){
 8002182:	463b      	mov	r3, r7
 8002184:	461a      	mov	r2, r3
 8002186:	4907      	ldr	r1, [pc, #28]	; (80021a4 <Sensor_Data+0xbc>)
 8002188:	4808      	ldr	r0, [pc, #32]	; (80021ac <Sensor_Data+0xc4>)
 800218a:	f005 f9a9 	bl	80074e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <Sensor_Data+0xb0>
		err = CAN2_MSG_ERR;
 8002194:	2303      	movs	r3, #3
 8002196:	71fb      	strb	r3, [r7, #7]
	}
	return err;
 8002198:	79fb      	ldrb	r3, [r7, #7]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000158 	.word	0x20000158
 80021a8:	01000101 	.word	0x01000101
 80021ac:	200004a0 	.word	0x200004a0
 80021b0:	01000201 	.word	0x01000201
 80021b4:	01000301 	.word	0x01000301
 80021b8:	20000c68 	.word	0x20000c68
 80021bc:	01000401 	.word	0x01000401

080021c0 <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Master, RxData_Master) != HAL_OK){
 80021ca:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 80021cc:	4a35      	ldr	r2, [pc, #212]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80021ce:	2140      	movs	r1, #64	; 0x40
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f005 f9c9 	bl	8007568 <HAL_FDCAN_GetRxMessage>
		//Error_Handler();
	}
	if((RxHeader_Master.Identifier & 0x000000FF) == 0x00){
 80021d6:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d147      	bne.n	8002270 <HAL_FDCAN_RxFifo0Callback+0xb0>
		if(RxHeader_Master.Identifier == 0x00001000){
 80021e0:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e8:	d102      	bne.n	80021f0 <HAL_FDCAN_RxFifo0Callback+0x30>
			//init
			Curr_State = INIT;
 80021ea:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001100){
 80021f0:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 80021f8:	d102      	bne.n	8002200 <HAL_FDCAN_RxFifo0Callback+0x40>
			//Fault
			Curr_State = FAULT;
 80021fa:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001200){
 8002200:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8002208:	d102      	bne.n	8002210 <HAL_FDCAN_RxFifo0Callback+0x50>
			//safe to approach
			Curr_State = SAFE_TO_APPROACH;
 800220a:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800220c:	2202      	movs	r2, #2
 800220e:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001300){
 8002210:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 8002218:	d102      	bne.n	8002220 <HAL_FDCAN_RxFifo0Callback+0x60>
			//coast
			Curr_State = COAST;
 800221a:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800221c:	2205      	movs	r2, #5
 800221e:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001400){
 8002220:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002228:	d102      	bne.n	8002230 <HAL_FDCAN_RxFifo0Callback+0x70>
			//brake
			Curr_State = BRAKE;
 800222a:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800222c:	2206      	movs	r2, #6
 800222e:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001500){
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f5b3 5fa8 	cmp.w	r3, #5376	; 0x1500
 8002238:	d102      	bne.n	8002240 <HAL_FDCAN_RxFifo0Callback+0x80>
			//crawl
			Curr_State = CRAWL;
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800223c:	2207      	movs	r2, #7
 800223e:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001600){
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8002248:	d102      	bne.n	8002250 <HAL_FDCAN_RxFifo0Callback+0x90>
			//track
			Curr_State = TRACK;
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800224c:	2208      	movs	r2, #8
 800224e:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x0000FF00){
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8002258:	d102      	bne.n	8002260 <HAL_FDCAN_RxFifo0Callback+0xa0>
			//launch
			Curr_State = LAUNCH;
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800225c:	2204      	movs	r2, #4
 800225e:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001700){
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f5b3 5fb8 	cmp.w	r3, #5888	; 0x1700
 8002268:	d102      	bne.n	8002270 <HAL_FDCAN_RxFifo0Callback+0xb0>
			//ready to launch
			Curr_State = READY;
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800226c:	2203      	movs	r2, #3
 800226e:	701a      	strb	r2, [r3, #0]
		}
	}
	if((RxHeader_Master.Identifier & 0x0000FFFF) == (0x0000FF00 | FOLLOWER_ID)){
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	f64f 7201 	movw	r2, #65281	; 0xff01
 800227a:	4293      	cmp	r3, r2
 800227c:	d101      	bne.n	8002282 <HAL_FDCAN_RxFifo0Callback+0xc2>
		Sensor_Data();
 800227e:	f7ff ff33 	bl	80020e8 <Sensor_Data>

	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8002282:	2200      	movs	r2, #0
 8002284:	2101      	movs	r1, #1
 8002286:	4809      	ldr	r0, [pc, #36]	; (80022ac <HAL_FDCAN_RxFifo0Callback+0xec>)
 8002288:	f005 fa76 	bl	8007778 <HAL_FDCAN_ActivateNotification>
			//fault
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 800228c:	2200      	movs	r2, #0
 800228e:	2101      	movs	r1, #1
 8002290:	4807      	ldr	r0, [pc, #28]	; (80022b0 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8002292:	f005 fa71 	bl	8007778 <HAL_FDCAN_ActivateNotification>
			//fault
	}


}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000258 	.word	0x20000258
 80022a4:	200001a0 	.word	0x200001a0
 80022a8:	20000c66 	.word	0x20000c66
 80022ac:	2000043c 	.word	0x2000043c
 80022b0:	200004a0 	.word	0x200004a0

080022b4 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader_Pod, RxData_Pod) != HAL_OK){
 80022be:	4b45      	ldr	r3, [pc, #276]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022c0:	4a45      	ldr	r2, [pc, #276]	; (80023d8 <HAL_FDCAN_RxFifo1Callback+0x124>)
 80022c2:	2141      	movs	r1, #65	; 0x41
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f005 f94f 	bl	8007568 <HAL_FDCAN_GetRxMessage>
		//Error_Handler();
	}
// HE NE HU - HV LV IS1 ISO
	if(RxHeader_Pod.Identifier == IMD_ID){
 80022ca:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <HAL_FDCAN_RxFifo1Callback+0x124>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a43      	ldr	r2, [pc, #268]	; (80023dc <HAL_FDCAN_RxFifo1Callback+0x128>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d121      	bne.n	8002318 <HAL_FDCAN_RxFifo1Callback+0x64>
		if((RxData_Pod[1] & 0x40) == 0x40){
 80022d4:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022d6:	785b      	ldrb	r3, [r3, #1]
 80022d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <HAL_FDCAN_RxFifo1Callback+0x64>
			if((RxData_Pod[1] & 0x03) == 0b10){
 80022e0:	4b3c      	ldr	r3, [pc, #240]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022e2:	785b      	ldrb	r3, [r3, #1]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d105      	bne.n	80022f8 <HAL_FDCAN_RxFifo1Callback+0x44>
				ISO_STATE = 0xF0; //Warning set LED to yellow
 80022ec:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 80022ee:	22f0      	movs	r2, #240	; 0xf0
 80022f0:	701a      	strb	r2, [r3, #0]
				IMD_Req_Isolation();
 80022f2:	f7ff fed5 	bl	80020a0 <IMD_Req_Isolation>
 80022f6:	e00f      	b.n	8002318 <HAL_FDCAN_RxFifo1Callback+0x64>
			}else if((RxData_Pod[1] & 0x03) == 0b11){
 80022f8:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022fa:	785b      	ldrb	r3, [r3, #1]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b03      	cmp	r3, #3
 8002302:	d106      	bne.n	8002312 <HAL_FDCAN_RxFifo1Callback+0x5e>
				ISO_STATE = 0xFF; //fault set LED to Red and full estop
 8002304:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 8002306:	22ff      	movs	r2, #255	; 0xff
 8002308:	701a      	strb	r2, [r3, #0]
				Curr_State = FAULT;
 800230a:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_FDCAN_RxFifo1Callback+0x130>)
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	e002      	b.n	8002318 <HAL_FDCAN_RxFifo1Callback+0x64>
			}else{
				ISO_STATE = 0x00; //all good
 8002312:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
			}
		}
	}else{
		//fault
	}
	if((RxHeader_Pod.Identifier & 0x000000FF) == BMS_ID){
 8002318:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <HAL_FDCAN_RxFifo1Callback+0x124>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b99      	cmp	r3, #153	; 0x99
 8002320:	d14e      	bne.n	80023c0 <HAL_FDCAN_RxFifo1Callback+0x10c>
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x0900){
 8002322:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <HAL_FDCAN_RxFifo1Callback+0x124>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800232a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800232e:	d11c      	bne.n	800236a <HAL_FDCAN_RxFifo1Callback+0xb6>
			//status 1
			M_RPM = (RxData_Pod[7]<<24) | (RxData_Pod[6]<<16) | (RxData_Pod[5]<<8) | (RxData_Pod[4]);
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002332:	79db      	ldrb	r3, [r3, #7]
 8002334:	061a      	lsls	r2, r3, #24
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002338:	799b      	ldrb	r3, [r3, #6]
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	431a      	orrs	r2, r3
 800233e:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002340:	795b      	ldrb	r3, [r3, #5]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	4313      	orrs	r3, r2
 8002346:	4a23      	ldr	r2, [pc, #140]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002348:	7912      	ldrb	r2, [r2, #4]
 800234a:	4313      	orrs	r3, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_FDCAN_RxFifo1Callback+0x134>)
 8002350:	601a      	str	r2, [r3, #0]
			M_Current = (RxData_Pod[3]<<8) | (RxData_Pod[2]);
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002354:	78db      	ldrb	r3, [r3, #3]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	b21a      	sxth	r2, r3
 800235a:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800235c:	789b      	ldrb	r3, [r3, #2]
 800235e:	b21b      	sxth	r3, r3
 8002360:	4313      	orrs	r3, r2
 8002362:	b21b      	sxth	r3, r3
 8002364:	b29a      	uxth	r2, r3
 8002366:	4b21      	ldr	r3, [pc, #132]	; (80023ec <HAL_FDCAN_RxFifo1Callback+0x138>)
 8002368:	801a      	strh	r2, [r3, #0]
			//status 2
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x0F00){
			//status 3
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x1000){
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_FDCAN_RxFifo1Callback+0x124>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002376:	d123      	bne.n	80023c0 <HAL_FDCAN_RxFifo1Callback+0x10c>
			//status 4
			M_Temp_fet = (RxData_Pod[7]<<8) | (RxData_Pod[6]);
 8002378:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800237a:	79db      	ldrb	r3, [r3, #7]
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	b21a      	sxth	r2, r3
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002382:	799b      	ldrb	r3, [r3, #6]
 8002384:	b21b      	sxth	r3, r3
 8002386:	4313      	orrs	r3, r2
 8002388:	b21b      	sxth	r3, r3
 800238a:	b29a      	uxth	r2, r3
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_FDCAN_RxFifo1Callback+0x13c>)
 800238e:	801a      	strh	r2, [r3, #0]
			M_Temp_motor = (RxData_Pod[5]<<8) | (RxData_Pod[4]);
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002392:	795b      	ldrb	r3, [r3, #5]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	b21a      	sxth	r2, r3
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800239a:	791b      	ldrb	r3, [r3, #4]
 800239c:	b21b      	sxth	r3, r3
 800239e:	4313      	orrs	r3, r2
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_FDCAN_RxFifo1Callback+0x140>)
 80023a6:	801a      	strh	r2, [r3, #0]
			M_Current_in = (RxData_Pod[3]<<8) | (RxData_Pod[2]);
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80023aa:	78db      	ldrb	r3, [r3, #3]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	b21a      	sxth	r2, r3
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80023b2:	789b      	ldrb	r3, [r3, #2]
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_FDCAN_RxFifo1Callback+0x144>)
 80023be:	801a      	strh	r2, [r3, #0]
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x1B00){
			//status 5
		}
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK){
 80023c0:	2200      	movs	r2, #0
 80023c2:	2108      	movs	r1, #8
 80023c4:	480d      	ldr	r0, [pc, #52]	; (80023fc <HAL_FDCAN_RxFifo1Callback+0x148>)
 80023c6:	f005 f9d7 	bl	8007778 <HAL_FDCAN_ActivateNotification>
		//fault
	}

}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000250 	.word	0x20000250
 80023d8:	200001c8 	.word	0x200001c8
 80023dc:	0a100101 	.word	0x0a100101
 80023e0:	20000c65 	.word	0x20000c65
 80023e4:	20000c66 	.word	0x20000c66
 80023e8:	20000298 	.word	0x20000298
 80023ec:	2000029c 	.word	0x2000029c
 80023f0:	2000029e 	.word	0x2000029e
 80023f4:	200002a0 	.word	0x200002a0
 80023f8:	200002a2 	.word	0x200002a2
 80023fc:	20000504 	.word	0x20000504

08002400 <a_mcp9600_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mcp9600_iic_read(mcp9600_handle_t *handle, uint8_t reg, uint8_t *data, uint16_t len)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	461a      	mov	r2, r3
 800240c:	460b      	mov	r3, r1
 800240e:	72fb      	strb	r3, [r7, #11]
 8002410:	4613      	mov	r3, r2
 8002412:	813b      	strh	r3, [r7, #8]
    uint8_t buf[1];
    
    buf[0] = reg;                                                               /* set reg */
 8002414:	7afb      	ldrb	r3, [r7, #11]
 8002416:	753b      	strb	r3, [r7, #20]
    if (handle->iic_write_cmd(handle->iic_addr, (uint8_t *)buf, 1) != 0)        /* write command */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	7e50      	ldrb	r0, [r2, #25]
 8002420:	f107 0114 	add.w	r1, r7, #20
 8002424:	2201      	movs	r2, #1
 8002426:	4798      	blx	r3
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <a_mcp9600_iic_read+0x32>
    {   
        return 1;                                                               /* return error */
 800242e:	2301      	movs	r3, #1
 8002430:	e00c      	b.n	800244c <a_mcp9600_iic_read+0x4c>
    }
    if (handle->iic_read_cmd(handle->iic_addr, data, len) != 0)                 /* read data */
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	7e50      	ldrb	r0, [r2, #25]
 800243a:	893a      	ldrh	r2, [r7, #8]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4798      	blx	r3
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <a_mcp9600_iic_read+0x4a>
    {   
        return 1;                                                               /* return error */
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <a_mcp9600_iic_read+0x4c>
    }
    
    return 0;                                                                   /* success return 0 */
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <a_mcp9600_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mcp9600_iic_write(mcp9600_handle_t *handle, uint8_t reg, uint8_t *data, uint16_t len)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	461a      	mov	r2, r3
 8002460:	460b      	mov	r3, r1
 8002462:	72fb      	strb	r3, [r7, #11]
 8002464:	4613      	mov	r3, r2
 8002466:	813b      	strh	r3, [r7, #8]
    uint8_t buf[16];
    uint16_t i;
        
    if ((len + 1) > 16)                                                             /* check length */
 8002468:	893b      	ldrh	r3, [r7, #8]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	d901      	bls.n	8002472 <a_mcp9600_iic_write+0x1e>
    {
        return 1;                                                                   /* return error */
 800246e:	2301      	movs	r3, #1
 8002470:	e025      	b.n	80024be <a_mcp9600_iic_write+0x6a>
    }
    buf[0] = reg;                                                                   /* set MSB of reg */
 8002472:	7afb      	ldrb	r3, [r7, #11]
 8002474:	753b      	strb	r3, [r7, #20]
    for (i = 0; i < len; i++)
 8002476:	2300      	movs	r3, #0
 8002478:	84fb      	strh	r3, [r7, #38]	; 0x26
 800247a:	e00c      	b.n	8002496 <a_mcp9600_iic_write+0x42>
    {
        buf[1 + i] = data[i];                                                       /* copy write data */
 800247c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	441a      	add	r2, r3
 8002482:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002484:	3301      	adds	r3, #1
 8002486:	7812      	ldrb	r2, [r2, #0]
 8002488:	3328      	adds	r3, #40	; 0x28
 800248a:	443b      	add	r3, r7
 800248c:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < len; i++)
 8002490:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002492:	3301      	adds	r3, #1
 8002494:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002496:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002498:	893b      	ldrh	r3, [r7, #8]
 800249a:	429a      	cmp	r2, r3
 800249c:	d3ee      	bcc.n	800247c <a_mcp9600_iic_write+0x28>
    }
    if (handle->iic_write_cmd(handle->iic_addr, (uint8_t *)buf, len + 1) != 0)      /* write iic command */
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	7e50      	ldrb	r0, [r2, #25]
 80024a6:	893a      	ldrh	r2, [r7, #8]
 80024a8:	3201      	adds	r2, #1
 80024aa:	b292      	uxth	r2, r2
 80024ac:	f107 0114 	add.w	r1, r7, #20
 80024b0:	4798      	blx	r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <a_mcp9600_iic_write+0x68>
    {   
        return 1;                                                                   /* return error */
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <a_mcp9600_iic_write+0x6a>
    }
    
    return 0;                                                                       /* success return 0 */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3728      	adds	r7, #40	; 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <mcp9600_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mcp9600_set_addr_pin(mcp9600_handle_t *handle, mcp9600_address_t addr_pin)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <mcp9600_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 80024d8:	2302      	movs	r3, #2
 80024da:	e003      	b.n	80024e4 <mcp9600_set_addr_pin+0x1e>
    }
    
    handle->iic_addr = (uint8_t)addr_pin;        /* set pin */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	765a      	strb	r2, [r3, #25]
    
    return 0;                                    /* success return 0 */
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <mcp9600_init>:
 *            - 3 linked functions is NULL
 *            - 4 id is invalid
 * @note      none
 */
uint8_t mcp9600_init(mcp9600_handle_t *handle)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                             /* check handle */
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <mcp9600_init+0x12>
    {
        return 2;                                                                   /* return error */
 80024fe:	2302      	movs	r3, #2
 8002500:	e06f      	b.n	80025e2 <mcp9600_init+0xf2>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <mcp9600_init+0x1e>
    {
        return 3;                                                                   /* return error */
 800250a:	2303      	movs	r3, #3
 800250c:	e069      	b.n	80025e2 <mcp9600_init+0xf2>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <mcp9600_init+0x32>
    {
        handle->debug_print("mcp9600: iic_init is null.\n");                        /* iic_init is null */
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	4834      	ldr	r0, [pc, #208]	; (80025ec <mcp9600_init+0xfc>)
 800251c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800251e:	2303      	movs	r3, #3
 8002520:	e05f      	b.n	80025e2 <mcp9600_init+0xf2>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <mcp9600_init+0x46>
    {
        handle->debug_print("mcp9600: iic_deinit is null.\n");                      /* iic_deinit is null */
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	4830      	ldr	r0, [pc, #192]	; (80025f0 <mcp9600_init+0x100>)
 8002530:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8002532:	2303      	movs	r3, #3
 8002534:	e055      	b.n	80025e2 <mcp9600_init+0xf2>
    }
    if (handle->iic_read_cmd == NULL)                                               /* check iic_read_cmd */
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d105      	bne.n	800254a <mcp9600_init+0x5a>
    {
        handle->debug_print("mcp9600: iic_read_cmd is null.\n");                    /* iic_read_cmd is null */
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	482c      	ldr	r0, [pc, #176]	; (80025f4 <mcp9600_init+0x104>)
 8002544:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8002546:	2303      	movs	r3, #3
 8002548:	e04b      	b.n	80025e2 <mcp9600_init+0xf2>
    }
    if (handle->iic_write_cmd == NULL)                                              /* check iic_write_cmd */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d105      	bne.n	800255e <mcp9600_init+0x6e>
    {
        handle->debug_print("mcp9600: iic_write_cmd is null.\n");                   /* iic_write_cmd is null */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4828      	ldr	r0, [pc, #160]	; (80025f8 <mcp9600_init+0x108>)
 8002558:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800255a:	2303      	movs	r3, #3
 800255c:	e041      	b.n	80025e2 <mcp9600_init+0xf2>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d105      	bne.n	8002572 <mcp9600_init+0x82>
    {
        handle->debug_print("mcp9600: delay_ms is null.\n");                        /* delay_ms is null */
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	4824      	ldr	r0, [pc, #144]	; (80025fc <mcp9600_init+0x10c>)
 800256c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800256e:	2303      	movs	r3, #3
 8002570:	e037      	b.n	80025e2 <mcp9600_init+0xf2>
    }
    
    if (handle->iic_init() != 0)                                                    /* iic init */
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4798      	blx	r3
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <mcp9600_init+0x9a>
    {
        handle->debug_print("mcp9600: iic init failed.\n");                         /* iic init failed */
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	481f      	ldr	r0, [pc, #124]	; (8002600 <mcp9600_init+0x110>)
 8002584:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002586:	2301      	movs	r3, #1
 8002588:	e02b      	b.n	80025e2 <mcp9600_init+0xf2>
    }
    memset(buf, 0, sizeof(uint8_t) * 2);                                            /* clear the buffer */
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	2202      	movs	r2, #2
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f00b fc7e 	bl	800de94 <memset>
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_ID_REVISON,
 8002598:	f107 020c 	add.w	r2, r7, #12
 800259c:	2302      	movs	r3, #2
 800259e:	2120      	movs	r1, #32
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff2d 	bl	8002400 <a_mcp9600_iic_read>
 80025a6:	4603      	mov	r3, r0
 80025a8:	73fb      	strb	r3, [r7, #15]
                            (uint8_t *)buf, 2);                                     /* read device id */
    if (res != 0)                                                                   /* check result */
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <mcp9600_init+0xd2>
    {
        handle->debug_print("mcp9600: read device id failed.\n");                   /* read device id failed */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	4813      	ldr	r0, [pc, #76]	; (8002604 <mcp9600_init+0x114>)
 80025b6:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4798      	blx	r3
        
        return 1;                                                                   /* return error */
 80025be:	2301      	movs	r3, #1
 80025c0:	e00f      	b.n	80025e2 <mcp9600_init+0xf2>
    }
    if (buf[0] != 0x40)                                                             /* check id */
 80025c2:	7b3b      	ldrb	r3, [r7, #12]
 80025c4:	2b40      	cmp	r3, #64	; 0x40
 80025c6:	d008      	beq.n	80025da <mcp9600_init+0xea>
    {
        handle->debug_print("mcp9600: id is invalid.\n");                           /* id is invalid */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	480e      	ldr	r0, [pc, #56]	; (8002608 <mcp9600_init+0x118>)
 80025ce:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4798      	blx	r3
        
        return 4;                                                                   /* return error */
 80025d6:	2304      	movs	r3, #4
 80025d8:	e003      	b.n	80025e2 <mcp9600_init+0xf2>
    }
    handle->inited = 1;                                                             /* set inited */
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	761a      	strb	r2, [r3, #24]
    
    return 0;                                                                       /* success return 0 */
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	0800e470 	.word	0x0800e470
 80025f0:	0800e48c 	.word	0x0800e48c
 80025f4:	0800e4ac 	.word	0x0800e4ac
 80025f8:	0800e4cc 	.word	0x0800e4cc
 80025fc:	0800e4f0 	.word	0x0800e4f0
 8002600:	0800e50c 	.word	0x0800e50c
 8002604:	0800e528 	.word	0x0800e528
 8002608:	0800e54c 	.word	0x0800e54c

0800260c <mcp9600_deinit>:
 *            - 3 handle is not initialized
 *            - 4 power down failed
 * @note      none
 */
uint8_t mcp9600_deinit(mcp9600_handle_t *handle)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <mcp9600_deinit+0x12>
    {
        return 2;                                                                                 /* return error */
 800261a:	2302      	movs	r3, #2
 800261c:	e045      	b.n	80026aa <mcp9600_deinit+0x9e>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7e1b      	ldrb	r3, [r3, #24]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d001      	beq.n	800262a <mcp9600_deinit+0x1e>
    {
        return 3;                                                                                 /* return error */
 8002626:	2303      	movs	r3, #3
 8002628:	e03f      	b.n	80026aa <mcp9600_deinit+0x9e>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 800262a:	f107 020e 	add.w	r2, r7, #14
 800262e:	2301      	movs	r3, #1
 8002630:	2106      	movs	r1, #6
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fee4 	bl	8002400 <a_mcp9600_iic_read>
 8002638:	4603      	mov	r3, r0
 800263a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <mcp9600_deinit+0x42>
    {
        handle->debug_print("mcp9600: power down failed.\n");                                     /* power down failed */
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	481b      	ldr	r0, [pc, #108]	; (80026b4 <mcp9600_deinit+0xa8>)
 8002648:	4798      	blx	r3
       
        return 4;                                                                                 /* return error */
 800264a:	2304      	movs	r3, #4
 800264c:	e02d      	b.n	80026aa <mcp9600_deinit+0x9e>
    }
    
    reg &= ~(3 << 0);                                                                             /* clear configure */
 800264e:	7bbb      	ldrb	r3, [r7, #14]
 8002650:	f023 0303 	bic.w	r3, r3, #3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	73bb      	strb	r3, [r7, #14]
    reg |= 0x1 << 0;                                                                              /* set configure */
 8002658:	7bbb      	ldrb	r3, [r7, #14]
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 8002662:	f107 020e 	add.w	r2, r7, #14
 8002666:	2301      	movs	r3, #1
 8002668:	2106      	movs	r1, #6
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff fef2 	bl	8002454 <a_mcp9600_iic_write>
 8002670:	4603      	mov	r3, r0
 8002672:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <mcp9600_deinit+0x7a>
    {
        handle->debug_print("mcp9600: power down failed.\n");                                     /* power down failed */
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	480d      	ldr	r0, [pc, #52]	; (80026b4 <mcp9600_deinit+0xa8>)
 8002680:	4798      	blx	r3
       
        return 4;                                                                                 /* return error */
 8002682:	2304      	movs	r3, #4
 8002684:	e011      	b.n	80026aa <mcp9600_deinit+0x9e>
    }
    res = handle->iic_deinit();                                                                   /* iic deinit */
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4798      	blx	r3
 800268c:	4603      	mov	r3, r0
 800268e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <mcp9600_deinit+0x96>
    {
        handle->debug_print("mcp9600: iic deinit failed.\n");                                     /* iic deinit failed */
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	4807      	ldr	r0, [pc, #28]	; (80026b8 <mcp9600_deinit+0xac>)
 800269c:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 800269e:	2301      	movs	r3, #1
 80026a0:	e003      	b.n	80026aa <mcp9600_deinit+0x9e>
    }
    handle->inited = 0;                                                                           /* clear flag */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	761a      	strb	r2, [r3, #24]
    
    return 0;                                                                                     /* success return 0 */
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	0800e568 	.word	0x0800e568
 80026b8:	0800e588 	.word	0x0800e588

080026bc <mcp9600_single_read>:
 *             - 4 read timeout
 * @note       none
 */
uint8_t mcp9600_single_read(mcp9600_handle_t *handle, int16_t *hot_raw, float *hot_s,
                            int16_t *delta_raw, float *delta_s, int16_t *cold_raw, float *cold_s)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t reg;
    uint16_t timeout;
    uint8_t buf[2];
    
    if (handle == NULL)                                                                                 /* check handle */
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <mcp9600_single_read+0x18>
    {
        return 2;                                                                                       /* return error */
 80026d0:	2302      	movs	r3, #2
 80026d2:	e135      	b.n	8002940 <mcp9600_single_read+0x284>
    }
    if (handle->inited != 1)                                                                            /* check handle initialization */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	7e1b      	ldrb	r3, [r3, #24]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d001      	beq.n	80026e0 <mcp9600_single_read+0x24>
    {
        return 3;                                                                                       /* return error */
 80026dc:	2303      	movs	r3, #3
 80026de:	e12f      	b.n	8002940 <mcp9600_single_read+0x284>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_STATUS, (uint8_t *)&reg, 1);                           /* read config */
 80026e0:	f107 0214 	add.w	r2, r7, #20
 80026e4:	2301      	movs	r3, #1
 80026e6:	2104      	movs	r1, #4
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7ff fe89 	bl	8002400 <a_mcp9600_iic_read>
 80026ee:	4603      	mov	r3, r0
 80026f0:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 80026f2:	7d7b      	ldrb	r3, [r7, #21]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <mcp9600_single_read+0x48>
    {
        handle->debug_print("mcp9600: read status failed.\n");                                          /* read status failed */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	4892      	ldr	r0, [pc, #584]	; (8002948 <mcp9600_single_read+0x28c>)
 80026fe:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 8002700:	2301      	movs	r3, #1
 8002702:	e11d      	b.n	8002940 <mcp9600_single_read+0x284>
    }
    reg &= ~(1 << 7);                                                                                   /* clear flag */
 8002704:	7d3b      	ldrb	r3, [r7, #20]
 8002706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800270a:	b2db      	uxtb	r3, r3
 800270c:	753b      	strb	r3, [r7, #20]
    reg &= ~(1 << 6);                                                                                   /* clear flag */
 800270e:	7d3b      	ldrb	r3, [r7, #20]
 8002710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002714:	b2db      	uxtb	r3, r3
 8002716:	753b      	strb	r3, [r7, #20]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_STATUS, (uint8_t *)&reg, 1);                          /* write config */
 8002718:	f107 0214 	add.w	r2, r7, #20
 800271c:	2301      	movs	r3, #1
 800271e:	2104      	movs	r1, #4
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7ff fe97 	bl	8002454 <a_mcp9600_iic_write>
 8002726:	4603      	mov	r3, r0
 8002728:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 800272a:	7d7b      	ldrb	r3, [r7, #21]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <mcp9600_single_read+0x80>
    {
        handle->debug_print("mcp9600: write status failed.\n");                                         /* write status failed */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	4885      	ldr	r0, [pc, #532]	; (800294c <mcp9600_single_read+0x290>)
 8002736:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 8002738:	2301      	movs	r3, #1
 800273a:	e101      	b.n	8002940 <mcp9600_single_read+0x284>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);             /* read config */
 800273c:	f107 0214 	add.w	r2, r7, #20
 8002740:	2301      	movs	r3, #1
 8002742:	2106      	movs	r1, #6
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7ff fe5b 	bl	8002400 <a_mcp9600_iic_read>
 800274a:	4603      	mov	r3, r0
 800274c:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 800274e:	7d7b      	ldrb	r3, [r7, #21]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <mcp9600_single_read+0xa4>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                            /* read device configuration failed */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	487d      	ldr	r0, [pc, #500]	; (8002950 <mcp9600_single_read+0x294>)
 800275a:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 800275c:	2301      	movs	r3, #1
 800275e:	e0ef      	b.n	8002940 <mcp9600_single_read+0x284>
    }
    reg &= ~(3 << 0);                                                                                   /* clear configure */
 8002760:	7d3b      	ldrb	r3, [r7, #20]
 8002762:	f023 0303 	bic.w	r3, r3, #3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	753b      	strb	r3, [r7, #20]
    reg |= 0x02 << 0;                                                                                   /* set configure */
 800276a:	7d3b      	ldrb	r3, [r7, #20]
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	b2db      	uxtb	r3, r3
 8002772:	753b      	strb	r3, [r7, #20]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);            /* write config */
 8002774:	f107 0214 	add.w	r2, r7, #20
 8002778:	2301      	movs	r3, #1
 800277a:	2106      	movs	r1, #6
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff fe69 	bl	8002454 <a_mcp9600_iic_write>
 8002782:	4603      	mov	r3, r0
 8002784:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 8002786:	7d7b      	ldrb	r3, [r7, #21]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <mcp9600_single_read+0xdc>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                           /* write device configuration failed */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	4870      	ldr	r0, [pc, #448]	; (8002954 <mcp9600_single_read+0x298>)
 8002792:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 8002794:	2301      	movs	r3, #1
 8002796:	e0d3      	b.n	8002940 <mcp9600_single_read+0x284>
    }
    timeout = 10000;                                                                                    /* set timeout 10000 ms */
 8002798:	f242 7310 	movw	r3, #10000	; 0x2710
 800279c:	82fb      	strh	r3, [r7, #22]
    while (timeout != 0)                                                                                /* wait timeout */
 800279e:	e01d      	b.n	80027dc <mcp9600_single_read+0x120>
    {
        res = a_mcp9600_iic_read(handle, MCP9600_REG_STATUS, (uint8_t *)&reg, 1);                       /* read config */
 80027a0:	f107 0214 	add.w	r2, r7, #20
 80027a4:	2301      	movs	r3, #1
 80027a6:	2104      	movs	r1, #4
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff fe29 	bl	8002400 <a_mcp9600_iic_read>
 80027ae:	4603      	mov	r3, r0
 80027b0:	757b      	strb	r3, [r7, #21]
        if (res != 0)                                                                                   /* check result */
 80027b2:	7d7b      	ldrb	r3, [r7, #21]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <mcp9600_single_read+0x108>
        {
            handle->debug_print("mcp9600: read status failed.\n");                                      /* read status failed */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	4862      	ldr	r0, [pc, #392]	; (8002948 <mcp9600_single_read+0x28c>)
 80027be:	4798      	blx	r3
           
            return 1;                                                                                   /* return error */
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0bd      	b.n	8002940 <mcp9600_single_read+0x284>
        }
        if ((reg & 0xC0) == 0xC0)                                                                       /* check flag */
 80027c4:	7d3b      	ldrb	r3, [r7, #20]
 80027c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80027ca:	2bc0      	cmp	r3, #192	; 0xc0
 80027cc:	d00a      	beq.n	80027e4 <mcp9600_single_read+0x128>
        {
            break;                                                                                      /* break */
        }
        handle->delay_ms(1);                                                                            /* delay 1 ms */
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2001      	movs	r0, #1
 80027d4:	4798      	blx	r3
        timeout--;                                                                                      /* timeout-- */
 80027d6:	8afb      	ldrh	r3, [r7, #22]
 80027d8:	3b01      	subs	r3, #1
 80027da:	82fb      	strh	r3, [r7, #22]
    while (timeout != 0)                                                                                /* wait timeout */
 80027dc:	8afb      	ldrh	r3, [r7, #22]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1de      	bne.n	80027a0 <mcp9600_single_read+0xe4>
 80027e2:	e000      	b.n	80027e6 <mcp9600_single_read+0x12a>
            break;                                                                                      /* break */
 80027e4:	bf00      	nop
    }
    if (timeout == 0)                                                                                   /* check timeout */
 80027e6:	8afb      	ldrh	r3, [r7, #22]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <mcp9600_single_read+0x13c>
    {
        handle->debug_print("mcp9600: read timeout.\n");                                                /* read timeout failed */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	4859      	ldr	r0, [pc, #356]	; (8002958 <mcp9600_single_read+0x29c>)
 80027f2:	4798      	blx	r3
       
        return 4;                                                                                       /* return error */
 80027f4:	2304      	movs	r3, #4
 80027f6:	e0a3      	b.n	8002940 <mcp9600_single_read+0x284>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_THERMOCOUPLE_HOT_JUNCTION, (uint8_t *)buf, 2);         /* read config */
 80027f8:	f107 0210 	add.w	r2, r7, #16
 80027fc:	2302      	movs	r3, #2
 80027fe:	2100      	movs	r1, #0
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7ff fdfd 	bl	8002400 <a_mcp9600_iic_read>
 8002806:	4603      	mov	r3, r0
 8002808:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 800280a:	7d7b      	ldrb	r3, [r7, #21]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <mcp9600_single_read+0x160>
    {
        handle->debug_print("mcp9600: read hot junction temperature failed.\n");                        /* read hot junction temperature failed */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	4851      	ldr	r0, [pc, #324]	; (800295c <mcp9600_single_read+0x2a0>)
 8002816:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 8002818:	2301      	movs	r3, #1
 800281a:	e091      	b.n	8002940 <mcp9600_single_read+0x284>
    }
    *hot_raw = (int16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                             /* get raw data */
 800281c:	7c3b      	ldrb	r3, [r7, #16]
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	b21a      	sxth	r2, r3
 8002822:	7c7b      	ldrb	r3, [r7, #17]
 8002824:	b21b      	sxth	r3, r3
 8002826:	4313      	orrs	r3, r2
 8002828:	b21a      	sxth	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	801a      	strh	r2, [r3, #0]
    *hot_s = (float)(*hot_raw) / 16.0f;                                                                 /* convert the data */
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800283c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	edc3 7a00 	vstr	s15, [r3]
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_JUNCTIONS_TEMPERATURE_DELTA, (uint8_t *)buf, 2);       /* read config */
 800284a:	f107 0210 	add.w	r2, r7, #16
 800284e:	2302      	movs	r3, #2
 8002850:	2101      	movs	r1, #1
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f7ff fdd4 	bl	8002400 <a_mcp9600_iic_read>
 8002858:	4603      	mov	r3, r0
 800285a:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 800285c:	7d7b      	ldrb	r3, [r7, #21]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <mcp9600_single_read+0x1b2>
    {
        handle->debug_print("mcp9600: read junction thermocouple delta failed.\n");                     /* junction thermocouple delta failed */
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	483e      	ldr	r0, [pc, #248]	; (8002960 <mcp9600_single_read+0x2a4>)
 8002868:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 800286a:	2301      	movs	r3, #1
 800286c:	e068      	b.n	8002940 <mcp9600_single_read+0x284>
    }
    *delta_raw = (int16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                           /* get raw data */
 800286e:	7c3b      	ldrb	r3, [r7, #16]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	b21a      	sxth	r2, r3
 8002874:	7c7b      	ldrb	r3, [r7, #17]
 8002876:	b21b      	sxth	r3, r3
 8002878:	4313      	orrs	r3, r2
 800287a:	b21a      	sxth	r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	801a      	strh	r2, [r3, #0]
    *delta_s = (float)(*delta_raw) / 16.0f;                                                             /* convert the data */
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800288e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002892:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	edc3 7a00 	vstr	s15, [r3]
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);             /* read config */
 800289c:	f107 0214 	add.w	r2, r7, #20
 80028a0:	2301      	movs	r3, #1
 80028a2:	2106      	movs	r1, #6
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff fdab 	bl	8002400 <a_mcp9600_iic_read>
 80028aa:	4603      	mov	r3, r0
 80028ac:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 80028ae:	7d7b      	ldrb	r3, [r7, #21]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <mcp9600_single_read+0x204>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                            /* read device configuration failed */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	4825      	ldr	r0, [pc, #148]	; (8002950 <mcp9600_single_read+0x294>)
 80028ba:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 80028bc:	2301      	movs	r3, #1
 80028be:	e03f      	b.n	8002940 <mcp9600_single_read+0x284>
    }
    res = a_mcp9600_iic_read(handle, MCP9600_REG_COLD_JUNCTION_TEMPERATURE, (uint8_t *)buf, 2);         /* read config */
 80028c0:	f107 0210 	add.w	r2, r7, #16
 80028c4:	2302      	movs	r3, #2
 80028c6:	2102      	movs	r1, #2
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f7ff fd99 	bl	8002400 <a_mcp9600_iic_read>
 80028ce:	4603      	mov	r3, r0
 80028d0:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 80028d2:	7d7b      	ldrb	r3, [r7, #21]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <mcp9600_single_read+0x228>
    {
        handle->debug_print("mcp9600: read cold junction temperature failed.\n");                       /* read cold junction temperature failed */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	4821      	ldr	r0, [pc, #132]	; (8002964 <mcp9600_single_read+0x2a8>)
 80028de:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 80028e0:	2301      	movs	r3, #1
 80028e2:	e02d      	b.n	8002940 <mcp9600_single_read+0x284>
    }
    *cold_raw = (int16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                            /* get raw data */
 80028e4:	7c3b      	ldrb	r3, [r7, #16]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	b21a      	sxth	r2, r3
 80028ea:	7c7b      	ldrb	r3, [r7, #17]
 80028ec:	b21b      	sxth	r3, r3
 80028ee:	4313      	orrs	r3, r2
 80028f0:	b21a      	sxth	r2, r3
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	801a      	strh	r2, [r3, #0]
    if (((reg >> 7) & 0x01) != 0)                                                                       /* check the config */
 80028f6:	7d3b      	ldrb	r3, [r7, #20]
 80028f8:	09db      	lsrs	r3, r3, #7
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00e      	beq.n	8002922 <mcp9600_single_read+0x266>
    {
        *cold_s = (float)(*cold_raw) / 16.0f;                                                           /* convert the data */
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002912:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	edc3 7a00 	vstr	s15, [r3]
 8002920:	e00d      	b.n	800293e <mcp9600_single_read+0x282>
    }
    else
    {
        *cold_s = (float)(*cold_raw) / 4.0f;                                                            /* convert the data */
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002928:	ee07 3a90 	vmov	s15, r3
 800292c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002930:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	edc3 7a00 	vstr	s15, [r3]
    }
    
    return 0;                                                                                           /* success return 0 */
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	0800e69c 	.word	0x0800e69c
 800294c:	0800e6bc 	.word	0x0800e6bc
 8002950:	0800e5a8 	.word	0x0800e5a8
 8002954:	0800e5d4 	.word	0x0800e5d4
 8002958:	0800e6dc 	.word	0x0800e6dc
 800295c:	0800e604 	.word	0x0800e604
 8002960:	0800e634 	.word	0x0800e634
 8002964:	0800e668 	.word	0x0800e668

08002968 <mcp9600_set_cold_junction_resolution>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_cold_junction_resolution(mcp9600_handle_t *handle, mcp9600_cold_junction_resolution_t resolution)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <mcp9600_set_cold_junction_resolution+0x16>
    {
        return 2;                                                                                 /* return error */
 800297a:	2302      	movs	r3, #2
 800297c:	e038      	b.n	80029f0 <mcp9600_set_cold_junction_resolution+0x88>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7e1b      	ldrb	r3, [r3, #24]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d001      	beq.n	800298a <mcp9600_set_cold_junction_resolution+0x22>
    {
        return 3;                                                                                 /* return error */
 8002986:	2303      	movs	r3, #3
 8002988:	e032      	b.n	80029f0 <mcp9600_set_cold_junction_resolution+0x88>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 800298a:	f107 020e 	add.w	r2, r7, #14
 800298e:	2301      	movs	r3, #1
 8002990:	2106      	movs	r1, #6
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff fd34 	bl	8002400 <a_mcp9600_iic_read>
 8002998:	4603      	mov	r3, r0
 800299a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <mcp9600_set_cold_junction_resolution+0x46>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                      /* read device configuration failed */
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	4814      	ldr	r0, [pc, #80]	; (80029f8 <mcp9600_set_cold_junction_resolution+0x90>)
 80029a8:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 80029aa:	2301      	movs	r3, #1
 80029ac:	e020      	b.n	80029f0 <mcp9600_set_cold_junction_resolution+0x88>
    }
    
    reg &= ~(1 << 7);                                                                             /* clear configure */
 80029ae:	7bbb      	ldrb	r3, [r7, #14]
 80029b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	73bb      	strb	r3, [r7, #14]
    reg |= resolution << 7;                                                                       /* set configure */
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	01db      	lsls	r3, r3, #7
 80029bc:	b25a      	sxtb	r2, r3
 80029be:	7bbb      	ldrb	r3, [r7, #14]
 80029c0:	b25b      	sxtb	r3, r3
 80029c2:	4313      	orrs	r3, r2
 80029c4:	b25b      	sxtb	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 80029ca:	f107 020e 	add.w	r2, r7, #14
 80029ce:	2301      	movs	r3, #1
 80029d0:	2106      	movs	r1, #6
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff fd3e 	bl	8002454 <a_mcp9600_iic_write>
 80029d8:	4603      	mov	r3, r0
 80029da:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <mcp9600_set_cold_junction_resolution+0x86>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                     /* write device configuration failed */
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	4805      	ldr	r0, [pc, #20]	; (80029fc <mcp9600_set_cold_junction_resolution+0x94>)
 80029e8:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <mcp9600_set_cold_junction_resolution+0x88>
    }
    
    return 0;                                                                                     /* success return 0 */
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	0800e5a8 	.word	0x0800e5a8
 80029fc:	0800e5d4 	.word	0x0800e5d4

08002a00 <mcp9600_set_adc_resolution>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_adc_resolution(mcp9600_handle_t *handle, mcp9600_adc_resolution_t resolution)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <mcp9600_set_adc_resolution+0x16>
    {
        return 2;                                                                                 /* return error */
 8002a12:	2302      	movs	r3, #2
 8002a14:	e038      	b.n	8002a88 <mcp9600_set_adc_resolution+0x88>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7e1b      	ldrb	r3, [r3, #24]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d001      	beq.n	8002a22 <mcp9600_set_adc_resolution+0x22>
    {
        return 3;                                                                                 /* return error */
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e032      	b.n	8002a88 <mcp9600_set_adc_resolution+0x88>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 8002a22:	f107 020e 	add.w	r2, r7, #14
 8002a26:	2301      	movs	r3, #1
 8002a28:	2106      	movs	r1, #6
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fce8 	bl	8002400 <a_mcp9600_iic_read>
 8002a30:	4603      	mov	r3, r0
 8002a32:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <mcp9600_set_adc_resolution+0x46>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                      /* read device configuration failed */
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	4814      	ldr	r0, [pc, #80]	; (8002a90 <mcp9600_set_adc_resolution+0x90>)
 8002a40:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002a42:	2301      	movs	r3, #1
 8002a44:	e020      	b.n	8002a88 <mcp9600_set_adc_resolution+0x88>
    }
    
    reg &= ~(3 << 5);                                                                             /* clear configure */
 8002a46:	7bbb      	ldrb	r3, [r7, #14]
 8002a48:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	73bb      	strb	r3, [r7, #14]
    reg |= resolution << 5;                                                                       /* set configure */
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	015b      	lsls	r3, r3, #5
 8002a54:	b25a      	sxtb	r2, r3
 8002a56:	7bbb      	ldrb	r3, [r7, #14]
 8002a58:	b25b      	sxtb	r3, r3
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 8002a62:	f107 020e 	add.w	r2, r7, #14
 8002a66:	2301      	movs	r3, #1
 8002a68:	2106      	movs	r1, #6
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff fcf2 	bl	8002454 <a_mcp9600_iic_write>
 8002a70:	4603      	mov	r3, r0
 8002a72:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <mcp9600_set_adc_resolution+0x86>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                     /* write device configuration failed */
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	4805      	ldr	r0, [pc, #20]	; (8002a94 <mcp9600_set_adc_resolution+0x94>)
 8002a80:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <mcp9600_set_adc_resolution+0x88>
    }
    
    return 0;                                                                                     /* success return 0 */
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	0800e5a8 	.word	0x0800e5a8
 8002a94:	0800e5d4 	.word	0x0800e5d4

08002a98 <mcp9600_set_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_mode(mcp9600_handle_t *handle, mcp9600_mode_t mode)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <mcp9600_set_mode+0x16>
    {
        return 2;                                                                                 /* return error */
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e034      	b.n	8002b18 <mcp9600_set_mode+0x80>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	7e1b      	ldrb	r3, [r3, #24]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d001      	beq.n	8002aba <mcp9600_set_mode+0x22>
    {
        return 3;                                                                                 /* return error */
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e02e      	b.n	8002b18 <mcp9600_set_mode+0x80>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 8002aba:	f107 020e 	add.w	r2, r7, #14
 8002abe:	2301      	movs	r3, #1
 8002ac0:	2106      	movs	r1, #6
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff fc9c 	bl	8002400 <a_mcp9600_iic_read>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <mcp9600_set_mode+0x46>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                      /* read device configuration failed */
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	4812      	ldr	r0, [pc, #72]	; (8002b20 <mcp9600_set_mode+0x88>)
 8002ad8:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002ada:	2301      	movs	r3, #1
 8002adc:	e01c      	b.n	8002b18 <mcp9600_set_mode+0x80>
    }
    
    reg &= ~(3 << 0);                                                                             /* clear configure */
 8002ade:	7bbb      	ldrb	r3, [r7, #14]
 8002ae0:	f023 0303 	bic.w	r3, r3, #3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	73bb      	strb	r3, [r7, #14]
    reg |= mode << 0;                                                                             /* set configure */
 8002ae8:	7bba      	ldrb	r2, [r7, #14]
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 8002af2:	f107 020e 	add.w	r2, r7, #14
 8002af6:	2301      	movs	r3, #1
 8002af8:	2106      	movs	r1, #6
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff fcaa 	bl	8002454 <a_mcp9600_iic_write>
 8002b00:	4603      	mov	r3, r0
 8002b02:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <mcp9600_set_mode+0x7e>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                     /* write device configuration failed */
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	4805      	ldr	r0, [pc, #20]	; (8002b24 <mcp9600_set_mode+0x8c>)
 8002b10:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <mcp9600_set_mode+0x80>
    }
    
    return 0;                                                                                     /* success return 0 */
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	0800e5a8 	.word	0x0800e5a8
 8002b24:	0800e5d4 	.word	0x0800e5d4

08002b28 <mcp9600_set_thermocouple_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_thermocouple_type(mcp9600_handle_t *handle, mcp9600_thermocouple_type_t type)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                                        /* check handle */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <mcp9600_set_thermocouple_type+0x16>
    {
        return 2;                                                                                              /* return error */
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e038      	b.n	8002bb0 <mcp9600_set_thermocouple_type+0x88>
    }
    if (handle->inited != 1)                                                                                   /* check handle initialization */
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7e1b      	ldrb	r3, [r3, #24]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d001      	beq.n	8002b4a <mcp9600_set_thermocouple_type+0x22>
    {
        return 3;                                                                                              /* return error */
 8002b46:	2303      	movs	r3, #3
 8002b48:	e032      	b.n	8002bb0 <mcp9600_set_thermocouple_type+0x88>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 8002b4a:	f107 020e 	add.w	r2, r7, #14
 8002b4e:	2301      	movs	r3, #1
 8002b50:	2105      	movs	r1, #5
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff fc54 	bl	8002400 <a_mcp9600_iic_read>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <mcp9600_set_thermocouple_type+0x46>
    {
        handle->debug_print("mcp9600: read thermocouple sensor configuration failed.\n");                      /* read thermocouple sensor configuration failed */
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	4814      	ldr	r0, [pc, #80]	; (8002bb8 <mcp9600_set_thermocouple_type+0x90>)
 8002b68:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e020      	b.n	8002bb0 <mcp9600_set_thermocouple_type+0x88>
    }
    
    reg &= ~(0x7 << 4);                                                                                        /* clear configure */
 8002b6e:	7bbb      	ldrb	r3, [r7, #14]
 8002b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	73bb      	strb	r3, [r7, #14]
    reg |= type << 4;                                                                                          /* set configure */
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	b25a      	sxtb	r2, r3
 8002b7e:	7bbb      	ldrb	r3, [r7, #14]
 8002b80:	b25b      	sxtb	r3, r3
 8002b82:	4313      	orrs	r3, r2
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 8002b8a:	f107 020e 	add.w	r2, r7, #14
 8002b8e:	2301      	movs	r3, #1
 8002b90:	2105      	movs	r1, #5
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff fc5e 	bl	8002454 <a_mcp9600_iic_write>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <mcp9600_set_thermocouple_type+0x86>
    {
        handle->debug_print("mcp9600: write thermocouple sensor configuration failed.\n");                     /* write thermocouple sensor configuration failed */
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	4805      	ldr	r0, [pc, #20]	; (8002bbc <mcp9600_set_thermocouple_type+0x94>)
 8002ba8:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <mcp9600_set_thermocouple_type+0x88>
    }
    
    return 0;                                                                                                  /* success return 0 */
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	0800e718 	.word	0x0800e718
 8002bbc:	0800e754 	.word	0x0800e754

08002bc0 <mcp9600_set_filter_coefficient>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_filter_coefficient(mcp9600_handle_t *handle, mcp9600_filter_coefficient_t coefficient)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                                        /* check handle */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <mcp9600_set_filter_coefficient+0x16>
    {
        return 2;                                                                                              /* return error */
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e034      	b.n	8002c40 <mcp9600_set_filter_coefficient+0x80>
    }
    if (handle->inited != 1)                                                                                   /* check handle initialization */
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7e1b      	ldrb	r3, [r3, #24]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d001      	beq.n	8002be2 <mcp9600_set_filter_coefficient+0x22>
    {
        return 3;                                                                                              /* return error */
 8002bde:	2303      	movs	r3, #3
 8002be0:	e02e      	b.n	8002c40 <mcp9600_set_filter_coefficient+0x80>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 8002be2:	f107 020e 	add.w	r2, r7, #14
 8002be6:	2301      	movs	r3, #1
 8002be8:	2105      	movs	r1, #5
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff fc08 	bl	8002400 <a_mcp9600_iic_read>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <mcp9600_set_filter_coefficient+0x46>
    {
        handle->debug_print("mcp9600: read thermocouple sensor configuration failed.\n");                      /* read thermocouple sensor configuration failed */
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	4812      	ldr	r0, [pc, #72]	; (8002c48 <mcp9600_set_filter_coefficient+0x88>)
 8002c00:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 8002c02:	2301      	movs	r3, #1
 8002c04:	e01c      	b.n	8002c40 <mcp9600_set_filter_coefficient+0x80>
    }
    
    reg &= ~(0x7 << 0);                                                                                        /* clear configure */
 8002c06:	7bbb      	ldrb	r3, [r7, #14]
 8002c08:	f023 0307 	bic.w	r3, r3, #7
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	73bb      	strb	r3, [r7, #14]
    reg |= coefficient << 0;                                                                                   /* set configure */
 8002c10:	7bba      	ldrb	r2, [r7, #14]
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 8002c1a:	f107 020e 	add.w	r2, r7, #14
 8002c1e:	2301      	movs	r3, #1
 8002c20:	2105      	movs	r1, #5
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff fc16 	bl	8002454 <a_mcp9600_iic_write>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <mcp9600_set_filter_coefficient+0x7e>
    {
        handle->debug_print("mcp9600: write thermocouple sensor configuration failed.\n");                     /* write thermocouple sensor configuration failed */
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	4805      	ldr	r0, [pc, #20]	; (8002c4c <mcp9600_set_filter_coefficient+0x8c>)
 8002c38:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <mcp9600_set_filter_coefficient+0x80>
    }
    
    return 0;                                                                                                  /* success return 0 */
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	0800e718 	.word	0x0800e718
 8002c4c:	0800e754 	.word	0x0800e754

08002c50 <mcp9600_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mcp9600_interface_iic_init(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
    return 0;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <mcp9600_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mcp9600_interface_iic_deinit(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
    return 0;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <mcp9600_interface_iic_write_cmd>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mcp9600_interface_iic_write_cmd(uint8_t addr, uint8_t *buf, uint16_t len)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	6039      	str	r1, [r7, #0]
 8002c7a:	71fb      	strb	r3, [r7, #7]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit_DMA(&hi2c1,addr,buf,len);
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	b299      	uxth	r1, r3
 8002c84:	88bb      	ldrh	r3, [r7, #4]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	4803      	ldr	r0, [pc, #12]	; (8002c98 <mcp9600_interface_iic_write_cmd+0x28>)
 8002c8a:	f005 fd0b 	bl	80086a4 <HAL_I2C_Master_Transmit_DMA>
    return 0;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000568 	.word	0x20000568

08002c9c <mcp9600_interface_iic_read_cmd>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mcp9600_interface_iic_read_cmd(uint8_t addr, uint8_t *buf, uint16_t len)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	71fb      	strb	r3, [r7, #7]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Receive_DMA(&hi2c1, addr, buf, len);
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	b299      	uxth	r1, r3
 8002cb0:	88bb      	ldrh	r3, [r7, #4]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	4803      	ldr	r0, [pc, #12]	; (8002cc4 <mcp9600_interface_iic_read_cmd+0x28>)
 8002cb6:	f005 fe09 	bl	80088cc <HAL_I2C_Master_Receive_DMA>
    return 0;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000568 	.word	0x20000568

08002cc8 <mcp9600_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void mcp9600_interface_delay_ms(uint32_t ms)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f002 fab5 	bl	8005240 <HAL_Delay>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <mcp9600_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void mcp9600_interface_debug_print(const char *const fmt, ...)
{
 8002cde:	b40f      	push	{r0, r1, r2, r3}
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
	return;
 8002ce4:	bf00      	nop
    
}
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	b004      	add	sp, #16
 8002cee:	4770      	bx	lr

08002cf0 <Run_State>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t Run_State(PodState state) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]

    switch (state) {
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	f200 80aa 	bhi.w	8002e5a <Run_State+0x16a>
 8002d06:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <Run_State+0x1c>)
 8002d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0c:	08002d31 	.word	0x08002d31
 8002d10:	08002da1 	.word	0x08002da1
 8002d14:	08002dc7 	.word	0x08002dc7
 8002d18:	08002de1 	.word	0x08002de1
 8002d1c:	08002df5 	.word	0x08002df5
 8002d20:	08002e05 	.word	0x08002e05
 8002d24:	08002e15 	.word	0x08002e15
 8002d28:	08002e2b 	.word	0x08002e2b
 8002d2c:	08002e41 	.word	0x08002e41
        case INIT:
        	status = tempsensor_init();
 8002d30:	f001 ffec 	bl	8004d0c <tempsensor_init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <Run_State+0x52>
        		return 1;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e08f      	b.n	8002e62 <Run_State+0x172>
        	}
        	status = acc_init();
 8002d42:	f7fd fbe7 	bl	8000514 <acc_init>
 8002d46:	4603      	mov	r3, r0
 8002d48:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <Run_State+0x64>
        		return 1;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e086      	b.n	8002e62 <Run_State+0x172>
        	}
        	status = CAN_INIT();
 8002d54:	f7ff f894 	bl	8001e80 <CAN_INIT>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <Run_State+0x76>
        		return 1;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e07d      	b.n	8002e62 <Run_State+0x172>
        	}
        	status = tempsensor_init();
 8002d66:	f001 ffd1 	bl	8004d0c <tempsensor_init>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <Run_State+0x88>
        		return 1;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e074      	b.n	8002e62 <Run_State+0x172>
        	}
        	status = acc_init();
 8002d78:	f7fd fbcc 	bl	8000514 <acc_init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <Run_State+0x9a>
        		return 1;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e06b      	b.n	8002e62 <Run_State+0x172>
        	}
        	pump_control(1);
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f001 f81c 	bl	8003dc8 <pump_control>
        	HAL_TIM_Base_Start_IT(&htim5);
 8002d90:	4836      	ldr	r0, [pc, #216]	; (8002e6c <Run_State+0x17c>)
 8002d92:	f009 f9a9 	bl	800c0e8 <HAL_TIM_Base_Start_IT>
        	Curr_State = SAFE_TO_APPROACH;
 8002d96:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <Run_State+0x180>)
 8002d98:	2202      	movs	r2, #2
 8002d9a:	701a      	strb	r2, [r3, #0]
        	return status;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	e060      	b.n	8002e62 <Run_State+0x172>
            break;
        case FAULT:
        	HV_off();
 8002da0:	f000 fef8 	bl	8003b94 <HV_off>
        	yellowstatus(0);
 8002da4:	2000      	movs	r0, #0
 8002da6:	f000 ff6d 	bl	8003c84 <yellowstatus>
        	greenstatus(0);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f000 ffa0 	bl	8003cf0 <greenstatus>
        	redstatus(1);
 8002db0:	2001      	movs	r0, #1
 8002db2:	f000 ff2f 	bl	8003c14 <redstatus>
        	pump_control(0);
 8002db6:	2000      	movs	r0, #0
 8002db8:	f001 f806 	bl	8003dc8 <pump_control>
        	brake_state(0);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f000 ffcd 	bl	8003d5c <brake_state>

        	return status;
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	e04d      	b.n	8002e62 <Run_State+0x172>
            break;
        case SAFE_TO_APPROACH:
        	HV_off();
 8002dc6:	f000 fee5 	bl	8003b94 <HV_off>
        	yellowstatus(0);
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f000 ff5a 	bl	8003c84 <yellowstatus>
        	greenstatus(0);
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f000 ff8d 	bl	8003cf0 <greenstatus>
        	brake_state(1);
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f000 ffc0 	bl	8003d5c <brake_state>

        	return status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	e040      	b.n	8002e62 <Run_State+0x172>
            break;
        case READY:
        	precharge();
 8002de0:	f000 fe4e 	bl	8003a80 <precharge>
        	yellowstatus(1);
 8002de4:	2001      	movs	r0, #1
 8002de6:	f000 ff4d 	bl	8003c84 <yellowstatus>
        	brake_state(0);
 8002dea:	2000      	movs	r0, #0
 8002dec:	f000 ffb6 	bl	8003d5c <brake_state>
        	return status;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	e036      	b.n	8002e62 <Run_State+0x172>
            break;
        case LAUNCH:
        	yellowstatus(0);
 8002df4:	2000      	movs	r0, #0
 8002df6:	f000 ff45 	bl	8003c84 <yellowstatus>
        	greenstatus(1);
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f000 ff78 	bl	8003cf0 <greenstatus>

        	return status;
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	e02e      	b.n	8002e62 <Run_State+0x172>
            break;
        case COAST:
        	yellowstatus(0);
 8002e04:	2000      	movs	r0, #0
 8002e06:	f000 ff3d 	bl	8003c84 <yellowstatus>
        	greenstatus(1);
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	f000 ff70 	bl	8003cf0 <greenstatus>

        	return status;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	e026      	b.n	8002e62 <Run_State+0x172>
            break;
        case BRAKE:
        	yellowstatus(0);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f000 ff35 	bl	8003c84 <yellowstatus>
        	greenstatus(1);
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f000 ff68 	bl	8003cf0 <greenstatus>
        	brake_state(1);
 8002e20:	2001      	movs	r0, #1
 8002e22:	f000 ff9b 	bl	8003d5c <brake_state>

        	return status;
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	e01b      	b.n	8002e62 <Run_State+0x172>
            break;
        case CRAWL:
        	yellowstatus(0);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f000 ff2a 	bl	8003c84 <yellowstatus>
        	greenstatus(1);
 8002e30:	2001      	movs	r0, #1
 8002e32:	f000 ff5d 	bl	8003cf0 <greenstatus>
        	brake_state(0);
 8002e36:	2000      	movs	r0, #0
 8002e38:	f000 ff90 	bl	8003d5c <brake_state>

        	return status;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	e010      	b.n	8002e62 <Run_State+0x172>
            break;
        case TRACK:
        	HV_off();
 8002e40:	f000 fea8 	bl	8003b94 <HV_off>
        	yellowstatus(0);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f000 ff1d 	bl	8003c84 <yellowstatus>
        	greenstatus(0);
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f000 ff50 	bl	8003cf0 <greenstatus>
        	brake_state(0);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f000 ff83 	bl	8003d5c <brake_state>

        	return status;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	e003      	b.n	8002e62 <Run_State+0x172>
            break;
        default:
        	Curr_State = FAULT;
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <Run_State+0x180>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
        	//invalid state
            return 1;
 8002e60:	2301      	movs	r3, #1
            break;
    }
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000093c 	.word	0x2000093c
 8002e70:	20000c66 	.word	0x20000c66

08002e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e78:	f002 f971 	bl	800515e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e7c:	f000 f842 	bl	8002f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e80:	f000 fd28 	bl	80038d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e84:	f000 fcdc 	bl	8003840 <MX_DMA_Init>
  MX_ADC1_Init();
 8002e88:	f000 f892 	bl	8002fb0 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8002e8c:	f000 f992 	bl	80031b4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8002e90:	f000 f9d8 	bl	8003244 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 8002e94:	f000 fa1e 	bl	80032d4 <MX_FDCAN3_Init>
  MX_I2C1_Init();
 8002e98:	f000 fa64 	bl	8003364 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002e9c:	f000 fb8c 	bl	80035b8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8002ea0:	f000 fca6 	bl	80037f0 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 8002ea4:	f000 fa9e 	bl	80033e4 <MX_I2C2_Init>
  MX_IWDG_Init();
 8002ea8:	f000 fb1c 	bl	80034e4 <MX_IWDG_Init>
  MX_ADC5_Init();
 8002eac:	f000 f91c 	bl	80030e8 <MX_ADC5_Init>
  MX_I2C3_Init();
 8002eb0:	f000 fad8 	bl	8003464 <MX_I2C3_Init>
  MX_SPI3_Init();
 8002eb4:	f000 fbbe 	bl	8003634 <MX_SPI3_Init>
  MX_LPUART1_UART_Init();
 8002eb8:	f000 fb32 	bl	8003520 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8002ebc:	f000 fbf8 	bl	80036b0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002ec0:	f000 fc46 	bl	8003750 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */


  Fault_Flag = Run_State(Curr_State);
 8002ec4:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <main+0x88>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff11 	bl	8002cf0 <Run_State>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <main+0x8c>)
 8002ed4:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Fault_Flag = Run_State(Curr_State);
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <main+0x88>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ff08 	bl	8002cf0 <Run_State>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <main+0x8c>)
 8002ee6:	701a      	strb	r2, [r3, #0]
	  if(Fault_Flag != 0){
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <main+0x8c>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f1      	beq.n	8002ed6 <main+0x62>
		  Curr_State = FAULT;
 8002ef2:	4b02      	ldr	r3, [pc, #8]	; (8002efc <main+0x88>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
	  Fault_Flag = Run_State(Curr_State);
 8002ef8:	e7ed      	b.n	8002ed6 <main+0x62>
 8002efa:	bf00      	nop
 8002efc:	20000c66 	.word	0x20000c66
 8002f00:	20000c64 	.word	0x20000c64

08002f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b094      	sub	sp, #80	; 0x50
 8002f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f0a:	f107 0318 	add.w	r3, r7, #24
 8002f0e:	2238      	movs	r2, #56	; 0x38
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f00a ffbe 	bl	800de94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f18:	1d3b      	adds	r3, r7, #4
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	605a      	str	r2, [r3, #4]
 8002f20:	609a      	str	r2, [r3, #8]
 8002f22:	60da      	str	r2, [r3, #12]
 8002f24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002f26:	2000      	movs	r0, #0
 8002f28:	f007 ff80 	bl	800ae2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8002f2c:	232b      	movs	r3, #43	; 0x2b
 8002f2e:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f34:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f3c:	2340      	movs	r3, #64	; 0x40
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002f40:	2301      	movs	r3, #1
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002f44:	2301      	movs	r3, #1
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002f50:	2302      	movs	r3, #2
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002f54:	2355      	movs	r3, #85	; 0x55
 8002f56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f60:	2302      	movs	r3, #2
 8002f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f64:	f107 0318 	add.w	r3, r7, #24
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f008 f813 	bl	800af94 <HAL_RCC_OscConfig>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002f74:	f000 fd7e 	bl	8003a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f78:	230f      	movs	r3, #15
 8002f7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f8e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	2104      	movs	r1, #4
 8002f94:	4618      	mov	r0, r3
 8002f96:	f008 fb0f 	bl	800b5b8 <HAL_RCC_ClockConfig>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002fa0:	f000 fd68 	bl	8003a74 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002fa4:	f008 fcde 	bl	800b964 <HAL_RCC_EnableCSS>
}
 8002fa8:	bf00      	nop
 8002faa:	3750      	adds	r7, #80	; 0x50
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	; 0x30
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002fc2:	1d3b      	adds	r3, r7, #4
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f00a ff63 	bl	800de94 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002fce:	4b44      	ldr	r3, [pc, #272]	; (80030e0 <MX_ADC1_Init+0x130>)
 8002fd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002fd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002fd6:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <MX_ADC1_Init+0x130>)
 8002fd8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002fdc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002fde:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <MX_ADC1_Init+0x130>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fe4:	4b3e      	ldr	r3, [pc, #248]	; (80030e0 <MX_ADC1_Init+0x130>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002fea:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <MX_ADC1_Init+0x130>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002ff0:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <MX_ADC1_Init+0x130>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ff6:	4b3a      	ldr	r3, [pc, #232]	; (80030e0 <MX_ADC1_Init+0x130>)
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002ffc:	4b38      	ldr	r3, [pc, #224]	; (80030e0 <MX_ADC1_Init+0x130>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003002:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <MX_ADC1_Init+0x130>)
 8003004:	2201      	movs	r2, #1
 8003006:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8003008:	4b35      	ldr	r3, [pc, #212]	; (80030e0 <MX_ADC1_Init+0x130>)
 800300a:	2204      	movs	r2, #4
 800300c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800300e:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <MX_ADC1_Init+0x130>)
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003016:	4b32      	ldr	r3, [pc, #200]	; (80030e0 <MX_ADC1_Init+0x130>)
 8003018:	2200      	movs	r2, #0
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800301c:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <MX_ADC1_Init+0x130>)
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003022:	4b2f      	ldr	r3, [pc, #188]	; (80030e0 <MX_ADC1_Init+0x130>)
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800302a:	4b2d      	ldr	r3, [pc, #180]	; (80030e0 <MX_ADC1_Init+0x130>)
 800302c:	2200      	movs	r2, #0
 800302e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003030:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <MX_ADC1_Init+0x130>)
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003038:	4829      	ldr	r0, [pc, #164]	; (80030e0 <MX_ADC1_Init+0x130>)
 800303a:	f002 fb41 	bl	80056c0 <HAL_ADC_Init>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003044:	f000 fd16 	bl	8003a74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800304c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003050:	4619      	mov	r1, r3
 8003052:	4823      	ldr	r0, [pc, #140]	; (80030e0 <MX_ADC1_Init+0x130>)
 8003054:	f003 fb68 	bl	8006728 <HAL_ADCEx_MultiModeConfigChannel>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800305e:	f000 fd09 	bl	8003a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <MX_ADC1_Init+0x134>)
 8003064:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003066:	2306      	movs	r3, #6
 8003068:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800306e:	237f      	movs	r3, #127	; 0x7f
 8003070:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003072:	2304      	movs	r3, #4
 8003074:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800307a:	1d3b      	adds	r3, r7, #4
 800307c:	4619      	mov	r1, r3
 800307e:	4818      	ldr	r0, [pc, #96]	; (80030e0 <MX_ADC1_Init+0x130>)
 8003080:	f002 fdc2 	bl	8005c08 <HAL_ADC_ConfigChannel>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800308a:	f000 fcf3 	bl	8003a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800308e:	230c      	movs	r3, #12
 8003090:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4812      	ldr	r0, [pc, #72]	; (80030e0 <MX_ADC1_Init+0x130>)
 8003098:	f002 fdb6 	bl	8005c08 <HAL_ADC_ConfigChannel>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80030a2:	f000 fce7 	bl	8003a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80030a6:	2312      	movs	r3, #18
 80030a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	4619      	mov	r1, r3
 80030ae:	480c      	ldr	r0, [pc, #48]	; (80030e0 <MX_ADC1_Init+0x130>)
 80030b0:	f002 fdaa 	bl	8005c08 <HAL_ADC_ConfigChannel>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 80030ba:	f000 fcdb 	bl	8003a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80030be:	2318      	movs	r3, #24
 80030c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030c2:	1d3b      	adds	r3, r7, #4
 80030c4:	4619      	mov	r1, r3
 80030c6:	4806      	ldr	r0, [pc, #24]	; (80030e0 <MX_ADC1_Init+0x130>)
 80030c8:	f002 fd9e 	bl	8005c08 <HAL_ADC_ConfigChannel>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80030d2:	f000 fccf 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80030d6:	bf00      	nop
 80030d8:	3730      	adds	r7, #48	; 0x30
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	200002a4 	.word	0x200002a4
 80030e4:	04300002 	.word	0x04300002

080030e8 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80030ee:	463b      	mov	r3, r7
 80030f0:	2220      	movs	r2, #32
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f00a fecd 	bl	800de94 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80030fa:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <MX_ADC5_Init+0xc0>)
 80030fc:	4a2b      	ldr	r2, [pc, #172]	; (80031ac <MX_ADC5_Init+0xc4>)
 80030fe:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003100:	4b29      	ldr	r3, [pc, #164]	; (80031a8 <MX_ADC5_Init+0xc0>)
 8003102:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003106:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <MX_ADC5_Init+0xc0>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800310e:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <MX_ADC5_Init+0xc0>)
 8003110:	2200      	movs	r2, #0
 8003112:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8003114:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <MX_ADC5_Init+0xc0>)
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800311a:	4b23      	ldr	r3, [pc, #140]	; (80031a8 <MX_ADC5_Init+0xc0>)
 800311c:	2200      	movs	r2, #0
 800311e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003120:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <MX_ADC5_Init+0xc0>)
 8003122:	2204      	movs	r2, #4
 8003124:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <MX_ADC5_Init+0xc0>)
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 800312c:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <MX_ADC5_Init+0xc0>)
 800312e:	2200      	movs	r2, #0
 8003130:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8003132:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <MX_ADC5_Init+0xc0>)
 8003134:	2201      	movs	r2, #1
 8003136:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <MX_ADC5_Init+0xc0>)
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003140:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <MX_ADC5_Init+0xc0>)
 8003142:	2200      	movs	r2, #0
 8003144:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003146:	4b18      	ldr	r3, [pc, #96]	; (80031a8 <MX_ADC5_Init+0xc0>)
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 800314c:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <MX_ADC5_Init+0xc0>)
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003154:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <MX_ADC5_Init+0xc0>)
 8003156:	2200      	movs	r2, #0
 8003158:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <MX_ADC5_Init+0xc0>)
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8003162:	4811      	ldr	r0, [pc, #68]	; (80031a8 <MX_ADC5_Init+0xc0>)
 8003164:	f002 faac 	bl	80056c0 <HAL_ADC_Init>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 800316e:	f000 fc81 	bl	8003a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003172:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <MX_ADC5_Init+0xc8>)
 8003174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003176:	2306      	movs	r3, #6
 8003178:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800317e:	237f      	movs	r3, #127	; 0x7f
 8003180:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003182:	2304      	movs	r3, #4
 8003184:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800318a:	463b      	mov	r3, r7
 800318c:	4619      	mov	r1, r3
 800318e:	4806      	ldr	r0, [pc, #24]	; (80031a8 <MX_ADC5_Init+0xc0>)
 8003190:	f002 fd3a 	bl	8005c08 <HAL_ADC_ConfigChannel>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 800319a:	f000 fc6b 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800319e:	bf00      	nop
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000310 	.word	0x20000310
 80031ac:	50000600 	.word	0x50000600
 80031b0:	08600004 	.word	0x08600004

080031b4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80031b8:	4b20      	ldr	r3, [pc, #128]	; (800323c <MX_FDCAN1_Init+0x88>)
 80031ba:	4a21      	ldr	r2, [pc, #132]	; (8003240 <MX_FDCAN1_Init+0x8c>)
 80031bc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80031be:	4b1f      	ldr	r3, [pc, #124]	; (800323c <MX_FDCAN1_Init+0x88>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80031c4:	4b1d      	ldr	r3, [pc, #116]	; (800323c <MX_FDCAN1_Init+0x88>)
 80031c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80031ca:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <MX_FDCAN1_Init+0x88>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80031d2:	4b1a      	ldr	r3, [pc, #104]	; (800323c <MX_FDCAN1_Init+0x88>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80031d8:	4b18      	ldr	r3, [pc, #96]	; (800323c <MX_FDCAN1_Init+0x88>)
 80031da:	2200      	movs	r2, #0
 80031dc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80031de:	4b17      	ldr	r3, [pc, #92]	; (800323c <MX_FDCAN1_Init+0x88>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 80031e4:	4b15      	ldr	r3, [pc, #84]	; (800323c <MX_FDCAN1_Init+0x88>)
 80031e6:	2202      	movs	r2, #2
 80031e8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80031ea:	4b14      	ldr	r3, [pc, #80]	; (800323c <MX_FDCAN1_Init+0x88>)
 80031ec:	2202      	movs	r2, #2
 80031ee:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 167;
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <MX_FDCAN1_Init+0x88>)
 80031f2:	22a7      	movs	r2, #167	; 0xa7
 80031f4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80031f6:	4b11      	ldr	r3, [pc, #68]	; (800323c <MX_FDCAN1_Init+0x88>)
 80031f8:	2202      	movs	r2, #2
 80031fa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 17;
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <MX_FDCAN1_Init+0x88>)
 80031fe:	2211      	movs	r2, #17
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <MX_FDCAN1_Init+0x88>)
 8003204:	2204      	movs	r2, #4
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <MX_FDCAN1_Init+0x88>)
 800320a:	2205      	movs	r2, #5
 800320c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <MX_FDCAN1_Init+0x88>)
 8003210:	2204      	movs	r2, #4
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <MX_FDCAN1_Init+0x88>)
 8003216:	2200      	movs	r2, #0
 8003218:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <MX_FDCAN1_Init+0x88>)
 800321c:	2200      	movs	r2, #0
 800321e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <MX_FDCAN1_Init+0x88>)
 8003222:	2200      	movs	r2, #0
 8003224:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003226:	4805      	ldr	r0, [pc, #20]	; (800323c <MX_FDCAN1_Init+0x88>)
 8003228:	f003 ff7e 	bl	8007128 <HAL_FDCAN_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8003232:	f000 fc1f 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	2000043c 	.word	0x2000043c
 8003240:	40006400 	.word	0x40006400

08003244 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003248:	4b20      	ldr	r3, [pc, #128]	; (80032cc <MX_FDCAN2_Init+0x88>)
 800324a:	4a21      	ldr	r2, [pc, #132]	; (80032d0 <MX_FDCAN2_Init+0x8c>)
 800324c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800324e:	4b1f      	ldr	r3, [pc, #124]	; (80032cc <MX_FDCAN2_Init+0x88>)
 8003250:	2200      	movs	r2, #0
 8003252:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003254:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <MX_FDCAN2_Init+0x88>)
 8003256:	f44f 7240 	mov.w	r2, #768	; 0x300
 800325a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <MX_FDCAN2_Init+0x88>)
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <MX_FDCAN2_Init+0x88>)
 8003264:	2201      	movs	r2, #1
 8003266:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003268:	4b18      	ldr	r3, [pc, #96]	; (80032cc <MX_FDCAN2_Init+0x88>)
 800326a:	2200      	movs	r2, #0
 800326c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800326e:	4b17      	ldr	r3, [pc, #92]	; (80032cc <MX_FDCAN2_Init+0x88>)
 8003270:	2200      	movs	r2, #0
 8003272:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 2;
 8003274:	4b15      	ldr	r3, [pc, #84]	; (80032cc <MX_FDCAN2_Init+0x88>)
 8003276:	2202      	movs	r2, #2
 8003278:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 2;
 800327a:	4b14      	ldr	r3, [pc, #80]	; (80032cc <MX_FDCAN2_Init+0x88>)
 800327c:	2202      	movs	r2, #2
 800327e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 167;
 8003280:	4b12      	ldr	r3, [pc, #72]	; (80032cc <MX_FDCAN2_Init+0x88>)
 8003282:	22a7      	movs	r2, #167	; 0xa7
 8003284:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <MX_FDCAN2_Init+0x88>)
 8003288:	2202      	movs	r2, #2
 800328a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 17;
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <MX_FDCAN2_Init+0x88>)
 800328e:	2211      	movs	r2, #17
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <MX_FDCAN2_Init+0x88>)
 8003294:	2204      	movs	r2, #4
 8003296:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 5;
 8003298:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <MX_FDCAN2_Init+0x88>)
 800329a:	2205      	movs	r2, #5
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 4;
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <MX_FDCAN2_Init+0x88>)
 80032a0:	2204      	movs	r2, #4
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <MX_FDCAN2_Init+0x88>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <MX_FDCAN2_Init+0x88>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <MX_FDCAN2_Init+0x88>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80032b6:	4805      	ldr	r0, [pc, #20]	; (80032cc <MX_FDCAN2_Init+0x88>)
 80032b8:	f003 ff36 	bl	8007128 <HAL_FDCAN_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 80032c2:	f000 fbd7 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	200004a0 	.word	0x200004a0
 80032d0:	40006800 	.word	0x40006800

080032d4 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80032d8:	4b20      	ldr	r3, [pc, #128]	; (800335c <MX_FDCAN3_Init+0x88>)
 80032da:	4a21      	ldr	r2, [pc, #132]	; (8003360 <MX_FDCAN3_Init+0x8c>)
 80032dc:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80032de:	4b1f      	ldr	r3, [pc, #124]	; (800335c <MX_FDCAN3_Init+0x88>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80032e4:	4b1d      	ldr	r3, [pc, #116]	; (800335c <MX_FDCAN3_Init+0x88>)
 80032e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80032ea:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80032ec:	4b1b      	ldr	r3, [pc, #108]	; (800335c <MX_FDCAN3_Init+0x88>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 80032f2:	4b1a      	ldr	r3, [pc, #104]	; (800335c <MX_FDCAN3_Init+0x88>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80032f8:	4b18      	ldr	r3, [pc, #96]	; (800335c <MX_FDCAN3_Init+0x88>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80032fe:	4b17      	ldr	r3, [pc, #92]	; (800335c <MX_FDCAN3_Init+0x88>)
 8003300:	2200      	movs	r2, #0
 8003302:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 2;
 8003304:	4b15      	ldr	r3, [pc, #84]	; (800335c <MX_FDCAN3_Init+0x88>)
 8003306:	2202      	movs	r2, #2
 8003308:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 2;
 800330a:	4b14      	ldr	r3, [pc, #80]	; (800335c <MX_FDCAN3_Init+0x88>)
 800330c:	2202      	movs	r2, #2
 800330e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 167;
 8003310:	4b12      	ldr	r3, [pc, #72]	; (800335c <MX_FDCAN3_Init+0x88>)
 8003312:	22a7      	movs	r2, #167	; 0xa7
 8003314:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8003316:	4b11      	ldr	r3, [pc, #68]	; (800335c <MX_FDCAN3_Init+0x88>)
 8003318:	2202      	movs	r2, #2
 800331a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 17;
 800331c:	4b0f      	ldr	r3, [pc, #60]	; (800335c <MX_FDCAN3_Init+0x88>)
 800331e:	2211      	movs	r2, #17
 8003320:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 4;
 8003322:	4b0e      	ldr	r3, [pc, #56]	; (800335c <MX_FDCAN3_Init+0x88>)
 8003324:	2204      	movs	r2, #4
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 5;
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <MX_FDCAN3_Init+0x88>)
 800332a:	2205      	movs	r2, #5
 800332c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 4;
 800332e:	4b0b      	ldr	r3, [pc, #44]	; (800335c <MX_FDCAN3_Init+0x88>)
 8003330:	2204      	movs	r2, #4
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 8003334:	4b09      	ldr	r3, [pc, #36]	; (800335c <MX_FDCAN3_Init+0x88>)
 8003336:	2200      	movs	r2, #0
 8003338:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <MX_FDCAN3_Init+0x88>)
 800333c:	2200      	movs	r2, #0
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <MX_FDCAN3_Init+0x88>)
 8003342:	2200      	movs	r2, #0
 8003344:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8003346:	4805      	ldr	r0, [pc, #20]	; (800335c <MX_FDCAN3_Init+0x88>)
 8003348:	f003 feee 	bl	8007128 <HAL_FDCAN_Init>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_FDCAN3_Init+0x82>
  {
    Error_Handler();
 8003352:	f000 fb8f 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000504 	.word	0x20000504
 8003360:	40006c00 	.word	0x40006c00

08003364 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <MX_I2C1_Init+0x74>)
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <MX_I2C1_Init+0x78>)
 800336c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A0A6FB;
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <MX_I2C1_Init+0x74>)
 8003370:	4a1b      	ldr	r2, [pc, #108]	; (80033e0 <MX_I2C1_Init+0x7c>)
 8003372:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003374:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <MX_I2C1_Init+0x74>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800337a:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <MX_I2C1_Init+0x74>)
 800337c:	2201      	movs	r2, #1
 800337e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003380:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <MX_I2C1_Init+0x74>)
 8003382:	2200      	movs	r2, #0
 8003384:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <MX_I2C1_Init+0x74>)
 8003388:	2200      	movs	r2, #0
 800338a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <MX_I2C1_Init+0x74>)
 800338e:	2200      	movs	r2, #0
 8003390:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003392:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <MX_I2C1_Init+0x74>)
 8003394:	2200      	movs	r2, #0
 8003396:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <MX_I2C1_Init+0x74>)
 800339a:	2200      	movs	r2, #0
 800339c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800339e:	480e      	ldr	r0, [pc, #56]	; (80033d8 <MX_I2C1_Init+0x74>)
 80033a0:	f004 fed6 	bl	8008150 <HAL_I2C_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033aa:	f000 fb63 	bl	8003a74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033ae:	2100      	movs	r1, #0
 80033b0:	4809      	ldr	r0, [pc, #36]	; (80033d8 <MX_I2C1_Init+0x74>)
 80033b2:	f007 fb5d 	bl	800aa70 <HAL_I2CEx_ConfigAnalogFilter>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80033bc:	f000 fb5a 	bl	8003a74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033c0:	2100      	movs	r1, #0
 80033c2:	4805      	ldr	r0, [pc, #20]	; (80033d8 <MX_I2C1_Init+0x74>)
 80033c4:	f007 fb9f 	bl	800ab06 <HAL_I2CEx_ConfigDigitalFilter>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80033ce:	f000 fb51 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000568 	.word	0x20000568
 80033dc:	40005400 	.word	0x40005400
 80033e0:	10a0a6fb 	.word	0x10a0a6fb

080033e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80033e8:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <MX_I2C2_Init+0x74>)
 80033ea:	4a1c      	ldr	r2, [pc, #112]	; (800345c <MX_I2C2_Init+0x78>)
 80033ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10A0A6FB;
 80033ee:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <MX_I2C2_Init+0x74>)
 80033f0:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <MX_I2C2_Init+0x7c>)
 80033f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80033f4:	4b18      	ldr	r3, [pc, #96]	; (8003458 <MX_I2C2_Init+0x74>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033fa:	4b17      	ldr	r3, [pc, #92]	; (8003458 <MX_I2C2_Init+0x74>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003400:	4b15      	ldr	r3, [pc, #84]	; (8003458 <MX_I2C2_Init+0x74>)
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <MX_I2C2_Init+0x74>)
 8003408:	2200      	movs	r2, #0
 800340a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800340c:	4b12      	ldr	r3, [pc, #72]	; (8003458 <MX_I2C2_Init+0x74>)
 800340e:	2200      	movs	r2, #0
 8003410:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <MX_I2C2_Init+0x74>)
 8003414:	2200      	movs	r2, #0
 8003416:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <MX_I2C2_Init+0x74>)
 800341a:	2200      	movs	r2, #0
 800341c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800341e:	480e      	ldr	r0, [pc, #56]	; (8003458 <MX_I2C2_Init+0x74>)
 8003420:	f004 fe96 	bl	8008150 <HAL_I2C_Init>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800342a:	f000 fb23 	bl	8003a74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800342e:	2100      	movs	r1, #0
 8003430:	4809      	ldr	r0, [pc, #36]	; (8003458 <MX_I2C2_Init+0x74>)
 8003432:	f007 fb1d 	bl	800aa70 <HAL_I2CEx_ConfigAnalogFilter>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800343c:	f000 fb1a 	bl	8003a74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003440:	2100      	movs	r1, #0
 8003442:	4805      	ldr	r0, [pc, #20]	; (8003458 <MX_I2C2_Init+0x74>)
 8003444:	f007 fb5f 	bl	800ab06 <HAL_I2CEx_ConfigDigitalFilter>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800344e:	f000 fb11 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	200005bc 	.word	0x200005bc
 800345c:	40005800 	.word	0x40005800
 8003460:	10a0a6fb 	.word	0x10a0a6fb

08003464 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003468:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <MX_I2C3_Init+0x74>)
 800346a:	4a1c      	ldr	r2, [pc, #112]	; (80034dc <MX_I2C3_Init+0x78>)
 800346c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10A0A6FB;
 800346e:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <MX_I2C3_Init+0x74>)
 8003470:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <MX_I2C3_Init+0x7c>)
 8003472:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003474:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <MX_I2C3_Init+0x74>)
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <MX_I2C3_Init+0x74>)
 800347c:	2201      	movs	r2, #1
 800347e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003480:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <MX_I2C3_Init+0x74>)
 8003482:	2200      	movs	r2, #0
 8003484:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <MX_I2C3_Init+0x74>)
 8003488:	2200      	movs	r2, #0
 800348a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <MX_I2C3_Init+0x74>)
 800348e:	2200      	movs	r2, #0
 8003490:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <MX_I2C3_Init+0x74>)
 8003494:	2200      	movs	r2, #0
 8003496:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003498:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <MX_I2C3_Init+0x74>)
 800349a:	2200      	movs	r2, #0
 800349c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800349e:	480e      	ldr	r0, [pc, #56]	; (80034d8 <MX_I2C3_Init+0x74>)
 80034a0:	f004 fe56 	bl	8008150 <HAL_I2C_Init>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80034aa:	f000 fae3 	bl	8003a74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034ae:	2100      	movs	r1, #0
 80034b0:	4809      	ldr	r0, [pc, #36]	; (80034d8 <MX_I2C3_Init+0x74>)
 80034b2:	f007 fadd 	bl	800aa70 <HAL_I2CEx_ConfigAnalogFilter>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80034bc:	f000 fada 	bl	8003a74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80034c0:	2100      	movs	r1, #0
 80034c2:	4805      	ldr	r0, [pc, #20]	; (80034d8 <MX_I2C3_Init+0x74>)
 80034c4:	f007 fb1f 	bl	800ab06 <HAL_I2CEx_ConfigDigitalFilter>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80034ce:	f000 fad1 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000610 	.word	0x20000610
 80034dc:	40007800 	.word	0x40007800
 80034e0:	10a0a6fb 	.word	0x10a0a6fb

080034e4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <MX_IWDG_Init+0x34>)
 80034ea:	4a0c      	ldr	r2, [pc, #48]	; (800351c <MX_IWDG_Init+0x38>)
 80034ec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <MX_IWDG_Init+0x34>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <MX_IWDG_Init+0x34>)
 80034f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80034fa:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80034fc:	4b06      	ldr	r3, [pc, #24]	; (8003518 <MX_IWDG_Init+0x34>)
 80034fe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003502:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003504:	4804      	ldr	r0, [pc, #16]	; (8003518 <MX_IWDG_Init+0x34>)
 8003506:	f007 fb4a 	bl	800ab9e <HAL_IWDG_Init>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8003510:	f000 fab0 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003514:	bf00      	nop
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000784 	.word	0x20000784
 800351c:	40003000 	.word	0x40003000

08003520 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003524:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <MX_LPUART1_UART_Init+0x90>)
 8003526:	4a23      	ldr	r2, [pc, #140]	; (80035b4 <MX_LPUART1_UART_Init+0x94>)
 8003528:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800352a:	4b21      	ldr	r3, [pc, #132]	; (80035b0 <MX_LPUART1_UART_Init+0x90>)
 800352c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003530:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003532:	4b1f      	ldr	r3, [pc, #124]	; (80035b0 <MX_LPUART1_UART_Init+0x90>)
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003538:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <MX_LPUART1_UART_Init+0x90>)
 800353a:	2200      	movs	r2, #0
 800353c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800353e:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <MX_LPUART1_UART_Init+0x90>)
 8003540:	2200      	movs	r2, #0
 8003542:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003544:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <MX_LPUART1_UART_Init+0x90>)
 8003546:	220c      	movs	r2, #12
 8003548:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800354a:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <MX_LPUART1_UART_Init+0x90>)
 800354c:	2200      	movs	r2, #0
 800354e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003550:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <MX_LPUART1_UART_Init+0x90>)
 8003552:	2200      	movs	r2, #0
 8003554:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003556:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <MX_LPUART1_UART_Init+0x90>)
 8003558:	2200      	movs	r2, #0
 800355a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <MX_LPUART1_UART_Init+0x90>)
 800355e:	2200      	movs	r2, #0
 8003560:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8003562:	2300      	movs	r3, #0
 8003564:	2200      	movs	r2, #0
 8003566:	2100      	movs	r1, #0
 8003568:	4811      	ldr	r0, [pc, #68]	; (80035b0 <MX_LPUART1_UART_Init+0x90>)
 800356a:	f00a f842 	bl	800d5f2 <HAL_RS485Ex_Init>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8003574:	f000 fa7e 	bl	8003a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003578:	2100      	movs	r1, #0
 800357a:	480d      	ldr	r0, [pc, #52]	; (80035b0 <MX_LPUART1_UART_Init+0x90>)
 800357c:	f00a f8db 	bl	800d736 <HAL_UARTEx_SetTxFifoThreshold>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003586:	f000 fa75 	bl	8003a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800358a:	2100      	movs	r1, #0
 800358c:	4808      	ldr	r0, [pc, #32]	; (80035b0 <MX_LPUART1_UART_Init+0x90>)
 800358e:	f00a f910 	bl	800d7b2 <HAL_UARTEx_SetRxFifoThreshold>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003598:	f000 fa6c 	bl	8003a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800359c:	4804      	ldr	r0, [pc, #16]	; (80035b0 <MX_LPUART1_UART_Init+0x90>)
 800359e:	f00a f891 	bl	800d6c4 <HAL_UARTEx_DisableFifoMode>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80035a8:	f000 fa64 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20000794 	.word	0x20000794
 80035b4:	40008000 	.word	0x40008000

080035b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <MX_SPI1_Init+0x74>)
 80035be:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <MX_SPI1_Init+0x78>)
 80035c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035c2:	4b1a      	ldr	r3, [pc, #104]	; (800362c <MX_SPI1_Init+0x74>)
 80035c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035ca:	4b18      	ldr	r3, [pc, #96]	; (800362c <MX_SPI1_Init+0x74>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80035d0:	4b16      	ldr	r3, [pc, #88]	; (800362c <MX_SPI1_Init+0x74>)
 80035d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80035d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035d8:	4b14      	ldr	r3, [pc, #80]	; (800362c <MX_SPI1_Init+0x74>)
 80035da:	2200      	movs	r2, #0
 80035dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035de:	4b13      	ldr	r3, [pc, #76]	; (800362c <MX_SPI1_Init+0x74>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <MX_SPI1_Init+0x74>)
 80035e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <MX_SPI1_Init+0x74>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <MX_SPI1_Init+0x74>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <MX_SPI1_Init+0x74>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <MX_SPI1_Init+0x74>)
 8003600:	2200      	movs	r2, #0
 8003602:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <MX_SPI1_Init+0x74>)
 8003606:	2207      	movs	r2, #7
 8003608:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <MX_SPI1_Init+0x74>)
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <MX_SPI1_Init+0x74>)
 8003612:	2208      	movs	r2, #8
 8003614:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003616:	4805      	ldr	r0, [pc, #20]	; (800362c <MX_SPI1_Init+0x74>)
 8003618:	f008 fc64 	bl	800bee4 <HAL_SPI_Init>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003622:	f000 fa27 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000828 	.word	0x20000828
 8003630:	40013000 	.word	0x40013000

08003634 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <MX_SPI3_Init+0x74>)
 800363a:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <MX_SPI3_Init+0x78>)
 800363c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800363e:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <MX_SPI3_Init+0x74>)
 8003640:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003644:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <MX_SPI3_Init+0x74>)
 8003648:	2200      	movs	r2, #0
 800364a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800364c:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <MX_SPI3_Init+0x74>)
 800364e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003652:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003654:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <MX_SPI3_Init+0x74>)
 8003656:	2200      	movs	r2, #0
 8003658:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800365a:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <MX_SPI3_Init+0x74>)
 800365c:	2200      	movs	r2, #0
 800365e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <MX_SPI3_Init+0x74>)
 8003662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003666:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <MX_SPI3_Init+0x74>)
 800366a:	2200      	movs	r2, #0
 800366c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800366e:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <MX_SPI3_Init+0x74>)
 8003670:	2200      	movs	r2, #0
 8003672:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <MX_SPI3_Init+0x74>)
 8003676:	2200      	movs	r2, #0
 8003678:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <MX_SPI3_Init+0x74>)
 800367c:	2200      	movs	r2, #0
 800367e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <MX_SPI3_Init+0x74>)
 8003682:	2207      	movs	r2, #7
 8003684:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003686:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <MX_SPI3_Init+0x74>)
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <MX_SPI3_Init+0x74>)
 800368e:	2208      	movs	r2, #8
 8003690:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003692:	4805      	ldr	r0, [pc, #20]	; (80036a8 <MX_SPI3_Init+0x74>)
 8003694:	f008 fc26 	bl	800bee4 <HAL_SPI_Init>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800369e:	f000 f9e9 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	2000088c 	.word	0x2000088c
 80036ac:	40003c00 	.word	0x40003c00

080036b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036b6:	f107 0310 	add.w	r3, r7, #16
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	605a      	str	r2, [r3, #4]
 80036c0:	609a      	str	r2, [r3, #8]
 80036c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036ce:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <MX_TIM2_Init+0x98>)
 80036d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1699;
 80036d6:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <MX_TIM2_Init+0x98>)
 80036d8:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80036dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80036de:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <MX_TIM2_Init+0x98>)
 80036e0:	2210      	movs	r2, #16
 80036e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000000;
 80036e4:	4b18      	ldr	r3, [pc, #96]	; (8003748 <MX_TIM2_Init+0x98>)
 80036e6:	4a19      	ldr	r2, [pc, #100]	; (800374c <MX_TIM2_Init+0x9c>)
 80036e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ea:	4b17      	ldr	r3, [pc, #92]	; (8003748 <MX_TIM2_Init+0x98>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f0:	4b15      	ldr	r3, [pc, #84]	; (8003748 <MX_TIM2_Init+0x98>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036f6:	4814      	ldr	r0, [pc, #80]	; (8003748 <MX_TIM2_Init+0x98>)
 80036f8:	f008 fc9f 	bl	800c03a <HAL_TIM_Base_Init>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003702:	f000 f9b7 	bl	8003a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800370a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800370c:	f107 0310 	add.w	r3, r7, #16
 8003710:	4619      	mov	r1, r3
 8003712:	480d      	ldr	r0, [pc, #52]	; (8003748 <MX_TIM2_Init+0x98>)
 8003714:	f008 fede 	bl	800c4d4 <HAL_TIM_ConfigClockSource>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800371e:	f000 f9a9 	bl	8003a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003722:	2300      	movs	r3, #0
 8003724:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800372a:	1d3b      	adds	r3, r7, #4
 800372c:	4619      	mov	r1, r3
 800372e:	4806      	ldr	r0, [pc, #24]	; (8003748 <MX_TIM2_Init+0x98>)
 8003730:	f009 f968 	bl	800ca04 <HAL_TIMEx_MasterConfigSynchronization>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800373a:	f000 f99b 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800373e:	bf00      	nop
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	200008f0 	.word	0x200008f0
 800374c:	004c4b40 	.word	0x004c4b40

08003750 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003756:	f107 0310 	add.w	r3, r7, #16
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	605a      	str	r2, [r3, #4]
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003764:	1d3b      	adds	r3, r7, #4
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	605a      	str	r2, [r3, #4]
 800376c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800376e:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <MX_TIM5_Init+0x94>)
 8003770:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <MX_TIM5_Init+0x98>)
 8003772:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1699;
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <MX_TIM5_Init+0x94>)
 8003776:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800377a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800377c:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <MX_TIM5_Init+0x94>)
 800377e:	2210      	movs	r2, #16
 8003780:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1.5E7;
 8003782:	4b18      	ldr	r3, [pc, #96]	; (80037e4 <MX_TIM5_Init+0x94>)
 8003784:	4a19      	ldr	r2, [pc, #100]	; (80037ec <MX_TIM5_Init+0x9c>)
 8003786:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003788:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <MX_TIM5_Init+0x94>)
 800378a:	2200      	movs	r2, #0
 800378c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <MX_TIM5_Init+0x94>)
 8003790:	2200      	movs	r2, #0
 8003792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003794:	4813      	ldr	r0, [pc, #76]	; (80037e4 <MX_TIM5_Init+0x94>)
 8003796:	f008 fc50 	bl	800c03a <HAL_TIM_Base_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80037a0:	f000 f968 	bl	8003a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80037aa:	f107 0310 	add.w	r3, r7, #16
 80037ae:	4619      	mov	r1, r3
 80037b0:	480c      	ldr	r0, [pc, #48]	; (80037e4 <MX_TIM5_Init+0x94>)
 80037b2:	f008 fe8f 	bl	800c4d4 <HAL_TIM_ConfigClockSource>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80037bc:	f000 f95a 	bl	8003a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037c0:	2300      	movs	r3, #0
 80037c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80037c8:	1d3b      	adds	r3, r7, #4
 80037ca:	4619      	mov	r1, r3
 80037cc:	4805      	ldr	r0, [pc, #20]	; (80037e4 <MX_TIM5_Init+0x94>)
 80037ce:	f009 f919 	bl	800ca04 <HAL_TIMEx_MasterConfigSynchronization>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80037d8:	f000 f94c 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80037dc:	bf00      	nop
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	2000093c 	.word	0x2000093c
 80037e8:	40000c00 	.word	0x40000c00
 80037ec:	00e4e1c0 	.word	0x00e4e1c0

080037f0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80037f4:	4b10      	ldr	r3, [pc, #64]	; (8003838 <MX_USB_PCD_Init+0x48>)
 80037f6:	4a11      	ldr	r2, [pc, #68]	; (800383c <MX_USB_PCD_Init+0x4c>)
 80037f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80037fa:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <MX_USB_PCD_Init+0x48>)
 80037fc:	2208      	movs	r2, #8
 80037fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003800:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <MX_USB_PCD_Init+0x48>)
 8003802:	2202      	movs	r2, #2
 8003804:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003806:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <MX_USB_PCD_Init+0x48>)
 8003808:	2202      	movs	r2, #2
 800380a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <MX_USB_PCD_Init+0x48>)
 800380e:	2200      	movs	r2, #0
 8003810:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <MX_USB_PCD_Init+0x48>)
 8003814:	2200      	movs	r2, #0
 8003816:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003818:	4b07      	ldr	r3, [pc, #28]	; (8003838 <MX_USB_PCD_Init+0x48>)
 800381a:	2200      	movs	r2, #0
 800381c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <MX_USB_PCD_Init+0x48>)
 8003820:	2200      	movs	r2, #0
 8003822:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003824:	4804      	ldr	r0, [pc, #16]	; (8003838 <MX_USB_PCD_Init+0x48>)
 8003826:	f007 fa09 	bl	800ac3c <HAL_PCD_Init>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8003830:	f000 f920 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003834:	bf00      	nop
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000988 	.word	0x20000988
 800383c:	40005c00 	.word	0x40005c00

08003840 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003846:	4b22      	ldr	r3, [pc, #136]	; (80038d0 <MX_DMA_Init+0x90>)
 8003848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384a:	4a21      	ldr	r2, [pc, #132]	; (80038d0 <MX_DMA_Init+0x90>)
 800384c:	f043 0304 	orr.w	r3, r3, #4
 8003850:	6493      	str	r3, [r2, #72]	; 0x48
 8003852:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <MX_DMA_Init+0x90>)
 8003854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	607b      	str	r3, [r7, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800385e:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <MX_DMA_Init+0x90>)
 8003860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003862:	4a1b      	ldr	r2, [pc, #108]	; (80038d0 <MX_DMA_Init+0x90>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6493      	str	r3, [r2, #72]	; 0x48
 800386a:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <MX_DMA_Init+0x90>)
 800386c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003876:	2200      	movs	r2, #0
 8003878:	2100      	movs	r1, #0
 800387a:	200b      	movs	r0, #11
 800387c:	f003 f937 	bl	8006aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003880:	200b      	movs	r0, #11
 8003882:	f003 f94e 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003886:	2200      	movs	r2, #0
 8003888:	2100      	movs	r1, #0
 800388a:	200c      	movs	r0, #12
 800388c:	f003 f92f 	bl	8006aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003890:	200c      	movs	r0, #12
 8003892:	f003 f946 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003896:	2200      	movs	r2, #0
 8003898:	2100      	movs	r1, #0
 800389a:	200d      	movs	r0, #13
 800389c:	f003 f927 	bl	8006aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80038a0:	200d      	movs	r0, #13
 80038a2:	f003 f93e 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80038a6:	2200      	movs	r2, #0
 80038a8:	2100      	movs	r1, #0
 80038aa:	200e      	movs	r0, #14
 80038ac:	f003 f91f 	bl	8006aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80038b0:	200e      	movs	r0, #14
 80038b2:	f003 f936 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80038b6:	2200      	movs	r2, #0
 80038b8:	2100      	movs	r1, #0
 80038ba:	200f      	movs	r0, #15
 80038bc:	f003 f917 	bl	8006aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80038c0:	200f      	movs	r0, #15
 80038c2:	f003 f92e 	bl	8006b22 <HAL_NVIC_EnableIRQ>

}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000

080038d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08c      	sub	sp, #48	; 0x30
 80038d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038da:	f107 031c 	add.w	r3, r7, #28
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	609a      	str	r2, [r3, #8]
 80038e6:	60da      	str	r2, [r3, #12]
 80038e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038ea:	4b5d      	ldr	r3, [pc, #372]	; (8003a60 <MX_GPIO_Init+0x18c>)
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	4a5c      	ldr	r2, [pc, #368]	; (8003a60 <MX_GPIO_Init+0x18c>)
 80038f0:	f043 0310 	orr.w	r3, r3, #16
 80038f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038f6:	4b5a      	ldr	r3, [pc, #360]	; (8003a60 <MX_GPIO_Init+0x18c>)
 80038f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003902:	4b57      	ldr	r3, [pc, #348]	; (8003a60 <MX_GPIO_Init+0x18c>)
 8003904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003906:	4a56      	ldr	r2, [pc, #344]	; (8003a60 <MX_GPIO_Init+0x18c>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800390e:	4b54      	ldr	r3, [pc, #336]	; (8003a60 <MX_GPIO_Init+0x18c>)
 8003910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800391a:	4b51      	ldr	r3, [pc, #324]	; (8003a60 <MX_GPIO_Init+0x18c>)
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	4a50      	ldr	r2, [pc, #320]	; (8003a60 <MX_GPIO_Init+0x18c>)
 8003920:	f043 0320 	orr.w	r3, r3, #32
 8003924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003926:	4b4e      	ldr	r3, [pc, #312]	; (8003a60 <MX_GPIO_Init+0x18c>)
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003932:	4b4b      	ldr	r3, [pc, #300]	; (8003a60 <MX_GPIO_Init+0x18c>)
 8003934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003936:	4a4a      	ldr	r2, [pc, #296]	; (8003a60 <MX_GPIO_Init+0x18c>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800393e:	4b48      	ldr	r3, [pc, #288]	; (8003a60 <MX_GPIO_Init+0x18c>)
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800394a:	4b45      	ldr	r3, [pc, #276]	; (8003a60 <MX_GPIO_Init+0x18c>)
 800394c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394e:	4a44      	ldr	r2, [pc, #272]	; (8003a60 <MX_GPIO_Init+0x18c>)
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003956:	4b42      	ldr	r3, [pc, #264]	; (8003a60 <MX_GPIO_Init+0x18c>)
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003962:	4b3f      	ldr	r3, [pc, #252]	; (8003a60 <MX_GPIO_Init+0x18c>)
 8003964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003966:	4a3e      	ldr	r2, [pc, #248]	; (8003a60 <MX_GPIO_Init+0x18c>)
 8003968:	f043 0308 	orr.w	r3, r3, #8
 800396c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800396e:	4b3c      	ldr	r3, [pc, #240]	; (8003a60 <MX_GPIO_Init+0x18c>)
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800397a:	2200      	movs	r2, #0
 800397c:	f64e 71c0 	movw	r1, #61376	; 0xefc0
 8003980:	4838      	ldr	r0, [pc, #224]	; (8003a64 <MX_GPIO_Init+0x190>)
 8003982:	f004 fbcd 	bl	8008120 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003986:	2200      	movs	r2, #0
 8003988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800398c:	4836      	ldr	r0, [pc, #216]	; (8003a68 <MX_GPIO_Init+0x194>)
 800398e:	f004 fbc7 	bl	8008120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8003992:	2200      	movs	r2, #0
 8003994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003998:	4834      	ldr	r0, [pc, #208]	; (8003a6c <MX_GPIO_Init+0x198>)
 800399a:	f004 fbc1 	bl	8008120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800399e:	2200      	movs	r2, #0
 80039a0:	f64f 711c 	movw	r1, #65308	; 0xff1c
 80039a4:	4832      	ldr	r0, [pc, #200]	; (8003a70 <MX_GPIO_Init+0x19c>)
 80039a6:	f004 fbbb 	bl	8008120 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80039aa:	233c      	movs	r3, #60	; 0x3c
 80039ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039ae:	2300      	movs	r3, #0
 80039b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039b6:	f107 031c 	add.w	r3, r7, #28
 80039ba:	4619      	mov	r1, r3
 80039bc:	4829      	ldr	r0, [pc, #164]	; (8003a64 <MX_GPIO_Init+0x190>)
 80039be:	f004 fa2d 	bl	8007e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9
                           PE10 PE11 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80039c2:	f64e 73c0 	movw	r3, #61376	; 0xefc0
 80039c6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039c8:	2301      	movs	r3, #1
 80039ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d0:	2300      	movs	r3, #0
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039d4:	f107 031c 	add.w	r3, r7, #28
 80039d8:	4619      	mov	r1, r3
 80039da:	4822      	ldr	r0, [pc, #136]	; (8003a64 <MX_GPIO_Init+0x190>)
 80039dc:	f004 fa1e 	bl	8007e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80039e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039e6:	2301      	movs	r3, #1
 80039e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ee:	2300      	movs	r3, #0
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039f2:	f107 031c 	add.w	r3, r7, #28
 80039f6:	4619      	mov	r1, r3
 80039f8:	481b      	ldr	r0, [pc, #108]	; (8003a68 <MX_GPIO_Init+0x194>)
 80039fa:	f004 fa0f 	bl	8007e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80039fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a04:	2301      	movs	r3, #1
 8003a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a10:	f107 031c 	add.w	r3, r7, #28
 8003a14:	4619      	mov	r1, r3
 8003a16:	4815      	ldr	r0, [pc, #84]	; (8003a6c <MX_GPIO_Init+0x198>)
 8003a18:	f004 fa00 	bl	8007e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003a1c:	f64f 731c 	movw	r3, #65308	; 0xff1c
 8003a20:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a22:	2301      	movs	r3, #1
 8003a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a2e:	f107 031c 	add.w	r3, r7, #28
 8003a32:	4619      	mov	r1, r3
 8003a34:	480e      	ldr	r0, [pc, #56]	; (8003a70 <MX_GPIO_Init+0x19c>)
 8003a36:	f004 f9f1 	bl	8007e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a40:	2300      	movs	r3, #0
 8003a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a48:	f107 031c 	add.w	r3, r7, #28
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a52:	f004 f9e3 	bl	8007e1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a56:	bf00      	nop
 8003a58:	3730      	adds	r7, #48	; 0x30
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000
 8003a64:	48001000 	.word	0x48001000
 8003a68:	48000800 	.word	0x48000800
 8003a6c:	48000400 	.word	0x48000400
 8003a70:	48000c00 	.word	0x48000c00

08003a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a78:	b672      	cpsid	i
}
 8003a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <Error_Handler+0x8>
	...

08003a80 <precharge>:
extern TIM_HandleTypeDef htim2;
uint16_t RelayStates = 0x0000;

//PORT MATCHES LETTER

void precharge(void){
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
 //high side on, low side precharge resitor on wait 500ms then low side main on, resistor off
	HAL_GPIO_WritePin(GPIOE, RELAY14, GPIO_PIN_SET); //LOW SIDE ON
 8003a84:	4819      	ldr	r0, [pc, #100]	; (8003aec <precharge+0x6c>)
 8003a86:	f009 ff7f 	bl	800d988 <atoi>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2201      	movs	r2, #1
 8003a90:	4619      	mov	r1, r3
 8003a92:	4817      	ldr	r0, [pc, #92]	; (8003af0 <precharge+0x70>)
 8003a94:	f004 fb44 	bl	8008120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY9, GPIO_PIN_SET);
 8003a98:	4816      	ldr	r0, [pc, #88]	; (8003af4 <precharge+0x74>)
 8003a9a:	f009 ff75 	bl	800d988 <atoi>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4812      	ldr	r0, [pc, #72]	; (8003af0 <precharge+0x70>)
 8003aa8:	f004 fb3a 	bl	8008120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_SET); //RESISTOR ON
 8003aac:	4812      	ldr	r0, [pc, #72]	; (8003af8 <precharge+0x78>)
 8003aae:	f009 ff6b 	bl	800d988 <atoi>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4619      	mov	r1, r3
 8003aba:	480d      	ldr	r0, [pc, #52]	; (8003af0 <precharge+0x70>)
 8003abc:	f004 fb30 	bl	8008120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_SET);
 8003ac0:	480e      	ldr	r0, [pc, #56]	; (8003afc <precharge+0x7c>)
 8003ac2:	f009 ff61 	bl	800d988 <atoi>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2201      	movs	r2, #1
 8003acc:	4619      	mov	r1, r3
 8003ace:	4808      	ldr	r0, [pc, #32]	; (8003af0 <precharge+0x70>)
 8003ad0:	f004 fb26 	bl	8008120 <HAL_GPIO_WritePin>
	RelayStates = RelayStates | 0x00C6;
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <precharge+0x80>)
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	f043 03c6 	orr.w	r3, r3, #198	; 0xc6
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <precharge+0x80>)
 8003ae0:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8003ae2:	4808      	ldr	r0, [pc, #32]	; (8003b04 <precharge+0x84>)
 8003ae4:	f008 fb00 	bl	800c0e8 <HAL_TIM_Base_Start_IT>
}
 8003ae8:	bf00      	nop
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	0800e8b0 	.word	0x0800e8b0
 8003af0:	48001000 	.word	0x48001000
 8003af4:	0800e8bc 	.word	0x0800e8bc
 8003af8:	0800e8c8 	.word	0x0800e8c8
 8003afc:	0800e8d4 	.word	0x0800e8d4
 8003b00:	20000c68 	.word	0x20000c68
 8003b04:	200008f0 	.word	0x200008f0

08003b08 <HV_on>:
void HV_on(void){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, RELAY11, GPIO_PIN_SET); //HIGHSIDE ON
 8003b0c:	481b      	ldr	r0, [pc, #108]	; (8003b7c <HV_on+0x74>)
 8003b0e:	f009 ff3b 	bl	800d988 <atoi>
 8003b12:	4603      	mov	r3, r0
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2201      	movs	r2, #1
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4819      	ldr	r0, [pc, #100]	; (8003b80 <HV_on+0x78>)
 8003b1c:	f004 fb00 	bl	8008120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY16, GPIO_PIN_SET);
 8003b20:	4818      	ldr	r0, [pc, #96]	; (8003b84 <HV_on+0x7c>)
 8003b22:	f009 ff31 	bl	800d988 <atoi>
 8003b26:	4603      	mov	r3, r0
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4814      	ldr	r0, [pc, #80]	; (8003b80 <HV_on+0x78>)
 8003b30:	f004 faf6 	bl	8008120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_RESET); //RESISTOR OFF
 8003b34:	4814      	ldr	r0, [pc, #80]	; (8003b88 <HV_on+0x80>)
 8003b36:	f009 ff27 	bl	800d988 <atoi>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2200      	movs	r2, #0
 8003b40:	4619      	mov	r1, r3
 8003b42:	480f      	ldr	r0, [pc, #60]	; (8003b80 <HV_on+0x78>)
 8003b44:	f004 faec 	bl	8008120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_RESET);
 8003b48:	4810      	ldr	r0, [pc, #64]	; (8003b8c <HV_on+0x84>)
 8003b4a:	f009 ff1d 	bl	800d988 <atoi>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2200      	movs	r2, #0
 8003b54:	4619      	mov	r1, r3
 8003b56:	480a      	ldr	r0, [pc, #40]	; (8003b80 <HV_on+0x78>)
 8003b58:	f004 fae2 	bl	8008120 <HAL_GPIO_WritePin>
	RelayStates = RelayStates | 0x0021;
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <HV_on+0x88>)
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <HV_on+0x88>)
 8003b68:	801a      	strh	r2, [r3, #0]
	RelayStates = RelayStates & 0xFFBD;
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <HV_on+0x88>)
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	f023 0342 	bic.w	r3, r3, #66	; 0x42
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HV_on+0x88>)
 8003b76:	801a      	strh	r2, [r3, #0]

}
 8003b78:	bf00      	nop
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	0800e8e0 	.word	0x0800e8e0
 8003b80:	48001000 	.word	0x48001000
 8003b84:	0800e8ec 	.word	0x0800e8ec
 8003b88:	0800e8c8 	.word	0x0800e8c8
 8003b8c:	0800e8d4 	.word	0x0800e8d4
 8003b90:	20000c68 	.word	0x20000c68

08003b94 <HV_off>:

void HV_off(void){
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, RELAY11, GPIO_PIN_RESET); //HIGHSIDE OFF
 8003b98:	4818      	ldr	r0, [pc, #96]	; (8003bfc <HV_off+0x68>)
 8003b9a:	f009 fef5 	bl	800d988 <atoi>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4816      	ldr	r0, [pc, #88]	; (8003c00 <HV_off+0x6c>)
 8003ba8:	f004 faba 	bl	8008120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY16, GPIO_PIN_RESET);
 8003bac:	4815      	ldr	r0, [pc, #84]	; (8003c04 <HV_off+0x70>)
 8003bae:	f009 feeb 	bl	800d988 <atoi>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4811      	ldr	r0, [pc, #68]	; (8003c00 <HV_off+0x6c>)
 8003bbc:	f004 fab0 	bl	8008120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY14, GPIO_PIN_RESET); //LOW SIDE OFF
 8003bc0:	4811      	ldr	r0, [pc, #68]	; (8003c08 <HV_off+0x74>)
 8003bc2:	f009 fee1 	bl	800d988 <atoi>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2200      	movs	r2, #0
 8003bcc:	4619      	mov	r1, r3
 8003bce:	480c      	ldr	r0, [pc, #48]	; (8003c00 <HV_off+0x6c>)
 8003bd0:	f004 faa6 	bl	8008120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY9, GPIO_PIN_RESET);
 8003bd4:	480d      	ldr	r0, [pc, #52]	; (8003c0c <HV_off+0x78>)
 8003bd6:	f009 fed7 	bl	800d988 <atoi>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2200      	movs	r2, #0
 8003be0:	4619      	mov	r1, r3
 8003be2:	4807      	ldr	r0, [pc, #28]	; (8003c00 <HV_off+0x6c>)
 8003be4:	f004 fa9c 	bl	8008120 <HAL_GPIO_WritePin>
	RelayStates = RelayStates & 0xFF5A;
 8003be8:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <HV_off+0x7c>)
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	f023 03a5 	bic.w	r3, r3, #165	; 0xa5
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <HV_off+0x7c>)
 8003bf4:	801a      	strh	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	0800e8e0 	.word	0x0800e8e0
 8003c00:	48001000 	.word	0x48001000
 8003c04:	0800e8ec 	.word	0x0800e8ec
 8003c08:	0800e8b0 	.word	0x0800e8b0
 8003c0c:	0800e8bc 	.word	0x0800e8bc
 8003c10:	20000c68 	.word	0x20000c68

08003c14 <redstatus>:

void redstatus(uint8_t state){
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d113      	bne.n	8003c4c <redstatus+0x38>
		HAL_GPIO_WritePin(GPIOD, RELAY1, GPIO_PIN_SET);
 8003c24:	4814      	ldr	r0, [pc, #80]	; (8003c78 <redstatus+0x64>)
 8003c26:	f009 feaf 	bl	800d988 <atoi>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2201      	movs	r2, #1
 8003c30:	4619      	mov	r1, r3
 8003c32:	4812      	ldr	r0, [pc, #72]	; (8003c7c <redstatus+0x68>)
 8003c34:	f004 fa74 	bl	8008120 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x8000;
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <redstatus+0x6c>)
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <redstatus+0x6c>)
 8003c48:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY1, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0x7FFF;
	}

}
 8003c4a:	e010      	b.n	8003c6e <redstatus+0x5a>
		HAL_GPIO_WritePin(GPIOD, RELAY1, GPIO_PIN_RESET);
 8003c4c:	480a      	ldr	r0, [pc, #40]	; (8003c78 <redstatus+0x64>)
 8003c4e:	f009 fe9b 	bl	800d988 <atoi>
 8003c52:	4603      	mov	r3, r0
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2200      	movs	r2, #0
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4808      	ldr	r0, [pc, #32]	; (8003c7c <redstatus+0x68>)
 8003c5c:	f004 fa60 	bl	8008120 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0x7FFF;
 8003c60:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <redstatus+0x6c>)
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <redstatus+0x6c>)
 8003c6c:	801a      	strh	r2, [r3, #0]
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	0800e8ec 	.word	0x0800e8ec
 8003c7c:	48000c00 	.word	0x48000c00
 8003c80:	20000c68 	.word	0x20000c68

08003c84 <yellowstatus>:

void yellowstatus(uint8_t state){
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d111      	bne.n	8003cb8 <yellowstatus+0x34>
		HAL_GPIO_WritePin(GPIOD, RELAY2, GPIO_PIN_SET);
 8003c94:	4813      	ldr	r0, [pc, #76]	; (8003ce4 <yellowstatus+0x60>)
 8003c96:	f009 fe77 	bl	800d988 <atoi>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4811      	ldr	r0, [pc, #68]	; (8003ce8 <yellowstatus+0x64>)
 8003ca4:	f004 fa3c 	bl	8008120 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x4000;
 8003ca8:	4b10      	ldr	r3, [pc, #64]	; (8003cec <yellowstatus+0x68>)
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <yellowstatus+0x68>)
 8003cb4:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY2, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xBFFF;
	}
}
 8003cb6:	e010      	b.n	8003cda <yellowstatus+0x56>
		HAL_GPIO_WritePin(GPIOD, RELAY2, GPIO_PIN_RESET);
 8003cb8:	480a      	ldr	r0, [pc, #40]	; (8003ce4 <yellowstatus+0x60>)
 8003cba:	f009 fe65 	bl	800d988 <atoi>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4808      	ldr	r0, [pc, #32]	; (8003ce8 <yellowstatus+0x64>)
 8003cc8:	f004 fa2a 	bl	8008120 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xBFFF;
 8003ccc:	4b07      	ldr	r3, [pc, #28]	; (8003cec <yellowstatus+0x68>)
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <yellowstatus+0x68>)
 8003cd8:	801a      	strh	r2, [r3, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	0800e8c8 	.word	0x0800e8c8
 8003ce8:	48000c00 	.word	0x48000c00
 8003cec:	20000c68 	.word	0x20000c68

08003cf0 <greenstatus>:

void greenstatus(uint8_t state){
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d111      	bne.n	8003d24 <greenstatus+0x34>
		HAL_GPIO_WritePin(GPIOD, RELAY3, GPIO_PIN_SET);
 8003d00:	4813      	ldr	r0, [pc, #76]	; (8003d50 <greenstatus+0x60>)
 8003d02:	f009 fe41 	bl	800d988 <atoi>
 8003d06:	4603      	mov	r3, r0
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4811      	ldr	r0, [pc, #68]	; (8003d54 <greenstatus+0x64>)
 8003d10:	f004 fa06 	bl	8008120 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x2000;
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <greenstatus+0x68>)
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <greenstatus+0x68>)
 8003d20:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY3, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xDFFF;
	}
}
 8003d22:	e010      	b.n	8003d46 <greenstatus+0x56>
		HAL_GPIO_WritePin(GPIOD, RELAY3, GPIO_PIN_RESET);
 8003d24:	480a      	ldr	r0, [pc, #40]	; (8003d50 <greenstatus+0x60>)
 8003d26:	f009 fe2f 	bl	800d988 <atoi>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4619      	mov	r1, r3
 8003d32:	4808      	ldr	r0, [pc, #32]	; (8003d54 <greenstatus+0x64>)
 8003d34:	f004 f9f4 	bl	8008120 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xDFFF;
 8003d38:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <greenstatus+0x68>)
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <greenstatus+0x68>)
 8003d44:	801a      	strh	r2, [r3, #0]
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	0800e8b0 	.word	0x0800e8b0
 8003d54:	48000c00 	.word	0x48000c00
 8003d58:	20000c68 	.word	0x20000c68

08003d5c <brake_state>:

void brake_state(uint8_t state){
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d111      	bne.n	8003d90 <brake_state+0x34>
		HAL_GPIO_WritePin(GPIOD, RELAY4, GPIO_PIN_SET);
 8003d6c:	4813      	ldr	r0, [pc, #76]	; (8003dbc <brake_state+0x60>)
 8003d6e:	f009 fe0b 	bl	800d988 <atoi>
 8003d72:	4603      	mov	r3, r0
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2201      	movs	r2, #1
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4811      	ldr	r0, [pc, #68]	; (8003dc0 <brake_state+0x64>)
 8003d7c:	f004 f9d0 	bl	8008120 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x1000;
 8003d80:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <brake_state+0x68>)
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <brake_state+0x68>)
 8003d8c:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY4, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xEFFF;
	}
}
 8003d8e:	e010      	b.n	8003db2 <brake_state+0x56>
		HAL_GPIO_WritePin(GPIOD, RELAY4, GPIO_PIN_RESET);
 8003d90:	480a      	ldr	r0, [pc, #40]	; (8003dbc <brake_state+0x60>)
 8003d92:	f009 fdf9 	bl	800d988 <atoi>
 8003d96:	4603      	mov	r3, r0
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4808      	ldr	r0, [pc, #32]	; (8003dc0 <brake_state+0x64>)
 8003da0:	f004 f9be 	bl	8008120 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xEFFF;
 8003da4:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <brake_state+0x68>)
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <brake_state+0x68>)
 8003db0:	801a      	strh	r2, [r3, #0]
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	0800e8f8 	.word	0x0800e8f8
 8003dc0:	48000c00 	.word	0x48000c00
 8003dc4:	20000c68 	.word	0x20000c68

08003dc8 <pump_control>:

void pump_control(uint8_t state){
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d11b      	bne.n	8003e10 <pump_control+0x48>
		HAL_GPIO_WritePin(GPIOD, RELAY5, GPIO_PIN_SET);
 8003dd8:	481d      	ldr	r0, [pc, #116]	; (8003e50 <pump_control+0x88>)
 8003dda:	f009 fdd5 	bl	800d988 <atoi>
 8003dde:	4603      	mov	r3, r0
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2201      	movs	r2, #1
 8003de4:	4619      	mov	r1, r3
 8003de6:	481b      	ldr	r0, [pc, #108]	; (8003e54 <pump_control+0x8c>)
 8003de8:	f004 f99a 	bl	8008120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, RELAY6, GPIO_PIN_RESET);
 8003dec:	481a      	ldr	r0, [pc, #104]	; (8003e58 <pump_control+0x90>)
 8003dee:	f009 fdcb 	bl	800d988 <atoi>
 8003df2:	4603      	mov	r3, r0
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2200      	movs	r2, #0
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4816      	ldr	r0, [pc, #88]	; (8003e54 <pump_control+0x8c>)
 8003dfc:	f004 f990 	bl	8008120 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x0C00;
 8003e00:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <pump_control+0x94>)
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	4b14      	ldr	r3, [pc, #80]	; (8003e5c <pump_control+0x94>)
 8003e0c:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY5, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD, RELAY6, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xF7FF;
	}
}
 8003e0e:	e01a      	b.n	8003e46 <pump_control+0x7e>
		HAL_GPIO_WritePin(GPIOD, RELAY5, GPIO_PIN_SET);
 8003e10:	480f      	ldr	r0, [pc, #60]	; (8003e50 <pump_control+0x88>)
 8003e12:	f009 fdb9 	bl	800d988 <atoi>
 8003e16:	4603      	mov	r3, r0
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	480d      	ldr	r0, [pc, #52]	; (8003e54 <pump_control+0x8c>)
 8003e20:	f004 f97e 	bl	8008120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, RELAY6, GPIO_PIN_RESET);
 8003e24:	480c      	ldr	r0, [pc, #48]	; (8003e58 <pump_control+0x90>)
 8003e26:	f009 fdaf 	bl	800d988 <atoi>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2200      	movs	r2, #0
 8003e30:	4619      	mov	r1, r3
 8003e32:	4808      	ldr	r0, [pc, #32]	; (8003e54 <pump_control+0x8c>)
 8003e34:	f004 f974 	bl	8008120 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xF7FF;
 8003e38:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <pump_control+0x94>)
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <pump_control+0x94>)
 8003e44:	801a      	strh	r2, [r3, #0]
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	0800e904 	.word	0x0800e904
 8003e54:	48000c00 	.word	0x48000c00
 8003e58:	0800e910 	.word	0x0800e910
 8003e5c:	20000c68 	.word	0x20000c68

08003e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6613      	str	r3, [r2, #96]	; 0x60
 8003e72:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	607b      	str	r3, [r7, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6593      	str	r3, [r2, #88]	; 0x58
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003e96:	f007 f86d 	bl	800af74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40021000 	.word	0x40021000

08003ea8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b0a0      	sub	sp, #128	; 0x80
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
 8003ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ec0:	f107 0318 	add.w	r3, r7, #24
 8003ec4:	2254      	movs	r2, #84	; 0x54
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f009 ffe3 	bl	800de94 <memset>
  if(hadc->Instance==ADC1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ed6:	d160      	bne.n	8003f9a <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003edc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003ede:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ee4:	f107 0318 	add.w	r3, r7, #24
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f007 fdad 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003ef4:	f7ff fdbe 	bl	8003a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003ef8:	4b5d      	ldr	r3, [pc, #372]	; (8004070 <HAL_ADC_MspInit+0x1c8>)
 8003efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efc:	4a5c      	ldr	r2, [pc, #368]	; (8004070 <HAL_ADC_MspInit+0x1c8>)
 8003efe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f04:	4b5a      	ldr	r3, [pc, #360]	; (8004070 <HAL_ADC_MspInit+0x1c8>)
 8003f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f10:	4b57      	ldr	r3, [pc, #348]	; (8004070 <HAL_ADC_MspInit+0x1c8>)
 8003f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f14:	4a56      	ldr	r2, [pc, #344]	; (8004070 <HAL_ADC_MspInit+0x1c8>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f1c:	4b54      	ldr	r3, [pc, #336]	; (8004070 <HAL_ADC_MspInit+0x1c8>)
 8003f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003f28:	230f      	movs	r3, #15
 8003f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f3e:	f003 ff6d 	bl	8007e1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003f42:	4b4c      	ldr	r3, [pc, #304]	; (8004074 <HAL_ADC_MspInit+0x1cc>)
 8003f44:	4a4c      	ldr	r2, [pc, #304]	; (8004078 <HAL_ADC_MspInit+0x1d0>)
 8003f46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003f48:	4b4a      	ldr	r3, [pc, #296]	; (8004074 <HAL_ADC_MspInit+0x1cc>)
 8003f4a:	2205      	movs	r2, #5
 8003f4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f4e:	4b49      	ldr	r3, [pc, #292]	; (8004074 <HAL_ADC_MspInit+0x1cc>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f54:	4b47      	ldr	r3, [pc, #284]	; (8004074 <HAL_ADC_MspInit+0x1cc>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003f5a:	4b46      	ldr	r3, [pc, #280]	; (8004074 <HAL_ADC_MspInit+0x1cc>)
 8003f5c:	2280      	movs	r2, #128	; 0x80
 8003f5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f60:	4b44      	ldr	r3, [pc, #272]	; (8004074 <HAL_ADC_MspInit+0x1cc>)
 8003f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f68:	4b42      	ldr	r3, [pc, #264]	; (8004074 <HAL_ADC_MspInit+0x1cc>)
 8003f6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f6e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003f70:	4b40      	ldr	r3, [pc, #256]	; (8004074 <HAL_ADC_MspInit+0x1cc>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003f76:	4b3f      	ldr	r3, [pc, #252]	; (8004074 <HAL_ADC_MspInit+0x1cc>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f7c:	483d      	ldr	r0, [pc, #244]	; (8004074 <HAL_ADC_MspInit+0x1cc>)
 8003f7e:	f002 fdeb 	bl	8006b58 <HAL_DMA_Init>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003f88:	f7ff fd74 	bl	8003a74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a39      	ldr	r2, [pc, #228]	; (8004074 <HAL_ADC_MspInit+0x1cc>)
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
 8003f92:	4a38      	ldr	r2, [pc, #224]	; (8004074 <HAL_ADC_MspInit+0x1cc>)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003f98:	e065      	b.n	8004066 <HAL_ADC_MspInit+0x1be>
  else if(hadc->Instance==ADC5)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a37      	ldr	r2, [pc, #220]	; (800407c <HAL_ADC_MspInit+0x1d4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d160      	bne.n	8004066 <HAL_ADC_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fa8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8003faa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003fae:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fb0:	f107 0318 	add.w	r3, r7, #24
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f007 fd47 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 8003fc0:	f7ff fd58 	bl	8003a74 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8003fc4:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <HAL_ADC_MspInit+0x1c8>)
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc8:	4a29      	ldr	r2, [pc, #164]	; (8004070 <HAL_ADC_MspInit+0x1c8>)
 8003fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fd0:	4b27      	ldr	r3, [pc, #156]	; (8004070 <HAL_ADC_MspInit+0x1c8>)
 8003fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fdc:	4b24      	ldr	r3, [pc, #144]	; (8004070 <HAL_ADC_MspInit+0x1c8>)
 8003fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe0:	4a23      	ldr	r2, [pc, #140]	; (8004070 <HAL_ADC_MspInit+0x1c8>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fe8:	4b21      	ldr	r3, [pc, #132]	; (8004070 <HAL_ADC_MspInit+0x1c8>)
 8003fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004002:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004006:	4619      	mov	r1, r3
 8004008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800400c:	f003 ff06 	bl	8007e1c <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8004010:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <HAL_ADC_MspInit+0x1d8>)
 8004012:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <HAL_ADC_MspInit+0x1dc>)
 8004014:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8004016:	4b1a      	ldr	r3, [pc, #104]	; (8004080 <HAL_ADC_MspInit+0x1d8>)
 8004018:	2227      	movs	r2, #39	; 0x27
 800401a:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800401c:	4b18      	ldr	r3, [pc, #96]	; (8004080 <HAL_ADC_MspInit+0x1d8>)
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8004022:	4b17      	ldr	r3, [pc, #92]	; (8004080 <HAL_ADC_MspInit+0x1d8>)
 8004024:	2200      	movs	r2, #0
 8004026:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8004028:	4b15      	ldr	r3, [pc, #84]	; (8004080 <HAL_ADC_MspInit+0x1d8>)
 800402a:	2280      	movs	r2, #128	; 0x80
 800402c:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800402e:	4b14      	ldr	r3, [pc, #80]	; (8004080 <HAL_ADC_MspInit+0x1d8>)
 8004030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004034:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_ADC_MspInit+0x1d8>)
 8004038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800403c:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <HAL_ADC_MspInit+0x1d8>)
 8004040:	2200      	movs	r2, #0
 8004042:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8004044:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <HAL_ADC_MspInit+0x1d8>)
 8004046:	2200      	movs	r2, #0
 8004048:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800404a:	480d      	ldr	r0, [pc, #52]	; (8004080 <HAL_ADC_MspInit+0x1d8>)
 800404c:	f002 fd84 	bl	8006b58 <HAL_DMA_Init>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8004056:	f7ff fd0d 	bl	8003a74 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a08      	ldr	r2, [pc, #32]	; (8004080 <HAL_ADC_MspInit+0x1d8>)
 800405e:	655a      	str	r2, [r3, #84]	; 0x54
 8004060:	4a07      	ldr	r2, [pc, #28]	; (8004080 <HAL_ADC_MspInit+0x1d8>)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004066:	bf00      	nop
 8004068:	3780      	adds	r7, #128	; 0x80
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40021000 	.word	0x40021000
 8004074:	2000037c 	.word	0x2000037c
 8004078:	40020008 	.word	0x40020008
 800407c:	50000600 	.word	0x50000600
 8004080:	200003dc 	.word	0x200003dc
 8004084:	40020058 	.word	0x40020058

08004088 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b0a2      	sub	sp, #136	; 0x88
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040a0:	f107 0320 	add.w	r3, r7, #32
 80040a4:	2254      	movs	r2, #84	; 0x54
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f009 fef3 	bl	800de94 <memset>
  if(hfdcan->Instance==FDCAN1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a7a      	ldr	r2, [pc, #488]	; (800429c <HAL_FDCAN_MspInit+0x214>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d14b      	bne.n	8004150 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80040b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80040be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040c2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040c4:	f107 0320 	add.w	r3, r7, #32
 80040c8:	4618      	mov	r0, r3
 80040ca:	f007 fcbd 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80040d4:	f7ff fcce 	bl	8003a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80040d8:	4b71      	ldr	r3, [pc, #452]	; (80042a0 <HAL_FDCAN_MspInit+0x218>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	4a70      	ldr	r2, [pc, #448]	; (80042a0 <HAL_FDCAN_MspInit+0x218>)
 80040e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80040e2:	4b6f      	ldr	r3, [pc, #444]	; (80042a0 <HAL_FDCAN_MspInit+0x218>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d10b      	bne.n	8004102 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80040ea:	4b6e      	ldr	r3, [pc, #440]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 80040ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ee:	4a6d      	ldr	r2, [pc, #436]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 80040f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040f4:	6593      	str	r3, [r2, #88]	; 0x58
 80040f6:	4b6b      	ldr	r3, [pc, #428]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004102:	4b68      	ldr	r3, [pc, #416]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 8004104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004106:	4a67      	ldr	r2, [pc, #412]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 8004108:	f043 0308 	orr.w	r3, r3, #8
 800410c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800410e:	4b65      	ldr	r3, [pc, #404]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 8004110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800411a:	2303      	movs	r3, #3
 800411c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411e:	2302      	movs	r3, #2
 8004120:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004122:	2300      	movs	r3, #0
 8004124:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004126:	2300      	movs	r3, #0
 8004128:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800412c:	2309      	movs	r3, #9
 800412e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004132:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004136:	4619      	mov	r1, r3
 8004138:	485b      	ldr	r0, [pc, #364]	; (80042a8 <HAL_FDCAN_MspInit+0x220>)
 800413a:	f003 fe6f 	bl	8007e1c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800413e:	2200      	movs	r2, #0
 8004140:	2100      	movs	r1, #0
 8004142:	2015      	movs	r0, #21
 8004144:	f002 fcd3 	bl	8006aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004148:	2015      	movs	r0, #21
 800414a:	f002 fcea 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800414e:	e0a1      	b.n	8004294 <HAL_FDCAN_MspInit+0x20c>
  else if(hfdcan->Instance==FDCAN2)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a55      	ldr	r2, [pc, #340]	; (80042ac <HAL_FDCAN_MspInit+0x224>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d14c      	bne.n	80041f4 <HAL_FDCAN_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800415a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800415e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004164:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004166:	f107 0320 	add.w	r3, r7, #32
 800416a:	4618      	mov	r0, r3
 800416c:	f007 fc6c 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 8004176:	f7ff fc7d 	bl	8003a74 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800417a:	4b49      	ldr	r3, [pc, #292]	; (80042a0 <HAL_FDCAN_MspInit+0x218>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	4a47      	ldr	r2, [pc, #284]	; (80042a0 <HAL_FDCAN_MspInit+0x218>)
 8004182:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8004184:	4b46      	ldr	r3, [pc, #280]	; (80042a0 <HAL_FDCAN_MspInit+0x218>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d10b      	bne.n	80041a4 <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800418c:	4b45      	ldr	r3, [pc, #276]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	4a44      	ldr	r2, [pc, #272]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 8004192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004196:	6593      	str	r3, [r2, #88]	; 0x58
 8004198:	4b42      	ldr	r3, [pc, #264]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a4:	4b3f      	ldr	r3, [pc, #252]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 80041a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a8:	4a3e      	ldr	r2, [pc, #248]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 80041aa:	f043 0302 	orr.w	r3, r3, #2
 80041ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041b0:	4b3c      	ldr	r3, [pc, #240]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 80041b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80041bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80041c0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c2:	2302      	movs	r3, #2
 80041c4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ca:	2300      	movs	r3, #0
 80041cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80041d0:	2309      	movs	r3, #9
 80041d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80041da:	4619      	mov	r1, r3
 80041dc:	4834      	ldr	r0, [pc, #208]	; (80042b0 <HAL_FDCAN_MspInit+0x228>)
 80041de:	f003 fe1d 	bl	8007e1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 80041e2:	2200      	movs	r2, #0
 80041e4:	2100      	movs	r1, #0
 80041e6:	2056      	movs	r0, #86	; 0x56
 80041e8:	f002 fc81 	bl	8006aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80041ec:	2056      	movs	r0, #86	; 0x56
 80041ee:	f002 fc98 	bl	8006b22 <HAL_NVIC_EnableIRQ>
}
 80041f2:	e04f      	b.n	8004294 <HAL_FDCAN_MspInit+0x20c>
  else if(hfdcan->Instance==FDCAN3)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a2e      	ldr	r2, [pc, #184]	; (80042b4 <HAL_FDCAN_MspInit+0x22c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d14a      	bne.n	8004294 <HAL_FDCAN_MspInit+0x20c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80041fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004202:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004208:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800420a:	f107 0320 	add.w	r3, r7, #32
 800420e:	4618      	mov	r0, r3
 8004210:	f007 fc1a 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_FDCAN_MspInit+0x196>
      Error_Handler();
 800421a:	f7ff fc2b 	bl	8003a74 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <HAL_FDCAN_MspInit+0x218>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3301      	adds	r3, #1
 8004224:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <HAL_FDCAN_MspInit+0x218>)
 8004226:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8004228:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <HAL_FDCAN_MspInit+0x218>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d10b      	bne.n	8004248 <HAL_FDCAN_MspInit+0x1c0>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8004230:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	4a1b      	ldr	r2, [pc, #108]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 8004236:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800423a:	6593      	str	r3, [r2, #88]	; 0x58
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004248:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 800424a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424c:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 800424e:	f043 0302 	orr.w	r3, r3, #2
 8004252:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004254:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <HAL_FDCAN_MspInit+0x21c>)
 8004256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004260:	2318      	movs	r3, #24
 8004262:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004264:	2302      	movs	r3, #2
 8004266:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	2300      	movs	r3, #0
 800426a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8004272:	230b      	movs	r3, #11
 8004274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004278:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800427c:	4619      	mov	r1, r3
 800427e:	480c      	ldr	r0, [pc, #48]	; (80042b0 <HAL_FDCAN_MspInit+0x228>)
 8004280:	f003 fdcc 	bl	8007e1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 8004284:	2200      	movs	r2, #0
 8004286:	2100      	movs	r1, #0
 8004288:	2059      	movs	r0, #89	; 0x59
 800428a:	f002 fc30 	bl	8006aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 800428e:	2059      	movs	r0, #89	; 0x59
 8004290:	f002 fc47 	bl	8006b22 <HAL_NVIC_EnableIRQ>
}
 8004294:	bf00      	nop
 8004296:	3788      	adds	r7, #136	; 0x88
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40006400 	.word	0x40006400
 80042a0:	20000c6c 	.word	0x20000c6c
 80042a4:	40021000 	.word	0x40021000
 80042a8:	48000c00 	.word	0x48000c00
 80042ac:	40006800 	.word	0x40006800
 80042b0:	48000400 	.word	0x48000400
 80042b4:	40006c00 	.word	0x40006c00

080042b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b0a4      	sub	sp, #144	; 0x90
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	60da      	str	r2, [r3, #12]
 80042ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042d4:	2254      	movs	r2, #84	; 0x54
 80042d6:	2100      	movs	r1, #0
 80042d8:	4618      	mov	r0, r3
 80042da:	f009 fddb 	bl	800de94 <memset>
  if(hi2c->Instance==I2C1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a8a      	ldr	r2, [pc, #552]	; (800450c <HAL_I2C_MspInit+0x254>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	f040 80af 	bne.w	8004448 <HAL_I2C_MspInit+0x190>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80042ea:	2340      	movs	r3, #64	; 0x40
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80042ee:	2300      	movs	r3, #0
 80042f0:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042f6:	4618      	mov	r0, r3
 80042f8:	f007 fba6 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004302:	f7ff fbb7 	bl	8003a74 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004306:	4b82      	ldr	r3, [pc, #520]	; (8004510 <HAL_I2C_MspInit+0x258>)
 8004308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430a:	4a81      	ldr	r2, [pc, #516]	; (8004510 <HAL_I2C_MspInit+0x258>)
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004312:	4b7f      	ldr	r3, [pc, #508]	; (8004510 <HAL_I2C_MspInit+0x258>)
 8004314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800431e:	4b7c      	ldr	r3, [pc, #496]	; (8004510 <HAL_I2C_MspInit+0x258>)
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	4a7b      	ldr	r2, [pc, #492]	; (8004510 <HAL_I2C_MspInit+0x258>)
 8004324:	f043 0302 	orr.w	r3, r3, #2
 8004328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800432a:	4b79      	ldr	r3, [pc, #484]	; (8004510 <HAL_I2C_MspInit+0x258>)
 800432c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	623b      	str	r3, [r7, #32]
 8004334:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800433c:	2312      	movs	r3, #18
 800433e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004342:	2300      	movs	r3, #0
 8004344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004348:	2300      	movs	r3, #0
 800434a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800434e:	2304      	movs	r3, #4
 8004350:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004354:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004358:	4619      	mov	r1, r3
 800435a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800435e:	f003 fd5d 	bl	8007e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004362:	2380      	movs	r3, #128	; 0x80
 8004364:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004366:	2312      	movs	r3, #18
 8004368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004372:	2300      	movs	r3, #0
 8004374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004378:	2304      	movs	r3, #4
 800437a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800437e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004382:	4619      	mov	r1, r3
 8004384:	4863      	ldr	r0, [pc, #396]	; (8004514 <HAL_I2C_MspInit+0x25c>)
 8004386:	f003 fd49 	bl	8007e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800438a:	4b61      	ldr	r3, [pc, #388]	; (8004510 <HAL_I2C_MspInit+0x258>)
 800438c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438e:	4a60      	ldr	r2, [pc, #384]	; (8004510 <HAL_I2C_MspInit+0x258>)
 8004390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004394:	6593      	str	r3, [r2, #88]	; 0x58
 8004396:	4b5e      	ldr	r3, [pc, #376]	; (8004510 <HAL_I2C_MspInit+0x258>)
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 80043a2:	4b5d      	ldr	r3, [pc, #372]	; (8004518 <HAL_I2C_MspInit+0x260>)
 80043a4:	4a5d      	ldr	r2, [pc, #372]	; (800451c <HAL_I2C_MspInit+0x264>)
 80043a6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80043a8:	4b5b      	ldr	r3, [pc, #364]	; (8004518 <HAL_I2C_MspInit+0x260>)
 80043aa:	2210      	movs	r2, #16
 80043ac:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043ae:	4b5a      	ldr	r3, [pc, #360]	; (8004518 <HAL_I2C_MspInit+0x260>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043b4:	4b58      	ldr	r3, [pc, #352]	; (8004518 <HAL_I2C_MspInit+0x260>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043ba:	4b57      	ldr	r3, [pc, #348]	; (8004518 <HAL_I2C_MspInit+0x260>)
 80043bc:	2280      	movs	r2, #128	; 0x80
 80043be:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043c0:	4b55      	ldr	r3, [pc, #340]	; (8004518 <HAL_I2C_MspInit+0x260>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043c6:	4b54      	ldr	r3, [pc, #336]	; (8004518 <HAL_I2C_MspInit+0x260>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80043cc:	4b52      	ldr	r3, [pc, #328]	; (8004518 <HAL_I2C_MspInit+0x260>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043d2:	4b51      	ldr	r3, [pc, #324]	; (8004518 <HAL_I2C_MspInit+0x260>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80043d8:	484f      	ldr	r0, [pc, #316]	; (8004518 <HAL_I2C_MspInit+0x260>)
 80043da:	f002 fbbd 	bl	8006b58 <HAL_DMA_Init>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_I2C_MspInit+0x130>
    {
      Error_Handler();
 80043e4:	f7ff fb46 	bl	8003a74 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a4b      	ldr	r2, [pc, #300]	; (8004518 <HAL_I2C_MspInit+0x260>)
 80043ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80043ee:	4a4a      	ldr	r2, [pc, #296]	; (8004518 <HAL_I2C_MspInit+0x260>)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 80043f4:	4b4a      	ldr	r3, [pc, #296]	; (8004520 <HAL_I2C_MspInit+0x268>)
 80043f6:	4a4b      	ldr	r2, [pc, #300]	; (8004524 <HAL_I2C_MspInit+0x26c>)
 80043f8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80043fa:	4b49      	ldr	r3, [pc, #292]	; (8004520 <HAL_I2C_MspInit+0x268>)
 80043fc:	2211      	movs	r2, #17
 80043fe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004400:	4b47      	ldr	r3, [pc, #284]	; (8004520 <HAL_I2C_MspInit+0x268>)
 8004402:	2210      	movs	r2, #16
 8004404:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004406:	4b46      	ldr	r3, [pc, #280]	; (8004520 <HAL_I2C_MspInit+0x268>)
 8004408:	2200      	movs	r2, #0
 800440a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800440c:	4b44      	ldr	r3, [pc, #272]	; (8004520 <HAL_I2C_MspInit+0x268>)
 800440e:	2280      	movs	r2, #128	; 0x80
 8004410:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004412:	4b43      	ldr	r3, [pc, #268]	; (8004520 <HAL_I2C_MspInit+0x268>)
 8004414:	2200      	movs	r2, #0
 8004416:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004418:	4b41      	ldr	r3, [pc, #260]	; (8004520 <HAL_I2C_MspInit+0x268>)
 800441a:	2200      	movs	r2, #0
 800441c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800441e:	4b40      	ldr	r3, [pc, #256]	; (8004520 <HAL_I2C_MspInit+0x268>)
 8004420:	2200      	movs	r2, #0
 8004422:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004424:	4b3e      	ldr	r3, [pc, #248]	; (8004520 <HAL_I2C_MspInit+0x268>)
 8004426:	2200      	movs	r2, #0
 8004428:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800442a:	483d      	ldr	r0, [pc, #244]	; (8004520 <HAL_I2C_MspInit+0x268>)
 800442c:	f002 fb94 	bl	8006b58 <HAL_DMA_Init>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_MspInit+0x182>
    {
      Error_Handler();
 8004436:	f7ff fb1d 	bl	8003a74 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a38      	ldr	r2, [pc, #224]	; (8004520 <HAL_I2C_MspInit+0x268>)
 800443e:	639a      	str	r2, [r3, #56]	; 0x38
 8004440:	4a37      	ldr	r2, [pc, #220]	; (8004520 <HAL_I2C_MspInit+0x268>)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004446:	e0dd      	b.n	8004604 <HAL_I2C_MspInit+0x34c>
  else if(hi2c->Instance==I2C2)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a36      	ldr	r2, [pc, #216]	; (8004528 <HAL_I2C_MspInit+0x270>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d16e      	bne.n	8004530 <HAL_I2C_MspInit+0x278>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004456:	2300      	movs	r3, #0
 8004458:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800445a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800445e:	4618      	mov	r0, r3
 8004460:	f007 faf2 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 800446a:	f7ff fb03 	bl	8003a74 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800446e:	4b28      	ldr	r3, [pc, #160]	; (8004510 <HAL_I2C_MspInit+0x258>)
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	4a27      	ldr	r2, [pc, #156]	; (8004510 <HAL_I2C_MspInit+0x258>)
 8004474:	f043 0304 	orr.w	r3, r3, #4
 8004478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800447a:	4b25      	ldr	r3, [pc, #148]	; (8004510 <HAL_I2C_MspInit+0x258>)
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004486:	4b22      	ldr	r3, [pc, #136]	; (8004510 <HAL_I2C_MspInit+0x258>)
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	4a21      	ldr	r2, [pc, #132]	; (8004510 <HAL_I2C_MspInit+0x258>)
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004492:	4b1f      	ldr	r3, [pc, #124]	; (8004510 <HAL_I2C_MspInit+0x258>)
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800449e:	2310      	movs	r3, #16
 80044a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044a2:	2312      	movs	r3, #18
 80044a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80044b4:	2304      	movs	r3, #4
 80044b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80044be:	4619      	mov	r1, r3
 80044c0:	481a      	ldr	r0, [pc, #104]	; (800452c <HAL_I2C_MspInit+0x274>)
 80044c2:	f003 fcab 	bl	8007e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80044c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044cc:	2312      	movs	r3, #18
 80044ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d8:	2300      	movs	r3, #0
 80044da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80044de:	2304      	movs	r3, #4
 80044e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80044e8:	4619      	mov	r1, r3
 80044ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044ee:	f003 fc95 	bl	8007e1c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80044f2:	4b07      	ldr	r3, [pc, #28]	; (8004510 <HAL_I2C_MspInit+0x258>)
 80044f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f6:	4a06      	ldr	r2, [pc, #24]	; (8004510 <HAL_I2C_MspInit+0x258>)
 80044f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044fc:	6593      	str	r3, [r2, #88]	; 0x58
 80044fe:	4b04      	ldr	r3, [pc, #16]	; (8004510 <HAL_I2C_MspInit+0x258>)
 8004500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	693b      	ldr	r3, [r7, #16]
}
 800450a:	e07b      	b.n	8004604 <HAL_I2C_MspInit+0x34c>
 800450c:	40005400 	.word	0x40005400
 8004510:	40021000 	.word	0x40021000
 8004514:	48000400 	.word	0x48000400
 8004518:	20000664 	.word	0x20000664
 800451c:	4002001c 	.word	0x4002001c
 8004520:	200006c4 	.word	0x200006c4
 8004524:	40020030 	.word	0x40020030
 8004528:	40005800 	.word	0x40005800
 800452c:	48000800 	.word	0x48000800
  else if(hi2c->Instance==I2C3)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a35      	ldr	r2, [pc, #212]	; (800460c <HAL_I2C_MspInit+0x354>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d164      	bne.n	8004604 <HAL_I2C_MspInit+0x34c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800453a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800453e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004540:	2300      	movs	r3, #0
 8004542:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004544:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004548:	4618      	mov	r0, r3
 800454a:	f007 fa7d 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_I2C_MspInit+0x2a0>
      Error_Handler();
 8004554:	f7ff fa8e 	bl	8003a74 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004558:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <HAL_I2C_MspInit+0x358>)
 800455a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455c:	4a2c      	ldr	r2, [pc, #176]	; (8004610 <HAL_I2C_MspInit+0x358>)
 800455e:	f043 0304 	orr.w	r3, r3, #4
 8004562:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004564:	4b2a      	ldr	r3, [pc, #168]	; (8004610 <HAL_I2C_MspInit+0x358>)
 8004566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004570:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004574:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004576:	2312      	movs	r3, #18
 8004578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004582:	2300      	movs	r3, #0
 8004584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8004588:	2308      	movs	r3, #8
 800458a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800458e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004592:	4619      	mov	r1, r3
 8004594:	481f      	ldr	r0, [pc, #124]	; (8004614 <HAL_I2C_MspInit+0x35c>)
 8004596:	f003 fc41 	bl	8007e1c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800459a:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <HAL_I2C_MspInit+0x358>)
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <HAL_I2C_MspInit+0x358>)
 80045a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045a4:	6593      	str	r3, [r2, #88]	; 0x58
 80045a6:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <HAL_I2C_MspInit+0x358>)
 80045a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Channel4;
 80045b2:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_I2C_MspInit+0x360>)
 80045b4:	4a19      	ldr	r2, [pc, #100]	; (800461c <HAL_I2C_MspInit+0x364>)
 80045b6:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 80045b8:	4b17      	ldr	r3, [pc, #92]	; (8004618 <HAL_I2C_MspInit+0x360>)
 80045ba:	2214      	movs	r2, #20
 80045bc:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045be:	4b16      	ldr	r3, [pc, #88]	; (8004618 <HAL_I2C_MspInit+0x360>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045c4:	4b14      	ldr	r3, [pc, #80]	; (8004618 <HAL_I2C_MspInit+0x360>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045ca:	4b13      	ldr	r3, [pc, #76]	; (8004618 <HAL_I2C_MspInit+0x360>)
 80045cc:	2280      	movs	r2, #128	; 0x80
 80045ce:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_I2C_MspInit+0x360>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <HAL_I2C_MspInit+0x360>)
 80045d8:	2200      	movs	r2, #0
 80045da:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80045dc:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <HAL_I2C_MspInit+0x360>)
 80045de:	2200      	movs	r2, #0
 80045e0:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <HAL_I2C_MspInit+0x360>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80045e8:	480b      	ldr	r0, [pc, #44]	; (8004618 <HAL_I2C_MspInit+0x360>)
 80045ea:	f002 fab5 	bl	8006b58 <HAL_DMA_Init>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_I2C_MspInit+0x340>
      Error_Handler();
 80045f4:	f7ff fa3e 	bl	8003a74 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a07      	ldr	r2, [pc, #28]	; (8004618 <HAL_I2C_MspInit+0x360>)
 80045fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80045fe:	4a06      	ldr	r2, [pc, #24]	; (8004618 <HAL_I2C_MspInit+0x360>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004604:	bf00      	nop
 8004606:	3790      	adds	r7, #144	; 0x90
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40007800 	.word	0x40007800
 8004610:	40021000 	.word	0x40021000
 8004614:	48000800 	.word	0x48000800
 8004618:	20000724 	.word	0x20000724
 800461c:	40020044 	.word	0x40020044

08004620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b0a0      	sub	sp, #128	; 0x80
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004628:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	609a      	str	r2, [r3, #8]
 8004634:	60da      	str	r2, [r3, #12]
 8004636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004638:	f107 0318 	add.w	r3, r7, #24
 800463c:	2254      	movs	r2, #84	; 0x54
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f009 fc27 	bl	800de94 <memset>
  if(huart->Instance==LPUART1)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2d      	ldr	r2, [pc, #180]	; (8004700 <HAL_UART_MspInit+0xe0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d152      	bne.n	80046f6 <HAL_UART_MspInit+0xd6>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004650:	2320      	movs	r3, #32
 8004652:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8004654:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004658:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800465a:	f107 0318 	add.w	r3, r7, #24
 800465e:	4618      	mov	r0, r3
 8004660:	f007 f9f2 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800466a:	f7ff fa03 	bl	8003a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800466e:	4b25      	ldr	r3, [pc, #148]	; (8004704 <HAL_UART_MspInit+0xe4>)
 8004670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004672:	4a24      	ldr	r2, [pc, #144]	; (8004704 <HAL_UART_MspInit+0xe4>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	65d3      	str	r3, [r2, #92]	; 0x5c
 800467a:	4b22      	ldr	r3, [pc, #136]	; (8004704 <HAL_UART_MspInit+0xe4>)
 800467c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004686:	4b1f      	ldr	r3, [pc, #124]	; (8004704 <HAL_UART_MspInit+0xe4>)
 8004688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468a:	4a1e      	ldr	r2, [pc, #120]	; (8004704 <HAL_UART_MspInit+0xe4>)
 800468c:	f043 0304 	orr.w	r3, r3, #4
 8004690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004692:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <HAL_UART_MspInit+0xe4>)
 8004694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800469e:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_UART_MspInit+0xe4>)
 80046a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a2:	4a18      	ldr	r2, [pc, #96]	; (8004704 <HAL_UART_MspInit+0xe4>)
 80046a4:	f043 0302 	orr.w	r3, r3, #2
 80046a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046aa:	4b16      	ldr	r3, [pc, #88]	; (8004704 <HAL_UART_MspInit+0xe4>)
 80046ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80046b6:	2303      	movs	r3, #3
 80046b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ba:	2302      	movs	r3, #2
 80046bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c2:	2300      	movs	r3, #0
 80046c4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80046c6:	2308      	movs	r3, #8
 80046c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80046ce:	4619      	mov	r1, r3
 80046d0:	480d      	ldr	r0, [pc, #52]	; (8004708 <HAL_UART_MspInit+0xe8>)
 80046d2:	f003 fba3 	bl	8007e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80046d6:	2302      	movs	r3, #2
 80046d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046da:	2302      	movs	r3, #2
 80046dc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e2:	2300      	movs	r3, #0
 80046e4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80046e6:	230c      	movs	r3, #12
 80046e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80046ee:	4619      	mov	r1, r3
 80046f0:	4806      	ldr	r0, [pc, #24]	; (800470c <HAL_UART_MspInit+0xec>)
 80046f2:	f003 fb93 	bl	8007e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80046f6:	bf00      	nop
 80046f8:	3780      	adds	r7, #128	; 0x80
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40008000 	.word	0x40008000
 8004704:	40021000 	.word	0x40021000
 8004708:	48000800 	.word	0x48000800
 800470c:	48000400 	.word	0x48000400

08004710 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08c      	sub	sp, #48	; 0x30
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004718:	f107 031c 	add.w	r3, r7, #28
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	605a      	str	r2, [r3, #4]
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	60da      	str	r2, [r3, #12]
 8004726:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2f      	ldr	r2, [pc, #188]	; (80047ec <HAL_SPI_MspInit+0xdc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d129      	bne.n	8004786 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004732:	4b2f      	ldr	r3, [pc, #188]	; (80047f0 <HAL_SPI_MspInit+0xe0>)
 8004734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004736:	4a2e      	ldr	r2, [pc, #184]	; (80047f0 <HAL_SPI_MspInit+0xe0>)
 8004738:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800473c:	6613      	str	r3, [r2, #96]	; 0x60
 800473e:	4b2c      	ldr	r3, [pc, #176]	; (80047f0 <HAL_SPI_MspInit+0xe0>)
 8004740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800474a:	4b29      	ldr	r3, [pc, #164]	; (80047f0 <HAL_SPI_MspInit+0xe0>)
 800474c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474e:	4a28      	ldr	r2, [pc, #160]	; (80047f0 <HAL_SPI_MspInit+0xe0>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004756:	4b26      	ldr	r3, [pc, #152]	; (80047f0 <HAL_SPI_MspInit+0xe0>)
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004762:	23e0      	movs	r3, #224	; 0xe0
 8004764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004766:	2302      	movs	r3, #2
 8004768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476a:	2300      	movs	r3, #0
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476e:	2300      	movs	r3, #0
 8004770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004772:	2305      	movs	r3, #5
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004776:	f107 031c 	add.w	r3, r7, #28
 800477a:	4619      	mov	r1, r3
 800477c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004780:	f003 fb4c 	bl	8007e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004784:	e02d      	b.n	80047e2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <HAL_SPI_MspInit+0xe4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d128      	bne.n	80047e2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004790:	4b17      	ldr	r3, [pc, #92]	; (80047f0 <HAL_SPI_MspInit+0xe0>)
 8004792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004794:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <HAL_SPI_MspInit+0xe0>)
 8004796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479a:	6593      	str	r3, [r2, #88]	; 0x58
 800479c:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <HAL_SPI_MspInit+0xe0>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047a8:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <HAL_SPI_MspInit+0xe0>)
 80047aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ac:	4a10      	ldr	r2, [pc, #64]	; (80047f0 <HAL_SPI_MspInit+0xe0>)
 80047ae:	f043 0304 	orr.w	r3, r3, #4
 80047b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047b4:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <HAL_SPI_MspInit+0xe0>)
 80047b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80047c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80047c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c6:	2302      	movs	r3, #2
 80047c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ce:	2300      	movs	r3, #0
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80047d2:	2306      	movs	r3, #6
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047d6:	f107 031c 	add.w	r3, r7, #28
 80047da:	4619      	mov	r1, r3
 80047dc:	4806      	ldr	r0, [pc, #24]	; (80047f8 <HAL_SPI_MspInit+0xe8>)
 80047de:	f003 fb1d 	bl	8007e1c <HAL_GPIO_Init>
}
 80047e2:	bf00      	nop
 80047e4:	3730      	adds	r7, #48	; 0x30
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40013000 	.word	0x40013000
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40003c00 	.word	0x40003c00
 80047f8:	48000800 	.word	0x48000800

080047fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480c:	d114      	bne.n	8004838 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800480e:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_TIM_Base_MspInit+0x78>)
 8004810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004812:	4a18      	ldr	r2, [pc, #96]	; (8004874 <HAL_TIM_Base_MspInit+0x78>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	6593      	str	r3, [r2, #88]	; 0x58
 800481a:	4b16      	ldr	r3, [pc, #88]	; (8004874 <HAL_TIM_Base_MspInit+0x78>)
 800481c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004826:	2200      	movs	r2, #0
 8004828:	2100      	movs	r1, #0
 800482a:	201c      	movs	r0, #28
 800482c:	f002 f95f 	bl	8006aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004830:	201c      	movs	r0, #28
 8004832:	f002 f976 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004836:	e018      	b.n	800486a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM5)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a0e      	ldr	r2, [pc, #56]	; (8004878 <HAL_TIM_Base_MspInit+0x7c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d113      	bne.n	800486a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004842:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <HAL_TIM_Base_MspInit+0x78>)
 8004844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004846:	4a0b      	ldr	r2, [pc, #44]	; (8004874 <HAL_TIM_Base_MspInit+0x78>)
 8004848:	f043 0308 	orr.w	r3, r3, #8
 800484c:	6593      	str	r3, [r2, #88]	; 0x58
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_TIM_Base_MspInit+0x78>)
 8004850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	60bb      	str	r3, [r7, #8]
 8004858:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800485a:	2200      	movs	r2, #0
 800485c:	2100      	movs	r1, #0
 800485e:	2032      	movs	r0, #50	; 0x32
 8004860:	f002 f945 	bl	8006aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004864:	2032      	movs	r0, #50	; 0x32
 8004866:	f002 f95c 	bl	8006b22 <HAL_NVIC_EnableIRQ>
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40021000 	.word	0x40021000
 8004878:	40000c00 	.word	0x40000c00

0800487c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b098      	sub	sp, #96	; 0x60
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004884:	f107 030c 	add.w	r3, r7, #12
 8004888:	2254      	movs	r2, #84	; 0x54
 800488a:	2100      	movs	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f009 fb01 	bl	800de94 <memset>
  if(hpcd->Instance==USB)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a11      	ldr	r2, [pc, #68]	; (80048dc <HAL_PCD_MspInit+0x60>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d11a      	bne.n	80048d2 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800489c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048a0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80048a2:	2300      	movs	r3, #0
 80048a4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048a6:	f107 030c 	add.w	r3, r7, #12
 80048aa:	4618      	mov	r0, r3
 80048ac:	f007 f8cc 	bl	800ba48 <HAL_RCCEx_PeriphCLKConfig>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80048b6:	f7ff f8dd 	bl	8003a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80048ba:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <HAL_PCD_MspInit+0x64>)
 80048bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048be:	4a08      	ldr	r2, [pc, #32]	; (80048e0 <HAL_PCD_MspInit+0x64>)
 80048c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048c4:	6593      	str	r3, [r2, #88]	; 0x58
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <HAL_PCD_MspInit+0x64>)
 80048c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80048d2:	bf00      	nop
 80048d4:	3760      	adds	r7, #96	; 0x60
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40005c00 	.word	0x40005c00
 80048e0:	40021000 	.word	0x40021000

080048e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80048e8:	f007 f84c 	bl	800b984 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80048ec:	e7fe      	b.n	80048ec <NMI_Handler+0x8>

080048ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ee:	b480      	push	{r7}
 80048f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048f2:	e7fe      	b.n	80048f2 <HardFault_Handler+0x4>

080048f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048f8:	e7fe      	b.n	80048f8 <MemManage_Handler+0x4>

080048fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048fa:	b480      	push	{r7}
 80048fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048fe:	e7fe      	b.n	80048fe <BusFault_Handler+0x4>

08004900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004904:	e7fe      	b.n	8004904 <UsageFault_Handler+0x4>

08004906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004906:	b480      	push	{r7}
 8004908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800490a:	bf00      	nop
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004918:	bf00      	nop
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004922:	b480      	push	{r7}
 8004924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004926:	bf00      	nop
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004934:	f000 fc66 	bl	8005204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004938:	bf00      	nop
 800493a:	bd80      	pop	{r7, pc}

0800493c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004940:	4802      	ldr	r0, [pc, #8]	; (800494c <DMA1_Channel1_IRQHandler+0x10>)
 8004942:	f002 fa93 	bl	8006e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004946:	bf00      	nop
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	2000037c 	.word	0x2000037c

08004950 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004954:	4802      	ldr	r0, [pc, #8]	; (8004960 <DMA1_Channel2_IRQHandler+0x10>)
 8004956:	f002 fa89 	bl	8006e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20000664 	.word	0x20000664

08004964 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004968:	4802      	ldr	r0, [pc, #8]	; (8004974 <DMA1_Channel3_IRQHandler+0x10>)
 800496a:	f002 fa7f 	bl	8006e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800496e:	bf00      	nop
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	200006c4 	.word	0x200006c4

08004978 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 800497c:	4802      	ldr	r0, [pc, #8]	; (8004988 <DMA1_Channel4_IRQHandler+0x10>)
 800497e:	f002 fa75 	bl	8006e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004982:	bf00      	nop
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000724 	.word	0x20000724

0800498c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004990:	4802      	ldr	r0, [pc, #8]	; (800499c <DMA1_Channel5_IRQHandler+0x10>)
 8004992:	f002 fa6b 	bl	8006e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004996:	bf00      	nop
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	200003dc 	.word	0x200003dc

080049a0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80049a4:	4802      	ldr	r0, [pc, #8]	; (80049b0 <FDCAN1_IT0_IRQHandler+0x10>)
 80049a6:	f002 ffcd 	bl	8007944 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	2000043c 	.word	0x2000043c

080049b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// T_out = ((ARR+1)(PSC+1))/F_clk

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80049b8:	4804      	ldr	r0, [pc, #16]	; (80049cc <TIM2_IRQHandler+0x18>)
 80049ba:	f007 fc3c 	bl	800c236 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim2);
 80049be:	4803      	ldr	r0, [pc, #12]	; (80049cc <TIM2_IRQHandler+0x18>)
 80049c0:	f007 fc0a 	bl	800c1d8 <HAL_TIM_Base_Stop_IT>
  HV_on();
 80049c4:	f7ff f8a0 	bl	8003b08 <HV_on>
  /* USER CODE END TIM2_IRQn 1 */
}
 80049c8:	bf00      	nop
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	200008f0 	.word	0x200008f0

080049d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80049d4:	4808      	ldr	r0, [pc, #32]	; (80049f8 <TIM5_IRQHandler+0x28>)
 80049d6:	f007 fc2e 	bl	800c236 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  Fault_Flag = Update_Temp();
 80049da:	f000 f9fd 	bl	8004dd8 <Update_Temp>
 80049de:	4603      	mov	r3, r0
 80049e0:	461a      	mov	r2, r3
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <TIM5_IRQHandler+0x2c>)
 80049e4:	701a      	strb	r2, [r3, #0]
  Fault_Flag = IMD_Req_Isolation();
 80049e6:	f7fd fb5b 	bl	80020a0 <IMD_Req_Isolation>
 80049ea:	4603      	mov	r3, r0
 80049ec:	461a      	mov	r2, r3
 80049ee:	4b03      	ldr	r3, [pc, #12]	; (80049fc <TIM5_IRQHandler+0x2c>)
 80049f0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 1 */
}
 80049f2:	bf00      	nop
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	2000093c 	.word	0x2000093c
 80049fc:	20000c64 	.word	0x20000c64

08004a00 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004a04:	4802      	ldr	r0, [pc, #8]	; (8004a10 <FDCAN2_IT0_IRQHandler+0x10>)
 8004a06:	f002 ff9d 	bl	8007944 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	200004a0 	.word	0x200004a0

08004a14 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8004a18:	4802      	ldr	r0, [pc, #8]	; (8004a24 <FDCAN3_IT1_IRQHandler+0x10>)
 8004a1a:	f002 ff93 	bl	8007944 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000504 	.word	0x20000504

08004a28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	e00a      	b.n	8004a50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a3a:	f3af 8000 	nop.w
 8004a3e:	4601      	mov	r1, r0
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	60ba      	str	r2, [r7, #8]
 8004a46:	b2ca      	uxtb	r2, r1
 8004a48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	dbf0      	blt.n	8004a3a <_read+0x12>
  }

  return len;
 8004a58:	687b      	ldr	r3, [r7, #4]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b086      	sub	sp, #24
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	e009      	b.n	8004a88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	60ba      	str	r2, [r7, #8]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	3301      	adds	r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	dbf1      	blt.n	8004a74 <_write+0x12>
  }
  return len;
 8004a90:	687b      	ldr	r3, [r7, #4]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <_close>:

int _close(int file)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ac2:	605a      	str	r2, [r3, #4]
  return 0;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <_isatty>:

int _isatty(int file)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ada:	2301      	movs	r3, #1
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b0c:	4a14      	ldr	r2, [pc, #80]	; (8004b60 <_sbrk+0x5c>)
 8004b0e:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <_sbrk+0x60>)
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b18:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <_sbrk+0x64>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b20:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <_sbrk+0x64>)
 8004b22:	4a12      	ldr	r2, [pc, #72]	; (8004b6c <_sbrk+0x68>)
 8004b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b26:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <_sbrk+0x64>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d207      	bcs.n	8004b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b34:	f009 f9fc 	bl	800df30 <__errno>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	220c      	movs	r2, #12
 8004b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b42:	e009      	b.n	8004b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b44:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <_sbrk+0x64>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b4a:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <_sbrk+0x64>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	4a05      	ldr	r2, [pc, #20]	; (8004b68 <_sbrk+0x64>)
 8004b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b56:	68fb      	ldr	r3, [r7, #12]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20020000 	.word	0x20020000
 8004b64:	00000400 	.word	0x00000400
 8004b68:	20000c70 	.word	0x20000c70
 8004b6c:	20000e30 	.word	0x20000e30

08004b70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004b74:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <SystemInit+0x20>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7a:	4a05      	ldr	r2, [pc, #20]	; (8004b90 <SystemInit+0x20>)
 8004b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b84:	bf00      	nop
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	e000ed00 	.word	0xe000ed00

08004b94 <i2c_temp_init>:
volatile int adc5_convert = 0;
volatile int32_t temps[8] = {0};
volatile int32_t pressure[1] = {0};


uint8_t i2c_temp_init(mcp9600_handle_t *handle, mcp9600_address_t addr_pin, mcp9600_thermocouple_type_t type){
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	70bb      	strb	r3, [r7, #2]
	uint8_t status;

	DRIVER_MCP9600_LINK_INIT(handle, mcp9600_handle_t);
 8004ba4:	221c      	movs	r2, #28
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f009 f973 	bl	800de94 <memset>
	DRIVER_MCP9600_LINK_IIC_INIT(handle, mcp9600_interface_iic_init);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a40      	ldr	r2, [pc, #256]	; (8004cb4 <i2c_temp_init+0x120>)
 8004bb2:	601a      	str	r2, [r3, #0]
	DRIVER_MCP9600_LINK_IIC_DEINIT(handle, mcp9600_interface_iic_deinit);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a40      	ldr	r2, [pc, #256]	; (8004cb8 <i2c_temp_init+0x124>)
 8004bb8:	605a      	str	r2, [r3, #4]
	DRIVER_MCP9600_LINK_IIC_READ_COMMAND(handle, mcp9600_interface_iic_read_cmd);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a3f      	ldr	r2, [pc, #252]	; (8004cbc <i2c_temp_init+0x128>)
 8004bbe:	60da      	str	r2, [r3, #12]
	DRIVER_MCP9600_LINK_IIC_WRITE_COMMAND(handle, mcp9600_interface_iic_write_cmd);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a3f      	ldr	r2, [pc, #252]	; (8004cc0 <i2c_temp_init+0x12c>)
 8004bc4:	609a      	str	r2, [r3, #8]
	DRIVER_MCP9600_LINK_IIC_DELAY_MS(handle, mcp9600_interface_delay_ms);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a3e      	ldr	r2, [pc, #248]	; (8004cc4 <i2c_temp_init+0x130>)
 8004bca:	611a      	str	r2, [r3, #16]
	DRIVER_MCP9600_LINK_DEBUG_PRINT(handle, mcp9600_interface_debug_print);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a3e      	ldr	r2, [pc, #248]	; (8004cc8 <i2c_temp_init+0x134>)
 8004bd0:	615a      	str	r2, [r3, #20]

	status = mcp9600_set_addr_pin(handle, addr_pin); //set i2c address
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fd fc75 	bl	80024c6 <mcp9600_set_addr_pin>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <i2c_temp_init+0x56>
		return 1;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e05f      	b.n	8004caa <i2c_temp_init+0x116>
	}
	status = mcp9600_init(handle); //chip init
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fd fc80 	bl	80024f0 <mcp9600_init>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <i2c_temp_init+0x6a>
		return 1;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e055      	b.n	8004caa <i2c_temp_init+0x116>
	}
	status = mcp9600_set_mode(handle, MCP9600_MODE_NORMAL); //set normal
 8004bfe:	2100      	movs	r1, #0
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7fd ff49 	bl	8002a98 <mcp9600_set_mode>
 8004c06:	4603      	mov	r3, r0
 8004c08:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d004      	beq.n	8004c1a <i2c_temp_init+0x86>
		(void)mcp9600_deinit(handle);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7fd fcfb 	bl	800260c <mcp9600_deinit>
		return 1;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e047      	b.n	8004caa <i2c_temp_init+0x116>
	}
	status = mcp9600_set_filter_coefficient(handle, MCP9600_FILTER_COEFFICIENT_0); //set filter
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fd ffcf 	bl	8002bc0 <mcp9600_set_filter_coefficient>
 8004c22:	4603      	mov	r3, r0
 8004c24:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d004      	beq.n	8004c36 <i2c_temp_init+0xa2>
		(void)mcp9600_deinit(handle);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fd fced 	bl	800260c <mcp9600_deinit>
		return 1;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e039      	b.n	8004caa <i2c_temp_init+0x116>
	}
	status = mcp9600_set_thermocouple_type(handle, type); //thermocouple type
 8004c36:	78bb      	ldrb	r3, [r7, #2]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fd ff74 	bl	8002b28 <mcp9600_set_thermocouple_type>
 8004c40:	4603      	mov	r3, r0
 8004c42:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d004      	beq.n	8004c54 <i2c_temp_init+0xc0>
		(void)mcp9600_deinit(handle);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fd fcde 	bl	800260c <mcp9600_deinit>
		return 1;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e02a      	b.n	8004caa <i2c_temp_init+0x116>
	}
	status = mcp9600_set_cold_junction_resolution(handle,MCP9600_COLD_JUNCTION_RESOLUTION_0P0625);
 8004c54:	2100      	movs	r1, #0
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fd fe86 	bl	8002968 <mcp9600_set_cold_junction_resolution>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d004      	beq.n	8004c70 <i2c_temp_init+0xdc>
		(void)mcp9600_deinit(handle);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fd fcd0 	bl	800260c <mcp9600_deinit>
		return 1;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e01c      	b.n	8004caa <i2c_temp_init+0x116>
	}
	status = mcp9600_set_adc_resolution(handle,MCP9600_ADC_RESOLUTION_12_BIT);
 8004c70:	2103      	movs	r1, #3
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fd fec4 	bl	8002a00 <mcp9600_set_adc_resolution>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <i2c_temp_init+0xf8>
		(void)mcp9600_deinit(handle);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fd fcc2 	bl	800260c <mcp9600_deinit>
		return 1;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e00e      	b.n	8004caa <i2c_temp_init+0x116>
	}
	status = mcp9600_set_adc_resolution(handle, MCP9600_BURST_MODE_SAMPLE_4);
 8004c8c:	2102      	movs	r1, #2
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fd feb6 	bl	8002a00 <mcp9600_set_adc_resolution>
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <i2c_temp_init+0x114>
		(void)mcp9600_deinit(handle);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fd fcb4 	bl	800260c <mcp9600_deinit>
		return 1;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <i2c_temp_init+0x116>
	}
	return 0;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	08002c51 	.word	0x08002c51
 8004cb8:	08002c61 	.word	0x08002c61
 8004cbc:	08002c9d 	.word	0x08002c9d
 8004cc0:	08002c71 	.word	0x08002c71
 8004cc4:	08002cc9 	.word	0x08002cc9
 8004cc8:	08002cdf 	.word	0x08002cdf

08004ccc <mcp9600_read>:
uint8_t mcp9600_read(mcp9600_handle_t *handle, int16_t *hot_raw, float *hot_s,int16_t *delta_raw, float *delta_s, int16_t *cold_raw, float *cold_s){
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af04      	add	r7, sp, #16
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
	uint8_t status;
	status = mcp9600_single_read(handle, hot_raw, hot_s, delta_raw, delta_s, cold_raw, cold_s);
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	9302      	str	r3, [sp, #8]
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	9301      	str	r3, [sp, #4]
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7fd fce5 	bl	80026bc <mcp9600_single_read>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	75fb      	strb	r3, [r7, #23]
	if(status !=0){
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <mcp9600_read+0x34>
		return 1;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <mcp9600_read+0x36>
	}
	return 0;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <tempsensor_init>:

uint8_t tempsensor_init(){
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
	uint8_t status;
	status = i2c_temp_init(&MCP_0, MCP9600_ADDRESS_0, MCP9600_THERMOCOUPLE_TYPE_K);
 8004d12:	2200      	movs	r2, #0
 8004d14:	21c0      	movs	r1, #192	; 0xc0
 8004d16:	4828      	ldr	r0, [pc, #160]	; (8004db8 <tempsensor_init+0xac>)
 8004d18:	f7ff ff3c 	bl	8004b94 <i2c_temp_init>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	70fb      	strb	r3, [r7, #3]
	if(status !=0){
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <tempsensor_init+0x1e>
		return 1;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e042      	b.n	8004db0 <tempsensor_init+0xa4>
	}
	status = i2c_temp_init(&MCP_1, MCP9600_ADDRESS_1, MCP9600_THERMOCOUPLE_TYPE_K);
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	21cc      	movs	r1, #204	; 0xcc
 8004d2e:	4823      	ldr	r0, [pc, #140]	; (8004dbc <tempsensor_init+0xb0>)
 8004d30:	f7ff ff30 	bl	8004b94 <i2c_temp_init>
 8004d34:	4603      	mov	r3, r0
 8004d36:	70fb      	strb	r3, [r7, #3]
	if(status !=0){
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <tempsensor_init+0x36>
		return 1;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e036      	b.n	8004db0 <tempsensor_init+0xa4>
	}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_result_dma,adc1_count);
 8004d42:	2304      	movs	r3, #4
 8004d44:	461a      	mov	r2, r3
 8004d46:	491e      	ldr	r1, [pc, #120]	; (8004dc0 <tempsensor_init+0xb4>)
 8004d48:	481e      	ldr	r0, [pc, #120]	; (8004dc4 <tempsensor_init+0xb8>)
 8004d4a:	f000 fe75 	bl	8005a38 <HAL_ADC_Start_DMA>
	while(adc1_convert == 0){
 8004d4e:	bf00      	nop
 8004d50:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <tempsensor_init+0xbc>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0fb      	beq.n	8004d50 <tempsensor_init+0x44>
		//will hold until ready used to make sure all temp sensors are connected
	}
	adc1_convert = 0;
 8004d58:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <tempsensor_init+0xbc>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < adc1_count; i++){
 8004d5e:	2300      	movs	r3, #0
 8004d60:	607b      	str	r3, [r7, #4]
 8004d62:	e00b      	b.n	8004d7c <tempsensor_init+0x70>
		if(adc1_result_dma[i] <= 0){
 8004d64:	4a16      	ldr	r2, [pc, #88]	; (8004dc0 <tempsensor_init+0xb4>)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <tempsensor_init+0x6a>
			return 1;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e01c      	b.n	8004db0 <tempsensor_init+0xa4>
	for(int i = 0; i < adc1_count; i++){
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	607b      	str	r3, [r7, #4]
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4293      	cmp	r3, r2
 8004d82:	dbef      	blt.n	8004d64 <tempsensor_init+0x58>
		}
	}
	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_result_dma,adc5_count);
 8004d84:	2301      	movs	r3, #1
 8004d86:	461a      	mov	r2, r3
 8004d88:	4910      	ldr	r1, [pc, #64]	; (8004dcc <tempsensor_init+0xc0>)
 8004d8a:	4811      	ldr	r0, [pc, #68]	; (8004dd0 <tempsensor_init+0xc4>)
 8004d8c:	f000 fe54 	bl	8005a38 <HAL_ADC_Start_DMA>
	while(adc5_convert == 0){
 8004d90:	bf00      	nop
 8004d92:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <tempsensor_init+0xc8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0fb      	beq.n	8004d92 <tempsensor_init+0x86>
			//will hold until ready used to make sure all pressure sensors are connected
	}
	adc5_convert = 0;
 8004d9a:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <tempsensor_init+0xc8>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
	if(adc5_result_dma[0] <= 0){
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <tempsensor_init+0xc0>)
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <tempsensor_init+0xa2>
		return 1;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <tempsensor_init+0xa4>
	}
	return 0;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000c74 	.word	0x20000c74
 8004dbc:	20000c90 	.word	0x20000c90
 8004dc0:	20000cac 	.word	0x20000cac
 8004dc4:	200002a4 	.word	0x200002a4
 8004dc8:	20000cb8 	.word	0x20000cb8
 8004dcc:	20000cb4 	.word	0x20000cb4
 8004dd0:	20000310 	.word	0x20000310
 8004dd4:	20000cbc 	.word	0x20000cbc

08004dd8 <Update_Temp>:

uint8_t Update_Temp(){
 8004dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ddc:	b094      	sub	sp, #80	; 0x50
 8004dde:	af04      	add	r7, sp, #16
	int16_t delta_raw;
	float delta_s;
	int16_t cold_raw;
	float cold_s;

	if(adc1_convert == 1){ //when adc is done convert value to degree C and add to global temp variable
 8004de0:	4baf      	ldr	r3, [pc, #700]	; (80050a0 <Update_Temp+0x2c8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d17f      	bne.n	8004ee8 <Update_Temp+0x110>
		for(int i = 0; i < adc1_count; i++){
 8004de8:	2300      	movs	r3, #0
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dec:	e074      	b.n	8004ed8 <Update_Temp+0x100>
			int32_t raw = adc1_result_dma[i];
 8004dee:	4aad      	ldr	r2, [pc, #692]	; (80050a4 <Update_Temp+0x2cc>)
 8004df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	63bb      	str	r3, [r7, #56]	; 0x38
			int32_t pow2 = raw*raw;
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	fb03 f303 	mul.w	r3, r3, r3
 8004e00:	637b      	str	r3, [r7, #52]	; 0x34
			temps[i] = (((int32_t)((((int64_t)pow2*raw>>16)*76633531) >> 16)+(int32_t)(((int64_t)pow2*-4493757)>>16)+(raw*208775)+ -126577781)>>16);
 8004e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e04:	17da      	asrs	r2, r3, #31
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	617a      	str	r2, [r7, #20]
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	17da      	asrs	r2, r3, #31
 8004e0e:	60bb      	str	r3, [r7, #8]
 8004e10:	60fa      	str	r2, [r7, #12]
 8004e12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e16:	460b      	mov	r3, r1
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	fb02 f203 	mul.w	r2, r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004e24:	4601      	mov	r1, r0
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	fba2 4501 	umull	r4, r5, r2, r1
 8004e34:	442b      	add	r3, r5
 8004e36:	461d      	mov	r5, r3
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	0c22      	lsrs	r2, r4, #16
 8004e42:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8004e46:	142b      	asrs	r3, r5, #16
 8004e48:	4997      	ldr	r1, [pc, #604]	; (80050a8 <Update_Temp+0x2d0>)
 8004e4a:	fb01 f003 	mul.w	r0, r1, r3
 8004e4e:	2100      	movs	r1, #0
 8004e50:	fb02 f101 	mul.w	r1, r2, r1
 8004e54:	4408      	add	r0, r1
 8004e56:	4994      	ldr	r1, [pc, #592]	; (80050a8 <Update_Temp+0x2d0>)
 8004e58:	fba2 8901 	umull	r8, r9, r2, r1
 8004e5c:	eb00 0309 	add.w	r3, r0, r9
 8004e60:	4699      	mov	r9, r3
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8004e6e:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8004e72:	ea4f 4329 	mov.w	r3, r9, asr #16
 8004e76:	4611      	mov	r1, r2
 8004e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7a:	17da      	asrs	r2, r3, #31
 8004e7c:	603b      	str	r3, [r7, #0]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	4b8a      	ldr	r3, [pc, #552]	; (80050ac <Update_Temp+0x2d4>)
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	fb03 f202 	mul.w	r2, r3, r2
 8004e88:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8c:	6838      	ldr	r0, [r7, #0]
 8004e8e:	fb00 f303 	mul.w	r3, r0, r3
 8004e92:	441a      	add	r2, r3
 8004e94:	4b85      	ldr	r3, [pc, #532]	; (80050ac <Update_Temp+0x2d4>)
 8004e96:	6838      	ldr	r0, [r7, #0]
 8004e98:	fba0 ab03 	umull	sl, fp, r0, r3
 8004e9c:	eb02 030b 	add.w	r3, r2, fp
 8004ea0:	469b      	mov	fp, r3
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	ea4f 421a 	mov.w	r2, sl, lsr #16
 8004eae:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8004eb2:	ea4f 432b 	mov.w	r3, fp, asr #16
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	4419      	add	r1, r3
 8004eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ebc:	4b7c      	ldr	r3, [pc, #496]	; (80050b0 <Update_Temp+0x2d8>)
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	18ca      	adds	r2, r1, r3
 8004ec4:	4b7b      	ldr	r3, [pc, #492]	; (80050b4 <Update_Temp+0x2dc>)
 8004ec6:	4413      	add	r3, r2
 8004ec8:	141a      	asrs	r2, r3, #16
 8004eca:	497b      	ldr	r1, [pc, #492]	; (80050b8 <Update_Temp+0x2e0>)
 8004ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < adc1_count; i++){
 8004ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed8:	2204      	movs	r2, #4
 8004eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004edc:	4293      	cmp	r3, r2
 8004ede:	db86      	blt.n	8004dee <Update_Temp+0x16>
			//t=c3*adc^3+c2*adc^2+c1*adc+b  c3 = 2.72257E-07 c2 = -0.001046284 c1 = 3.185654692 b = -1931.423651
		}
		adc1_convert = 0;
 8004ee0:	4b6f      	ldr	r3, [pc, #444]	; (80050a0 <Update_Temp+0x2c8>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	e00c      	b.n	8004f02 <Update_Temp+0x12a>
	}else if(adc1_convert == 0){
 8004ee8:	4b6d      	ldr	r3, [pc, #436]	; (80050a0 <Update_Temp+0x2c8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d108      	bne.n	8004f02 <Update_Temp+0x12a>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_result_dma,adc1_count); //starts adc conversion sets convert to 2, indicates running prevents restarting while running.
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	496b      	ldr	r1, [pc, #428]	; (80050a4 <Update_Temp+0x2cc>)
 8004ef6:	4871      	ldr	r0, [pc, #452]	; (80050bc <Update_Temp+0x2e4>)
 8004ef8:	f000 fd9e 	bl	8005a38 <HAL_ADC_Start_DMA>
		adc1_convert = 2;
 8004efc:	4b68      	ldr	r3, [pc, #416]	; (80050a0 <Update_Temp+0x2c8>)
 8004efe:	2202      	movs	r2, #2
 8004f00:	601a      	str	r2, [r3, #0]
	}
	status = mcp9600_read(&MCP_0,(int16_t *)&hot_raw, (float *)&hot_s, (int16_t *)&delta_raw, (float *)&delta_s, (int16_t *)&cold_raw, (float *)&cold_s);
 8004f02:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 8004f06:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004f0a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004f0e:	f107 031c 	add.w	r3, r7, #28
 8004f12:	9302      	str	r3, [sp, #8]
 8004f14:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	4603      	mov	r3, r0
 8004f22:	4867      	ldr	r0, [pc, #412]	; (80050c0 <Update_Temp+0x2e8>)
 8004f24:	f7ff fed2 	bl	8004ccc <mcp9600_read>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	temps[4] = (int32_t)roundf(hot_s*10.0f);
 8004f2e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004f32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f3e:	f008 fcff 	bl	800d940 <roundf>
 8004f42:	eef0 7a40 	vmov.f32	s15, s0
 8004f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f4a:	ee17 2a90 	vmov	r2, s15
 8004f4e:	4b5a      	ldr	r3, [pc, #360]	; (80050b8 <Update_Temp+0x2e0>)
 8004f50:	611a      	str	r2, [r3, #16]
	if(status !=0){
 8004f52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <Update_Temp+0x186>
		return 1; //read fail
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e09a      	b.n	8005094 <Update_Temp+0x2bc>
	}

	status = mcp9600_read(&MCP_1,(int16_t *)&hot_raw, (float *)&hot_s, (int16_t *)&delta_raw, (float *)&delta_s, (int16_t *)&cold_raw, (float *)&cold_s);
 8004f5e:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 8004f62:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004f66:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004f6a:	f107 031c 	add.w	r3, r7, #28
 8004f6e:	9302      	str	r3, [sp, #8]
 8004f70:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4851      	ldr	r0, [pc, #324]	; (80050c4 <Update_Temp+0x2ec>)
 8004f80:	f7ff fea4 	bl	8004ccc <mcp9600_read>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	temps[5] = (int32_t)roundf(hot_s*10.0f);
 8004f8a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004f8e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f96:	eeb0 0a67 	vmov.f32	s0, s15
 8004f9a:	f008 fcd1 	bl	800d940 <roundf>
 8004f9e:	eef0 7a40 	vmov.f32	s15, s0
 8004fa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fa6:	ee17 2a90 	vmov	r2, s15
 8004faa:	4b43      	ldr	r3, [pc, #268]	; (80050b8 <Update_Temp+0x2e0>)
 8004fac:	615a      	str	r2, [r3, #20]
	if(status !=0){
 8004fae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <Update_Temp+0x1e2>
		return 1; //read fail
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e06c      	b.n	8005094 <Update_Temp+0x2bc>
	}

	if(temps[0] > ADC1_1_MAX_TEMP || temps[0] < ADC1_1_MIN_TEMP ){
 8004fba:	4b3f      	ldr	r3, [pc, #252]	; (80050b8 <Update_Temp+0x2e0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2bfa      	cmp	r3, #250	; 0xfa
 8004fc0:	dc03      	bgt.n	8004fca <Update_Temp+0x1f2>
 8004fc2:	4b3d      	ldr	r3, [pc, #244]	; (80050b8 <Update_Temp+0x2e0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	da01      	bge.n	8004fce <Update_Temp+0x1f6>
		return 1; //temp fault
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e062      	b.n	8005094 <Update_Temp+0x2bc>
	}
	if(temps[1] > ADC1_2_MAX_TEMP || temps[1] < ADC1_2_MIN_TEMP ){
 8004fce:	4b3a      	ldr	r3, [pc, #232]	; (80050b8 <Update_Temp+0x2e0>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2bfa      	cmp	r3, #250	; 0xfa
 8004fd4:	dc03      	bgt.n	8004fde <Update_Temp+0x206>
 8004fd6:	4b38      	ldr	r3, [pc, #224]	; (80050b8 <Update_Temp+0x2e0>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	da01      	bge.n	8004fe2 <Update_Temp+0x20a>
		return 1; //temp fault
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e058      	b.n	8005094 <Update_Temp+0x2bc>
	}
	if(temps[2] > ADC1_3_MAX_TEMP || temps[2] < ADC1_3_MIN_TEMP ){
 8004fe2:	4b35      	ldr	r3, [pc, #212]	; (80050b8 <Update_Temp+0x2e0>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2bfa      	cmp	r3, #250	; 0xfa
 8004fe8:	dc03      	bgt.n	8004ff2 <Update_Temp+0x21a>
 8004fea:	4b33      	ldr	r3, [pc, #204]	; (80050b8 <Update_Temp+0x2e0>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	da01      	bge.n	8004ff6 <Update_Temp+0x21e>
		return 1; //temp fault
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e04e      	b.n	8005094 <Update_Temp+0x2bc>
	}
	if(temps[3] > ADC1_4_MAX_TEMP || temps[3] < ADC1_4_MIN_TEMP ){
 8004ff6:	4b30      	ldr	r3, [pc, #192]	; (80050b8 <Update_Temp+0x2e0>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	2bfa      	cmp	r3, #250	; 0xfa
 8004ffc:	dc03      	bgt.n	8005006 <Update_Temp+0x22e>
 8004ffe:	4b2e      	ldr	r3, [pc, #184]	; (80050b8 <Update_Temp+0x2e0>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	da01      	bge.n	800500a <Update_Temp+0x232>
		return 1; //temp fault
 8005006:	2301      	movs	r3, #1
 8005008:	e044      	b.n	8005094 <Update_Temp+0x2bc>
	}
	if((float)(temps[4]/16.0f) > MCP_0_MAX_TEMP || (float)(temps[4]/16.0f) < MCP_0_MIN_TEMP ){
 800500a:	4b2b      	ldr	r3, [pc, #172]	; (80050b8 <Update_Temp+0x2e0>)
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005016:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800501a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800501e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80050c8 <Update_Temp+0x2f0>
 8005022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502a:	dc0e      	bgt.n	800504a <Update_Temp+0x272>
 800502c:	4b22      	ldr	r3, [pc, #136]	; (80050b8 <Update_Temp+0x2e0>)
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005038:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800503c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005040:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005048:	d501      	bpl.n	800504e <Update_Temp+0x276>
		return 1; //temp fault
 800504a:	2301      	movs	r3, #1
 800504c:	e022      	b.n	8005094 <Update_Temp+0x2bc>
	}
	if((float)(temps[5]/16.0f) > MCP_1_MAX_TEMP || (float)(temps[5]/16.0f) < MCP_1_MIN_TEMP ){
 800504e:	4b1a      	ldr	r3, [pc, #104]	; (80050b8 <Update_Temp+0x2e0>)
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800505a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800505e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005062:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80050c8 <Update_Temp+0x2f0>
 8005066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800506a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506e:	dc0e      	bgt.n	800508e <Update_Temp+0x2b6>
 8005070:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <Update_Temp+0x2e0>)
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	ee07 3a90 	vmov	s15, r3
 8005078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800507c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8005080:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005084:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508c:	d501      	bpl.n	8005092 <Update_Temp+0x2ba>
		return 1; //temp fault
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <Update_Temp+0x2bc>
	}
	return 0;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3740      	adds	r7, #64	; 0x40
 8005098:	46bd      	mov	sp, r7
 800509a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800509e:	bf00      	nop
 80050a0:	20000cb8 	.word	0x20000cb8
 80050a4:	20000cac 	.word	0x20000cac
 80050a8:	049155bb 	.word	0x049155bb
 80050ac:	ffbb6e43 	.word	0xffbb6e43
 80050b0:	00032f87 	.word	0x00032f87
 80050b4:	f874938b 	.word	0xf874938b
 80050b8:	20000cc0 	.word	0x20000cc0
 80050bc:	200002a4 	.word	0x200002a4
 80050c0:	20000c74 	.word	0x20000c74
 80050c4:	20000c90 	.word	0x20000c90
 80050c8:	437a0000 	.word	0x437a0000

080050cc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){ // inidcates which adc is done running conversion and raises flag
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050dc:	d102      	bne.n	80050e4 <HAL_ADC_ConvCpltCallback+0x18>
		adc1_convert = 1;
 80050de:	4b08      	ldr	r3, [pc, #32]	; (8005100 <HAL_ADC_ConvCpltCallback+0x34>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	601a      	str	r2, [r3, #0]
	}
	if(hadc->Instance == ADC5){
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a06      	ldr	r2, [pc, #24]	; (8005104 <HAL_ADC_ConvCpltCallback+0x38>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d102      	bne.n	80050f4 <HAL_ADC_ConvCpltCallback+0x28>
		adc5_convert = 1;
 80050ee:	4b06      	ldr	r3, [pc, #24]	; (8005108 <HAL_ADC_ConvCpltCallback+0x3c>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
	}

}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	20000cb8 	.word	0x20000cb8
 8005104:	50000600 	.word	0x50000600
 8005108:	20000cbc 	.word	0x20000cbc

0800510c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800510c:	480d      	ldr	r0, [pc, #52]	; (8005144 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800510e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005110:	f7ff fd2e 	bl	8004b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005114:	480c      	ldr	r0, [pc, #48]	; (8005148 <LoopForever+0x6>)
  ldr r1, =_edata
 8005116:	490d      	ldr	r1, [pc, #52]	; (800514c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005118:	4a0d      	ldr	r2, [pc, #52]	; (8005150 <LoopForever+0xe>)
  movs r3, #0
 800511a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800511c:	e002      	b.n	8005124 <LoopCopyDataInit>

0800511e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800511e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005122:	3304      	adds	r3, #4

08005124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005128:	d3f9      	bcc.n	800511e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800512a:	4a0a      	ldr	r2, [pc, #40]	; (8005154 <LoopForever+0x12>)
  ldr r4, =_ebss
 800512c:	4c0a      	ldr	r4, [pc, #40]	; (8005158 <LoopForever+0x16>)
  movs r3, #0
 800512e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005130:	e001      	b.n	8005136 <LoopFillZerobss>

08005132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005134:	3204      	adds	r2, #4

08005136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005138:	d3fb      	bcc.n	8005132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800513a:	f008 feff 	bl	800df3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800513e:	f7fd fe99 	bl	8002e74 <main>

08005142 <LoopForever>:

LoopForever:
    b LoopForever
 8005142:	e7fe      	b.n	8005142 <LoopForever>
  ldr   r0, =_estack
 8005144:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800514c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8005150:	0800ea80 	.word	0x0800ea80
  ldr r2, =_sbss
 8005154:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8005158:	20000e30 	.word	0x20000e30

0800515c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800515c:	e7fe      	b.n	800515c <ADC1_2_IRQHandler>

0800515e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005168:	2003      	movs	r0, #3
 800516a:	f001 fcb5 	bl	8006ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800516e:	200f      	movs	r0, #15
 8005170:	f000 f80e 	bl	8005190 <HAL_InitTick>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	71fb      	strb	r3, [r7, #7]
 800517e:	e001      	b.n	8005184 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005180:	f7fe fe6e 	bl	8003e60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005184:	79fb      	ldrb	r3, [r7, #7]

}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800519c:	4b16      	ldr	r3, [pc, #88]	; (80051f8 <HAL_InitTick+0x68>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d022      	beq.n	80051ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80051a4:	4b15      	ldr	r3, [pc, #84]	; (80051fc <HAL_InitTick+0x6c>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4b13      	ldr	r3, [pc, #76]	; (80051f8 <HAL_InitTick+0x68>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80051b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	4618      	mov	r0, r3
 80051ba:	f001 fcc0 	bl	8006b3e <HAL_SYSTICK_Config>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10f      	bne.n	80051e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b0f      	cmp	r3, #15
 80051c8:	d809      	bhi.n	80051de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051ca:	2200      	movs	r2, #0
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	f04f 30ff 	mov.w	r0, #4294967295
 80051d2:	f001 fc8c 	bl	8006aee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80051d6:	4a0a      	ldr	r2, [pc, #40]	; (8005200 <HAL_InitTick+0x70>)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	e007      	b.n	80051ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
 80051e2:	e004      	b.n	80051ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
 80051e8:	e001      	b.n	80051ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000008 	.word	0x20000008
 80051fc:	20000000 	.word	0x20000000
 8005200:	20000004 	.word	0x20000004

08005204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_IncTick+0x1c>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <HAL_IncTick+0x20>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4413      	add	r3, r2
 8005212:	4a03      	ldr	r2, [pc, #12]	; (8005220 <HAL_IncTick+0x1c>)
 8005214:	6013      	str	r3, [r2, #0]
}
 8005216:	bf00      	nop
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	20000ce0 	.word	0x20000ce0
 8005224:	20000008 	.word	0x20000008

08005228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  return uwTick;
 800522c:	4b03      	ldr	r3, [pc, #12]	; (800523c <HAL_GetTick+0x14>)
 800522e:	681b      	ldr	r3, [r3, #0]
}
 8005230:	4618      	mov	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000ce0 	.word	0x20000ce0

08005240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005248:	f7ff ffee 	bl	8005228 <HAL_GetTick>
 800524c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005258:	d004      	beq.n	8005264 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800525a:	4b09      	ldr	r3, [pc, #36]	; (8005280 <HAL_Delay+0x40>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4413      	add	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005264:	bf00      	nop
 8005266:	f7ff ffdf 	bl	8005228 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	429a      	cmp	r2, r3
 8005274:	d8f7      	bhi.n	8005266 <HAL_Delay+0x26>
  {
  }
}
 8005276:	bf00      	nop
 8005278:	bf00      	nop
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20000008 	.word	0x20000008

08005284 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	609a      	str	r2, [r3, #8]
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3360      	adds	r3, #96	; 0x60
 80052fe:	461a      	mov	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4b08      	ldr	r3, [pc, #32]	; (8005330 <LL_ADC_SetOffset+0x44>)
 800530e:	4013      	ands	r3, r2
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	4313      	orrs	r3, r2
 800531c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	03fff000 	.word	0x03fff000

08005334 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3360      	adds	r3, #96	; 0x60
 8005342:	461a      	mov	r2, r3
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3360      	adds	r3, #96	; 0x60
 8005370:	461a      	mov	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	431a      	orrs	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005396:	b480      	push	{r7}
 8005398:	b087      	sub	sp, #28
 800539a:	af00      	add	r7, sp, #0
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3360      	adds	r3, #96	; 0x60
 80053a6:	461a      	mov	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80053c0:	bf00      	nop
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3360      	adds	r3, #96	; 0x60
 80053dc:	461a      	mov	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	615a      	str	r2, [r3, #20]
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800544e:	b480      	push	{r7}
 8005450:	b087      	sub	sp, #28
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3330      	adds	r3, #48	; 0x30
 800545e:	461a      	mov	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	f003 030c 	and.w	r3, r3, #12
 800546a:	4413      	add	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f003 031f 	and.w	r3, r3, #31
 8005478:	211f      	movs	r1, #31
 800547a:	fa01 f303 	lsl.w	r3, r1, r3
 800547e:	43db      	mvns	r3, r3
 8005480:	401a      	ands	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	0e9b      	lsrs	r3, r3, #26
 8005486:	f003 011f 	and.w	r1, r3, #31
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa01 f303 	lsl.w	r3, r1, r3
 8005494:	431a      	orrs	r2, r3
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b087      	sub	sp, #28
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3314      	adds	r3, #20
 80054b6:	461a      	mov	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	0e5b      	lsrs	r3, r3, #25
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	4413      	add	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	0d1b      	lsrs	r3, r3, #20
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	2107      	movs	r1, #7
 80054d4:	fa01 f303 	lsl.w	r3, r1, r3
 80054d8:	43db      	mvns	r3, r3
 80054da:	401a      	ands	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	0d1b      	lsrs	r3, r3, #20
 80054e0:	f003 031f 	and.w	r3, r3, #31
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ea:	431a      	orrs	r2, r3
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80054f0:	bf00      	nop
 80054f2:	371c      	adds	r7, #28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005514:	43db      	mvns	r3, r3
 8005516:	401a      	ands	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f003 0318 	and.w	r3, r3, #24
 800551e:	4908      	ldr	r1, [pc, #32]	; (8005540 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005520:	40d9      	lsrs	r1, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	400b      	ands	r3, r1
 8005526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800552a:	431a      	orrs	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	0007ffff 	.word	0x0007ffff

08005544 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 031f 	and.w	r3, r3, #31
}
 8005554:	4618      	mov	r0, r3
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005570:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6093      	str	r3, [r2, #8]
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005598:	d101      	bne.n	800559e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80055bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055e8:	d101      	bne.n	80055ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800560c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005610:	f043 0201 	orr.w	r2, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <LL_ADC_IsEnabled+0x18>
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <LL_ADC_IsEnabled+0x1a>
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800565a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800565e:	f043 0204 	orr.w	r2, r3, #4
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b04      	cmp	r3, #4
 8005684:	d101      	bne.n	800568a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d101      	bne.n	80056b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80056c0:	b590      	push	{r4, r7, lr}
 80056c2:	b089      	sub	sp, #36	; 0x24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e1a9      	b.n	8005a2e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d109      	bne.n	80056fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7fe fbdd 	bl	8003ea8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff ff3f 	bl	8005584 <LL_ADC_IsDeepPowerDownEnabled>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff ff25 	bl	8005560 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff ff5a 	bl	80055d4 <LL_ADC_IsInternalRegulatorEnabled>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d115      	bne.n	8005752 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff ff3e 	bl	80055ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005730:	4b9c      	ldr	r3, [pc, #624]	; (80059a4 <HAL_ADC_Init+0x2e4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	099b      	lsrs	r3, r3, #6
 8005736:	4a9c      	ldr	r2, [pc, #624]	; (80059a8 <HAL_ADC_Init+0x2e8>)
 8005738:	fba2 2303 	umull	r2, r3, r2, r3
 800573c:	099b      	lsrs	r3, r3, #6
 800573e:	3301      	adds	r3, #1
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005744:	e002      	b.n	800574c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3b01      	subs	r3, #1
 800574a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f9      	bne.n	8005746 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff ff3c 	bl	80055d4 <LL_ADC_IsInternalRegulatorEnabled>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10d      	bne.n	800577e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005766:	f043 0210 	orr.w	r2, r3, #16
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005772:	f043 0201 	orr.w	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff ff75 	bl	8005672 <LL_ADC_REG_IsConversionOngoing>
 8005788:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	2b00      	cmp	r3, #0
 8005794:	f040 8142 	bne.w	8005a1c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2b00      	cmp	r3, #0
 800579c:	f040 813e 	bne.w	8005a1c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80057a8:	f043 0202 	orr.w	r2, r3, #2
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff ff35 	bl	8005624 <LL_ADC_IsEnabled>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d141      	bne.n	8005844 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057c8:	d004      	beq.n	80057d4 <HAL_ADC_Init+0x114>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a77      	ldr	r2, [pc, #476]	; (80059ac <HAL_ADC_Init+0x2ec>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d10f      	bne.n	80057f4 <HAL_ADC_Init+0x134>
 80057d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80057d8:	f7ff ff24 	bl	8005624 <LL_ADC_IsEnabled>
 80057dc:	4604      	mov	r4, r0
 80057de:	4873      	ldr	r0, [pc, #460]	; (80059ac <HAL_ADC_Init+0x2ec>)
 80057e0:	f7ff ff20 	bl	8005624 <LL_ADC_IsEnabled>
 80057e4:	4603      	mov	r3, r0
 80057e6:	4323      	orrs	r3, r4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bf0c      	ite	eq
 80057ec:	2301      	moveq	r3, #1
 80057ee:	2300      	movne	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	e012      	b.n	800581a <HAL_ADC_Init+0x15a>
 80057f4:	486e      	ldr	r0, [pc, #440]	; (80059b0 <HAL_ADC_Init+0x2f0>)
 80057f6:	f7ff ff15 	bl	8005624 <LL_ADC_IsEnabled>
 80057fa:	4604      	mov	r4, r0
 80057fc:	486d      	ldr	r0, [pc, #436]	; (80059b4 <HAL_ADC_Init+0x2f4>)
 80057fe:	f7ff ff11 	bl	8005624 <LL_ADC_IsEnabled>
 8005802:	4603      	mov	r3, r0
 8005804:	431c      	orrs	r4, r3
 8005806:	486c      	ldr	r0, [pc, #432]	; (80059b8 <HAL_ADC_Init+0x2f8>)
 8005808:	f7ff ff0c 	bl	8005624 <LL_ADC_IsEnabled>
 800580c:	4603      	mov	r3, r0
 800580e:	4323      	orrs	r3, r4
 8005810:	2b00      	cmp	r3, #0
 8005812:	bf0c      	ite	eq
 8005814:	2301      	moveq	r3, #1
 8005816:	2300      	movne	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d012      	beq.n	8005844 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005826:	d004      	beq.n	8005832 <HAL_ADC_Init+0x172>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a5f      	ldr	r2, [pc, #380]	; (80059ac <HAL_ADC_Init+0x2ec>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d101      	bne.n	8005836 <HAL_ADC_Init+0x176>
 8005832:	4a62      	ldr	r2, [pc, #392]	; (80059bc <HAL_ADC_Init+0x2fc>)
 8005834:	e000      	b.n	8005838 <HAL_ADC_Init+0x178>
 8005836:	4a62      	ldr	r2, [pc, #392]	; (80059c0 <HAL_ADC_Init+0x300>)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f7ff fd20 	bl	8005284 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	7f5b      	ldrb	r3, [r3, #29]
 8005848:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800584e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005854:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800585a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005862:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005864:	4313      	orrs	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800586e:	2b01      	cmp	r3, #1
 8005870:	d106      	bne.n	8005880 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005876:	3b01      	subs	r3, #1
 8005878:	045b      	lsls	r3, r3, #17
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4313      	orrs	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	4313      	orrs	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	4b48      	ldr	r3, [pc, #288]	; (80059c4 <HAL_ADC_Init+0x304>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	69b9      	ldr	r1, [r7, #24]
 80058ac:	430b      	orrs	r3, r1
 80058ae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff fee4 	bl	8005698 <LL_ADC_INJ_IsConversionOngoing>
 80058d0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d17f      	bne.n	80059d8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d17c      	bne.n	80059d8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80058e2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058ea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80058ec:	4313      	orrs	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058fa:	f023 0302 	bic.w	r3, r3, #2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	69b9      	ldr	r1, [r7, #24]
 8005904:	430b      	orrs	r3, r1
 8005906:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d017      	beq.n	8005940 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800591e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005928:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800592c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6911      	ldr	r1, [r2, #16]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6812      	ldr	r2, [r2, #0]
 8005938:	430b      	orrs	r3, r1
 800593a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800593e:	e013      	b.n	8005968 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800594e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005960:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005964:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800596e:	2b01      	cmp	r3, #1
 8005970:	d12a      	bne.n	80059c8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800597c:	f023 0304 	bic.w	r3, r3, #4
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005988:	4311      	orrs	r1, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800598e:	4311      	orrs	r1, r2
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005994:	430a      	orrs	r2, r1
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0201 	orr.w	r2, r2, #1
 80059a0:	611a      	str	r2, [r3, #16]
 80059a2:	e019      	b.n	80059d8 <HAL_ADC_Init+0x318>
 80059a4:	20000000 	.word	0x20000000
 80059a8:	053e2d63 	.word	0x053e2d63
 80059ac:	50000100 	.word	0x50000100
 80059b0:	50000400 	.word	0x50000400
 80059b4:	50000500 	.word	0x50000500
 80059b8:	50000600 	.word	0x50000600
 80059bc:	50000300 	.word	0x50000300
 80059c0:	50000700 	.word	0x50000700
 80059c4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691a      	ldr	r2, [r3, #16]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0201 	bic.w	r2, r2, #1
 80059d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d10c      	bne.n	80059fa <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	f023 010f 	bic.w	r1, r3, #15
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	1e5a      	subs	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	631a      	str	r2, [r3, #48]	; 0x30
 80059f8:	e007      	b.n	8005a0a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 020f 	bic.w	r2, r2, #15
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0e:	f023 0303 	bic.w	r3, r3, #3
 8005a12:	f043 0201 	orr.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a1a:	e007      	b.n	8005a2c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a20:	f043 0210 	orr.w	r2, r3, #16
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3724      	adds	r7, #36	; 0x24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd90      	pop	{r4, r7, pc}
 8005a36:	bf00      	nop

08005a38 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a4c:	d004      	beq.n	8005a58 <HAL_ADC_Start_DMA+0x20>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a5a      	ldr	r2, [pc, #360]	; (8005bbc <HAL_ADC_Start_DMA+0x184>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d101      	bne.n	8005a5c <HAL_ADC_Start_DMA+0x24>
 8005a58:	4b59      	ldr	r3, [pc, #356]	; (8005bc0 <HAL_ADC_Start_DMA+0x188>)
 8005a5a:	e000      	b.n	8005a5e <HAL_ADC_Start_DMA+0x26>
 8005a5c:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <HAL_ADC_Start_DMA+0x18c>)
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff fd70 	bl	8005544 <LL_ADC_GetMultimode>
 8005a64:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff fe01 	bl	8005672 <LL_ADC_REG_IsConversionOngoing>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f040 809b 	bne.w	8005bae <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_ADC_Start_DMA+0x4e>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e096      	b.n	8005bb4 <HAL_ADC_Start_DMA+0x17c>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a4d      	ldr	r2, [pc, #308]	; (8005bc8 <HAL_ADC_Start_DMA+0x190>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d008      	beq.n	8005aaa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b05      	cmp	r3, #5
 8005aa2:	d002      	beq.n	8005aaa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2b09      	cmp	r3, #9
 8005aa8:	d17a      	bne.n	8005ba0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fcec 	bl	8006488 <ADC_Enable>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d16d      	bne.n	8005b96 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ac2:	f023 0301 	bic.w	r3, r3, #1
 8005ac6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a3a      	ldr	r2, [pc, #232]	; (8005bbc <HAL_ADC_Start_DMA+0x184>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d009      	beq.n	8005aec <HAL_ADC_Start_DMA+0xb4>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a3b      	ldr	r2, [pc, #236]	; (8005bcc <HAL_ADC_Start_DMA+0x194>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d002      	beq.n	8005ae8 <HAL_ADC_Start_DMA+0xb0>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	e003      	b.n	8005af0 <HAL_ADC_Start_DMA+0xb8>
 8005ae8:	4b39      	ldr	r3, [pc, #228]	; (8005bd0 <HAL_ADC_Start_DMA+0x198>)
 8005aea:	e001      	b.n	8005af0 <HAL_ADC_Start_DMA+0xb8>
 8005aec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d002      	beq.n	8005afe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d105      	bne.n	8005b0a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d006      	beq.n	8005b24 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1a:	f023 0206 	bic.w	r2, r3, #6
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	661a      	str	r2, [r3, #96]	; 0x60
 8005b22:	e002      	b.n	8005b2a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	4a29      	ldr	r2, [pc, #164]	; (8005bd4 <HAL_ADC_Start_DMA+0x19c>)
 8005b30:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b36:	4a28      	ldr	r2, [pc, #160]	; (8005bd8 <HAL_ADC_Start_DMA+0x1a0>)
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3e:	4a27      	ldr	r2, [pc, #156]	; (8005bdc <HAL_ADC_Start_DMA+0x1a4>)
 8005b40:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	221c      	movs	r2, #28
 8005b48:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0210 	orr.w	r2, r2, #16
 8005b60:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0201 	orr.w	r2, r2, #1
 8005b70:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3340      	adds	r3, #64	; 0x40
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f001 f891 	bl	8006ca8 <HAL_DMA_Start_IT>
 8005b86:	4603      	mov	r3, r0
 8005b88:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff fd5b 	bl	800564a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005b94:	e00d      	b.n	8005bb2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005b9e:	e008      	b.n	8005bb2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005bac:	e001      	b.n	8005bb2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005bae:	2302      	movs	r3, #2
 8005bb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	50000100 	.word	0x50000100
 8005bc0:	50000300 	.word	0x50000300
 8005bc4:	50000700 	.word	0x50000700
 8005bc8:	50000600 	.word	0x50000600
 8005bcc:	50000500 	.word	0x50000500
 8005bd0:	50000400 	.word	0x50000400
 8005bd4:	080065b5 	.word	0x080065b5
 8005bd8:	0800668d 	.word	0x0800668d
 8005bdc:	080066a9 	.word	0x080066a9

08005be0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b0b6      	sub	sp, #216	; 0xd8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d102      	bne.n	8005c2c <HAL_ADC_ConfigChannel+0x24>
 8005c26:	2302      	movs	r3, #2
 8005c28:	f000 bc13 	b.w	8006452 <HAL_ADC_ConfigChannel+0x84a>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff fd1a 	bl	8005672 <LL_ADC_REG_IsConversionOngoing>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f040 83f3 	bne.w	800642c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6859      	ldr	r1, [r3, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	f7ff fbfb 	bl	800544e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff fd08 	bl	8005672 <LL_ADC_REG_IsConversionOngoing>
 8005c62:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff fd14 	bl	8005698 <LL_ADC_INJ_IsConversionOngoing>
 8005c70:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005c74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f040 81d9 	bne.w	8006030 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005c7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f040 81d4 	bne.w	8006030 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c90:	d10f      	bne.n	8005cb2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	f7ff fc02 	bl	80054a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff fba9 	bl	8005402 <LL_ADC_SetSamplingTimeCommonConfig>
 8005cb0:	e00e      	b.n	8005cd0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6819      	ldr	r1, [r3, #0]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f7ff fbf1 	bl	80054a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2100      	movs	r1, #0
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7ff fb99 	bl	8005402 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	695a      	ldr	r2, [r3, #20]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	08db      	lsrs	r3, r3, #3
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d022      	beq.n	8005d38 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	6919      	ldr	r1, [r3, #16]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d02:	f7ff faf3 	bl	80052ec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6919      	ldr	r1, [r3, #16]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f7ff fb3f 	bl	8005396 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d102      	bne.n	8005d2e <HAL_ADC_ConfigChannel+0x126>
 8005d28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d2c:	e000      	b.n	8005d30 <HAL_ADC_ConfigChannel+0x128>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	461a      	mov	r2, r3
 8005d32:	f7ff fb4b 	bl	80053cc <LL_ADC_SetOffsetSaturation>
 8005d36:	e17b      	b.n	8006030 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff faf8 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <HAL_ADC_ConfigChannel+0x15c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2100      	movs	r1, #0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff faed 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	0e9b      	lsrs	r3, r3, #26
 8005d5e:	f003 021f 	and.w	r2, r3, #31
 8005d62:	e01e      	b.n	8005da2 <HAL_ADC_ConfigChannel+0x19a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fae2 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d7a:	fa93 f3a3 	rbit	r3, r3
 8005d7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005d82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005d92:	2320      	movs	r3, #32
 8005d94:	e004      	b.n	8005da0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005d96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d9a:	fab3 f383 	clz	r3, r3
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d105      	bne.n	8005dba <HAL_ADC_ConfigChannel+0x1b2>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	0e9b      	lsrs	r3, r3, #26
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	e018      	b.n	8005dec <HAL_ADC_ConfigChannel+0x1e4>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005dc6:	fa93 f3a3 	rbit	r3, r3
 8005dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005dd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005dde:	2320      	movs	r3, #32
 8005de0:	e004      	b.n	8005dec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005de2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005de6:	fab3 f383 	clz	r3, r3
 8005dea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d106      	bne.n	8005dfe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2200      	movs	r2, #0
 8005df6:	2100      	movs	r1, #0
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fab1 	bl	8005360 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2101      	movs	r1, #1
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fa95 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <HAL_ADC_ConfigChannel+0x222>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2101      	movs	r1, #1
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff fa8a 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005e20:	4603      	mov	r3, r0
 8005e22:	0e9b      	lsrs	r3, r3, #26
 8005e24:	f003 021f 	and.w	r2, r3, #31
 8005e28:	e01e      	b.n	8005e68 <HAL_ADC_ConfigChannel+0x260>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2101      	movs	r1, #1
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fa7f 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005e36:	4603      	mov	r3, r0
 8005e38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e40:	fa93 f3a3 	rbit	r3, r3
 8005e44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005e48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005e50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005e58:	2320      	movs	r3, #32
 8005e5a:	e004      	b.n	8005e66 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005e5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e60:	fab3 f383 	clz	r3, r3
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <HAL_ADC_ConfigChannel+0x278>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	0e9b      	lsrs	r3, r3, #26
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	e018      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x2aa>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e8c:	fa93 f3a3 	rbit	r3, r3
 8005e90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005e94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	e004      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eac:	fab3 f383 	clz	r3, r3
 8005eb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d106      	bne.n	8005ec4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff fa4e 	bl	8005360 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2102      	movs	r1, #2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fa32 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <HAL_ADC_ConfigChannel+0x2e8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2102      	movs	r1, #2
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff fa27 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	0e9b      	lsrs	r3, r3, #26
 8005eea:	f003 021f 	and.w	r2, r3, #31
 8005eee:	e01e      	b.n	8005f2e <HAL_ADC_ConfigChannel+0x326>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff fa1c 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f06:	fa93 f3a3 	rbit	r3, r3
 8005f0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005f0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005f16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005f1e:	2320      	movs	r3, #32
 8005f20:	e004      	b.n	8005f2c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005f22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f26:	fab3 f383 	clz	r3, r3
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d105      	bne.n	8005f46 <HAL_ADC_ConfigChannel+0x33e>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	0e9b      	lsrs	r3, r3, #26
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	e016      	b.n	8005f74 <HAL_ADC_ConfigChannel+0x36c>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f52:	fa93 f3a3 	rbit	r3, r3
 8005f56:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005f58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005f66:	2320      	movs	r3, #32
 8005f68:	e004      	b.n	8005f74 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f6e:	fab3 f383 	clz	r3, r3
 8005f72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d106      	bne.n	8005f86 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2102      	movs	r1, #2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff f9ed 	bl	8005360 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2103      	movs	r1, #3
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff f9d1 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <HAL_ADC_ConfigChannel+0x3aa>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2103      	movs	r1, #3
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff f9c6 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	0e9b      	lsrs	r3, r3, #26
 8005fac:	f003 021f 	and.w	r2, r3, #31
 8005fb0:	e017      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x3da>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2103      	movs	r1, #3
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff f9bb 	bl	8005334 <LL_ADC_GetOffsetChannel>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc4:	fa93 f3a3 	rbit	r3, r3
 8005fc8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fcc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005fce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005fd4:	2320      	movs	r3, #32
 8005fd6:	e003      	b.n	8005fe0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fda:	fab3 f383 	clz	r3, r3
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d105      	bne.n	8005ffa <HAL_ADC_ConfigChannel+0x3f2>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	0e9b      	lsrs	r3, r3, #26
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	e011      	b.n	800601e <HAL_ADC_ConfigChannel+0x416>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006002:	fa93 f3a3 	rbit	r3, r3
 8006006:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800600c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006012:	2320      	movs	r3, #32
 8006014:	e003      	b.n	800601e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006018:	fab3 f383 	clz	r3, r3
 800601c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800601e:	429a      	cmp	r2, r3
 8006020:	d106      	bne.n	8006030 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2200      	movs	r2, #0
 8006028:	2103      	movs	r1, #3
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff f998 	bl	8005360 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff faf5 	bl	8005624 <LL_ADC_IsEnabled>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	f040 813d 	bne.w	80062bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	6819      	ldr	r1, [r3, #0]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	461a      	mov	r2, r3
 8006050:	f7ff fa54 	bl	80054fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	4aa2      	ldr	r2, [pc, #648]	; (80062e4 <HAL_ADC_ConfigChannel+0x6dc>)
 800605a:	4293      	cmp	r3, r2
 800605c:	f040 812e 	bne.w	80062bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10b      	bne.n	8006088 <HAL_ADC_ConfigChannel+0x480>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	0e9b      	lsrs	r3, r3, #26
 8006076:	3301      	adds	r3, #1
 8006078:	f003 031f 	and.w	r3, r3, #31
 800607c:	2b09      	cmp	r3, #9
 800607e:	bf94      	ite	ls
 8006080:	2301      	movls	r3, #1
 8006082:	2300      	movhi	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	e019      	b.n	80060bc <HAL_ADC_ConfigChannel+0x4b4>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006090:	fa93 f3a3 	rbit	r3, r3
 8006094:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006098:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800609a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80060a0:	2320      	movs	r3, #32
 80060a2:	e003      	b.n	80060ac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80060a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060a6:	fab3 f383 	clz	r3, r3
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	3301      	adds	r3, #1
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	2b09      	cmp	r3, #9
 80060b4:	bf94      	ite	ls
 80060b6:	2301      	movls	r3, #1
 80060b8:	2300      	movhi	r3, #0
 80060ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d079      	beq.n	80061b4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d107      	bne.n	80060dc <HAL_ADC_ConfigChannel+0x4d4>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	0e9b      	lsrs	r3, r3, #26
 80060d2:	3301      	adds	r3, #1
 80060d4:	069b      	lsls	r3, r3, #26
 80060d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060da:	e015      	b.n	8006108 <HAL_ADC_ConfigChannel+0x500>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e4:	fa93 f3a3 	rbit	r3, r3
 80060e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80060ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80060ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80060f4:	2320      	movs	r3, #32
 80060f6:	e003      	b.n	8006100 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80060f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060fa:	fab3 f383 	clz	r3, r3
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	3301      	adds	r3, #1
 8006102:	069b      	lsls	r3, r3, #26
 8006104:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006110:	2b00      	cmp	r3, #0
 8006112:	d109      	bne.n	8006128 <HAL_ADC_ConfigChannel+0x520>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	0e9b      	lsrs	r3, r3, #26
 800611a:	3301      	adds	r3, #1
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	2101      	movs	r1, #1
 8006122:	fa01 f303 	lsl.w	r3, r1, r3
 8006126:	e017      	b.n	8006158 <HAL_ADC_ConfigChannel+0x550>
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006130:	fa93 f3a3 	rbit	r3, r3
 8006134:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006138:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800613a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006140:	2320      	movs	r3, #32
 8006142:	e003      	b.n	800614c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006146:	fab3 f383 	clz	r3, r3
 800614a:	b2db      	uxtb	r3, r3
 800614c:	3301      	adds	r3, #1
 800614e:	f003 031f 	and.w	r3, r3, #31
 8006152:	2101      	movs	r1, #1
 8006154:	fa01 f303 	lsl.w	r3, r1, r3
 8006158:	ea42 0103 	orr.w	r1, r2, r3
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <HAL_ADC_ConfigChannel+0x576>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	0e9b      	lsrs	r3, r3, #26
 800616e:	3301      	adds	r3, #1
 8006170:	f003 021f 	and.w	r2, r3, #31
 8006174:	4613      	mov	r3, r2
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	4413      	add	r3, r2
 800617a:	051b      	lsls	r3, r3, #20
 800617c:	e018      	b.n	80061b0 <HAL_ADC_ConfigChannel+0x5a8>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	fa93 f3a3 	rbit	r3, r3
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006196:	2320      	movs	r3, #32
 8006198:	e003      	b.n	80061a2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800619a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800619c:	fab3 f383 	clz	r3, r3
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	3301      	adds	r3, #1
 80061a4:	f003 021f 	and.w	r2, r3, #31
 80061a8:	4613      	mov	r3, r2
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	4413      	add	r3, r2
 80061ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061b0:	430b      	orrs	r3, r1
 80061b2:	e07e      	b.n	80062b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d107      	bne.n	80061d0 <HAL_ADC_ConfigChannel+0x5c8>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	0e9b      	lsrs	r3, r3, #26
 80061c6:	3301      	adds	r3, #1
 80061c8:	069b      	lsls	r3, r3, #26
 80061ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061ce:	e015      	b.n	80061fc <HAL_ADC_ConfigChannel+0x5f4>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	fa93 f3a3 	rbit	r3, r3
 80061dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80061e8:	2320      	movs	r3, #32
 80061ea:	e003      	b.n	80061f4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	fab3 f383 	clz	r3, r3
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	3301      	adds	r3, #1
 80061f6:	069b      	lsls	r3, r3, #26
 80061f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006204:	2b00      	cmp	r3, #0
 8006206:	d109      	bne.n	800621c <HAL_ADC_ConfigChannel+0x614>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	0e9b      	lsrs	r3, r3, #26
 800620e:	3301      	adds	r3, #1
 8006210:	f003 031f 	and.w	r3, r3, #31
 8006214:	2101      	movs	r1, #1
 8006216:	fa01 f303 	lsl.w	r3, r1, r3
 800621a:	e017      	b.n	800624c <HAL_ADC_ConfigChannel+0x644>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	fa93 f3a3 	rbit	r3, r3
 8006228:	61fb      	str	r3, [r7, #28]
  return result;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006234:	2320      	movs	r3, #32
 8006236:	e003      	b.n	8006240 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	fab3 f383 	clz	r3, r3
 800623e:	b2db      	uxtb	r3, r3
 8006240:	3301      	adds	r3, #1
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	2101      	movs	r1, #1
 8006248:	fa01 f303 	lsl.w	r3, r1, r3
 800624c:	ea42 0103 	orr.w	r1, r2, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10d      	bne.n	8006278 <HAL_ADC_ConfigChannel+0x670>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	0e9b      	lsrs	r3, r3, #26
 8006262:	3301      	adds	r3, #1
 8006264:	f003 021f 	and.w	r2, r3, #31
 8006268:	4613      	mov	r3, r2
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	4413      	add	r3, r2
 800626e:	3b1e      	subs	r3, #30
 8006270:	051b      	lsls	r3, r3, #20
 8006272:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006276:	e01b      	b.n	80062b0 <HAL_ADC_ConfigChannel+0x6a8>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	fa93 f3a3 	rbit	r3, r3
 8006284:	613b      	str	r3, [r7, #16]
  return result;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006290:	2320      	movs	r3, #32
 8006292:	e003      	b.n	800629c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	fab3 f383 	clz	r3, r3
 800629a:	b2db      	uxtb	r3, r3
 800629c:	3301      	adds	r3, #1
 800629e:	f003 021f 	and.w	r2, r3, #31
 80062a2:	4613      	mov	r3, r2
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	4413      	add	r3, r2
 80062a8:	3b1e      	subs	r3, #30
 80062aa:	051b      	lsls	r3, r3, #20
 80062ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062b6:	4619      	mov	r1, r3
 80062b8:	f7ff f8f5 	bl	80054a6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <HAL_ADC_ConfigChannel+0x6e0>)
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80be 	beq.w	8006446 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062d2:	d004      	beq.n	80062de <HAL_ADC_ConfigChannel+0x6d6>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a04      	ldr	r2, [pc, #16]	; (80062ec <HAL_ADC_ConfigChannel+0x6e4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d10a      	bne.n	80062f4 <HAL_ADC_ConfigChannel+0x6ec>
 80062de:	4b04      	ldr	r3, [pc, #16]	; (80062f0 <HAL_ADC_ConfigChannel+0x6e8>)
 80062e0:	e009      	b.n	80062f6 <HAL_ADC_ConfigChannel+0x6ee>
 80062e2:	bf00      	nop
 80062e4:	407f0000 	.word	0x407f0000
 80062e8:	80080000 	.word	0x80080000
 80062ec:	50000100 	.word	0x50000100
 80062f0:	50000300 	.word	0x50000300
 80062f4:	4b59      	ldr	r3, [pc, #356]	; (800645c <HAL_ADC_ConfigChannel+0x854>)
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe ffea 	bl	80052d0 <LL_ADC_GetCommonPathInternalCh>
 80062fc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a56      	ldr	r2, [pc, #344]	; (8006460 <HAL_ADC_ConfigChannel+0x858>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d004      	beq.n	8006314 <HAL_ADC_ConfigChannel+0x70c>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a55      	ldr	r2, [pc, #340]	; (8006464 <HAL_ADC_ConfigChannel+0x85c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d13a      	bne.n	800638a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d134      	bne.n	800638a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006328:	d005      	beq.n	8006336 <HAL_ADC_ConfigChannel+0x72e>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a4e      	ldr	r2, [pc, #312]	; (8006468 <HAL_ADC_ConfigChannel+0x860>)
 8006330:	4293      	cmp	r3, r2
 8006332:	f040 8085 	bne.w	8006440 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800633e:	d004      	beq.n	800634a <HAL_ADC_ConfigChannel+0x742>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a49      	ldr	r2, [pc, #292]	; (800646c <HAL_ADC_ConfigChannel+0x864>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d101      	bne.n	800634e <HAL_ADC_ConfigChannel+0x746>
 800634a:	4a49      	ldr	r2, [pc, #292]	; (8006470 <HAL_ADC_ConfigChannel+0x868>)
 800634c:	e000      	b.n	8006350 <HAL_ADC_ConfigChannel+0x748>
 800634e:	4a43      	ldr	r2, [pc, #268]	; (800645c <HAL_ADC_ConfigChannel+0x854>)
 8006350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006354:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006358:	4619      	mov	r1, r3
 800635a:	4610      	mov	r0, r2
 800635c:	f7fe ffa5 	bl	80052aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006360:	4b44      	ldr	r3, [pc, #272]	; (8006474 <HAL_ADC_ConfigChannel+0x86c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	099b      	lsrs	r3, r3, #6
 8006366:	4a44      	ldr	r2, [pc, #272]	; (8006478 <HAL_ADC_ConfigChannel+0x870>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	099b      	lsrs	r3, r3, #6
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	4613      	mov	r3, r2
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	4413      	add	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800637a:	e002      	b.n	8006382 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3b01      	subs	r3, #1
 8006380:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1f9      	bne.n	800637c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006388:	e05a      	b.n	8006440 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a3b      	ldr	r2, [pc, #236]	; (800647c <HAL_ADC_ConfigChannel+0x874>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d125      	bne.n	80063e0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d11f      	bne.n	80063e0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a31      	ldr	r2, [pc, #196]	; (800646c <HAL_ADC_ConfigChannel+0x864>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d104      	bne.n	80063b4 <HAL_ADC_ConfigChannel+0x7ac>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a34      	ldr	r2, [pc, #208]	; (8006480 <HAL_ADC_ConfigChannel+0x878>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d047      	beq.n	8006444 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063bc:	d004      	beq.n	80063c8 <HAL_ADC_ConfigChannel+0x7c0>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a2a      	ldr	r2, [pc, #168]	; (800646c <HAL_ADC_ConfigChannel+0x864>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d101      	bne.n	80063cc <HAL_ADC_ConfigChannel+0x7c4>
 80063c8:	4a29      	ldr	r2, [pc, #164]	; (8006470 <HAL_ADC_ConfigChannel+0x868>)
 80063ca:	e000      	b.n	80063ce <HAL_ADC_ConfigChannel+0x7c6>
 80063cc:	4a23      	ldr	r2, [pc, #140]	; (800645c <HAL_ADC_ConfigChannel+0x854>)
 80063ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f7fe ff66 	bl	80052aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063de:	e031      	b.n	8006444 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a27      	ldr	r2, [pc, #156]	; (8006484 <HAL_ADC_ConfigChannel+0x87c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d12d      	bne.n	8006446 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80063ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d127      	bne.n	8006446 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a1c      	ldr	r2, [pc, #112]	; (800646c <HAL_ADC_ConfigChannel+0x864>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d022      	beq.n	8006446 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006408:	d004      	beq.n	8006414 <HAL_ADC_ConfigChannel+0x80c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a17      	ldr	r2, [pc, #92]	; (800646c <HAL_ADC_ConfigChannel+0x864>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d101      	bne.n	8006418 <HAL_ADC_ConfigChannel+0x810>
 8006414:	4a16      	ldr	r2, [pc, #88]	; (8006470 <HAL_ADC_ConfigChannel+0x868>)
 8006416:	e000      	b.n	800641a <HAL_ADC_ConfigChannel+0x812>
 8006418:	4a10      	ldr	r2, [pc, #64]	; (800645c <HAL_ADC_ConfigChannel+0x854>)
 800641a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800641e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f7fe ff40 	bl	80052aa <LL_ADC_SetCommonPathInternalCh>
 800642a:	e00c      	b.n	8006446 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006430:	f043 0220 	orr.w	r2, r3, #32
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800643e:	e002      	b.n	8006446 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006440:	bf00      	nop
 8006442:	e000      	b.n	8006446 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006444:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800644e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006452:	4618      	mov	r0, r3
 8006454:	37d8      	adds	r7, #216	; 0xd8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	50000700 	.word	0x50000700
 8006460:	c3210000 	.word	0xc3210000
 8006464:	90c00010 	.word	0x90c00010
 8006468:	50000600 	.word	0x50000600
 800646c:	50000100 	.word	0x50000100
 8006470:	50000300 	.word	0x50000300
 8006474:	20000000 	.word	0x20000000
 8006478:	053e2d63 	.word	0x053e2d63
 800647c:	c7520000 	.word	0xc7520000
 8006480:	50000500 	.word	0x50000500
 8006484:	cb840000 	.word	0xcb840000

08006488 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006490:	2300      	movs	r3, #0
 8006492:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff f8c3 	bl	8005624 <LL_ADC_IsEnabled>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d176      	bne.n	8006592 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	4b3c      	ldr	r3, [pc, #240]	; (800659c <ADC_Enable+0x114>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00d      	beq.n	80064ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b6:	f043 0210 	orr.w	r2, r3, #16
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c2:	f043 0201 	orr.w	r2, r3, #1
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e062      	b.n	8006594 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff f892 	bl	80055fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064e0:	d004      	beq.n	80064ec <ADC_Enable+0x64>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a2e      	ldr	r2, [pc, #184]	; (80065a0 <ADC_Enable+0x118>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d101      	bne.n	80064f0 <ADC_Enable+0x68>
 80064ec:	4b2d      	ldr	r3, [pc, #180]	; (80065a4 <ADC_Enable+0x11c>)
 80064ee:	e000      	b.n	80064f2 <ADC_Enable+0x6a>
 80064f0:	4b2d      	ldr	r3, [pc, #180]	; (80065a8 <ADC_Enable+0x120>)
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe feec 	bl	80052d0 <LL_ADC_GetCommonPathInternalCh>
 80064f8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80064fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d013      	beq.n	800652a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006502:	4b2a      	ldr	r3, [pc, #168]	; (80065ac <ADC_Enable+0x124>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	099b      	lsrs	r3, r3, #6
 8006508:	4a29      	ldr	r2, [pc, #164]	; (80065b0 <ADC_Enable+0x128>)
 800650a:	fba2 2303 	umull	r2, r3, r2, r3
 800650e:	099b      	lsrs	r3, r3, #6
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	4613      	mov	r3, r2
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800651c:	e002      	b.n	8006524 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	3b01      	subs	r3, #1
 8006522:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1f9      	bne.n	800651e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800652a:	f7fe fe7d 	bl	8005228 <HAL_GetTick>
 800652e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006530:	e028      	b.n	8006584 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff f874 	bl	8005624 <LL_ADC_IsEnabled>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d104      	bne.n	800654c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff f858 	bl	80055fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800654c:	f7fe fe6c 	bl	8005228 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d914      	bls.n	8006584 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b01      	cmp	r3, #1
 8006566:	d00d      	beq.n	8006584 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656c:	f043 0210 	orr.w	r2, r3, #16
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006578:	f043 0201 	orr.w	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e007      	b.n	8006594 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b01      	cmp	r3, #1
 8006590:	d1cf      	bne.n	8006532 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	8000003f 	.word	0x8000003f
 80065a0:	50000100 	.word	0x50000100
 80065a4:	50000300 	.word	0x50000300
 80065a8:	50000700 	.word	0x50000700
 80065ac:	20000000 	.word	0x20000000
 80065b0:	053e2d63 	.word	0x053e2d63

080065b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d14b      	bne.n	8006666 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0308 	and.w	r3, r3, #8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d021      	beq.n	800662c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fe ff1b 	bl	8005428 <LL_ADC_REG_IsTriggerSourceSWStart>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d032      	beq.n	800665e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d12b      	bne.n	800665e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800660a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d11f      	bne.n	800665e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006622:	f043 0201 	orr.w	r2, r3, #1
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	65da      	str	r2, [r3, #92]	; 0x5c
 800662a:	e018      	b.n	800665e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d111      	bne.n	800665e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800663e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d105      	bne.n	800665e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006656:	f043 0201 	orr.w	r2, r3, #1
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f7fe fd34 	bl	80050cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006664:	e00e      	b.n	8006684 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666a:	f003 0310 	and.w	r3, r3, #16
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7ff fabe 	bl	8005bf4 <HAL_ADC_ErrorCallback>
}
 8006678:	e004      	b.n	8006684 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
}
 8006684:	bf00      	nop
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006698:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f7ff faa0 	bl	8005be0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066a0:	bf00      	nop
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c6:	f043 0204 	orr.w	r2, r3, #4
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f7ff fa90 	bl	8005bf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <LL_ADC_IsEnabled>:
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <LL_ADC_IsEnabled+0x18>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e000      	b.n	80066f6 <LL_ADC_IsEnabled+0x1a>
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <LL_ADC_REG_IsConversionOngoing>:
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 0304 	and.w	r3, r3, #4
 8006712:	2b04      	cmp	r3, #4
 8006714:	d101      	bne.n	800671a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006728:	b590      	push	{r4, r7, lr}
 800672a:	b0a1      	sub	sp, #132	; 0x84
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006742:	2302      	movs	r3, #2
 8006744:	e0e7      	b.n	8006916 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800674e:	2300      	movs	r3, #0
 8006750:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006752:	2300      	movs	r3, #0
 8006754:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800675e:	d102      	bne.n	8006766 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006760:	4b6f      	ldr	r3, [pc, #444]	; (8006920 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006762:	60bb      	str	r3, [r7, #8]
 8006764:	e009      	b.n	800677a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a6e      	ldr	r2, [pc, #440]	; (8006924 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d102      	bne.n	8006776 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006770:	4b6d      	ldr	r3, [pc, #436]	; (8006928 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006772:	60bb      	str	r3, [r7, #8]
 8006774:	e001      	b.n	800677a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006776:	2300      	movs	r3, #0
 8006778:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10b      	bne.n	8006798 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006784:	f043 0220 	orr.w	r2, r3, #32
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e0be      	b.n	8006916 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff ffb1 	bl	8006702 <LL_ADC_REG_IsConversionOngoing>
 80067a0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff ffab 	bl	8006702 <LL_ADC_REG_IsConversionOngoing>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f040 80a0 	bne.w	80068f4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80067b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f040 809c 	bne.w	80068f4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067c4:	d004      	beq.n	80067d0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a55      	ldr	r2, [pc, #340]	; (8006920 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d101      	bne.n	80067d4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80067d0:	4b56      	ldr	r3, [pc, #344]	; (800692c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80067d2:	e000      	b.n	80067d6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80067d4:	4b56      	ldr	r3, [pc, #344]	; (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80067d6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d04b      	beq.n	8006878 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80067e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	6859      	ldr	r1, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067f2:	035b      	lsls	r3, r3, #13
 80067f4:	430b      	orrs	r3, r1
 80067f6:	431a      	orrs	r2, r3
 80067f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006804:	d004      	beq.n	8006810 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a45      	ldr	r2, [pc, #276]	; (8006920 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d10f      	bne.n	8006830 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006810:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006814:	f7ff ff62 	bl	80066dc <LL_ADC_IsEnabled>
 8006818:	4604      	mov	r4, r0
 800681a:	4841      	ldr	r0, [pc, #260]	; (8006920 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800681c:	f7ff ff5e 	bl	80066dc <LL_ADC_IsEnabled>
 8006820:	4603      	mov	r3, r0
 8006822:	4323      	orrs	r3, r4
 8006824:	2b00      	cmp	r3, #0
 8006826:	bf0c      	ite	eq
 8006828:	2301      	moveq	r3, #1
 800682a:	2300      	movne	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	e012      	b.n	8006856 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006830:	483c      	ldr	r0, [pc, #240]	; (8006924 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006832:	f7ff ff53 	bl	80066dc <LL_ADC_IsEnabled>
 8006836:	4604      	mov	r4, r0
 8006838:	483b      	ldr	r0, [pc, #236]	; (8006928 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800683a:	f7ff ff4f 	bl	80066dc <LL_ADC_IsEnabled>
 800683e:	4603      	mov	r3, r0
 8006840:	431c      	orrs	r4, r3
 8006842:	483c      	ldr	r0, [pc, #240]	; (8006934 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006844:	f7ff ff4a 	bl	80066dc <LL_ADC_IsEnabled>
 8006848:	4603      	mov	r3, r0
 800684a:	4323      	orrs	r3, r4
 800684c:	2b00      	cmp	r3, #0
 800684e:	bf0c      	ite	eq
 8006850:	2301      	moveq	r3, #1
 8006852:	2300      	movne	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d056      	beq.n	8006908 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800685a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006862:	f023 030f 	bic.w	r3, r3, #15
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	6811      	ldr	r1, [r2, #0]
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	6892      	ldr	r2, [r2, #8]
 800686e:	430a      	orrs	r2, r1
 8006870:	431a      	orrs	r2, r3
 8006872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006874:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006876:	e047      	b.n	8006908 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006882:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800688c:	d004      	beq.n	8006898 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a23      	ldr	r2, [pc, #140]	; (8006920 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d10f      	bne.n	80068b8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006898:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800689c:	f7ff ff1e 	bl	80066dc <LL_ADC_IsEnabled>
 80068a0:	4604      	mov	r4, r0
 80068a2:	481f      	ldr	r0, [pc, #124]	; (8006920 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80068a4:	f7ff ff1a 	bl	80066dc <LL_ADC_IsEnabled>
 80068a8:	4603      	mov	r3, r0
 80068aa:	4323      	orrs	r3, r4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bf0c      	ite	eq
 80068b0:	2301      	moveq	r3, #1
 80068b2:	2300      	movne	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	e012      	b.n	80068de <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80068b8:	481a      	ldr	r0, [pc, #104]	; (8006924 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80068ba:	f7ff ff0f 	bl	80066dc <LL_ADC_IsEnabled>
 80068be:	4604      	mov	r4, r0
 80068c0:	4819      	ldr	r0, [pc, #100]	; (8006928 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80068c2:	f7ff ff0b 	bl	80066dc <LL_ADC_IsEnabled>
 80068c6:	4603      	mov	r3, r0
 80068c8:	431c      	orrs	r4, r3
 80068ca:	481a      	ldr	r0, [pc, #104]	; (8006934 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80068cc:	f7ff ff06 	bl	80066dc <LL_ADC_IsEnabled>
 80068d0:	4603      	mov	r3, r0
 80068d2:	4323      	orrs	r3, r4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	bf0c      	ite	eq
 80068d8:	2301      	moveq	r3, #1
 80068da:	2300      	movne	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d012      	beq.n	8006908 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80068e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80068ea:	f023 030f 	bic.w	r3, r3, #15
 80068ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80068f0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80068f2:	e009      	b.n	8006908 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f8:	f043 0220 	orr.w	r2, r3, #32
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006906:	e000      	b.n	800690a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006908:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006912:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006916:	4618      	mov	r0, r3
 8006918:	3784      	adds	r7, #132	; 0x84
 800691a:	46bd      	mov	sp, r7
 800691c:	bd90      	pop	{r4, r7, pc}
 800691e:	bf00      	nop
 8006920:	50000100 	.word	0x50000100
 8006924:	50000400 	.word	0x50000400
 8006928:	50000500 	.word	0x50000500
 800692c:	50000300 	.word	0x50000300
 8006930:	50000700 	.word	0x50000700
 8006934:	50000600 	.word	0x50000600

08006938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006948:	4b0c      	ldr	r3, [pc, #48]	; (800697c <__NVIC_SetPriorityGrouping+0x44>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006954:	4013      	ands	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800696a:	4a04      	ldr	r2, [pc, #16]	; (800697c <__NVIC_SetPriorityGrouping+0x44>)
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	60d3      	str	r3, [r2, #12]
}
 8006970:	bf00      	nop
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	e000ed00 	.word	0xe000ed00

08006980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006984:	4b04      	ldr	r3, [pc, #16]	; (8006998 <__NVIC_GetPriorityGrouping+0x18>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	f003 0307 	and.w	r3, r3, #7
}
 800698e:	4618      	mov	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	e000ed00 	.word	0xe000ed00

0800699c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	db0b      	blt.n	80069c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069ae:	79fb      	ldrb	r3, [r7, #7]
 80069b0:	f003 021f 	and.w	r2, r3, #31
 80069b4:	4907      	ldr	r1, [pc, #28]	; (80069d4 <__NVIC_EnableIRQ+0x38>)
 80069b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	2001      	movs	r0, #1
 80069be:	fa00 f202 	lsl.w	r2, r0, r2
 80069c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	e000e100 	.word	0xe000e100

080069d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	6039      	str	r1, [r7, #0]
 80069e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	db0a      	blt.n	8006a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	490c      	ldr	r1, [pc, #48]	; (8006a24 <__NVIC_SetPriority+0x4c>)
 80069f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f6:	0112      	lsls	r2, r2, #4
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	440b      	add	r3, r1
 80069fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a00:	e00a      	b.n	8006a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	4908      	ldr	r1, [pc, #32]	; (8006a28 <__NVIC_SetPriority+0x50>)
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	3b04      	subs	r3, #4
 8006a10:	0112      	lsls	r2, r2, #4
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	440b      	add	r3, r1
 8006a16:	761a      	strb	r2, [r3, #24]
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	e000e100 	.word	0xe000e100
 8006a28:	e000ed00 	.word	0xe000ed00

08006a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	; 0x24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f1c3 0307 	rsb	r3, r3, #7
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	bf28      	it	cs
 8006a4a:	2304      	movcs	r3, #4
 8006a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	3304      	adds	r3, #4
 8006a52:	2b06      	cmp	r3, #6
 8006a54:	d902      	bls.n	8006a5c <NVIC_EncodePriority+0x30>
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	3b03      	subs	r3, #3
 8006a5a:	e000      	b.n	8006a5e <NVIC_EncodePriority+0x32>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a60:	f04f 32ff 	mov.w	r2, #4294967295
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	43da      	mvns	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	401a      	ands	r2, r3
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a74:	f04f 31ff 	mov.w	r1, #4294967295
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7e:	43d9      	mvns	r1, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a84:	4313      	orrs	r3, r2
         );
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3724      	adds	r7, #36	; 0x24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
	...

08006a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006aa4:	d301      	bcc.n	8006aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e00f      	b.n	8006aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006aaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ad4 <SysTick_Config+0x40>)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ab2:	210f      	movs	r1, #15
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	f7ff ff8e 	bl	80069d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <SysTick_Config+0x40>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ac2:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <SysTick_Config+0x40>)
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	e000e010 	.word	0xe000e010

08006ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff ff29 	bl	8006938 <__NVIC_SetPriorityGrouping>
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b086      	sub	sp, #24
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	4603      	mov	r3, r0
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
 8006afa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006afc:	f7ff ff40 	bl	8006980 <__NVIC_GetPriorityGrouping>
 8006b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	6978      	ldr	r0, [r7, #20]
 8006b08:	f7ff ff90 	bl	8006a2c <NVIC_EncodePriority>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff ff5f 	bl	80069d8 <__NVIC_SetPriority>
}
 8006b1a:	bf00      	nop
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	4603      	mov	r3, r0
 8006b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff ff33 	bl	800699c <__NVIC_EnableIRQ>
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff ffa4 	bl	8006a94 <SysTick_Config>
 8006b4c:	4603      	mov	r3, r0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e08d      	b.n	8006c86 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	4b47      	ldr	r3, [pc, #284]	; (8006c90 <HAL_DMA_Init+0x138>)
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d80f      	bhi.n	8006b96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	4b45      	ldr	r3, [pc, #276]	; (8006c94 <HAL_DMA_Init+0x13c>)
 8006b7e:	4413      	add	r3, r2
 8006b80:	4a45      	ldr	r2, [pc, #276]	; (8006c98 <HAL_DMA_Init+0x140>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	091b      	lsrs	r3, r3, #4
 8006b88:	009a      	lsls	r2, r3, #2
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a42      	ldr	r2, [pc, #264]	; (8006c9c <HAL_DMA_Init+0x144>)
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40
 8006b94:	e00e      	b.n	8006bb4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	4b40      	ldr	r3, [pc, #256]	; (8006ca0 <HAL_DMA_Init+0x148>)
 8006b9e:	4413      	add	r3, r2
 8006ba0:	4a3d      	ldr	r2, [pc, #244]	; (8006c98 <HAL_DMA_Init+0x140>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	091b      	lsrs	r3, r3, #4
 8006ba8:	009a      	lsls	r2, r3, #2
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a3c      	ldr	r2, [pc, #240]	; (8006ca4 <HAL_DMA_Init+0x14c>)
 8006bb2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fa2c 	bl	8007064 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c14:	d102      	bne.n	8006c1c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006c30:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d010      	beq.n	8006c5c <HAL_DMA_Init+0x104>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d80c      	bhi.n	8006c5c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fa4c 	bl	80070e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006c58:	605a      	str	r2, [r3, #4]
 8006c5a:	e008      	b.n	8006c6e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	40020407 	.word	0x40020407
 8006c94:	bffdfff8 	.word	0xbffdfff8
 8006c98:	cccccccd 	.word	0xcccccccd
 8006c9c:	40020000 	.word	0x40020000
 8006ca0:	bffdfbf8 	.word	0xbffdfbf8
 8006ca4:	40020400 	.word	0x40020400

08006ca8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_DMA_Start_IT+0x20>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e066      	b.n	8006d96 <HAL_DMA_Start_IT+0xee>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d155      	bne.n	8006d88 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0201 	bic.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 f970 	bl	8006fe6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d008      	beq.n	8006d20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f042 020e 	orr.w	r2, r2, #14
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	e00f      	b.n	8006d40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0204 	bic.w	r2, r2, #4
 8006d2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 020a 	orr.w	r2, r2, #10
 8006d3e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d5c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d007      	beq.n	8006d76 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d74:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0201 	orr.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	e005      	b.n	8006d94 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006d90:	2302      	movs	r3, #2
 8006d92:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d00d      	beq.n	8006dd2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2204      	movs	r2, #4
 8006dba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	73fb      	strb	r3, [r7, #15]
 8006dd0:	e047      	b.n	8006e62 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 020e 	bic.w	r2, r2, #14
 8006de0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e06:	f003 021f 	and.w	r2, r3, #31
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	2101      	movs	r1, #1
 8006e10:	fa01 f202 	lsl.w	r2, r1, r2
 8006e14:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006e1e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00c      	beq.n	8006e42 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006e40:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
    }
  }
  return status;
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	2204      	movs	r2, #4
 8006e8e:	409a      	lsls	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4013      	ands	r3, r2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d026      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0x7a>
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d021      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0320 	and.w	r3, r3, #32
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d107      	bne.n	8006ec0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0204 	bic.w	r2, r2, #4
 8006ebe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec4:	f003 021f 	and.w	r2, r3, #31
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	2104      	movs	r1, #4
 8006ece:	fa01 f202 	lsl.w	r2, r1, r2
 8006ed2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d071      	beq.n	8006fc0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006ee4:	e06c      	b.n	8006fc0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eea:	f003 031f 	and.w	r3, r3, #31
 8006eee:	2202      	movs	r2, #2
 8006ef0:	409a      	lsls	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d02e      	beq.n	8006f58 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d029      	beq.n	8006f58 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10b      	bne.n	8006f2a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 020a 	bic.w	r2, r2, #10
 8006f20:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2e:	f003 021f 	and.w	r2, r3, #31
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	2102      	movs	r1, #2
 8006f38:	fa01 f202 	lsl.w	r2, r1, r2
 8006f3c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d038      	beq.n	8006fc0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006f56:	e033      	b.n	8006fc0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5c:	f003 031f 	and.w	r3, r3, #31
 8006f60:	2208      	movs	r2, #8
 8006f62:	409a      	lsls	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4013      	ands	r3, r2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d02a      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f003 0308 	and.w	r3, r3, #8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d025      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 020e 	bic.w	r2, r2, #14
 8006f84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8a:	f003 021f 	and.w	r2, r3, #31
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	2101      	movs	r1, #1
 8006f94:	fa01 f202 	lsl.w	r2, r1, r2
 8006f98:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d004      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
}
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006fd8:	b2db      	uxtb	r3, r3
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
 8006ff2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ffc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007002:	2b00      	cmp	r3, #0
 8007004:	d004      	beq.n	8007010 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800700e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007014:	f003 021f 	and.w	r2, r3, #31
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	2101      	movs	r1, #1
 800701e:	fa01 f202 	lsl.w	r2, r1, r2
 8007022:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	2b10      	cmp	r3, #16
 8007032:	d108      	bne.n	8007046 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007044:	e007      	b.n	8007056 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	60da      	str	r2, [r3, #12]
}
 8007056:	bf00      	nop
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
	...

08007064 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	4b16      	ldr	r3, [pc, #88]	; (80070cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007074:	429a      	cmp	r2, r3
 8007076:	d802      	bhi.n	800707e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007078:	4b15      	ldr	r3, [pc, #84]	; (80070d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e001      	b.n	8007082 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800707e:	4b15      	ldr	r3, [pc, #84]	; (80070d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007080:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	3b08      	subs	r3, #8
 800708e:	4a12      	ldr	r2, [pc, #72]	; (80070d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007090:	fba2 2303 	umull	r2, r3, r2, r3
 8007094:	091b      	lsrs	r3, r3, #4
 8007096:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709c:	089b      	lsrs	r3, r3, #2
 800709e:	009a      	lsls	r2, r3, #2
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	4413      	add	r3, r2
 80070a4:	461a      	mov	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a0b      	ldr	r2, [pc, #44]	; (80070dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80070ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f003 031f 	and.w	r3, r3, #31
 80070b6:	2201      	movs	r2, #1
 80070b8:	409a      	lsls	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40020407 	.word	0x40020407
 80070d0:	40020800 	.word	0x40020800
 80070d4:	40020820 	.word	0x40020820
 80070d8:	cccccccd 	.word	0xcccccccd
 80070dc:	40020880 	.word	0x40020880

080070e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	461a      	mov	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a08      	ldr	r2, [pc, #32]	; (8007124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007102:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3b01      	subs	r3, #1
 8007108:	f003 031f 	and.w	r3, r3, #31
 800710c:	2201      	movs	r2, #1
 800710e:	409a      	lsls	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007114:	bf00      	nop
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	1000823f 	.word	0x1000823f
 8007124:	40020940 	.word	0x40020940

08007128 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e147      	b.n	80073ca <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7fc ff9a 	bl	8004088 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	699a      	ldr	r2, [r3, #24]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0210 	bic.w	r2, r2, #16
 8007162:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007164:	f7fe f860 	bl	8005228 <HAL_GetTick>
 8007168:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800716a:	e012      	b.n	8007192 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800716c:	f7fe f85c 	bl	8005228 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b0a      	cmp	r3, #10
 8007178:	d90b      	bls.n	8007192 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800717e:	f043 0201 	orr.w	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2203      	movs	r2, #3
 800718a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e11b      	b.n	80073ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	f003 0308 	and.w	r3, r3, #8
 800719c:	2b08      	cmp	r3, #8
 800719e:	d0e5      	beq.n	800716c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699a      	ldr	r2, [r3, #24]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f042 0201 	orr.w	r2, r2, #1
 80071ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071b0:	f7fe f83a 	bl	8005228 <HAL_GetTick>
 80071b4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80071b6:	e012      	b.n	80071de <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80071b8:	f7fe f836 	bl	8005228 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b0a      	cmp	r3, #10
 80071c4:	d90b      	bls.n	80071de <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ca:	f043 0201 	orr.w	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2203      	movs	r2, #3
 80071d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e0f5      	b.n	80073ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0e5      	beq.n	80071b8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699a      	ldr	r2, [r3, #24]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f042 0202 	orr.w	r2, r2, #2
 80071fa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a74      	ldr	r2, [pc, #464]	; (80073d4 <HAL_FDCAN_Init+0x2ac>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d103      	bne.n	800720e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007206:	4a74      	ldr	r2, [pc, #464]	; (80073d8 <HAL_FDCAN_Init+0x2b0>)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	7c1b      	ldrb	r3, [r3, #16]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d108      	bne.n	8007228 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	699a      	ldr	r2, [r3, #24]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007224:	619a      	str	r2, [r3, #24]
 8007226:	e007      	b.n	8007238 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007236:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	7c5b      	ldrb	r3, [r3, #17]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d108      	bne.n	8007252 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699a      	ldr	r2, [r3, #24]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800724e:	619a      	str	r2, [r3, #24]
 8007250:	e007      	b.n	8007262 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699a      	ldr	r2, [r3, #24]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007260:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	7c9b      	ldrb	r3, [r3, #18]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d108      	bne.n	800727c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007278:	619a      	str	r2, [r3, #24]
 800727a:	e007      	b.n	800728c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699a      	ldr	r2, [r3, #24]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800728a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	689a      	ldr	r2, [r3, #8]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	699a      	ldr	r2, [r3, #24]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80072b0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0210 	bic.w	r2, r2, #16
 80072c0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d108      	bne.n	80072dc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	699a      	ldr	r2, [r3, #24]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f042 0204 	orr.w	r2, r2, #4
 80072d8:	619a      	str	r2, [r3, #24]
 80072da:	e02c      	b.n	8007336 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d028      	beq.n	8007336 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d01c      	beq.n	8007326 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699a      	ldr	r2, [r3, #24]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072fa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691a      	ldr	r2, [r3, #16]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0210 	orr.w	r2, r2, #16
 800730a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	2b03      	cmp	r3, #3
 8007312:	d110      	bne.n	8007336 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699a      	ldr	r2, [r3, #24]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0220 	orr.w	r2, r2, #32
 8007322:	619a      	str	r2, [r3, #24]
 8007324:	e007      	b.n	8007336 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	699a      	ldr	r2, [r3, #24]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f042 0220 	orr.w	r2, r2, #32
 8007334:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	3b01      	subs	r3, #1
 800733c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	3b01      	subs	r3, #1
 8007344:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007346:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800734e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	3b01      	subs	r3, #1
 8007358:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800735e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007360:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800736a:	d115      	bne.n	8007398 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007370:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007376:	3b01      	subs	r3, #1
 8007378:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800737a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007380:	3b01      	subs	r3, #1
 8007382:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007384:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	3b01      	subs	r3, #1
 800738e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007394:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007396:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fc4c 	bl	8007c4c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	40006400 	.word	0x40006400
 80073d8:	40006500 	.word	0x40006500

080073dc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073ec:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d002      	beq.n	80073fa <HAL_FDCAN_ConfigFilter+0x1e>
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d13d      	bne.n	8007476 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d119      	bne.n	8007436 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800740e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007416:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800741c:	4313      	orrs	r3, r2
 800741e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	e01d      	b.n	8007472 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	075a      	lsls	r2, r3, #29
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	079a      	lsls	r2, r3, #30
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	4413      	add	r3, r2
 800745e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	3304      	adds	r3, #4
 800746a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	e006      	b.n	8007484 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800747a:	f043 0202 	orr.w	r2, r3, #2
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
  }
}
 8007484:	4618      	mov	r0, r3
 8007486:	371c      	adds	r7, #28
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d110      	bne.n	80074c6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2202      	movs	r2, #2
 80074a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	699a      	ldr	r2, [r3, #24]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0201 	bic.w	r2, r2, #1
 80074ba:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e006      	b.n	80074d4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ca:	f043 0204 	orr.w	r2, r3, #4
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
  }
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d12c      	bne.n	8007552 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d007      	beq.n	8007518 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800750c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e023      	b.n	8007560 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007520:	0c1b      	lsrs	r3, r3, #16
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	68b9      	ldr	r1, [r7, #8]
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 fbf8 	bl	8007d24 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2101      	movs	r1, #1
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	fa01 f202 	lsl.w	r2, r1, r2
 8007540:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007544:	2201      	movs	r2, #1
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	409a      	lsls	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	e006      	b.n	8007560 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007556:	f043 0208 	orr.w	r2, r3, #8
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
  }
}
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007568:	b480      	push	{r7}
 800756a:	b08b      	sub	sp, #44	; 0x2c
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8007576:	2300      	movs	r3, #0
 8007578:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007580:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007582:	7efb      	ldrb	r3, [r7, #27]
 8007584:	2b02      	cmp	r3, #2
 8007586:	f040 80e8 	bne.w	800775a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2b40      	cmp	r3, #64	; 0x40
 800758e:	d137      	bne.n	8007600 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	2b00      	cmp	r3, #0
 800759e:	d107      	bne.n	80075b0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e0db      	b.n	8007768 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b8:	0e1b      	lsrs	r3, r3, #24
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d10a      	bne.n	80075d8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ca:	0a5b      	lsrs	r3, r3, #9
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80075d4:	2301      	movs	r3, #1
 80075d6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e0:	0a1b      	lsrs	r3, r3, #8
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	69fa      	ldr	r2, [r7, #28]
 80075e8:	4413      	add	r3, r2
 80075ea:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80075f0:	69fa      	ldr	r2, [r7, #28]
 80075f2:	4613      	mov	r3, r2
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	4413      	add	r3, r2
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	440b      	add	r3, r1
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
 80075fe:	e036      	b.n	800766e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007608:	f003 030f 	and.w	r3, r3, #15
 800760c:	2b00      	cmp	r3, #0
 800760e:	d107      	bne.n	8007620 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007614:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e0a3      	b.n	8007768 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007628:	0e1b      	lsrs	r3, r3, #24
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b01      	cmp	r3, #1
 8007630:	d10a      	bne.n	8007648 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800763a:	0a1b      	lsrs	r3, r3, #8
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007644:	2301      	movs	r3, #1
 8007646:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007650:	0a1b      	lsrs	r3, r3, #8
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	69fa      	ldr	r2, [r7, #28]
 8007658:	4413      	add	r3, r2
 800765a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	4613      	mov	r3, r2
 8007664:	00db      	lsls	r3, r3, #3
 8007666:	4413      	add	r3, r2
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	440b      	add	r3, r1
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d107      	bne.n	8007692 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	0c9b      	lsrs	r3, r3, #18
 8007688:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	e005      	b.n	800769e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	3304      	adds	r3, #4
 80076ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	0c1b      	lsrs	r3, r3, #16
 80076cc:	f003 020f 	and.w	r2, r3, #15
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	0e1b      	lsrs	r3, r3, #24
 80076f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	0fda      	lsrs	r2, r3, #31
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	3304      	adds	r3, #4
 8007708:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800770e:	2300      	movs	r3, #0
 8007710:	623b      	str	r3, [r7, #32]
 8007712:	e00a      	b.n	800772a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	441a      	add	r2, r3
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	440b      	add	r3, r1
 8007720:	7812      	ldrb	r2, [r2, #0]
 8007722:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	3301      	adds	r3, #1
 8007728:	623b      	str	r3, [r7, #32]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	4a11      	ldr	r2, [pc, #68]	; (8007774 <HAL_FDCAN_GetRxMessage+0x20c>)
 8007730:	5cd3      	ldrb	r3, [r2, r3]
 8007732:	461a      	mov	r2, r3
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	4293      	cmp	r3, r2
 8007738:	d3ec      	bcc.n	8007714 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b40      	cmp	r3, #64	; 0x40
 800773e:	d105      	bne.n	800774c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800774a:	e004      	b.n	8007756 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	e006      	b.n	8007768 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800775e:	f043 0208 	orr.w	r2, r3, #8
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
  }
}
 8007768:	4618      	mov	r0, r3
 800776a:	372c      	adds	r7, #44	; 0x2c
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	0800e934 	.word	0x0800e934

08007778 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800778a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800778c:	7dfb      	ldrb	r3, [r7, #23]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d003      	beq.n	800779a <HAL_FDCAN_ActivateNotification+0x22>
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	2b02      	cmp	r3, #2
 8007796:	f040 80c8 	bne.w	800792a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f003 0307 	and.w	r3, r3, #7
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d004      	beq.n	80077b6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d03b      	beq.n	800782e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d004      	beq.n	80077ca <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d031      	beq.n	800782e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d004      	beq.n	80077de <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f003 0304 	and.w	r3, r3, #4
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d027      	beq.n	800782e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d004      	beq.n	80077f2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d01d      	beq.n	800782e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f003 0310 	and.w	r3, r3, #16
 8007802:	2b00      	cmp	r3, #0
 8007804:	d013      	beq.n	800782e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800780c:	2b00      	cmp	r3, #0
 800780e:	d004      	beq.n	800781a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d009      	beq.n	800782e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00c      	beq.n	800783e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	d107      	bne.n	800783e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f042 0201 	orr.w	r2, r2, #1
 800783c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f003 0307 	and.w	r3, r3, #7
 8007844:	2b00      	cmp	r3, #0
 8007846:	d004      	beq.n	8007852 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d13b      	bne.n	80078ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007858:	2b00      	cmp	r3, #0
 800785a:	d004      	beq.n	8007866 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d131      	bne.n	80078ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800786c:	2b00      	cmp	r3, #0
 800786e:	d004      	beq.n	800787a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f003 0304 	and.w	r3, r3, #4
 8007876:	2b00      	cmp	r3, #0
 8007878:	d127      	bne.n	80078ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007880:	2b00      	cmp	r3, #0
 8007882:	d004      	beq.n	800788e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f003 0308 	and.w	r3, r3, #8
 800788a:	2b00      	cmp	r3, #0
 800788c:	d11d      	bne.n	80078ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007894:	2b00      	cmp	r3, #0
 8007896:	d004      	beq.n	80078a2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f003 0310 	and.w	r3, r3, #16
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d113      	bne.n	80078ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d004      	beq.n	80078b6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f003 0320 	and.w	r3, r3, #32
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00c      	beq.n	80078da <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d007      	beq.n	80078da <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 0202 	orr.w	r2, r2, #2
 80078d8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d009      	beq.n	80078f8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d009      	beq.n	8007916 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	430a      	orrs	r2, r1
 8007912:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	430a      	orrs	r2, r1
 8007924:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	e006      	b.n	8007938 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800792e:	f043 0202 	orr.w	r2, r3, #2
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
  }
}
 8007938:	4618      	mov	r0, r3
 800793a:	371c      	adds	r7, #28
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08c      	sub	sp, #48	; 0x30
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007952:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007956:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007960:	4013      	ands	r3, r2
 8007962:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007978:	4013      	ands	r3, r2
 800797a:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007990:	4013      	ands	r3, r2
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800799a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800799e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a6:	6a3a      	ldr	r2, [r7, #32]
 80079a8:	4013      	ands	r3, r2
 80079aa:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80079b6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	4013      	ands	r3, r2
 80079c2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ca:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d006      	beq.n	80079f6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2240      	movs	r2, #64	; 0x40
 80079ee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f90b 	bl	8007c0c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d019      	beq.n	8007a34 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d014      	beq.n	8007a34 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007a12:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a2a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007a2c:	6939      	ldr	r1, [r7, #16]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f8cd 	bl	8007bce <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d007      	beq.n	8007a4a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a40:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f8a2 	bl	8007b8e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d007      	beq.n	8007a60 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a56:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7fa fbb0 	bl	80021c0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d007      	beq.n	8007a76 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a6c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7fa fc1f 	bl	80022b4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00c      	beq.n	8007a9a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d007      	beq.n	8007a9a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a92:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f885 	bl	8007ba4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d018      	beq.n	8007ad6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d013      	beq.n	8007ad6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007ab6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2280      	movs	r2, #128	; 0x80
 8007acc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f871 	bl	8007bb8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00c      	beq.n	8007afa <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d007      	beq.n	8007afa <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007af2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f875 	bl	8007be4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00c      	beq.n	8007b1e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d007      	beq.n	8007b1e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007b16:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f86d 	bl	8007bf8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00f      	beq.n	8007b48 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00a      	beq.n	8007b48 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007b3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d007      	beq.n	8007b5e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007b56:	69f9      	ldr	r1, [r7, #28]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f86b 	bl	8007c34 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d009      	beq.n	8007b78 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6a3a      	ldr	r2, [r7, #32]
 8007b6a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f84d 	bl	8007c20 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007b86:	bf00      	nop
 8007b88:	3730      	adds	r7, #48	; 0x30
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
	...

08007c4c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007c54:	4b30      	ldr	r3, [pc, #192]	; (8007d18 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8007c56:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a2f      	ldr	r2, [pc, #188]	; (8007d1c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d103      	bne.n	8007c6a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007c68:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a2c      	ldr	r2, [pc, #176]	; (8007d20 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d103      	bne.n	8007c7c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8007c7a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c8a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c92:	041a      	lsls	r2, r3, #16
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cb0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb8:	061a      	lsls	r2, r3, #24
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	e005      	b.n	8007cfe <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d3f3      	bcc.n	8007cf2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8007d0a:	bf00      	nop
 8007d0c:	bf00      	nop
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	4000a400 	.word	0x4000a400
 8007d1c:	40006800 	.word	0x40006800
 8007d20:	40006c00 	.word	0x40006c00

08007d24 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b089      	sub	sp, #36	; 0x24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
 8007d30:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10a      	bne.n	8007d50 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007d42:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	61fb      	str	r3, [r7, #28]
 8007d4e:	e00a      	b.n	8007d66 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007d58:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8007d5e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d64:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007d70:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007d76:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007d7c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007d84:	4313      	orrs	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	00db      	lsls	r3, r3, #3
 8007d92:	4413      	add	r3, r2
 8007d94:	00db      	lsls	r3, r3, #3
 8007d96:	440b      	add	r3, r1
 8007d98:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	69fa      	ldr	r2, [r7, #28]
 8007d9e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	3304      	adds	r3, #4
 8007da4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	3304      	adds	r3, #4
 8007db0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007db2:	2300      	movs	r3, #0
 8007db4:	617b      	str	r3, [r7, #20]
 8007db6:	e020      	b.n	8007dfa <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	3303      	adds	r3, #3
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	3302      	adds	r3, #2
 8007dc8:	6879      	ldr	r1, [r7, #4]
 8007dca:	440b      	add	r3, r1
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007dd0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	440b      	add	r3, r1
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007dde:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8007de0:	6879      	ldr	r1, [r7, #4]
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	440a      	add	r2, r1
 8007de6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007de8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	3304      	adds	r3, #4
 8007df2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	3304      	adds	r3, #4
 8007df8:	617b      	str	r3, [r7, #20]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	4a06      	ldr	r2, [pc, #24]	; (8007e18 <FDCAN_CopyMessageToRAM+0xf4>)
 8007e00:	5cd3      	ldrb	r3, [r2, r3]
 8007e02:	461a      	mov	r2, r3
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d3d6      	bcc.n	8007db8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	bf00      	nop
 8007e0e:	3724      	adds	r7, #36	; 0x24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	0800e934 	.word	0x0800e934

08007e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007e2a:	e15a      	b.n	80080e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	2101      	movs	r1, #1
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	fa01 f303 	lsl.w	r3, r1, r3
 8007e38:	4013      	ands	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 814c 	beq.w	80080dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f003 0303 	and.w	r3, r3, #3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d005      	beq.n	8007e5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d130      	bne.n	8007ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	2203      	movs	r2, #3
 8007e68:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6c:	43db      	mvns	r3, r3
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	4013      	ands	r3, r2
 8007e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	68da      	ldr	r2, [r3, #12]
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	005b      	lsls	r3, r3, #1
 8007e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e92:	2201      	movs	r2, #1
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9a:	43db      	mvns	r3, r3
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	091b      	lsrs	r3, r3, #4
 8007ea8:	f003 0201 	and.w	r2, r3, #1
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d017      	beq.n	8007efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	2203      	movs	r2, #3
 8007ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eda:	43db      	mvns	r3, r3
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	689a      	ldr	r2, [r3, #8]
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	005b      	lsls	r3, r3, #1
 8007eea:	fa02 f303 	lsl.w	r3, r2, r3
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f003 0303 	and.w	r3, r3, #3
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d123      	bne.n	8007f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	08da      	lsrs	r2, r3, #3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3208      	adds	r2, #8
 8007f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	220f      	movs	r2, #15
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	43db      	mvns	r3, r3
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	4013      	ands	r3, r2
 8007f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	691a      	ldr	r2, [r3, #16]
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	08da      	lsrs	r2, r3, #3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3208      	adds	r2, #8
 8007f48:	6939      	ldr	r1, [r7, #16]
 8007f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	2203      	movs	r2, #3
 8007f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5e:	43db      	mvns	r3, r3
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	4013      	ands	r3, r2
 8007f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f003 0203 	and.w	r2, r3, #3
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	005b      	lsls	r3, r3, #1
 8007f72:	fa02 f303 	lsl.w	r3, r2, r3
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 80a6 	beq.w	80080dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f90:	4b5b      	ldr	r3, [pc, #364]	; (8008100 <HAL_GPIO_Init+0x2e4>)
 8007f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f94:	4a5a      	ldr	r2, [pc, #360]	; (8008100 <HAL_GPIO_Init+0x2e4>)
 8007f96:	f043 0301 	orr.w	r3, r3, #1
 8007f9a:	6613      	str	r3, [r2, #96]	; 0x60
 8007f9c:	4b58      	ldr	r3, [pc, #352]	; (8008100 <HAL_GPIO_Init+0x2e4>)
 8007f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	60bb      	str	r3, [r7, #8]
 8007fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007fa8:	4a56      	ldr	r2, [pc, #344]	; (8008104 <HAL_GPIO_Init+0x2e8>)
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	089b      	lsrs	r3, r3, #2
 8007fae:	3302      	adds	r3, #2
 8007fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f003 0303 	and.w	r3, r3, #3
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	220f      	movs	r2, #15
 8007fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc4:	43db      	mvns	r3, r3
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007fd2:	d01f      	beq.n	8008014 <HAL_GPIO_Init+0x1f8>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a4c      	ldr	r2, [pc, #304]	; (8008108 <HAL_GPIO_Init+0x2ec>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d019      	beq.n	8008010 <HAL_GPIO_Init+0x1f4>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a4b      	ldr	r2, [pc, #300]	; (800810c <HAL_GPIO_Init+0x2f0>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d013      	beq.n	800800c <HAL_GPIO_Init+0x1f0>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a4a      	ldr	r2, [pc, #296]	; (8008110 <HAL_GPIO_Init+0x2f4>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00d      	beq.n	8008008 <HAL_GPIO_Init+0x1ec>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a49      	ldr	r2, [pc, #292]	; (8008114 <HAL_GPIO_Init+0x2f8>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d007      	beq.n	8008004 <HAL_GPIO_Init+0x1e8>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a48      	ldr	r2, [pc, #288]	; (8008118 <HAL_GPIO_Init+0x2fc>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d101      	bne.n	8008000 <HAL_GPIO_Init+0x1e4>
 8007ffc:	2305      	movs	r3, #5
 8007ffe:	e00a      	b.n	8008016 <HAL_GPIO_Init+0x1fa>
 8008000:	2306      	movs	r3, #6
 8008002:	e008      	b.n	8008016 <HAL_GPIO_Init+0x1fa>
 8008004:	2304      	movs	r3, #4
 8008006:	e006      	b.n	8008016 <HAL_GPIO_Init+0x1fa>
 8008008:	2303      	movs	r3, #3
 800800a:	e004      	b.n	8008016 <HAL_GPIO_Init+0x1fa>
 800800c:	2302      	movs	r3, #2
 800800e:	e002      	b.n	8008016 <HAL_GPIO_Init+0x1fa>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <HAL_GPIO_Init+0x1fa>
 8008014:	2300      	movs	r3, #0
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	f002 0203 	and.w	r2, r2, #3
 800801c:	0092      	lsls	r2, r2, #2
 800801e:	4093      	lsls	r3, r2
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008026:	4937      	ldr	r1, [pc, #220]	; (8008104 <HAL_GPIO_Init+0x2e8>)
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	089b      	lsrs	r3, r3, #2
 800802c:	3302      	adds	r3, #2
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008034:	4b39      	ldr	r3, [pc, #228]	; (800811c <HAL_GPIO_Init+0x300>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	43db      	mvns	r3, r3
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	4013      	ands	r3, r2
 8008042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008058:	4a30      	ldr	r2, [pc, #192]	; (800811c <HAL_GPIO_Init+0x300>)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800805e:	4b2f      	ldr	r3, [pc, #188]	; (800811c <HAL_GPIO_Init+0x300>)
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	43db      	mvns	r3, r3
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4013      	ands	r3, r2
 800806c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4313      	orrs	r3, r2
 8008080:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008082:	4a26      	ldr	r2, [pc, #152]	; (800811c <HAL_GPIO_Init+0x300>)
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008088:	4b24      	ldr	r3, [pc, #144]	; (800811c <HAL_GPIO_Init+0x300>)
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	43db      	mvns	r3, r3
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	4013      	ands	r3, r2
 8008096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80080ac:	4a1b      	ldr	r2, [pc, #108]	; (800811c <HAL_GPIO_Init+0x300>)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80080b2:	4b1a      	ldr	r3, [pc, #104]	; (800811c <HAL_GPIO_Init+0x300>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	43db      	mvns	r3, r3
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	4013      	ands	r3, r2
 80080c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80080d6:	4a11      	ldr	r2, [pc, #68]	; (800811c <HAL_GPIO_Init+0x300>)
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	3301      	adds	r3, #1
 80080e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	fa22 f303 	lsr.w	r3, r2, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f47f ae9d 	bne.w	8007e2c <HAL_GPIO_Init+0x10>
  }
}
 80080f2:	bf00      	nop
 80080f4:	bf00      	nop
 80080f6:	371c      	adds	r7, #28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	40021000 	.word	0x40021000
 8008104:	40010000 	.word	0x40010000
 8008108:	48000400 	.word	0x48000400
 800810c:	48000800 	.word	0x48000800
 8008110:	48000c00 	.word	0x48000c00
 8008114:	48001000 	.word	0x48001000
 8008118:	48001400 	.word	0x48001400
 800811c:	40010400 	.word	0x40010400

08008120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	807b      	strh	r3, [r7, #2]
 800812c:	4613      	mov	r3, r2
 800812e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008130:	787b      	ldrb	r3, [r7, #1]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008136:	887a      	ldrh	r2, [r7, #2]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800813c:	e002      	b.n	8008144 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800813e:	887a      	ldrh	r2, [r7, #2]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e08d      	b.n	800827e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d106      	bne.n	800817c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7fc f89e 	bl	80042b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2224      	movs	r2, #36	; 0x24
 8008180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 0201 	bic.w	r2, r2, #1
 8008192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80081a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d107      	bne.n	80081ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	689a      	ldr	r2, [r3, #8]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081c6:	609a      	str	r2, [r3, #8]
 80081c8:	e006      	b.n	80081d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689a      	ldr	r2, [r3, #8]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80081d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d108      	bne.n	80081f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081ee:	605a      	str	r2, [r3, #4]
 80081f0:	e007      	b.n	8008202 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008200:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	6812      	ldr	r2, [r2, #0]
 800820c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008214:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68da      	ldr	r2, [r3, #12]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008224:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691a      	ldr	r2, [r3, #16]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	69d9      	ldr	r1, [r3, #28]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a1a      	ldr	r2, [r3, #32]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0201 	orr.w	r2, r2, #1
 800825e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2220      	movs	r2, #32
 800826a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af02      	add	r7, sp, #8
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	607a      	str	r2, [r7, #4]
 8008292:	461a      	mov	r2, r3
 8008294:	460b      	mov	r3, r1
 8008296:	817b      	strh	r3, [r7, #10]
 8008298:	4613      	mov	r3, r2
 800829a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	f040 80fd 	bne.w	80084a4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d101      	bne.n	80082b8 <HAL_I2C_Master_Transmit+0x30>
 80082b4:	2302      	movs	r3, #2
 80082b6:	e0f6      	b.n	80084a6 <HAL_I2C_Master_Transmit+0x21e>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80082c0:	f7fc ffb2 	bl	8005228 <HAL_GetTick>
 80082c4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	2319      	movs	r3, #25
 80082cc:	2201      	movs	r2, #1
 80082ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f002 f868 	bl	800a3a8 <I2C_WaitOnFlagUntilTimeout>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e0e1      	b.n	80084a6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2221      	movs	r2, #33	; 0x21
 80082e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2210      	movs	r2, #16
 80082ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	893a      	ldrh	r2, [r7, #8]
 8008302:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800830e:	b29b      	uxth	r3, r3
 8008310:	2bff      	cmp	r3, #255	; 0xff
 8008312:	d906      	bls.n	8008322 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	22ff      	movs	r2, #255	; 0xff
 8008318:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800831a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	e007      	b.n	8008332 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008326:	b29a      	uxth	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800832c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008330:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008336:	2b00      	cmp	r3, #0
 8008338:	d024      	beq.n	8008384 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	781a      	ldrb	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	1c5a      	adds	r2, r3, #1
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008362:	3b01      	subs	r3, #1
 8008364:	b29a      	uxth	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800836e:	b2db      	uxtb	r3, r3
 8008370:	3301      	adds	r3, #1
 8008372:	b2da      	uxtb	r2, r3
 8008374:	8979      	ldrh	r1, [r7, #10]
 8008376:	4b4e      	ldr	r3, [pc, #312]	; (80084b0 <HAL_I2C_Master_Transmit+0x228>)
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f002 fa63 	bl	800a848 <I2C_TransferConfig>
 8008382:	e066      	b.n	8008452 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008388:	b2da      	uxtb	r2, r3
 800838a:	8979      	ldrh	r1, [r7, #10]
 800838c:	4b48      	ldr	r3, [pc, #288]	; (80084b0 <HAL_I2C_Master_Transmit+0x228>)
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f002 fa58 	bl	800a848 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008398:	e05b      	b.n	8008452 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	6a39      	ldr	r1, [r7, #32]
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f002 f85b 	bl	800a45a <I2C_WaitOnTXISFlagUntilTimeout>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e07b      	b.n	80084a6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	781a      	ldrb	r2, [r3, #0]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	3b01      	subs	r3, #1
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d6:	3b01      	subs	r3, #1
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d034      	beq.n	8008452 <HAL_I2C_Master_Transmit+0x1ca>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d130      	bne.n	8008452 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	2200      	movs	r2, #0
 80083f8:	2180      	movs	r1, #128	; 0x80
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f001 ffd4 	bl	800a3a8 <I2C_WaitOnFlagUntilTimeout>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e04d      	b.n	80084a6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800840e:	b29b      	uxth	r3, r3
 8008410:	2bff      	cmp	r3, #255	; 0xff
 8008412:	d90e      	bls.n	8008432 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	22ff      	movs	r2, #255	; 0xff
 8008418:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800841e:	b2da      	uxtb	r2, r3
 8008420:	8979      	ldrh	r1, [r7, #10]
 8008422:	2300      	movs	r3, #0
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f002 fa0c 	bl	800a848 <I2C_TransferConfig>
 8008430:	e00f      	b.n	8008452 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008436:	b29a      	uxth	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008440:	b2da      	uxtb	r2, r3
 8008442:	8979      	ldrh	r1, [r7, #10]
 8008444:	2300      	movs	r3, #0
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f002 f9fb 	bl	800a848 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008456:	b29b      	uxth	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	d19e      	bne.n	800839a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	6a39      	ldr	r1, [r7, #32]
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f002 f841 	bl	800a4e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e01a      	b.n	80084a6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2220      	movs	r2, #32
 8008476:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6859      	ldr	r1, [r3, #4]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	4b0c      	ldr	r3, [pc, #48]	; (80084b4 <HAL_I2C_Master_Transmit+0x22c>)
 8008484:	400b      	ands	r3, r1
 8008486:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	e000      	b.n	80084a6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80084a4:	2302      	movs	r3, #2
  }
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3718      	adds	r7, #24
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	80002000 	.word	0x80002000
 80084b4:	fe00e800 	.word	0xfe00e800

080084b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af02      	add	r7, sp, #8
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	607a      	str	r2, [r7, #4]
 80084c2:	461a      	mov	r2, r3
 80084c4:	460b      	mov	r3, r1
 80084c6:	817b      	strh	r3, [r7, #10]
 80084c8:	4613      	mov	r3, r2
 80084ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b20      	cmp	r3, #32
 80084d6:	f040 80db 	bne.w	8008690 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d101      	bne.n	80084e8 <HAL_I2C_Master_Receive+0x30>
 80084e4:	2302      	movs	r3, #2
 80084e6:	e0d4      	b.n	8008692 <HAL_I2C_Master_Receive+0x1da>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80084f0:	f7fc fe9a 	bl	8005228 <HAL_GetTick>
 80084f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	2319      	movs	r3, #25
 80084fc:	2201      	movs	r2, #1
 80084fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f001 ff50 	bl	800a3a8 <I2C_WaitOnFlagUntilTimeout>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e0bf      	b.n	8008692 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2222      	movs	r2, #34	; 0x22
 8008516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2210      	movs	r2, #16
 800851e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	893a      	ldrh	r2, [r7, #8]
 8008532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800853e:	b29b      	uxth	r3, r3
 8008540:	2bff      	cmp	r3, #255	; 0xff
 8008542:	d90e      	bls.n	8008562 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	22ff      	movs	r2, #255	; 0xff
 8008548:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800854e:	b2da      	uxtb	r2, r3
 8008550:	8979      	ldrh	r1, [r7, #10]
 8008552:	4b52      	ldr	r3, [pc, #328]	; (800869c <HAL_I2C_Master_Receive+0x1e4>)
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f002 f974 	bl	800a848 <I2C_TransferConfig>
 8008560:	e06d      	b.n	800863e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008566:	b29a      	uxth	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008570:	b2da      	uxtb	r2, r3
 8008572:	8979      	ldrh	r1, [r7, #10]
 8008574:	4b49      	ldr	r3, [pc, #292]	; (800869c <HAL_I2C_Master_Receive+0x1e4>)
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f002 f963 	bl	800a848 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008582:	e05c      	b.n	800863e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	6a39      	ldr	r1, [r7, #32]
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f001 fff1 	bl	800a570 <I2C_WaitOnRXNEFlagUntilTimeout>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e07c      	b.n	8008692 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	b2d2      	uxtb	r2, r2
 80085a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b4:	3b01      	subs	r3, #1
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	3b01      	subs	r3, #1
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d034      	beq.n	800863e <HAL_I2C_Master_Receive+0x186>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d130      	bne.n	800863e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	2200      	movs	r2, #0
 80085e4:	2180      	movs	r1, #128	; 0x80
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f001 fede 	bl	800a3a8 <I2C_WaitOnFlagUntilTimeout>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e04d      	b.n	8008692 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2bff      	cmp	r3, #255	; 0xff
 80085fe:	d90e      	bls.n	800861e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	22ff      	movs	r2, #255	; 0xff
 8008604:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800860a:	b2da      	uxtb	r2, r3
 800860c:	8979      	ldrh	r1, [r7, #10]
 800860e:	2300      	movs	r3, #0
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f002 f916 	bl	800a848 <I2C_TransferConfig>
 800861c:	e00f      	b.n	800863e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008622:	b29a      	uxth	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800862c:	b2da      	uxtb	r2, r3
 800862e:	8979      	ldrh	r1, [r7, #10]
 8008630:	2300      	movs	r3, #0
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f002 f905 	bl	800a848 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008642:	b29b      	uxth	r3, r3
 8008644:	2b00      	cmp	r3, #0
 8008646:	d19d      	bne.n	8008584 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	6a39      	ldr	r1, [r7, #32]
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f001 ff4b 	bl	800a4e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e01a      	b.n	8008692 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2220      	movs	r2, #32
 8008662:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6859      	ldr	r1, [r3, #4]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	4b0c      	ldr	r3, [pc, #48]	; (80086a0 <HAL_I2C_Master_Receive+0x1e8>)
 8008670:	400b      	ands	r3, r1
 8008672:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2220      	movs	r2, #32
 8008678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	e000      	b.n	8008692 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008690:	2302      	movs	r3, #2
  }
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	80002400 	.word	0x80002400
 80086a0:	fe00e800 	.word	0xfe00e800

080086a4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08a      	sub	sp, #40	; 0x28
 80086a8:	af02      	add	r7, sp, #8
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	607a      	str	r2, [r7, #4]
 80086ae:	461a      	mov	r2, r3
 80086b0:	460b      	mov	r3, r1
 80086b2:	817b      	strh	r3, [r7, #10]
 80086b4:	4613      	mov	r3, r2
 80086b6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b20      	cmp	r3, #32
 80086c6:	f040 80ef 	bne.w	80088a8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086d8:	d101      	bne.n	80086de <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80086da:	2302      	movs	r3, #2
 80086dc:	e0e5      	b.n	80088aa <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_I2C_Master_Transmit_DMA+0x48>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e0de      	b.n	80088aa <HAL_I2C_Master_Transmit_DMA+0x206>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2221      	movs	r2, #33	; 0x21
 80086f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2210      	movs	r2, #16
 8008700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	893a      	ldrh	r2, [r7, #8]
 8008714:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4a66      	ldr	r2, [pc, #408]	; (80088b4 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800871a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4a66      	ldr	r2, [pc, #408]	; (80088b8 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8008720:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008726:	b29b      	uxth	r3, r3
 8008728:	2bff      	cmp	r3, #255	; 0xff
 800872a:	d906      	bls.n	800873a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	22ff      	movs	r2, #255	; 0xff
 8008730:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008732:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008736:	61fb      	str	r3, [r7, #28]
 8008738:	e007      	b.n	800874a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008744:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008748:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800874e:	2b00      	cmp	r3, #0
 8008750:	d01a      	beq.n	8008788 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	781a      	ldrb	r2, [r3, #0]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008762:	1c5a      	adds	r2, r3, #1
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800876c:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008772:	b29b      	uxth	r3, r3
 8008774:	3b01      	subs	r3, #1
 8008776:	b29a      	uxth	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008780:	3b01      	subs	r3, #1
 8008782:	b29a      	uxth	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800878c:	2b00      	cmp	r3, #0
 800878e:	d074      	beq.n	800887a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008794:	2b00      	cmp	r3, #0
 8008796:	d022      	beq.n	80087de <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	4a47      	ldr	r2, [pc, #284]	; (80088bc <HAL_I2C_Master_Transmit_DMA+0x218>)
 800879e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a4:	4a46      	ldr	r2, [pc, #280]	; (80088c0 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80087a6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ac:	2200      	movs	r2, #0
 80087ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b4:	2200      	movs	r2, #0
 80087b6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80087c8:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80087ce:	f7fe fa6b 	bl	8006ca8 <HAL_DMA_Start_IT>
 80087d2:	4603      	mov	r3, r0
 80087d4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80087d6:	7dfb      	ldrb	r3, [r7, #23]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d13a      	bne.n	8008852 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80087dc:	e013      	b.n	8008806 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e051      	b.n	80088aa <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800880a:	b2db      	uxtb	r3, r3
 800880c:	3301      	adds	r3, #1
 800880e:	b2da      	uxtb	r2, r3
 8008810:	8979      	ldrh	r1, [r7, #10]
 8008812:	4b2c      	ldr	r3, [pc, #176]	; (80088c4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f002 f815 	bl	800a848 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008822:	b29a      	uxth	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	b29a      	uxth	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008838:	2110      	movs	r1, #16
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f002 f836 	bl	800a8ac <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	e028      	b.n	80088a4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2220      	movs	r2, #32
 8008856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008866:	f043 0210 	orr.w	r2, r3, #16
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e017      	b.n	80088aa <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4a12      	ldr	r2, [pc, #72]	; (80088c8 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800887e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	b2da      	uxtb	r2, r3
 8008884:	8979      	ldrh	r1, [r7, #10]
 8008886:	4b0f      	ldr	r3, [pc, #60]	; (80088c4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f001 ffda 	bl	800a848 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800889c:	2101      	movs	r1, #1
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f002 f804 	bl	800a8ac <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	e000      	b.n	80088aa <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80088a8:	2302      	movs	r3, #2
  }
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3720      	adds	r7, #32
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	ffff0000 	.word	0xffff0000
 80088b8:	080091e5 	.word	0x080091e5
 80088bc:	0800a213 	.word	0x0800a213
 80088c0:	0800a33f 	.word	0x0800a33f
 80088c4:	80002000 	.word	0x80002000
 80088c8:	08008da5 	.word	0x08008da5

080088cc <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af02      	add	r7, sp, #8
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	607a      	str	r2, [r7, #4]
 80088d6:	461a      	mov	r2, r3
 80088d8:	460b      	mov	r3, r1
 80088da:	817b      	strh	r3, [r7, #10]
 80088dc:	4613      	mov	r3, r2
 80088de:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b20      	cmp	r3, #32
 80088ea:	f040 80cd 	bne.w	8008a88 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088fc:	d101      	bne.n	8008902 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80088fe:	2302      	movs	r3, #2
 8008900:	e0c3      	b.n	8008a8a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008908:	2b01      	cmp	r3, #1
 800890a:	d101      	bne.n	8008910 <HAL_I2C_Master_Receive_DMA+0x44>
 800890c:	2302      	movs	r3, #2
 800890e:	e0bc      	b.n	8008a8a <HAL_I2C_Master_Receive_DMA+0x1be>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2222      	movs	r2, #34	; 0x22
 800891c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2210      	movs	r2, #16
 8008924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	893a      	ldrh	r2, [r7, #8]
 8008938:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	4a55      	ldr	r2, [pc, #340]	; (8008a94 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800893e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4a55      	ldr	r2, [pc, #340]	; (8008a98 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8008944:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800894a:	b29b      	uxth	r3, r3
 800894c:	2bff      	cmp	r3, #255	; 0xff
 800894e:	d906      	bls.n	800895e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	22ff      	movs	r2, #255	; 0xff
 8008954:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008956:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	e007      	b.n	800896e <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008962:	b29a      	uxth	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008968:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800896c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008972:	2b00      	cmp	r3, #0
 8008974:	d070      	beq.n	8008a58 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897a:	2b00      	cmp	r3, #0
 800897c:	d020      	beq.n	80089c0 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008982:	4a46      	ldr	r2, [pc, #280]	; (8008a9c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8008984:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898a:	4a45      	ldr	r2, [pc, #276]	; (8008aa0 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800898c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008992:	2200      	movs	r2, #0
 8008994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899a:	2200      	movs	r2, #0
 800899c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3324      	adds	r3, #36	; 0x24
 80089a8:	4619      	mov	r1, r3
 80089aa:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80089b0:	f7fe f97a 	bl	8006ca8 <HAL_DMA_Start_IT>
 80089b4:	4603      	mov	r3, r0
 80089b6:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80089b8:	7cfb      	ldrb	r3, [r7, #19]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d138      	bne.n	8008a30 <HAL_I2C_Master_Receive_DMA+0x164>
 80089be:	e013      	b.n	80089e8 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2220      	movs	r2, #32
 80089c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e050      	b.n	8008a8a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	8979      	ldrh	r1, [r7, #10]
 80089f0:	4b2c      	ldr	r3, [pc, #176]	; (8008aa4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f001 ff26 	bl	800a848 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008a16:	2110      	movs	r1, #16
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f001 ff47 	bl	800a8ac <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	e029      	b.n	8008a84 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a44:	f043 0210 	orr.w	r2, r3, #16
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e018      	b.n	8008a8a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	4a13      	ldr	r2, [pc, #76]	; (8008aa8 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8008a5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	8979      	ldrh	r1, [r7, #10]
 8008a66:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f001 feea 	bl	800a848 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008a7c:	2102      	movs	r1, #2
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f001 ff14 	bl	800a8ac <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	e000      	b.n	8008a8a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8008a88:	2302      	movs	r3, #2
  }
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	ffff0000 	.word	0xffff0000
 8008a98:	080091e5 	.word	0x080091e5
 8008a9c:	0800a2a9 	.word	0x0800a2a9
 8008aa0:	0800a33f 	.word	0x0800a33f
 8008aa4:	80002400 	.word	0x80002400
 8008aa8:	08008da5 	.word	0x08008da5

08008aac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b088      	sub	sp, #32
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	4608      	mov	r0, r1
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4603      	mov	r3, r0
 8008abc:	817b      	strh	r3, [r7, #10]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	813b      	strh	r3, [r7, #8]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b20      	cmp	r3, #32
 8008ad0:	f040 80f9 	bne.w	8008cc6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <HAL_I2C_Mem_Write+0x34>
 8008ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d105      	bne.n	8008aec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ae6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e0ed      	b.n	8008cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d101      	bne.n	8008afa <HAL_I2C_Mem_Write+0x4e>
 8008af6:	2302      	movs	r3, #2
 8008af8:	e0e6      	b.n	8008cc8 <HAL_I2C_Mem_Write+0x21c>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b02:	f7fc fb91 	bl	8005228 <HAL_GetTick>
 8008b06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	2319      	movs	r3, #25
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f001 fc47 	bl	800a3a8 <I2C_WaitOnFlagUntilTimeout>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e0d1      	b.n	8008cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2221      	movs	r2, #33	; 0x21
 8008b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2240      	movs	r2, #64	; 0x40
 8008b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6a3a      	ldr	r2, [r7, #32]
 8008b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b4c:	88f8      	ldrh	r0, [r7, #6]
 8008b4e:	893a      	ldrh	r2, [r7, #8]
 8008b50:	8979      	ldrh	r1, [r7, #10]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 fe2b 	bl	80097b8 <I2C_RequestMemoryWrite>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d005      	beq.n	8008b74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e0a9      	b.n	8008cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	2bff      	cmp	r3, #255	; 0xff
 8008b7c:	d90e      	bls.n	8008b9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	22ff      	movs	r2, #255	; 0xff
 8008b82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	8979      	ldrh	r1, [r7, #10]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f001 fe57 	bl	800a848 <I2C_TransferConfig>
 8008b9a:	e00f      	b.n	8008bbc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	8979      	ldrh	r1, [r7, #10]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f001 fe46 	bl	800a848 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f001 fc4a 	bl	800a45a <I2C_WaitOnTXISFlagUntilTimeout>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e07b      	b.n	8008cc8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	781a      	ldrb	r2, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	3b01      	subs	r3, #1
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d034      	beq.n	8008c74 <HAL_I2C_Mem_Write+0x1c8>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d130      	bne.n	8008c74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c18:	2200      	movs	r2, #0
 8008c1a:	2180      	movs	r1, #128	; 0x80
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f001 fbc3 	bl	800a3a8 <I2C_WaitOnFlagUntilTimeout>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e04d      	b.n	8008cc8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	2bff      	cmp	r3, #255	; 0xff
 8008c34:	d90e      	bls.n	8008c54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	22ff      	movs	r2, #255	; 0xff
 8008c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	8979      	ldrh	r1, [r7, #10]
 8008c44:	2300      	movs	r3, #0
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f001 fdfb 	bl	800a848 <I2C_TransferConfig>
 8008c52:	e00f      	b.n	8008c74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	8979      	ldrh	r1, [r7, #10]
 8008c66:	2300      	movs	r3, #0
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f001 fdea 	bl	800a848 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d19e      	bne.n	8008bbc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f001 fc30 	bl	800a4e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e01a      	b.n	8008cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2220      	movs	r2, #32
 8008c98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	6859      	ldr	r1, [r3, #4]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	4b0a      	ldr	r3, [pc, #40]	; (8008cd0 <HAL_I2C_Mem_Write+0x224>)
 8008ca6:	400b      	ands	r3, r1
 8008ca8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e000      	b.n	8008cc8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008cc6:	2302      	movs	r3, #2
  }
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	fe00e800 	.word	0xfe00e800

08008cd4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
 8008d30:	4613      	mov	r3, r2
 8008d32:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b088      	sub	sp, #32
 8008da8:	af02      	add	r7, sp, #8
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d101      	bne.n	8008dc2 <I2C_Master_ISR_IT+0x1e>
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	e113      	b.n	8008fea <I2C_Master_ISR_IT+0x246>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f003 0310 	and.w	r3, r3, #16
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d012      	beq.n	8008dfa <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00d      	beq.n	8008dfa <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2210      	movs	r2, #16
 8008de4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dea:	f043 0204 	orr.w	r2, r3, #4
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f001 f9e9 	bl	800a1ca <I2C_Flush_TXDR>
 8008df8:	e0e4      	b.n	8008fc4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f003 0304 	and.w	r3, r3, #4
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d022      	beq.n	8008e4a <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d01d      	beq.n	8008e4a <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f023 0304 	bic.w	r3, r3, #4
 8008e14:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	b2d2      	uxtb	r2, r2
 8008e22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	1c5a      	adds	r2, r3, #1
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e32:	3b01      	subs	r3, #1
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	3b01      	subs	r3, #1
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e48:	e0bc      	b.n	8008fc4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d128      	bne.n	8008ea6 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d023      	beq.n	8008ea6 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01e      	beq.n	8008ea6 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 80a8 	beq.w	8008fc4 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	781a      	ldrb	r2, [r3, #0]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e84:	1c5a      	adds	r2, r3, #1
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8008ea4:	e08e      	b.n	8008fc4 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d05c      	beq.n	8008f6a <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d057      	beq.n	8008f6a <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d040      	beq.n	8008f46 <I2C_Master_ISR_IT+0x1a2>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d13c      	bne.n	8008f46 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ed8:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	2bff      	cmp	r3, #255	; 0xff
 8008ee2:	d90e      	bls.n	8008f02 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	22ff      	movs	r2, #255	; 0xff
 8008ee8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	8a79      	ldrh	r1, [r7, #18]
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f001 fca4 	bl	800a848 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f00:	e032      	b.n	8008f68 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f14:	d00b      	beq.n	8008f2e <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f1a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008f20:	8a79      	ldrh	r1, [r7, #18]
 8008f22:	2000      	movs	r0, #0
 8008f24:	9000      	str	r0, [sp, #0]
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f001 fc8e 	bl	800a848 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f2c:	e01c      	b.n	8008f68 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	8a79      	ldrh	r1, [r7, #18]
 8008f36:	2300      	movs	r3, #0
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f001 fc82 	bl	800a848 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f44:	e010      	b.n	8008f68 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f54:	d003      	beq.n	8008f5e <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f000 fd06 	bl	8009968 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f5c:	e032      	b.n	8008fc4 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008f5e:	2140      	movs	r1, #64	; 0x40
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f001 f81b 	bl	8009f9c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f66:	e02d      	b.n	8008fc4 <I2C_Master_ISR_IT+0x220>
 8008f68:	e02c      	b.n	8008fc4 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d027      	beq.n	8008fc4 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d022      	beq.n	8008fc4 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d119      	bne.n	8008fbc <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f96:	d015      	beq.n	8008fc4 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008fa0:	d108      	bne.n	8008fb4 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fb0:	605a      	str	r2, [r3, #4]
 8008fb2:	e007      	b.n	8008fc4 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 fcd7 	bl	8009968 <I2C_ITMasterSeqCplt>
 8008fba:	e003      	b.n	8008fc4 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008fbc:	2140      	movs	r1, #64	; 0x40
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 ffec 	bl	8009f9c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	f003 0320 	and.w	r3, r3, #32
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d008      	beq.n	8008fe0 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8008fd8:	6979      	ldr	r1, [r7, #20]
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f000 fd5e 	bl	8009a9c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b086      	sub	sp, #24
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	60f8      	str	r0, [r7, #12]
 8008ffa:	60b9      	str	r1, [r7, #8]
 8008ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009002:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800900e:	2b01      	cmp	r3, #1
 8009010:	d101      	bne.n	8009016 <I2C_Slave_ISR_IT+0x24>
 8009012:	2302      	movs	r3, #2
 8009014:	e0e2      	b.n	80091dc <I2C_Slave_ISR_IT+0x1ea>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	f003 0320 	and.w	r3, r3, #32
 8009024:	2b00      	cmp	r3, #0
 8009026:	d009      	beq.n	800903c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800902e:	2b00      	cmp	r3, #0
 8009030:	d004      	beq.n	800903c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009032:	6939      	ldr	r1, [r7, #16]
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 fdf9 	bl	8009c2c <I2C_ITSlaveCplt>
 800903a:	e0ca      	b.n	80091d2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	f003 0310 	and.w	r3, r3, #16
 8009042:	2b00      	cmp	r3, #0
 8009044:	d04b      	beq.n	80090de <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800904c:	2b00      	cmp	r3, #0
 800904e:	d046      	beq.n	80090de <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009054:	b29b      	uxth	r3, r3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d128      	bne.n	80090ac <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b28      	cmp	r3, #40	; 0x28
 8009064:	d108      	bne.n	8009078 <I2C_Slave_ISR_IT+0x86>
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800906c:	d104      	bne.n	8009078 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800906e:	6939      	ldr	r1, [r7, #16]
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 ff3f 	bl	8009ef4 <I2C_ITListenCplt>
 8009076:	e031      	b.n	80090dc <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b29      	cmp	r3, #41	; 0x29
 8009082:	d10e      	bne.n	80090a2 <I2C_Slave_ISR_IT+0xb0>
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800908a:	d00a      	beq.n	80090a2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2210      	movs	r2, #16
 8009092:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f001 f898 	bl	800a1ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 fca1 	bl	80099e2 <I2C_ITSlaveSeqCplt>
 80090a0:	e01c      	b.n	80090dc <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2210      	movs	r2, #16
 80090a8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80090aa:	e08f      	b.n	80091cc <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2210      	movs	r2, #16
 80090b2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b8:	f043 0204 	orr.w	r2, r3, #4
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d003      	beq.n	80090ce <I2C_Slave_ISR_IT+0xdc>
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090cc:	d17e      	bne.n	80091cc <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d2:	4619      	mov	r1, r3
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 ff61 	bl	8009f9c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80090da:	e077      	b.n	80091cc <I2C_Slave_ISR_IT+0x1da>
 80090dc:	e076      	b.n	80091cc <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	f003 0304 	and.w	r3, r3, #4
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d02f      	beq.n	8009148 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d02a      	beq.n	8009148 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d018      	beq.n	800912e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009106:	b2d2      	uxtb	r2, r2
 8009108:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009118:	3b01      	subs	r3, #1
 800911a:	b29a      	uxth	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009124:	b29b      	uxth	r3, r3
 8009126:	3b01      	subs	r3, #1
 8009128:	b29a      	uxth	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009132:	b29b      	uxth	r3, r3
 8009134:	2b00      	cmp	r3, #0
 8009136:	d14b      	bne.n	80091d0 <I2C_Slave_ISR_IT+0x1de>
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800913e:	d047      	beq.n	80091d0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 fc4e 	bl	80099e2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009146:	e043      	b.n	80091d0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f003 0308 	and.w	r3, r3, #8
 800914e:	2b00      	cmp	r3, #0
 8009150:	d009      	beq.n	8009166 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009158:	2b00      	cmp	r3, #0
 800915a:	d004      	beq.n	8009166 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800915c:	6939      	ldr	r1, [r7, #16]
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f000 fb7e 	bl	8009860 <I2C_ITAddrCplt>
 8009164:	e035      	b.n	80091d2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f003 0302 	and.w	r3, r3, #2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d030      	beq.n	80091d2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009176:	2b00      	cmp	r3, #0
 8009178:	d02b      	beq.n	80091d2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800917e:	b29b      	uxth	r3, r3
 8009180:	2b00      	cmp	r3, #0
 8009182:	d018      	beq.n	80091b6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009188:	781a      	ldrb	r2, [r3, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800919e:	b29b      	uxth	r3, r3
 80091a0:	3b01      	subs	r3, #1
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ac:	3b01      	subs	r3, #1
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	851a      	strh	r2, [r3, #40]	; 0x28
 80091b4:	e00d      	b.n	80091d2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091bc:	d002      	beq.n	80091c4 <I2C_Slave_ISR_IT+0x1d2>
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d106      	bne.n	80091d2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 fc0c 	bl	80099e2 <I2C_ITSlaveSeqCplt>
 80091ca:	e002      	b.n	80091d2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80091cc:	bf00      	nop
 80091ce:	e000      	b.n	80091d2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80091d0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b088      	sub	sp, #32
 80091e8:	af02      	add	r7, sp, #8
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d101      	bne.n	80091fe <I2C_Master_ISR_DMA+0x1a>
 80091fa:	2302      	movs	r3, #2
 80091fc:	e0d9      	b.n	80093b2 <I2C_Master_ISR_DMA+0x1ce>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	f003 0310 	and.w	r3, r3, #16
 800920c:	2b00      	cmp	r3, #0
 800920e:	d016      	beq.n	800923e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009216:	2b00      	cmp	r3, #0
 8009218:	d011      	beq.n	800923e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2210      	movs	r2, #16
 8009220:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009226:	f043 0204 	orr.w	r2, r3, #4
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800922e:	2120      	movs	r1, #32
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f001 fb3b 	bl	800a8ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f000 ffc7 	bl	800a1ca <I2C_Flush_TXDR>
 800923c:	e0b4      	b.n	80093a8 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009244:	2b00      	cmp	r3, #0
 8009246:	d071      	beq.n	800932c <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800924e:	2b00      	cmp	r3, #0
 8009250:	d06c      	beq.n	800932c <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009260:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009266:	b29b      	uxth	r3, r3
 8009268:	2b00      	cmp	r3, #0
 800926a:	d04e      	beq.n	800930a <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	b29b      	uxth	r3, r3
 8009274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009278:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800927e:	b29b      	uxth	r3, r3
 8009280:	2bff      	cmp	r3, #255	; 0xff
 8009282:	d906      	bls.n	8009292 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	22ff      	movs	r2, #255	; 0xff
 8009288:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800928a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	e010      	b.n	80092b4 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009296:	b29a      	uxth	r2, r3
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80092a4:	d003      	beq.n	80092ae <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092aa:	617b      	str	r3, [r7, #20]
 80092ac:	e002      	b.n	80092b4 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80092ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092b2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	8a79      	ldrh	r1, [r7, #18]
 80092bc:	2300      	movs	r3, #0
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f001 fac0 	bl	800a848 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b22      	cmp	r3, #34	; 0x22
 80092e4:	d108      	bne.n	80092f8 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80092f6:	e057      	b.n	80093a8 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009306:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009308:	e04e      	b.n	80093a8 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009318:	d003      	beq.n	8009322 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 fb24 	bl	8009968 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009320:	e042      	b.n	80093a8 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009322:	2140      	movs	r1, #64	; 0x40
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 fe39 	bl	8009f9c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800932a:	e03d      	b.n	80093a8 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009332:	2b00      	cmp	r3, #0
 8009334:	d028      	beq.n	8009388 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800933c:	2b00      	cmp	r3, #0
 800933e:	d023      	beq.n	8009388 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009344:	b29b      	uxth	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d119      	bne.n	800937e <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009354:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009358:	d025      	beq.n	80093a6 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009362:	d108      	bne.n	8009376 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009372:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009374:	e017      	b.n	80093a6 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 faf6 	bl	8009968 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800937c:	e013      	b.n	80093a6 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800937e:	2140      	movs	r1, #64	; 0x40
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 fe0b 	bl	8009f9c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009386:	e00e      	b.n	80093a6 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	f003 0320 	and.w	r3, r3, #32
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00a      	beq.n	80093a8 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800939c:	68b9      	ldr	r1, [r7, #8]
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 fb7c 	bl	8009a9c <I2C_ITMasterCplt>
 80093a4:	e000      	b.n	80093a8 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80093a6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af02      	add	r7, sp, #8
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80093c8:	4b8d      	ldr	r3, [pc, #564]	; (8009600 <I2C_Mem_ISR_DMA+0x244>)
 80093ca:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d101      	bne.n	80093da <I2C_Mem_ISR_DMA+0x1e>
 80093d6:	2302      	movs	r3, #2
 80093d8:	e10e      	b.n	80095f8 <I2C_Mem_ISR_DMA+0x23c>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	f003 0310 	and.w	r3, r3, #16
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d016      	beq.n	800941a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d011      	beq.n	800941a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2210      	movs	r2, #16
 80093fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009402:	f043 0204 	orr.w	r2, r3, #4
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800940a:	2120      	movs	r1, #32
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f001 fa4d 	bl	800a8ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 fed9 	bl	800a1ca <I2C_Flush_TXDR>
 8009418:	e0e9      	b.n	80095ee <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	f003 0302 	and.w	r3, r3, #2
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00e      	beq.n	8009442 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800942a:	2b00      	cmp	r3, #0
 800942c:	d009      	beq.n	8009442 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009436:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f04f 32ff 	mov.w	r2, #4294967295
 800943e:	651a      	str	r2, [r3, #80]	; 0x50
 8009440:	e0d5      	b.n	80095ee <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009448:	2b00      	cmp	r3, #0
 800944a:	d05f      	beq.n	800950c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009452:	2b00      	cmp	r3, #0
 8009454:	d05a      	beq.n	800950c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009456:	2101      	movs	r1, #1
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f001 faab 	bl	800a9b4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800945e:	2110      	movs	r1, #16
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f001 fa23 	bl	800a8ac <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946a:	b29b      	uxth	r3, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	d048      	beq.n	8009502 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009474:	b29b      	uxth	r3, r3
 8009476:	2bff      	cmp	r3, #255	; 0xff
 8009478:	d910      	bls.n	800949c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	22ff      	movs	r2, #255	; 0xff
 800947e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009484:	b299      	uxth	r1, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800948a:	b2da      	uxtb	r2, r3
 800948c:	2300      	movs	r3, #0
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f001 f9d7 	bl	800a848 <I2C_TransferConfig>
 800949a:	e011      	b.n	80094c0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094aa:	b299      	uxth	r1, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	2300      	movs	r3, #0
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f001 f9c4 	bl	800a848 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b22      	cmp	r3, #34	; 0x22
 80094dc:	d108      	bne.n	80094f0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094ec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80094ee:	e07e      	b.n	80095ee <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094fe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009500:	e075      	b.n	80095ee <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009502:	2140      	movs	r1, #64	; 0x40
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 fd49 	bl	8009f9c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800950a:	e070      	b.n	80095ee <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009512:	2b00      	cmp	r3, #0
 8009514:	d05d      	beq.n	80095d2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800951c:	2b00      	cmp	r3, #0
 800951e:	d058      	beq.n	80095d2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009520:	2101      	movs	r1, #1
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f001 fa46 	bl	800a9b4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009528:	2110      	movs	r1, #16
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f001 f9be 	bl	800a8ac <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009536:	b2db      	uxtb	r3, r3
 8009538:	2b22      	cmp	r3, #34	; 0x22
 800953a:	d101      	bne.n	8009540 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800953c:	4b31      	ldr	r3, [pc, #196]	; (8009604 <I2C_Mem_ISR_DMA+0x248>)
 800953e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009544:	b29b      	uxth	r3, r3
 8009546:	2bff      	cmp	r3, #255	; 0xff
 8009548:	d910      	bls.n	800956c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	22ff      	movs	r2, #255	; 0xff
 800954e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009554:	b299      	uxth	r1, r3
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800955a:	b2da      	uxtb	r2, r3
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f001 f96f 	bl	800a848 <I2C_TransferConfig>
 800956a:	e011      	b.n	8009590 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009570:	b29a      	uxth	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800957a:	b299      	uxth	r1, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009580:	b2da      	uxtb	r2, r3
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f001 f95c 	bl	800a848 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009594:	b29a      	uxth	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	b29a      	uxth	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b22      	cmp	r3, #34	; 0x22
 80095ac:	d108      	bne.n	80095c0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095bc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80095be:	e016      	b.n	80095ee <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095ce:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80095d0:	e00d      	b.n	80095ee <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	f003 0320 	and.w	r3, r3, #32
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d008      	beq.n	80095ee <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d003      	beq.n	80095ee <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80095e6:	68b9      	ldr	r1, [r7, #8]
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f000 fa57 	bl	8009a9c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3718      	adds	r7, #24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	80002000 	.word	0x80002000
 8009604:	80002400 	.word	0x80002400

08009608 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b088      	sub	sp, #32
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009618:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009624:	2b01      	cmp	r3, #1
 8009626:	d101      	bne.n	800962c <I2C_Slave_ISR_DMA+0x24>
 8009628:	2302      	movs	r3, #2
 800962a:	e0c0      	b.n	80097ae <I2C_Slave_ISR_DMA+0x1a6>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	2b00      	cmp	r3, #0
 800963c:	d009      	beq.n	8009652 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009644:	2b00      	cmp	r3, #0
 8009646:	d004      	beq.n	8009652 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009648:	68b9      	ldr	r1, [r7, #8]
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	f000 faee 	bl	8009c2c <I2C_ITSlaveCplt>
 8009650:	e0a8      	b.n	80097a4 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	f003 0310 	and.w	r3, r3, #16
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 8095 	beq.w	8009788 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 808f 	beq.w	8009788 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d104      	bne.n	800967e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800967a:	2b00      	cmp	r3, #0
 800967c:	d07d      	beq.n	800977a <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00c      	beq.n	80096a0 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d007      	beq.n	80096a0 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d101      	bne.n	80096a0 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 800969c:	2301      	movs	r3, #1
 800969e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00c      	beq.n	80096c2 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d007      	beq.n	80096c2 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80096be:	2301      	movs	r3, #1
 80096c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d128      	bne.n	800971a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b28      	cmp	r3, #40	; 0x28
 80096d2:	d108      	bne.n	80096e6 <I2C_Slave_ISR_DMA+0xde>
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096da:	d104      	bne.n	80096e6 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80096dc:	68b9      	ldr	r1, [r7, #8]
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 fc08 	bl	8009ef4 <I2C_ITListenCplt>
 80096e4:	e048      	b.n	8009778 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b29      	cmp	r3, #41	; 0x29
 80096f0:	d10e      	bne.n	8009710 <I2C_Slave_ISR_DMA+0x108>
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80096f8:	d00a      	beq.n	8009710 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2210      	movs	r2, #16
 8009700:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 fd61 	bl	800a1ca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 f96a 	bl	80099e2 <I2C_ITSlaveSeqCplt>
 800970e:	e033      	b.n	8009778 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2210      	movs	r2, #16
 8009716:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009718:	e034      	b.n	8009784 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2210      	movs	r2, #16
 8009720:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009726:	f043 0204 	orr.w	r2, r3, #4
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009734:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <I2C_Slave_ISR_DMA+0x13c>
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009742:	d11f      	bne.n	8009784 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009744:	7dfb      	ldrb	r3, [r7, #23]
 8009746:	2b21      	cmp	r3, #33	; 0x21
 8009748:	d002      	beq.n	8009750 <I2C_Slave_ISR_DMA+0x148>
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	2b29      	cmp	r3, #41	; 0x29
 800974e:	d103      	bne.n	8009758 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2221      	movs	r2, #33	; 0x21
 8009754:	631a      	str	r2, [r3, #48]	; 0x30
 8009756:	e008      	b.n	800976a <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009758:	7dfb      	ldrb	r3, [r7, #23]
 800975a:	2b22      	cmp	r3, #34	; 0x22
 800975c:	d002      	beq.n	8009764 <I2C_Slave_ISR_DMA+0x15c>
 800975e:	7dfb      	ldrb	r3, [r7, #23]
 8009760:	2b2a      	cmp	r3, #42	; 0x2a
 8009762:	d102      	bne.n	800976a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2222      	movs	r2, #34	; 0x22
 8009768:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800976e:	4619      	mov	r1, r3
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 fc13 	bl	8009f9c <I2C_ITError>
      if (treatdmanack == 1U)
 8009776:	e005      	b.n	8009784 <I2C_Slave_ISR_DMA+0x17c>
 8009778:	e004      	b.n	8009784 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2210      	movs	r2, #16
 8009780:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009782:	e00f      	b.n	80097a4 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8009784:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009786:	e00d      	b.n	80097a4 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f003 0308 	and.w	r3, r3, #8
 800978e:	2b00      	cmp	r3, #0
 8009790:	d008      	beq.n	80097a4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009798:	2b00      	cmp	r3, #0
 800979a:	d003      	beq.n	80097a4 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800979c:	68b9      	ldr	r1, [r7, #8]
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 f85e 	bl	8009860 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3720      	adds	r7, #32
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af02      	add	r7, sp, #8
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	4608      	mov	r0, r1
 80097c2:	4611      	mov	r1, r2
 80097c4:	461a      	mov	r2, r3
 80097c6:	4603      	mov	r3, r0
 80097c8:	817b      	strh	r3, [r7, #10]
 80097ca:	460b      	mov	r3, r1
 80097cc:	813b      	strh	r3, [r7, #8]
 80097ce:	4613      	mov	r3, r2
 80097d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80097d2:	88fb      	ldrh	r3, [r7, #6]
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	8979      	ldrh	r1, [r7, #10]
 80097d8:	4b20      	ldr	r3, [pc, #128]	; (800985c <I2C_RequestMemoryWrite+0xa4>)
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f001 f831 	bl	800a848 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097e6:	69fa      	ldr	r2, [r7, #28]
 80097e8:	69b9      	ldr	r1, [r7, #24]
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f000 fe35 	bl	800a45a <I2C_WaitOnTXISFlagUntilTimeout>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e02c      	b.n	8009854 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80097fa:	88fb      	ldrh	r3, [r7, #6]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d105      	bne.n	800980c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009800:	893b      	ldrh	r3, [r7, #8]
 8009802:	b2da      	uxtb	r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	629a      	str	r2, [r3, #40]	; 0x28
 800980a:	e015      	b.n	8009838 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800980c:	893b      	ldrh	r3, [r7, #8]
 800980e:	0a1b      	lsrs	r3, r3, #8
 8009810:	b29b      	uxth	r3, r3
 8009812:	b2da      	uxtb	r2, r3
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800981a:	69fa      	ldr	r2, [r7, #28]
 800981c:	69b9      	ldr	r1, [r7, #24]
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 fe1b 	bl	800a45a <I2C_WaitOnTXISFlagUntilTimeout>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e012      	b.n	8009854 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800982e:	893b      	ldrh	r3, [r7, #8]
 8009830:	b2da      	uxtb	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	2200      	movs	r2, #0
 8009840:	2180      	movs	r1, #128	; 0x80
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f000 fdb0 	bl	800a3a8 <I2C_WaitOnFlagUntilTimeout>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e000      	b.n	8009854 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	80002000 	.word	0x80002000

08009860 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009870:	b2db      	uxtb	r3, r3
 8009872:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009876:	2b28      	cmp	r3, #40	; 0x28
 8009878:	d16a      	bne.n	8009950 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	0c1b      	lsrs	r3, r3, #16
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	0c1b      	lsrs	r3, r3, #16
 8009892:	b29b      	uxth	r3, r3
 8009894:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009898:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098a6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80098b4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d138      	bne.n	8009930 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80098be:	897b      	ldrh	r3, [r7, #10]
 80098c0:	09db      	lsrs	r3, r3, #7
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	89bb      	ldrh	r3, [r7, #12]
 80098c6:	4053      	eors	r3, r2
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	f003 0306 	and.w	r3, r3, #6
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d11c      	bne.n	800990c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80098d2:	897b      	ldrh	r3, [r7, #10]
 80098d4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098da:	1c5a      	adds	r2, r3, #1
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d13b      	bne.n	8009960 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2208      	movs	r2, #8
 80098f4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80098fe:	89ba      	ldrh	r2, [r7, #12]
 8009900:	7bfb      	ldrb	r3, [r7, #15]
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7ff fa0d 	bl	8008d24 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800990a:	e029      	b.n	8009960 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800990c:	893b      	ldrh	r3, [r7, #8]
 800990e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 f84d 	bl	800a9b4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009922:	89ba      	ldrh	r2, [r7, #12]
 8009924:	7bfb      	ldrb	r3, [r7, #15]
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7ff f9fb 	bl	8008d24 <HAL_I2C_AddrCallback>
}
 800992e:	e017      	b.n	8009960 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f001 f83d 	bl	800a9b4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009942:	89ba      	ldrh	r2, [r7, #12]
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7ff f9eb 	bl	8008d24 <HAL_I2C_AddrCallback>
}
 800994e:	e007      	b.n	8009960 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2208      	movs	r2, #8
 8009956:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009960:	bf00      	nop
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b21      	cmp	r3, #33	; 0x21
 8009982:	d115      	bne.n	80099b0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2220      	movs	r2, #32
 8009988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2211      	movs	r2, #17
 8009990:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009998:	2101      	movs	r1, #1
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f001 f80a 	bl	800a9b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7ff f993 	bl	8008cd4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80099ae:	e014      	b.n	80099da <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2212      	movs	r2, #18
 80099bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80099c4:	2102      	movs	r1, #2
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fff4 	bl	800a9b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7ff f987 	bl	8008ce8 <HAL_I2C_MasterRxCpltCallback>
}
 80099da:	bf00      	nop
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b084      	sub	sp, #16
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d008      	beq.n	8009a16 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a12:	601a      	str	r2, [r3, #0]
 8009a14:	e00c      	b.n	8009a30 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d007      	beq.n	8009a30 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a2e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b29      	cmp	r3, #41	; 0x29
 8009a3a:	d112      	bne.n	8009a62 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2228      	movs	r2, #40	; 0x28
 8009a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2221      	movs	r2, #33	; 0x21
 8009a48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 ffb1 	bl	800a9b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f7ff f94e 	bl	8008cfc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009a60:	e017      	b.n	8009a92 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a6c:	d111      	bne.n	8009a92 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2228      	movs	r2, #40	; 0x28
 8009a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2222      	movs	r2, #34	; 0x22
 8009a7a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009a7c:	2102      	movs	r1, #2
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 ff98 	bl	800a9b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff f93f 	bl	8008d10 <HAL_I2C_SlaveRxCpltCallback>
}
 8009a92:	bf00      	nop
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
	...

08009a9c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2220      	movs	r2, #32
 8009ab0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b21      	cmp	r3, #33	; 0x21
 8009abc:	d107      	bne.n	8009ace <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009abe:	2101      	movs	r1, #1
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 ff77 	bl	800a9b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2211      	movs	r2, #17
 8009aca:	631a      	str	r2, [r3, #48]	; 0x30
 8009acc:	e00c      	b.n	8009ae8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b22      	cmp	r3, #34	; 0x22
 8009ad8:	d106      	bne.n	8009ae8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009ada:	2102      	movs	r1, #2
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 ff69 	bl	800a9b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2212      	movs	r2, #18
 8009ae6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6859      	ldr	r1, [r3, #4]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	4b4c      	ldr	r3, [pc, #304]	; (8009c24 <I2C_ITMasterCplt+0x188>)
 8009af4:	400b      	ands	r3, r1
 8009af6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a49      	ldr	r2, [pc, #292]	; (8009c28 <I2C_ITMasterCplt+0x18c>)
 8009b02:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f003 0310 	and.w	r3, r3, #16
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d009      	beq.n	8009b22 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2210      	movs	r2, #16
 8009b14:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b1a:	f043 0204 	orr.w	r2, r3, #4
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b60      	cmp	r3, #96	; 0x60
 8009b2c:	d10a      	bne.n	8009b44 <I2C_ITMasterCplt+0xa8>
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	f003 0304 	and.w	r3, r3, #4
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d005      	beq.n	8009b44 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8009b42:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fb40 	bl	800a1ca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b60      	cmp	r3, #96	; 0x60
 8009b5a:	d002      	beq.n	8009b62 <I2C_ITMasterCplt+0xc6>
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d006      	beq.n	8009b70 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fa17 	bl	8009f9c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009b6e:	e054      	b.n	8009c1a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b21      	cmp	r3, #33	; 0x21
 8009b7a:	d124      	bne.n	8009bc6 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2220      	movs	r2, #32
 8009b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b40      	cmp	r3, #64	; 0x40
 8009b94:	d10b      	bne.n	8009bae <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7ff f8d4 	bl	8008d54 <HAL_I2C_MemTxCpltCallback>
}
 8009bac:	e035      	b.n	8009c1a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff f888 	bl	8008cd4 <HAL_I2C_MasterTxCpltCallback>
}
 8009bc4:	e029      	b.n	8009c1a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b22      	cmp	r3, #34	; 0x22
 8009bd0:	d123      	bne.n	8009c1a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b40      	cmp	r3, #64	; 0x40
 8009bea:	d10b      	bne.n	8009c04 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff f8b3 	bl	8008d68 <HAL_I2C_MemRxCpltCallback>
}
 8009c02:	e00a      	b.n	8009c1a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7ff f867 	bl	8008ce8 <HAL_I2C_MasterRxCpltCallback>
}
 8009c1a:	bf00      	nop
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	fe00e800 	.word	0xfe00e800
 8009c28:	ffff0000 	.word	0xffff0000

08009c2c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c46:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c4e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2220      	movs	r2, #32
 8009c56:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009c58:	7afb      	ldrb	r3, [r7, #11]
 8009c5a:	2b21      	cmp	r3, #33	; 0x21
 8009c5c:	d002      	beq.n	8009c64 <I2C_ITSlaveCplt+0x38>
 8009c5e:	7afb      	ldrb	r3, [r7, #11]
 8009c60:	2b29      	cmp	r3, #41	; 0x29
 8009c62:	d108      	bne.n	8009c76 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009c64:	f248 0101 	movw	r1, #32769	; 0x8001
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fea3 	bl	800a9b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2221      	movs	r2, #33	; 0x21
 8009c72:	631a      	str	r2, [r3, #48]	; 0x30
 8009c74:	e019      	b.n	8009caa <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009c76:	7afb      	ldrb	r3, [r7, #11]
 8009c78:	2b22      	cmp	r3, #34	; 0x22
 8009c7a:	d002      	beq.n	8009c82 <I2C_ITSlaveCplt+0x56>
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c80:	d108      	bne.n	8009c94 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009c82:	f248 0102 	movw	r1, #32770	; 0x8002
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fe94 	bl	800a9b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2222      	movs	r2, #34	; 0x22
 8009c90:	631a      	str	r2, [r3, #48]	; 0x30
 8009c92:	e00a      	b.n	8009caa <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	2b28      	cmp	r3, #40	; 0x28
 8009c98:	d107      	bne.n	8009caa <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009c9a:	f248 0103 	movw	r1, #32771	; 0x8003
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fe88 	bl	800a9b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cb8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6859      	ldr	r1, [r3, #4]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	4b89      	ldr	r3, [pc, #548]	; (8009eec <I2C_ITSlaveCplt+0x2c0>)
 8009cc6:	400b      	ands	r3, r1
 8009cc8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fa7d 	bl	800a1ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d013      	beq.n	8009d02 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ce8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d01f      	beq.n	8009d32 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d00:	e017      	b.n	8009d32 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d012      	beq.n	8009d32 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d1a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d006      	beq.n	8009d32 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f003 0304 	and.w	r3, r3, #4
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d020      	beq.n	8009d7e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	f023 0304 	bic.w	r3, r3, #4
 8009d42:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	b2d2      	uxtb	r2, r2
 8009d50:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d56:	1c5a      	adds	r2, r3, #1
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00c      	beq.n	8009d7e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	3b01      	subs	r3, #1
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d8c:	f043 0204 	orr.w	r2, r3, #4
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	f003 0310 	and.w	r3, r3, #16
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d049      	beq.n	8009e32 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d044      	beq.n	8009e32 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d128      	bne.n	8009e04 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b28      	cmp	r3, #40	; 0x28
 8009dbc:	d108      	bne.n	8009dd0 <I2C_ITSlaveCplt+0x1a4>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dc4:	d104      	bne.n	8009dd0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009dc6:	6979      	ldr	r1, [r7, #20]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f893 	bl	8009ef4 <I2C_ITListenCplt>
 8009dce:	e030      	b.n	8009e32 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	2b29      	cmp	r3, #41	; 0x29
 8009dda:	d10e      	bne.n	8009dfa <I2C_ITSlaveCplt+0x1ce>
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009de2:	d00a      	beq.n	8009dfa <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2210      	movs	r2, #16
 8009dea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f9ec 	bl	800a1ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7ff fdf5 	bl	80099e2 <I2C_ITSlaveSeqCplt>
 8009df8:	e01b      	b.n	8009e32 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2210      	movs	r2, #16
 8009e00:	61da      	str	r2, [r3, #28]
 8009e02:	e016      	b.n	8009e32 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2210      	movs	r2, #16
 8009e0a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e10:	f043 0204 	orr.w	r2, r3, #4
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d003      	beq.n	8009e26 <I2C_ITSlaveCplt+0x1fa>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e24:	d105      	bne.n	8009e32 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f8b5 	bl	8009f9c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d010      	beq.n	8009e6a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f8a4 	bl	8009f9c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b28      	cmp	r3, #40	; 0x28
 8009e5e:	d141      	bne.n	8009ee4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009e60:	6979      	ldr	r1, [r7, #20]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f846 	bl	8009ef4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009e68:	e03c      	b.n	8009ee4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e72:	d014      	beq.n	8009e9e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7ff fdb4 	bl	80099e2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a1c      	ldr	r2, [pc, #112]	; (8009ef0 <I2C_ITSlaveCplt+0x2c4>)
 8009e7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2220      	movs	r2, #32
 8009e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7fe ff52 	bl	8008d40 <HAL_I2C_ListenCpltCallback>
}
 8009e9c:	e022      	b.n	8009ee4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b22      	cmp	r3, #34	; 0x22
 8009ea8:	d10e      	bne.n	8009ec8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2220      	movs	r2, #32
 8009eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7fe ff25 	bl	8008d10 <HAL_I2C_SlaveRxCpltCallback>
}
 8009ec6:	e00d      	b.n	8009ee4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2220      	movs	r2, #32
 8009ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7fe ff0c 	bl	8008cfc <HAL_I2C_SlaveTxCpltCallback>
}
 8009ee4:	bf00      	nop
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	fe00e800 	.word	0xfe00e800
 8009ef0:	ffff0000 	.word	0xffff0000

08009ef4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a25      	ldr	r2, [pc, #148]	; (8009f98 <I2C_ITListenCplt+0xa4>)
 8009f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2220      	movs	r2, #32
 8009f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	f003 0304 	and.w	r3, r3, #4
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d022      	beq.n	8009f70 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	b2d2      	uxtb	r2, r2
 8009f36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	1c5a      	adds	r2, r3, #1
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d012      	beq.n	8009f70 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f68:	f043 0204 	orr.w	r2, r3, #4
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009f70:	f248 0103 	movw	r1, #32771	; 0x8003
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fd1d 	bl	800a9b4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2210      	movs	r2, #16
 8009f80:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f7fe fed8 	bl	8008d40 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	ffff0000 	.word	0xffff0000

08009f9c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fac:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a6d      	ldr	r2, [pc, #436]	; (800a170 <I2C_ITError+0x1d4>)
 8009fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
 8009fd0:	2b28      	cmp	r3, #40	; 0x28
 8009fd2:	d005      	beq.n	8009fe0 <I2C_ITError+0x44>
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
 8009fd6:	2b29      	cmp	r3, #41	; 0x29
 8009fd8:	d002      	beq.n	8009fe0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
 8009fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8009fde:	d10b      	bne.n	8009ff8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009fe0:	2103      	movs	r1, #3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fce6 	bl	800a9b4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2228      	movs	r2, #40	; 0x28
 8009fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a60      	ldr	r2, [pc, #384]	; (800a174 <I2C_ITError+0x1d8>)
 8009ff4:	635a      	str	r2, [r3, #52]	; 0x34
 8009ff6:	e030      	b.n	800a05a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009ff8:	f248 0103 	movw	r1, #32771	; 0x8003
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fcd9 	bl	800a9b4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 f8e1 	bl	800a1ca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b60      	cmp	r3, #96	; 0x60
 800a012:	d01f      	beq.n	800a054 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2220      	movs	r2, #32
 800a018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	f003 0320 	and.w	r3, r3, #32
 800a026:	2b20      	cmp	r3, #32
 800a028:	d114      	bne.n	800a054 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	f003 0310 	and.w	r3, r3, #16
 800a034:	2b10      	cmp	r3, #16
 800a036:	d109      	bne.n	800a04c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2210      	movs	r2, #16
 800a03e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a044:	f043 0204 	orr.w	r2, r3, #4
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2220      	movs	r2, #32
 800a052:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a064:	2b00      	cmp	r3, #0
 800a066:	d039      	beq.n	800a0dc <I2C_ITError+0x140>
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2b11      	cmp	r3, #17
 800a06c:	d002      	beq.n	800a074 <I2C_ITError+0xd8>
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b21      	cmp	r3, #33	; 0x21
 800a072:	d133      	bne.n	800a0dc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a07e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a082:	d107      	bne.n	800a094 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a092:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fc ff96 	bl	8006fca <HAL_DMA_GetState>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d017      	beq.n	800a0d4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a8:	4a33      	ldr	r2, [pc, #204]	; (800a178 <I2C_ITError+0x1dc>)
 800a0aa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fc fe70 	bl	8006d9e <HAL_DMA_Abort_IT>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d04d      	beq.n	800a160 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a0d2:	e045      	b.n	800a160 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f851 	bl	800a17c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a0da:	e041      	b.n	800a160 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d039      	beq.n	800a158 <I2C_ITError+0x1bc>
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2b12      	cmp	r3, #18
 800a0e8:	d002      	beq.n	800a0f0 <I2C_ITError+0x154>
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2b22      	cmp	r3, #34	; 0x22
 800a0ee:	d133      	bne.n	800a158 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0fe:	d107      	bne.n	800a110 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a10e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a114:	4618      	mov	r0, r3
 800a116:	f7fc ff58 	bl	8006fca <HAL_DMA_GetState>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d017      	beq.n	800a150 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a124:	4a14      	ldr	r2, [pc, #80]	; (800a178 <I2C_ITError+0x1dc>)
 800a126:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a134:	4618      	mov	r0, r3
 800a136:	f7fc fe32 	bl	8006d9e <HAL_DMA_Abort_IT>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d011      	beq.n	800a164 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a14a:	4610      	mov	r0, r2
 800a14c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a14e:	e009      	b.n	800a164 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f813 	bl	800a17c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a156:	e005      	b.n	800a164 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f80f 	bl	800a17c <I2C_TreatErrorCallback>
  }
}
 800a15e:	e002      	b.n	800a166 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a160:	bf00      	nop
 800a162:	e000      	b.n	800a166 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a164:	bf00      	nop
}
 800a166:	bf00      	nop
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	ffff0000 	.word	0xffff0000
 800a174:	08008ff3 	.word	0x08008ff3
 800a178:	0800a36d 	.word	0x0800a36d

0800a17c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b60      	cmp	r3, #96	; 0x60
 800a18e:	d10e      	bne.n	800a1ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2220      	movs	r2, #32
 800a194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7fe fdf2 	bl	8008d90 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a1ac:	e009      	b.n	800a1c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f7fe fddd 	bl	8008d7c <HAL_I2C_ErrorCallback>
}
 800a1c2:	bf00      	nop
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b083      	sub	sp, #12
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	f003 0302 	and.w	r3, r3, #2
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d103      	bne.n	800a1e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	699b      	ldr	r3, [r3, #24]
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d007      	beq.n	800a206 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	699a      	ldr	r2, [r3, #24]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f042 0201 	orr.w	r2, r2, #1
 800a204:	619a      	str	r2, [r3, #24]
  }
}
 800a206:	bf00      	nop
 800a208:	370c      	adds	r7, #12
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b084      	sub	sp, #16
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a22e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a234:	b29b      	uxth	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	d104      	bne.n	800a244 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a23a:	2120      	movs	r1, #32
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f000 fb35 	bl	800a8ac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a242:	e02d      	b.n	800a2a0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a24c:	441a      	add	r2, r3
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a256:	b29b      	uxth	r3, r3
 800a258:	2bff      	cmp	r3, #255	; 0xff
 800a25a:	d903      	bls.n	800a264 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	22ff      	movs	r2, #255	; 0xff
 800a260:	851a      	strh	r2, [r3, #40]	; 0x28
 800a262:	e004      	b.n	800a26e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a268:	b29a      	uxth	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a276:	4619      	mov	r1, r3
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3328      	adds	r3, #40	; 0x28
 800a27e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a284:	f7fc fd10 	bl	8006ca8 <HAL_DMA_Start_IT>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d004      	beq.n	800a298 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a28e:	2110      	movs	r1, #16
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f7ff fe83 	bl	8009f9c <I2C_ITError>
}
 800a296:	e003      	b.n	800a2a0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a298:	2140      	movs	r1, #64	; 0x40
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f000 fb06 	bl	800a8ac <I2C_Enable_IRQ>
}
 800a2a0:	bf00      	nop
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2c4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d104      	bne.n	800a2da <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a2d0:	2120      	movs	r1, #32
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 faea 	bl	800a8ac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a2d8:	e02d      	b.n	800a336 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a2e2:	441a      	add	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	2bff      	cmp	r3, #255	; 0xff
 800a2f0:	d903      	bls.n	800a2fa <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	22ff      	movs	r2, #255	; 0xff
 800a2f6:	851a      	strh	r2, [r3, #40]	; 0x28
 800a2f8:	e004      	b.n	800a304 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3324      	adds	r3, #36	; 0x24
 800a30e:	4619      	mov	r1, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a314:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800a31a:	f7fc fcc5 	bl	8006ca8 <HAL_DMA_Start_IT>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d004      	beq.n	800a32e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a324:	2110      	movs	r1, #16
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f7ff fe38 	bl	8009f9c <I2C_ITError>
}
 800a32c:	e003      	b.n	800a336 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a32e:	2140      	movs	r1, #64	; 0x40
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f000 fabb 	bl	800a8ac <I2C_Enable_IRQ>
}
 800a336:	bf00      	nop
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a35a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a35c:	2110      	movs	r1, #16
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f7ff fe1c 	bl	8009f9c <I2C_ITError>
}
 800a364:	bf00      	nop
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a378:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a386:	2200      	movs	r2, #0
 800a388:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a396:	2200      	movs	r2, #0
 800a398:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f7ff feee 	bl	800a17c <I2C_TreatErrorCallback>
}
 800a3a0:	bf00      	nop
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	603b      	str	r3, [r7, #0]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3b8:	e03b      	b.n	800a432 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3ba:	69ba      	ldr	r2, [r7, #24]
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 f962 	bl	800a688 <I2C_IsErrorOccurred>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e041      	b.n	800a452 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d4:	d02d      	beq.n	800a432 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3d6:	f7fa ff27 	bl	8005228 <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d302      	bcc.n	800a3ec <I2C_WaitOnFlagUntilTimeout+0x44>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d122      	bne.n	800a432 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	699a      	ldr	r2, [r3, #24]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	bf0c      	ite	eq
 800a3fc:	2301      	moveq	r3, #1
 800a3fe:	2300      	movne	r3, #0
 800a400:	b2db      	uxtb	r3, r3
 800a402:	461a      	mov	r2, r3
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	429a      	cmp	r2, r3
 800a408:	d113      	bne.n	800a432 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a40e:	f043 0220 	orr.w	r2, r3, #32
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2220      	movs	r2, #32
 800a41a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e00f      	b.n	800a452 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	699a      	ldr	r2, [r3, #24]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	4013      	ands	r3, r2
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	429a      	cmp	r2, r3
 800a440:	bf0c      	ite	eq
 800a442:	2301      	moveq	r3, #1
 800a444:	2300      	movne	r3, #0
 800a446:	b2db      	uxtb	r3, r3
 800a448:	461a      	mov	r2, r3
 800a44a:	79fb      	ldrb	r3, [r7, #7]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d0b4      	beq.n	800a3ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b084      	sub	sp, #16
 800a45e:	af00      	add	r7, sp, #0
 800a460:	60f8      	str	r0, [r7, #12]
 800a462:	60b9      	str	r1, [r7, #8]
 800a464:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a466:	e033      	b.n	800a4d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	68b9      	ldr	r1, [r7, #8]
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f000 f90b 	bl	800a688 <I2C_IsErrorOccurred>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e031      	b.n	800a4e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a482:	d025      	beq.n	800a4d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a484:	f7fa fed0 	bl	8005228 <HAL_GetTick>
 800a488:	4602      	mov	r2, r0
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	429a      	cmp	r2, r3
 800a492:	d302      	bcc.n	800a49a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d11a      	bne.n	800a4d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	f003 0302 	and.w	r3, r3, #2
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d013      	beq.n	800a4d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ac:	f043 0220 	orr.w	r2, r3, #32
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e007      	b.n	800a4e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d1c4      	bne.n	800a468 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4f4:	e02f      	b.n	800a556 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	68b9      	ldr	r1, [r7, #8]
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f000 f8c4 	bl	800a688 <I2C_IsErrorOccurred>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d001      	beq.n	800a50a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	e02d      	b.n	800a566 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a50a:	f7fa fe8d 	bl	8005228 <HAL_GetTick>
 800a50e:	4602      	mov	r2, r0
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	1ad3      	subs	r3, r2, r3
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	429a      	cmp	r2, r3
 800a518:	d302      	bcc.n	800a520 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d11a      	bne.n	800a556 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	f003 0320 	and.w	r3, r3, #32
 800a52a:	2b20      	cmp	r3, #32
 800a52c:	d013      	beq.n	800a556 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a532:	f043 0220 	orr.w	r2, r3, #32
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2220      	movs	r2, #32
 800a53e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e007      	b.n	800a566 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	f003 0320 	and.w	r3, r3, #32
 800a560:	2b20      	cmp	r3, #32
 800a562:	d1c8      	bne.n	800a4f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a580:	e071      	b.n	800a666 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	68b9      	ldr	r1, [r7, #8]
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f000 f87e 	bl	800a688 <I2C_IsErrorOccurred>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	f003 0320 	and.w	r3, r3, #32
 800a5a0:	2b20      	cmp	r3, #32
 800a5a2:	d13b      	bne.n	800a61c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800a5a4:	7dfb      	ldrb	r3, [r7, #23]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d138      	bne.n	800a61c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	699b      	ldr	r3, [r3, #24]
 800a5b0:	f003 0304 	and.w	r3, r3, #4
 800a5b4:	2b04      	cmp	r3, #4
 800a5b6:	d105      	bne.n	800a5c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	f003 0310 	and.w	r3, r3, #16
 800a5ce:	2b10      	cmp	r3, #16
 800a5d0:	d121      	bne.n	800a616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2210      	movs	r2, #16
 800a5d8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2204      	movs	r2, #4
 800a5de:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6859      	ldr	r1, [r3, #4]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	4b24      	ldr	r3, [pc, #144]	; (800a684 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800a5f4:	400b      	ands	r3, r1
 800a5f6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	75fb      	strb	r3, [r7, #23]
 800a614:	e002      	b.n	800a61c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800a61c:	f7fa fe04 	bl	8005228 <HAL_GetTick>
 800a620:	4602      	mov	r2, r0
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d302      	bcc.n	800a632 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d119      	bne.n	800a666 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800a632:	7dfb      	ldrb	r3, [r7, #23]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d116      	bne.n	800a666 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	f003 0304 	and.w	r3, r3, #4
 800a642:	2b04      	cmp	r3, #4
 800a644:	d00f      	beq.n	800a666 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a64a:	f043 0220 	orr.w	r2, r3, #32
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2220      	movs	r2, #32
 800a656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	699b      	ldr	r3, [r3, #24]
 800a66c:	f003 0304 	and.w	r3, r3, #4
 800a670:	2b04      	cmp	r3, #4
 800a672:	d002      	beq.n	800a67a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d083      	beq.n	800a582 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800a67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3718      	adds	r7, #24
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	fe00e800 	.word	0xfe00e800

0800a688 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08a      	sub	sp, #40	; 0x28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	f003 0310 	and.w	r3, r3, #16
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d068      	beq.n	800a786 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2210      	movs	r2, #16
 800a6ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a6bc:	e049      	b.n	800a752 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c4:	d045      	beq.n	800a752 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a6c6:	f7fa fdaf 	bl	8005228 <HAL_GetTick>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d302      	bcc.n	800a6dc <I2C_IsErrorOccurred+0x54>
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d13a      	bne.n	800a752 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a6ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	699b      	ldr	r3, [r3, #24]
 800a6f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6fe:	d121      	bne.n	800a744 <I2C_IsErrorOccurred+0xbc>
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a706:	d01d      	beq.n	800a744 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a708:	7cfb      	ldrb	r3, [r7, #19]
 800a70a:	2b20      	cmp	r3, #32
 800a70c:	d01a      	beq.n	800a744 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	685a      	ldr	r2, [r3, #4]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a71c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a71e:	f7fa fd83 	bl	8005228 <HAL_GetTick>
 800a722:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a724:	e00e      	b.n	800a744 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a726:	f7fa fd7f 	bl	8005228 <HAL_GetTick>
 800a72a:	4602      	mov	r2, r0
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	2b19      	cmp	r3, #25
 800a732:	d907      	bls.n	800a744 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	f043 0320 	orr.w	r3, r3, #32
 800a73a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a742:	e006      	b.n	800a752 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	699b      	ldr	r3, [r3, #24]
 800a74a:	f003 0320 	and.w	r3, r3, #32
 800a74e:	2b20      	cmp	r3, #32
 800a750:	d1e9      	bne.n	800a726 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	f003 0320 	and.w	r3, r3, #32
 800a75c:	2b20      	cmp	r3, #32
 800a75e:	d003      	beq.n	800a768 <I2C_IsErrorOccurred+0xe0>
 800a760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a764:	2b00      	cmp	r3, #0
 800a766:	d0aa      	beq.n	800a6be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d103      	bne.n	800a778 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2220      	movs	r2, #32
 800a776:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	f043 0304 	orr.w	r3, r3, #4
 800a77e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00b      	beq.n	800a7b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a798:	6a3b      	ldr	r3, [r7, #32]
 800a79a:	f043 0301 	orr.w	r3, r3, #1
 800a79e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00b      	beq.n	800a7d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
 800a7bc:	f043 0308 	orr.w	r3, r3, #8
 800a7c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a7ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00b      	beq.n	800a7f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a7dc:	6a3b      	ldr	r3, [r7, #32]
 800a7de:	f043 0302 	orr.w	r3, r3, #2
 800a7e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a7f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d01c      	beq.n	800a836 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f7ff fce4 	bl	800a1ca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	6859      	ldr	r1, [r3, #4]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	4b0d      	ldr	r3, [pc, #52]	; (800a844 <I2C_IsErrorOccurred+0x1bc>)
 800a80e:	400b      	ands	r3, r1
 800a810:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a816:	6a3b      	ldr	r3, [r7, #32]
 800a818:	431a      	orrs	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2220      	movs	r2, #32
 800a822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3728      	adds	r7, #40	; 0x28
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	fe00e800 	.word	0xfe00e800

0800a848 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a848:	b480      	push	{r7}
 800a84a:	b087      	sub	sp, #28
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	607b      	str	r3, [r7, #4]
 800a852:	460b      	mov	r3, r1
 800a854:	817b      	strh	r3, [r7, #10]
 800a856:	4613      	mov	r3, r2
 800a858:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a85a:	897b      	ldrh	r3, [r7, #10]
 800a85c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a860:	7a7b      	ldrb	r3, [r7, #9]
 800a862:	041b      	lsls	r3, r3, #16
 800a864:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a868:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a86e:	6a3b      	ldr	r3, [r7, #32]
 800a870:	4313      	orrs	r3, r2
 800a872:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a876:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	685a      	ldr	r2, [r3, #4]
 800a87e:	6a3b      	ldr	r3, [r7, #32]
 800a880:	0d5b      	lsrs	r3, r3, #21
 800a882:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a886:	4b08      	ldr	r3, [pc, #32]	; (800a8a8 <I2C_TransferConfig+0x60>)
 800a888:	430b      	orrs	r3, r1
 800a88a:	43db      	mvns	r3, r3
 800a88c:	ea02 0103 	and.w	r1, r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	697a      	ldr	r2, [r7, #20]
 800a896:	430a      	orrs	r2, r1
 800a898:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a89a:	bf00      	nop
 800a89c:	371c      	adds	r7, #28
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	03ff63ff 	.word	0x03ff63ff

0800a8ac <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c0:	4a39      	ldr	r2, [pc, #228]	; (800a9a8 <I2C_Enable_IRQ+0xfc>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d032      	beq.n	800a92c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a8ca:	4a38      	ldr	r2, [pc, #224]	; (800a9ac <I2C_Enable_IRQ+0x100>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d02d      	beq.n	800a92c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a8d4:	4a36      	ldr	r2, [pc, #216]	; (800a9b0 <I2C_Enable_IRQ+0x104>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d028      	beq.n	800a92c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a8da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	da03      	bge.n	800a8ea <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a8e8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a8ea:	887b      	ldrh	r3, [r7, #2]
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a8fa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a8fc:	887b      	ldrh	r3, [r7, #2]
 800a8fe:	f003 0302 	and.w	r3, r3, #2
 800a902:	2b00      	cmp	r3, #0
 800a904:	d003      	beq.n	800a90e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a90c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a90e:	887b      	ldrh	r3, [r7, #2]
 800a910:	2b10      	cmp	r3, #16
 800a912:	d103      	bne.n	800a91c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a91a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a91c:	887b      	ldrh	r3, [r7, #2]
 800a91e:	2b20      	cmp	r3, #32
 800a920:	d133      	bne.n	800a98a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f043 0320 	orr.w	r3, r3, #32
 800a928:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a92a:	e02e      	b.n	800a98a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a92c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a930:	2b00      	cmp	r3, #0
 800a932:	da03      	bge.n	800a93c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a93a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a93c:	887b      	ldrh	r3, [r7, #2]
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a94c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a94e:	887b      	ldrh	r3, [r7, #2]
 800a950:	f003 0302 	and.w	r3, r3, #2
 800a954:	2b00      	cmp	r3, #0
 800a956:	d003      	beq.n	800a960 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a95e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a960:	887b      	ldrh	r3, [r7, #2]
 800a962:	2b10      	cmp	r3, #16
 800a964:	d103      	bne.n	800a96e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a96c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a96e:	887b      	ldrh	r3, [r7, #2]
 800a970:	2b20      	cmp	r3, #32
 800a972:	d103      	bne.n	800a97c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a97a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a97c:	887b      	ldrh	r3, [r7, #2]
 800a97e:	2b40      	cmp	r3, #64	; 0x40
 800a980:	d103      	bne.n	800a98a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a988:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6819      	ldr	r1, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	430a      	orrs	r2, r1
 800a998:	601a      	str	r2, [r3, #0]
}
 800a99a:	bf00      	nop
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	080091e5 	.word	0x080091e5
 800a9ac:	08009609 	.word	0x08009609
 800a9b0:	080093bd 	.word	0x080093bd

0800a9b4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	460b      	mov	r3, r1
 800a9be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a9c4:	887b      	ldrh	r3, [r7, #2]
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00f      	beq.n	800a9ee <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a9d4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a9e2:	2b28      	cmp	r3, #40	; 0x28
 800a9e4:	d003      	beq.n	800a9ee <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a9ec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a9ee:	887b      	ldrh	r3, [r7, #2]
 800a9f0:	f003 0302 	and.w	r3, r3, #2
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00f      	beq.n	800aa18 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a9fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aa0c:	2b28      	cmp	r3, #40	; 0x28
 800aa0e:	d003      	beq.n	800aa18 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800aa16:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800aa18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	da03      	bge.n	800aa28 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800aa26:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800aa28:	887b      	ldrh	r3, [r7, #2]
 800aa2a:	2b10      	cmp	r3, #16
 800aa2c:	d103      	bne.n	800aa36 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800aa34:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800aa36:	887b      	ldrh	r3, [r7, #2]
 800aa38:	2b20      	cmp	r3, #32
 800aa3a:	d103      	bne.n	800aa44 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f043 0320 	orr.w	r3, r3, #32
 800aa42:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800aa44:	887b      	ldrh	r3, [r7, #2]
 800aa46:	2b40      	cmp	r3, #64	; 0x40
 800aa48:	d103      	bne.n	800aa52 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa50:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	6819      	ldr	r1, [r3, #0]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	43da      	mvns	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	400a      	ands	r2, r1
 800aa62:	601a      	str	r2, [r3, #0]
}
 800aa64:	bf00      	nop
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b20      	cmp	r3, #32
 800aa84:	d138      	bne.n	800aaf8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d101      	bne.n	800aa94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aa90:	2302      	movs	r3, #2
 800aa92:	e032      	b.n	800aafa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2224      	movs	r2, #36	; 0x24
 800aaa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f022 0201 	bic.w	r2, r2, #1
 800aab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	6819      	ldr	r1, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	430a      	orrs	r2, r1
 800aad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f042 0201 	orr.w	r2, r2, #1
 800aae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2220      	movs	r2, #32
 800aae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	e000      	b.n	800aafa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aaf8:	2302      	movs	r3, #2
  }
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ab06:	b480      	push	{r7}
 800ab08:	b085      	sub	sp, #20
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2b20      	cmp	r3, #32
 800ab1a:	d139      	bne.n	800ab90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d101      	bne.n	800ab2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ab26:	2302      	movs	r3, #2
 800ab28:	e033      	b.n	800ab92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2224      	movs	r2, #36	; 0x24
 800ab36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f022 0201 	bic.w	r2, r2, #1
 800ab48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ab58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	021b      	lsls	r3, r3, #8
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f042 0201 	orr.w	r2, r2, #1
 800ab7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2220      	movs	r2, #32
 800ab80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	e000      	b.n	800ab92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ab90:	2302      	movs	r3, #2
  }
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b084      	sub	sp, #16
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d101      	bne.n	800abb0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e041      	b.n	800ac34 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800abb8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f245 5255 	movw	r2, #21845	; 0x5555
 800abc2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	6852      	ldr	r2, [r2, #4]
 800abcc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	6892      	ldr	r2, [r2, #8]
 800abd6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800abd8:	f7fa fb26 	bl	8005228 <HAL_GetTick>
 800abdc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800abde:	e00f      	b.n	800ac00 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800abe0:	f7fa fb22 	bl	8005228 <HAL_GetTick>
 800abe4:	4602      	mov	r2, r0
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	2b31      	cmp	r3, #49	; 0x31
 800abec:	d908      	bls.n	800ac00 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	f003 0307 	and.w	r3, r3, #7
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800abfc:	2303      	movs	r3, #3
 800abfe:	e019      	b.n	800ac34 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	f003 0307 	and.w	r3, r3, #7
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1e8      	bne.n	800abe0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	691a      	ldr	r2, [r3, #16]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d005      	beq.n	800ac28 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	68d2      	ldr	r2, [r2, #12]
 800ac24:	611a      	str	r2, [r3, #16]
 800ac26:	e004      	b.n	800ac32 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ac30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e0c0      	b.n	800add0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f7f9 fe0a 	bl	800487c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2203      	movs	r2, #3
 800ac6c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f002 fe29 	bl	800d8cc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	73fb      	strb	r3, [r7, #15]
 800ac7e:	e03e      	b.n	800acfe <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ac80:	7bfa      	ldrb	r2, [r7, #15]
 800ac82:	6879      	ldr	r1, [r7, #4]
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	440b      	add	r3, r1
 800ac8e:	3311      	adds	r3, #17
 800ac90:	2201      	movs	r2, #1
 800ac92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ac94:	7bfa      	ldrb	r2, [r7, #15]
 800ac96:	6879      	ldr	r1, [r7, #4]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4413      	add	r3, r2
 800ac9e:	00db      	lsls	r3, r3, #3
 800aca0:	440b      	add	r3, r1
 800aca2:	3310      	adds	r3, #16
 800aca4:	7bfa      	ldrb	r2, [r7, #15]
 800aca6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800aca8:	7bfa      	ldrb	r2, [r7, #15]
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	4613      	mov	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	00db      	lsls	r3, r3, #3
 800acb4:	440b      	add	r3, r1
 800acb6:	3313      	adds	r3, #19
 800acb8:	2200      	movs	r2, #0
 800acba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800acbc:	7bfa      	ldrb	r2, [r7, #15]
 800acbe:	6879      	ldr	r1, [r7, #4]
 800acc0:	4613      	mov	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4413      	add	r3, r2
 800acc6:	00db      	lsls	r3, r3, #3
 800acc8:	440b      	add	r3, r1
 800acca:	3320      	adds	r3, #32
 800accc:	2200      	movs	r2, #0
 800acce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800acd0:	7bfa      	ldrb	r2, [r7, #15]
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	4613      	mov	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4413      	add	r3, r2
 800acda:	00db      	lsls	r3, r3, #3
 800acdc:	440b      	add	r3, r1
 800acde:	3324      	adds	r3, #36	; 0x24
 800ace0:	2200      	movs	r2, #0
 800ace2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ace4:	7bfb      	ldrb	r3, [r7, #15]
 800ace6:	6879      	ldr	r1, [r7, #4]
 800ace8:	1c5a      	adds	r2, r3, #1
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	00db      	lsls	r3, r3, #3
 800acf2:	440b      	add	r3, r1
 800acf4:	2200      	movs	r2, #0
 800acf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
 800acfa:	3301      	adds	r3, #1
 800acfc:	73fb      	strb	r3, [r7, #15]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	791b      	ldrb	r3, [r3, #4]
 800ad02:	7bfa      	ldrb	r2, [r7, #15]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d3bb      	bcc.n	800ac80 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad08:	2300      	movs	r3, #0
 800ad0a:	73fb      	strb	r3, [r7, #15]
 800ad0c:	e044      	b.n	800ad98 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ad0e:	7bfa      	ldrb	r2, [r7, #15]
 800ad10:	6879      	ldr	r1, [r7, #4]
 800ad12:	4613      	mov	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	00db      	lsls	r3, r3, #3
 800ad1a:	440b      	add	r3, r1
 800ad1c:	f203 1351 	addw	r3, r3, #337	; 0x151
 800ad20:	2200      	movs	r2, #0
 800ad22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ad24:	7bfa      	ldrb	r2, [r7, #15]
 800ad26:	6879      	ldr	r1, [r7, #4]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	440b      	add	r3, r1
 800ad32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad36:	7bfa      	ldrb	r2, [r7, #15]
 800ad38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ad3a:	7bfa      	ldrb	r2, [r7, #15]
 800ad3c:	6879      	ldr	r1, [r7, #4]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4413      	add	r3, r2
 800ad44:	00db      	lsls	r3, r3, #3
 800ad46:	440b      	add	r3, r1
 800ad48:	f203 1353 	addw	r3, r3, #339	; 0x153
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ad50:	7bfa      	ldrb	r2, [r7, #15]
 800ad52:	6879      	ldr	r1, [r7, #4]
 800ad54:	4613      	mov	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4413      	add	r3, r2
 800ad5a:	00db      	lsls	r3, r3, #3
 800ad5c:	440b      	add	r3, r1
 800ad5e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800ad62:	2200      	movs	r2, #0
 800ad64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ad66:	7bfa      	ldrb	r2, [r7, #15]
 800ad68:	6879      	ldr	r1, [r7, #4]
 800ad6a:	4613      	mov	r3, r2
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	4413      	add	r3, r2
 800ad70:	00db      	lsls	r3, r3, #3
 800ad72:	440b      	add	r3, r1
 800ad74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad78:	2200      	movs	r2, #0
 800ad7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ad7c:	7bfa      	ldrb	r2, [r7, #15]
 800ad7e:	6879      	ldr	r1, [r7, #4]
 800ad80:	4613      	mov	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4413      	add	r3, r2
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	440b      	add	r3, r1
 800ad8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ad8e:	2200      	movs	r2, #0
 800ad90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad92:	7bfb      	ldrb	r3, [r7, #15]
 800ad94:	3301      	adds	r3, #1
 800ad96:	73fb      	strb	r3, [r7, #15]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	791b      	ldrb	r3, [r3, #4]
 800ad9c:	7bfa      	ldrb	r2, [r7, #15]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d3b5      	bcc.n	800ad0e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6818      	ldr	r0, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	3304      	adds	r3, #4
 800adaa:	e893 0006 	ldmia.w	r3, {r1, r2}
 800adae:	f002 fda8 	bl	800d902 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	7a9b      	ldrb	r3, [r3, #10]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d102      	bne.n	800adce <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 f805 	bl	800add8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2201      	movs	r2, #1
 800adea:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	f043 0301 	orr.w	r3, r3, #1
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	f043 0302 	orr.w	r3, r3, #2
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d141      	bne.n	800aebe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ae3a:	4b4b      	ldr	r3, [pc, #300]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ae42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae46:	d131      	bne.n	800aeac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ae48:	4b47      	ldr	r3, [pc, #284]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae4e:	4a46      	ldr	r2, [pc, #280]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ae58:	4b43      	ldr	r3, [pc, #268]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ae60:	4a41      	ldr	r2, [pc, #260]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ae68:	4b40      	ldr	r3, [pc, #256]	; (800af6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2232      	movs	r2, #50	; 0x32
 800ae6e:	fb02 f303 	mul.w	r3, r2, r3
 800ae72:	4a3f      	ldr	r2, [pc, #252]	; (800af70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ae74:	fba2 2303 	umull	r2, r3, r2, r3
 800ae78:	0c9b      	lsrs	r3, r3, #18
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ae7e:	e002      	b.n	800ae86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ae86:	4b38      	ldr	r3, [pc, #224]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae92:	d102      	bne.n	800ae9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1f2      	bne.n	800ae80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ae9a:	4b33      	ldr	r3, [pc, #204]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae9c:	695b      	ldr	r3, [r3, #20]
 800ae9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aea6:	d158      	bne.n	800af5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	e057      	b.n	800af5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aeac:	4b2e      	ldr	r3, [pc, #184]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aeae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeb2:	4a2d      	ldr	r2, [pc, #180]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aeb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aeb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800aebc:	e04d      	b.n	800af5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aec4:	d141      	bne.n	800af4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aec6:	4b28      	ldr	r3, [pc, #160]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aed2:	d131      	bne.n	800af38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aed4:	4b24      	ldr	r3, [pc, #144]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeda:	4a23      	ldr	r2, [pc, #140]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aedc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aee0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800aee4:	4b20      	ldr	r3, [pc, #128]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aeec:	4a1e      	ldr	r2, [pc, #120]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aeee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aef2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800aef4:	4b1d      	ldr	r3, [pc, #116]	; (800af6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2232      	movs	r2, #50	; 0x32
 800aefa:	fb02 f303 	mul.w	r3, r2, r3
 800aefe:	4a1c      	ldr	r2, [pc, #112]	; (800af70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800af00:	fba2 2303 	umull	r2, r3, r2, r3
 800af04:	0c9b      	lsrs	r3, r3, #18
 800af06:	3301      	adds	r3, #1
 800af08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af0a:	e002      	b.n	800af12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	3b01      	subs	r3, #1
 800af10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af12:	4b15      	ldr	r3, [pc, #84]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af1e:	d102      	bne.n	800af26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1f2      	bne.n	800af0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800af26:	4b10      	ldr	r3, [pc, #64]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af28:	695b      	ldr	r3, [r3, #20]
 800af2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af32:	d112      	bne.n	800af5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800af34:	2303      	movs	r3, #3
 800af36:	e011      	b.n	800af5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800af38:	4b0b      	ldr	r3, [pc, #44]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af3e:	4a0a      	ldr	r2, [pc, #40]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800af48:	e007      	b.n	800af5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800af4a:	4b07      	ldr	r3, [pc, #28]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800af52:	4a05      	ldr	r2, [pc, #20]	; (800af68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800af58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	40007000 	.word	0x40007000
 800af6c:	20000000 	.word	0x20000000
 800af70:	431bde83 	.word	0x431bde83

0800af74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800af74:	b480      	push	{r7}
 800af76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800af78:	4b05      	ldr	r3, [pc, #20]	; (800af90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	4a04      	ldr	r2, [pc, #16]	; (800af90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800af7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af82:	6093      	str	r3, [r2, #8]
}
 800af84:	bf00      	nop
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	40007000 	.word	0x40007000

0800af94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b088      	sub	sp, #32
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d101      	bne.n	800afa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	e2fe      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d075      	beq.n	800b09e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800afb2:	4b97      	ldr	r3, [pc, #604]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f003 030c 	and.w	r3, r3, #12
 800afba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800afbc:	4b94      	ldr	r3, [pc, #592]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	f003 0303 	and.w	r3, r3, #3
 800afc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	2b0c      	cmp	r3, #12
 800afca:	d102      	bne.n	800afd2 <HAL_RCC_OscConfig+0x3e>
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	2b03      	cmp	r3, #3
 800afd0:	d002      	beq.n	800afd8 <HAL_RCC_OscConfig+0x44>
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	2b08      	cmp	r3, #8
 800afd6:	d10b      	bne.n	800aff0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afd8:	4b8d      	ldr	r3, [pc, #564]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d05b      	beq.n	800b09c <HAL_RCC_OscConfig+0x108>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d157      	bne.n	800b09c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e2d9      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aff8:	d106      	bne.n	800b008 <HAL_RCC_OscConfig+0x74>
 800affa:	4b85      	ldr	r3, [pc, #532]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a84      	ldr	r2, [pc, #528]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b004:	6013      	str	r3, [r2, #0]
 800b006:	e01d      	b.n	800b044 <HAL_RCC_OscConfig+0xb0>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b010:	d10c      	bne.n	800b02c <HAL_RCC_OscConfig+0x98>
 800b012:	4b7f      	ldr	r3, [pc, #508]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a7e      	ldr	r2, [pc, #504]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b01c:	6013      	str	r3, [r2, #0]
 800b01e:	4b7c      	ldr	r3, [pc, #496]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a7b      	ldr	r2, [pc, #492]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b028:	6013      	str	r3, [r2, #0]
 800b02a:	e00b      	b.n	800b044 <HAL_RCC_OscConfig+0xb0>
 800b02c:	4b78      	ldr	r3, [pc, #480]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a77      	ldr	r2, [pc, #476]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b036:	6013      	str	r3, [r2, #0]
 800b038:	4b75      	ldr	r3, [pc, #468]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a74      	ldr	r2, [pc, #464]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b03e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d013      	beq.n	800b074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b04c:	f7fa f8ec 	bl	8005228 <HAL_GetTick>
 800b050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b052:	e008      	b.n	800b066 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b054:	f7fa f8e8 	bl	8005228 <HAL_GetTick>
 800b058:	4602      	mov	r2, r0
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	1ad3      	subs	r3, r2, r3
 800b05e:	2b64      	cmp	r3, #100	; 0x64
 800b060:	d901      	bls.n	800b066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b062:	2303      	movs	r3, #3
 800b064:	e29e      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b066:	4b6a      	ldr	r3, [pc, #424]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d0f0      	beq.n	800b054 <HAL_RCC_OscConfig+0xc0>
 800b072:	e014      	b.n	800b09e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b074:	f7fa f8d8 	bl	8005228 <HAL_GetTick>
 800b078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b07a:	e008      	b.n	800b08e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b07c:	f7fa f8d4 	bl	8005228 <HAL_GetTick>
 800b080:	4602      	mov	r2, r0
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	1ad3      	subs	r3, r2, r3
 800b086:	2b64      	cmp	r3, #100	; 0x64
 800b088:	d901      	bls.n	800b08e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b08a:	2303      	movs	r3, #3
 800b08c:	e28a      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b08e:	4b60      	ldr	r3, [pc, #384]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1f0      	bne.n	800b07c <HAL_RCC_OscConfig+0xe8>
 800b09a:	e000      	b.n	800b09e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b09c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d075      	beq.n	800b196 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0aa:	4b59      	ldr	r3, [pc, #356]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	f003 030c 	and.w	r3, r3, #12
 800b0b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b0b4:	4b56      	ldr	r3, [pc, #344]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	f003 0303 	and.w	r3, r3, #3
 800b0bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	2b0c      	cmp	r3, #12
 800b0c2:	d102      	bne.n	800b0ca <HAL_RCC_OscConfig+0x136>
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d002      	beq.n	800b0d0 <HAL_RCC_OscConfig+0x13c>
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	2b04      	cmp	r3, #4
 800b0ce:	d11f      	bne.n	800b110 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b0d0:	4b4f      	ldr	r3, [pc, #316]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d005      	beq.n	800b0e8 <HAL_RCC_OscConfig+0x154>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d101      	bne.n	800b0e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e25d      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0e8:	4b49      	ldr	r3, [pc, #292]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	061b      	lsls	r3, r3, #24
 800b0f6:	4946      	ldr	r1, [pc, #280]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b0fc:	4b45      	ldr	r3, [pc, #276]	; (800b214 <HAL_RCC_OscConfig+0x280>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4618      	mov	r0, r3
 800b102:	f7fa f845 	bl	8005190 <HAL_InitTick>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d043      	beq.n	800b194 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e249      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d023      	beq.n	800b160 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b118:	4b3d      	ldr	r3, [pc, #244]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a3c      	ldr	r2, [pc, #240]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b11e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b124:	f7fa f880 	bl	8005228 <HAL_GetTick>
 800b128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b12a:	e008      	b.n	800b13e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b12c:	f7fa f87c 	bl	8005228 <HAL_GetTick>
 800b130:	4602      	mov	r2, r0
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	2b02      	cmp	r3, #2
 800b138:	d901      	bls.n	800b13e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b13a:	2303      	movs	r3, #3
 800b13c:	e232      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b13e:	4b34      	ldr	r3, [pc, #208]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b146:	2b00      	cmp	r3, #0
 800b148:	d0f0      	beq.n	800b12c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b14a:	4b31      	ldr	r3, [pc, #196]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	061b      	lsls	r3, r3, #24
 800b158:	492d      	ldr	r1, [pc, #180]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b15a:	4313      	orrs	r3, r2
 800b15c:	604b      	str	r3, [r1, #4]
 800b15e:	e01a      	b.n	800b196 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b160:	4b2b      	ldr	r3, [pc, #172]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a2a      	ldr	r2, [pc, #168]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b16a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b16c:	f7fa f85c 	bl	8005228 <HAL_GetTick>
 800b170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b172:	e008      	b.n	800b186 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b174:	f7fa f858 	bl	8005228 <HAL_GetTick>
 800b178:	4602      	mov	r2, r0
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d901      	bls.n	800b186 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b182:	2303      	movs	r3, #3
 800b184:	e20e      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b186:	4b22      	ldr	r3, [pc, #136]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1f0      	bne.n	800b174 <HAL_RCC_OscConfig+0x1e0>
 800b192:	e000      	b.n	800b196 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b194:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f003 0308 	and.w	r3, r3, #8
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d041      	beq.n	800b226 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	695b      	ldr	r3, [r3, #20]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d01c      	beq.n	800b1e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b1aa:	4b19      	ldr	r3, [pc, #100]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b1ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1b0:	4a17      	ldr	r2, [pc, #92]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b1b2:	f043 0301 	orr.w	r3, r3, #1
 800b1b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1ba:	f7fa f835 	bl	8005228 <HAL_GetTick>
 800b1be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b1c0:	e008      	b.n	800b1d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1c2:	f7fa f831 	bl	8005228 <HAL_GetTick>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	d901      	bls.n	800b1d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	e1e7      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b1d4:	4b0e      	ldr	r3, [pc, #56]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b1d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1da:	f003 0302 	and.w	r3, r3, #2
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d0ef      	beq.n	800b1c2 <HAL_RCC_OscConfig+0x22e>
 800b1e2:	e020      	b.n	800b226 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b1e4:	4b0a      	ldr	r3, [pc, #40]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b1e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1ea:	4a09      	ldr	r2, [pc, #36]	; (800b210 <HAL_RCC_OscConfig+0x27c>)
 800b1ec:	f023 0301 	bic.w	r3, r3, #1
 800b1f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1f4:	f7fa f818 	bl	8005228 <HAL_GetTick>
 800b1f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b1fa:	e00d      	b.n	800b218 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1fc:	f7fa f814 	bl	8005228 <HAL_GetTick>
 800b200:	4602      	mov	r2, r0
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	1ad3      	subs	r3, r2, r3
 800b206:	2b02      	cmp	r3, #2
 800b208:	d906      	bls.n	800b218 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b20a:	2303      	movs	r3, #3
 800b20c:	e1ca      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
 800b20e:	bf00      	nop
 800b210:	40021000 	.word	0x40021000
 800b214:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b218:	4b8c      	ldr	r3, [pc, #560]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b21a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b21e:	f003 0302 	and.w	r3, r3, #2
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1ea      	bne.n	800b1fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 0304 	and.w	r3, r3, #4
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f000 80a6 	beq.w	800b380 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b234:	2300      	movs	r3, #0
 800b236:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b238:	4b84      	ldr	r3, [pc, #528]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b23a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b23c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d101      	bne.n	800b248 <HAL_RCC_OscConfig+0x2b4>
 800b244:	2301      	movs	r3, #1
 800b246:	e000      	b.n	800b24a <HAL_RCC_OscConfig+0x2b6>
 800b248:	2300      	movs	r3, #0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00d      	beq.n	800b26a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b24e:	4b7f      	ldr	r3, [pc, #508]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b252:	4a7e      	ldr	r2, [pc, #504]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b258:	6593      	str	r3, [r2, #88]	; 0x58
 800b25a:	4b7c      	ldr	r3, [pc, #496]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b25c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b25e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b262:	60fb      	str	r3, [r7, #12]
 800b264:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b266:	2301      	movs	r3, #1
 800b268:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b26a:	4b79      	ldr	r3, [pc, #484]	; (800b450 <HAL_RCC_OscConfig+0x4bc>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b272:	2b00      	cmp	r3, #0
 800b274:	d118      	bne.n	800b2a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b276:	4b76      	ldr	r3, [pc, #472]	; (800b450 <HAL_RCC_OscConfig+0x4bc>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a75      	ldr	r2, [pc, #468]	; (800b450 <HAL_RCC_OscConfig+0x4bc>)
 800b27c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b282:	f7f9 ffd1 	bl	8005228 <HAL_GetTick>
 800b286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b288:	e008      	b.n	800b29c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b28a:	f7f9 ffcd 	bl	8005228 <HAL_GetTick>
 800b28e:	4602      	mov	r2, r0
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	2b02      	cmp	r3, #2
 800b296:	d901      	bls.n	800b29c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b298:	2303      	movs	r3, #3
 800b29a:	e183      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b29c:	4b6c      	ldr	r3, [pc, #432]	; (800b450 <HAL_RCC_OscConfig+0x4bc>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d0f0      	beq.n	800b28a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d108      	bne.n	800b2c2 <HAL_RCC_OscConfig+0x32e>
 800b2b0:	4b66      	ldr	r3, [pc, #408]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2b6:	4a65      	ldr	r2, [pc, #404]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b2b8:	f043 0301 	orr.w	r3, r3, #1
 800b2bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b2c0:	e024      	b.n	800b30c <HAL_RCC_OscConfig+0x378>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	2b05      	cmp	r3, #5
 800b2c8:	d110      	bne.n	800b2ec <HAL_RCC_OscConfig+0x358>
 800b2ca:	4b60      	ldr	r3, [pc, #384]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b2cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2d0:	4a5e      	ldr	r2, [pc, #376]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b2d2:	f043 0304 	orr.w	r3, r3, #4
 800b2d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b2da:	4b5c      	ldr	r3, [pc, #368]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b2dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2e0:	4a5a      	ldr	r2, [pc, #360]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b2e2:	f043 0301 	orr.w	r3, r3, #1
 800b2e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b2ea:	e00f      	b.n	800b30c <HAL_RCC_OscConfig+0x378>
 800b2ec:	4b57      	ldr	r3, [pc, #348]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2f2:	4a56      	ldr	r2, [pc, #344]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b2f4:	f023 0301 	bic.w	r3, r3, #1
 800b2f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b2fc:	4b53      	ldr	r3, [pc, #332]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b302:	4a52      	ldr	r2, [pc, #328]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b304:	f023 0304 	bic.w	r3, r3, #4
 800b308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d016      	beq.n	800b342 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b314:	f7f9 ff88 	bl	8005228 <HAL_GetTick>
 800b318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b31a:	e00a      	b.n	800b332 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b31c:	f7f9 ff84 	bl	8005228 <HAL_GetTick>
 800b320:	4602      	mov	r2, r0
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	f241 3288 	movw	r2, #5000	; 0x1388
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d901      	bls.n	800b332 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b32e:	2303      	movs	r3, #3
 800b330:	e138      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b332:	4b46      	ldr	r3, [pc, #280]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b338:	f003 0302 	and.w	r3, r3, #2
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d0ed      	beq.n	800b31c <HAL_RCC_OscConfig+0x388>
 800b340:	e015      	b.n	800b36e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b342:	f7f9 ff71 	bl	8005228 <HAL_GetTick>
 800b346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b348:	e00a      	b.n	800b360 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b34a:	f7f9 ff6d 	bl	8005228 <HAL_GetTick>
 800b34e:	4602      	mov	r2, r0
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	f241 3288 	movw	r2, #5000	; 0x1388
 800b358:	4293      	cmp	r3, r2
 800b35a:	d901      	bls.n	800b360 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b35c:	2303      	movs	r3, #3
 800b35e:	e121      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b360:	4b3a      	ldr	r3, [pc, #232]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b366:	f003 0302 	and.w	r3, r3, #2
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1ed      	bne.n	800b34a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b36e:	7ffb      	ldrb	r3, [r7, #31]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d105      	bne.n	800b380 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b374:	4b35      	ldr	r3, [pc, #212]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b378:	4a34      	ldr	r2, [pc, #208]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b37a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b37e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 0320 	and.w	r3, r3, #32
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d03c      	beq.n	800b406 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	699b      	ldr	r3, [r3, #24]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d01c      	beq.n	800b3ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b394:	4b2d      	ldr	r3, [pc, #180]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b396:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b39a:	4a2c      	ldr	r2, [pc, #176]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b39c:	f043 0301 	orr.w	r3, r3, #1
 800b3a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3a4:	f7f9 ff40 	bl	8005228 <HAL_GetTick>
 800b3a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b3aa:	e008      	b.n	800b3be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b3ac:	f7f9 ff3c 	bl	8005228 <HAL_GetTick>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	d901      	bls.n	800b3be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	e0f2      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b3be:	4b23      	ldr	r3, [pc, #140]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b3c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3c4:	f003 0302 	and.w	r3, r3, #2
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d0ef      	beq.n	800b3ac <HAL_RCC_OscConfig+0x418>
 800b3cc:	e01b      	b.n	800b406 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b3ce:	4b1f      	ldr	r3, [pc, #124]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b3d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3d4:	4a1d      	ldr	r2, [pc, #116]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b3d6:	f023 0301 	bic.w	r3, r3, #1
 800b3da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3de:	f7f9 ff23 	bl	8005228 <HAL_GetTick>
 800b3e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b3e4:	e008      	b.n	800b3f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b3e6:	f7f9 ff1f 	bl	8005228 <HAL_GetTick>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	1ad3      	subs	r3, r2, r3
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d901      	bls.n	800b3f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e0d5      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b3f8:	4b14      	ldr	r3, [pc, #80]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b3fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3fe:	f003 0302 	and.w	r3, r3, #2
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1ef      	bne.n	800b3e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	69db      	ldr	r3, [r3, #28]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f000 80c9 	beq.w	800b5a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b410:	4b0e      	ldr	r3, [pc, #56]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	f003 030c 	and.w	r3, r3, #12
 800b418:	2b0c      	cmp	r3, #12
 800b41a:	f000 8083 	beq.w	800b524 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	69db      	ldr	r3, [r3, #28]
 800b422:	2b02      	cmp	r3, #2
 800b424:	d15e      	bne.n	800b4e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b426:	4b09      	ldr	r3, [pc, #36]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a08      	ldr	r2, [pc, #32]	; (800b44c <HAL_RCC_OscConfig+0x4b8>)
 800b42c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b432:	f7f9 fef9 	bl	8005228 <HAL_GetTick>
 800b436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b438:	e00c      	b.n	800b454 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b43a:	f7f9 fef5 	bl	8005228 <HAL_GetTick>
 800b43e:	4602      	mov	r2, r0
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	2b02      	cmp	r3, #2
 800b446:	d905      	bls.n	800b454 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b448:	2303      	movs	r3, #3
 800b44a:	e0ab      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
 800b44c:	40021000 	.word	0x40021000
 800b450:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b454:	4b55      	ldr	r3, [pc, #340]	; (800b5ac <HAL_RCC_OscConfig+0x618>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1ec      	bne.n	800b43a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b460:	4b52      	ldr	r3, [pc, #328]	; (800b5ac <HAL_RCC_OscConfig+0x618>)
 800b462:	68da      	ldr	r2, [r3, #12]
 800b464:	4b52      	ldr	r3, [pc, #328]	; (800b5b0 <HAL_RCC_OscConfig+0x61c>)
 800b466:	4013      	ands	r3, r2
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	6a11      	ldr	r1, [r2, #32]
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b470:	3a01      	subs	r2, #1
 800b472:	0112      	lsls	r2, r2, #4
 800b474:	4311      	orrs	r1, r2
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b47a:	0212      	lsls	r2, r2, #8
 800b47c:	4311      	orrs	r1, r2
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b482:	0852      	lsrs	r2, r2, #1
 800b484:	3a01      	subs	r2, #1
 800b486:	0552      	lsls	r2, r2, #21
 800b488:	4311      	orrs	r1, r2
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b48e:	0852      	lsrs	r2, r2, #1
 800b490:	3a01      	subs	r2, #1
 800b492:	0652      	lsls	r2, r2, #25
 800b494:	4311      	orrs	r1, r2
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b49a:	06d2      	lsls	r2, r2, #27
 800b49c:	430a      	orrs	r2, r1
 800b49e:	4943      	ldr	r1, [pc, #268]	; (800b5ac <HAL_RCC_OscConfig+0x618>)
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b4a4:	4b41      	ldr	r3, [pc, #260]	; (800b5ac <HAL_RCC_OscConfig+0x618>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a40      	ldr	r2, [pc, #256]	; (800b5ac <HAL_RCC_OscConfig+0x618>)
 800b4aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b4b0:	4b3e      	ldr	r3, [pc, #248]	; (800b5ac <HAL_RCC_OscConfig+0x618>)
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	4a3d      	ldr	r2, [pc, #244]	; (800b5ac <HAL_RCC_OscConfig+0x618>)
 800b4b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4bc:	f7f9 feb4 	bl	8005228 <HAL_GetTick>
 800b4c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4c2:	e008      	b.n	800b4d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4c4:	f7f9 feb0 	bl	8005228 <HAL_GetTick>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d901      	bls.n	800b4d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	e066      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4d6:	4b35      	ldr	r3, [pc, #212]	; (800b5ac <HAL_RCC_OscConfig+0x618>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d0f0      	beq.n	800b4c4 <HAL_RCC_OscConfig+0x530>
 800b4e2:	e05e      	b.n	800b5a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4e4:	4b31      	ldr	r3, [pc, #196]	; (800b5ac <HAL_RCC_OscConfig+0x618>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a30      	ldr	r2, [pc, #192]	; (800b5ac <HAL_RCC_OscConfig+0x618>)
 800b4ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b4ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4f0:	f7f9 fe9a 	bl	8005228 <HAL_GetTick>
 800b4f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b4f6:	e008      	b.n	800b50a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4f8:	f7f9 fe96 	bl	8005228 <HAL_GetTick>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	2b02      	cmp	r3, #2
 800b504:	d901      	bls.n	800b50a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800b506:	2303      	movs	r3, #3
 800b508:	e04c      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b50a:	4b28      	ldr	r3, [pc, #160]	; (800b5ac <HAL_RCC_OscConfig+0x618>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1f0      	bne.n	800b4f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b516:	4b25      	ldr	r3, [pc, #148]	; (800b5ac <HAL_RCC_OscConfig+0x618>)
 800b518:	68da      	ldr	r2, [r3, #12]
 800b51a:	4924      	ldr	r1, [pc, #144]	; (800b5ac <HAL_RCC_OscConfig+0x618>)
 800b51c:	4b25      	ldr	r3, [pc, #148]	; (800b5b4 <HAL_RCC_OscConfig+0x620>)
 800b51e:	4013      	ands	r3, r2
 800b520:	60cb      	str	r3, [r1, #12]
 800b522:	e03e      	b.n	800b5a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	69db      	ldr	r3, [r3, #28]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d101      	bne.n	800b530 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e039      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b530:	4b1e      	ldr	r3, [pc, #120]	; (800b5ac <HAL_RCC_OscConfig+0x618>)
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	f003 0203 	and.w	r2, r3, #3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a1b      	ldr	r3, [r3, #32]
 800b540:	429a      	cmp	r2, r3
 800b542:	d12c      	bne.n	800b59e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54e:	3b01      	subs	r3, #1
 800b550:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b552:	429a      	cmp	r2, r3
 800b554:	d123      	bne.n	800b59e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b560:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b562:	429a      	cmp	r2, r3
 800b564:	d11b      	bne.n	800b59e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b570:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b572:	429a      	cmp	r2, r3
 800b574:	d113      	bne.n	800b59e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b580:	085b      	lsrs	r3, r3, #1
 800b582:	3b01      	subs	r3, #1
 800b584:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b586:	429a      	cmp	r2, r3
 800b588:	d109      	bne.n	800b59e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b594:	085b      	lsrs	r3, r3, #1
 800b596:	3b01      	subs	r3, #1
 800b598:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d001      	beq.n	800b5a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e000      	b.n	800b5a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3720      	adds	r7, #32
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	40021000 	.word	0x40021000
 800b5b0:	019f800c 	.word	0x019f800c
 800b5b4:	feeefffc 	.word	0xfeeefffc

0800b5b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b086      	sub	sp, #24
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d101      	bne.n	800b5d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e11e      	b.n	800b80e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b5d0:	4b91      	ldr	r3, [pc, #580]	; (800b818 <HAL_RCC_ClockConfig+0x260>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 030f 	and.w	r3, r3, #15
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d910      	bls.n	800b600 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5de:	4b8e      	ldr	r3, [pc, #568]	; (800b818 <HAL_RCC_ClockConfig+0x260>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f023 020f 	bic.w	r2, r3, #15
 800b5e6:	498c      	ldr	r1, [pc, #560]	; (800b818 <HAL_RCC_ClockConfig+0x260>)
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5ee:	4b8a      	ldr	r3, [pc, #552]	; (800b818 <HAL_RCC_ClockConfig+0x260>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f003 030f 	and.w	r3, r3, #15
 800b5f6:	683a      	ldr	r2, [r7, #0]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d001      	beq.n	800b600 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e106      	b.n	800b80e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f003 0301 	and.w	r3, r3, #1
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d073      	beq.n	800b6f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	2b03      	cmp	r3, #3
 800b612:	d129      	bne.n	800b668 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b614:	4b81      	ldr	r3, [pc, #516]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d101      	bne.n	800b624 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	e0f4      	b.n	800b80e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b624:	f000 f9ca 	bl	800b9bc <RCC_GetSysClockFreqFromPLLSource>
 800b628:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	4a7c      	ldr	r2, [pc, #496]	; (800b820 <HAL_RCC_ClockConfig+0x268>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d93f      	bls.n	800b6b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b632:	4b7a      	ldr	r3, [pc, #488]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d009      	beq.n	800b652 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b646:	2b00      	cmp	r3, #0
 800b648:	d033      	beq.n	800b6b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d12f      	bne.n	800b6b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b652:	4b72      	ldr	r3, [pc, #456]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b65a:	4a70      	ldr	r2, [pc, #448]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b65c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b660:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b662:	2380      	movs	r3, #128	; 0x80
 800b664:	617b      	str	r3, [r7, #20]
 800b666:	e024      	b.n	800b6b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	d107      	bne.n	800b680 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b670:	4b6a      	ldr	r3, [pc, #424]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d109      	bne.n	800b690 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b67c:	2301      	movs	r3, #1
 800b67e:	e0c6      	b.n	800b80e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b680:	4b66      	ldr	r3, [pc, #408]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d101      	bne.n	800b690 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	e0be      	b.n	800b80e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b690:	f000 f8ce 	bl	800b830 <HAL_RCC_GetSysClockFreq>
 800b694:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	4a61      	ldr	r2, [pc, #388]	; (800b820 <HAL_RCC_ClockConfig+0x268>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d909      	bls.n	800b6b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b69e:	4b5f      	ldr	r3, [pc, #380]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6a6:	4a5d      	ldr	r2, [pc, #372]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b6a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b6ae:	2380      	movs	r3, #128	; 0x80
 800b6b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b6b2:	4b5a      	ldr	r3, [pc, #360]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	f023 0203 	bic.w	r2, r3, #3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	4957      	ldr	r1, [pc, #348]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6c4:	f7f9 fdb0 	bl	8005228 <HAL_GetTick>
 800b6c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6ca:	e00a      	b.n	800b6e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6cc:	f7f9 fdac 	bl	8005228 <HAL_GetTick>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d901      	bls.n	800b6e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e095      	b.n	800b80e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6e2:	4b4e      	ldr	r3, [pc, #312]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	f003 020c 	and.w	r2, r3, #12
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d1eb      	bne.n	800b6cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 0302 	and.w	r3, r3, #2
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d023      	beq.n	800b748 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 0304 	and.w	r3, r3, #4
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d005      	beq.n	800b718 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b70c:	4b43      	ldr	r3, [pc, #268]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	4a42      	ldr	r2, [pc, #264]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b712:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b716:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 0308 	and.w	r3, r3, #8
 800b720:	2b00      	cmp	r3, #0
 800b722:	d007      	beq.n	800b734 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b724:	4b3d      	ldr	r3, [pc, #244]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b72c:	4a3b      	ldr	r2, [pc, #236]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b72e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b732:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b734:	4b39      	ldr	r3, [pc, #228]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	4936      	ldr	r1, [pc, #216]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b742:	4313      	orrs	r3, r2
 800b744:	608b      	str	r3, [r1, #8]
 800b746:	e008      	b.n	800b75a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	2b80      	cmp	r3, #128	; 0x80
 800b74c:	d105      	bne.n	800b75a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b74e:	4b33      	ldr	r3, [pc, #204]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	4a32      	ldr	r2, [pc, #200]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b754:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b758:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b75a:	4b2f      	ldr	r3, [pc, #188]	; (800b818 <HAL_RCC_ClockConfig+0x260>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 030f 	and.w	r3, r3, #15
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	429a      	cmp	r2, r3
 800b766:	d21d      	bcs.n	800b7a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b768:	4b2b      	ldr	r3, [pc, #172]	; (800b818 <HAL_RCC_ClockConfig+0x260>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f023 020f 	bic.w	r2, r3, #15
 800b770:	4929      	ldr	r1, [pc, #164]	; (800b818 <HAL_RCC_ClockConfig+0x260>)
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	4313      	orrs	r3, r2
 800b776:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b778:	f7f9 fd56 	bl	8005228 <HAL_GetTick>
 800b77c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b77e:	e00a      	b.n	800b796 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b780:	f7f9 fd52 	bl	8005228 <HAL_GetTick>
 800b784:	4602      	mov	r2, r0
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b78e:	4293      	cmp	r3, r2
 800b790:	d901      	bls.n	800b796 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b792:	2303      	movs	r3, #3
 800b794:	e03b      	b.n	800b80e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b796:	4b20      	ldr	r3, [pc, #128]	; (800b818 <HAL_RCC_ClockConfig+0x260>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f003 030f 	and.w	r3, r3, #15
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d1ed      	bne.n	800b780 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f003 0304 	and.w	r3, r3, #4
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d008      	beq.n	800b7c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b7b0:	4b1a      	ldr	r3, [pc, #104]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	4917      	ldr	r1, [pc, #92]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f003 0308 	and.w	r3, r3, #8
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d009      	beq.n	800b7e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b7ce:	4b13      	ldr	r3, [pc, #76]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	490f      	ldr	r1, [pc, #60]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b7e2:	f000 f825 	bl	800b830 <HAL_RCC_GetSysClockFreq>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	4b0c      	ldr	r3, [pc, #48]	; (800b81c <HAL_RCC_ClockConfig+0x264>)
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	091b      	lsrs	r3, r3, #4
 800b7ee:	f003 030f 	and.w	r3, r3, #15
 800b7f2:	490c      	ldr	r1, [pc, #48]	; (800b824 <HAL_RCC_ClockConfig+0x26c>)
 800b7f4:	5ccb      	ldrb	r3, [r1, r3]
 800b7f6:	f003 031f 	and.w	r3, r3, #31
 800b7fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b7fe:	4a0a      	ldr	r2, [pc, #40]	; (800b828 <HAL_RCC_ClockConfig+0x270>)
 800b800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b802:	4b0a      	ldr	r3, [pc, #40]	; (800b82c <HAL_RCC_ClockConfig+0x274>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4618      	mov	r0, r3
 800b808:	f7f9 fcc2 	bl	8005190 <HAL_InitTick>
 800b80c:	4603      	mov	r3, r0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3718      	adds	r7, #24
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	40022000 	.word	0x40022000
 800b81c:	40021000 	.word	0x40021000
 800b820:	04c4b400 	.word	0x04c4b400
 800b824:	0800e91c 	.word	0x0800e91c
 800b828:	20000000 	.word	0x20000000
 800b82c:	20000004 	.word	0x20000004

0800b830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b830:	b480      	push	{r7}
 800b832:	b087      	sub	sp, #28
 800b834:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b836:	4b2c      	ldr	r3, [pc, #176]	; (800b8e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	f003 030c 	and.w	r3, r3, #12
 800b83e:	2b04      	cmp	r3, #4
 800b840:	d102      	bne.n	800b848 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b842:	4b2a      	ldr	r3, [pc, #168]	; (800b8ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800b844:	613b      	str	r3, [r7, #16]
 800b846:	e047      	b.n	800b8d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b848:	4b27      	ldr	r3, [pc, #156]	; (800b8e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	f003 030c 	and.w	r3, r3, #12
 800b850:	2b08      	cmp	r3, #8
 800b852:	d102      	bne.n	800b85a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b854:	4b26      	ldr	r3, [pc, #152]	; (800b8f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b856:	613b      	str	r3, [r7, #16]
 800b858:	e03e      	b.n	800b8d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b85a:	4b23      	ldr	r3, [pc, #140]	; (800b8e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	f003 030c 	and.w	r3, r3, #12
 800b862:	2b0c      	cmp	r3, #12
 800b864:	d136      	bne.n	800b8d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b866:	4b20      	ldr	r3, [pc, #128]	; (800b8e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	f003 0303 	and.w	r3, r3, #3
 800b86e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b870:	4b1d      	ldr	r3, [pc, #116]	; (800b8e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	091b      	lsrs	r3, r3, #4
 800b876:	f003 030f 	and.w	r3, r3, #15
 800b87a:	3301      	adds	r3, #1
 800b87c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2b03      	cmp	r3, #3
 800b882:	d10c      	bne.n	800b89e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b884:	4a1a      	ldr	r2, [pc, #104]	; (800b8f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	fbb2 f3f3 	udiv	r3, r2, r3
 800b88c:	4a16      	ldr	r2, [pc, #88]	; (800b8e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b88e:	68d2      	ldr	r2, [r2, #12]
 800b890:	0a12      	lsrs	r2, r2, #8
 800b892:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b896:	fb02 f303 	mul.w	r3, r2, r3
 800b89a:	617b      	str	r3, [r7, #20]
      break;
 800b89c:	e00c      	b.n	800b8b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b89e:	4a13      	ldr	r2, [pc, #76]	; (800b8ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a6:	4a10      	ldr	r2, [pc, #64]	; (800b8e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8a8:	68d2      	ldr	r2, [r2, #12]
 800b8aa:	0a12      	lsrs	r2, r2, #8
 800b8ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b8b0:	fb02 f303 	mul.w	r3, r2, r3
 800b8b4:	617b      	str	r3, [r7, #20]
      break;
 800b8b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b8b8:	4b0b      	ldr	r3, [pc, #44]	; (800b8e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	0e5b      	lsrs	r3, r3, #25
 800b8be:	f003 0303 	and.w	r3, r3, #3
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	005b      	lsls	r3, r3, #1
 800b8c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d0:	613b      	str	r3, [r7, #16]
 800b8d2:	e001      	b.n	800b8d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b8d8:	693b      	ldr	r3, [r7, #16]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	371c      	adds	r7, #28
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	40021000 	.word	0x40021000
 800b8ec:	00f42400 	.word	0x00f42400
 800b8f0:	007a1200 	.word	0x007a1200

0800b8f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8f8:	4b03      	ldr	r3, [pc, #12]	; (800b908 <HAL_RCC_GetHCLKFreq+0x14>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	20000000 	.word	0x20000000

0800b90c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b910:	f7ff fff0 	bl	800b8f4 <HAL_RCC_GetHCLKFreq>
 800b914:	4602      	mov	r2, r0
 800b916:	4b06      	ldr	r3, [pc, #24]	; (800b930 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	0a1b      	lsrs	r3, r3, #8
 800b91c:	f003 0307 	and.w	r3, r3, #7
 800b920:	4904      	ldr	r1, [pc, #16]	; (800b934 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b922:	5ccb      	ldrb	r3, [r1, r3]
 800b924:	f003 031f 	and.w	r3, r3, #31
 800b928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	40021000 	.word	0x40021000
 800b934:	0800e92c 	.word	0x0800e92c

0800b938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b93c:	f7ff ffda 	bl	800b8f4 <HAL_RCC_GetHCLKFreq>
 800b940:	4602      	mov	r2, r0
 800b942:	4b06      	ldr	r3, [pc, #24]	; (800b95c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	0adb      	lsrs	r3, r3, #11
 800b948:	f003 0307 	and.w	r3, r3, #7
 800b94c:	4904      	ldr	r1, [pc, #16]	; (800b960 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b94e:	5ccb      	ldrb	r3, [r1, r3]
 800b950:	f003 031f 	and.w	r3, r3, #31
 800b954:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b958:	4618      	mov	r0, r3
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	40021000 	.word	0x40021000
 800b960:	0800e92c 	.word	0x0800e92c

0800b964 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800b964:	b480      	push	{r7}
 800b966:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800b968:	4b05      	ldr	r3, [pc, #20]	; (800b980 <HAL_RCC_EnableCSS+0x1c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a04      	ldr	r2, [pc, #16]	; (800b980 <HAL_RCC_EnableCSS+0x1c>)
 800b96e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b972:	6013      	str	r3, [r2, #0]
}
 800b974:	bf00      	nop
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	40021000 	.word	0x40021000

0800b984 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800b988:	4b07      	ldr	r3, [pc, #28]	; (800b9a8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800b98a:	69db      	ldr	r3, [r3, #28]
 800b98c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b994:	d105      	bne.n	800b9a2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800b996:	f000 f809 	bl	800b9ac <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800b99a:	4b03      	ldr	r3, [pc, #12]	; (800b9a8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800b99c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9a0:	621a      	str	r2, [r3, #32]
  }
}
 800b9a2:	bf00      	nop
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	40021000 	.word	0x40021000

0800b9ac <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800b9b0:	bf00      	nop
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
	...

0800b9bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b087      	sub	sp, #28
 800b9c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b9c2:	4b1e      	ldr	r3, [pc, #120]	; (800ba3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	f003 0303 	and.w	r3, r3, #3
 800b9ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b9cc:	4b1b      	ldr	r3, [pc, #108]	; (800ba3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	091b      	lsrs	r3, r3, #4
 800b9d2:	f003 030f 	and.w	r3, r3, #15
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	d10c      	bne.n	800b9fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b9e0:	4a17      	ldr	r2, [pc, #92]	; (800ba40 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9e8:	4a14      	ldr	r2, [pc, #80]	; (800ba3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b9ea:	68d2      	ldr	r2, [r2, #12]
 800b9ec:	0a12      	lsrs	r2, r2, #8
 800b9ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b9f2:	fb02 f303 	mul.w	r3, r2, r3
 800b9f6:	617b      	str	r3, [r7, #20]
    break;
 800b9f8:	e00c      	b.n	800ba14 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b9fa:	4a12      	ldr	r2, [pc, #72]	; (800ba44 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba02:	4a0e      	ldr	r2, [pc, #56]	; (800ba3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba04:	68d2      	ldr	r2, [r2, #12]
 800ba06:	0a12      	lsrs	r2, r2, #8
 800ba08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ba0c:	fb02 f303 	mul.w	r3, r2, r3
 800ba10:	617b      	str	r3, [r7, #20]
    break;
 800ba12:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ba14:	4b09      	ldr	r3, [pc, #36]	; (800ba3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	0e5b      	lsrs	r3, r3, #25
 800ba1a:	f003 0303 	and.w	r3, r3, #3
 800ba1e:	3301      	adds	r3, #1
 800ba20:	005b      	lsls	r3, r3, #1
 800ba22:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba2c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800ba2e:	687b      	ldr	r3, [r7, #4]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	371c      	adds	r7, #28
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr
 800ba3c:	40021000 	.word	0x40021000
 800ba40:	007a1200 	.word	0x007a1200
 800ba44:	00f42400 	.word	0x00f42400

0800ba48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b086      	sub	sp, #24
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ba50:	2300      	movs	r3, #0
 800ba52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ba54:	2300      	movs	r3, #0
 800ba56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 8098 	beq.w	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba66:	2300      	movs	r3, #0
 800ba68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba6a:	4b43      	ldr	r3, [pc, #268]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10d      	bne.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba76:	4b40      	ldr	r3, [pc, #256]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba7a:	4a3f      	ldr	r2, [pc, #252]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba80:	6593      	str	r3, [r2, #88]	; 0x58
 800ba82:	4b3d      	ldr	r3, [pc, #244]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba8a:	60bb      	str	r3, [r7, #8]
 800ba8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba92:	4b3a      	ldr	r3, [pc, #232]	; (800bb7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a39      	ldr	r2, [pc, #228]	; (800bb7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba9e:	f7f9 fbc3 	bl	8005228 <HAL_GetTick>
 800baa2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800baa4:	e009      	b.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800baa6:	f7f9 fbbf 	bl	8005228 <HAL_GetTick>
 800baaa:	4602      	mov	r2, r0
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	1ad3      	subs	r3, r2, r3
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	d902      	bls.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bab4:	2303      	movs	r3, #3
 800bab6:	74fb      	strb	r3, [r7, #19]
        break;
 800bab8:	e005      	b.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800baba:	4b30      	ldr	r3, [pc, #192]	; (800bb7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d0ef      	beq.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bac6:	7cfb      	ldrb	r3, [r7, #19]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d159      	bne.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bacc:	4b2a      	ldr	r3, [pc, #168]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bad6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d01e      	beq.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae2:	697a      	ldr	r2, [r7, #20]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d019      	beq.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bae8:	4b23      	ldr	r3, [pc, #140]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800baea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800baf2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800baf4:	4b20      	ldr	r3, [pc, #128]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800baf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bafa:	4a1f      	ldr	r2, [pc, #124]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bafc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb04:	4b1c      	ldr	r3, [pc, #112]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb0a:	4a1b      	ldr	r2, [pc, #108]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bb14:	4a18      	ldr	r2, [pc, #96]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	f003 0301 	and.w	r3, r3, #1
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d016      	beq.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb26:	f7f9 fb7f 	bl	8005228 <HAL_GetTick>
 800bb2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb2c:	e00b      	b.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb2e:	f7f9 fb7b 	bl	8005228 <HAL_GetTick>
 800bb32:	4602      	mov	r2, r0
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d902      	bls.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bb40:	2303      	movs	r3, #3
 800bb42:	74fb      	strb	r3, [r7, #19]
            break;
 800bb44:	e006      	b.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb46:	4b0c      	ldr	r3, [pc, #48]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb4c:	f003 0302 	and.w	r3, r3, #2
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d0ec      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bb54:	7cfb      	ldrb	r3, [r7, #19]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d10b      	bne.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb5a:	4b07      	ldr	r3, [pc, #28]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb68:	4903      	ldr	r1, [pc, #12]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bb70:	e008      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb72:	7cfb      	ldrb	r3, [r7, #19]
 800bb74:	74bb      	strb	r3, [r7, #18]
 800bb76:	e005      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bb78:	40021000 	.word	0x40021000
 800bb7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb80:	7cfb      	ldrb	r3, [r7, #19]
 800bb82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bb84:	7c7b      	ldrb	r3, [r7, #17]
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d105      	bne.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb8a:	4ba7      	ldr	r3, [pc, #668]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb8e:	4aa6      	ldr	r2, [pc, #664]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f003 0301 	and.w	r3, r3, #1
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00a      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bba2:	4ba1      	ldr	r3, [pc, #644]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bba8:	f023 0203 	bic.w	r2, r3, #3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	499d      	ldr	r1, [pc, #628]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 0302 	and.w	r3, r3, #2
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00a      	beq.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bbc4:	4b98      	ldr	r3, [pc, #608]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbca:	f023 020c 	bic.w	r2, r3, #12
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	4995      	ldr	r1, [pc, #596]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f003 0304 	and.w	r3, r3, #4
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00a      	beq.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bbe6:	4b90      	ldr	r3, [pc, #576]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	498c      	ldr	r1, [pc, #560]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 0308 	and.w	r3, r3, #8
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00a      	beq.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bc08:	4b87      	ldr	r3, [pc, #540]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	691b      	ldr	r3, [r3, #16]
 800bc16:	4984      	ldr	r1, [pc, #528]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f003 0310 	and.w	r3, r3, #16
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00a      	beq.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bc2a:	4b7f      	ldr	r3, [pc, #508]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	695b      	ldr	r3, [r3, #20]
 800bc38:	497b      	ldr	r1, [pc, #492]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 0320 	and.w	r3, r3, #32
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00a      	beq.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc4c:	4b76      	ldr	r3, [pc, #472]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	699b      	ldr	r3, [r3, #24]
 800bc5a:	4973      	ldr	r1, [pc, #460]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00a      	beq.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bc6e:	4b6e      	ldr	r3, [pc, #440]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	69db      	ldr	r3, [r3, #28]
 800bc7c:	496a      	ldr	r1, [pc, #424]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00a      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bc90:	4b65      	ldr	r3, [pc, #404]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a1b      	ldr	r3, [r3, #32]
 800bc9e:	4962      	ldr	r1, [pc, #392]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bca0:	4313      	orrs	r3, r2
 800bca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00a      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bcb2:	4b5d      	ldr	r3, [pc, #372]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc0:	4959      	ldr	r1, [pc, #356]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00a      	beq.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bcd4:	4b54      	ldr	r3, [pc, #336]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bcda:	f023 0203 	bic.w	r2, r3, #3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce2:	4951      	ldr	r1, [pc, #324]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bce4:	4313      	orrs	r3, r2
 800bce6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00a      	beq.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bcf6:	4b4c      	ldr	r3, [pc, #304]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd04:	4948      	ldr	r1, [pc, #288]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd06:	4313      	orrs	r3, r2
 800bd08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d015      	beq.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd18:	4b43      	ldr	r3, [pc, #268]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd26:	4940      	ldr	r1, [pc, #256]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd36:	d105      	bne.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd38:	4b3b      	ldr	r3, [pc, #236]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	4a3a      	ldr	r2, [pc, #232]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d015      	beq.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bd50:	4b35      	ldr	r3, [pc, #212]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd5e:	4932      	ldr	r1, [pc, #200]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd60:	4313      	orrs	r3, r2
 800bd62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd6e:	d105      	bne.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd70:	4b2d      	ldr	r3, [pc, #180]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	4a2c      	ldr	r2, [pc, #176]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d015      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd88:	4b27      	ldr	r3, [pc, #156]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd96:	4924      	ldr	r1, [pc, #144]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bda6:	d105      	bne.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bda8:	4b1f      	ldr	r3, [pc, #124]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	4a1e      	ldr	r2, [pc, #120]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdb2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d015      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bdc0:	4b19      	ldr	r3, [pc, #100]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdce:	4916      	ldr	r1, [pc, #88]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdde:	d105      	bne.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bde0:	4b11      	ldr	r3, [pc, #68]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	4a10      	ldr	r2, [pc, #64]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bde6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d019      	beq.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bdf8:	4b0b      	ldr	r3, [pc, #44]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be06:	4908      	ldr	r1, [pc, #32]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be08:	4313      	orrs	r3, r2
 800be0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be16:	d109      	bne.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be18:	4b03      	ldr	r3, [pc, #12]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	4a02      	ldr	r2, [pc, #8]	; (800be28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be22:	60d3      	str	r3, [r2, #12]
 800be24:	e002      	b.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800be26:	bf00      	nop
 800be28:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be34:	2b00      	cmp	r3, #0
 800be36:	d015      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800be38:	4b29      	ldr	r3, [pc, #164]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800be3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be46:	4926      	ldr	r1, [pc, #152]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800be48:	4313      	orrs	r3, r2
 800be4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be56:	d105      	bne.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800be58:	4b21      	ldr	r3, [pc, #132]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	4a20      	ldr	r2, [pc, #128]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800be5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be62:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d015      	beq.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800be70:	4b1b      	ldr	r3, [pc, #108]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800be72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be76:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be7e:	4918      	ldr	r1, [pc, #96]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800be80:	4313      	orrs	r3, r2
 800be82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be8e:	d105      	bne.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800be90:	4b13      	ldr	r3, [pc, #76]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	4a12      	ldr	r2, [pc, #72]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800be96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be9a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d015      	beq.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bea8:	4b0d      	ldr	r3, [pc, #52]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800beaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800beae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beb6:	490a      	ldr	r1, [pc, #40]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800beb8:	4313      	orrs	r3, r2
 800beba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bec2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bec6:	d105      	bne.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bec8:	4b05      	ldr	r3, [pc, #20]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	4a04      	ldr	r2, [pc, #16]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bed2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bed4:	7cbb      	ldrb	r3, [r7, #18]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3718      	adds	r7, #24
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	40021000 	.word	0x40021000

0800bee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d101      	bne.n	800bef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	e09d      	b.n	800c032 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befa:	2b00      	cmp	r3, #0
 800befc:	d108      	bne.n	800bf10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf06:	d009      	beq.n	800bf1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	61da      	str	r2, [r3, #28]
 800bf0e:	e005      	b.n	800bf1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d106      	bne.n	800bf3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7f8 fbea 	bl	8004710 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2202      	movs	r2, #2
 800bf40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf5c:	d902      	bls.n	800bf64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	60fb      	str	r3, [r7, #12]
 800bf62:	e002      	b.n	800bf6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bf64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bf72:	d007      	beq.n	800bf84 <HAL_SPI_Init+0xa0>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf7c:	d002      	beq.n	800bf84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bf94:	431a      	orrs	r2, r3
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	f003 0302 	and.w	r3, r3, #2
 800bf9e:	431a      	orrs	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	695b      	ldr	r3, [r3, #20]
 800bfa4:	f003 0301 	and.w	r3, r3, #1
 800bfa8:	431a      	orrs	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bfb2:	431a      	orrs	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	69db      	ldr	r3, [r3, #28]
 800bfb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bfbc:	431a      	orrs	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a1b      	ldr	r3, [r3, #32]
 800bfc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfc6:	ea42 0103 	orr.w	r1, r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	430a      	orrs	r2, r1
 800bfd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	0c1b      	lsrs	r3, r3, #16
 800bfe0:	f003 0204 	and.w	r2, r3, #4
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe8:	f003 0310 	and.w	r3, r3, #16
 800bfec:	431a      	orrs	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bff2:	f003 0308 	and.w	r3, r3, #8
 800bff6:	431a      	orrs	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c000:	ea42 0103 	orr.w	r1, r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	430a      	orrs	r2, r1
 800c010:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	69da      	ldr	r2, [r3, #28]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c020:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b082      	sub	sp, #8
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d101      	bne.n	800c04c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	e049      	b.n	800c0e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c052:	b2db      	uxtb	r3, r3
 800c054:	2b00      	cmp	r3, #0
 800c056:	d106      	bne.n	800c066 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f7f8 fbcb 	bl	80047fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2202      	movs	r2, #2
 800c06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	3304      	adds	r3, #4
 800c076:	4619      	mov	r1, r3
 800c078:	4610      	mov	r0, r2
 800c07a:	f000 fb73 	bl	800c764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2201      	movs	r2, #1
 800c082:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2201      	movs	r2, #1
 800c08a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2201      	movs	r2, #1
 800c092:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d001      	beq.n	800c100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e054      	b.n	800c1aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2202      	movs	r2, #2
 800c104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	68da      	ldr	r2, [r3, #12]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f042 0201 	orr.w	r2, r2, #1
 800c116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a26      	ldr	r2, [pc, #152]	; (800c1b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d022      	beq.n	800c168 <HAL_TIM_Base_Start_IT+0x80>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c12a:	d01d      	beq.n	800c168 <HAL_TIM_Base_Start_IT+0x80>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a22      	ldr	r2, [pc, #136]	; (800c1bc <HAL_TIM_Base_Start_IT+0xd4>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d018      	beq.n	800c168 <HAL_TIM_Base_Start_IT+0x80>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a21      	ldr	r2, [pc, #132]	; (800c1c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d013      	beq.n	800c168 <HAL_TIM_Base_Start_IT+0x80>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a1f      	ldr	r2, [pc, #124]	; (800c1c4 <HAL_TIM_Base_Start_IT+0xdc>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d00e      	beq.n	800c168 <HAL_TIM_Base_Start_IT+0x80>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a1e      	ldr	r2, [pc, #120]	; (800c1c8 <HAL_TIM_Base_Start_IT+0xe0>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d009      	beq.n	800c168 <HAL_TIM_Base_Start_IT+0x80>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a1c      	ldr	r2, [pc, #112]	; (800c1cc <HAL_TIM_Base_Start_IT+0xe4>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d004      	beq.n	800c168 <HAL_TIM_Base_Start_IT+0x80>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a1b      	ldr	r2, [pc, #108]	; (800c1d0 <HAL_TIM_Base_Start_IT+0xe8>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d115      	bne.n	800c194 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	689a      	ldr	r2, [r3, #8]
 800c16e:	4b19      	ldr	r3, [pc, #100]	; (800c1d4 <HAL_TIM_Base_Start_IT+0xec>)
 800c170:	4013      	ands	r3, r2
 800c172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b06      	cmp	r3, #6
 800c178:	d015      	beq.n	800c1a6 <HAL_TIM_Base_Start_IT+0xbe>
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c180:	d011      	beq.n	800c1a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f042 0201 	orr.w	r2, r2, #1
 800c190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c192:	e008      	b.n	800c1a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f042 0201 	orr.w	r2, r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	e000      	b.n	800c1a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3714      	adds	r7, #20
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	40012c00 	.word	0x40012c00
 800c1bc:	40000400 	.word	0x40000400
 800c1c0:	40000800 	.word	0x40000800
 800c1c4:	40000c00 	.word	0x40000c00
 800c1c8:	40013400 	.word	0x40013400
 800c1cc:	40014000 	.word	0x40014000
 800c1d0:	40015000 	.word	0x40015000
 800c1d4:	00010007 	.word	0x00010007

0800c1d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	68da      	ldr	r2, [r3, #12]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f022 0201 	bic.w	r2, r2, #1
 800c1ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6a1a      	ldr	r2, [r3, #32]
 800c1f6:	f241 1311 	movw	r3, #4369	; 0x1111
 800c1fa:	4013      	ands	r3, r2
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d10f      	bne.n	800c220 <HAL_TIM_Base_Stop_IT+0x48>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6a1a      	ldr	r2, [r3, #32]
 800c206:	f244 4344 	movw	r3, #17476	; 0x4444
 800c20a:	4013      	ands	r3, r2
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d107      	bne.n	800c220 <HAL_TIM_Base_Stop_IT+0x48>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f022 0201 	bic.w	r2, r2, #1
 800c21e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c228:	2300      	movs	r3, #0
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	370c      	adds	r7, #12
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr

0800c236 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b084      	sub	sp, #16
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	f003 0302 	and.w	r3, r3, #2
 800c254:	2b00      	cmp	r3, #0
 800c256:	d020      	beq.n	800c29a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f003 0302 	and.w	r3, r3, #2
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d01b      	beq.n	800c29a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f06f 0202 	mvn.w	r2, #2
 800c26a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2201      	movs	r2, #1
 800c270:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	699b      	ldr	r3, [r3, #24]
 800c278:	f003 0303 	and.w	r3, r3, #3
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d003      	beq.n	800c288 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 fa51 	bl	800c728 <HAL_TIM_IC_CaptureCallback>
 800c286:	e005      	b.n	800c294 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 fa43 	bl	800c714 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fa54 	bl	800c73c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	f003 0304 	and.w	r3, r3, #4
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d020      	beq.n	800c2e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f003 0304 	and.w	r3, r3, #4
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d01b      	beq.n	800c2e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f06f 0204 	mvn.w	r2, #4
 800c2b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2202      	movs	r2, #2
 800c2bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	699b      	ldr	r3, [r3, #24]
 800c2c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d003      	beq.n	800c2d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 fa2b 	bl	800c728 <HAL_TIM_IC_CaptureCallback>
 800c2d2:	e005      	b.n	800c2e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fa1d 	bl	800c714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fa2e 	bl	800c73c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	f003 0308 	and.w	r3, r3, #8
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d020      	beq.n	800c332 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f003 0308 	and.w	r3, r3, #8
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d01b      	beq.n	800c332 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f06f 0208 	mvn.w	r2, #8
 800c302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2204      	movs	r2, #4
 800c308:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	69db      	ldr	r3, [r3, #28]
 800c310:	f003 0303 	and.w	r3, r3, #3
 800c314:	2b00      	cmp	r3, #0
 800c316:	d003      	beq.n	800c320 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 fa05 	bl	800c728 <HAL_TIM_IC_CaptureCallback>
 800c31e:	e005      	b.n	800c32c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 f9f7 	bl	800c714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 fa08 	bl	800c73c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	f003 0310 	and.w	r3, r3, #16
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d020      	beq.n	800c37e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f003 0310 	and.w	r3, r3, #16
 800c342:	2b00      	cmp	r3, #0
 800c344:	d01b      	beq.n	800c37e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f06f 0210 	mvn.w	r2, #16
 800c34e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2208      	movs	r2, #8
 800c354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	69db      	ldr	r3, [r3, #28]
 800c35c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c360:	2b00      	cmp	r3, #0
 800c362:	d003      	beq.n	800c36c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 f9df 	bl	800c728 <HAL_TIM_IC_CaptureCallback>
 800c36a:	e005      	b.n	800c378 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f9d1 	bl	800c714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 f9e2 	bl	800c73c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	f003 0301 	and.w	r3, r3, #1
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00c      	beq.n	800c3a2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f003 0301 	and.w	r3, r3, #1
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d007      	beq.n	800c3a2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f06f 0201 	mvn.w	r2, #1
 800c39a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 f9af 	bl	800c700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d104      	bne.n	800c3b6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00c      	beq.n	800c3d0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d007      	beq.n	800c3d0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800c3c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fbba 	bl	800cb44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00c      	beq.n	800c3f4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d007      	beq.n	800c3f4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c3ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 fbb2 	bl	800cb58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00c      	beq.n	800c418 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c404:	2b00      	cmp	r3, #0
 800c406:	d007      	beq.n	800c418 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 f99c 	bl	800c750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	f003 0320 	and.w	r3, r3, #32
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00c      	beq.n	800c43c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f003 0320 	and.w	r3, r3, #32
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d007      	beq.n	800c43c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f06f 0220 	mvn.w	r2, #32
 800c434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fb7a 	bl	800cb30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00c      	beq.n	800c460 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d007      	beq.n	800c460 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fb86 	bl	800cb6c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00c      	beq.n	800c484 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c470:	2b00      	cmp	r3, #0
 800c472:	d007      	beq.n	800c484 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c47c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 fb7e 	bl	800cb80 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00c      	beq.n	800c4a8 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d007      	beq.n	800c4a8 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c4a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fb76 	bl	800cb94 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00c      	beq.n	800c4cc <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d007      	beq.n	800c4cc <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c4c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 fb6e 	bl	800cba8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c4cc:	bf00      	nop
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d101      	bne.n	800c4f0 <HAL_TIM_ConfigClockSource+0x1c>
 800c4ec:	2302      	movs	r3, #2
 800c4ee:	e0f6      	b.n	800c6de <HAL_TIM_ConfigClockSource+0x20a>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c50e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c51a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	68ba      	ldr	r2, [r7, #8]
 800c522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a6f      	ldr	r2, [pc, #444]	; (800c6e8 <HAL_TIM_ConfigClockSource+0x214>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	f000 80c1 	beq.w	800c6b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c530:	4a6d      	ldr	r2, [pc, #436]	; (800c6e8 <HAL_TIM_ConfigClockSource+0x214>)
 800c532:	4293      	cmp	r3, r2
 800c534:	f200 80c6 	bhi.w	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c538:	4a6c      	ldr	r2, [pc, #432]	; (800c6ec <HAL_TIM_ConfigClockSource+0x218>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	f000 80b9 	beq.w	800c6b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c540:	4a6a      	ldr	r2, [pc, #424]	; (800c6ec <HAL_TIM_ConfigClockSource+0x218>)
 800c542:	4293      	cmp	r3, r2
 800c544:	f200 80be 	bhi.w	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c548:	4a69      	ldr	r2, [pc, #420]	; (800c6f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	f000 80b1 	beq.w	800c6b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c550:	4a67      	ldr	r2, [pc, #412]	; (800c6f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800c552:	4293      	cmp	r3, r2
 800c554:	f200 80b6 	bhi.w	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c558:	4a66      	ldr	r2, [pc, #408]	; (800c6f4 <HAL_TIM_ConfigClockSource+0x220>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	f000 80a9 	beq.w	800c6b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c560:	4a64      	ldr	r2, [pc, #400]	; (800c6f4 <HAL_TIM_ConfigClockSource+0x220>)
 800c562:	4293      	cmp	r3, r2
 800c564:	f200 80ae 	bhi.w	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c568:	4a63      	ldr	r2, [pc, #396]	; (800c6f8 <HAL_TIM_ConfigClockSource+0x224>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	f000 80a1 	beq.w	800c6b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c570:	4a61      	ldr	r2, [pc, #388]	; (800c6f8 <HAL_TIM_ConfigClockSource+0x224>)
 800c572:	4293      	cmp	r3, r2
 800c574:	f200 80a6 	bhi.w	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c578:	4a60      	ldr	r2, [pc, #384]	; (800c6fc <HAL_TIM_ConfigClockSource+0x228>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	f000 8099 	beq.w	800c6b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c580:	4a5e      	ldr	r2, [pc, #376]	; (800c6fc <HAL_TIM_ConfigClockSource+0x228>)
 800c582:	4293      	cmp	r3, r2
 800c584:	f200 809e 	bhi.w	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c588:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c58c:	f000 8091 	beq.w	800c6b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c590:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c594:	f200 8096 	bhi.w	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c59c:	f000 8089 	beq.w	800c6b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c5a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5a4:	f200 808e 	bhi.w	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5ac:	d03e      	beq.n	800c62c <HAL_TIM_ConfigClockSource+0x158>
 800c5ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5b2:	f200 8087 	bhi.w	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5ba:	f000 8086 	beq.w	800c6ca <HAL_TIM_ConfigClockSource+0x1f6>
 800c5be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5c2:	d87f      	bhi.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5c4:	2b70      	cmp	r3, #112	; 0x70
 800c5c6:	d01a      	beq.n	800c5fe <HAL_TIM_ConfigClockSource+0x12a>
 800c5c8:	2b70      	cmp	r3, #112	; 0x70
 800c5ca:	d87b      	bhi.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5cc:	2b60      	cmp	r3, #96	; 0x60
 800c5ce:	d050      	beq.n	800c672 <HAL_TIM_ConfigClockSource+0x19e>
 800c5d0:	2b60      	cmp	r3, #96	; 0x60
 800c5d2:	d877      	bhi.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5d4:	2b50      	cmp	r3, #80	; 0x50
 800c5d6:	d03c      	beq.n	800c652 <HAL_TIM_ConfigClockSource+0x17e>
 800c5d8:	2b50      	cmp	r3, #80	; 0x50
 800c5da:	d873      	bhi.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5dc:	2b40      	cmp	r3, #64	; 0x40
 800c5de:	d058      	beq.n	800c692 <HAL_TIM_ConfigClockSource+0x1be>
 800c5e0:	2b40      	cmp	r3, #64	; 0x40
 800c5e2:	d86f      	bhi.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5e4:	2b30      	cmp	r3, #48	; 0x30
 800c5e6:	d064      	beq.n	800c6b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c5e8:	2b30      	cmp	r3, #48	; 0x30
 800c5ea:	d86b      	bhi.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5ec:	2b20      	cmp	r3, #32
 800c5ee:	d060      	beq.n	800c6b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c5f0:	2b20      	cmp	r3, #32
 800c5f2:	d867      	bhi.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d05c      	beq.n	800c6b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c5f8:	2b10      	cmp	r3, #16
 800c5fa:	d05a      	beq.n	800c6b2 <HAL_TIM_ConfigClockSource+0x1de>
 800c5fc:	e062      	b.n	800c6c4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c60e:	f000 f9d9 	bl	800c9c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c620:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68ba      	ldr	r2, [r7, #8]
 800c628:	609a      	str	r2, [r3, #8]
      break;
 800c62a:	e04f      	b.n	800c6cc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c63c:	f000 f9c2 	bl	800c9c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	689a      	ldr	r2, [r3, #8]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c64e:	609a      	str	r2, [r3, #8]
      break;
 800c650:	e03c      	b.n	800c6cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c65e:	461a      	mov	r2, r3
 800c660:	f000 f934 	bl	800c8cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2150      	movs	r1, #80	; 0x50
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 f98d 	bl	800c98a <TIM_ITRx_SetConfig>
      break;
 800c670:	e02c      	b.n	800c6cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c67e:	461a      	mov	r2, r3
 800c680:	f000 f953 	bl	800c92a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2160      	movs	r1, #96	; 0x60
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 f97d 	bl	800c98a <TIM_ITRx_SetConfig>
      break;
 800c690:	e01c      	b.n	800c6cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c69e:	461a      	mov	r2, r3
 800c6a0:	f000 f914 	bl	800c8cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2140      	movs	r1, #64	; 0x40
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f000 f96d 	bl	800c98a <TIM_ITRx_SetConfig>
      break;
 800c6b0:	e00c      	b.n	800c6cc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	4610      	mov	r0, r2
 800c6be:	f000 f964 	bl	800c98a <TIM_ITRx_SetConfig>
      break;
 800c6c2:	e003      	b.n	800c6cc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c6c8:	e000      	b.n	800c6cc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800c6ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	00100070 	.word	0x00100070
 800c6ec:	00100060 	.word	0x00100060
 800c6f0:	00100050 	.word	0x00100050
 800c6f4:	00100040 	.word	0x00100040
 800c6f8:	00100030 	.word	0x00100030
 800c6fc:	00100020 	.word	0x00100020

0800c700 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c708:	bf00      	nop
 800c70a:	370c      	adds	r7, #12
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c71c:	bf00      	nop
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c730:	bf00      	nop
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c744:	bf00      	nop
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c758:	bf00      	nop
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c764:	b480      	push	{r7}
 800c766:	b085      	sub	sp, #20
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4a4c      	ldr	r2, [pc, #304]	; (800c8a8 <TIM_Base_SetConfig+0x144>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d017      	beq.n	800c7ac <TIM_Base_SetConfig+0x48>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c782:	d013      	beq.n	800c7ac <TIM_Base_SetConfig+0x48>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	4a49      	ldr	r2, [pc, #292]	; (800c8ac <TIM_Base_SetConfig+0x148>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d00f      	beq.n	800c7ac <TIM_Base_SetConfig+0x48>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	4a48      	ldr	r2, [pc, #288]	; (800c8b0 <TIM_Base_SetConfig+0x14c>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d00b      	beq.n	800c7ac <TIM_Base_SetConfig+0x48>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a47      	ldr	r2, [pc, #284]	; (800c8b4 <TIM_Base_SetConfig+0x150>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d007      	beq.n	800c7ac <TIM_Base_SetConfig+0x48>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4a46      	ldr	r2, [pc, #280]	; (800c8b8 <TIM_Base_SetConfig+0x154>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d003      	beq.n	800c7ac <TIM_Base_SetConfig+0x48>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	4a45      	ldr	r2, [pc, #276]	; (800c8bc <TIM_Base_SetConfig+0x158>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d108      	bne.n	800c7be <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4a39      	ldr	r2, [pc, #228]	; (800c8a8 <TIM_Base_SetConfig+0x144>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d023      	beq.n	800c80e <TIM_Base_SetConfig+0xaa>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7cc:	d01f      	beq.n	800c80e <TIM_Base_SetConfig+0xaa>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a36      	ldr	r2, [pc, #216]	; (800c8ac <TIM_Base_SetConfig+0x148>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d01b      	beq.n	800c80e <TIM_Base_SetConfig+0xaa>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a35      	ldr	r2, [pc, #212]	; (800c8b0 <TIM_Base_SetConfig+0x14c>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d017      	beq.n	800c80e <TIM_Base_SetConfig+0xaa>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4a34      	ldr	r2, [pc, #208]	; (800c8b4 <TIM_Base_SetConfig+0x150>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d013      	beq.n	800c80e <TIM_Base_SetConfig+0xaa>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a33      	ldr	r2, [pc, #204]	; (800c8b8 <TIM_Base_SetConfig+0x154>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d00f      	beq.n	800c80e <TIM_Base_SetConfig+0xaa>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a33      	ldr	r2, [pc, #204]	; (800c8c0 <TIM_Base_SetConfig+0x15c>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d00b      	beq.n	800c80e <TIM_Base_SetConfig+0xaa>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a32      	ldr	r2, [pc, #200]	; (800c8c4 <TIM_Base_SetConfig+0x160>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d007      	beq.n	800c80e <TIM_Base_SetConfig+0xaa>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a31      	ldr	r2, [pc, #196]	; (800c8c8 <TIM_Base_SetConfig+0x164>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d003      	beq.n	800c80e <TIM_Base_SetConfig+0xaa>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a2c      	ldr	r2, [pc, #176]	; (800c8bc <TIM_Base_SetConfig+0x158>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d108      	bne.n	800c820 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	4313      	orrs	r3, r2
 800c81e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	695b      	ldr	r3, [r3, #20]
 800c82a:	4313      	orrs	r3, r2
 800c82c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	689a      	ldr	r2, [r3, #8]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	4a18      	ldr	r2, [pc, #96]	; (800c8a8 <TIM_Base_SetConfig+0x144>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d013      	beq.n	800c874 <TIM_Base_SetConfig+0x110>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4a1a      	ldr	r2, [pc, #104]	; (800c8b8 <TIM_Base_SetConfig+0x154>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d00f      	beq.n	800c874 <TIM_Base_SetConfig+0x110>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4a1a      	ldr	r2, [pc, #104]	; (800c8c0 <TIM_Base_SetConfig+0x15c>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d00b      	beq.n	800c874 <TIM_Base_SetConfig+0x110>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4a19      	ldr	r2, [pc, #100]	; (800c8c4 <TIM_Base_SetConfig+0x160>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d007      	beq.n	800c874 <TIM_Base_SetConfig+0x110>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4a18      	ldr	r2, [pc, #96]	; (800c8c8 <TIM_Base_SetConfig+0x164>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d003      	beq.n	800c874 <TIM_Base_SetConfig+0x110>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	4a13      	ldr	r2, [pc, #76]	; (800c8bc <TIM_Base_SetConfig+0x158>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d103      	bne.n	800c87c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	691a      	ldr	r2, [r3, #16]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d105      	bne.n	800c89a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	f023 0201 	bic.w	r2, r3, #1
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	611a      	str	r2, [r3, #16]
  }
}
 800c89a:	bf00      	nop
 800c89c:	3714      	adds	r7, #20
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	40012c00 	.word	0x40012c00
 800c8ac:	40000400 	.word	0x40000400
 800c8b0:	40000800 	.word	0x40000800
 800c8b4:	40000c00 	.word	0x40000c00
 800c8b8:	40013400 	.word	0x40013400
 800c8bc:	40015000 	.word	0x40015000
 800c8c0:	40014000 	.word	0x40014000
 800c8c4:	40014400 	.word	0x40014400
 800c8c8:	40014800 	.word	0x40014800

0800c8cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b087      	sub	sp, #28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6a1b      	ldr	r3, [r3, #32]
 800c8dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	6a1b      	ldr	r3, [r3, #32]
 800c8e2:	f023 0201 	bic.w	r2, r3, #1
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	699b      	ldr	r3, [r3, #24]
 800c8ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c8f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	011b      	lsls	r3, r3, #4
 800c8fc:	693a      	ldr	r2, [r7, #16]
 800c8fe:	4313      	orrs	r3, r2
 800c900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	f023 030a 	bic.w	r3, r3, #10
 800c908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	4313      	orrs	r3, r2
 800c910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	693a      	ldr	r2, [r7, #16]
 800c916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	621a      	str	r2, [r3, #32]
}
 800c91e:	bf00      	nop
 800c920:	371c      	adds	r7, #28
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c92a:	b480      	push	{r7}
 800c92c:	b087      	sub	sp, #28
 800c92e:	af00      	add	r7, sp, #0
 800c930:	60f8      	str	r0, [r7, #12]
 800c932:	60b9      	str	r1, [r7, #8]
 800c934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6a1b      	ldr	r3, [r3, #32]
 800c93a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6a1b      	ldr	r3, [r3, #32]
 800c940:	f023 0210 	bic.w	r2, r3, #16
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	699b      	ldr	r3, [r3, #24]
 800c94c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	031b      	lsls	r3, r3, #12
 800c95a:	693a      	ldr	r2, [r7, #16]
 800c95c:	4313      	orrs	r3, r2
 800c95e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c966:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	011b      	lsls	r3, r3, #4
 800c96c:	697a      	ldr	r2, [r7, #20]
 800c96e:	4313      	orrs	r3, r2
 800c970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	693a      	ldr	r2, [r7, #16]
 800c976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	697a      	ldr	r2, [r7, #20]
 800c97c:	621a      	str	r2, [r3, #32]
}
 800c97e:	bf00      	nop
 800c980:	371c      	adds	r7, #28
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c98a:	b480      	push	{r7}
 800c98c:	b085      	sub	sp, #20
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
 800c992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c9a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9a6:	683a      	ldr	r2, [r7, #0]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	f043 0307 	orr.w	r3, r3, #7
 800c9b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	609a      	str	r2, [r3, #8]
}
 800c9b8:	bf00      	nop
 800c9ba:	3714      	adds	r7, #20
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b087      	sub	sp, #28
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
 800c9d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c9de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	021a      	lsls	r2, r3, #8
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	431a      	orrs	r2, r3
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	697a      	ldr	r2, [r7, #20]
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	697a      	ldr	r2, [r7, #20]
 800c9f6:	609a      	str	r2, [r3, #8]
}
 800c9f8:	bf00      	nop
 800c9fa:	371c      	adds	r7, #28
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b085      	sub	sp, #20
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d101      	bne.n	800ca1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca18:	2302      	movs	r3, #2
 800ca1a:	e074      	b.n	800cb06 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2202      	movs	r2, #2
 800ca28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a34      	ldr	r2, [pc, #208]	; (800cb14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d009      	beq.n	800ca5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a33      	ldr	r2, [pc, #204]	; (800cb18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d004      	beq.n	800ca5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a31      	ldr	r2, [pc, #196]	; (800cb1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d108      	bne.n	800ca6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ca60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	68fa      	ldr	r2, [r7, #12]
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ca72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a21      	ldr	r2, [pc, #132]	; (800cb14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d022      	beq.n	800cada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca9c:	d01d      	beq.n	800cada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4a1f      	ldr	r2, [pc, #124]	; (800cb20 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d018      	beq.n	800cada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a1d      	ldr	r2, [pc, #116]	; (800cb24 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d013      	beq.n	800cada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a1c      	ldr	r2, [pc, #112]	; (800cb28 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d00e      	beq.n	800cada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a15      	ldr	r2, [pc, #84]	; (800cb18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d009      	beq.n	800cada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a18      	ldr	r2, [pc, #96]	; (800cb2c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d004      	beq.n	800cada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a11      	ldr	r2, [pc, #68]	; (800cb1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d10c      	bne.n	800caf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	689b      	ldr	r3, [r3, #8]
 800cae6:	68ba      	ldr	r2, [r7, #8]
 800cae8:	4313      	orrs	r3, r2
 800caea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2201      	movs	r2, #1
 800caf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3714      	adds	r7, #20
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop
 800cb14:	40012c00 	.word	0x40012c00
 800cb18:	40013400 	.word	0x40013400
 800cb1c:	40015000 	.word	0x40015000
 800cb20:	40000400 	.word	0x40000400
 800cb24:	40000800 	.word	0x40000800
 800cb28:	40000c00 	.word	0x40000c00
 800cb2c:	40014000 	.word	0x40014000

0800cb30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb4c:	bf00      	nop
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb60:	bf00      	nop
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cb74:	bf00      	nop
 800cb76:	370c      	adds	r7, #12
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cb88:	bf00      	nop
 800cb8a:	370c      	adds	r7, #12
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cb9c:	bf00      	nop
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cbbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cbc0:	b08c      	sub	sp, #48	; 0x30
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	689a      	ldr	r2, [r3, #8]
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	431a      	orrs	r2, r3
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	695b      	ldr	r3, [r3, #20]
 800cbda:	431a      	orrs	r2, r3
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	69db      	ldr	r3, [r3, #28]
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	4baa      	ldr	r3, [pc, #680]	; (800ce94 <UART_SetConfig+0x2d8>)
 800cbec:	4013      	ands	r3, r2
 800cbee:	697a      	ldr	r2, [r7, #20]
 800cbf0:	6812      	ldr	r2, [r2, #0]
 800cbf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbf4:	430b      	orrs	r3, r1
 800cbf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	68da      	ldr	r2, [r3, #12]
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	430a      	orrs	r2, r1
 800cc0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	699b      	ldr	r3, [r3, #24]
 800cc12:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a9f      	ldr	r2, [pc, #636]	; (800ce98 <UART_SetConfig+0x2dc>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d004      	beq.n	800cc28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	6a1b      	ldr	r3, [r3, #32]
 800cc22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc24:	4313      	orrs	r3, r2
 800cc26:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	689b      	ldr	r3, [r3, #8]
 800cc2e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800cc32:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800cc36:	697a      	ldr	r2, [r7, #20]
 800cc38:	6812      	ldr	r2, [r2, #0]
 800cc3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc3c:	430b      	orrs	r3, r1
 800cc3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc46:	f023 010f 	bic.w	r1, r3, #15
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	430a      	orrs	r2, r1
 800cc54:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a90      	ldr	r2, [pc, #576]	; (800ce9c <UART_SetConfig+0x2e0>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d125      	bne.n	800ccac <UART_SetConfig+0xf0>
 800cc60:	4b8f      	ldr	r3, [pc, #572]	; (800cea0 <UART_SetConfig+0x2e4>)
 800cc62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc66:	f003 0303 	and.w	r3, r3, #3
 800cc6a:	2b03      	cmp	r3, #3
 800cc6c:	d81a      	bhi.n	800cca4 <UART_SetConfig+0xe8>
 800cc6e:	a201      	add	r2, pc, #4	; (adr r2, 800cc74 <UART_SetConfig+0xb8>)
 800cc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc74:	0800cc85 	.word	0x0800cc85
 800cc78:	0800cc95 	.word	0x0800cc95
 800cc7c:	0800cc8d 	.word	0x0800cc8d
 800cc80:	0800cc9d 	.word	0x0800cc9d
 800cc84:	2301      	movs	r3, #1
 800cc86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc8a:	e116      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc92:	e112      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cc94:	2304      	movs	r3, #4
 800cc96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cc9a:	e10e      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cc9c:	2308      	movs	r3, #8
 800cc9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cca2:	e10a      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cca4:	2310      	movs	r3, #16
 800cca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccaa:	e106      	b.n	800ceba <UART_SetConfig+0x2fe>
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a7c      	ldr	r2, [pc, #496]	; (800cea4 <UART_SetConfig+0x2e8>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d138      	bne.n	800cd28 <UART_SetConfig+0x16c>
 800ccb6:	4b7a      	ldr	r3, [pc, #488]	; (800cea0 <UART_SetConfig+0x2e4>)
 800ccb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccbc:	f003 030c 	and.w	r3, r3, #12
 800ccc0:	2b0c      	cmp	r3, #12
 800ccc2:	d82d      	bhi.n	800cd20 <UART_SetConfig+0x164>
 800ccc4:	a201      	add	r2, pc, #4	; (adr r2, 800cccc <UART_SetConfig+0x110>)
 800ccc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccca:	bf00      	nop
 800cccc:	0800cd01 	.word	0x0800cd01
 800ccd0:	0800cd21 	.word	0x0800cd21
 800ccd4:	0800cd21 	.word	0x0800cd21
 800ccd8:	0800cd21 	.word	0x0800cd21
 800ccdc:	0800cd11 	.word	0x0800cd11
 800cce0:	0800cd21 	.word	0x0800cd21
 800cce4:	0800cd21 	.word	0x0800cd21
 800cce8:	0800cd21 	.word	0x0800cd21
 800ccec:	0800cd09 	.word	0x0800cd09
 800ccf0:	0800cd21 	.word	0x0800cd21
 800ccf4:	0800cd21 	.word	0x0800cd21
 800ccf8:	0800cd21 	.word	0x0800cd21
 800ccfc:	0800cd19 	.word	0x0800cd19
 800cd00:	2300      	movs	r3, #0
 800cd02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd06:	e0d8      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cd08:	2302      	movs	r3, #2
 800cd0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd0e:	e0d4      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cd10:	2304      	movs	r3, #4
 800cd12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd16:	e0d0      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cd18:	2308      	movs	r3, #8
 800cd1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd1e:	e0cc      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cd20:	2310      	movs	r3, #16
 800cd22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd26:	e0c8      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a5e      	ldr	r2, [pc, #376]	; (800cea8 <UART_SetConfig+0x2ec>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d125      	bne.n	800cd7e <UART_SetConfig+0x1c2>
 800cd32:	4b5b      	ldr	r3, [pc, #364]	; (800cea0 <UART_SetConfig+0x2e4>)
 800cd34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cd3c:	2b30      	cmp	r3, #48	; 0x30
 800cd3e:	d016      	beq.n	800cd6e <UART_SetConfig+0x1b2>
 800cd40:	2b30      	cmp	r3, #48	; 0x30
 800cd42:	d818      	bhi.n	800cd76 <UART_SetConfig+0x1ba>
 800cd44:	2b20      	cmp	r3, #32
 800cd46:	d00a      	beq.n	800cd5e <UART_SetConfig+0x1a2>
 800cd48:	2b20      	cmp	r3, #32
 800cd4a:	d814      	bhi.n	800cd76 <UART_SetConfig+0x1ba>
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d002      	beq.n	800cd56 <UART_SetConfig+0x19a>
 800cd50:	2b10      	cmp	r3, #16
 800cd52:	d008      	beq.n	800cd66 <UART_SetConfig+0x1aa>
 800cd54:	e00f      	b.n	800cd76 <UART_SetConfig+0x1ba>
 800cd56:	2300      	movs	r3, #0
 800cd58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd5c:	e0ad      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cd5e:	2302      	movs	r3, #2
 800cd60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd64:	e0a9      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cd66:	2304      	movs	r3, #4
 800cd68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd6c:	e0a5      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cd6e:	2308      	movs	r3, #8
 800cd70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd74:	e0a1      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cd76:	2310      	movs	r3, #16
 800cd78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cd7c:	e09d      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a4a      	ldr	r2, [pc, #296]	; (800ceac <UART_SetConfig+0x2f0>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d125      	bne.n	800cdd4 <UART_SetConfig+0x218>
 800cd88:	4b45      	ldr	r3, [pc, #276]	; (800cea0 <UART_SetConfig+0x2e4>)
 800cd8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cd92:	2bc0      	cmp	r3, #192	; 0xc0
 800cd94:	d016      	beq.n	800cdc4 <UART_SetConfig+0x208>
 800cd96:	2bc0      	cmp	r3, #192	; 0xc0
 800cd98:	d818      	bhi.n	800cdcc <UART_SetConfig+0x210>
 800cd9a:	2b80      	cmp	r3, #128	; 0x80
 800cd9c:	d00a      	beq.n	800cdb4 <UART_SetConfig+0x1f8>
 800cd9e:	2b80      	cmp	r3, #128	; 0x80
 800cda0:	d814      	bhi.n	800cdcc <UART_SetConfig+0x210>
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d002      	beq.n	800cdac <UART_SetConfig+0x1f0>
 800cda6:	2b40      	cmp	r3, #64	; 0x40
 800cda8:	d008      	beq.n	800cdbc <UART_SetConfig+0x200>
 800cdaa:	e00f      	b.n	800cdcc <UART_SetConfig+0x210>
 800cdac:	2300      	movs	r3, #0
 800cdae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cdb2:	e082      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cdb4:	2302      	movs	r3, #2
 800cdb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cdba:	e07e      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cdbc:	2304      	movs	r3, #4
 800cdbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cdc2:	e07a      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cdc4:	2308      	movs	r3, #8
 800cdc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cdca:	e076      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cdcc:	2310      	movs	r3, #16
 800cdce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cdd2:	e072      	b.n	800ceba <UART_SetConfig+0x2fe>
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a35      	ldr	r2, [pc, #212]	; (800ceb0 <UART_SetConfig+0x2f4>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d12a      	bne.n	800ce34 <UART_SetConfig+0x278>
 800cdde:	4b30      	ldr	r3, [pc, #192]	; (800cea0 <UART_SetConfig+0x2e4>)
 800cde0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cde4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cde8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cdec:	d01a      	beq.n	800ce24 <UART_SetConfig+0x268>
 800cdee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cdf2:	d81b      	bhi.n	800ce2c <UART_SetConfig+0x270>
 800cdf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdf8:	d00c      	beq.n	800ce14 <UART_SetConfig+0x258>
 800cdfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdfe:	d815      	bhi.n	800ce2c <UART_SetConfig+0x270>
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d003      	beq.n	800ce0c <UART_SetConfig+0x250>
 800ce04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce08:	d008      	beq.n	800ce1c <UART_SetConfig+0x260>
 800ce0a:	e00f      	b.n	800ce2c <UART_SetConfig+0x270>
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce12:	e052      	b.n	800ceba <UART_SetConfig+0x2fe>
 800ce14:	2302      	movs	r3, #2
 800ce16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce1a:	e04e      	b.n	800ceba <UART_SetConfig+0x2fe>
 800ce1c:	2304      	movs	r3, #4
 800ce1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce22:	e04a      	b.n	800ceba <UART_SetConfig+0x2fe>
 800ce24:	2308      	movs	r3, #8
 800ce26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce2a:	e046      	b.n	800ceba <UART_SetConfig+0x2fe>
 800ce2c:	2310      	movs	r3, #16
 800ce2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce32:	e042      	b.n	800ceba <UART_SetConfig+0x2fe>
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a17      	ldr	r2, [pc, #92]	; (800ce98 <UART_SetConfig+0x2dc>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d13a      	bne.n	800ceb4 <UART_SetConfig+0x2f8>
 800ce3e:	4b18      	ldr	r3, [pc, #96]	; (800cea0 <UART_SetConfig+0x2e4>)
 800ce40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ce48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ce4c:	d01a      	beq.n	800ce84 <UART_SetConfig+0x2c8>
 800ce4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ce52:	d81b      	bhi.n	800ce8c <UART_SetConfig+0x2d0>
 800ce54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce58:	d00c      	beq.n	800ce74 <UART_SetConfig+0x2b8>
 800ce5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce5e:	d815      	bhi.n	800ce8c <UART_SetConfig+0x2d0>
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d003      	beq.n	800ce6c <UART_SetConfig+0x2b0>
 800ce64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce68:	d008      	beq.n	800ce7c <UART_SetConfig+0x2c0>
 800ce6a:	e00f      	b.n	800ce8c <UART_SetConfig+0x2d0>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce72:	e022      	b.n	800ceba <UART_SetConfig+0x2fe>
 800ce74:	2302      	movs	r3, #2
 800ce76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce7a:	e01e      	b.n	800ceba <UART_SetConfig+0x2fe>
 800ce7c:	2304      	movs	r3, #4
 800ce7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce82:	e01a      	b.n	800ceba <UART_SetConfig+0x2fe>
 800ce84:	2308      	movs	r3, #8
 800ce86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce8a:	e016      	b.n	800ceba <UART_SetConfig+0x2fe>
 800ce8c:	2310      	movs	r3, #16
 800ce8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce92:	e012      	b.n	800ceba <UART_SetConfig+0x2fe>
 800ce94:	cfff69f3 	.word	0xcfff69f3
 800ce98:	40008000 	.word	0x40008000
 800ce9c:	40013800 	.word	0x40013800
 800cea0:	40021000 	.word	0x40021000
 800cea4:	40004400 	.word	0x40004400
 800cea8:	40004800 	.word	0x40004800
 800ceac:	40004c00 	.word	0x40004c00
 800ceb0:	40005000 	.word	0x40005000
 800ceb4:	2310      	movs	r3, #16
 800ceb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4aae      	ldr	r2, [pc, #696]	; (800d178 <UART_SetConfig+0x5bc>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	f040 8097 	bne.w	800cff4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ceca:	2b08      	cmp	r3, #8
 800cecc:	d823      	bhi.n	800cf16 <UART_SetConfig+0x35a>
 800cece:	a201      	add	r2, pc, #4	; (adr r2, 800ced4 <UART_SetConfig+0x318>)
 800ced0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced4:	0800cef9 	.word	0x0800cef9
 800ced8:	0800cf17 	.word	0x0800cf17
 800cedc:	0800cf01 	.word	0x0800cf01
 800cee0:	0800cf17 	.word	0x0800cf17
 800cee4:	0800cf07 	.word	0x0800cf07
 800cee8:	0800cf17 	.word	0x0800cf17
 800ceec:	0800cf17 	.word	0x0800cf17
 800cef0:	0800cf17 	.word	0x0800cf17
 800cef4:	0800cf0f 	.word	0x0800cf0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cef8:	f7fe fd08 	bl	800b90c <HAL_RCC_GetPCLK1Freq>
 800cefc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cefe:	e010      	b.n	800cf22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf00:	4b9e      	ldr	r3, [pc, #632]	; (800d17c <UART_SetConfig+0x5c0>)
 800cf02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cf04:	e00d      	b.n	800cf22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf06:	f7fe fc93 	bl	800b830 <HAL_RCC_GetSysClockFreq>
 800cf0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cf0c:	e009      	b.n	800cf22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cf14:	e005      	b.n	800cf22 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800cf16:	2300      	movs	r3, #0
 800cf18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cf20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	f000 8130 	beq.w	800d18a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf2e:	4a94      	ldr	r2, [pc, #592]	; (800d180 <UART_SetConfig+0x5c4>)
 800cf30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf34:	461a      	mov	r2, r3
 800cf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf38:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	685a      	ldr	r2, [r3, #4]
 800cf42:	4613      	mov	r3, r2
 800cf44:	005b      	lsls	r3, r3, #1
 800cf46:	4413      	add	r3, r2
 800cf48:	69ba      	ldr	r2, [r7, #24]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d305      	bcc.n	800cf5a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf54:	69ba      	ldr	r2, [r7, #24]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d903      	bls.n	800cf62 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cf60:	e113      	b.n	800d18a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf64:	2200      	movs	r2, #0
 800cf66:	60bb      	str	r3, [r7, #8]
 800cf68:	60fa      	str	r2, [r7, #12]
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6e:	4a84      	ldr	r2, [pc, #528]	; (800d180 <UART_SetConfig+0x5c4>)
 800cf70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	2200      	movs	r2, #0
 800cf78:	603b      	str	r3, [r7, #0]
 800cf7a:	607a      	str	r2, [r7, #4]
 800cf7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf84:	f7f3 f948 	bl	8000218 <__aeabi_uldivmod>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	4619      	mov	r1, r3
 800cf90:	f04f 0200 	mov.w	r2, #0
 800cf94:	f04f 0300 	mov.w	r3, #0
 800cf98:	020b      	lsls	r3, r1, #8
 800cf9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf9e:	0202      	lsls	r2, r0, #8
 800cfa0:	6979      	ldr	r1, [r7, #20]
 800cfa2:	6849      	ldr	r1, [r1, #4]
 800cfa4:	0849      	lsrs	r1, r1, #1
 800cfa6:	2000      	movs	r0, #0
 800cfa8:	460c      	mov	r4, r1
 800cfaa:	4605      	mov	r5, r0
 800cfac:	eb12 0804 	adds.w	r8, r2, r4
 800cfb0:	eb43 0905 	adc.w	r9, r3, r5
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	469a      	mov	sl, r3
 800cfbc:	4693      	mov	fp, r2
 800cfbe:	4652      	mov	r2, sl
 800cfc0:	465b      	mov	r3, fp
 800cfc2:	4640      	mov	r0, r8
 800cfc4:	4649      	mov	r1, r9
 800cfc6:	f7f3 f927 	bl	8000218 <__aeabi_uldivmod>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	460b      	mov	r3, r1
 800cfce:	4613      	mov	r3, r2
 800cfd0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cfd2:	6a3b      	ldr	r3, [r7, #32]
 800cfd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfd8:	d308      	bcc.n	800cfec <UART_SetConfig+0x430>
 800cfda:	6a3b      	ldr	r3, [r7, #32]
 800cfdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfe0:	d204      	bcs.n	800cfec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	6a3a      	ldr	r2, [r7, #32]
 800cfe8:	60da      	str	r2, [r3, #12]
 800cfea:	e0ce      	b.n	800d18a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800cfec:	2301      	movs	r3, #1
 800cfee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cff2:	e0ca      	b.n	800d18a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	69db      	ldr	r3, [r3, #28]
 800cff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cffc:	d166      	bne.n	800d0cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800cffe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d002:	2b08      	cmp	r3, #8
 800d004:	d827      	bhi.n	800d056 <UART_SetConfig+0x49a>
 800d006:	a201      	add	r2, pc, #4	; (adr r2, 800d00c <UART_SetConfig+0x450>)
 800d008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d00c:	0800d031 	.word	0x0800d031
 800d010:	0800d039 	.word	0x0800d039
 800d014:	0800d041 	.word	0x0800d041
 800d018:	0800d057 	.word	0x0800d057
 800d01c:	0800d047 	.word	0x0800d047
 800d020:	0800d057 	.word	0x0800d057
 800d024:	0800d057 	.word	0x0800d057
 800d028:	0800d057 	.word	0x0800d057
 800d02c:	0800d04f 	.word	0x0800d04f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d030:	f7fe fc6c 	bl	800b90c <HAL_RCC_GetPCLK1Freq>
 800d034:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d036:	e014      	b.n	800d062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d038:	f7fe fc7e 	bl	800b938 <HAL_RCC_GetPCLK2Freq>
 800d03c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d03e:	e010      	b.n	800d062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d040:	4b4e      	ldr	r3, [pc, #312]	; (800d17c <UART_SetConfig+0x5c0>)
 800d042:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d044:	e00d      	b.n	800d062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d046:	f7fe fbf3 	bl	800b830 <HAL_RCC_GetSysClockFreq>
 800d04a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d04c:	e009      	b.n	800d062 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d04e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d054:	e005      	b.n	800d062 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d056:	2300      	movs	r3, #0
 800d058:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d05a:	2301      	movs	r3, #1
 800d05c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d064:	2b00      	cmp	r3, #0
 800d066:	f000 8090 	beq.w	800d18a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06e:	4a44      	ldr	r2, [pc, #272]	; (800d180 <UART_SetConfig+0x5c4>)
 800d070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d074:	461a      	mov	r2, r3
 800d076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d078:	fbb3 f3f2 	udiv	r3, r3, r2
 800d07c:	005a      	lsls	r2, r3, #1
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	085b      	lsrs	r3, r3, #1
 800d084:	441a      	add	r2, r3
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d08e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	2b0f      	cmp	r3, #15
 800d094:	d916      	bls.n	800d0c4 <UART_SetConfig+0x508>
 800d096:	6a3b      	ldr	r3, [r7, #32]
 800d098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d09c:	d212      	bcs.n	800d0c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d09e:	6a3b      	ldr	r3, [r7, #32]
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	f023 030f 	bic.w	r3, r3, #15
 800d0a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d0a8:	6a3b      	ldr	r3, [r7, #32]
 800d0aa:	085b      	lsrs	r3, r3, #1
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	f003 0307 	and.w	r3, r3, #7
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	8bfb      	ldrh	r3, [r7, #30]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	8bfa      	ldrh	r2, [r7, #30]
 800d0c0:	60da      	str	r2, [r3, #12]
 800d0c2:	e062      	b.n	800d18a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d0ca:	e05e      	b.n	800d18a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d0cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d0d0:	2b08      	cmp	r3, #8
 800d0d2:	d828      	bhi.n	800d126 <UART_SetConfig+0x56a>
 800d0d4:	a201      	add	r2, pc, #4	; (adr r2, 800d0dc <UART_SetConfig+0x520>)
 800d0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0da:	bf00      	nop
 800d0dc:	0800d101 	.word	0x0800d101
 800d0e0:	0800d109 	.word	0x0800d109
 800d0e4:	0800d111 	.word	0x0800d111
 800d0e8:	0800d127 	.word	0x0800d127
 800d0ec:	0800d117 	.word	0x0800d117
 800d0f0:	0800d127 	.word	0x0800d127
 800d0f4:	0800d127 	.word	0x0800d127
 800d0f8:	0800d127 	.word	0x0800d127
 800d0fc:	0800d11f 	.word	0x0800d11f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d100:	f7fe fc04 	bl	800b90c <HAL_RCC_GetPCLK1Freq>
 800d104:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d106:	e014      	b.n	800d132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d108:	f7fe fc16 	bl	800b938 <HAL_RCC_GetPCLK2Freq>
 800d10c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d10e:	e010      	b.n	800d132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d110:	4b1a      	ldr	r3, [pc, #104]	; (800d17c <UART_SetConfig+0x5c0>)
 800d112:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d114:	e00d      	b.n	800d132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d116:	f7fe fb8b 	bl	800b830 <HAL_RCC_GetSysClockFreq>
 800d11a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d11c:	e009      	b.n	800d132 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d11e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d122:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d124:	e005      	b.n	800d132 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d126:	2300      	movs	r3, #0
 800d128:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d12a:	2301      	movs	r3, #1
 800d12c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d130:	bf00      	nop
    }

    if (pclk != 0U)
 800d132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d134:	2b00      	cmp	r3, #0
 800d136:	d028      	beq.n	800d18a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13c:	4a10      	ldr	r2, [pc, #64]	; (800d180 <UART_SetConfig+0x5c4>)
 800d13e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d142:	461a      	mov	r2, r3
 800d144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d146:	fbb3 f2f2 	udiv	r2, r3, r2
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	085b      	lsrs	r3, r3, #1
 800d150:	441a      	add	r2, r3
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	fbb2 f3f3 	udiv	r3, r2, r3
 800d15a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d15c:	6a3b      	ldr	r3, [r7, #32]
 800d15e:	2b0f      	cmp	r3, #15
 800d160:	d910      	bls.n	800d184 <UART_SetConfig+0x5c8>
 800d162:	6a3b      	ldr	r3, [r7, #32]
 800d164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d168:	d20c      	bcs.n	800d184 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d16a:	6a3b      	ldr	r3, [r7, #32]
 800d16c:	b29a      	uxth	r2, r3
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	60da      	str	r2, [r3, #12]
 800d174:	e009      	b.n	800d18a <UART_SetConfig+0x5ce>
 800d176:	bf00      	nop
 800d178:	40008000 	.word	0x40008000
 800d17c:	00f42400 	.word	0x00f42400
 800d180:	0800e944 	.word	0x0800e944
      }
      else
      {
        ret = HAL_ERROR;
 800d184:	2301      	movs	r3, #1
 800d186:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	2201      	movs	r2, #1
 800d18e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	2201      	movs	r2, #1
 800d196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	2200      	movs	r2, #0
 800d19e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d1a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3730      	adds	r7, #48	; 0x30
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d1b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c0:	f003 0308 	and.w	r3, r3, #8
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00a      	beq.n	800d1de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	430a      	orrs	r2, r1
 800d1dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e2:	f003 0301 	and.w	r3, r3, #1
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d00a      	beq.n	800d200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	430a      	orrs	r2, r1
 800d1fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d204:	f003 0302 	and.w	r3, r3, #2
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00a      	beq.n	800d222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	430a      	orrs	r2, r1
 800d220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d226:	f003 0304 	and.w	r3, r3, #4
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00a      	beq.n	800d244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	430a      	orrs	r2, r1
 800d242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d248:	f003 0310 	and.w	r3, r3, #16
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00a      	beq.n	800d266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	430a      	orrs	r2, r1
 800d264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d26a:	f003 0320 	and.w	r3, r3, #32
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00a      	beq.n	800d288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	430a      	orrs	r2, r1
 800d286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d290:	2b00      	cmp	r3, #0
 800d292:	d01a      	beq.n	800d2ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	430a      	orrs	r2, r1
 800d2a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2b2:	d10a      	bne.n	800d2ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	430a      	orrs	r2, r1
 800d2c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00a      	beq.n	800d2ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	430a      	orrs	r2, r1
 800d2ea:	605a      	str	r2, [r3, #4]
  }
}
 800d2ec:	bf00      	nop
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b098      	sub	sp, #96	; 0x60
 800d2fc:	af02      	add	r7, sp, #8
 800d2fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d308:	f7f7 ff8e 	bl	8005228 <HAL_GetTick>
 800d30c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f003 0308 	and.w	r3, r3, #8
 800d318:	2b08      	cmp	r3, #8
 800d31a:	d12f      	bne.n	800d37c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d31c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d324:	2200      	movs	r2, #0
 800d326:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 f88e 	bl	800d44c <UART_WaitOnFlagUntilTimeout>
 800d330:	4603      	mov	r3, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	d022      	beq.n	800d37c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33e:	e853 3f00 	ldrex	r3, [r3]
 800d342:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d34a:	653b      	str	r3, [r7, #80]	; 0x50
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	461a      	mov	r2, r3
 800d352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d354:	647b      	str	r3, [r7, #68]	; 0x44
 800d356:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d358:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d35a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d35c:	e841 2300 	strex	r3, r2, [r1]
 800d360:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d364:	2b00      	cmp	r3, #0
 800d366:	d1e6      	bne.n	800d336 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2220      	movs	r2, #32
 800d36c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d378:	2303      	movs	r3, #3
 800d37a:	e063      	b.n	800d444 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f003 0304 	and.w	r3, r3, #4
 800d386:	2b04      	cmp	r3, #4
 800d388:	d149      	bne.n	800d41e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d38a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d392:	2200      	movs	r2, #0
 800d394:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 f857 	bl	800d44c <UART_WaitOnFlagUntilTimeout>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d03c      	beq.n	800d41e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ac:	e853 3f00 	ldrex	r3, [r3]
 800d3b0:	623b      	str	r3, [r7, #32]
   return(result);
 800d3b2:	6a3b      	ldr	r3, [r7, #32]
 800d3b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d3b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3c2:	633b      	str	r3, [r7, #48]	; 0x30
 800d3c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3ca:	e841 2300 	strex	r3, r2, [r1]
 800d3ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d1e6      	bne.n	800d3a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	3308      	adds	r3, #8
 800d3dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	e853 3f00 	ldrex	r3, [r3]
 800d3e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f023 0301 	bic.w	r3, r3, #1
 800d3ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	3308      	adds	r3, #8
 800d3f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3f6:	61fa      	str	r2, [r7, #28]
 800d3f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3fa:	69b9      	ldr	r1, [r7, #24]
 800d3fc:	69fa      	ldr	r2, [r7, #28]
 800d3fe:	e841 2300 	strex	r3, r2, [r1]
 800d402:	617b      	str	r3, [r7, #20]
   return(result);
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1e5      	bne.n	800d3d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2220      	movs	r2, #32
 800d40e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2200      	movs	r2, #0
 800d416:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d41a:	2303      	movs	r3, #3
 800d41c:	e012      	b.n	800d444 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2220      	movs	r2, #32
 800d422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2220      	movs	r2, #32
 800d42a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2200      	movs	r2, #0
 800d432:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2200      	movs	r2, #0
 800d43e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d442:	2300      	movs	r3, #0
}
 800d444:	4618      	mov	r0, r3
 800d446:	3758      	adds	r7, #88	; 0x58
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	603b      	str	r3, [r7, #0]
 800d458:	4613      	mov	r3, r2
 800d45a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d45c:	e04f      	b.n	800d4fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d464:	d04b      	beq.n	800d4fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d466:	f7f7 fedf 	bl	8005228 <HAL_GetTick>
 800d46a:	4602      	mov	r2, r0
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	1ad3      	subs	r3, r2, r3
 800d470:	69ba      	ldr	r2, [r7, #24]
 800d472:	429a      	cmp	r2, r3
 800d474:	d302      	bcc.n	800d47c <UART_WaitOnFlagUntilTimeout+0x30>
 800d476:	69bb      	ldr	r3, [r7, #24]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d101      	bne.n	800d480 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d47c:	2303      	movs	r3, #3
 800d47e:	e04e      	b.n	800d51e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f003 0304 	and.w	r3, r3, #4
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d037      	beq.n	800d4fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	2b80      	cmp	r3, #128	; 0x80
 800d492:	d034      	beq.n	800d4fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	2b40      	cmp	r3, #64	; 0x40
 800d498:	d031      	beq.n	800d4fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	69db      	ldr	r3, [r3, #28]
 800d4a0:	f003 0308 	and.w	r3, r3, #8
 800d4a4:	2b08      	cmp	r3, #8
 800d4a6:	d110      	bne.n	800d4ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2208      	movs	r2, #8
 800d4ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f000 f838 	bl	800d526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2208      	movs	r2, #8
 800d4ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e029      	b.n	800d51e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	69db      	ldr	r3, [r3, #28]
 800d4d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4d8:	d111      	bne.n	800d4fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	f000 f81e 	bl	800d526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2220      	movs	r2, #32
 800d4ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d4fa:	2303      	movs	r3, #3
 800d4fc:	e00f      	b.n	800d51e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	69da      	ldr	r2, [r3, #28]
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	4013      	ands	r3, r2
 800d508:	68ba      	ldr	r2, [r7, #8]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	bf0c      	ite	eq
 800d50e:	2301      	moveq	r3, #1
 800d510:	2300      	movne	r3, #0
 800d512:	b2db      	uxtb	r3, r3
 800d514:	461a      	mov	r2, r3
 800d516:	79fb      	ldrb	r3, [r7, #7]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d0a0      	beq.n	800d45e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d51c:	2300      	movs	r3, #0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d526:	b480      	push	{r7}
 800d528:	b095      	sub	sp, #84	; 0x54
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d536:	e853 3f00 	ldrex	r3, [r3]
 800d53a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d542:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	461a      	mov	r2, r3
 800d54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d54c:	643b      	str	r3, [r7, #64]	; 0x40
 800d54e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d550:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d554:	e841 2300 	strex	r3, r2, [r1]
 800d558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d1e6      	bne.n	800d52e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	3308      	adds	r3, #8
 800d566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d568:	6a3b      	ldr	r3, [r7, #32]
 800d56a:	e853 3f00 	ldrex	r3, [r3]
 800d56e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d576:	f023 0301 	bic.w	r3, r3, #1
 800d57a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	3308      	adds	r3, #8
 800d582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d584:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d58a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d58c:	e841 2300 	strex	r3, r2, [r1]
 800d590:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d594:	2b00      	cmp	r3, #0
 800d596:	d1e3      	bne.n	800d560 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d118      	bne.n	800d5d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	e853 3f00 	ldrex	r3, [r3]
 800d5ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	f023 0310 	bic.w	r3, r3, #16
 800d5b4:	647b      	str	r3, [r7, #68]	; 0x44
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5be:	61bb      	str	r3, [r7, #24]
 800d5c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c2:	6979      	ldr	r1, [r7, #20]
 800d5c4:	69ba      	ldr	r2, [r7, #24]
 800d5c6:	e841 2300 	strex	r3, r2, [r1]
 800d5ca:	613b      	str	r3, [r7, #16]
   return(result);
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d1e6      	bne.n	800d5a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2220      	movs	r2, #32
 800d5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d5e6:	bf00      	nop
 800d5e8:	3754      	adds	r7, #84	; 0x54
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr

0800d5f2 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b086      	sub	sp, #24
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	60f8      	str	r0, [r7, #12]
 800d5fa:	60b9      	str	r1, [r7, #8]
 800d5fc:	607a      	str	r2, [r7, #4]
 800d5fe:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d101      	bne.n	800d60a <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800d606:	2301      	movs	r3, #1
 800d608:	e058      	b.n	800d6bc <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d610:	2b00      	cmp	r3, #0
 800d612:	d106      	bne.n	800d622 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2200      	movs	r2, #0
 800d618:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800d61c:	68f8      	ldr	r0, [r7, #12]
 800d61e:	f7f6 ffff 	bl	8004620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2224      	movs	r2, #36	; 0x24
 800d626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f022 0201 	bic.w	r2, r2, #1
 800d638:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d002      	beq.n	800d648 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f7ff fdb6 	bl	800d1b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f7ff fab7 	bl	800cbbc <UART_SetConfig>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b01      	cmp	r3, #1
 800d652:	d101      	bne.n	800d658 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800d654:	2301      	movs	r3, #1
 800d656:	e031      	b.n	800d6bc <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	689a      	ldr	r2, [r3, #8]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d666:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	689b      	ldr	r3, [r3, #8]
 800d66e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	68ba      	ldr	r2, [r7, #8]
 800d678:	430a      	orrs	r2, r1
 800d67a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	055b      	lsls	r3, r3, #21
 800d680:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	041b      	lsls	r3, r3, #16
 800d686:	697a      	ldr	r2, [r7, #20]
 800d688:	4313      	orrs	r3, r2
 800d68a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800d696:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	6812      	ldr	r2, [r2, #0]
 800d69e:	6979      	ldr	r1, [r7, #20]
 800d6a0:	430b      	orrs	r3, r1
 800d6a2:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f042 0201 	orr.w	r2, r2, #1
 800d6b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d6b4:	68f8      	ldr	r0, [r7, #12]
 800d6b6:	f7ff fe1f 	bl	800d2f8 <UART_CheckIdleState>
 800d6ba:	4603      	mov	r3, r0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3718      	adds	r7, #24
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b085      	sub	sp, #20
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d101      	bne.n	800d6da <HAL_UARTEx_DisableFifoMode+0x16>
 800d6d6:	2302      	movs	r3, #2
 800d6d8:	e027      	b.n	800d72a <HAL_UARTEx_DisableFifoMode+0x66>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2224      	movs	r2, #36	; 0x24
 800d6e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f022 0201 	bic.w	r2, r2, #1
 800d700:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d708:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2220      	movs	r2, #32
 800d71c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3714      	adds	r7, #20
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr

0800d736 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d736:	b580      	push	{r7, lr}
 800d738:	b084      	sub	sp, #16
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
 800d73e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d746:	2b01      	cmp	r3, #1
 800d748:	d101      	bne.n	800d74e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d74a:	2302      	movs	r3, #2
 800d74c:	e02d      	b.n	800d7aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2201      	movs	r2, #1
 800d752:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2224      	movs	r2, #36	; 0x24
 800d75a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f022 0201 	bic.w	r2, r2, #1
 800d774:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	683a      	ldr	r2, [r7, #0]
 800d786:	430a      	orrs	r2, r1
 800d788:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f850 	bl	800d830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	68fa      	ldr	r2, [r7, #12]
 800d796:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2220      	movs	r2, #32
 800d79c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d7a8:	2300      	movs	r3, #0
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b084      	sub	sp, #16
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	d101      	bne.n	800d7ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d7c6:	2302      	movs	r3, #2
 800d7c8:	e02d      	b.n	800d826 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2224      	movs	r2, #36	; 0x24
 800d7d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f022 0201 	bic.w	r2, r2, #1
 800d7f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	689b      	ldr	r3, [r3, #8]
 800d7f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	683a      	ldr	r2, [r7, #0]
 800d802:	430a      	orrs	r2, r1
 800d804:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 f812 	bl	800d830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2220      	movs	r2, #32
 800d818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d824:	2300      	movs	r3, #0
}
 800d826:	4618      	mov	r0, r3
 800d828:	3710      	adds	r7, #16
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
	...

0800d830 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d830:	b480      	push	{r7}
 800d832:	b085      	sub	sp, #20
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d108      	bne.n	800d852 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2201      	movs	r2, #1
 800d844:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2201      	movs	r2, #1
 800d84c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d850:	e031      	b.n	800d8b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d852:	2308      	movs	r3, #8
 800d854:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d856:	2308      	movs	r3, #8
 800d858:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	0e5b      	lsrs	r3, r3, #25
 800d862:	b2db      	uxtb	r3, r3
 800d864:	f003 0307 	and.w	r3, r3, #7
 800d868:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	0f5b      	lsrs	r3, r3, #29
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f003 0307 	and.w	r3, r3, #7
 800d878:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d87a:	7bbb      	ldrb	r3, [r7, #14]
 800d87c:	7b3a      	ldrb	r2, [r7, #12]
 800d87e:	4911      	ldr	r1, [pc, #68]	; (800d8c4 <UARTEx_SetNbDataToProcess+0x94>)
 800d880:	5c8a      	ldrb	r2, [r1, r2]
 800d882:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d886:	7b3a      	ldrb	r2, [r7, #12]
 800d888:	490f      	ldr	r1, [pc, #60]	; (800d8c8 <UARTEx_SetNbDataToProcess+0x98>)
 800d88a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d88c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d890:	b29a      	uxth	r2, r3
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d898:	7bfb      	ldrb	r3, [r7, #15]
 800d89a:	7b7a      	ldrb	r2, [r7, #13]
 800d89c:	4909      	ldr	r1, [pc, #36]	; (800d8c4 <UARTEx_SetNbDataToProcess+0x94>)
 800d89e:	5c8a      	ldrb	r2, [r1, r2]
 800d8a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d8a4:	7b7a      	ldrb	r2, [r7, #13]
 800d8a6:	4908      	ldr	r1, [pc, #32]	; (800d8c8 <UARTEx_SetNbDataToProcess+0x98>)
 800d8a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d8b6:	bf00      	nop
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	0800e95c 	.word	0x0800e95c
 800d8c8:	0800e964 	.word	0x0800e964

0800d8cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b085      	sub	sp, #20
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d8d4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d8d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d8e0:	b29a      	uxth	r2, r3
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	43db      	mvns	r3, r3
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	4013      	ands	r3, r2
 800d8ec:	b29a      	uxth	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d8f4:	2300      	movs	r3, #0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3714      	adds	r7, #20
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr

0800d902 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d902:	b480      	push	{r7}
 800d904:	b085      	sub	sp, #20
 800d906:	af00      	add	r7, sp, #0
 800d908:	60f8      	str	r0, [r7, #12]
 800d90a:	1d3b      	adds	r3, r7, #4
 800d90c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2201      	movs	r2, #1
 800d914:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2200      	movs	r2, #0
 800d91c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2200      	movs	r2, #0
 800d924:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2200      	movs	r2, #0
 800d92c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3714      	adds	r7, #20
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
	...

0800d940 <roundf>:
 800d940:	ee10 0a10 	vmov	r0, s0
 800d944:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800d948:	3a7f      	subs	r2, #127	; 0x7f
 800d94a:	2a16      	cmp	r2, #22
 800d94c:	dc15      	bgt.n	800d97a <roundf+0x3a>
 800d94e:	2a00      	cmp	r2, #0
 800d950:	da08      	bge.n	800d964 <roundf+0x24>
 800d952:	3201      	adds	r2, #1
 800d954:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d958:	d101      	bne.n	800d95e <roundf+0x1e>
 800d95a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d95e:	ee00 3a10 	vmov	s0, r3
 800d962:	4770      	bx	lr
 800d964:	4907      	ldr	r1, [pc, #28]	; (800d984 <roundf+0x44>)
 800d966:	4111      	asrs	r1, r2
 800d968:	4208      	tst	r0, r1
 800d96a:	d0fa      	beq.n	800d962 <roundf+0x22>
 800d96c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d970:	4113      	asrs	r3, r2
 800d972:	4403      	add	r3, r0
 800d974:	ea23 0301 	bic.w	r3, r3, r1
 800d978:	e7f1      	b.n	800d95e <roundf+0x1e>
 800d97a:	2a80      	cmp	r2, #128	; 0x80
 800d97c:	d1f1      	bne.n	800d962 <roundf+0x22>
 800d97e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d982:	4770      	bx	lr
 800d984:	007fffff 	.word	0x007fffff

0800d988 <atoi>:
 800d988:	220a      	movs	r2, #10
 800d98a:	2100      	movs	r1, #0
 800d98c:	f000 b882 	b.w	800da94 <strtol>

0800d990 <_strtol_l.constprop.0>:
 800d990:	2b01      	cmp	r3, #1
 800d992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d996:	d001      	beq.n	800d99c <_strtol_l.constprop.0+0xc>
 800d998:	2b24      	cmp	r3, #36	; 0x24
 800d99a:	d906      	bls.n	800d9aa <_strtol_l.constprop.0+0x1a>
 800d99c:	f000 fac8 	bl	800df30 <__errno>
 800d9a0:	2316      	movs	r3, #22
 800d9a2:	6003      	str	r3, [r0, #0]
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800da90 <_strtol_l.constprop.0+0x100>
 800d9ae:	460d      	mov	r5, r1
 800d9b0:	462e      	mov	r6, r5
 800d9b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d9b6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d9ba:	f017 0708 	ands.w	r7, r7, #8
 800d9be:	d1f7      	bne.n	800d9b0 <_strtol_l.constprop.0+0x20>
 800d9c0:	2c2d      	cmp	r4, #45	; 0x2d
 800d9c2:	d132      	bne.n	800da2a <_strtol_l.constprop.0+0x9a>
 800d9c4:	782c      	ldrb	r4, [r5, #0]
 800d9c6:	2701      	movs	r7, #1
 800d9c8:	1cb5      	adds	r5, r6, #2
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d05b      	beq.n	800da86 <_strtol_l.constprop.0+0xf6>
 800d9ce:	2b10      	cmp	r3, #16
 800d9d0:	d109      	bne.n	800d9e6 <_strtol_l.constprop.0+0x56>
 800d9d2:	2c30      	cmp	r4, #48	; 0x30
 800d9d4:	d107      	bne.n	800d9e6 <_strtol_l.constprop.0+0x56>
 800d9d6:	782c      	ldrb	r4, [r5, #0]
 800d9d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d9dc:	2c58      	cmp	r4, #88	; 0x58
 800d9de:	d14d      	bne.n	800da7c <_strtol_l.constprop.0+0xec>
 800d9e0:	786c      	ldrb	r4, [r5, #1]
 800d9e2:	2310      	movs	r3, #16
 800d9e4:	3502      	adds	r5, #2
 800d9e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d9ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800d9ee:	f04f 0e00 	mov.w	lr, #0
 800d9f2:	fbb8 f9f3 	udiv	r9, r8, r3
 800d9f6:	4676      	mov	r6, lr
 800d9f8:	fb03 8a19 	mls	sl, r3, r9, r8
 800d9fc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800da00:	f1bc 0f09 	cmp.w	ip, #9
 800da04:	d816      	bhi.n	800da34 <_strtol_l.constprop.0+0xa4>
 800da06:	4664      	mov	r4, ip
 800da08:	42a3      	cmp	r3, r4
 800da0a:	dd24      	ble.n	800da56 <_strtol_l.constprop.0+0xc6>
 800da0c:	f1be 3fff 	cmp.w	lr, #4294967295
 800da10:	d008      	beq.n	800da24 <_strtol_l.constprop.0+0x94>
 800da12:	45b1      	cmp	r9, r6
 800da14:	d31c      	bcc.n	800da50 <_strtol_l.constprop.0+0xc0>
 800da16:	d101      	bne.n	800da1c <_strtol_l.constprop.0+0x8c>
 800da18:	45a2      	cmp	sl, r4
 800da1a:	db19      	blt.n	800da50 <_strtol_l.constprop.0+0xc0>
 800da1c:	fb06 4603 	mla	r6, r6, r3, r4
 800da20:	f04f 0e01 	mov.w	lr, #1
 800da24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da28:	e7e8      	b.n	800d9fc <_strtol_l.constprop.0+0x6c>
 800da2a:	2c2b      	cmp	r4, #43	; 0x2b
 800da2c:	bf04      	itt	eq
 800da2e:	782c      	ldrbeq	r4, [r5, #0]
 800da30:	1cb5      	addeq	r5, r6, #2
 800da32:	e7ca      	b.n	800d9ca <_strtol_l.constprop.0+0x3a>
 800da34:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800da38:	f1bc 0f19 	cmp.w	ip, #25
 800da3c:	d801      	bhi.n	800da42 <_strtol_l.constprop.0+0xb2>
 800da3e:	3c37      	subs	r4, #55	; 0x37
 800da40:	e7e2      	b.n	800da08 <_strtol_l.constprop.0+0x78>
 800da42:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800da46:	f1bc 0f19 	cmp.w	ip, #25
 800da4a:	d804      	bhi.n	800da56 <_strtol_l.constprop.0+0xc6>
 800da4c:	3c57      	subs	r4, #87	; 0x57
 800da4e:	e7db      	b.n	800da08 <_strtol_l.constprop.0+0x78>
 800da50:	f04f 3eff 	mov.w	lr, #4294967295
 800da54:	e7e6      	b.n	800da24 <_strtol_l.constprop.0+0x94>
 800da56:	f1be 3fff 	cmp.w	lr, #4294967295
 800da5a:	d105      	bne.n	800da68 <_strtol_l.constprop.0+0xd8>
 800da5c:	2322      	movs	r3, #34	; 0x22
 800da5e:	6003      	str	r3, [r0, #0]
 800da60:	4646      	mov	r6, r8
 800da62:	b942      	cbnz	r2, 800da76 <_strtol_l.constprop.0+0xe6>
 800da64:	4630      	mov	r0, r6
 800da66:	e79e      	b.n	800d9a6 <_strtol_l.constprop.0+0x16>
 800da68:	b107      	cbz	r7, 800da6c <_strtol_l.constprop.0+0xdc>
 800da6a:	4276      	negs	r6, r6
 800da6c:	2a00      	cmp	r2, #0
 800da6e:	d0f9      	beq.n	800da64 <_strtol_l.constprop.0+0xd4>
 800da70:	f1be 0f00 	cmp.w	lr, #0
 800da74:	d000      	beq.n	800da78 <_strtol_l.constprop.0+0xe8>
 800da76:	1e69      	subs	r1, r5, #1
 800da78:	6011      	str	r1, [r2, #0]
 800da7a:	e7f3      	b.n	800da64 <_strtol_l.constprop.0+0xd4>
 800da7c:	2430      	movs	r4, #48	; 0x30
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d1b1      	bne.n	800d9e6 <_strtol_l.constprop.0+0x56>
 800da82:	2308      	movs	r3, #8
 800da84:	e7af      	b.n	800d9e6 <_strtol_l.constprop.0+0x56>
 800da86:	2c30      	cmp	r4, #48	; 0x30
 800da88:	d0a5      	beq.n	800d9d6 <_strtol_l.constprop.0+0x46>
 800da8a:	230a      	movs	r3, #10
 800da8c:	e7ab      	b.n	800d9e6 <_strtol_l.constprop.0+0x56>
 800da8e:	bf00      	nop
 800da90:	0800e96d 	.word	0x0800e96d

0800da94 <strtol>:
 800da94:	4613      	mov	r3, r2
 800da96:	460a      	mov	r2, r1
 800da98:	4601      	mov	r1, r0
 800da9a:	4802      	ldr	r0, [pc, #8]	; (800daa4 <strtol+0x10>)
 800da9c:	6800      	ldr	r0, [r0, #0]
 800da9e:	f7ff bf77 	b.w	800d990 <_strtol_l.constprop.0>
 800daa2:	bf00      	nop
 800daa4:	20000064 	.word	0x20000064

0800daa8 <std>:
 800daa8:	2300      	movs	r3, #0
 800daaa:	b510      	push	{r4, lr}
 800daac:	4604      	mov	r4, r0
 800daae:	e9c0 3300 	strd	r3, r3, [r0]
 800dab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dab6:	6083      	str	r3, [r0, #8]
 800dab8:	8181      	strh	r1, [r0, #12]
 800daba:	6643      	str	r3, [r0, #100]	; 0x64
 800dabc:	81c2      	strh	r2, [r0, #14]
 800dabe:	6183      	str	r3, [r0, #24]
 800dac0:	4619      	mov	r1, r3
 800dac2:	2208      	movs	r2, #8
 800dac4:	305c      	adds	r0, #92	; 0x5c
 800dac6:	f000 f9e5 	bl	800de94 <memset>
 800daca:	4b0d      	ldr	r3, [pc, #52]	; (800db00 <std+0x58>)
 800dacc:	6263      	str	r3, [r4, #36]	; 0x24
 800dace:	4b0d      	ldr	r3, [pc, #52]	; (800db04 <std+0x5c>)
 800dad0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dad2:	4b0d      	ldr	r3, [pc, #52]	; (800db08 <std+0x60>)
 800dad4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dad6:	4b0d      	ldr	r3, [pc, #52]	; (800db0c <std+0x64>)
 800dad8:	6323      	str	r3, [r4, #48]	; 0x30
 800dada:	4b0d      	ldr	r3, [pc, #52]	; (800db10 <std+0x68>)
 800dadc:	6224      	str	r4, [r4, #32]
 800dade:	429c      	cmp	r4, r3
 800dae0:	d006      	beq.n	800daf0 <std+0x48>
 800dae2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800dae6:	4294      	cmp	r4, r2
 800dae8:	d002      	beq.n	800daf0 <std+0x48>
 800daea:	33d0      	adds	r3, #208	; 0xd0
 800daec:	429c      	cmp	r4, r3
 800daee:	d105      	bne.n	800dafc <std+0x54>
 800daf0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800daf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daf8:	f000 ba44 	b.w	800df84 <__retarget_lock_init_recursive>
 800dafc:	bd10      	pop	{r4, pc}
 800dafe:	bf00      	nop
 800db00:	0800dce5 	.word	0x0800dce5
 800db04:	0800dd07 	.word	0x0800dd07
 800db08:	0800dd3f 	.word	0x0800dd3f
 800db0c:	0800dd63 	.word	0x0800dd63
 800db10:	20000ce4 	.word	0x20000ce4

0800db14 <stdio_exit_handler>:
 800db14:	4a02      	ldr	r2, [pc, #8]	; (800db20 <stdio_exit_handler+0xc>)
 800db16:	4903      	ldr	r1, [pc, #12]	; (800db24 <stdio_exit_handler+0x10>)
 800db18:	4803      	ldr	r0, [pc, #12]	; (800db28 <stdio_exit_handler+0x14>)
 800db1a:	f000 b869 	b.w	800dbf0 <_fwalk_sglue>
 800db1e:	bf00      	nop
 800db20:	2000000c 	.word	0x2000000c
 800db24:	0800e2a5 	.word	0x0800e2a5
 800db28:	20000018 	.word	0x20000018

0800db2c <cleanup_stdio>:
 800db2c:	6841      	ldr	r1, [r0, #4]
 800db2e:	4b0c      	ldr	r3, [pc, #48]	; (800db60 <cleanup_stdio+0x34>)
 800db30:	4299      	cmp	r1, r3
 800db32:	b510      	push	{r4, lr}
 800db34:	4604      	mov	r4, r0
 800db36:	d001      	beq.n	800db3c <cleanup_stdio+0x10>
 800db38:	f000 fbb4 	bl	800e2a4 <_fflush_r>
 800db3c:	68a1      	ldr	r1, [r4, #8]
 800db3e:	4b09      	ldr	r3, [pc, #36]	; (800db64 <cleanup_stdio+0x38>)
 800db40:	4299      	cmp	r1, r3
 800db42:	d002      	beq.n	800db4a <cleanup_stdio+0x1e>
 800db44:	4620      	mov	r0, r4
 800db46:	f000 fbad 	bl	800e2a4 <_fflush_r>
 800db4a:	68e1      	ldr	r1, [r4, #12]
 800db4c:	4b06      	ldr	r3, [pc, #24]	; (800db68 <cleanup_stdio+0x3c>)
 800db4e:	4299      	cmp	r1, r3
 800db50:	d004      	beq.n	800db5c <cleanup_stdio+0x30>
 800db52:	4620      	mov	r0, r4
 800db54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db58:	f000 bba4 	b.w	800e2a4 <_fflush_r>
 800db5c:	bd10      	pop	{r4, pc}
 800db5e:	bf00      	nop
 800db60:	20000ce4 	.word	0x20000ce4
 800db64:	20000d4c 	.word	0x20000d4c
 800db68:	20000db4 	.word	0x20000db4

0800db6c <global_stdio_init.part.0>:
 800db6c:	b510      	push	{r4, lr}
 800db6e:	4b0b      	ldr	r3, [pc, #44]	; (800db9c <global_stdio_init.part.0+0x30>)
 800db70:	4c0b      	ldr	r4, [pc, #44]	; (800dba0 <global_stdio_init.part.0+0x34>)
 800db72:	4a0c      	ldr	r2, [pc, #48]	; (800dba4 <global_stdio_init.part.0+0x38>)
 800db74:	601a      	str	r2, [r3, #0]
 800db76:	4620      	mov	r0, r4
 800db78:	2200      	movs	r2, #0
 800db7a:	2104      	movs	r1, #4
 800db7c:	f7ff ff94 	bl	800daa8 <std>
 800db80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800db84:	2201      	movs	r2, #1
 800db86:	2109      	movs	r1, #9
 800db88:	f7ff ff8e 	bl	800daa8 <std>
 800db8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800db90:	2202      	movs	r2, #2
 800db92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db96:	2112      	movs	r1, #18
 800db98:	f7ff bf86 	b.w	800daa8 <std>
 800db9c:	20000e1c 	.word	0x20000e1c
 800dba0:	20000ce4 	.word	0x20000ce4
 800dba4:	0800db15 	.word	0x0800db15

0800dba8 <__sfp_lock_acquire>:
 800dba8:	4801      	ldr	r0, [pc, #4]	; (800dbb0 <__sfp_lock_acquire+0x8>)
 800dbaa:	f000 b9ec 	b.w	800df86 <__retarget_lock_acquire_recursive>
 800dbae:	bf00      	nop
 800dbb0:	20000e25 	.word	0x20000e25

0800dbb4 <__sfp_lock_release>:
 800dbb4:	4801      	ldr	r0, [pc, #4]	; (800dbbc <__sfp_lock_release+0x8>)
 800dbb6:	f000 b9e7 	b.w	800df88 <__retarget_lock_release_recursive>
 800dbba:	bf00      	nop
 800dbbc:	20000e25 	.word	0x20000e25

0800dbc0 <__sinit>:
 800dbc0:	b510      	push	{r4, lr}
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	f7ff fff0 	bl	800dba8 <__sfp_lock_acquire>
 800dbc8:	6a23      	ldr	r3, [r4, #32]
 800dbca:	b11b      	cbz	r3, 800dbd4 <__sinit+0x14>
 800dbcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbd0:	f7ff bff0 	b.w	800dbb4 <__sfp_lock_release>
 800dbd4:	4b04      	ldr	r3, [pc, #16]	; (800dbe8 <__sinit+0x28>)
 800dbd6:	6223      	str	r3, [r4, #32]
 800dbd8:	4b04      	ldr	r3, [pc, #16]	; (800dbec <__sinit+0x2c>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d1f5      	bne.n	800dbcc <__sinit+0xc>
 800dbe0:	f7ff ffc4 	bl	800db6c <global_stdio_init.part.0>
 800dbe4:	e7f2      	b.n	800dbcc <__sinit+0xc>
 800dbe6:	bf00      	nop
 800dbe8:	0800db2d 	.word	0x0800db2d
 800dbec:	20000e1c 	.word	0x20000e1c

0800dbf0 <_fwalk_sglue>:
 800dbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbf4:	4607      	mov	r7, r0
 800dbf6:	4688      	mov	r8, r1
 800dbf8:	4614      	mov	r4, r2
 800dbfa:	2600      	movs	r6, #0
 800dbfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc00:	f1b9 0901 	subs.w	r9, r9, #1
 800dc04:	d505      	bpl.n	800dc12 <_fwalk_sglue+0x22>
 800dc06:	6824      	ldr	r4, [r4, #0]
 800dc08:	2c00      	cmp	r4, #0
 800dc0a:	d1f7      	bne.n	800dbfc <_fwalk_sglue+0xc>
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc12:	89ab      	ldrh	r3, [r5, #12]
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d907      	bls.n	800dc28 <_fwalk_sglue+0x38>
 800dc18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	d003      	beq.n	800dc28 <_fwalk_sglue+0x38>
 800dc20:	4629      	mov	r1, r5
 800dc22:	4638      	mov	r0, r7
 800dc24:	47c0      	blx	r8
 800dc26:	4306      	orrs	r6, r0
 800dc28:	3568      	adds	r5, #104	; 0x68
 800dc2a:	e7e9      	b.n	800dc00 <_fwalk_sglue+0x10>

0800dc2c <_puts_r>:
 800dc2c:	6a03      	ldr	r3, [r0, #32]
 800dc2e:	b570      	push	{r4, r5, r6, lr}
 800dc30:	6884      	ldr	r4, [r0, #8]
 800dc32:	4605      	mov	r5, r0
 800dc34:	460e      	mov	r6, r1
 800dc36:	b90b      	cbnz	r3, 800dc3c <_puts_r+0x10>
 800dc38:	f7ff ffc2 	bl	800dbc0 <__sinit>
 800dc3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc3e:	07db      	lsls	r3, r3, #31
 800dc40:	d405      	bmi.n	800dc4e <_puts_r+0x22>
 800dc42:	89a3      	ldrh	r3, [r4, #12]
 800dc44:	0598      	lsls	r0, r3, #22
 800dc46:	d402      	bmi.n	800dc4e <_puts_r+0x22>
 800dc48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc4a:	f000 f99c 	bl	800df86 <__retarget_lock_acquire_recursive>
 800dc4e:	89a3      	ldrh	r3, [r4, #12]
 800dc50:	0719      	lsls	r1, r3, #28
 800dc52:	d513      	bpl.n	800dc7c <_puts_r+0x50>
 800dc54:	6923      	ldr	r3, [r4, #16]
 800dc56:	b18b      	cbz	r3, 800dc7c <_puts_r+0x50>
 800dc58:	3e01      	subs	r6, #1
 800dc5a:	68a3      	ldr	r3, [r4, #8]
 800dc5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dc60:	3b01      	subs	r3, #1
 800dc62:	60a3      	str	r3, [r4, #8]
 800dc64:	b9e9      	cbnz	r1, 800dca2 <_puts_r+0x76>
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	da2e      	bge.n	800dcc8 <_puts_r+0x9c>
 800dc6a:	4622      	mov	r2, r4
 800dc6c:	210a      	movs	r1, #10
 800dc6e:	4628      	mov	r0, r5
 800dc70:	f000 f87b 	bl	800dd6a <__swbuf_r>
 800dc74:	3001      	adds	r0, #1
 800dc76:	d007      	beq.n	800dc88 <_puts_r+0x5c>
 800dc78:	250a      	movs	r5, #10
 800dc7a:	e007      	b.n	800dc8c <_puts_r+0x60>
 800dc7c:	4621      	mov	r1, r4
 800dc7e:	4628      	mov	r0, r5
 800dc80:	f000 f8b0 	bl	800dde4 <__swsetup_r>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d0e7      	beq.n	800dc58 <_puts_r+0x2c>
 800dc88:	f04f 35ff 	mov.w	r5, #4294967295
 800dc8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc8e:	07da      	lsls	r2, r3, #31
 800dc90:	d405      	bmi.n	800dc9e <_puts_r+0x72>
 800dc92:	89a3      	ldrh	r3, [r4, #12]
 800dc94:	059b      	lsls	r3, r3, #22
 800dc96:	d402      	bmi.n	800dc9e <_puts_r+0x72>
 800dc98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc9a:	f000 f975 	bl	800df88 <__retarget_lock_release_recursive>
 800dc9e:	4628      	mov	r0, r5
 800dca0:	bd70      	pop	{r4, r5, r6, pc}
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	da04      	bge.n	800dcb0 <_puts_r+0x84>
 800dca6:	69a2      	ldr	r2, [r4, #24]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	dc06      	bgt.n	800dcba <_puts_r+0x8e>
 800dcac:	290a      	cmp	r1, #10
 800dcae:	d004      	beq.n	800dcba <_puts_r+0x8e>
 800dcb0:	6823      	ldr	r3, [r4, #0]
 800dcb2:	1c5a      	adds	r2, r3, #1
 800dcb4:	6022      	str	r2, [r4, #0]
 800dcb6:	7019      	strb	r1, [r3, #0]
 800dcb8:	e7cf      	b.n	800dc5a <_puts_r+0x2e>
 800dcba:	4622      	mov	r2, r4
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	f000 f854 	bl	800dd6a <__swbuf_r>
 800dcc2:	3001      	adds	r0, #1
 800dcc4:	d1c9      	bne.n	800dc5a <_puts_r+0x2e>
 800dcc6:	e7df      	b.n	800dc88 <_puts_r+0x5c>
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	250a      	movs	r5, #10
 800dccc:	1c5a      	adds	r2, r3, #1
 800dcce:	6022      	str	r2, [r4, #0]
 800dcd0:	701d      	strb	r5, [r3, #0]
 800dcd2:	e7db      	b.n	800dc8c <_puts_r+0x60>

0800dcd4 <puts>:
 800dcd4:	4b02      	ldr	r3, [pc, #8]	; (800dce0 <puts+0xc>)
 800dcd6:	4601      	mov	r1, r0
 800dcd8:	6818      	ldr	r0, [r3, #0]
 800dcda:	f7ff bfa7 	b.w	800dc2c <_puts_r>
 800dcde:	bf00      	nop
 800dce0:	20000064 	.word	0x20000064

0800dce4 <__sread>:
 800dce4:	b510      	push	{r4, lr}
 800dce6:	460c      	mov	r4, r1
 800dce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcec:	f000 f8fc 	bl	800dee8 <_read_r>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	bfab      	itete	ge
 800dcf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dcf6:	89a3      	ldrhlt	r3, [r4, #12]
 800dcf8:	181b      	addge	r3, r3, r0
 800dcfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dcfe:	bfac      	ite	ge
 800dd00:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd02:	81a3      	strhlt	r3, [r4, #12]
 800dd04:	bd10      	pop	{r4, pc}

0800dd06 <__swrite>:
 800dd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0a:	461f      	mov	r7, r3
 800dd0c:	898b      	ldrh	r3, [r1, #12]
 800dd0e:	05db      	lsls	r3, r3, #23
 800dd10:	4605      	mov	r5, r0
 800dd12:	460c      	mov	r4, r1
 800dd14:	4616      	mov	r6, r2
 800dd16:	d505      	bpl.n	800dd24 <__swrite+0x1e>
 800dd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f000 f8d0 	bl	800dec4 <_lseek_r>
 800dd24:	89a3      	ldrh	r3, [r4, #12]
 800dd26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd2e:	81a3      	strh	r3, [r4, #12]
 800dd30:	4632      	mov	r2, r6
 800dd32:	463b      	mov	r3, r7
 800dd34:	4628      	mov	r0, r5
 800dd36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3a:	f000 b8e7 	b.w	800df0c <_write_r>

0800dd3e <__sseek>:
 800dd3e:	b510      	push	{r4, lr}
 800dd40:	460c      	mov	r4, r1
 800dd42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd46:	f000 f8bd 	bl	800dec4 <_lseek_r>
 800dd4a:	1c43      	adds	r3, r0, #1
 800dd4c:	89a3      	ldrh	r3, [r4, #12]
 800dd4e:	bf15      	itete	ne
 800dd50:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd5a:	81a3      	strheq	r3, [r4, #12]
 800dd5c:	bf18      	it	ne
 800dd5e:	81a3      	strhne	r3, [r4, #12]
 800dd60:	bd10      	pop	{r4, pc}

0800dd62 <__sclose>:
 800dd62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd66:	f000 b89d 	b.w	800dea4 <_close_r>

0800dd6a <__swbuf_r>:
 800dd6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6c:	460e      	mov	r6, r1
 800dd6e:	4614      	mov	r4, r2
 800dd70:	4605      	mov	r5, r0
 800dd72:	b118      	cbz	r0, 800dd7c <__swbuf_r+0x12>
 800dd74:	6a03      	ldr	r3, [r0, #32]
 800dd76:	b90b      	cbnz	r3, 800dd7c <__swbuf_r+0x12>
 800dd78:	f7ff ff22 	bl	800dbc0 <__sinit>
 800dd7c:	69a3      	ldr	r3, [r4, #24]
 800dd7e:	60a3      	str	r3, [r4, #8]
 800dd80:	89a3      	ldrh	r3, [r4, #12]
 800dd82:	071a      	lsls	r2, r3, #28
 800dd84:	d525      	bpl.n	800ddd2 <__swbuf_r+0x68>
 800dd86:	6923      	ldr	r3, [r4, #16]
 800dd88:	b31b      	cbz	r3, 800ddd2 <__swbuf_r+0x68>
 800dd8a:	6823      	ldr	r3, [r4, #0]
 800dd8c:	6922      	ldr	r2, [r4, #16]
 800dd8e:	1a98      	subs	r0, r3, r2
 800dd90:	6963      	ldr	r3, [r4, #20]
 800dd92:	b2f6      	uxtb	r6, r6
 800dd94:	4283      	cmp	r3, r0
 800dd96:	4637      	mov	r7, r6
 800dd98:	dc04      	bgt.n	800dda4 <__swbuf_r+0x3a>
 800dd9a:	4621      	mov	r1, r4
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	f000 fa81 	bl	800e2a4 <_fflush_r>
 800dda2:	b9e0      	cbnz	r0, 800ddde <__swbuf_r+0x74>
 800dda4:	68a3      	ldr	r3, [r4, #8]
 800dda6:	3b01      	subs	r3, #1
 800dda8:	60a3      	str	r3, [r4, #8]
 800ddaa:	6823      	ldr	r3, [r4, #0]
 800ddac:	1c5a      	adds	r2, r3, #1
 800ddae:	6022      	str	r2, [r4, #0]
 800ddb0:	701e      	strb	r6, [r3, #0]
 800ddb2:	6962      	ldr	r2, [r4, #20]
 800ddb4:	1c43      	adds	r3, r0, #1
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d004      	beq.n	800ddc4 <__swbuf_r+0x5a>
 800ddba:	89a3      	ldrh	r3, [r4, #12]
 800ddbc:	07db      	lsls	r3, r3, #31
 800ddbe:	d506      	bpl.n	800ddce <__swbuf_r+0x64>
 800ddc0:	2e0a      	cmp	r6, #10
 800ddc2:	d104      	bne.n	800ddce <__swbuf_r+0x64>
 800ddc4:	4621      	mov	r1, r4
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	f000 fa6c 	bl	800e2a4 <_fflush_r>
 800ddcc:	b938      	cbnz	r0, 800ddde <__swbuf_r+0x74>
 800ddce:	4638      	mov	r0, r7
 800ddd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddd2:	4621      	mov	r1, r4
 800ddd4:	4628      	mov	r0, r5
 800ddd6:	f000 f805 	bl	800dde4 <__swsetup_r>
 800ddda:	2800      	cmp	r0, #0
 800dddc:	d0d5      	beq.n	800dd8a <__swbuf_r+0x20>
 800ddde:	f04f 37ff 	mov.w	r7, #4294967295
 800dde2:	e7f4      	b.n	800ddce <__swbuf_r+0x64>

0800dde4 <__swsetup_r>:
 800dde4:	b538      	push	{r3, r4, r5, lr}
 800dde6:	4b2a      	ldr	r3, [pc, #168]	; (800de90 <__swsetup_r+0xac>)
 800dde8:	4605      	mov	r5, r0
 800ddea:	6818      	ldr	r0, [r3, #0]
 800ddec:	460c      	mov	r4, r1
 800ddee:	b118      	cbz	r0, 800ddf8 <__swsetup_r+0x14>
 800ddf0:	6a03      	ldr	r3, [r0, #32]
 800ddf2:	b90b      	cbnz	r3, 800ddf8 <__swsetup_r+0x14>
 800ddf4:	f7ff fee4 	bl	800dbc0 <__sinit>
 800ddf8:	89a3      	ldrh	r3, [r4, #12]
 800ddfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddfe:	0718      	lsls	r0, r3, #28
 800de00:	d422      	bmi.n	800de48 <__swsetup_r+0x64>
 800de02:	06d9      	lsls	r1, r3, #27
 800de04:	d407      	bmi.n	800de16 <__swsetup_r+0x32>
 800de06:	2309      	movs	r3, #9
 800de08:	602b      	str	r3, [r5, #0]
 800de0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de0e:	81a3      	strh	r3, [r4, #12]
 800de10:	f04f 30ff 	mov.w	r0, #4294967295
 800de14:	e034      	b.n	800de80 <__swsetup_r+0x9c>
 800de16:	0758      	lsls	r0, r3, #29
 800de18:	d512      	bpl.n	800de40 <__swsetup_r+0x5c>
 800de1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de1c:	b141      	cbz	r1, 800de30 <__swsetup_r+0x4c>
 800de1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de22:	4299      	cmp	r1, r3
 800de24:	d002      	beq.n	800de2c <__swsetup_r+0x48>
 800de26:	4628      	mov	r0, r5
 800de28:	f000 f8be 	bl	800dfa8 <_free_r>
 800de2c:	2300      	movs	r3, #0
 800de2e:	6363      	str	r3, [r4, #52]	; 0x34
 800de30:	89a3      	ldrh	r3, [r4, #12]
 800de32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de36:	81a3      	strh	r3, [r4, #12]
 800de38:	2300      	movs	r3, #0
 800de3a:	6063      	str	r3, [r4, #4]
 800de3c:	6923      	ldr	r3, [r4, #16]
 800de3e:	6023      	str	r3, [r4, #0]
 800de40:	89a3      	ldrh	r3, [r4, #12]
 800de42:	f043 0308 	orr.w	r3, r3, #8
 800de46:	81a3      	strh	r3, [r4, #12]
 800de48:	6923      	ldr	r3, [r4, #16]
 800de4a:	b94b      	cbnz	r3, 800de60 <__swsetup_r+0x7c>
 800de4c:	89a3      	ldrh	r3, [r4, #12]
 800de4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de56:	d003      	beq.n	800de60 <__swsetup_r+0x7c>
 800de58:	4621      	mov	r1, r4
 800de5a:	4628      	mov	r0, r5
 800de5c:	f000 fa70 	bl	800e340 <__smakebuf_r>
 800de60:	89a0      	ldrh	r0, [r4, #12]
 800de62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de66:	f010 0301 	ands.w	r3, r0, #1
 800de6a:	d00a      	beq.n	800de82 <__swsetup_r+0x9e>
 800de6c:	2300      	movs	r3, #0
 800de6e:	60a3      	str	r3, [r4, #8]
 800de70:	6963      	ldr	r3, [r4, #20]
 800de72:	425b      	negs	r3, r3
 800de74:	61a3      	str	r3, [r4, #24]
 800de76:	6923      	ldr	r3, [r4, #16]
 800de78:	b943      	cbnz	r3, 800de8c <__swsetup_r+0xa8>
 800de7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de7e:	d1c4      	bne.n	800de0a <__swsetup_r+0x26>
 800de80:	bd38      	pop	{r3, r4, r5, pc}
 800de82:	0781      	lsls	r1, r0, #30
 800de84:	bf58      	it	pl
 800de86:	6963      	ldrpl	r3, [r4, #20]
 800de88:	60a3      	str	r3, [r4, #8]
 800de8a:	e7f4      	b.n	800de76 <__swsetup_r+0x92>
 800de8c:	2000      	movs	r0, #0
 800de8e:	e7f7      	b.n	800de80 <__swsetup_r+0x9c>
 800de90:	20000064 	.word	0x20000064

0800de94 <memset>:
 800de94:	4402      	add	r2, r0
 800de96:	4603      	mov	r3, r0
 800de98:	4293      	cmp	r3, r2
 800de9a:	d100      	bne.n	800de9e <memset+0xa>
 800de9c:	4770      	bx	lr
 800de9e:	f803 1b01 	strb.w	r1, [r3], #1
 800dea2:	e7f9      	b.n	800de98 <memset+0x4>

0800dea4 <_close_r>:
 800dea4:	b538      	push	{r3, r4, r5, lr}
 800dea6:	4d06      	ldr	r5, [pc, #24]	; (800dec0 <_close_r+0x1c>)
 800dea8:	2300      	movs	r3, #0
 800deaa:	4604      	mov	r4, r0
 800deac:	4608      	mov	r0, r1
 800deae:	602b      	str	r3, [r5, #0]
 800deb0:	f7f6 fdf3 	bl	8004a9a <_close>
 800deb4:	1c43      	adds	r3, r0, #1
 800deb6:	d102      	bne.n	800debe <_close_r+0x1a>
 800deb8:	682b      	ldr	r3, [r5, #0]
 800deba:	b103      	cbz	r3, 800debe <_close_r+0x1a>
 800debc:	6023      	str	r3, [r4, #0]
 800debe:	bd38      	pop	{r3, r4, r5, pc}
 800dec0:	20000e20 	.word	0x20000e20

0800dec4 <_lseek_r>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4d07      	ldr	r5, [pc, #28]	; (800dee4 <_lseek_r+0x20>)
 800dec8:	4604      	mov	r4, r0
 800deca:	4608      	mov	r0, r1
 800decc:	4611      	mov	r1, r2
 800dece:	2200      	movs	r2, #0
 800ded0:	602a      	str	r2, [r5, #0]
 800ded2:	461a      	mov	r2, r3
 800ded4:	f7f6 fe08 	bl	8004ae8 <_lseek>
 800ded8:	1c43      	adds	r3, r0, #1
 800deda:	d102      	bne.n	800dee2 <_lseek_r+0x1e>
 800dedc:	682b      	ldr	r3, [r5, #0]
 800dede:	b103      	cbz	r3, 800dee2 <_lseek_r+0x1e>
 800dee0:	6023      	str	r3, [r4, #0]
 800dee2:	bd38      	pop	{r3, r4, r5, pc}
 800dee4:	20000e20 	.word	0x20000e20

0800dee8 <_read_r>:
 800dee8:	b538      	push	{r3, r4, r5, lr}
 800deea:	4d07      	ldr	r5, [pc, #28]	; (800df08 <_read_r+0x20>)
 800deec:	4604      	mov	r4, r0
 800deee:	4608      	mov	r0, r1
 800def0:	4611      	mov	r1, r2
 800def2:	2200      	movs	r2, #0
 800def4:	602a      	str	r2, [r5, #0]
 800def6:	461a      	mov	r2, r3
 800def8:	f7f6 fd96 	bl	8004a28 <_read>
 800defc:	1c43      	adds	r3, r0, #1
 800defe:	d102      	bne.n	800df06 <_read_r+0x1e>
 800df00:	682b      	ldr	r3, [r5, #0]
 800df02:	b103      	cbz	r3, 800df06 <_read_r+0x1e>
 800df04:	6023      	str	r3, [r4, #0]
 800df06:	bd38      	pop	{r3, r4, r5, pc}
 800df08:	20000e20 	.word	0x20000e20

0800df0c <_write_r>:
 800df0c:	b538      	push	{r3, r4, r5, lr}
 800df0e:	4d07      	ldr	r5, [pc, #28]	; (800df2c <_write_r+0x20>)
 800df10:	4604      	mov	r4, r0
 800df12:	4608      	mov	r0, r1
 800df14:	4611      	mov	r1, r2
 800df16:	2200      	movs	r2, #0
 800df18:	602a      	str	r2, [r5, #0]
 800df1a:	461a      	mov	r2, r3
 800df1c:	f7f6 fda1 	bl	8004a62 <_write>
 800df20:	1c43      	adds	r3, r0, #1
 800df22:	d102      	bne.n	800df2a <_write_r+0x1e>
 800df24:	682b      	ldr	r3, [r5, #0]
 800df26:	b103      	cbz	r3, 800df2a <_write_r+0x1e>
 800df28:	6023      	str	r3, [r4, #0]
 800df2a:	bd38      	pop	{r3, r4, r5, pc}
 800df2c:	20000e20 	.word	0x20000e20

0800df30 <__errno>:
 800df30:	4b01      	ldr	r3, [pc, #4]	; (800df38 <__errno+0x8>)
 800df32:	6818      	ldr	r0, [r3, #0]
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	20000064 	.word	0x20000064

0800df3c <__libc_init_array>:
 800df3c:	b570      	push	{r4, r5, r6, lr}
 800df3e:	4d0d      	ldr	r5, [pc, #52]	; (800df74 <__libc_init_array+0x38>)
 800df40:	4c0d      	ldr	r4, [pc, #52]	; (800df78 <__libc_init_array+0x3c>)
 800df42:	1b64      	subs	r4, r4, r5
 800df44:	10a4      	asrs	r4, r4, #2
 800df46:	2600      	movs	r6, #0
 800df48:	42a6      	cmp	r6, r4
 800df4a:	d109      	bne.n	800df60 <__libc_init_array+0x24>
 800df4c:	4d0b      	ldr	r5, [pc, #44]	; (800df7c <__libc_init_array+0x40>)
 800df4e:	4c0c      	ldr	r4, [pc, #48]	; (800df80 <__libc_init_array+0x44>)
 800df50:	f000 fa64 	bl	800e41c <_init>
 800df54:	1b64      	subs	r4, r4, r5
 800df56:	10a4      	asrs	r4, r4, #2
 800df58:	2600      	movs	r6, #0
 800df5a:	42a6      	cmp	r6, r4
 800df5c:	d105      	bne.n	800df6a <__libc_init_array+0x2e>
 800df5e:	bd70      	pop	{r4, r5, r6, pc}
 800df60:	f855 3b04 	ldr.w	r3, [r5], #4
 800df64:	4798      	blx	r3
 800df66:	3601      	adds	r6, #1
 800df68:	e7ee      	b.n	800df48 <__libc_init_array+0xc>
 800df6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800df6e:	4798      	blx	r3
 800df70:	3601      	adds	r6, #1
 800df72:	e7f2      	b.n	800df5a <__libc_init_array+0x1e>
 800df74:	0800ea78 	.word	0x0800ea78
 800df78:	0800ea78 	.word	0x0800ea78
 800df7c:	0800ea78 	.word	0x0800ea78
 800df80:	0800ea7c 	.word	0x0800ea7c

0800df84 <__retarget_lock_init_recursive>:
 800df84:	4770      	bx	lr

0800df86 <__retarget_lock_acquire_recursive>:
 800df86:	4770      	bx	lr

0800df88 <__retarget_lock_release_recursive>:
 800df88:	4770      	bx	lr

0800df8a <memcpy>:
 800df8a:	440a      	add	r2, r1
 800df8c:	4291      	cmp	r1, r2
 800df8e:	f100 33ff 	add.w	r3, r0, #4294967295
 800df92:	d100      	bne.n	800df96 <memcpy+0xc>
 800df94:	4770      	bx	lr
 800df96:	b510      	push	{r4, lr}
 800df98:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfa0:	4291      	cmp	r1, r2
 800dfa2:	d1f9      	bne.n	800df98 <memcpy+0xe>
 800dfa4:	bd10      	pop	{r4, pc}
	...

0800dfa8 <_free_r>:
 800dfa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfaa:	2900      	cmp	r1, #0
 800dfac:	d044      	beq.n	800e038 <_free_r+0x90>
 800dfae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfb2:	9001      	str	r0, [sp, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f1a1 0404 	sub.w	r4, r1, #4
 800dfba:	bfb8      	it	lt
 800dfbc:	18e4      	addlt	r4, r4, r3
 800dfbe:	f000 f8df 	bl	800e180 <__malloc_lock>
 800dfc2:	4a1e      	ldr	r2, [pc, #120]	; (800e03c <_free_r+0x94>)
 800dfc4:	9801      	ldr	r0, [sp, #4]
 800dfc6:	6813      	ldr	r3, [r2, #0]
 800dfc8:	b933      	cbnz	r3, 800dfd8 <_free_r+0x30>
 800dfca:	6063      	str	r3, [r4, #4]
 800dfcc:	6014      	str	r4, [r2, #0]
 800dfce:	b003      	add	sp, #12
 800dfd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfd4:	f000 b8da 	b.w	800e18c <__malloc_unlock>
 800dfd8:	42a3      	cmp	r3, r4
 800dfda:	d908      	bls.n	800dfee <_free_r+0x46>
 800dfdc:	6825      	ldr	r5, [r4, #0]
 800dfde:	1961      	adds	r1, r4, r5
 800dfe0:	428b      	cmp	r3, r1
 800dfe2:	bf01      	itttt	eq
 800dfe4:	6819      	ldreq	r1, [r3, #0]
 800dfe6:	685b      	ldreq	r3, [r3, #4]
 800dfe8:	1949      	addeq	r1, r1, r5
 800dfea:	6021      	streq	r1, [r4, #0]
 800dfec:	e7ed      	b.n	800dfca <_free_r+0x22>
 800dfee:	461a      	mov	r2, r3
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	b10b      	cbz	r3, 800dff8 <_free_r+0x50>
 800dff4:	42a3      	cmp	r3, r4
 800dff6:	d9fa      	bls.n	800dfee <_free_r+0x46>
 800dff8:	6811      	ldr	r1, [r2, #0]
 800dffa:	1855      	adds	r5, r2, r1
 800dffc:	42a5      	cmp	r5, r4
 800dffe:	d10b      	bne.n	800e018 <_free_r+0x70>
 800e000:	6824      	ldr	r4, [r4, #0]
 800e002:	4421      	add	r1, r4
 800e004:	1854      	adds	r4, r2, r1
 800e006:	42a3      	cmp	r3, r4
 800e008:	6011      	str	r1, [r2, #0]
 800e00a:	d1e0      	bne.n	800dfce <_free_r+0x26>
 800e00c:	681c      	ldr	r4, [r3, #0]
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	6053      	str	r3, [r2, #4]
 800e012:	440c      	add	r4, r1
 800e014:	6014      	str	r4, [r2, #0]
 800e016:	e7da      	b.n	800dfce <_free_r+0x26>
 800e018:	d902      	bls.n	800e020 <_free_r+0x78>
 800e01a:	230c      	movs	r3, #12
 800e01c:	6003      	str	r3, [r0, #0]
 800e01e:	e7d6      	b.n	800dfce <_free_r+0x26>
 800e020:	6825      	ldr	r5, [r4, #0]
 800e022:	1961      	adds	r1, r4, r5
 800e024:	428b      	cmp	r3, r1
 800e026:	bf04      	itt	eq
 800e028:	6819      	ldreq	r1, [r3, #0]
 800e02a:	685b      	ldreq	r3, [r3, #4]
 800e02c:	6063      	str	r3, [r4, #4]
 800e02e:	bf04      	itt	eq
 800e030:	1949      	addeq	r1, r1, r5
 800e032:	6021      	streq	r1, [r4, #0]
 800e034:	6054      	str	r4, [r2, #4]
 800e036:	e7ca      	b.n	800dfce <_free_r+0x26>
 800e038:	b003      	add	sp, #12
 800e03a:	bd30      	pop	{r4, r5, pc}
 800e03c:	20000e28 	.word	0x20000e28

0800e040 <sbrk_aligned>:
 800e040:	b570      	push	{r4, r5, r6, lr}
 800e042:	4e0e      	ldr	r6, [pc, #56]	; (800e07c <sbrk_aligned+0x3c>)
 800e044:	460c      	mov	r4, r1
 800e046:	6831      	ldr	r1, [r6, #0]
 800e048:	4605      	mov	r5, r0
 800e04a:	b911      	cbnz	r1, 800e052 <sbrk_aligned+0x12>
 800e04c:	f000 f9d6 	bl	800e3fc <_sbrk_r>
 800e050:	6030      	str	r0, [r6, #0]
 800e052:	4621      	mov	r1, r4
 800e054:	4628      	mov	r0, r5
 800e056:	f000 f9d1 	bl	800e3fc <_sbrk_r>
 800e05a:	1c43      	adds	r3, r0, #1
 800e05c:	d00a      	beq.n	800e074 <sbrk_aligned+0x34>
 800e05e:	1cc4      	adds	r4, r0, #3
 800e060:	f024 0403 	bic.w	r4, r4, #3
 800e064:	42a0      	cmp	r0, r4
 800e066:	d007      	beq.n	800e078 <sbrk_aligned+0x38>
 800e068:	1a21      	subs	r1, r4, r0
 800e06a:	4628      	mov	r0, r5
 800e06c:	f000 f9c6 	bl	800e3fc <_sbrk_r>
 800e070:	3001      	adds	r0, #1
 800e072:	d101      	bne.n	800e078 <sbrk_aligned+0x38>
 800e074:	f04f 34ff 	mov.w	r4, #4294967295
 800e078:	4620      	mov	r0, r4
 800e07a:	bd70      	pop	{r4, r5, r6, pc}
 800e07c:	20000e2c 	.word	0x20000e2c

0800e080 <_malloc_r>:
 800e080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e084:	1ccd      	adds	r5, r1, #3
 800e086:	f025 0503 	bic.w	r5, r5, #3
 800e08a:	3508      	adds	r5, #8
 800e08c:	2d0c      	cmp	r5, #12
 800e08e:	bf38      	it	cc
 800e090:	250c      	movcc	r5, #12
 800e092:	2d00      	cmp	r5, #0
 800e094:	4607      	mov	r7, r0
 800e096:	db01      	blt.n	800e09c <_malloc_r+0x1c>
 800e098:	42a9      	cmp	r1, r5
 800e09a:	d905      	bls.n	800e0a8 <_malloc_r+0x28>
 800e09c:	230c      	movs	r3, #12
 800e09e:	603b      	str	r3, [r7, #0]
 800e0a0:	2600      	movs	r6, #0
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e17c <_malloc_r+0xfc>
 800e0ac:	f000 f868 	bl	800e180 <__malloc_lock>
 800e0b0:	f8d8 3000 	ldr.w	r3, [r8]
 800e0b4:	461c      	mov	r4, r3
 800e0b6:	bb5c      	cbnz	r4, 800e110 <_malloc_r+0x90>
 800e0b8:	4629      	mov	r1, r5
 800e0ba:	4638      	mov	r0, r7
 800e0bc:	f7ff ffc0 	bl	800e040 <sbrk_aligned>
 800e0c0:	1c43      	adds	r3, r0, #1
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	d155      	bne.n	800e172 <_malloc_r+0xf2>
 800e0c6:	f8d8 4000 	ldr.w	r4, [r8]
 800e0ca:	4626      	mov	r6, r4
 800e0cc:	2e00      	cmp	r6, #0
 800e0ce:	d145      	bne.n	800e15c <_malloc_r+0xdc>
 800e0d0:	2c00      	cmp	r4, #0
 800e0d2:	d048      	beq.n	800e166 <_malloc_r+0xe6>
 800e0d4:	6823      	ldr	r3, [r4, #0]
 800e0d6:	4631      	mov	r1, r6
 800e0d8:	4638      	mov	r0, r7
 800e0da:	eb04 0903 	add.w	r9, r4, r3
 800e0de:	f000 f98d 	bl	800e3fc <_sbrk_r>
 800e0e2:	4581      	cmp	r9, r0
 800e0e4:	d13f      	bne.n	800e166 <_malloc_r+0xe6>
 800e0e6:	6821      	ldr	r1, [r4, #0]
 800e0e8:	1a6d      	subs	r5, r5, r1
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	f7ff ffa7 	bl	800e040 <sbrk_aligned>
 800e0f2:	3001      	adds	r0, #1
 800e0f4:	d037      	beq.n	800e166 <_malloc_r+0xe6>
 800e0f6:	6823      	ldr	r3, [r4, #0]
 800e0f8:	442b      	add	r3, r5
 800e0fa:	6023      	str	r3, [r4, #0]
 800e0fc:	f8d8 3000 	ldr.w	r3, [r8]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d038      	beq.n	800e176 <_malloc_r+0xf6>
 800e104:	685a      	ldr	r2, [r3, #4]
 800e106:	42a2      	cmp	r2, r4
 800e108:	d12b      	bne.n	800e162 <_malloc_r+0xe2>
 800e10a:	2200      	movs	r2, #0
 800e10c:	605a      	str	r2, [r3, #4]
 800e10e:	e00f      	b.n	800e130 <_malloc_r+0xb0>
 800e110:	6822      	ldr	r2, [r4, #0]
 800e112:	1b52      	subs	r2, r2, r5
 800e114:	d41f      	bmi.n	800e156 <_malloc_r+0xd6>
 800e116:	2a0b      	cmp	r2, #11
 800e118:	d917      	bls.n	800e14a <_malloc_r+0xca>
 800e11a:	1961      	adds	r1, r4, r5
 800e11c:	42a3      	cmp	r3, r4
 800e11e:	6025      	str	r5, [r4, #0]
 800e120:	bf18      	it	ne
 800e122:	6059      	strne	r1, [r3, #4]
 800e124:	6863      	ldr	r3, [r4, #4]
 800e126:	bf08      	it	eq
 800e128:	f8c8 1000 	streq.w	r1, [r8]
 800e12c:	5162      	str	r2, [r4, r5]
 800e12e:	604b      	str	r3, [r1, #4]
 800e130:	4638      	mov	r0, r7
 800e132:	f104 060b 	add.w	r6, r4, #11
 800e136:	f000 f829 	bl	800e18c <__malloc_unlock>
 800e13a:	f026 0607 	bic.w	r6, r6, #7
 800e13e:	1d23      	adds	r3, r4, #4
 800e140:	1af2      	subs	r2, r6, r3
 800e142:	d0ae      	beq.n	800e0a2 <_malloc_r+0x22>
 800e144:	1b9b      	subs	r3, r3, r6
 800e146:	50a3      	str	r3, [r4, r2]
 800e148:	e7ab      	b.n	800e0a2 <_malloc_r+0x22>
 800e14a:	42a3      	cmp	r3, r4
 800e14c:	6862      	ldr	r2, [r4, #4]
 800e14e:	d1dd      	bne.n	800e10c <_malloc_r+0x8c>
 800e150:	f8c8 2000 	str.w	r2, [r8]
 800e154:	e7ec      	b.n	800e130 <_malloc_r+0xb0>
 800e156:	4623      	mov	r3, r4
 800e158:	6864      	ldr	r4, [r4, #4]
 800e15a:	e7ac      	b.n	800e0b6 <_malloc_r+0x36>
 800e15c:	4634      	mov	r4, r6
 800e15e:	6876      	ldr	r6, [r6, #4]
 800e160:	e7b4      	b.n	800e0cc <_malloc_r+0x4c>
 800e162:	4613      	mov	r3, r2
 800e164:	e7cc      	b.n	800e100 <_malloc_r+0x80>
 800e166:	230c      	movs	r3, #12
 800e168:	603b      	str	r3, [r7, #0]
 800e16a:	4638      	mov	r0, r7
 800e16c:	f000 f80e 	bl	800e18c <__malloc_unlock>
 800e170:	e797      	b.n	800e0a2 <_malloc_r+0x22>
 800e172:	6025      	str	r5, [r4, #0]
 800e174:	e7dc      	b.n	800e130 <_malloc_r+0xb0>
 800e176:	605b      	str	r3, [r3, #4]
 800e178:	deff      	udf	#255	; 0xff
 800e17a:	bf00      	nop
 800e17c:	20000e28 	.word	0x20000e28

0800e180 <__malloc_lock>:
 800e180:	4801      	ldr	r0, [pc, #4]	; (800e188 <__malloc_lock+0x8>)
 800e182:	f7ff bf00 	b.w	800df86 <__retarget_lock_acquire_recursive>
 800e186:	bf00      	nop
 800e188:	20000e24 	.word	0x20000e24

0800e18c <__malloc_unlock>:
 800e18c:	4801      	ldr	r0, [pc, #4]	; (800e194 <__malloc_unlock+0x8>)
 800e18e:	f7ff befb 	b.w	800df88 <__retarget_lock_release_recursive>
 800e192:	bf00      	nop
 800e194:	20000e24 	.word	0x20000e24

0800e198 <__sflush_r>:
 800e198:	898a      	ldrh	r2, [r1, #12]
 800e19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e19e:	4605      	mov	r5, r0
 800e1a0:	0710      	lsls	r0, r2, #28
 800e1a2:	460c      	mov	r4, r1
 800e1a4:	d458      	bmi.n	800e258 <__sflush_r+0xc0>
 800e1a6:	684b      	ldr	r3, [r1, #4]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	dc05      	bgt.n	800e1b8 <__sflush_r+0x20>
 800e1ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	dc02      	bgt.n	800e1b8 <__sflush_r+0x20>
 800e1b2:	2000      	movs	r0, #0
 800e1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1ba:	2e00      	cmp	r6, #0
 800e1bc:	d0f9      	beq.n	800e1b2 <__sflush_r+0x1a>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1c4:	682f      	ldr	r7, [r5, #0]
 800e1c6:	6a21      	ldr	r1, [r4, #32]
 800e1c8:	602b      	str	r3, [r5, #0]
 800e1ca:	d032      	beq.n	800e232 <__sflush_r+0x9a>
 800e1cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e1ce:	89a3      	ldrh	r3, [r4, #12]
 800e1d0:	075a      	lsls	r2, r3, #29
 800e1d2:	d505      	bpl.n	800e1e0 <__sflush_r+0x48>
 800e1d4:	6863      	ldr	r3, [r4, #4]
 800e1d6:	1ac0      	subs	r0, r0, r3
 800e1d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1da:	b10b      	cbz	r3, 800e1e0 <__sflush_r+0x48>
 800e1dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e1de:	1ac0      	subs	r0, r0, r3
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1e6:	6a21      	ldr	r1, [r4, #32]
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	47b0      	blx	r6
 800e1ec:	1c43      	adds	r3, r0, #1
 800e1ee:	89a3      	ldrh	r3, [r4, #12]
 800e1f0:	d106      	bne.n	800e200 <__sflush_r+0x68>
 800e1f2:	6829      	ldr	r1, [r5, #0]
 800e1f4:	291d      	cmp	r1, #29
 800e1f6:	d82b      	bhi.n	800e250 <__sflush_r+0xb8>
 800e1f8:	4a29      	ldr	r2, [pc, #164]	; (800e2a0 <__sflush_r+0x108>)
 800e1fa:	410a      	asrs	r2, r1
 800e1fc:	07d6      	lsls	r6, r2, #31
 800e1fe:	d427      	bmi.n	800e250 <__sflush_r+0xb8>
 800e200:	2200      	movs	r2, #0
 800e202:	6062      	str	r2, [r4, #4]
 800e204:	04d9      	lsls	r1, r3, #19
 800e206:	6922      	ldr	r2, [r4, #16]
 800e208:	6022      	str	r2, [r4, #0]
 800e20a:	d504      	bpl.n	800e216 <__sflush_r+0x7e>
 800e20c:	1c42      	adds	r2, r0, #1
 800e20e:	d101      	bne.n	800e214 <__sflush_r+0x7c>
 800e210:	682b      	ldr	r3, [r5, #0]
 800e212:	b903      	cbnz	r3, 800e216 <__sflush_r+0x7e>
 800e214:	6560      	str	r0, [r4, #84]	; 0x54
 800e216:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e218:	602f      	str	r7, [r5, #0]
 800e21a:	2900      	cmp	r1, #0
 800e21c:	d0c9      	beq.n	800e1b2 <__sflush_r+0x1a>
 800e21e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e222:	4299      	cmp	r1, r3
 800e224:	d002      	beq.n	800e22c <__sflush_r+0x94>
 800e226:	4628      	mov	r0, r5
 800e228:	f7ff febe 	bl	800dfa8 <_free_r>
 800e22c:	2000      	movs	r0, #0
 800e22e:	6360      	str	r0, [r4, #52]	; 0x34
 800e230:	e7c0      	b.n	800e1b4 <__sflush_r+0x1c>
 800e232:	2301      	movs	r3, #1
 800e234:	4628      	mov	r0, r5
 800e236:	47b0      	blx	r6
 800e238:	1c41      	adds	r1, r0, #1
 800e23a:	d1c8      	bne.n	800e1ce <__sflush_r+0x36>
 800e23c:	682b      	ldr	r3, [r5, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d0c5      	beq.n	800e1ce <__sflush_r+0x36>
 800e242:	2b1d      	cmp	r3, #29
 800e244:	d001      	beq.n	800e24a <__sflush_r+0xb2>
 800e246:	2b16      	cmp	r3, #22
 800e248:	d101      	bne.n	800e24e <__sflush_r+0xb6>
 800e24a:	602f      	str	r7, [r5, #0]
 800e24c:	e7b1      	b.n	800e1b2 <__sflush_r+0x1a>
 800e24e:	89a3      	ldrh	r3, [r4, #12]
 800e250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e254:	81a3      	strh	r3, [r4, #12]
 800e256:	e7ad      	b.n	800e1b4 <__sflush_r+0x1c>
 800e258:	690f      	ldr	r7, [r1, #16]
 800e25a:	2f00      	cmp	r7, #0
 800e25c:	d0a9      	beq.n	800e1b2 <__sflush_r+0x1a>
 800e25e:	0793      	lsls	r3, r2, #30
 800e260:	680e      	ldr	r6, [r1, #0]
 800e262:	bf08      	it	eq
 800e264:	694b      	ldreq	r3, [r1, #20]
 800e266:	600f      	str	r7, [r1, #0]
 800e268:	bf18      	it	ne
 800e26a:	2300      	movne	r3, #0
 800e26c:	eba6 0807 	sub.w	r8, r6, r7
 800e270:	608b      	str	r3, [r1, #8]
 800e272:	f1b8 0f00 	cmp.w	r8, #0
 800e276:	dd9c      	ble.n	800e1b2 <__sflush_r+0x1a>
 800e278:	6a21      	ldr	r1, [r4, #32]
 800e27a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e27c:	4643      	mov	r3, r8
 800e27e:	463a      	mov	r2, r7
 800e280:	4628      	mov	r0, r5
 800e282:	47b0      	blx	r6
 800e284:	2800      	cmp	r0, #0
 800e286:	dc06      	bgt.n	800e296 <__sflush_r+0xfe>
 800e288:	89a3      	ldrh	r3, [r4, #12]
 800e28a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e28e:	81a3      	strh	r3, [r4, #12]
 800e290:	f04f 30ff 	mov.w	r0, #4294967295
 800e294:	e78e      	b.n	800e1b4 <__sflush_r+0x1c>
 800e296:	4407      	add	r7, r0
 800e298:	eba8 0800 	sub.w	r8, r8, r0
 800e29c:	e7e9      	b.n	800e272 <__sflush_r+0xda>
 800e29e:	bf00      	nop
 800e2a0:	dfbffffe 	.word	0xdfbffffe

0800e2a4 <_fflush_r>:
 800e2a4:	b538      	push	{r3, r4, r5, lr}
 800e2a6:	690b      	ldr	r3, [r1, #16]
 800e2a8:	4605      	mov	r5, r0
 800e2aa:	460c      	mov	r4, r1
 800e2ac:	b913      	cbnz	r3, 800e2b4 <_fflush_r+0x10>
 800e2ae:	2500      	movs	r5, #0
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	bd38      	pop	{r3, r4, r5, pc}
 800e2b4:	b118      	cbz	r0, 800e2be <_fflush_r+0x1a>
 800e2b6:	6a03      	ldr	r3, [r0, #32]
 800e2b8:	b90b      	cbnz	r3, 800e2be <_fflush_r+0x1a>
 800e2ba:	f7ff fc81 	bl	800dbc0 <__sinit>
 800e2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d0f3      	beq.n	800e2ae <_fflush_r+0xa>
 800e2c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2c8:	07d0      	lsls	r0, r2, #31
 800e2ca:	d404      	bmi.n	800e2d6 <_fflush_r+0x32>
 800e2cc:	0599      	lsls	r1, r3, #22
 800e2ce:	d402      	bmi.n	800e2d6 <_fflush_r+0x32>
 800e2d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2d2:	f7ff fe58 	bl	800df86 <__retarget_lock_acquire_recursive>
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	4621      	mov	r1, r4
 800e2da:	f7ff ff5d 	bl	800e198 <__sflush_r>
 800e2de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2e0:	07da      	lsls	r2, r3, #31
 800e2e2:	4605      	mov	r5, r0
 800e2e4:	d4e4      	bmi.n	800e2b0 <_fflush_r+0xc>
 800e2e6:	89a3      	ldrh	r3, [r4, #12]
 800e2e8:	059b      	lsls	r3, r3, #22
 800e2ea:	d4e1      	bmi.n	800e2b0 <_fflush_r+0xc>
 800e2ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2ee:	f7ff fe4b 	bl	800df88 <__retarget_lock_release_recursive>
 800e2f2:	e7dd      	b.n	800e2b0 <_fflush_r+0xc>

0800e2f4 <__swhatbuf_r>:
 800e2f4:	b570      	push	{r4, r5, r6, lr}
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2fc:	2900      	cmp	r1, #0
 800e2fe:	b096      	sub	sp, #88	; 0x58
 800e300:	4615      	mov	r5, r2
 800e302:	461e      	mov	r6, r3
 800e304:	da0d      	bge.n	800e322 <__swhatbuf_r+0x2e>
 800e306:	89a3      	ldrh	r3, [r4, #12]
 800e308:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e30c:	f04f 0100 	mov.w	r1, #0
 800e310:	bf0c      	ite	eq
 800e312:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e316:	2340      	movne	r3, #64	; 0x40
 800e318:	2000      	movs	r0, #0
 800e31a:	6031      	str	r1, [r6, #0]
 800e31c:	602b      	str	r3, [r5, #0]
 800e31e:	b016      	add	sp, #88	; 0x58
 800e320:	bd70      	pop	{r4, r5, r6, pc}
 800e322:	466a      	mov	r2, sp
 800e324:	f000 f848 	bl	800e3b8 <_fstat_r>
 800e328:	2800      	cmp	r0, #0
 800e32a:	dbec      	blt.n	800e306 <__swhatbuf_r+0x12>
 800e32c:	9901      	ldr	r1, [sp, #4]
 800e32e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e332:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e336:	4259      	negs	r1, r3
 800e338:	4159      	adcs	r1, r3
 800e33a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e33e:	e7eb      	b.n	800e318 <__swhatbuf_r+0x24>

0800e340 <__smakebuf_r>:
 800e340:	898b      	ldrh	r3, [r1, #12]
 800e342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e344:	079d      	lsls	r5, r3, #30
 800e346:	4606      	mov	r6, r0
 800e348:	460c      	mov	r4, r1
 800e34a:	d507      	bpl.n	800e35c <__smakebuf_r+0x1c>
 800e34c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e350:	6023      	str	r3, [r4, #0]
 800e352:	6123      	str	r3, [r4, #16]
 800e354:	2301      	movs	r3, #1
 800e356:	6163      	str	r3, [r4, #20]
 800e358:	b002      	add	sp, #8
 800e35a:	bd70      	pop	{r4, r5, r6, pc}
 800e35c:	ab01      	add	r3, sp, #4
 800e35e:	466a      	mov	r2, sp
 800e360:	f7ff ffc8 	bl	800e2f4 <__swhatbuf_r>
 800e364:	9900      	ldr	r1, [sp, #0]
 800e366:	4605      	mov	r5, r0
 800e368:	4630      	mov	r0, r6
 800e36a:	f7ff fe89 	bl	800e080 <_malloc_r>
 800e36e:	b948      	cbnz	r0, 800e384 <__smakebuf_r+0x44>
 800e370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e374:	059a      	lsls	r2, r3, #22
 800e376:	d4ef      	bmi.n	800e358 <__smakebuf_r+0x18>
 800e378:	f023 0303 	bic.w	r3, r3, #3
 800e37c:	f043 0302 	orr.w	r3, r3, #2
 800e380:	81a3      	strh	r3, [r4, #12]
 800e382:	e7e3      	b.n	800e34c <__smakebuf_r+0xc>
 800e384:	89a3      	ldrh	r3, [r4, #12]
 800e386:	6020      	str	r0, [r4, #0]
 800e388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e38c:	81a3      	strh	r3, [r4, #12]
 800e38e:	9b00      	ldr	r3, [sp, #0]
 800e390:	6163      	str	r3, [r4, #20]
 800e392:	9b01      	ldr	r3, [sp, #4]
 800e394:	6120      	str	r0, [r4, #16]
 800e396:	b15b      	cbz	r3, 800e3b0 <__smakebuf_r+0x70>
 800e398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e39c:	4630      	mov	r0, r6
 800e39e:	f000 f81d 	bl	800e3dc <_isatty_r>
 800e3a2:	b128      	cbz	r0, 800e3b0 <__smakebuf_r+0x70>
 800e3a4:	89a3      	ldrh	r3, [r4, #12]
 800e3a6:	f023 0303 	bic.w	r3, r3, #3
 800e3aa:	f043 0301 	orr.w	r3, r3, #1
 800e3ae:	81a3      	strh	r3, [r4, #12]
 800e3b0:	89a3      	ldrh	r3, [r4, #12]
 800e3b2:	431d      	orrs	r5, r3
 800e3b4:	81a5      	strh	r5, [r4, #12]
 800e3b6:	e7cf      	b.n	800e358 <__smakebuf_r+0x18>

0800e3b8 <_fstat_r>:
 800e3b8:	b538      	push	{r3, r4, r5, lr}
 800e3ba:	4d07      	ldr	r5, [pc, #28]	; (800e3d8 <_fstat_r+0x20>)
 800e3bc:	2300      	movs	r3, #0
 800e3be:	4604      	mov	r4, r0
 800e3c0:	4608      	mov	r0, r1
 800e3c2:	4611      	mov	r1, r2
 800e3c4:	602b      	str	r3, [r5, #0]
 800e3c6:	f7f6 fb74 	bl	8004ab2 <_fstat>
 800e3ca:	1c43      	adds	r3, r0, #1
 800e3cc:	d102      	bne.n	800e3d4 <_fstat_r+0x1c>
 800e3ce:	682b      	ldr	r3, [r5, #0]
 800e3d0:	b103      	cbz	r3, 800e3d4 <_fstat_r+0x1c>
 800e3d2:	6023      	str	r3, [r4, #0]
 800e3d4:	bd38      	pop	{r3, r4, r5, pc}
 800e3d6:	bf00      	nop
 800e3d8:	20000e20 	.word	0x20000e20

0800e3dc <_isatty_r>:
 800e3dc:	b538      	push	{r3, r4, r5, lr}
 800e3de:	4d06      	ldr	r5, [pc, #24]	; (800e3f8 <_isatty_r+0x1c>)
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	4608      	mov	r0, r1
 800e3e6:	602b      	str	r3, [r5, #0]
 800e3e8:	f7f6 fb73 	bl	8004ad2 <_isatty>
 800e3ec:	1c43      	adds	r3, r0, #1
 800e3ee:	d102      	bne.n	800e3f6 <_isatty_r+0x1a>
 800e3f0:	682b      	ldr	r3, [r5, #0]
 800e3f2:	b103      	cbz	r3, 800e3f6 <_isatty_r+0x1a>
 800e3f4:	6023      	str	r3, [r4, #0]
 800e3f6:	bd38      	pop	{r3, r4, r5, pc}
 800e3f8:	20000e20 	.word	0x20000e20

0800e3fc <_sbrk_r>:
 800e3fc:	b538      	push	{r3, r4, r5, lr}
 800e3fe:	4d06      	ldr	r5, [pc, #24]	; (800e418 <_sbrk_r+0x1c>)
 800e400:	2300      	movs	r3, #0
 800e402:	4604      	mov	r4, r0
 800e404:	4608      	mov	r0, r1
 800e406:	602b      	str	r3, [r5, #0]
 800e408:	f7f6 fb7c 	bl	8004b04 <_sbrk>
 800e40c:	1c43      	adds	r3, r0, #1
 800e40e:	d102      	bne.n	800e416 <_sbrk_r+0x1a>
 800e410:	682b      	ldr	r3, [r5, #0]
 800e412:	b103      	cbz	r3, 800e416 <_sbrk_r+0x1a>
 800e414:	6023      	str	r3, [r4, #0]
 800e416:	bd38      	pop	{r3, r4, r5, pc}
 800e418:	20000e20 	.word	0x20000e20

0800e41c <_init>:
 800e41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41e:	bf00      	nop
 800e420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e422:	bc08      	pop	{r3}
 800e424:	469e      	mov	lr, r3
 800e426:	4770      	bx	lr

0800e428 <_fini>:
 800e428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e42a:	bf00      	nop
 800e42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e42e:	bc08      	pop	{r3}
 800e430:	469e      	mov	lr, r3
 800e432:	4770      	bx	lr
