
QUCONTROL_FOLLOWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b66c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800b850  0800b850  0001b850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc04  0800bc04  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc04  0800bc04  0001bc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc0c  0800bc0c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc0c  0800bc0c  0001bc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc10  0800bc10  0001bc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bc14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af8  200001d4  0800bde8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ccc  0800bde8  00020ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020869  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bd5  00000000  00000000  00040ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a68  00000000  00000000  00044688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001475  00000000  00000000  000460f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b1fe  00000000  00000000  00047565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020a4e  00000000  00000000  00072763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001116a6  00000000  00000000  000931b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000081e8  00000000  00000000  001a4858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001aca40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b834 	.word	0x0800b834

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800b834 	.word	0x0800b834

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <accelerometer_init>:
bno055_vec3_t mag = {0, 0, 0};
bno055_vec3_t grv = {0, 0, 0};
bno055_euler_t eul = {0, 0, 0};
bno055_vec4_t qua = {0, 0, 0};

void accelerometer_init() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0ae      	sub	sp, #184	; 0xb8
 8000ef8:	af02      	add	r7, sp, #8
	bno = (bno055_t){
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <accelerometer_init+0x54>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	23ac      	movs	r3, #172	; 0xac
 8000f00:	461a      	mov	r2, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	f008 fdf9 	bl	8009afa <memset>
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <accelerometer_init+0x54>)
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <accelerometer_init+0x58>)
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <accelerometer_init+0x54>)
 8000f10:	2208      	movs	r2, #8
 8000f12:	711a      	strb	r2, [r3, #4]
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <accelerometer_init+0x54>)
 8000f16:	2229      	movs	r2, #41	; 0x29
 8000f18:	719a      	strb	r2, [r3, #6]
		.i2c = &hi2c3, .mode = BNO_MODE_IMU, .addr = 0x29, ._temp_unit = BNO_TEMP_UNIT_C,
	};

	err = bno055_init(&bno);
 8000f1a:	480b      	ldr	r0, [pc, #44]	; (8000f48 <accelerometer_init+0x54>)
 8000f1c:	f000 f82e 	bl	8000f7c <bno055_init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <accelerometer_init+0x5c>)
 8000f26:	701a      	strb	r2, [r3, #0]
	err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS, BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
 8000f28:	2300      	movs	r3, #0
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <accelerometer_init+0x54>)
 8000f34:	f001 faec 	bl	8002510 <bno055_set_unit>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <accelerometer_init+0x5c>)
 8000f3e:	701a      	strb	r2, [r3, #0]
}
 8000f40:	bf00      	nop
 8000f42:	37b0      	adds	r7, #176	; 0xb0
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200001f0 	.word	0x200001f0
 8000f4c:	200005b8 	.word	0x200005b8
 8000f50:	2000029c 	.word	0x2000029c

08000f54 <read_accelerometer_x>:

int read_accelerometer_x() {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	bno.acc(&bno ,&acc);
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <read_accelerometer_x+0x20>)
 8000f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5c:	4906      	ldr	r1, [pc, #24]	; (8000f78 <read_accelerometer_x+0x24>)
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <read_accelerometer_x+0x20>)
 8000f60:	4798      	blx	r3
	return acc.x;
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <read_accelerometer_x+0x24>)
 8000f64:	edd3 7a00 	vldr	s15, [r3]
 8000f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f6c:	ee17 3a90 	vmov	r3, s15
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200001f0 	.word	0x200001f0
 8000f78:	200002a0 	.word	0x200002a0

08000f7c <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b0af      	sub	sp, #188	; 0xbc
 8000f80:	af2a      	add	r7, sp, #168	; 0xa8
 8000f82:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	799b      	ldrb	r3, [r3, #6]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8000f94:	687c      	ldr	r4, [r7, #4]
 8000f96:	2301      	movs	r3, #1
 8000f98:	9329      	str	r3, [sp, #164]	; 0xa4
 8000f9a:	f107 030e 	add.w	r3, r7, #14
 8000f9e:	9328      	str	r3, [sp, #160]	; 0xa0
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	9327      	str	r3, [sp, #156]	; 0x9c
 8000fa4:	4668      	mov	r0, sp
 8000fa6:	f104 0310 	add.w	r3, r4, #16
 8000faa:	229c      	movs	r2, #156	; 0x9c
 8000fac:	4619      	mov	r1, r3
 8000fae:	f008 fe34 	bl	8009c1a <memcpy>
 8000fb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fb6:	f001 fbb6 	bl	8002726 <bno055_read_regs>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <bno055_init+0x4c>
        return err;
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	e0b6      	b.n	8001136 <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	2ba0      	cmp	r3, #160	; 0xa0
 8000fcc:	d001      	beq.n	8000fd2 <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8000fce:	2306      	movs	r3, #6
 8000fd0:	e0b1      	b.n	8001136 <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f001 fa74 	bl	80024c2 <bno055_set_opmode>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <bno055_init+0x6c>
        return err;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	e0a6      	b.n	8001136 <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f002 ffe7 	bl	8003fbc <HAL_Delay>
    bno055_reset(imu);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f001 fb53 	bl	800269a <bno055_reset>
    HAL_Delay(5000);
 8000ff4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ff8:	f002 ffe0 	bl	8003fbc <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f001 faee 	bl	80025e0 <bno055_set_pwr_mode>
 8001004:	4603      	mov	r3, r0
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <bno055_init+0x96>
        return err;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	e091      	b.n	8001136 <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 8001012:	200a      	movs	r0, #10
 8001014:	f002 ffd2 	bl	8003fbc <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001018:	2100      	movs	r1, #0
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f001 fbe6 	bl	80027ec <bno055_set_page>
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <bno055_init+0xb2>
        return err;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	e083      	b.n	8001136 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800102e:	200c      	movs	r0, #12
 8001030:	f002 ffc4 	bl	8003fbc <HAL_Delay>
    bno055_on(imu);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f001 fb53 	bl	80026e0 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	791b      	ldrb	r3, [r3, #4]
 800103e:	4619      	mov	r1, r3
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f001 fa3e 	bl	80024c2 <bno055_set_opmode>
 8001046:	4603      	mov	r3, r0
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <bno055_init+0xd8>
        return err;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	e070      	b.n	8001136 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001054:	2018      	movs	r0, #24
 8001056:	f002 ffb1 	bl	8003fbc <HAL_Delay>

    imu->temperature = &bno055_temperature;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a38      	ldr	r2, [pc, #224]	; (8001140 <bno055_init+0x1c4>)
 800105e:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a38      	ldr	r2, [pc, #224]	; (8001144 <bno055_init+0x1c8>)
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a37      	ldr	r2, [pc, #220]	; (8001148 <bno055_init+0x1cc>)
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a37      	ldr	r2, [pc, #220]	; (800114c <bno055_init+0x1d0>)
 8001070:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a36      	ldr	r2, [pc, #216]	; (8001150 <bno055_init+0x1d4>)
 8001076:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a36      	ldr	r2, [pc, #216]	; (8001154 <bno055_init+0x1d8>)
 800107c:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a35      	ldr	r2, [pc, #212]	; (8001158 <bno055_init+0x1dc>)
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a35      	ldr	r2, [pc, #212]	; (800115c <bno055_init+0x1e0>)
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a34      	ldr	r2, [pc, #208]	; (8001160 <bno055_init+0x1e4>)
 800108e:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a34      	ldr	r2, [pc, #208]	; (8001164 <bno055_init+0x1e8>)
 8001094:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a33      	ldr	r2, [pc, #204]	; (8001168 <bno055_init+0x1ec>)
 800109a:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a33      	ldr	r2, [pc, #204]	; (800116c <bno055_init+0x1f0>)
 80010a0:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a32      	ldr	r2, [pc, #200]	; (8001170 <bno055_init+0x1f4>)
 80010a6:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a32      	ldr	r2, [pc, #200]	; (8001174 <bno055_init+0x1f8>)
 80010ac:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a31      	ldr	r2, [pc, #196]	; (8001178 <bno055_init+0x1fc>)
 80010b2:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a31      	ldr	r2, [pc, #196]	; (800117c <bno055_init+0x200>)
 80010b8:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a30      	ldr	r2, [pc, #192]	; (8001180 <bno055_init+0x204>)
 80010be:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a30      	ldr	r2, [pc, #192]	; (8001184 <bno055_init+0x208>)
 80010c4:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a2f      	ldr	r2, [pc, #188]	; (8001188 <bno055_init+0x20c>)
 80010ca:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a2f      	ldr	r2, [pc, #188]	; (800118c <bno055_init+0x210>)
 80010d0:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a2e      	ldr	r2, [pc, #184]	; (8001190 <bno055_init+0x214>)
 80010d6:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a2e      	ldr	r2, [pc, #184]	; (8001194 <bno055_init+0x218>)
 80010dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a2d      	ldr	r2, [pc, #180]	; (8001198 <bno055_init+0x21c>)
 80010e4:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a2c      	ldr	r2, [pc, #176]	; (800119c <bno055_init+0x220>)
 80010ea:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a2c      	ldr	r2, [pc, #176]	; (80011a0 <bno055_init+0x224>)
 80010f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a2b      	ldr	r2, [pc, #172]	; (80011a4 <bno055_init+0x228>)
 80010f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a2a      	ldr	r2, [pc, #168]	; (80011a8 <bno055_init+0x22c>)
 8001100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a29      	ldr	r2, [pc, #164]	; (80011ac <bno055_init+0x230>)
 8001108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <bno055_init+0x234>)
 8001110:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a27      	ldr	r2, [pc, #156]	; (80011b4 <bno055_init+0x238>)
 8001118:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <bno055_init+0x23c>)
 8001120:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <bno055_init+0x240>)
 8001128:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a24      	ldr	r2, [pc, #144]	; (80011c0 <bno055_init+0x244>)
 8001130:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bd90      	pop	{r4, r7, pc}
 800113e:	bf00      	nop
 8001140:	080011c5 	.word	0x080011c5
 8001144:	0800122d 	.word	0x0800122d
 8001148:	080012ad 	.word	0x080012ad
 800114c:	0800132d 	.word	0x0800132d
 8001150:	080013ad 	.word	0x080013ad
 8001154:	08001479 	.word	0x08001479
 8001158:	080014f9 	.word	0x080014f9
 800115c:	08001579 	.word	0x08001579
 8001160:	080015f9 	.word	0x080015f9
 8001164:	080016c5 	.word	0x080016c5
 8001168:	08001745 	.word	0x08001745
 800116c:	080017c5 	.word	0x080017c5
 8001170:	08001845 	.word	0x08001845
 8001174:	08001911 	.word	0x08001911
 8001178:	0800197d 	.word	0x0800197d
 800117c:	080019e9 	.word	0x080019e9
 8001180:	08001a55 	.word	0x08001a55
 8001184:	08001b09 	.word	0x08001b09
 8001188:	08001b8d 	.word	0x08001b8d
 800118c:	08001c11 	.word	0x08001c11
 8001190:	08001c95 	.word	0x08001c95
 8001194:	08001d61 	.word	0x08001d61
 8001198:	08001de5 	.word	0x08001de5
 800119c:	08001e69 	.word	0x08001e69
 80011a0:	08001eed 	.word	0x08001eed
 80011a4:	08001fb9 	.word	0x08001fb9
 80011a8:	08002029 	.word	0x08002029
 80011ac:	08002099 	.word	0x08002099
 80011b0:	08002109 	.word	0x08002109
 80011b4:	08002179 	.word	0x08002179
 80011b8:	08002255 	.word	0x08002255
 80011bc:	08002325 	.word	0x08002325
 80011c0:	080023f3 	.word	0x080023f3

080011c4 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b0af      	sub	sp, #188	; 0xbc
 80011c8:	af2a      	add	r7, sp, #168	; 0xa8
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 80011d2:	687c      	ldr	r4, [r7, #4]
 80011d4:	2301      	movs	r3, #1
 80011d6:	9329      	str	r3, [sp, #164]	; 0xa4
 80011d8:	f107 030e 	add.w	r3, r7, #14
 80011dc:	9328      	str	r3, [sp, #160]	; 0xa0
 80011de:	2334      	movs	r3, #52	; 0x34
 80011e0:	9327      	str	r3, [sp, #156]	; 0x9c
 80011e2:	4668      	mov	r0, sp
 80011e4:	f104 0310 	add.w	r3, r4, #16
 80011e8:	229c      	movs	r2, #156	; 0x9c
 80011ea:	4619      	mov	r1, r3
 80011ec:	f008 fd15 	bl	8009c1a <memcpy>
 80011f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011f4:	f001 fa97 	bl	8002726 <bno055_read_regs>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <bno055_temperature+0x42>
        return err;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	e00d      	b.n	8001222 <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7bdb      	ldrb	r3, [r3, #15]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <bno055_temperature+0x54>
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	b25b      	sxtb	r3, r3
 8001216:	e001      	b.n	800121c <bno055_temperature+0x58>
 8001218:	7bbb      	ldrb	r3, [r7, #14]
 800121a:	b25b      	sxtb	r3, r3
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bd90      	pop	{r4, r7, pc}
	...

0800122c <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b0af      	sub	sp, #188	; 0xbc
 8001230:	af2a      	add	r7, sp, #168	; 0xa8
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001236:	687c      	ldr	r4, [r7, #4]
 8001238:	2302      	movs	r3, #2
 800123a:	9329      	str	r3, [sp, #164]	; 0xa4
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	9328      	str	r3, [sp, #160]	; 0xa0
 8001242:	2308      	movs	r3, #8
 8001244:	9327      	str	r3, [sp, #156]	; 0x9c
 8001246:	4668      	mov	r0, sp
 8001248:	f104 0310 	add.w	r3, r4, #16
 800124c:	229c      	movs	r2, #156	; 0x9c
 800124e:	4619      	mov	r1, r3
 8001250:	f008 fce3 	bl	8009c1a <memcpy>
 8001254:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001258:	f001 fa65 	bl	8002726 <bno055_read_regs>
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <bno055_acc_x+0x3e>
        return err;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	e019      	b.n	800129e <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800126a:	7b7b      	ldrb	r3, [r7, #13]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	7b3b      	ldrb	r3, [r7, #12]
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b21b      	sxth	r3, r3
 8001278:	ee07 3a90 	vmov	s15, r3
 800127c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <bno055_acc_x+0x62>
 8001288:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012a8 <bno055_acc_x+0x7c>
 800128c:	e001      	b.n	8001292 <bno055_acc_x+0x66>
 800128e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800129c:	2300      	movs	r3, #0
};
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	42c80000 	.word	0x42c80000

080012ac <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b0af      	sub	sp, #188	; 0xbc
 80012b0:	af2a      	add	r7, sp, #168	; 0xa8
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80012b6:	687c      	ldr	r4, [r7, #4]
 80012b8:	2302      	movs	r3, #2
 80012ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80012c2:	230a      	movs	r3, #10
 80012c4:	9327      	str	r3, [sp, #156]	; 0x9c
 80012c6:	4668      	mov	r0, sp
 80012c8:	f104 0310 	add.w	r3, r4, #16
 80012cc:	229c      	movs	r2, #156	; 0x9c
 80012ce:	4619      	mov	r1, r3
 80012d0:	f008 fca3 	bl	8009c1a <memcpy>
 80012d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012d8:	f001 fa25 	bl	8002726 <bno055_read_regs>
 80012dc:	4603      	mov	r3, r0
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <bno055_acc_y+0x3e>
        return err;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	e019      	b.n	800131e <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80012ea:	7b7b      	ldrb	r3, [r7, #13]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	7b3b      	ldrb	r3, [r7, #12]
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <bno055_acc_y+0x62>
 8001308:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001328 <bno055_acc_y+0x7c>
 800130c:	e001      	b.n	8001312 <bno055_acc_y+0x66>
 800130e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800131c:	2300      	movs	r3, #0
};
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bd90      	pop	{r4, r7, pc}
 8001326:	bf00      	nop
 8001328:	42c80000 	.word	0x42c80000

0800132c <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b0af      	sub	sp, #188	; 0xbc
 8001330:	af2a      	add	r7, sp, #168	; 0xa8
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001336:	687c      	ldr	r4, [r7, #4]
 8001338:	2302      	movs	r3, #2
 800133a:	9329      	str	r3, [sp, #164]	; 0xa4
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	9328      	str	r3, [sp, #160]	; 0xa0
 8001342:	230c      	movs	r3, #12
 8001344:	9327      	str	r3, [sp, #156]	; 0x9c
 8001346:	4668      	mov	r0, sp
 8001348:	f104 0310 	add.w	r3, r4, #16
 800134c:	229c      	movs	r2, #156	; 0x9c
 800134e:	4619      	mov	r1, r3
 8001350:	f008 fc63 	bl	8009c1a <memcpy>
 8001354:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001358:	f001 f9e5 	bl	8002726 <bno055_read_regs>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <bno055_acc_z+0x3e>
        return err;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	e019      	b.n	800139e <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800136a:	7b7b      	ldrb	r3, [r7, #13]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	7b3b      	ldrb	r3, [r7, #12]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21b      	sxth	r3, r3
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <bno055_acc_z+0x62>
 8001388:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80013a8 <bno055_acc_z+0x7c>
 800138c:	e001      	b.n	8001392 <bno055_acc_z+0x66>
 800138e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800139c:	2300      	movs	r3, #0
};
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd90      	pop	{r4, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	42c80000 	.word	0x42c80000

080013ac <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b0b1      	sub	sp, #196	; 0xc4
 80013b0:	af2a      	add	r7, sp, #168	; 0xa8
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 80013b6:	687c      	ldr	r4, [r7, #4]
 80013b8:	2306      	movs	r3, #6
 80013ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80013c2:	2308      	movs	r3, #8
 80013c4:	9327      	str	r3, [sp, #156]	; 0x9c
 80013c6:	4668      	mov	r0, sp
 80013c8:	f104 0310 	add.w	r3, r4, #16
 80013cc:	229c      	movs	r2, #156	; 0x9c
 80013ce:	4619      	mov	r1, r3
 80013d0:	f008 fc23 	bl	8009c1a <memcpy>
 80013d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013d8:	f001 f9a5 	bl	8002726 <bno055_read_regs>
 80013dc:	4603      	mov	r3, r0
 80013de:	75fb      	strb	r3, [r7, #23]
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <bno055_acc+0x3e>
        return err;
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
 80013e8:	e03f      	b.n	800146a <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <bno055_acc+0x4a>
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <bno055_acc+0xc8>)
 80013f4:	e001      	b.n	80013fa <bno055_acc+0x4e>
 80013f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80013fa:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80013fc:	7a7b      	ldrb	r3, [r7, #9]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	7a3b      	ldrb	r3, [r7, #8]
 8001404:	b21b      	sxth	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b21b      	sxth	r3, r3
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001412:	ed97 7a04 	vldr	s14, [r7, #16]
 8001416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	7abb      	ldrb	r3, [r7, #10]
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21b      	sxth	r3, r3
 800142e:	ee07 3a90 	vmov	s15, r3
 8001432:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001436:	ed97 7a04 	vldr	s14, [r7, #16]
 800143a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001444:	7b7b      	ldrb	r3, [r7, #13]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	7b3b      	ldrb	r3, [r7, #12]
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b21b      	sxth	r3, r3
 8001452:	ee07 3a90 	vmov	s15, r3
 8001456:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800145a:	ed97 7a04 	vldr	s14, [r7, #16]
 800145e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001468:	2300      	movs	r3, #0
};
 800146a:	4618      	mov	r0, r3
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	42c80000 	.word	0x42c80000

08001478 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b0af      	sub	sp, #188	; 0xbc
 800147c:	af2a      	add	r7, sp, #168	; 0xa8
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001482:	687c      	ldr	r4, [r7, #4]
 8001484:	2302      	movs	r3, #2
 8001486:	9329      	str	r3, [sp, #164]	; 0xa4
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	9328      	str	r3, [sp, #160]	; 0xa0
 800148e:	2328      	movs	r3, #40	; 0x28
 8001490:	9327      	str	r3, [sp, #156]	; 0x9c
 8001492:	4668      	mov	r0, sp
 8001494:	f104 0310 	add.w	r3, r4, #16
 8001498:	229c      	movs	r2, #156	; 0x9c
 800149a:	4619      	mov	r1, r3
 800149c:	f008 fbbd 	bl	8009c1a <memcpy>
 80014a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014a4:	f001 f93f 	bl	8002726 <bno055_read_regs>
 80014a8:	4603      	mov	r3, r0
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <bno055_linear_acc_x+0x3e>
        return err;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	e019      	b.n	80014ea <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80014b6:	7b7b      	ldrb	r3, [r7, #13]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	7b3b      	ldrb	r3, [r7, #12]
 80014be:	b21b      	sxth	r3, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <bno055_linear_acc_x+0x62>
 80014d4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80014f4 <bno055_linear_acc_x+0x7c>
 80014d8:	e001      	b.n	80014de <bno055_linear_acc_x+0x66>
 80014da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80014de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80014e8:	2300      	movs	r3, #0
};
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	42c80000 	.word	0x42c80000

080014f8 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b0af      	sub	sp, #188	; 0xbc
 80014fc:	af2a      	add	r7, sp, #168	; 0xa8
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001502:	687c      	ldr	r4, [r7, #4]
 8001504:	2302      	movs	r3, #2
 8001506:	9329      	str	r3, [sp, #164]	; 0xa4
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	9328      	str	r3, [sp, #160]	; 0xa0
 800150e:	232a      	movs	r3, #42	; 0x2a
 8001510:	9327      	str	r3, [sp, #156]	; 0x9c
 8001512:	4668      	mov	r0, sp
 8001514:	f104 0310 	add.w	r3, r4, #16
 8001518:	229c      	movs	r2, #156	; 0x9c
 800151a:	4619      	mov	r1, r3
 800151c:	f008 fb7d 	bl	8009c1a <memcpy>
 8001520:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001524:	f001 f8ff 	bl	8002726 <bno055_read_regs>
 8001528:	4603      	mov	r3, r0
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <bno055_linear_acc_y+0x3e>
        return err;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	e019      	b.n	800156a <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001536:	7b7b      	ldrb	r3, [r7, #13]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	7b3b      	ldrb	r3, [r7, #12]
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21b      	sxth	r3, r3
 8001544:	ee07 3a90 	vmov	s15, r3
 8001548:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <bno055_linear_acc_y+0x62>
 8001554:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001574 <bno055_linear_acc_y+0x7c>
 8001558:	e001      	b.n	800155e <bno055_linear_acc_y+0x66>
 800155a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800155e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001568:	2300      	movs	r3, #0
};
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	42c80000 	.word	0x42c80000

08001578 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b0af      	sub	sp, #188	; 0xbc
 800157c:	af2a      	add	r7, sp, #168	; 0xa8
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001582:	687c      	ldr	r4, [r7, #4]
 8001584:	2302      	movs	r3, #2
 8001586:	9329      	str	r3, [sp, #164]	; 0xa4
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	9328      	str	r3, [sp, #160]	; 0xa0
 800158e:	232c      	movs	r3, #44	; 0x2c
 8001590:	9327      	str	r3, [sp, #156]	; 0x9c
 8001592:	4668      	mov	r0, sp
 8001594:	f104 0310 	add.w	r3, r4, #16
 8001598:	229c      	movs	r2, #156	; 0x9c
 800159a:	4619      	mov	r1, r3
 800159c:	f008 fb3d 	bl	8009c1a <memcpy>
 80015a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015a4:	f001 f8bf 	bl	8002726 <bno055_read_regs>
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <bno055_linear_acc_z+0x3e>
        return err;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	e019      	b.n	80015ea <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80015b6:	7b7b      	ldrb	r3, [r7, #13]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	7b3b      	ldrb	r3, [r7, #12]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <bno055_linear_acc_z+0x62>
 80015d4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80015f4 <bno055_linear_acc_z+0x7c>
 80015d8:	e001      	b.n	80015de <bno055_linear_acc_z+0x66>
 80015da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80015de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80015e8:	2300      	movs	r3, #0
};
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	42c80000 	.word	0x42c80000

080015f8 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b0b1      	sub	sp, #196	; 0xc4
 80015fc:	af2a      	add	r7, sp, #168	; 0xa8
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001602:	687c      	ldr	r4, [r7, #4]
 8001604:	2306      	movs	r3, #6
 8001606:	9329      	str	r3, [sp, #164]	; 0xa4
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	9328      	str	r3, [sp, #160]	; 0xa0
 800160e:	2328      	movs	r3, #40	; 0x28
 8001610:	9327      	str	r3, [sp, #156]	; 0x9c
 8001612:	4668      	mov	r0, sp
 8001614:	f104 0310 	add.w	r3, r4, #16
 8001618:	229c      	movs	r2, #156	; 0x9c
 800161a:	4619      	mov	r1, r3
 800161c:	f008 fafd 	bl	8009c1a <memcpy>
 8001620:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001624:	f001 f87f 	bl	8002726 <bno055_read_regs>
 8001628:	4603      	mov	r3, r0
 800162a:	75fb      	strb	r3, [r7, #23]
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <bno055_linear_acc+0x3e>
        return err;
 8001632:	7dfb      	ldrb	r3, [r7, #23]
 8001634:	e03f      	b.n	80016b6 <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <bno055_linear_acc+0x4a>
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <bno055_linear_acc+0xc8>)
 8001640:	e001      	b.n	8001646 <bno055_linear_acc+0x4e>
 8001642:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001646:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001648:	7a7b      	ldrb	r3, [r7, #9]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21a      	sxth	r2, r3
 800164e:	7a3b      	ldrb	r3, [r7, #8]
 8001650:	b21b      	sxth	r3, r3
 8001652:	4313      	orrs	r3, r2
 8001654:	b21b      	sxth	r3, r3
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800165e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b21a      	sxth	r2, r3
 8001672:	7abb      	ldrb	r3, [r7, #10]
 8001674:	b21b      	sxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b21b      	sxth	r3, r3
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001682:	ed97 7a04 	vldr	s14, [r7, #16]
 8001686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001690:	7b7b      	ldrb	r3, [r7, #13]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	b21a      	sxth	r2, r3
 8001696:	7b3b      	ldrb	r3, [r7, #12]
 8001698:	b21b      	sxth	r3, r3
 800169a:	4313      	orrs	r3, r2
 800169c:	b21b      	sxth	r3, r3
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80016aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80016b4:	2300      	movs	r3, #0
};
 80016b6:	4618      	mov	r0, r3
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd90      	pop	{r4, r7, pc}
 80016be:	bf00      	nop
 80016c0:	42c80000 	.word	0x42c80000

080016c4 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b0af      	sub	sp, #188	; 0xbc
 80016c8:	af2a      	add	r7, sp, #168	; 0xa8
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 80016ce:	687c      	ldr	r4, [r7, #4]
 80016d0:	2302      	movs	r3, #2
 80016d2:	9329      	str	r3, [sp, #164]	; 0xa4
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	9328      	str	r3, [sp, #160]	; 0xa0
 80016da:	2314      	movs	r3, #20
 80016dc:	9327      	str	r3, [sp, #156]	; 0x9c
 80016de:	4668      	mov	r0, sp
 80016e0:	f104 0310 	add.w	r3, r4, #16
 80016e4:	229c      	movs	r2, #156	; 0x9c
 80016e6:	4619      	mov	r1, r3
 80016e8:	f008 fa97 	bl	8009c1a <memcpy>
 80016ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016f0:	f001 f819 	bl	8002726 <bno055_read_regs>
 80016f4:	4603      	mov	r3, r0
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <bno055_gyro_x+0x3e>
        return err;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	e019      	b.n	8001736 <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001702:	7b7b      	ldrb	r3, [r7, #13]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b21a      	sxth	r2, r3
 8001708:	7b3b      	ldrb	r3, [r7, #12]
 800170a:	b21b      	sxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b21b      	sxth	r3, r3
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <bno055_gyro_x+0x62>
 8001720:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001724:	e001      	b.n	800172a <bno055_gyro_x+0x66>
 8001726:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001740 <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 800172a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001734:	2300      	movs	r3, #0
};
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bd90      	pop	{r4, r7, pc}
 800173e:	bf00      	nop
 8001740:	44610000 	.word	0x44610000

08001744 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b0af      	sub	sp, #188	; 0xbc
 8001748:	af2a      	add	r7, sp, #168	; 0xa8
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800174e:	687c      	ldr	r4, [r7, #4]
 8001750:	2302      	movs	r3, #2
 8001752:	9329      	str	r3, [sp, #164]	; 0xa4
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	9328      	str	r3, [sp, #160]	; 0xa0
 800175a:	2316      	movs	r3, #22
 800175c:	9327      	str	r3, [sp, #156]	; 0x9c
 800175e:	4668      	mov	r0, sp
 8001760:	f104 0310 	add.w	r3, r4, #16
 8001764:	229c      	movs	r2, #156	; 0x9c
 8001766:	4619      	mov	r1, r3
 8001768:	f008 fa57 	bl	8009c1a <memcpy>
 800176c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001770:	f000 ffd9 	bl	8002726 <bno055_read_regs>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <bno055_gyro_y+0x3e>
        return err;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	e019      	b.n	80017b6 <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001782:	7b7b      	ldrb	r3, [r7, #13]
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	b21a      	sxth	r2, r3
 8001788:	7b3b      	ldrb	r3, [r7, #12]
 800178a:	b21b      	sxth	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	b21b      	sxth	r3, r3
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <bno055_gyro_y+0x62>
 80017a0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80017a4:	e001      	b.n	80017aa <bno055_gyro_y+0x66>
 80017a6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80017c0 <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80017aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80017b4:	2300      	movs	r3, #0
};
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd90      	pop	{r4, r7, pc}
 80017be:	bf00      	nop
 80017c0:	44610000 	.word	0x44610000

080017c4 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b0af      	sub	sp, #188	; 0xbc
 80017c8:	af2a      	add	r7, sp, #168	; 0xa8
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80017ce:	687c      	ldr	r4, [r7, #4]
 80017d0:	2302      	movs	r3, #2
 80017d2:	9329      	str	r3, [sp, #164]	; 0xa4
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	9328      	str	r3, [sp, #160]	; 0xa0
 80017da:	2318      	movs	r3, #24
 80017dc:	9327      	str	r3, [sp, #156]	; 0x9c
 80017de:	4668      	mov	r0, sp
 80017e0:	f104 0310 	add.w	r3, r4, #16
 80017e4:	229c      	movs	r2, #156	; 0x9c
 80017e6:	4619      	mov	r1, r3
 80017e8:	f008 fa17 	bl	8009c1a <memcpy>
 80017ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017f0:	f000 ff99 	bl	8002726 <bno055_read_regs>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <bno055_gyro_z+0x3e>
        return err;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	e019      	b.n	8001836 <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001802:	7b7b      	ldrb	r3, [r7, #13]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21a      	sxth	r2, r3
 8001808:	7b3b      	ldrb	r3, [r7, #12]
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21b      	sxth	r3, r3
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <bno055_gyro_z+0x62>
 8001820:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001824:	e001      	b.n	800182a <bno055_gyro_z+0x66>
 8001826:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001840 <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 800182a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001834:	2300      	movs	r3, #0
};
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}
 800183e:	bf00      	nop
 8001840:	44610000 	.word	0x44610000

08001844 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b0b1      	sub	sp, #196	; 0xc4
 8001848:	af2a      	add	r7, sp, #168	; 0xa8
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 800184e:	687c      	ldr	r4, [r7, #4]
 8001850:	2306      	movs	r3, #6
 8001852:	9329      	str	r3, [sp, #164]	; 0xa4
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	9328      	str	r3, [sp, #160]	; 0xa0
 800185a:	2314      	movs	r3, #20
 800185c:	9327      	str	r3, [sp, #156]	; 0x9c
 800185e:	4668      	mov	r0, sp
 8001860:	f104 0310 	add.w	r3, r4, #16
 8001864:	229c      	movs	r2, #156	; 0x9c
 8001866:	4619      	mov	r1, r3
 8001868:	f008 f9d7 	bl	8009c1a <memcpy>
 800186c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001870:	f000 ff59 	bl	8002726 <bno055_read_regs>
 8001874:	4603      	mov	r3, r0
 8001876:	75fb      	strb	r3, [r7, #23]
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <bno055_gyro+0x3e>
        return err;
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	e03f      	b.n	8001902 <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <bno055_gyro+0x4c>
 800188a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800188e:	e000      	b.n	8001892 <bno055_gyro+0x4e>
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001892:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001894:	7a7b      	ldrb	r3, [r7, #9]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	b21a      	sxth	r2, r3
 800189a:	7a3b      	ldrb	r3, [r7, #8]
 800189c:	b21b      	sxth	r3, r3
 800189e:	4313      	orrs	r3, r2
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	ee07 3a90 	vmov	s15, r3
 80018a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80018ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80018b8:	7afb      	ldrb	r3, [r7, #11]
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	b21a      	sxth	r2, r3
 80018be:	7abb      	ldrb	r3, [r7, #10]
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	4313      	orrs	r3, r2
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80018d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80018dc:	7b7b      	ldrb	r3, [r7, #13]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b21a      	sxth	r2, r3
 80018e2:	7b3b      	ldrb	r3, [r7, #12]
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80018f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd90      	pop	{r4, r7, pc}
 800190a:	bf00      	nop
 800190c:	44610000 	.word	0x44610000

08001910 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b0af      	sub	sp, #188	; 0xbc
 8001914:	af2a      	add	r7, sp, #168	; 0xa8
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 800191a:	687c      	ldr	r4, [r7, #4]
 800191c:	2302      	movs	r3, #2
 800191e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	9328      	str	r3, [sp, #160]	; 0xa0
 8001926:	230e      	movs	r3, #14
 8001928:	9327      	str	r3, [sp, #156]	; 0x9c
 800192a:	4668      	mov	r0, sp
 800192c:	f104 0310 	add.w	r3, r4, #16
 8001930:	229c      	movs	r2, #156	; 0x9c
 8001932:	4619      	mov	r1, r3
 8001934:	f008 f971 	bl	8009c1a <memcpy>
 8001938:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800193c:	f000 fef3 	bl	8002726 <bno055_read_regs>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <bno055_mag_x+0x3e>
        return err;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	e012      	b.n	8001974 <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800194e:	7b7b      	ldrb	r3, [r7, #13]
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b21a      	sxth	r2, r3
 8001954:	7b3b      	ldrb	r3, [r7, #12]
 8001956:	b21b      	sxth	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	b21b      	sxth	r3, r3
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001964:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bd90      	pop	{r4, r7, pc}

0800197c <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b0af      	sub	sp, #188	; 0xbc
 8001980:	af2a      	add	r7, sp, #168	; 0xa8
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001986:	687c      	ldr	r4, [r7, #4]
 8001988:	2302      	movs	r3, #2
 800198a:	9329      	str	r3, [sp, #164]	; 0xa4
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	9328      	str	r3, [sp, #160]	; 0xa0
 8001992:	2310      	movs	r3, #16
 8001994:	9327      	str	r3, [sp, #156]	; 0x9c
 8001996:	4668      	mov	r0, sp
 8001998:	f104 0310 	add.w	r3, r4, #16
 800199c:	229c      	movs	r2, #156	; 0x9c
 800199e:	4619      	mov	r1, r3
 80019a0:	f008 f93b 	bl	8009c1a <memcpy>
 80019a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019a8:	f000 febd 	bl	8002726 <bno055_read_regs>
 80019ac:	4603      	mov	r3, r0
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <bno055_mag_y+0x3e>
        return err;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	e012      	b.n	80019e0 <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80019ba:	7b7b      	ldrb	r3, [r7, #13]
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	b21a      	sxth	r2, r3
 80019c0:	7b3b      	ldrb	r3, [r7, #12]
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	ee07 3a90 	vmov	s15, r3
 80019cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80019d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd90      	pop	{r4, r7, pc}

080019e8 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b0af      	sub	sp, #188	; 0xbc
 80019ec:	af2a      	add	r7, sp, #168	; 0xa8
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80019f2:	687c      	ldr	r4, [r7, #4]
 80019f4:	2302      	movs	r3, #2
 80019f6:	9329      	str	r3, [sp, #164]	; 0xa4
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	9328      	str	r3, [sp, #160]	; 0xa0
 80019fe:	2312      	movs	r3, #18
 8001a00:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a02:	4668      	mov	r0, sp
 8001a04:	f104 0310 	add.w	r3, r4, #16
 8001a08:	229c      	movs	r2, #156	; 0x9c
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f008 f905 	bl	8009c1a <memcpy>
 8001a10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a14:	f000 fe87 	bl	8002726 <bno055_read_regs>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <bno055_mag_z+0x3e>
        return err;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	e012      	b.n	8001a4c <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001a26:	7b7b      	ldrb	r3, [r7, #13]
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	7b3b      	ldrb	r3, [r7, #12]
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a3c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd90      	pop	{r4, r7, pc}

08001a54 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b0af      	sub	sp, #188	; 0xbc
 8001a58:	af2a      	add	r7, sp, #168	; 0xa8
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001a5e:	687c      	ldr	r4, [r7, #4]
 8001a60:	2306      	movs	r3, #6
 8001a62:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a6a:	230e      	movs	r3, #14
 8001a6c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a6e:	4668      	mov	r0, sp
 8001a70:	f104 0310 	add.w	r3, r4, #16
 8001a74:	229c      	movs	r2, #156	; 0x9c
 8001a76:	4619      	mov	r1, r3
 8001a78:	f008 f8cf 	bl	8009c1a <memcpy>
 8001a7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a80:	f000 fe51 	bl	8002726 <bno055_read_regs>
 8001a84:	4603      	mov	r3, r0
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <bno055_mag+0x3e>
        return err;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	e036      	b.n	8001b00 <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001a92:	7a7b      	ldrb	r3, [r7, #9]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	7a3b      	ldrb	r3, [r7, #8]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001aac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 8001ab6:	7afb      	ldrb	r3, [r7, #11]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	7abb      	ldrb	r3, [r7, #10]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001acc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001ad0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001ada:	7b7b      	ldrb	r3, [r7, #13]
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	b21a      	sxth	r2, r3
 8001ae0:	7b3b      	ldrb	r3, [r7, #12]
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001af4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001afe:	2300      	movs	r3, #0
};
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd90      	pop	{r4, r7, pc}

08001b08 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b0b1      	sub	sp, #196	; 0xc4
 8001b0c:	af2a      	add	r7, sp, #168	; 0xa8
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001b12:	687c      	ldr	r4, [r7, #4]
 8001b14:	2302      	movs	r3, #2
 8001b16:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b1e:	232e      	movs	r3, #46	; 0x2e
 8001b20:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b22:	4668      	mov	r0, sp
 8001b24:	f104 0310 	add.w	r3, r4, #16
 8001b28:	229c      	movs	r2, #156	; 0x9c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f008 f875 	bl	8009c1a <memcpy>
 8001b30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b34:	f000 fdf7 	bl	8002726 <bno055_read_regs>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	75fb      	strb	r3, [r7, #23]
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <bno055_gravity_x+0x3e>
        return err;
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
 8001b44:	e01b      	b.n	8001b7e <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <bno055_gravity_x+0x4a>
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <bno055_gravity_x+0x80>)
 8001b50:	e001      	b.n	8001b56 <bno055_gravity_x+0x4e>
 8001b52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b56:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b58:	7b7b      	ldrb	r3, [r7, #13]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	7b3b      	ldrb	r3, [r7, #12]
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	4313      	orrs	r3, r2
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	371c      	adds	r7, #28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}
 8001b86:	bf00      	nop
 8001b88:	42c80000 	.word	0x42c80000

08001b8c <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b0b1      	sub	sp, #196	; 0xc4
 8001b90:	af2a      	add	r7, sp, #168	; 0xa8
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001b96:	687c      	ldr	r4, [r7, #4]
 8001b98:	2302      	movs	r3, #2
 8001b9a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ba2:	2330      	movs	r3, #48	; 0x30
 8001ba4:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ba6:	4668      	mov	r0, sp
 8001ba8:	f104 0310 	add.w	r3, r4, #16
 8001bac:	229c      	movs	r2, #156	; 0x9c
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f008 f833 	bl	8009c1a <memcpy>
 8001bb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bb8:	f000 fdb5 	bl	8002726 <bno055_read_regs>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	75fb      	strb	r3, [r7, #23]
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <bno055_gravity_y+0x3e>
        return err;
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	e01b      	b.n	8001c02 <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <bno055_gravity_y+0x4a>
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <bno055_gravity_y+0x80>)
 8001bd4:	e001      	b.n	8001bda <bno055_gravity_y+0x4e>
 8001bd6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001bda:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001bdc:	7b7b      	ldrb	r3, [r7, #13]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	b21a      	sxth	r2, r3
 8001be2:	7b3b      	ldrb	r3, [r7, #12]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bf2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	371c      	adds	r7, #28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd90      	pop	{r4, r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	42c80000 	.word	0x42c80000

08001c10 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b0b1      	sub	sp, #196	; 0xc4
 8001c14:	af2a      	add	r7, sp, #168	; 0xa8
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001c1a:	687c      	ldr	r4, [r7, #4]
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c26:	2332      	movs	r3, #50	; 0x32
 8001c28:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c2a:	4668      	mov	r0, sp
 8001c2c:	f104 0310 	add.w	r3, r4, #16
 8001c30:	229c      	movs	r2, #156	; 0x9c
 8001c32:	4619      	mov	r1, r3
 8001c34:	f007 fff1 	bl	8009c1a <memcpy>
 8001c38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c3c:	f000 fd73 	bl	8002726 <bno055_read_regs>
 8001c40:	4603      	mov	r3, r0
 8001c42:	75fb      	strb	r3, [r7, #23]
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <bno055_gravity_z+0x3e>
        return err;
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	e01b      	b.n	8001c86 <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <bno055_gravity_z+0x4a>
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <bno055_gravity_z+0x80>)
 8001c58:	e001      	b.n	8001c5e <bno055_gravity_z+0x4e>
 8001c5a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001c5e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001c60:	7b7b      	ldrb	r3, [r7, #13]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	7b3b      	ldrb	r3, [r7, #12]
 8001c68:	b21b      	sxth	r3, r3
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c76:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	42c80000 	.word	0x42c80000

08001c94 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b0b1      	sub	sp, #196	; 0xc4
 8001c98:	af2a      	add	r7, sp, #168	; 0xa8
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001c9e:	687c      	ldr	r4, [r7, #4]
 8001ca0:	2306      	movs	r3, #6
 8001ca2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	9328      	str	r3, [sp, #160]	; 0xa0
 8001caa:	232e      	movs	r3, #46	; 0x2e
 8001cac:	9327      	str	r3, [sp, #156]	; 0x9c
 8001cae:	4668      	mov	r0, sp
 8001cb0:	f104 0310 	add.w	r3, r4, #16
 8001cb4:	229c      	movs	r2, #156	; 0x9c
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f007 ffaf 	bl	8009c1a <memcpy>
 8001cbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cc0:	f000 fd31 	bl	8002726 <bno055_read_regs>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	75fb      	strb	r3, [r7, #23]
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <bno055_gravity+0x3e>
        return err;
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
 8001cd0:	e03f      	b.n	8001d52 <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <bno055_gravity+0x4a>
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <bno055_gravity+0xc8>)
 8001cdc:	e001      	b.n	8001ce2 <bno055_gravity+0x4e>
 8001cde:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001ce2:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001ce4:	7a7b      	ldrb	r3, [r7, #9]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	7a3b      	ldrb	r3, [r7, #8]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cfa:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001d08:	7afb      	ldrb	r3, [r7, #11]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	b21a      	sxth	r2, r3
 8001d0e:	7abb      	ldrb	r3, [r7, #10]
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	4313      	orrs	r3, r2
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	ee07 3a90 	vmov	s15, r3
 8001d1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001d2c:	7b7b      	ldrb	r3, [r7, #13]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	7b3b      	ldrb	r3, [r7, #12]
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d42:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd90      	pop	{r4, r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	42c80000 	.word	0x42c80000

08001d60 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b0b1      	sub	sp, #196	; 0xc4
 8001d64:	af2a      	add	r7, sp, #168	; 0xa8
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001d6a:	687c      	ldr	r4, [r7, #4]
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	9328      	str	r3, [sp, #160]	; 0xa0
 8001d76:	231a      	movs	r3, #26
 8001d78:	9327      	str	r3, [sp, #156]	; 0x9c
 8001d7a:	4668      	mov	r0, sp
 8001d7c:	f104 0310 	add.w	r3, r4, #16
 8001d80:	229c      	movs	r2, #156	; 0x9c
 8001d82:	4619      	mov	r1, r3
 8001d84:	f007 ff49 	bl	8009c1a <memcpy>
 8001d88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d8c:	f000 fccb 	bl	8002726 <bno055_read_regs>
 8001d90:	4603      	mov	r3, r0
 8001d92:	75fb      	strb	r3, [r7, #23]
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8001d9a:	7dfb      	ldrb	r3, [r7, #23]
 8001d9c:	e01b      	b.n	8001dd6 <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <bno055_euler_yaw+0x4c>
 8001da6:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001daa:	e000      	b.n	8001dae <bno055_euler_yaw+0x4e>
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001dae:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001db0:	7b7b      	ldrb	r3, [r7, #13]
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	b21a      	sxth	r2, r3
 8001db6:	7b3b      	ldrb	r3, [r7, #12]
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dc6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd90      	pop	{r4, r7, pc}
 8001dde:	bf00      	nop
 8001de0:	44610000 	.word	0x44610000

08001de4 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b0b1      	sub	sp, #196	; 0xc4
 8001de8:	af2a      	add	r7, sp, #168	; 0xa8
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001dee:	687c      	ldr	r4, [r7, #4]
 8001df0:	2302      	movs	r3, #2
 8001df2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	9328      	str	r3, [sp, #160]	; 0xa0
 8001dfa:	231c      	movs	r3, #28
 8001dfc:	9327      	str	r3, [sp, #156]	; 0x9c
 8001dfe:	4668      	mov	r0, sp
 8001e00:	f104 0310 	add.w	r3, r4, #16
 8001e04:	229c      	movs	r2, #156	; 0x9c
 8001e06:	4619      	mov	r1, r3
 8001e08:	f007 ff07 	bl	8009c1a <memcpy>
 8001e0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e10:	f000 fc89 	bl	8002726 <bno055_read_regs>
 8001e14:	4603      	mov	r3, r0
 8001e16:	75fb      	strb	r3, [r7, #23]
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <bno055_euler_roll+0x3e>
        return err;
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	e01b      	b.n	8001e5a <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <bno055_euler_roll+0x4c>
 8001e2a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001e2e:	e000      	b.n	8001e32 <bno055_euler_roll+0x4e>
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e32:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001e34:	7b7b      	ldrb	r3, [r7, #13]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	7b3b      	ldrb	r3, [r7, #12]
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b21b      	sxth	r3, r3
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	371c      	adds	r7, #28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd90      	pop	{r4, r7, pc}
 8001e62:	bf00      	nop
 8001e64:	44610000 	.word	0x44610000

08001e68 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b0b1      	sub	sp, #196	; 0xc4
 8001e6c:	af2a      	add	r7, sp, #168	; 0xa8
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001e72:	687c      	ldr	r4, [r7, #4]
 8001e74:	2302      	movs	r3, #2
 8001e76:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e7e:	231e      	movs	r3, #30
 8001e80:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e82:	4668      	mov	r0, sp
 8001e84:	f104 0310 	add.w	r3, r4, #16
 8001e88:	229c      	movs	r2, #156	; 0x9c
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f007 fec5 	bl	8009c1a <memcpy>
 8001e90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e94:	f000 fc47 	bl	8002726 <bno055_read_regs>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	75fb      	strb	r3, [r7, #23]
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <bno055_euler_pitch+0x3e>
        return err;
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	e01b      	b.n	8001ede <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <bno055_euler_pitch+0x4c>
 8001eae:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001eb2:	e000      	b.n	8001eb6 <bno055_euler_pitch+0x4e>
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001eb6:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001eb8:	7b7b      	ldrb	r3, [r7, #13]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	b21a      	sxth	r2, r3
 8001ebe:	7b3b      	ldrb	r3, [r7, #12]
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ece:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd90      	pop	{r4, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	44610000 	.word	0x44610000

08001eec <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b0b1      	sub	sp, #196	; 0xc4
 8001ef0:	af2a      	add	r7, sp, #168	; 0xa8
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8001ef6:	687c      	ldr	r4, [r7, #4]
 8001ef8:	2306      	movs	r3, #6
 8001efa:	9329      	str	r3, [sp, #164]	; 0xa4
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	9328      	str	r3, [sp, #160]	; 0xa0
 8001f02:	231a      	movs	r3, #26
 8001f04:	9327      	str	r3, [sp, #156]	; 0x9c
 8001f06:	4668      	mov	r0, sp
 8001f08:	f104 0310 	add.w	r3, r4, #16
 8001f0c:	229c      	movs	r2, #156	; 0x9c
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f007 fe83 	bl	8009c1a <memcpy>
 8001f14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f18:	f000 fc05 	bl	8002726 <bno055_read_regs>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	75fb      	strb	r3, [r7, #23]
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
 8001f28:	e03f      	b.n	8001faa <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d102      	bne.n	8001f38 <bno055_euler+0x4c>
 8001f32:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001f36:	e000      	b.n	8001f3a <bno055_euler+0x4e>
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001f3a:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001f3c:	7a7b      	ldrb	r3, [r7, #9]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	b21a      	sxth	r2, r3
 8001f42:	7a3b      	ldrb	r3, [r7, #8]
 8001f44:	b21b      	sxth	r3, r3
 8001f46:	4313      	orrs	r3, r2
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f52:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001f60:	7afb      	ldrb	r3, [r7, #11]
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	b21a      	sxth	r2, r3
 8001f66:	7abb      	ldrb	r3, [r7, #10]
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f76:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8001f84:	7b7b      	ldrb	r3, [r7, #13]
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	b21a      	sxth	r2, r3
 8001f8a:	7b3b      	ldrb	r3, [r7, #12]
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	371c      	adds	r7, #28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd90      	pop	{r4, r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	44610000 	.word	0x44610000

08001fb8 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b0af      	sub	sp, #188	; 0xbc
 8001fbc:	af2a      	add	r7, sp, #168	; 0xa8
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8001fc2:	687c      	ldr	r4, [r7, #4]
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	9329      	str	r3, [sp, #164]	; 0xa4
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	9328      	str	r3, [sp, #160]	; 0xa0
 8001fce:	2320      	movs	r3, #32
 8001fd0:	9327      	str	r3, [sp, #156]	; 0x9c
 8001fd2:	4668      	mov	r0, sp
 8001fd4:	f104 0310 	add.w	r3, r4, #16
 8001fd8:	229c      	movs	r2, #156	; 0x9c
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f007 fe1d 	bl	8009c1a <memcpy>
 8001fe0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fe4:	f000 fb9f 	bl	8002726 <bno055_read_regs>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <bno055_quaternion_w+0x3e>
        return err;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	e012      	b.n	800201c <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001ff6:	7b7b      	ldrb	r3, [r7, #13]
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	7b3b      	ldrb	r3, [r7, #12]
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	4313      	orrs	r3, r2
 8002002:	b21b      	sxth	r3, r3
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800200c:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002024 <bno055_quaternion_w+0x6c>
 8002010:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	bd90      	pop	{r4, r7, pc}
 8002024:	46800000 	.word	0x46800000

08002028 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b0af      	sub	sp, #188	; 0xbc
 800202c:	af2a      	add	r7, sp, #168	; 0xa8
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002032:	687c      	ldr	r4, [r7, #4]
 8002034:	2302      	movs	r3, #2
 8002036:	9329      	str	r3, [sp, #164]	; 0xa4
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	9328      	str	r3, [sp, #160]	; 0xa0
 800203e:	2322      	movs	r3, #34	; 0x22
 8002040:	9327      	str	r3, [sp, #156]	; 0x9c
 8002042:	4668      	mov	r0, sp
 8002044:	f104 0310 	add.w	r3, r4, #16
 8002048:	229c      	movs	r2, #156	; 0x9c
 800204a:	4619      	mov	r1, r3
 800204c:	f007 fde5 	bl	8009c1a <memcpy>
 8002050:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002054:	f000 fb67 	bl	8002726 <bno055_read_regs>
 8002058:	4603      	mov	r3, r0
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <bno055_quaternion_x+0x3e>
        return err;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	e012      	b.n	800208c <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002066:	7b7b      	ldrb	r3, [r7, #13]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	b21a      	sxth	r2, r3
 800206c:	7b3b      	ldrb	r3, [r7, #12]
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21b      	sxth	r3, r3
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800207c:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002094 <bno055_quaternion_x+0x6c>
 8002080:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}
 8002094:	46800000 	.word	0x46800000

08002098 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b0af      	sub	sp, #188	; 0xbc
 800209c:	af2a      	add	r7, sp, #168	; 0xa8
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80020a2:	687c      	ldr	r4, [r7, #4]
 80020a4:	2302      	movs	r3, #2
 80020a6:	9329      	str	r3, [sp, #164]	; 0xa4
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	9328      	str	r3, [sp, #160]	; 0xa0
 80020ae:	2324      	movs	r3, #36	; 0x24
 80020b0:	9327      	str	r3, [sp, #156]	; 0x9c
 80020b2:	4668      	mov	r0, sp
 80020b4:	f104 0310 	add.w	r3, r4, #16
 80020b8:	229c      	movs	r2, #156	; 0x9c
 80020ba:	4619      	mov	r1, r3
 80020bc:	f007 fdad 	bl	8009c1a <memcpy>
 80020c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020c4:	f000 fb2f 	bl	8002726 <bno055_read_regs>
 80020c8:	4603      	mov	r3, r0
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <bno055_quaternion_y+0x3e>
        return err;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	e012      	b.n	80020fc <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80020d6:	7b7b      	ldrb	r3, [r7, #13]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	b21a      	sxth	r2, r3
 80020dc:	7b3b      	ldrb	r3, [r7, #12]
 80020de:	b21b      	sxth	r3, r3
 80020e0:	4313      	orrs	r3, r2
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	ee07 3a90 	vmov	s15, r3
 80020e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ec:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002104 <bno055_quaternion_y+0x6c>
 80020f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bd90      	pop	{r4, r7, pc}
 8002104:	46800000 	.word	0x46800000

08002108 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b0af      	sub	sp, #188	; 0xbc
 800210c:	af2a      	add	r7, sp, #168	; 0xa8
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002112:	687c      	ldr	r4, [r7, #4]
 8002114:	2302      	movs	r3, #2
 8002116:	9329      	str	r3, [sp, #164]	; 0xa4
 8002118:	f107 030c 	add.w	r3, r7, #12
 800211c:	9328      	str	r3, [sp, #160]	; 0xa0
 800211e:	2326      	movs	r3, #38	; 0x26
 8002120:	9327      	str	r3, [sp, #156]	; 0x9c
 8002122:	4668      	mov	r0, sp
 8002124:	f104 0310 	add.w	r3, r4, #16
 8002128:	229c      	movs	r2, #156	; 0x9c
 800212a:	4619      	mov	r1, r3
 800212c:	f007 fd75 	bl	8009c1a <memcpy>
 8002130:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002134:	f000 faf7 	bl	8002726 <bno055_read_regs>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <bno055_quaternion_z+0x3e>
        return err;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	e012      	b.n	800216c <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002146:	7b7b      	ldrb	r3, [r7, #13]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	b21a      	sxth	r2, r3
 800214c:	7b3b      	ldrb	r3, [r7, #12]
 800214e:	b21b      	sxth	r3, r3
 8002150:	4313      	orrs	r3, r2
 8002152:	b21b      	sxth	r3, r3
 8002154:	ee07 3a90 	vmov	s15, r3
 8002158:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800215c:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002174 <bno055_quaternion_z+0x6c>
 8002160:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	bd90      	pop	{r4, r7, pc}
 8002174:	46800000 	.word	0x46800000

08002178 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b0b1      	sub	sp, #196	; 0xc4
 800217c:	af2a      	add	r7, sp, #168	; 0xa8
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 8002182:	687c      	ldr	r4, [r7, #4]
 8002184:	2308      	movs	r3, #8
 8002186:	9329      	str	r3, [sp, #164]	; 0xa4
 8002188:	f107 030c 	add.w	r3, r7, #12
 800218c:	9328      	str	r3, [sp, #160]	; 0xa0
 800218e:	2320      	movs	r3, #32
 8002190:	9327      	str	r3, [sp, #156]	; 0x9c
 8002192:	4668      	mov	r0, sp
 8002194:	f104 0310 	add.w	r3, r4, #16
 8002198:	229c      	movs	r2, #156	; 0x9c
 800219a:	4619      	mov	r1, r3
 800219c:	f007 fd3d 	bl	8009c1a <memcpy>
 80021a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021a4:	f000 fabf 	bl	8002726 <bno055_read_regs>
 80021a8:	4603      	mov	r3, r0
 80021aa:	75fb      	strb	r3, [r7, #23]
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <bno055_quaternion+0x3e>
        return err;
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	e048      	b.n	8002248 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80021b6:	7b7b      	ldrb	r3, [r7, #13]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	b21a      	sxth	r2, r3
 80021bc:	7b3b      	ldrb	r3, [r7, #12]
 80021be:	b21b      	sxth	r3, r3
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	ee07 3a90 	vmov	s15, r3
 80021c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021cc:	eddf 6a20 	vldr	s13, [pc, #128]	; 8002250 <bno055_quaternion+0xd8>
 80021d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	b21a      	sxth	r2, r3
 80021e0:	7bbb      	ldrb	r3, [r7, #14]
 80021e2:	b21b      	sxth	r3, r3
 80021e4:	4313      	orrs	r3, r2
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	ee07 3a90 	vmov	s15, r3
 80021ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002250 <bno055_quaternion+0xd8>
 80021f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 80021fe:	7c7b      	ldrb	r3, [r7, #17]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	b21a      	sxth	r2, r3
 8002204:	7c3b      	ldrb	r3, [r7, #16]
 8002206:	b21b      	sxth	r3, r3
 8002208:	4313      	orrs	r3, r2
 800220a:	b21b      	sxth	r3, r3
 800220c:	ee07 3a90 	vmov	s15, r3
 8002210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002214:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002250 <bno055_quaternion+0xd8>
 8002218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 8002222:	7cfb      	ldrb	r3, [r7, #19]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	b21a      	sxth	r2, r3
 8002228:	7cbb      	ldrb	r3, [r7, #18]
 800222a:	b21b      	sxth	r3, r3
 800222c:	4313      	orrs	r3, r2
 800222e:	b21b      	sxth	r3, r3
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002238:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002250 <bno055_quaternion+0xd8>
 800223c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd90      	pop	{r4, r7, pc}
 8002250:	46800000 	.word	0x46800000

08002254 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b0af      	sub	sp, #188	; 0xbc
 8002258:	af2a      	add	r7, sp, #168	; 0xa8
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	4608      	mov	r0, r1
 800225e:	4611      	mov	r1, r2
 8002260:	461a      	mov	r2, r3
 8002262:	4603      	mov	r3, r0
 8002264:	70fb      	strb	r3, [r7, #3]
 8002266:	460b      	mov	r3, r1
 8002268:	70bb      	strb	r3, [r7, #2]
 800226a:	4613      	mov	r3, r2
 800226c:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800226e:	2101      	movs	r1, #1
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fabb 	bl	80027ec <bno055_set_page>
 8002276:	4603      	mov	r3, r0
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <bno055_acc_conf+0x30>
        return err;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	e04b      	b.n	800231c <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002284:	2100      	movs	r1, #0
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f91b 	bl	80024c2 <bno055_set_opmode>
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <bno055_acc_conf+0x46>
        return err;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	e040      	b.n	800231c <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800229a:	200c      	movs	r0, #12
 800229c:	f001 fe8e 	bl	8003fbc <HAL_Delay>
    u8 config = range | bandwidth | mode;
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	78bb      	ldrb	r3, [r7, #2]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	787b      	ldrb	r3, [r7, #1]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 80022b0:	687c      	ldr	r4, [r7, #4]
 80022b2:	2301      	movs	r3, #1
 80022b4:	9329      	str	r3, [sp, #164]	; 0xa4
 80022b6:	f107 030e 	add.w	r3, r7, #14
 80022ba:	9328      	str	r3, [sp, #160]	; 0xa0
 80022bc:	2308      	movs	r3, #8
 80022be:	9327      	str	r3, [sp, #156]	; 0x9c
 80022c0:	4668      	mov	r0, sp
 80022c2:	f104 0310 	add.w	r3, r4, #16
 80022c6:	229c      	movs	r2, #156	; 0x9c
 80022c8:	4619      	mov	r1, r3
 80022ca:	f007 fca6 	bl	8009c1a <memcpy>
 80022ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022d2:	f000 fa5e 	bl	8002792 <bno055_write_regs>
 80022d6:	4603      	mov	r3, r0
 80022d8:	73fb      	strb	r3, [r7, #15]
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <bno055_acc_conf+0x90>
        return err;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	e01b      	b.n	800231c <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	791b      	ldrb	r3, [r3, #4]
 80022e8:	4619      	mov	r1, r3
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f8e9 	bl	80024c2 <bno055_set_opmode>
 80022f0:	4603      	mov	r3, r0
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <bno055_acc_conf+0xaa>
        return err;
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	e00e      	b.n	800231c <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80022fe:	2018      	movs	r0, #24
 8002300:	f001 fe5c 	bl	8003fbc <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002304:	2100      	movs	r1, #0
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fa70 	bl	80027ec <bno055_set_page>
 800230c:	4603      	mov	r3, r0
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <bno055_acc_conf+0xc6>
        return err;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	e000      	b.n	800231c <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bd90      	pop	{r4, r7, pc}

08002324 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b0af      	sub	sp, #188	; 0xbc
 8002328:	af2a      	add	r7, sp, #168	; 0xa8
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	4608      	mov	r0, r1
 800232e:	4611      	mov	r1, r2
 8002330:	461a      	mov	r2, r3
 8002332:	4603      	mov	r3, r0
 8002334:	70fb      	strb	r3, [r7, #3]
 8002336:	460b      	mov	r3, r1
 8002338:	70bb      	strb	r3, [r7, #2]
 800233a:	4613      	mov	r3, r2
 800233c:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800233e:	2101      	movs	r1, #1
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fa53 	bl	80027ec <bno055_set_page>
 8002346:	4603      	mov	r3, r0
 8002348:	73fb      	strb	r3, [r7, #15]
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <bno055_gyr_conf+0x30>
        return err;
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	e04a      	b.n	80023ea <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002354:	2100      	movs	r1, #0
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f8b3 	bl	80024c2 <bno055_set_opmode>
 800235c:	4603      	mov	r3, r0
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <bno055_gyr_conf+0x46>
        return err;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	e03f      	b.n	80023ea <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800236a:	200c      	movs	r0, #12
 800236c:	f001 fe26 	bl	8003fbc <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	78bb      	ldrb	r3, [r7, #2]
 8002374:	4313      	orrs	r3, r2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	733b      	strb	r3, [r7, #12]
 800237a:	787b      	ldrb	r3, [r7, #1]
 800237c:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 800237e:	687c      	ldr	r4, [r7, #4]
 8002380:	2302      	movs	r3, #2
 8002382:	9329      	str	r3, [sp, #164]	; 0xa4
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	9328      	str	r3, [sp, #160]	; 0xa0
 800238a:	230a      	movs	r3, #10
 800238c:	9327      	str	r3, [sp, #156]	; 0x9c
 800238e:	4668      	mov	r0, sp
 8002390:	f104 0310 	add.w	r3, r4, #16
 8002394:	229c      	movs	r2, #156	; 0x9c
 8002396:	4619      	mov	r1, r3
 8002398:	f007 fc3f 	bl	8009c1a <memcpy>
 800239c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023a0:	f000 f9f7 	bl	8002792 <bno055_write_regs>
 80023a4:	4603      	mov	r3, r0
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	e01b      	b.n	80023ea <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	791b      	ldrb	r3, [r3, #4]
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f882 	bl	80024c2 <bno055_set_opmode>
 80023be:	4603      	mov	r3, r0
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <bno055_gyr_conf+0xa8>
        return err;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	e00e      	b.n	80023ea <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80023cc:	2018      	movs	r0, #24
 80023ce:	f001 fdf5 	bl	8003fbc <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80023d2:	2100      	movs	r1, #0
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fa09 	bl	80027ec <bno055_set_page>
 80023da:	4603      	mov	r3, r0
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <bno055_gyr_conf+0xc4>
        return err;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	e000      	b.n	80023ea <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd90      	pop	{r4, r7, pc}

080023f2 <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 80023f2:	b590      	push	{r4, r7, lr}
 80023f4:	b0af      	sub	sp, #188	; 0xbc
 80023f6:	af2a      	add	r7, sp, #168	; 0xa8
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	4608      	mov	r0, r1
 80023fc:	4611      	mov	r1, r2
 80023fe:	461a      	mov	r2, r3
 8002400:	4603      	mov	r3, r0
 8002402:	70fb      	strb	r3, [r7, #3]
 8002404:	460b      	mov	r3, r1
 8002406:	70bb      	strb	r3, [r7, #2]
 8002408:	4613      	mov	r3, r2
 800240a:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800240c:	2101      	movs	r1, #1
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f9ec 	bl	80027ec <bno055_set_page>
 8002414:	4603      	mov	r3, r0
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <bno055_mag_conf+0x30>
        return err;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	e04b      	b.n	80024ba <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002422:	2100      	movs	r1, #0
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f84c 	bl	80024c2 <bno055_set_opmode>
 800242a:	4603      	mov	r3, r0
 800242c:	73fb      	strb	r3, [r7, #15]
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <bno055_mag_conf+0x46>
        return err;
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	e040      	b.n	80024ba <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002438:	200c      	movs	r0, #12
 800243a:	f001 fdbf 	bl	8003fbc <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	78bb      	ldrb	r3, [r7, #2]
 8002442:	4313      	orrs	r3, r2
 8002444:	b2da      	uxtb	r2, r3
 8002446:	787b      	ldrb	r3, [r7, #1]
 8002448:	4313      	orrs	r3, r2
 800244a:	b2db      	uxtb	r3, r3
 800244c:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 800244e:	687c      	ldr	r4, [r7, #4]
 8002450:	2301      	movs	r3, #1
 8002452:	9329      	str	r3, [sp, #164]	; 0xa4
 8002454:	f107 030e 	add.w	r3, r7, #14
 8002458:	9328      	str	r3, [sp, #160]	; 0xa0
 800245a:	2309      	movs	r3, #9
 800245c:	9327      	str	r3, [sp, #156]	; 0x9c
 800245e:	4668      	mov	r0, sp
 8002460:	f104 0310 	add.w	r3, r4, #16
 8002464:	229c      	movs	r2, #156	; 0x9c
 8002466:	4619      	mov	r1, r3
 8002468:	f007 fbd7 	bl	8009c1a <memcpy>
 800246c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002470:	f000 f98f 	bl	8002792 <bno055_write_regs>
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <bno055_mag_conf+0x90>
        return err;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	e01b      	b.n	80024ba <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	791b      	ldrb	r3, [r3, #4]
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f81a 	bl	80024c2 <bno055_set_opmode>
 800248e:	4603      	mov	r3, r0
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <bno055_mag_conf+0xaa>
        return err;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	e00e      	b.n	80024ba <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800249c:	2018      	movs	r0, #24
 800249e:	f001 fd8d 	bl	8003fbc <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80024a2:	2100      	movs	r1, #0
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f9a1 	bl	80027ec <bno055_set_page>
 80024aa:	4603      	mov	r3, r0
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <bno055_mag_conf+0xc6>
        return err;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	e000      	b.n	80024ba <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd90      	pop	{r4, r7, pc}

080024c2 <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 80024c2:	b590      	push	{r4, r7, lr}
 80024c4:	b0af      	sub	sp, #188	; 0xbc
 80024c6:	af2a      	add	r7, sp, #168	; 0xa8
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 80024ce:	687c      	ldr	r4, [r7, #4]
 80024d0:	2301      	movs	r3, #1
 80024d2:	9329      	str	r3, [sp, #164]	; 0xa4
 80024d4:	1cfb      	adds	r3, r7, #3
 80024d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80024d8:	233d      	movs	r3, #61	; 0x3d
 80024da:	9327      	str	r3, [sp, #156]	; 0x9c
 80024dc:	4668      	mov	r0, sp
 80024de:	f104 0310 	add.w	r3, r4, #16
 80024e2:	229c      	movs	r2, #156	; 0x9c
 80024e4:	4619      	mov	r1, r3
 80024e6:	f007 fb98 	bl	8009c1a <memcpy>
 80024ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024ee:	f000 f950 	bl	8002792 <bno055_write_regs>
 80024f2:	4603      	mov	r3, r0
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	e003      	b.n	8002508 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002500:	2018      	movs	r0, #24
 8002502:	f001 fd5b 	bl	8003fbc <HAL_Delay>
    return BNO_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	bd90      	pop	{r4, r7, pc}

08002510 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b0af      	sub	sp, #188	; 0xbc
 8002514:	af2a      	add	r7, sp, #168	; 0xa8
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	4608      	mov	r0, r1
 800251a:	4611      	mov	r1, r2
 800251c:	461a      	mov	r2, r3
 800251e:	4603      	mov	r3, r0
 8002520:	70fb      	strb	r3, [r7, #3]
 8002522:	460b      	mov	r3, r1
 8002524:	70bb      	strb	r3, [r7, #2]
 8002526:	4613      	mov	r3, r2
 8002528:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800252a:	2100      	movs	r1, #0
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ffc8 	bl	80024c2 <bno055_set_opmode>
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <bno055_set_unit+0x30>
        return err;
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	e04b      	b.n	80025d8 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002540:	2100      	movs	r1, #0
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f952 	bl	80027ec <bno055_set_page>
 8002548:	4603      	mov	r3, r0
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <bno055_set_unit+0x46>
        return err;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	e040      	b.n	80025d8 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	78bb      	ldrb	r3, [r7, #2]
 800255a:	4313      	orrs	r3, r2
 800255c:	b2da      	uxtb	r2, r3
 800255e:	787b      	ldrb	r3, [r7, #1]
 8002560:	4313      	orrs	r3, r2
 8002562:	b2da      	uxtb	r2, r3
 8002564:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002568:	4313      	orrs	r3, r2
 800256a:	b2db      	uxtb	r3, r3
 800256c:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 800256e:	687c      	ldr	r4, [r7, #4]
 8002570:	2301      	movs	r3, #1
 8002572:	9329      	str	r3, [sp, #164]	; 0xa4
 8002574:	f107 030e 	add.w	r3, r7, #14
 8002578:	9328      	str	r3, [sp, #160]	; 0xa0
 800257a:	233b      	movs	r3, #59	; 0x3b
 800257c:	9327      	str	r3, [sp, #156]	; 0x9c
 800257e:	4668      	mov	r0, sp
 8002580:	f104 0310 	add.w	r3, r4, #16
 8002584:	229c      	movs	r2, #156	; 0x9c
 8002586:	4619      	mov	r1, r3
 8002588:	f007 fb47 	bl	8009c1a <memcpy>
 800258c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002590:	f000 f8ff 	bl	8002792 <bno055_write_regs>
 8002594:	4603      	mov	r3, r0
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <bno055_set_unit+0x92>
        return err;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	e01a      	b.n	80025d8 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	78ba      	ldrb	r2, [r7, #2]
 80025a6:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	787a      	ldrb	r2, [r7, #1]
 80025ac:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80025b4:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	791b      	ldrb	r3, [r3, #4]
 80025c0:	4619      	mov	r1, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff ff7d 	bl	80024c2 <bno055_set_opmode>
 80025c8:	4603      	mov	r3, r0
 80025ca:	73fb      	strb	r3, [r7, #15]
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <bno055_set_unit+0xc6>
        return err;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	e000      	b.n	80025d8 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd90      	pop	{r4, r7, pc}

080025e0 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b0af      	sub	sp, #188	; 0xbc
 80025e4:	af2a      	add	r7, sp, #168	; 0xa8
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 80025f2:	2304      	movs	r3, #4
 80025f4:	e04d      	b.n	8002692 <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 80025f6:	2100      	movs	r1, #0
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ff62 	bl	80024c2 <bno055_set_opmode>
 80025fe:	4603      	mov	r3, r0
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <bno055_set_pwr_mode+0x2c>
        return err;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	e042      	b.n	8002692 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800260c:	2100      	movs	r1, #0
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f8ec 	bl	80027ec <bno055_set_page>
 8002614:	4603      	mov	r3, r0
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <bno055_set_pwr_mode+0x42>
        return err;
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	e037      	b.n	8002692 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 8002622:	687c      	ldr	r4, [r7, #4]
 8002624:	2301      	movs	r3, #1
 8002626:	9329      	str	r3, [sp, #164]	; 0xa4
 8002628:	1cfb      	adds	r3, r7, #3
 800262a:	9328      	str	r3, [sp, #160]	; 0xa0
 800262c:	233e      	movs	r3, #62	; 0x3e
 800262e:	9327      	str	r3, [sp, #156]	; 0x9c
 8002630:	4668      	mov	r0, sp
 8002632:	f104 0310 	add.w	r3, r4, #16
 8002636:	229c      	movs	r2, #156	; 0x9c
 8002638:	4619      	mov	r1, r3
 800263a:	f007 faee 	bl	8009c1a <memcpy>
 800263e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002642:	f000 f8a6 	bl	8002792 <bno055_write_regs>
 8002646:	4603      	mov	r3, r0
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	e01e      	b.n	8002692 <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800265a:	2100      	movs	r1, #0
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f8c5 	bl	80027ec <bno055_set_page>
 8002662:	4603      	mov	r3, r0
 8002664:	73fb      	strb	r3, [r7, #15]
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <bno055_set_pwr_mode+0x90>
        return err;
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	e010      	b.n	8002692 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	791b      	ldrb	r3, [r3, #4]
 8002674:	4619      	mov	r1, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ff23 	bl	80024c2 <bno055_set_opmode>
 800267c:	4603      	mov	r3, r0
 800267e:	73fb      	strb	r3, [r7, #15]
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <bno055_set_pwr_mode+0xaa>
        return err;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	e003      	b.n	8002692 <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 800268a:	2002      	movs	r0, #2
 800268c:	f001 fc96 	bl	8003fbc <HAL_Delay>
    return BNO_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bd90      	pop	{r4, r7, pc}

0800269a <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 800269a:	b590      	push	{r4, r7, lr}
 800269c:	b0af      	sub	sp, #188	; 0xbc
 800269e:	af2a      	add	r7, sp, #168	; 0xa8
 80026a0:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 80026a2:	2320      	movs	r3, #32
 80026a4:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80026a6:	687c      	ldr	r4, [r7, #4]
 80026a8:	2301      	movs	r3, #1
 80026aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80026ac:	f107 030f 	add.w	r3, r7, #15
 80026b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80026b2:	233f      	movs	r3, #63	; 0x3f
 80026b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80026b6:	4668      	mov	r0, sp
 80026b8:	f104 0310 	add.w	r3, r4, #16
 80026bc:	229c      	movs	r2, #156	; 0x9c
 80026be:	4619      	mov	r1, r3
 80026c0:	f007 faab 	bl	8009c1a <memcpy>
 80026c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026c8:	f000 f863 	bl	8002792 <bno055_write_regs>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <bno055_reset+0x3e>
    }
    return BNO_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd90      	pop	{r4, r7, pc}

080026e0 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 80026e0:	b590      	push	{r4, r7, lr}
 80026e2:	b0af      	sub	sp, #188	; 0xbc
 80026e4:	af2a      	add	r7, sp, #168	; 0xa8
 80026e6:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80026ec:	687c      	ldr	r4, [r7, #4]
 80026ee:	2301      	movs	r3, #1
 80026f0:	9329      	str	r3, [sp, #164]	; 0xa4
 80026f2:	f107 030f 	add.w	r3, r7, #15
 80026f6:	9328      	str	r3, [sp, #160]	; 0xa0
 80026f8:	233f      	movs	r3, #63	; 0x3f
 80026fa:	9327      	str	r3, [sp, #156]	; 0x9c
 80026fc:	4668      	mov	r0, sp
 80026fe:	f104 0310 	add.w	r3, r4, #16
 8002702:	229c      	movs	r2, #156	; 0x9c
 8002704:	4619      	mov	r1, r3
 8002706:	f007 fa88 	bl	8009c1a <memcpy>
 800270a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800270e:	f000 f840 	bl	8002792 <bno055_write_regs>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <bno055_on+0x3e>
    }
    return BNO_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bd90      	pop	{r4, r7, pc}

08002726 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8002726:	b084      	sub	sp, #16
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af02      	add	r7, sp, #8
 800272e:	f107 0c10 	add.w	ip, r7, #16
 8002732:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8002736:	6938      	ldr	r0, [r7, #16]
 8002738:	7dbb      	ldrb	r3, [r7, #22]
 800273a:	b299      	uxth	r1, r3
 800273c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2301      	movs	r3, #1
 8002748:	f003 fc20 	bl	8005f8c <HAL_I2C_Master_Transmit>
 800274c:	4603      	mov	r3, r0
 800274e:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8002756:	2301      	movs	r3, #1
 8002758:	e014      	b.n	8002784 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 800275a:	6938      	ldr	r0, [r7, #16]
 800275c:	7dbb      	ldrb	r3, [r7, #22]
 800275e:	b299      	uxth	r1, r3
 8002760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002764:	b29b      	uxth	r3, r3
 8002766:	f04f 32ff 	mov.w	r2, #4294967295
 800276a:	9200      	str	r2, [sp, #0]
 800276c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002770:	f003 fd24 	bl	80061bc <HAL_I2C_Master_Receive>
 8002774:	4603      	mov	r3, r0
 8002776:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800278e:	b004      	add	sp, #16
 8002790:	4770      	bx	lr

08002792 <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 8002792:	b084      	sub	sp, #16
 8002794:	b5b0      	push	{r4, r5, r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af04      	add	r7, sp, #16
 800279a:	f107 0418 	add.w	r4, r7, #24
 800279e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 80027a2:	69b8      	ldr	r0, [r7, #24]
 80027a4:	7fbb      	ldrb	r3, [r7, #30]
 80027a6:	b299      	uxth	r1, r3
 80027a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027b2:	b29c      	uxth	r4, r3
 80027b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f04f 35ff 	mov.w	r5, #4294967295
 80027be:	9502      	str	r5, [sp, #8]
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	4623      	mov	r3, r4
 80027ca:	f003 fded 	bl	80063a8 <HAL_I2C_Mem_Write>
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80027e8:	b004      	add	sp, #16
 80027ea:	4770      	bx	lr

080027ec <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b0af      	sub	sp, #188	; 0xbc
 80027f0:	af2a      	add	r7, sp, #168	; 0xa8
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7b5a      	ldrb	r2, [r3, #13]
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d001      	beq.n	8002806 <bno055_set_page+0x1a>
        return BNO_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e024      	b.n	8002850 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d901      	bls.n	8002810 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 800280c:	2302      	movs	r3, #2
 800280e:	e01f      	b.n	8002850 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8002810:	687c      	ldr	r4, [r7, #4]
 8002812:	2301      	movs	r3, #1
 8002814:	9329      	str	r3, [sp, #164]	; 0xa4
 8002816:	1cfb      	adds	r3, r7, #3
 8002818:	9328      	str	r3, [sp, #160]	; 0xa0
 800281a:	2307      	movs	r3, #7
 800281c:	9327      	str	r3, [sp, #156]	; 0x9c
 800281e:	4668      	mov	r0, sp
 8002820:	f104 0310 	add.w	r3, r4, #16
 8002824:	229c      	movs	r2, #156	; 0x9c
 8002826:	4619      	mov	r1, r3
 8002828:	f007 f9f7 	bl	8009c1a <memcpy>
 800282c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002830:	f7ff ffaf 	bl	8002792 <bno055_write_regs>
 8002834:	4603      	mov	r3, r0
 8002836:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <bno055_set_page+0x56>
        return err;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	e006      	b.n	8002850 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8002848:	2002      	movs	r0, #2
 800284a:	f001 fbb7 	bl	8003fbc <HAL_Delay>
    return BNO_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	bd90      	pop	{r4, r7, pc}

08002858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800285e:	f001 fb3c 	bl	8003eda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002862:	f000 f824 	bl	80028ae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002866:	f000 fc57 	bl	8003118 <MX_GPIO_Init>
  MX_DMA_Init();
 800286a:	f000 fc13 	bl	8003094 <MX_DMA_Init>
  MX_ADC1_Init();
 800286e:	f000 f86d 	bl	800294c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8002872:	f000 f96d 	bl	8002b50 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8002876:	f000 f9b1 	bl	8002bdc <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 800287a:	f000 f9f5 	bl	8002c68 <MX_FDCAN3_Init>
  MX_I2C1_Init();
 800287e:	f000 fa39 	bl	8002cf4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002882:	f000 fb63 	bl	8002f4c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8002886:	f000 fbdd 	bl	8003044 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800288a:	f000 fa73 	bl	8002d74 <MX_I2C2_Init>
  MX_IWDG_Init();
 800288e:	f000 faf1 	bl	8002e74 <MX_IWDG_Init>
  MX_ADC5_Init();
 8002892:	f000 f8f7 	bl	8002a84 <MX_ADC5_Init>
  MX_I2C3_Init();
 8002896:	f000 faad 	bl	8002df4 <MX_I2C3_Init>
  MX_SPI3_Init();
 800289a:	f000 fb95 	bl	8002fc8 <MX_SPI3_Init>
  MX_LPUART1_UART_Init();
 800289e:	f000 fb07 	bl	8002eb0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	accelerometer_init();
 80028a2:	f7fe fb27 	bl	8000ef4 <accelerometer_init>
	int acc_x_value = read_accelerometer_x();
 80028a6:	f7fe fb55 	bl	8000f54 <read_accelerometer_x>
 80028aa:	6078      	str	r0, [r7, #4]
  {
 80028ac:	e7f9      	b.n	80028a2 <main+0x4a>

080028ae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b094      	sub	sp, #80	; 0x50
 80028b2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028b4:	f107 0318 	add.w	r3, r7, #24
 80028b8:	2238      	movs	r2, #56	; 0x38
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f007 f91c 	bl	8009afa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80028d4:	f004 fb54 	bl	8006f80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80028d8:	230a      	movs	r3, #10
 80028da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028e2:	2340      	movs	r3, #64	; 0x40
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80028e6:	2301      	movs	r3, #1
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028ea:	2302      	movs	r3, #2
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028ee:	2302      	movs	r3, #2
 80028f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80028f2:	2301      	movs	r3, #1
 80028f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80028f6:	230c      	movs	r3, #12
 80028f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028fa:	2302      	movs	r3, #2
 80028fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80028fe:	2304      	movs	r3, #4
 8002900:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002902:	2302      	movs	r3, #2
 8002904:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002906:	f107 0318 	add.w	r3, r7, #24
 800290a:	4618      	mov	r0, r3
 800290c:	f004 fbec 	bl	80070e8 <HAL_RCC_OscConfig>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002916:	f000 fccf 	bl	80032b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800291a:	230f      	movs	r3, #15
 800291c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800291e:	2301      	movs	r3, #1
 8002920:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f004 feea 	bl	800770c <HAL_RCC_ClockConfig>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800293e:	f000 fcbb 	bl	80032b8 <Error_Handler>
  }
}
 8002942:	bf00      	nop
 8002944:	3750      	adds	r7, #80	; 0x50
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08c      	sub	sp, #48	; 0x30
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	2220      	movs	r2, #32
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f007 f8c8 	bl	8009afa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800296a:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <MX_ADC1_Init+0x130>)
 800296c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002970:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002972:	4b42      	ldr	r3, [pc, #264]	; (8002a7c <MX_ADC1_Init+0x130>)
 8002974:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002978:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800297a:	4b40      	ldr	r3, [pc, #256]	; (8002a7c <MX_ADC1_Init+0x130>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002980:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <MX_ADC1_Init+0x130>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002986:	4b3d      	ldr	r3, [pc, #244]	; (8002a7c <MX_ADC1_Init+0x130>)
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800298c:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <MX_ADC1_Init+0x130>)
 800298e:	2201      	movs	r2, #1
 8002990:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002992:	4b3a      	ldr	r3, [pc, #232]	; (8002a7c <MX_ADC1_Init+0x130>)
 8002994:	2204      	movs	r2, #4
 8002996:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002998:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <MX_ADC1_Init+0x130>)
 800299a:	2200      	movs	r2, #0
 800299c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800299e:	4b37      	ldr	r3, [pc, #220]	; (8002a7c <MX_ADC1_Init+0x130>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80029a4:	4b35      	ldr	r3, [pc, #212]	; (8002a7c <MX_ADC1_Init+0x130>)
 80029a6:	2204      	movs	r2, #4
 80029a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029aa:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <MX_ADC1_Init+0x130>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029b2:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <MX_ADC1_Init+0x130>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029b8:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <MX_ADC1_Init+0x130>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <MX_ADC1_Init+0x130>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80029c6:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <MX_ADC1_Init+0x130>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <MX_ADC1_Init+0x130>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029d4:	4829      	ldr	r0, [pc, #164]	; (8002a7c <MX_ADC1_Init+0x130>)
 80029d6:	f001 fce9 	bl	80043ac <HAL_ADC_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80029e0:	f000 fc6a 	bl	80032b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80029e4:	2300      	movs	r3, #0
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80029e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ec:	4619      	mov	r1, r3
 80029ee:	4823      	ldr	r0, [pc, #140]	; (8002a7c <MX_ADC1_Init+0x130>)
 80029f0:	f002 fafe 	bl	8004ff0 <HAL_ADCEx_MultiModeConfigChannel>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80029fa:	f000 fc5d 	bl	80032b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <MX_ADC1_Init+0x134>)
 8002a00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a02:	2306      	movs	r3, #6
 8002a04:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a0a:	237f      	movs	r3, #127	; 0x7f
 8002a0c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a0e:	2304      	movs	r3, #4
 8002a10:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4818      	ldr	r0, [pc, #96]	; (8002a7c <MX_ADC1_Init+0x130>)
 8002a1c:	f001 fe82 	bl	8004724 <HAL_ADC_ConfigChannel>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002a26:	f000 fc47 	bl	80032b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4812      	ldr	r0, [pc, #72]	; (8002a7c <MX_ADC1_Init+0x130>)
 8002a34:	f001 fe76 	bl	8004724 <HAL_ADC_ConfigChannel>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8002a3e:	f000 fc3b 	bl	80032b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002a42:	2312      	movs	r3, #18
 8002a44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	480c      	ldr	r0, [pc, #48]	; (8002a7c <MX_ADC1_Init+0x130>)
 8002a4c:	f001 fe6a 	bl	8004724 <HAL_ADC_ConfigChannel>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 8002a56:	f000 fc2f 	bl	80032b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002a5a:	2318      	movs	r3, #24
 8002a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4806      	ldr	r0, [pc, #24]	; (8002a7c <MX_ADC1_Init+0x130>)
 8002a64:	f001 fe5e 	bl	8004724 <HAL_ADC_ConfigChannel>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8002a6e:	f000 fc23 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a72:	bf00      	nop
 8002a74:	3730      	adds	r7, #48	; 0x30
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200002ac 	.word	0x200002ac
 8002a80:	04300002 	.word	0x04300002

08002a84 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a8a:	463b      	mov	r3, r7
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f007 f832 	bl	8009afa <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8002a96:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002a98:	4a2b      	ldr	r2, [pc, #172]	; (8002b48 <MX_ADC5_Init+0xc4>)
 8002a9a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a9c:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002a9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aa2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8002ab0:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002ab6:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002abc:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002abe:	2204      	movs	r2, #4
 8002ac0:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8002ae8:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002af0:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8002af6:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8002afe:	4811      	ldr	r0, [pc, #68]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002b00:	f001 fc54 	bl	80043ac <HAL_ADC_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8002b0a:	f000 fbd5 	bl	80032b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <MX_ADC5_Init+0xc8>)
 8002b10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b12:	2306      	movs	r3, #6
 8002b14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b1a:	237f      	movs	r3, #127	; 0x7f
 8002b1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b1e:	2304      	movs	r3, #4
 8002b20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8002b26:	463b      	mov	r3, r7
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4806      	ldr	r0, [pc, #24]	; (8002b44 <MX_ADC5_Init+0xc0>)
 8002b2c:	f001 fdfa 	bl	8004724 <HAL_ADC_ConfigChannel>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8002b36:	f000 fbbf 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8002b3a:	bf00      	nop
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000318 	.word	0x20000318
 8002b48:	50000600 	.word	0x50000600
 8002b4c:	08600004 	.word	0x08600004

08002b50 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002b54:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002b56:	4a20      	ldr	r2, [pc, #128]	; (8002bd8 <MX_FDCAN1_Init+0x88>)
 8002b58:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002b60:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002b78:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002b80:	2210      	movs	r2, #16
 8002b82:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002b84:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002b8a:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002b90:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002b92:	2202      	movs	r2, #2
 8002b94:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002b96:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002bc0:	4804      	ldr	r0, [pc, #16]	; (8002bd4 <MX_FDCAN1_Init+0x84>)
 8002bc2:	f002 fde7 	bl	8005794 <HAL_FDCAN_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002bcc:	f000 fb74 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	200003e4 	.word	0x200003e4
 8002bd8:	40006400 	.word	0x40006400

08002bdc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002be0:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002be2:	4a20      	ldr	r2, [pc, #128]	; (8002c64 <MX_FDCAN2_Init+0x88>)
 8002be4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002be6:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002bec:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8002bf8:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002bfe:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8002c16:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002c18:	2202      	movs	r2, #2
 8002c1a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8002c1c:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002c1e:	2202      	movs	r2, #2
 8002c20:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002c22:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8002c28:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002c34:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8002c3a:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002c40:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002c4c:	4804      	ldr	r0, [pc, #16]	; (8002c60 <MX_FDCAN2_Init+0x84>)
 8002c4e:	f002 fda1 	bl	8005794 <HAL_FDCAN_Init>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8002c58:	f000 fb2e 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000448 	.word	0x20000448
 8002c64:	40006800 	.word	0x40006800

08002c68 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002c6e:	4a20      	ldr	r2, [pc, #128]	; (8002cf0 <MX_FDCAN3_Init+0x88>)
 8002c70:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002c72:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002c78:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8002c90:	4b16      	ldr	r3, [pc, #88]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002c98:	2210      	movs	r2, #16
 8002c9a:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8002ca8:	4b10      	ldr	r3, [pc, #64]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002caa:	2202      	movs	r2, #2
 8002cac:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8002cae:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8002cd8:	4804      	ldr	r0, [pc, #16]	; (8002cec <MX_FDCAN3_Init+0x84>)
 8002cda:	f002 fd5b 	bl	8005794 <HAL_FDCAN_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 8002ce4:	f000 fae8 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	200004ac 	.word	0x200004ac
 8002cf0:	40006c00 	.word	0x40006c00

08002cf4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <MX_I2C1_Init+0x74>)
 8002cfa:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <MX_I2C1_Init+0x78>)
 8002cfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <MX_I2C1_Init+0x74>)
 8002d00:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <MX_I2C1_Init+0x7c>)
 8002d02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d04:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <MX_I2C1_Init+0x74>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d0a:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <MX_I2C1_Init+0x74>)
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d10:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <MX_I2C1_Init+0x74>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <MX_I2C1_Init+0x74>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <MX_I2C1_Init+0x74>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <MX_I2C1_Init+0x74>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <MX_I2C1_Init+0x74>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d2e:	480e      	ldr	r0, [pc, #56]	; (8002d68 <MX_I2C1_Init+0x74>)
 8002d30:	f003 f890 	bl	8005e54 <HAL_I2C_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d3a:	f000 fabd 	bl	80032b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4809      	ldr	r0, [pc, #36]	; (8002d68 <MX_I2C1_Init+0x74>)
 8002d42:	f003 ff3f 	bl	8006bc4 <HAL_I2CEx_ConfigAnalogFilter>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d4c:	f000 fab4 	bl	80032b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d50:	2100      	movs	r1, #0
 8002d52:	4805      	ldr	r0, [pc, #20]	; (8002d68 <MX_I2C1_Init+0x74>)
 8002d54:	f003 ff81 	bl	8006c5a <HAL_I2CEx_ConfigDigitalFilter>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d5e:	f000 faab 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000510 	.word	0x20000510
 8002d6c:	40005400 	.word	0x40005400
 8002d70:	00303d5b 	.word	0x00303d5b

08002d74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <MX_I2C2_Init+0x74>)
 8002d7a:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <MX_I2C2_Init+0x78>)
 8002d7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <MX_I2C2_Init+0x74>)
 8002d80:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <MX_I2C2_Init+0x7c>)
 8002d82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002d84:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <MX_I2C2_Init+0x74>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <MX_I2C2_Init+0x74>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <MX_I2C2_Init+0x74>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <MX_I2C2_Init+0x74>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <MX_I2C2_Init+0x74>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <MX_I2C2_Init+0x74>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <MX_I2C2_Init+0x74>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002dae:	480e      	ldr	r0, [pc, #56]	; (8002de8 <MX_I2C2_Init+0x74>)
 8002db0:	f003 f850 	bl	8005e54 <HAL_I2C_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002dba:	f000 fa7d 	bl	80032b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4809      	ldr	r0, [pc, #36]	; (8002de8 <MX_I2C2_Init+0x74>)
 8002dc2:	f003 feff 	bl	8006bc4 <HAL_I2CEx_ConfigAnalogFilter>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002dcc:	f000 fa74 	bl	80032b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4805      	ldr	r0, [pc, #20]	; (8002de8 <MX_I2C2_Init+0x74>)
 8002dd4:	f003 ff41 	bl	8006c5a <HAL_I2CEx_ConfigDigitalFilter>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002dde:	f000 fa6b 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000564 	.word	0x20000564
 8002dec:	40005800 	.word	0x40005800
 8002df0:	00303d5b 	.word	0x00303d5b

08002df4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002df8:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <MX_I2C3_Init+0x78>)
 8002dfc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e00:	4a1b      	ldr	r2, [pc, #108]	; (8002e70 <MX_I2C3_Init+0x7c>)
 8002e02:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002e04:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e0a:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e10:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002e2e:	480e      	ldr	r0, [pc, #56]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e30:	f003 f810 	bl	8005e54 <HAL_I2C_Init>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002e3a:	f000 fa3d 	bl	80032b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4809      	ldr	r0, [pc, #36]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e42:	f003 febf 	bl	8006bc4 <HAL_I2CEx_ConfigAnalogFilter>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002e4c:	f000 fa34 	bl	80032b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002e50:	2100      	movs	r1, #0
 8002e52:	4805      	ldr	r0, [pc, #20]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e54:	f003 ff01 	bl	8006c5a <HAL_I2CEx_ConfigDigitalFilter>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002e5e:	f000 fa2b 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200005b8 	.word	0x200005b8
 8002e6c:	40007800 	.word	0x40007800
 8002e70:	00303d5b 	.word	0x00303d5b

08002e74 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <MX_IWDG_Init+0x34>)
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <MX_IWDG_Init+0x38>)
 8002e7c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <MX_IWDG_Init+0x34>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <MX_IWDG_Init+0x34>)
 8002e86:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002e8a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <MX_IWDG_Init+0x34>)
 8002e8e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002e92:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002e94:	4804      	ldr	r0, [pc, #16]	; (8002ea8 <MX_IWDG_Init+0x34>)
 8002e96:	f003 ff2c 	bl	8006cf2 <HAL_IWDG_Init>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002ea0:	f000 fa0a 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	2000072c 	.word	0x2000072c
 8002eac:	40003000 	.word	0x40003000

08002eb0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002eb4:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <MX_LPUART1_UART_Init+0x90>)
 8002eb6:	4a23      	ldr	r2, [pc, #140]	; (8002f44 <MX_LPUART1_UART_Init+0x94>)
 8002eb8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002eba:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <MX_LPUART1_UART_Init+0x90>)
 8002ebc:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <MX_LPUART1_UART_Init+0x98>)
 8002ebe:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <MX_LPUART1_UART_Init+0x90>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <MX_LPUART1_UART_Init+0x90>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002ecc:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <MX_LPUART1_UART_Init+0x90>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002ed2:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <MX_LPUART1_UART_Init+0x90>)
 8002ed4:	220c      	movs	r2, #12
 8002ed6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <MX_LPUART1_UART_Init+0x90>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ede:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <MX_LPUART1_UART_Init+0x90>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <MX_LPUART1_UART_Init+0x90>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <MX_LPUART1_UART_Init+0x90>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4812      	ldr	r0, [pc, #72]	; (8002f40 <MX_LPUART1_UART_Init+0x90>)
 8002ef8:	f005 fe39 	bl	8008b6e <HAL_RS485Ex_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002f02:	f000 f9d9 	bl	80032b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f06:	2100      	movs	r1, #0
 8002f08:	480d      	ldr	r0, [pc, #52]	; (8002f40 <MX_LPUART1_UART_Init+0x90>)
 8002f0a:	f005 fed2 	bl	8008cb2 <HAL_UARTEx_SetTxFifoThreshold>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002f14:	f000 f9d0 	bl	80032b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4809      	ldr	r0, [pc, #36]	; (8002f40 <MX_LPUART1_UART_Init+0x90>)
 8002f1c:	f005 ff07 	bl	8008d2e <HAL_UARTEx_SetRxFifoThreshold>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002f26:	f000 f9c7 	bl	80032b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002f2a:	4805      	ldr	r0, [pc, #20]	; (8002f40 <MX_LPUART1_UART_Init+0x90>)
 8002f2c:	f005 fe88 	bl	8008c40 <HAL_UARTEx_DisableFifoMode>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002f36:	f000 f9bf 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	2000073c 	.word	0x2000073c
 8002f44:	40008000 	.word	0x40008000
 8002f48:	00033324 	.word	0x00033324

08002f4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f50:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002f52:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <MX_SPI1_Init+0x78>)
 8002f54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f56:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002f58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f5e:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002f64:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002f66:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002f6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f6c:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f80:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002f9a:	2207      	movs	r2, #7
 8002f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002faa:	4805      	ldr	r0, [pc, #20]	; (8002fc0 <MX_SPI1_Init+0x74>)
 8002fac:	f005 f818 	bl	8007fe0 <HAL_SPI_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002fb6:	f000 f97f 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200007d0 	.word	0x200007d0
 8002fc4:	40013000 	.word	0x40013000

08002fc8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <MX_SPI3_Init+0x74>)
 8002fce:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <MX_SPI3_Init+0x78>)
 8002fd0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	; (800303c <MX_SPI3_Init+0x74>)
 8002fd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fd8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002fda:	4b18      	ldr	r3, [pc, #96]	; (800303c <MX_SPI3_Init+0x74>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <MX_SPI3_Init+0x74>)
 8002fe2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002fe6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <MX_SPI3_Init+0x74>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <MX_SPI3_Init+0x74>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <MX_SPI3_Init+0x74>)
 8002ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <MX_SPI3_Init+0x74>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <MX_SPI3_Init+0x74>)
 8003004:	2200      	movs	r2, #0
 8003006:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <MX_SPI3_Init+0x74>)
 800300a:	2200      	movs	r2, #0
 800300c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <MX_SPI3_Init+0x74>)
 8003010:	2200      	movs	r2, #0
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <MX_SPI3_Init+0x74>)
 8003016:	2207      	movs	r2, #7
 8003018:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <MX_SPI3_Init+0x74>)
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <MX_SPI3_Init+0x74>)
 8003022:	2208      	movs	r2, #8
 8003024:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003026:	4805      	ldr	r0, [pc, #20]	; (800303c <MX_SPI3_Init+0x74>)
 8003028:	f004 ffda 	bl	8007fe0 <HAL_SPI_Init>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003032:	f000 f941 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000834 	.word	0x20000834
 8003040:	40003c00 	.word	0x40003c00

08003044 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003048:	4b10      	ldr	r3, [pc, #64]	; (800308c <MX_USB_PCD_Init+0x48>)
 800304a:	4a11      	ldr	r2, [pc, #68]	; (8003090 <MX_USB_PCD_Init+0x4c>)
 800304c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800304e:	4b0f      	ldr	r3, [pc, #60]	; (800308c <MX_USB_PCD_Init+0x48>)
 8003050:	2208      	movs	r2, #8
 8003052:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003054:	4b0d      	ldr	r3, [pc, #52]	; (800308c <MX_USB_PCD_Init+0x48>)
 8003056:	2202      	movs	r2, #2
 8003058:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <MX_USB_PCD_Init+0x48>)
 800305c:	2202      	movs	r2, #2
 800305e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <MX_USB_PCD_Init+0x48>)
 8003062:	2200      	movs	r2, #0
 8003064:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <MX_USB_PCD_Init+0x48>)
 8003068:	2200      	movs	r2, #0
 800306a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800306c:	4b07      	ldr	r3, [pc, #28]	; (800308c <MX_USB_PCD_Init+0x48>)
 800306e:	2200      	movs	r2, #0
 8003070:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <MX_USB_PCD_Init+0x48>)
 8003074:	2200      	movs	r2, #0
 8003076:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003078:	4804      	ldr	r0, [pc, #16]	; (800308c <MX_USB_PCD_Init+0x48>)
 800307a:	f003 fe89 	bl	8006d90 <HAL_PCD_Init>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8003084:	f000 f918 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000898 	.word	0x20000898
 8003090:	40005c00 	.word	0x40005c00

08003094 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800309a:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <MX_DMA_Init+0x80>)
 800309c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309e:	4a1d      	ldr	r2, [pc, #116]	; (8003114 <MX_DMA_Init+0x80>)
 80030a0:	f043 0304 	orr.w	r3, r3, #4
 80030a4:	6493      	str	r3, [r2, #72]	; 0x48
 80030a6:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <MX_DMA_Init+0x80>)
 80030a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	607b      	str	r3, [r7, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030b2:	4b18      	ldr	r3, [pc, #96]	; (8003114 <MX_DMA_Init+0x80>)
 80030b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b6:	4a17      	ldr	r2, [pc, #92]	; (8003114 <MX_DMA_Init+0x80>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6493      	str	r3, [r2, #72]	; 0x48
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <MX_DMA_Init+0x80>)
 80030c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2100      	movs	r1, #0
 80030ce:	200b      	movs	r0, #11
 80030d0:	f002 f971 	bl	80053b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80030d4:	200b      	movs	r0, #11
 80030d6:	f002 f988 	bl	80053ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80030da:	2200      	movs	r2, #0
 80030dc:	2100      	movs	r1, #0
 80030de:	200c      	movs	r0, #12
 80030e0:	f002 f969 	bl	80053b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80030e4:	200c      	movs	r0, #12
 80030e6:	f002 f980 	bl	80053ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2100      	movs	r1, #0
 80030ee:	200d      	movs	r0, #13
 80030f0:	f002 f961 	bl	80053b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80030f4:	200d      	movs	r0, #13
 80030f6:	f002 f978 	bl	80053ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	200e      	movs	r0, #14
 8003100:	f002 f959 	bl	80053b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003104:	200e      	movs	r0, #14
 8003106:	f002 f970 	bl	80053ea <HAL_NVIC_EnableIRQ>

}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000

08003118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	; 0x30
 800311c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311e:	f107 031c 	add.w	r3, r7, #28
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	609a      	str	r2, [r3, #8]
 800312a:	60da      	str	r2, [r3, #12]
 800312c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800312e:	4b5d      	ldr	r3, [pc, #372]	; (80032a4 <MX_GPIO_Init+0x18c>)
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	4a5c      	ldr	r2, [pc, #368]	; (80032a4 <MX_GPIO_Init+0x18c>)
 8003134:	f043 0310 	orr.w	r3, r3, #16
 8003138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800313a:	4b5a      	ldr	r3, [pc, #360]	; (80032a4 <MX_GPIO_Init+0x18c>)
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	61bb      	str	r3, [r7, #24]
 8003144:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003146:	4b57      	ldr	r3, [pc, #348]	; (80032a4 <MX_GPIO_Init+0x18c>)
 8003148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314a:	4a56      	ldr	r2, [pc, #344]	; (80032a4 <MX_GPIO_Init+0x18c>)
 800314c:	f043 0304 	orr.w	r3, r3, #4
 8003150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003152:	4b54      	ldr	r3, [pc, #336]	; (80032a4 <MX_GPIO_Init+0x18c>)
 8003154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800315e:	4b51      	ldr	r3, [pc, #324]	; (80032a4 <MX_GPIO_Init+0x18c>)
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	4a50      	ldr	r2, [pc, #320]	; (80032a4 <MX_GPIO_Init+0x18c>)
 8003164:	f043 0320 	orr.w	r3, r3, #32
 8003168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800316a:	4b4e      	ldr	r3, [pc, #312]	; (80032a4 <MX_GPIO_Init+0x18c>)
 800316c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003176:	4b4b      	ldr	r3, [pc, #300]	; (80032a4 <MX_GPIO_Init+0x18c>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	4a4a      	ldr	r2, [pc, #296]	; (80032a4 <MX_GPIO_Init+0x18c>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003182:	4b48      	ldr	r3, [pc, #288]	; (80032a4 <MX_GPIO_Init+0x18c>)
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800318e:	4b45      	ldr	r3, [pc, #276]	; (80032a4 <MX_GPIO_Init+0x18c>)
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	4a44      	ldr	r2, [pc, #272]	; (80032a4 <MX_GPIO_Init+0x18c>)
 8003194:	f043 0302 	orr.w	r3, r3, #2
 8003198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800319a:	4b42      	ldr	r3, [pc, #264]	; (80032a4 <MX_GPIO_Init+0x18c>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031a6:	4b3f      	ldr	r3, [pc, #252]	; (80032a4 <MX_GPIO_Init+0x18c>)
 80031a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031aa:	4a3e      	ldr	r2, [pc, #248]	; (80032a4 <MX_GPIO_Init+0x18c>)
 80031ac:	f043 0308 	orr.w	r3, r3, #8
 80031b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031b2:	4b3c      	ldr	r3, [pc, #240]	; (80032a4 <MX_GPIO_Init+0x18c>)
 80031b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80031be:	2200      	movs	r2, #0
 80031c0:	f64e 71c0 	movw	r1, #61376	; 0xefc0
 80031c4:	4838      	ldr	r0, [pc, #224]	; (80032a8 <MX_GPIO_Init+0x190>)
 80031c6:	f002 fe2d 	bl	8005e24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80031ca:	2200      	movs	r2, #0
 80031cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031d0:	4836      	ldr	r0, [pc, #216]	; (80032ac <MX_GPIO_Init+0x194>)
 80031d2:	f002 fe27 	bl	8005e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80031d6:	2200      	movs	r2, #0
 80031d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031dc:	4834      	ldr	r0, [pc, #208]	; (80032b0 <MX_GPIO_Init+0x198>)
 80031de:	f002 fe21 	bl	8005e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80031e2:	2200      	movs	r2, #0
 80031e4:	f64f 711c 	movw	r1, #65308	; 0xff1c
 80031e8:	4832      	ldr	r0, [pc, #200]	; (80032b4 <MX_GPIO_Init+0x19c>)
 80031ea:	f002 fe1b 	bl	8005e24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80031ee:	233c      	movs	r3, #60	; 0x3c
 80031f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031f2:	2300      	movs	r3, #0
 80031f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031fa:	f107 031c 	add.w	r3, r7, #28
 80031fe:	4619      	mov	r1, r3
 8003200:	4829      	ldr	r0, [pc, #164]	; (80032a8 <MX_GPIO_Init+0x190>)
 8003202:	f002 fc8d 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9
                           PE10 PE11 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8003206:	f64e 73c0 	movw	r3, #61376	; 0xefc0
 800320a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800320c:	2301      	movs	r3, #1
 800320e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003214:	2300      	movs	r3, #0
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003218:	f107 031c 	add.w	r3, r7, #28
 800321c:	4619      	mov	r1, r3
 800321e:	4822      	ldr	r0, [pc, #136]	; (80032a8 <MX_GPIO_Init+0x190>)
 8003220:	f002 fc7e 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800322a:	2301      	movs	r3, #1
 800322c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003232:	2300      	movs	r3, #0
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003236:	f107 031c 	add.w	r3, r7, #28
 800323a:	4619      	mov	r1, r3
 800323c:	481b      	ldr	r0, [pc, #108]	; (80032ac <MX_GPIO_Init+0x194>)
 800323e:	f002 fc6f 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003248:	2301      	movs	r3, #1
 800324a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003250:	2300      	movs	r3, #0
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003254:	f107 031c 	add.w	r3, r7, #28
 8003258:	4619      	mov	r1, r3
 800325a:	4815      	ldr	r0, [pc, #84]	; (80032b0 <MX_GPIO_Init+0x198>)
 800325c:	f002 fc60 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003260:	f64f 731c 	movw	r3, #65308	; 0xff1c
 8003264:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003266:	2301      	movs	r3, #1
 8003268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326e:	2300      	movs	r3, #0
 8003270:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003272:	f107 031c 	add.w	r3, r7, #28
 8003276:	4619      	mov	r1, r3
 8003278:	480e      	ldr	r0, [pc, #56]	; (80032b4 <MX_GPIO_Init+0x19c>)
 800327a:	f002 fc51 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800327e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003284:	2300      	movs	r3, #0
 8003286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	4619      	mov	r1, r3
 8003292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003296:	f002 fc43 	bl	8005b20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800329a:	bf00      	nop
 800329c:	3730      	adds	r7, #48	; 0x30
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	48001000 	.word	0x48001000
 80032ac:	48000800 	.word	0x48000800
 80032b0:	48000400 	.word	0x48000400
 80032b4:	48000c00 	.word	0x48000c00

080032b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032bc:	b672      	cpsid	i
}
 80032be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032c0:	e7fe      	b.n	80032c0 <Error_Handler+0x8>
	...

080032c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ca:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <HAL_MspInit+0x44>)
 80032cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ce:	4a0e      	ldr	r2, [pc, #56]	; (8003308 <HAL_MspInit+0x44>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6613      	str	r3, [r2, #96]	; 0x60
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <HAL_MspInit+0x44>)
 80032d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_MspInit+0x44>)
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	4a08      	ldr	r2, [pc, #32]	; (8003308 <HAL_MspInit+0x44>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	6593      	str	r3, [r2, #88]	; 0x58
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_MspInit+0x44>)
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80032fa:	f003 fee5 	bl	80070c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000

0800330c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b0a0      	sub	sp, #128	; 0x80
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003324:	f107 0318 	add.w	r3, r7, #24
 8003328:	2254      	movs	r2, #84	; 0x54
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f006 fbe4 	bl	8009afa <memset>
  if(hadc->Instance==ADC1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800333a:	d160      	bne.n	80033fe <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800333c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003340:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003342:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003346:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003348:	f107 0318 	add.w	r3, r7, #24
 800334c:	4618      	mov	r0, r3
 800334e:	f004 fbf9 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003358:	f7ff ffae 	bl	80032b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800335c:	4b47      	ldr	r3, [pc, #284]	; (800347c <HAL_ADC_MspInit+0x170>)
 800335e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003360:	4a46      	ldr	r2, [pc, #280]	; (800347c <HAL_ADC_MspInit+0x170>)
 8003362:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003368:	4b44      	ldr	r3, [pc, #272]	; (800347c <HAL_ADC_MspInit+0x170>)
 800336a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003374:	4b41      	ldr	r3, [pc, #260]	; (800347c <HAL_ADC_MspInit+0x170>)
 8003376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003378:	4a40      	ldr	r2, [pc, #256]	; (800347c <HAL_ADC_MspInit+0x170>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003380:	4b3e      	ldr	r3, [pc, #248]	; (800347c <HAL_ADC_MspInit+0x170>)
 8003382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800338c:	230f      	movs	r3, #15
 800338e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003390:	2303      	movs	r3, #3
 8003392:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003398:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800339c:	4619      	mov	r1, r3
 800339e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033a2:	f002 fbbd 	bl	8005b20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80033a6:	4b36      	ldr	r3, [pc, #216]	; (8003480 <HAL_ADC_MspInit+0x174>)
 80033a8:	4a36      	ldr	r2, [pc, #216]	; (8003484 <HAL_ADC_MspInit+0x178>)
 80033aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80033ac:	4b34      	ldr	r3, [pc, #208]	; (8003480 <HAL_ADC_MspInit+0x174>)
 80033ae:	2205      	movs	r2, #5
 80033b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033b2:	4b33      	ldr	r3, [pc, #204]	; (8003480 <HAL_ADC_MspInit+0x174>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b8:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_ADC_MspInit+0x174>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033be:	4b30      	ldr	r3, [pc, #192]	; (8003480 <HAL_ADC_MspInit+0x174>)
 80033c0:	2280      	movs	r2, #128	; 0x80
 80033c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033c4:	4b2e      	ldr	r3, [pc, #184]	; (8003480 <HAL_ADC_MspInit+0x174>)
 80033c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033cc:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <HAL_ADC_MspInit+0x174>)
 80033ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80033d4:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <HAL_ADC_MspInit+0x174>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033da:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_ADC_MspInit+0x174>)
 80033dc:	2200      	movs	r2, #0
 80033de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033e0:	4827      	ldr	r0, [pc, #156]	; (8003480 <HAL_ADC_MspInit+0x174>)
 80033e2:	f002 f81d 	bl	8005420 <HAL_DMA_Init>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80033ec:	f7ff ff64 	bl	80032b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a23      	ldr	r2, [pc, #140]	; (8003480 <HAL_ADC_MspInit+0x174>)
 80033f4:	655a      	str	r2, [r3, #84]	; 0x54
 80033f6:	4a22      	ldr	r2, [pc, #136]	; (8003480 <HAL_ADC_MspInit+0x174>)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80033fc:	e03a      	b.n	8003474 <HAL_ADC_MspInit+0x168>
  else if(hadc->Instance==ADC5)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a21      	ldr	r2, [pc, #132]	; (8003488 <HAL_ADC_MspInit+0x17c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d135      	bne.n	8003474 <HAL_ADC_MspInit+0x168>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800340c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800340e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003412:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003414:	f107 0318 	add.w	r3, r7, #24
 8003418:	4618      	mov	r0, r3
 800341a:	f004 fb93 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 8003424:	f7ff ff48 	bl	80032b8 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8003428:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_ADC_MspInit+0x170>)
 800342a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342c:	4a13      	ldr	r2, [pc, #76]	; (800347c <HAL_ADC_MspInit+0x170>)
 800342e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003432:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_ADC_MspInit+0x170>)
 8003436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <HAL_ADC_MspInit+0x170>)
 8003442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003444:	4a0d      	ldr	r2, [pc, #52]	; (800347c <HAL_ADC_MspInit+0x170>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_ADC_MspInit+0x170>)
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800345c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800345e:	2303      	movs	r3, #3
 8003460:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003466:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800346a:	4619      	mov	r1, r3
 800346c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003470:	f002 fb56 	bl	8005b20 <HAL_GPIO_Init>
}
 8003474:	bf00      	nop
 8003476:	3780      	adds	r7, #128	; 0x80
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000
 8003480:	20000384 	.word	0x20000384
 8003484:	40020008 	.word	0x40020008
 8003488:	50000600 	.word	0x50000600

0800348c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b0a2      	sub	sp, #136	; 0x88
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003494:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034a4:	f107 0320 	add.w	r3, r7, #32
 80034a8:	2254      	movs	r2, #84	; 0x54
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f006 fb24 	bl	8009afa <memset>
  if(hfdcan->Instance==FDCAN1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a6e      	ldr	r2, [pc, #440]	; (8003670 <HAL_FDCAN_MspInit+0x1e4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d143      	bne.n	8003544 <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80034bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80034c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034c6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034c8:	f107 0320 	add.w	r3, r7, #32
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 fb39 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80034d8:	f7ff feee 	bl	80032b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80034dc:	4b65      	ldr	r3, [pc, #404]	; (8003674 <HAL_FDCAN_MspInit+0x1e8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	4a64      	ldr	r2, [pc, #400]	; (8003674 <HAL_FDCAN_MspInit+0x1e8>)
 80034e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80034e6:	4b63      	ldr	r3, [pc, #396]	; (8003674 <HAL_FDCAN_MspInit+0x1e8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d10b      	bne.n	8003506 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80034ee:	4b62      	ldr	r3, [pc, #392]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 80034f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f2:	4a61      	ldr	r2, [pc, #388]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 80034f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034f8:	6593      	str	r3, [r2, #88]	; 0x58
 80034fa:	4b5f      	ldr	r3, [pc, #380]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 80034fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003506:	4b5c      	ldr	r3, [pc, #368]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 8003508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350a:	4a5b      	ldr	r2, [pc, #364]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 800350c:	f043 0308 	orr.w	r3, r3, #8
 8003510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003512:	4b59      	ldr	r3, [pc, #356]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 8003514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	61bb      	str	r3, [r7, #24]
 800351c:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800351e:	2303      	movs	r3, #3
 8003520:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003522:	2302      	movs	r3, #2
 8003524:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352a:	2300      	movs	r3, #0
 800352c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003530:	2309      	movs	r3, #9
 8003532:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003536:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800353a:	4619      	mov	r1, r3
 800353c:	484f      	ldr	r0, [pc, #316]	; (800367c <HAL_FDCAN_MspInit+0x1f0>)
 800353e:	f002 faef 	bl	8005b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8003542:	e091      	b.n	8003668 <HAL_FDCAN_MspInit+0x1dc>
  else if(hfdcan->Instance==FDCAN2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a4d      	ldr	r2, [pc, #308]	; (8003680 <HAL_FDCAN_MspInit+0x1f4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d144      	bne.n	80035d8 <HAL_FDCAN_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800354e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003552:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003554:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003558:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800355a:	f107 0320 	add.w	r3, r7, #32
 800355e:	4618      	mov	r0, r3
 8003560:	f004 faf0 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_FDCAN_MspInit+0xe2>
      Error_Handler();
 800356a:	f7ff fea5 	bl	80032b8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800356e:	4b41      	ldr	r3, [pc, #260]	; (8003674 <HAL_FDCAN_MspInit+0x1e8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3301      	adds	r3, #1
 8003574:	4a3f      	ldr	r2, [pc, #252]	; (8003674 <HAL_FDCAN_MspInit+0x1e8>)
 8003576:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003578:	4b3e      	ldr	r3, [pc, #248]	; (8003674 <HAL_FDCAN_MspInit+0x1e8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d10b      	bne.n	8003598 <HAL_FDCAN_MspInit+0x10c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003580:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	4a3c      	ldr	r2, [pc, #240]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 8003586:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800358a:	6593      	str	r3, [r2, #88]	; 0x58
 800358c:	4b3a      	ldr	r3, [pc, #232]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003598:	4b37      	ldr	r3, [pc, #220]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 800359a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800359c:	4a36      	ldr	r2, [pc, #216]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 800359e:	f043 0302 	orr.w	r3, r3, #2
 80035a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035a4:	4b34      	ldr	r3, [pc, #208]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 80035a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80035b0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80035b4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b6:	2302      	movs	r3, #2
 80035b8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035be:	2300      	movs	r3, #0
 80035c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80035c4:	2309      	movs	r3, #9
 80035c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035ce:	4619      	mov	r1, r3
 80035d0:	482c      	ldr	r0, [pc, #176]	; (8003684 <HAL_FDCAN_MspInit+0x1f8>)
 80035d2:	f002 faa5 	bl	8005b20 <HAL_GPIO_Init>
}
 80035d6:	e047      	b.n	8003668 <HAL_FDCAN_MspInit+0x1dc>
  else if(hfdcan->Instance==FDCAN3)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2a      	ldr	r2, [pc, #168]	; (8003688 <HAL_FDCAN_MspInit+0x1fc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d142      	bne.n	8003668 <HAL_FDCAN_MspInit+0x1dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80035e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035e6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80035e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ec:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035ee:	f107 0320 	add.w	r3, r7, #32
 80035f2:	4618      	mov	r0, r3
 80035f4:	f004 faa6 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_FDCAN_MspInit+0x176>
      Error_Handler();
 80035fe:	f7ff fe5b 	bl	80032b8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003602:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <HAL_FDCAN_MspInit+0x1e8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	4a1a      	ldr	r2, [pc, #104]	; (8003674 <HAL_FDCAN_MspInit+0x1e8>)
 800360a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_FDCAN_MspInit+0x1e8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d10b      	bne.n	800362c <HAL_FDCAN_MspInit+0x1a0>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003614:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	4a17      	ldr	r2, [pc, #92]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 800361a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800361e:	6593      	str	r3, [r2, #88]	; 0x58
 8003620:	4b15      	ldr	r3, [pc, #84]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	4a11      	ldr	r2, [pc, #68]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 8003632:	f043 0302 	orr.w	r3, r3, #2
 8003636:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <HAL_FDCAN_MspInit+0x1ec>)
 800363a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003644:	2318      	movs	r3, #24
 8003646:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003648:	2302      	movs	r3, #2
 800364a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003650:	2300      	movs	r3, #0
 8003652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8003656:	230b      	movs	r3, #11
 8003658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003660:	4619      	mov	r1, r3
 8003662:	4808      	ldr	r0, [pc, #32]	; (8003684 <HAL_FDCAN_MspInit+0x1f8>)
 8003664:	f002 fa5c 	bl	8005b20 <HAL_GPIO_Init>
}
 8003668:	bf00      	nop
 800366a:	3788      	adds	r7, #136	; 0x88
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40006400 	.word	0x40006400
 8003674:	20000b74 	.word	0x20000b74
 8003678:	40021000 	.word	0x40021000
 800367c:	48000c00 	.word	0x48000c00
 8003680:	40006800 	.word	0x40006800
 8003684:	48000400 	.word	0x48000400
 8003688:	40006c00 	.word	0x40006c00

0800368c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b0a4      	sub	sp, #144	; 0x90
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003694:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
 80036a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036a8:	2254      	movs	r2, #84	; 0x54
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f006 fa24 	bl	8009afa <memset>
  if(hi2c->Instance==I2C1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a8a      	ldr	r2, [pc, #552]	; (80038e0 <HAL_I2C_MspInit+0x254>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	f040 80af 	bne.w	800381c <HAL_I2C_MspInit+0x190>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80036be:	2340      	movs	r3, #64	; 0x40
 80036c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80036c2:	2300      	movs	r3, #0
 80036c4:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036ca:	4618      	mov	r0, r3
 80036cc:	f004 fa3a 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80036d6:	f7ff fdef 	bl	80032b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036da:	4b82      	ldr	r3, [pc, #520]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	4a81      	ldr	r2, [pc, #516]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036e6:	4b7f      	ldr	r3, [pc, #508]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f2:	4b7c      	ldr	r3, [pc, #496]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 80036f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f6:	4a7b      	ldr	r2, [pc, #492]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 80036f8:	f043 0302 	orr.w	r3, r3, #2
 80036fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036fe:	4b79      	ldr	r3, [pc, #484]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	623b      	str	r3, [r7, #32]
 8003708:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800370a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003710:	2312      	movs	r3, #18
 8003712:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371c:	2300      	movs	r3, #0
 800371e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003722:	2304      	movs	r3, #4
 8003724:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003728:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800372c:	4619      	mov	r1, r3
 800372e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003732:	f002 f9f5 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003736:	2380      	movs	r3, #128	; 0x80
 8003738:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800373a:	2312      	movs	r3, #18
 800373c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003746:	2300      	movs	r3, #0
 8003748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800374c:	2304      	movs	r3, #4
 800374e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003752:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003756:	4619      	mov	r1, r3
 8003758:	4863      	ldr	r0, [pc, #396]	; (80038e8 <HAL_I2C_MspInit+0x25c>)
 800375a:	f002 f9e1 	bl	8005b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800375e:	4b61      	ldr	r3, [pc, #388]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	4a60      	ldr	r2, [pc, #384]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 8003764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003768:	6593      	str	r3, [r2, #88]	; 0x58
 800376a:	4b5e      	ldr	r3, [pc, #376]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 8003776:	4b5d      	ldr	r3, [pc, #372]	; (80038ec <HAL_I2C_MspInit+0x260>)
 8003778:	4a5d      	ldr	r2, [pc, #372]	; (80038f0 <HAL_I2C_MspInit+0x264>)
 800377a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800377c:	4b5b      	ldr	r3, [pc, #364]	; (80038ec <HAL_I2C_MspInit+0x260>)
 800377e:	2210      	movs	r2, #16
 8003780:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003782:	4b5a      	ldr	r3, [pc, #360]	; (80038ec <HAL_I2C_MspInit+0x260>)
 8003784:	2200      	movs	r2, #0
 8003786:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003788:	4b58      	ldr	r3, [pc, #352]	; (80038ec <HAL_I2C_MspInit+0x260>)
 800378a:	2200      	movs	r2, #0
 800378c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800378e:	4b57      	ldr	r3, [pc, #348]	; (80038ec <HAL_I2C_MspInit+0x260>)
 8003790:	2280      	movs	r2, #128	; 0x80
 8003792:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003794:	4b55      	ldr	r3, [pc, #340]	; (80038ec <HAL_I2C_MspInit+0x260>)
 8003796:	2200      	movs	r2, #0
 8003798:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800379a:	4b54      	ldr	r3, [pc, #336]	; (80038ec <HAL_I2C_MspInit+0x260>)
 800379c:	2200      	movs	r2, #0
 800379e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80037a0:	4b52      	ldr	r3, [pc, #328]	; (80038ec <HAL_I2C_MspInit+0x260>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037a6:	4b51      	ldr	r3, [pc, #324]	; (80038ec <HAL_I2C_MspInit+0x260>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80037ac:	484f      	ldr	r0, [pc, #316]	; (80038ec <HAL_I2C_MspInit+0x260>)
 80037ae:	f001 fe37 	bl	8005420 <HAL_DMA_Init>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_I2C_MspInit+0x130>
    {
      Error_Handler();
 80037b8:	f7ff fd7e 	bl	80032b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a4b      	ldr	r2, [pc, #300]	; (80038ec <HAL_I2C_MspInit+0x260>)
 80037c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80037c2:	4a4a      	ldr	r2, [pc, #296]	; (80038ec <HAL_I2C_MspInit+0x260>)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 80037c8:	4b4a      	ldr	r3, [pc, #296]	; (80038f4 <HAL_I2C_MspInit+0x268>)
 80037ca:	4a4b      	ldr	r2, [pc, #300]	; (80038f8 <HAL_I2C_MspInit+0x26c>)
 80037cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80037ce:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <HAL_I2C_MspInit+0x268>)
 80037d0:	2211      	movs	r2, #17
 80037d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037d4:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <HAL_I2C_MspInit+0x268>)
 80037d6:	2210      	movs	r2, #16
 80037d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037da:	4b46      	ldr	r3, [pc, #280]	; (80038f4 <HAL_I2C_MspInit+0x268>)
 80037dc:	2200      	movs	r2, #0
 80037de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037e0:	4b44      	ldr	r3, [pc, #272]	; (80038f4 <HAL_I2C_MspInit+0x268>)
 80037e2:	2280      	movs	r2, #128	; 0x80
 80037e4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037e6:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <HAL_I2C_MspInit+0x268>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037ec:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <HAL_I2C_MspInit+0x268>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80037f2:	4b40      	ldr	r3, [pc, #256]	; (80038f4 <HAL_I2C_MspInit+0x268>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037f8:	4b3e      	ldr	r3, [pc, #248]	; (80038f4 <HAL_I2C_MspInit+0x268>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80037fe:	483d      	ldr	r0, [pc, #244]	; (80038f4 <HAL_I2C_MspInit+0x268>)
 8003800:	f001 fe0e 	bl	8005420 <HAL_DMA_Init>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_MspInit+0x182>
    {
      Error_Handler();
 800380a:	f7ff fd55 	bl	80032b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a38      	ldr	r2, [pc, #224]	; (80038f4 <HAL_I2C_MspInit+0x268>)
 8003812:	639a      	str	r2, [r3, #56]	; 0x38
 8003814:	4a37      	ldr	r2, [pc, #220]	; (80038f4 <HAL_I2C_MspInit+0x268>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800381a:	e0dd      	b.n	80039d8 <HAL_I2C_MspInit+0x34c>
  else if(hi2c->Instance==I2C2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a36      	ldr	r2, [pc, #216]	; (80038fc <HAL_I2C_MspInit+0x270>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d16e      	bne.n	8003904 <HAL_I2C_MspInit+0x278>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800382a:	2300      	movs	r3, #0
 800382c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800382e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003832:	4618      	mov	r0, r3
 8003834:	f004 f986 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 800383e:	f7ff fd3b 	bl	80032b8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003842:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 8003844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003846:	4a27      	ldr	r2, [pc, #156]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 8003848:	f043 0304 	orr.w	r3, r3, #4
 800384c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800384e:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385a:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385e:	4a21      	ldr	r2, [pc, #132]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003866:	4b1f      	ldr	r3, [pc, #124]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 8003868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003872:	2310      	movs	r3, #16
 8003874:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003876:	2312      	movs	r3, #18
 8003878:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003882:	2300      	movs	r3, #0
 8003884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003888:	2304      	movs	r3, #4
 800388a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800388e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003892:	4619      	mov	r1, r3
 8003894:	481a      	ldr	r0, [pc, #104]	; (8003900 <HAL_I2C_MspInit+0x274>)
 8003896:	f002 f943 	bl	8005b20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800389a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800389e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038a0:	2312      	movs	r3, #18
 80038a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	2300      	movs	r3, #0
 80038ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80038b2:	2304      	movs	r3, #4
 80038b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038bc:	4619      	mov	r1, r3
 80038be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038c2:	f002 f92d 	bl	8005b20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	4a06      	ldr	r2, [pc, #24]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 80038cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038d0:	6593      	str	r3, [r2, #88]	; 0x58
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <HAL_I2C_MspInit+0x258>)
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	693b      	ldr	r3, [r7, #16]
}
 80038de:	e07b      	b.n	80039d8 <HAL_I2C_MspInit+0x34c>
 80038e0:	40005400 	.word	0x40005400
 80038e4:	40021000 	.word	0x40021000
 80038e8:	48000400 	.word	0x48000400
 80038ec:	2000060c 	.word	0x2000060c
 80038f0:	4002001c 	.word	0x4002001c
 80038f4:	2000066c 	.word	0x2000066c
 80038f8:	40020030 	.word	0x40020030
 80038fc:	40005800 	.word	0x40005800
 8003900:	48000800 	.word	0x48000800
  else if(hi2c->Instance==I2C3)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a35      	ldr	r2, [pc, #212]	; (80039e0 <HAL_I2C_MspInit+0x354>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d164      	bne.n	80039d8 <HAL_I2C_MspInit+0x34c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800390e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003914:	2300      	movs	r3, #0
 8003916:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003918:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800391c:	4618      	mov	r0, r3
 800391e:	f004 f911 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_I2C_MspInit+0x2a0>
      Error_Handler();
 8003928:	f7ff fcc6 	bl	80032b8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800392c:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_I2C_MspInit+0x358>)
 800392e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003930:	4a2c      	ldr	r2, [pc, #176]	; (80039e4 <HAL_I2C_MspInit+0x358>)
 8003932:	f043 0304 	orr.w	r3, r3, #4
 8003936:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003938:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <HAL_I2C_MspInit+0x358>)
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003944:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003948:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800394a:	2312      	movs	r3, #18
 800394c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800395c:	2308      	movs	r3, #8
 800395e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003962:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003966:	4619      	mov	r1, r3
 8003968:	481f      	ldr	r0, [pc, #124]	; (80039e8 <HAL_I2C_MspInit+0x35c>)
 800396a:	f002 f8d9 	bl	8005b20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800396e:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <HAL_I2C_MspInit+0x358>)
 8003970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003972:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <HAL_I2C_MspInit+0x358>)
 8003974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003978:	6593      	str	r3, [r2, #88]	; 0x58
 800397a:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <HAL_I2C_MspInit+0x358>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Channel4;
 8003986:	4b19      	ldr	r3, [pc, #100]	; (80039ec <HAL_I2C_MspInit+0x360>)
 8003988:	4a19      	ldr	r2, [pc, #100]	; (80039f0 <HAL_I2C_MspInit+0x364>)
 800398a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 800398c:	4b17      	ldr	r3, [pc, #92]	; (80039ec <HAL_I2C_MspInit+0x360>)
 800398e:	2214      	movs	r2, #20
 8003990:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003992:	4b16      	ldr	r3, [pc, #88]	; (80039ec <HAL_I2C_MspInit+0x360>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003998:	4b14      	ldr	r3, [pc, #80]	; (80039ec <HAL_I2C_MspInit+0x360>)
 800399a:	2200      	movs	r2, #0
 800399c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <HAL_I2C_MspInit+0x360>)
 80039a0:	2280      	movs	r2, #128	; 0x80
 80039a2:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <HAL_I2C_MspInit+0x360>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <HAL_I2C_MspInit+0x360>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80039b0:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <HAL_I2C_MspInit+0x360>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039b6:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <HAL_I2C_MspInit+0x360>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80039bc:	480b      	ldr	r0, [pc, #44]	; (80039ec <HAL_I2C_MspInit+0x360>)
 80039be:	f001 fd2f 	bl	8005420 <HAL_DMA_Init>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_I2C_MspInit+0x340>
      Error_Handler();
 80039c8:	f7ff fc76 	bl	80032b8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a07      	ldr	r2, [pc, #28]	; (80039ec <HAL_I2C_MspInit+0x360>)
 80039d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80039d2:	4a06      	ldr	r2, [pc, #24]	; (80039ec <HAL_I2C_MspInit+0x360>)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80039d8:	bf00      	nop
 80039da:	3790      	adds	r7, #144	; 0x90
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40007800 	.word	0x40007800
 80039e4:	40021000 	.word	0x40021000
 80039e8:	48000800 	.word	0x48000800
 80039ec:	200006cc 	.word	0x200006cc
 80039f0:	40020044 	.word	0x40020044

080039f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b0a0      	sub	sp, #128	; 0x80
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a0c:	f107 0318 	add.w	r3, r7, #24
 8003a10:	2254      	movs	r2, #84	; 0x54
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f006 f870 	bl	8009afa <memset>
  if(huart->Instance==LPUART1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2c      	ldr	r2, [pc, #176]	; (8003ad0 <HAL_UART_MspInit+0xdc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d151      	bne.n	8003ac8 <HAL_UART_MspInit+0xd4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003a24:	2320      	movs	r3, #32
 8003a26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a2c:	f107 0318 	add.w	r3, r7, #24
 8003a30:	4618      	mov	r0, r3
 8003a32:	f004 f887 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a3c:	f7ff fc3c 	bl	80032b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003a40:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_UART_MspInit+0xe0>)
 8003a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a44:	4a23      	ldr	r2, [pc, #140]	; (8003ad4 <HAL_UART_MspInit+0xe0>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003a4c:	4b21      	ldr	r3, [pc, #132]	; (8003ad4 <HAL_UART_MspInit+0xe0>)
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a58:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <HAL_UART_MspInit+0xe0>)
 8003a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <HAL_UART_MspInit+0xe0>)
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a64:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <HAL_UART_MspInit+0xe0>)
 8003a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a70:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <HAL_UART_MspInit+0xe0>)
 8003a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a74:	4a17      	ldr	r2, [pc, #92]	; (8003ad4 <HAL_UART_MspInit+0xe0>)
 8003a76:	f043 0302 	orr.w	r3, r3, #2
 8003a7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a7c:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <HAL_UART_MspInit+0xe0>)
 8003a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a94:	2300      	movs	r3, #0
 8003a96:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003a98:	2308      	movs	r3, #8
 8003a9a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	480d      	ldr	r0, [pc, #52]	; (8003ad8 <HAL_UART_MspInit+0xe4>)
 8003aa4:	f002 f83c 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003ab8:	230c      	movs	r3, #12
 8003aba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003abc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4806      	ldr	r0, [pc, #24]	; (8003adc <HAL_UART_MspInit+0xe8>)
 8003ac4:	f002 f82c 	bl	8005b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8003ac8:	bf00      	nop
 8003aca:	3780      	adds	r7, #128	; 0x80
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40008000 	.word	0x40008000
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	48000800 	.word	0x48000800
 8003adc:	48000400 	.word	0x48000400

08003ae0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08c      	sub	sp, #48	; 0x30
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae8:	f107 031c 	add.w	r3, r7, #28
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2f      	ldr	r2, [pc, #188]	; (8003bbc <HAL_SPI_MspInit+0xdc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d129      	bne.n	8003b56 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b02:	4b2f      	ldr	r3, [pc, #188]	; (8003bc0 <HAL_SPI_MspInit+0xe0>)
 8003b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b06:	4a2e      	ldr	r2, [pc, #184]	; (8003bc0 <HAL_SPI_MspInit+0xe0>)
 8003b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8003b0e:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <HAL_SPI_MspInit+0xe0>)
 8003b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1a:	4b29      	ldr	r3, [pc, #164]	; (8003bc0 <HAL_SPI_MspInit+0xe0>)
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	4a28      	ldr	r2, [pc, #160]	; (8003bc0 <HAL_SPI_MspInit+0xe0>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b26:	4b26      	ldr	r3, [pc, #152]	; (8003bc0 <HAL_SPI_MspInit+0xe0>)
 8003b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b32:	23e0      	movs	r3, #224	; 0xe0
 8003b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b36:	2302      	movs	r3, #2
 8003b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b42:	2305      	movs	r3, #5
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b46:	f107 031c 	add.w	r3, r7, #28
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b50:	f001 ffe6 	bl	8005b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003b54:	e02d      	b.n	8003bb2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	; (8003bc4 <HAL_SPI_MspInit+0xe4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d128      	bne.n	8003bb2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003b60:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <HAL_SPI_MspInit+0xe0>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	4a16      	ldr	r2, [pc, #88]	; (8003bc0 <HAL_SPI_MspInit+0xe0>)
 8003b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b6c:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <HAL_SPI_MspInit+0xe0>)
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <HAL_SPI_MspInit+0xe0>)
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7c:	4a10      	ldr	r2, [pc, #64]	; (8003bc0 <HAL_SPI_MspInit+0xe0>)
 8003b7e:	f043 0304 	orr.w	r3, r3, #4
 8003b82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b84:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <HAL_SPI_MspInit+0xe0>)
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003b90:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b96:	2302      	movs	r3, #2
 8003b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ba2:	2306      	movs	r3, #6
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ba6:	f107 031c 	add.w	r3, r7, #28
 8003baa:	4619      	mov	r1, r3
 8003bac:	4806      	ldr	r0, [pc, #24]	; (8003bc8 <HAL_SPI_MspInit+0xe8>)
 8003bae:	f001 ffb7 	bl	8005b20 <HAL_GPIO_Init>
}
 8003bb2:	bf00      	nop
 8003bb4:	3730      	adds	r7, #48	; 0x30
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40013000 	.word	0x40013000
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40003c00 	.word	0x40003c00
 8003bc8:	48000800 	.word	0x48000800

08003bcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b098      	sub	sp, #96	; 0x60
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bd4:	f107 030c 	add.w	r3, r7, #12
 8003bd8:	2254      	movs	r2, #84	; 0x54
 8003bda:	2100      	movs	r1, #0
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f005 ff8c 	bl	8009afa <memset>
  if(hpcd->Instance==USB)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a11      	ldr	r2, [pc, #68]	; (8003c2c <HAL_PCD_MspInit+0x60>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d11b      	bne.n	8003c24 <HAL_PCD_MspInit+0x58>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bf0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003bf2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bf6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bf8:	f107 030c 	add.w	r3, r7, #12
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f003 ffa1 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8003c08:	f7ff fb56 	bl	80032b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <HAL_PCD_MspInit+0x64>)
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c10:	4a07      	ldr	r2, [pc, #28]	; (8003c30 <HAL_PCD_MspInit+0x64>)
 8003c12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c16:	6593      	str	r3, [r2, #88]	; 0x58
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_PCD_MspInit+0x64>)
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003c24:	bf00      	nop
 8003c26:	3760      	adds	r7, #96	; 0x60
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40005c00 	.word	0x40005c00
 8003c30:	40021000 	.word	0x40021000

08003c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c38:	e7fe      	b.n	8003c38 <NMI_Handler+0x4>

08003c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c3e:	e7fe      	b.n	8003c3e <HardFault_Handler+0x4>

08003c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c44:	e7fe      	b.n	8003c44 <MemManage_Handler+0x4>

08003c46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c46:	b480      	push	{r7}
 8003c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c4a:	e7fe      	b.n	8003c4a <BusFault_Handler+0x4>

08003c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c50:	e7fe      	b.n	8003c50 <UsageFault_Handler+0x4>

08003c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c52:	b480      	push	{r7}
 8003c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c80:	f000 f97e 	bl	8003f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c84:	bf00      	nop
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c8c:	4802      	ldr	r0, [pc, #8]	; (8003c98 <DMA1_Channel1_IRQHandler+0x10>)
 8003c8e:	f001 fc6f 	bl	8005570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000384 	.word	0x20000384

08003c9c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003ca0:	4802      	ldr	r0, [pc, #8]	; (8003cac <DMA1_Channel2_IRQHandler+0x10>)
 8003ca2:	f001 fc65 	bl	8005570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	2000060c 	.word	0x2000060c

08003cb0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003cb4:	4802      	ldr	r0, [pc, #8]	; (8003cc0 <DMA1_Channel3_IRQHandler+0x10>)
 8003cb6:	f001 fc5b 	bl	8005570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	2000066c 	.word	0x2000066c

08003cc4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003cc8:	4802      	ldr	r0, [pc, #8]	; (8003cd4 <DMA1_Channel4_IRQHandler+0x10>)
 8003cca:	f001 fc51 	bl	8005570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003cce:	bf00      	nop
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200006cc 	.word	0x200006cc

08003cd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return 1;
 8003cdc:	2301      	movs	r3, #1
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <_kill>:

int _kill(int pid, int sig)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cf2:	f005 ff65 	bl	8009bc0 <__errno>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2216      	movs	r2, #22
 8003cfa:	601a      	str	r2, [r3, #0]
  return -1;
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <_exit>:

void _exit (int status)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d10:	f04f 31ff 	mov.w	r1, #4294967295
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ffe7 	bl	8003ce8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d1a:	e7fe      	b.n	8003d1a <_exit+0x12>

08003d1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	e00a      	b.n	8003d44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d2e:	f3af 8000 	nop.w
 8003d32:	4601      	mov	r1, r0
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	60ba      	str	r2, [r7, #8]
 8003d3a:	b2ca      	uxtb	r2, r1
 8003d3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	3301      	adds	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	dbf0      	blt.n	8003d2e <_read+0x12>
  }

  return len;
 8003d4c:	687b      	ldr	r3, [r7, #4]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e009      	b.n	8003d7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	60ba      	str	r2, [r7, #8]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	dbf1      	blt.n	8003d68 <_write+0x12>
  }
  return len;
 8003d84:	687b      	ldr	r3, [r7, #4]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <_close>:

int _close(int file)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003db6:	605a      	str	r2, [r3, #4]
  return 0;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <_isatty>:

int _isatty(int file)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003dce:	2301      	movs	r3, #1
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e00:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <_sbrk+0x5c>)
 8003e02:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <_sbrk+0x60>)
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e0c:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <_sbrk+0x64>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e14:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <_sbrk+0x64>)
 8003e16:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <_sbrk+0x68>)
 8003e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <_sbrk+0x64>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d207      	bcs.n	8003e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e28:	f005 feca 	bl	8009bc0 <__errno>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	220c      	movs	r2, #12
 8003e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e32:	f04f 33ff 	mov.w	r3, #4294967295
 8003e36:	e009      	b.n	8003e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e38:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <_sbrk+0x64>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <_sbrk+0x64>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	4a05      	ldr	r2, [pc, #20]	; (8003e5c <_sbrk+0x64>)
 8003e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20020000 	.word	0x20020000
 8003e58:	00000400 	.word	0x00000400
 8003e5c:	20000b78 	.word	0x20000b78
 8003e60:	20000cd0 	.word	0x20000cd0

08003e64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <SystemInit+0x20>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	4a05      	ldr	r2, [pc, #20]	; (8003e84 <SystemInit+0x20>)
 8003e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e78:	bf00      	nop
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e88:	480d      	ldr	r0, [pc, #52]	; (8003ec0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e8c:	f7ff ffea 	bl	8003e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e90:	480c      	ldr	r0, [pc, #48]	; (8003ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e92:	490d      	ldr	r1, [pc, #52]	; (8003ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e94:	4a0d      	ldr	r2, [pc, #52]	; (8003ecc <LoopForever+0xe>)
  movs r3, #0
 8003e96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003e98:	e002      	b.n	8003ea0 <LoopCopyDataInit>

08003e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e9e:	3304      	adds	r3, #4

08003ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ea4:	d3f9      	bcc.n	8003e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ea8:	4c0a      	ldr	r4, [pc, #40]	; (8003ed4 <LoopForever+0x16>)
  movs r3, #0
 8003eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eac:	e001      	b.n	8003eb2 <LoopFillZerobss>

08003eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eb0:	3204      	adds	r2, #4

08003eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003eb4:	d3fb      	bcc.n	8003eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003eb6:	f005 fe89 	bl	8009bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003eba:	f7fe fccd 	bl	8002858 <main>

08003ebe <LoopForever>:

LoopForever:
    b LoopForever
 8003ebe:	e7fe      	b.n	8003ebe <LoopForever>
  ldr   r0, =_estack
 8003ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ec8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003ecc:	0800bc14 	.word	0x0800bc14
  ldr r2, =_sbss
 8003ed0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003ed4:	20000ccc 	.word	0x20000ccc

08003ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ed8:	e7fe      	b.n	8003ed8 <ADC1_2_IRQHandler>

08003eda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ee4:	2003      	movs	r0, #3
 8003ee6:	f001 fa5b 	bl	80053a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003eea:	200f      	movs	r0, #15
 8003eec:	f000 f80e 	bl	8003f0c <HAL_InitTick>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	71fb      	strb	r3, [r7, #7]
 8003efa:	e001      	b.n	8003f00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003efc:	f7ff f9e2 	bl	80032c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f00:	79fb      	ldrb	r3, [r7, #7]

}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003f18:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <HAL_InitTick+0x68>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d022      	beq.n	8003f66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003f20:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <HAL_InitTick+0x6c>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <HAL_InitTick+0x68>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 fa66 	bl	8005406 <HAL_SYSTICK_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10f      	bne.n	8003f60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b0f      	cmp	r3, #15
 8003f44:	d809      	bhi.n	8003f5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f46:	2200      	movs	r2, #0
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4e:	f001 fa32 	bl	80053b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f52:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <HAL_InitTick+0x70>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	e007      	b.n	8003f6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
 8003f5e:	e004      	b.n	8003f6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
 8003f64:	e001      	b.n	8003f6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20000008 	.word	0x20000008
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	20000004 	.word	0x20000004

08003f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_IncTick+0x1c>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <HAL_IncTick+0x20>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	4a03      	ldr	r2, [pc, #12]	; (8003f9c <HAL_IncTick+0x1c>)
 8003f90:	6013      	str	r3, [r2, #0]
}
 8003f92:	bf00      	nop
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	20000b7c 	.word	0x20000b7c
 8003fa0:	20000008 	.word	0x20000008

08003fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fa8:	4b03      	ldr	r3, [pc, #12]	; (8003fb8 <HAL_GetTick+0x14>)
 8003faa:	681b      	ldr	r3, [r3, #0]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000b7c 	.word	0x20000b7c

08003fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fc4:	f7ff ffee 	bl	8003fa4 <HAL_GetTick>
 8003fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d004      	beq.n	8003fe0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fd6:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <HAL_Delay+0x40>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4413      	add	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fe0:	bf00      	nop
 8003fe2:	f7ff ffdf 	bl	8003fa4 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d8f7      	bhi.n	8003fe2 <HAL_Delay+0x26>
  {
  }
}
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20000008 	.word	0x20000008

08004000 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	609a      	str	r2, [r3, #8]
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	609a      	str	r2, [r3, #8]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3360      	adds	r3, #96	; 0x60
 800407a:	461a      	mov	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <LL_ADC_SetOffset+0x44>)
 800408a:	4013      	ands	r3, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	4313      	orrs	r3, r2
 8004098:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80040a0:	bf00      	nop
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	03fff000 	.word	0x03fff000

080040b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3360      	adds	r3, #96	; 0x60
 80040be:	461a      	mov	r2, r3
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3360      	adds	r3, #96	; 0x60
 80040ec:	461a      	mov	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	431a      	orrs	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004112:	b480      	push	{r7}
 8004114:	b087      	sub	sp, #28
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3360      	adds	r3, #96	; 0x60
 8004122:	461a      	mov	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	431a      	orrs	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800413c:	bf00      	nop
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	3360      	adds	r3, #96	; 0x60
 8004158:	461a      	mov	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	431a      	orrs	r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004172:	bf00      	nop
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	615a      	str	r2, [r3, #20]
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3330      	adds	r3, #48	; 0x30
 80041b4:	461a      	mov	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	0a1b      	lsrs	r3, r3, #8
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	f003 030c 	and.w	r3, r3, #12
 80041c0:	4413      	add	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	211f      	movs	r1, #31
 80041d0:	fa01 f303 	lsl.w	r3, r1, r3
 80041d4:	43db      	mvns	r3, r3
 80041d6:	401a      	ands	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	0e9b      	lsrs	r3, r3, #26
 80041dc:	f003 011f 	and.w	r1, r3, #31
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f003 031f 	and.w	r3, r3, #31
 80041e6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ea:	431a      	orrs	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80041f0:	bf00      	nop
 80041f2:	371c      	adds	r7, #28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3314      	adds	r3, #20
 800420c:	461a      	mov	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	0e5b      	lsrs	r3, r3, #25
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	4413      	add	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	0d1b      	lsrs	r3, r3, #20
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	2107      	movs	r1, #7
 800422a:	fa01 f303 	lsl.w	r3, r1, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	401a      	ands	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	0d1b      	lsrs	r3, r3, #20
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	fa01 f303 	lsl.w	r3, r1, r3
 8004240:	431a      	orrs	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426c:	43db      	mvns	r3, r3
 800426e:	401a      	ands	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f003 0318 	and.w	r3, r3, #24
 8004276:	4908      	ldr	r1, [pc, #32]	; (8004298 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004278:	40d9      	lsrs	r1, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	400b      	ands	r3, r1
 800427e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004282:	431a      	orrs	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800428a:	bf00      	nop
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	0007ffff 	.word	0x0007ffff

0800429c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80042ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6093      	str	r3, [r2, #8]
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d4:	d101      	bne.n	80042da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80042f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004324:	d101      	bne.n	800432a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <LL_ADC_IsEnabled+0x18>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <LL_ADC_IsEnabled+0x1a>
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b04      	cmp	r3, #4
 8004370:	d101      	bne.n	8004376 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b08      	cmp	r3, #8
 8004396:	d101      	bne.n	800439c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b089      	sub	sp, #36	; 0x24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e1a9      	b.n	800471a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7fe ff99 	bl	800330c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff ff67 	bl	80042c0 <LL_ADC_IsDeepPowerDownEnabled>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d004      	beq.n	8004402 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff ff4d 	bl	800429c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff ff82 	bl	8004310 <LL_ADC_IsInternalRegulatorEnabled>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d115      	bne.n	800443e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff ff66 	bl	80042e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800441c:	4b9c      	ldr	r3, [pc, #624]	; (8004690 <HAL_ADC_Init+0x2e4>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	099b      	lsrs	r3, r3, #6
 8004422:	4a9c      	ldr	r2, [pc, #624]	; (8004694 <HAL_ADC_Init+0x2e8>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	099b      	lsrs	r3, r3, #6
 800442a:	3301      	adds	r3, #1
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004430:	e002      	b.n	8004438 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3b01      	subs	r3, #1
 8004436:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f9      	bne.n	8004432 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff ff64 	bl	8004310 <LL_ADC_IsInternalRegulatorEnabled>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10d      	bne.n	800446a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004452:	f043 0210 	orr.w	r2, r3, #16
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445e:	f043 0201 	orr.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff ff75 	bl	800435e <LL_ADC_REG_IsConversionOngoing>
 8004474:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	f040 8142 	bne.w	8004708 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f040 813e 	bne.w	8004708 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004494:	f043 0202 	orr.w	r2, r3, #2
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff49 	bl	8004338 <LL_ADC_IsEnabled>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d141      	bne.n	8004530 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b4:	d004      	beq.n	80044c0 <HAL_ADC_Init+0x114>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a77      	ldr	r2, [pc, #476]	; (8004698 <HAL_ADC_Init+0x2ec>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d10f      	bne.n	80044e0 <HAL_ADC_Init+0x134>
 80044c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80044c4:	f7ff ff38 	bl	8004338 <LL_ADC_IsEnabled>
 80044c8:	4604      	mov	r4, r0
 80044ca:	4873      	ldr	r0, [pc, #460]	; (8004698 <HAL_ADC_Init+0x2ec>)
 80044cc:	f7ff ff34 	bl	8004338 <LL_ADC_IsEnabled>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4323      	orrs	r3, r4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	e012      	b.n	8004506 <HAL_ADC_Init+0x15a>
 80044e0:	486e      	ldr	r0, [pc, #440]	; (800469c <HAL_ADC_Init+0x2f0>)
 80044e2:	f7ff ff29 	bl	8004338 <LL_ADC_IsEnabled>
 80044e6:	4604      	mov	r4, r0
 80044e8:	486d      	ldr	r0, [pc, #436]	; (80046a0 <HAL_ADC_Init+0x2f4>)
 80044ea:	f7ff ff25 	bl	8004338 <LL_ADC_IsEnabled>
 80044ee:	4603      	mov	r3, r0
 80044f0:	431c      	orrs	r4, r3
 80044f2:	486c      	ldr	r0, [pc, #432]	; (80046a4 <HAL_ADC_Init+0x2f8>)
 80044f4:	f7ff ff20 	bl	8004338 <LL_ADC_IsEnabled>
 80044f8:	4603      	mov	r3, r0
 80044fa:	4323      	orrs	r3, r4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d012      	beq.n	8004530 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004512:	d004      	beq.n	800451e <HAL_ADC_Init+0x172>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a5f      	ldr	r2, [pc, #380]	; (8004698 <HAL_ADC_Init+0x2ec>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d101      	bne.n	8004522 <HAL_ADC_Init+0x176>
 800451e:	4a62      	ldr	r2, [pc, #392]	; (80046a8 <HAL_ADC_Init+0x2fc>)
 8004520:	e000      	b.n	8004524 <HAL_ADC_Init+0x178>
 8004522:	4a62      	ldr	r2, [pc, #392]	; (80046ac <HAL_ADC_Init+0x300>)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f7ff fd68 	bl	8004000 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	7f5b      	ldrb	r3, [r3, #29]
 8004534:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800453a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004540:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004546:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800454e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800455a:	2b01      	cmp	r3, #1
 800455c:	d106      	bne.n	800456c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	3b01      	subs	r3, #1
 8004564:	045b      	lsls	r3, r3, #17
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d009      	beq.n	8004588 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	4b48      	ldr	r3, [pc, #288]	; (80046b0 <HAL_ADC_Init+0x304>)
 8004590:	4013      	ands	r3, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	69b9      	ldr	r1, [r7, #24]
 8004598:	430b      	orrs	r3, r1
 800459a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fee4 	bl	8004384 <LL_ADC_INJ_IsConversionOngoing>
 80045bc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d17f      	bne.n	80046c4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d17c      	bne.n	80046c4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045ce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045d6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045e6:	f023 0302 	bic.w	r3, r3, #2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	69b9      	ldr	r1, [r7, #24]
 80045f0:	430b      	orrs	r3, r1
 80045f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d017      	beq.n	800462c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800460a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004614:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004618:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6911      	ldr	r1, [r2, #16]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	430b      	orrs	r3, r1
 8004626:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800462a:	e013      	b.n	8004654 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800463a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800464c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004650:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800465a:	2b01      	cmp	r3, #1
 800465c:	d12a      	bne.n	80046b4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004668:	f023 0304 	bic.w	r3, r3, #4
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004674:	4311      	orrs	r1, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800467a:	4311      	orrs	r1, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004680:	430a      	orrs	r2, r1
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	611a      	str	r2, [r3, #16]
 800468e:	e019      	b.n	80046c4 <HAL_ADC_Init+0x318>
 8004690:	20000000 	.word	0x20000000
 8004694:	053e2d63 	.word	0x053e2d63
 8004698:	50000100 	.word	0x50000100
 800469c:	50000400 	.word	0x50000400
 80046a0:	50000500 	.word	0x50000500
 80046a4:	50000600 	.word	0x50000600
 80046a8:	50000300 	.word	0x50000300
 80046ac:	50000700 	.word	0x50000700
 80046b0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d10c      	bne.n	80046e6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	f023 010f 	bic.w	r1, r3, #15
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	1e5a      	subs	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
 80046e4:	e007      	b.n	80046f6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 020f 	bic.w	r2, r2, #15
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fa:	f023 0303 	bic.w	r3, r3, #3
 80046fe:	f043 0201 	orr.w	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	65da      	str	r2, [r3, #92]	; 0x5c
 8004706:	e007      	b.n	8004718 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470c:	f043 0210 	orr.w	r2, r3, #16
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004718:	7ffb      	ldrb	r3, [r7, #31]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3724      	adds	r7, #36	; 0x24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd90      	pop	{r4, r7, pc}
 8004722:	bf00      	nop

08004724 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b0b6      	sub	sp, #216	; 0xd8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800473e:	2b01      	cmp	r3, #1
 8004740:	d102      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x24>
 8004742:	2302      	movs	r3, #2
 8004744:	f000 bc13 	b.w	8004f6e <HAL_ADC_ConfigChannel+0x84a>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fe02 	bl	800435e <LL_ADC_REG_IsConversionOngoing>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	f040 83f3 	bne.w	8004f48 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6859      	ldr	r1, [r3, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	f7ff fd18 	bl	80041a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fdf0 	bl	800435e <LL_ADC_REG_IsConversionOngoing>
 800477e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fdfc 	bl	8004384 <LL_ADC_INJ_IsConversionOngoing>
 800478c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004790:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004794:	2b00      	cmp	r3, #0
 8004796:	f040 81d9 	bne.w	8004b4c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800479a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f040 81d4 	bne.w	8004b4c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ac:	d10f      	bne.n	80047ce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2200      	movs	r2, #0
 80047b8:	4619      	mov	r1, r3
 80047ba:	f7ff fd1f 	bl	80041fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fcd9 	bl	800417e <LL_ADC_SetSamplingTimeCommonConfig>
 80047cc:	e00e      	b.n	80047ec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6819      	ldr	r1, [r3, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	461a      	mov	r2, r3
 80047dc:	f7ff fd0e 	bl	80041fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fcc9 	bl	800417e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	695a      	ldr	r2, [r3, #20]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	08db      	lsrs	r3, r3, #3
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b04      	cmp	r3, #4
 800480c:	d022      	beq.n	8004854 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6919      	ldr	r1, [r3, #16]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800481e:	f7ff fc23 	bl	8004068 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6919      	ldr	r1, [r3, #16]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	461a      	mov	r2, r3
 8004830:	f7ff fc6f 	bl	8004112 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004840:	2b01      	cmp	r3, #1
 8004842:	d102      	bne.n	800484a <HAL_ADC_ConfigChannel+0x126>
 8004844:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004848:	e000      	b.n	800484c <HAL_ADC_ConfigChannel+0x128>
 800484a:	2300      	movs	r3, #0
 800484c:	461a      	mov	r2, r3
 800484e:	f7ff fc7b 	bl	8004148 <LL_ADC_SetOffsetSaturation>
 8004852:	e17b      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2100      	movs	r1, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fc28 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004860:	4603      	mov	r3, r0
 8004862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x15c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2100      	movs	r1, #0
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fc1d 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004876:	4603      	mov	r3, r0
 8004878:	0e9b      	lsrs	r3, r3, #26
 800487a:	f003 021f 	and.w	r2, r3, #31
 800487e:	e01e      	b.n	80048be <HAL_ADC_ConfigChannel+0x19a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fc12 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 800488c:	4603      	mov	r3, r0
 800488e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004892:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004896:	fa93 f3a3 	rbit	r3, r3
 800489a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800489e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80048ae:	2320      	movs	r3, #32
 80048b0:	e004      	b.n	80048bc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80048b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048b6:	fab3 f383 	clz	r3, r3
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d105      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x1b2>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	0e9b      	lsrs	r3, r3, #26
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	e018      	b.n	8004908 <HAL_ADC_ConfigChannel+0x1e4>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80048e2:	fa93 f3a3 	rbit	r3, r3
 80048e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80048ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80048f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80048fa:	2320      	movs	r3, #32
 80048fc:	e004      	b.n	8004908 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80048fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004908:	429a      	cmp	r2, r3
 800490a:	d106      	bne.n	800491a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2200      	movs	r2, #0
 8004912:	2100      	movs	r1, #0
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fbe1 	bl	80040dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2101      	movs	r1, #1
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fbc5 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004926:	4603      	mov	r3, r0
 8004928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x222>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2101      	movs	r1, #1
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fbba 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 800493c:	4603      	mov	r3, r0
 800493e:	0e9b      	lsrs	r3, r3, #26
 8004940:	f003 021f 	and.w	r2, r3, #31
 8004944:	e01e      	b.n	8004984 <HAL_ADC_ConfigChannel+0x260>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2101      	movs	r1, #1
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff fbaf 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004952:	4603      	mov	r3, r0
 8004954:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004958:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800495c:	fa93 f3a3 	rbit	r3, r3
 8004960:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004964:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800496c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004974:	2320      	movs	r3, #32
 8004976:	e004      	b.n	8004982 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800497c:	fab3 f383 	clz	r3, r3
 8004980:	b2db      	uxtb	r3, r3
 8004982:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800498c:	2b00      	cmp	r3, #0
 800498e:	d105      	bne.n	800499c <HAL_ADC_ConfigChannel+0x278>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	0e9b      	lsrs	r3, r3, #26
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	e018      	b.n	80049ce <HAL_ADC_ConfigChannel+0x2aa>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049a8:	fa93 f3a3 	rbit	r3, r3
 80049ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80049b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80049b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80049c0:	2320      	movs	r3, #32
 80049c2:	e004      	b.n	80049ce <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80049c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049c8:	fab3 f383 	clz	r3, r3
 80049cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d106      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2200      	movs	r2, #0
 80049d8:	2101      	movs	r1, #1
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fb7e 	bl	80040dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2102      	movs	r1, #2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fb62 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x2e8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2102      	movs	r1, #2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fb57 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004a02:	4603      	mov	r3, r0
 8004a04:	0e9b      	lsrs	r3, r3, #26
 8004a06:	f003 021f 	and.w	r2, r3, #31
 8004a0a:	e01e      	b.n	8004a4a <HAL_ADC_ConfigChannel+0x326>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2102      	movs	r1, #2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fb4c 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a22:	fa93 f3a3 	rbit	r3, r3
 8004a26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004a32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004a3a:	2320      	movs	r3, #32
 8004a3c:	e004      	b.n	8004a48 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004a3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d105      	bne.n	8004a62 <HAL_ADC_ConfigChannel+0x33e>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	0e9b      	lsrs	r3, r3, #26
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	e016      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x36c>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a6e:	fa93 f3a3 	rbit	r3, r3
 8004a72:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004a74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004a7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004a82:	2320      	movs	r3, #32
 8004a84:	e004      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a8a:	fab3 f383 	clz	r3, r3
 8004a8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d106      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fb1d 	bl	80040dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2103      	movs	r1, #3
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fb01 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <HAL_ADC_ConfigChannel+0x3aa>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2103      	movs	r1, #3
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff faf6 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	0e9b      	lsrs	r3, r3, #26
 8004ac8:	f003 021f 	and.w	r2, r3, #31
 8004acc:	e017      	b.n	8004afe <HAL_ADC_ConfigChannel+0x3da>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2103      	movs	r1, #3
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff faeb 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8004ada:	4603      	mov	r3, r0
 8004adc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae0:	fa93 f3a3 	rbit	r3, r3
 8004ae4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ae8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004af0:	2320      	movs	r3, #32
 8004af2:	e003      	b.n	8004afc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004af6:	fab3 f383 	clz	r3, r3
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d105      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x3f2>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	0e9b      	lsrs	r3, r3, #26
 8004b10:	f003 031f 	and.w	r3, r3, #31
 8004b14:	e011      	b.n	8004b3a <HAL_ADC_ConfigChannel+0x416>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b1e:	fa93 f3a3 	rbit	r3, r3
 8004b22:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b26:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004b2e:	2320      	movs	r3, #32
 8004b30:	e003      	b.n	8004b3a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b34:	fab3 f383 	clz	r3, r3
 8004b38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d106      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2200      	movs	r2, #0
 8004b44:	2103      	movs	r1, #3
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff fac8 	bl	80040dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff fbf1 	bl	8004338 <LL_ADC_IsEnabled>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f040 813d 	bne.w	8004dd8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	6819      	ldr	r1, [r3, #0]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f7ff fb72 	bl	8004254 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	4aa2      	ldr	r2, [pc, #648]	; (8004e00 <HAL_ADC_ConfigChannel+0x6dc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	f040 812e 	bne.w	8004dd8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10b      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x480>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	0e9b      	lsrs	r3, r3, #26
 8004b92:	3301      	adds	r3, #1
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	2b09      	cmp	r3, #9
 8004b9a:	bf94      	ite	ls
 8004b9c:	2301      	movls	r3, #1
 8004b9e:	2300      	movhi	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	e019      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x4b4>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bac:	fa93 f3a3 	rbit	r3, r3
 8004bb0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bb4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	e003      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004bc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bc2:	fab3 f383 	clz	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	2b09      	cmp	r3, #9
 8004bd0:	bf94      	ite	ls
 8004bd2:	2301      	movls	r3, #1
 8004bd4:	2300      	movhi	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d079      	beq.n	8004cd0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d107      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x4d4>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	0e9b      	lsrs	r3, r3, #26
 8004bee:	3301      	adds	r3, #1
 8004bf0:	069b      	lsls	r3, r3, #26
 8004bf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bf6:	e015      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x500>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c08:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004c10:	2320      	movs	r3, #32
 8004c12:	e003      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c16:	fab3 f383 	clz	r3, r3
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	069b      	lsls	r3, r3, #26
 8004c20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d109      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0x520>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	0e9b      	lsrs	r3, r3, #26
 8004c36:	3301      	adds	r3, #1
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c42:	e017      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x550>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c4c:	fa93 f3a3 	rbit	r3, r3
 8004c50:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c54:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	e003      	b.n	8004c68 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c62:	fab3 f383 	clz	r3, r3
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	3301      	adds	r3, #1
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	2101      	movs	r1, #1
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	ea42 0103 	orr.w	r1, r2, r3
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10a      	bne.n	8004c9a <HAL_ADC_ConfigChannel+0x576>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	0e9b      	lsrs	r3, r3, #26
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	f003 021f 	and.w	r2, r3, #31
 8004c90:	4613      	mov	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	4413      	add	r3, r2
 8004c96:	051b      	lsls	r3, r3, #20
 8004c98:	e018      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x5a8>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca2:	fa93 f3a3 	rbit	r3, r3
 8004ca6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	e003      	b.n	8004cbe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb8:	fab3 f383 	clz	r3, r3
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	f003 021f 	and.w	r2, r3, #31
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4413      	add	r3, r2
 8004cca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	e07e      	b.n	8004dce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d107      	bne.n	8004cec <HAL_ADC_ConfigChannel+0x5c8>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	0e9b      	lsrs	r3, r3, #26
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	069b      	lsls	r3, r3, #26
 8004ce6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cea:	e015      	b.n	8004d18 <HAL_ADC_ConfigChannel+0x5f4>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004d04:	2320      	movs	r3, #32
 8004d06:	e003      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	fab3 f383 	clz	r3, r3
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	3301      	adds	r3, #1
 8004d12:	069b      	lsls	r3, r3, #26
 8004d14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d109      	bne.n	8004d38 <HAL_ADC_ConfigChannel+0x614>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	0e9b      	lsrs	r3, r3, #26
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	2101      	movs	r1, #1
 8004d32:	fa01 f303 	lsl.w	r3, r1, r3
 8004d36:	e017      	b.n	8004d68 <HAL_ADC_ConfigChannel+0x644>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	fa93 f3a3 	rbit	r3, r3
 8004d44:	61fb      	str	r3, [r7, #28]
  return result;
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004d50:	2320      	movs	r3, #32
 8004d52:	e003      	b.n	8004d5c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	2101      	movs	r1, #1
 8004d64:	fa01 f303 	lsl.w	r3, r1, r3
 8004d68:	ea42 0103 	orr.w	r1, r2, r3
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10d      	bne.n	8004d94 <HAL_ADC_ConfigChannel+0x670>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	0e9b      	lsrs	r3, r3, #26
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f003 021f 	and.w	r2, r3, #31
 8004d84:	4613      	mov	r3, r2
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	4413      	add	r3, r2
 8004d8a:	3b1e      	subs	r3, #30
 8004d8c:	051b      	lsls	r3, r3, #20
 8004d8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d92:	e01b      	b.n	8004dcc <HAL_ADC_ConfigChannel+0x6a8>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	fa93 f3a3 	rbit	r3, r3
 8004da0:	613b      	str	r3, [r7, #16]
  return result;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004dac:	2320      	movs	r3, #32
 8004dae:	e003      	b.n	8004db8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	fab3 f383 	clz	r3, r3
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	3301      	adds	r3, #1
 8004dba:	f003 021f 	and.w	r2, r3, #31
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3b1e      	subs	r3, #30
 8004dc6:	051b      	lsls	r3, r3, #20
 8004dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dcc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	f7ff fa12 	bl	80041fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <HAL_ADC_ConfigChannel+0x6e0>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80be 	beq.w	8004f62 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dee:	d004      	beq.n	8004dfa <HAL_ADC_ConfigChannel+0x6d6>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a04      	ldr	r2, [pc, #16]	; (8004e08 <HAL_ADC_ConfigChannel+0x6e4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d10a      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x6ec>
 8004dfa:	4b04      	ldr	r3, [pc, #16]	; (8004e0c <HAL_ADC_ConfigChannel+0x6e8>)
 8004dfc:	e009      	b.n	8004e12 <HAL_ADC_ConfigChannel+0x6ee>
 8004dfe:	bf00      	nop
 8004e00:	407f0000 	.word	0x407f0000
 8004e04:	80080000 	.word	0x80080000
 8004e08:	50000100 	.word	0x50000100
 8004e0c:	50000300 	.word	0x50000300
 8004e10:	4b59      	ldr	r3, [pc, #356]	; (8004f78 <HAL_ADC_ConfigChannel+0x854>)
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff f91a 	bl	800404c <LL_ADC_GetCommonPathInternalCh>
 8004e18:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a56      	ldr	r2, [pc, #344]	; (8004f7c <HAL_ADC_ConfigChannel+0x858>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <HAL_ADC_ConfigChannel+0x70c>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a55      	ldr	r2, [pc, #340]	; (8004f80 <HAL_ADC_ConfigChannel+0x85c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d13a      	bne.n	8004ea6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d134      	bne.n	8004ea6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e44:	d005      	beq.n	8004e52 <HAL_ADC_ConfigChannel+0x72e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a4e      	ldr	r2, [pc, #312]	; (8004f84 <HAL_ADC_ConfigChannel+0x860>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	f040 8085 	bne.w	8004f5c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e5a:	d004      	beq.n	8004e66 <HAL_ADC_ConfigChannel+0x742>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a49      	ldr	r2, [pc, #292]	; (8004f88 <HAL_ADC_ConfigChannel+0x864>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d101      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x746>
 8004e66:	4a49      	ldr	r2, [pc, #292]	; (8004f8c <HAL_ADC_ConfigChannel+0x868>)
 8004e68:	e000      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x748>
 8004e6a:	4a43      	ldr	r2, [pc, #268]	; (8004f78 <HAL_ADC_ConfigChannel+0x854>)
 8004e6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f7ff f8d5 	bl	8004026 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e7c:	4b44      	ldr	r3, [pc, #272]	; (8004f90 <HAL_ADC_ConfigChannel+0x86c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	099b      	lsrs	r3, r3, #6
 8004e82:	4a44      	ldr	r2, [pc, #272]	; (8004f94 <HAL_ADC_ConfigChannel+0x870>)
 8004e84:	fba2 2303 	umull	r2, r3, r2, r3
 8004e88:	099b      	lsrs	r3, r3, #6
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e96:	e002      	b.n	8004e9e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f9      	bne.n	8004e98 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ea4:	e05a      	b.n	8004f5c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a3b      	ldr	r2, [pc, #236]	; (8004f98 <HAL_ADC_ConfigChannel+0x874>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d125      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004eb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d11f      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a31      	ldr	r2, [pc, #196]	; (8004f88 <HAL_ADC_ConfigChannel+0x864>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d104      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x7ac>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a34      	ldr	r2, [pc, #208]	; (8004f9c <HAL_ADC_ConfigChannel+0x878>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d047      	beq.n	8004f60 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ed8:	d004      	beq.n	8004ee4 <HAL_ADC_ConfigChannel+0x7c0>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a2a      	ldr	r2, [pc, #168]	; (8004f88 <HAL_ADC_ConfigChannel+0x864>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d101      	bne.n	8004ee8 <HAL_ADC_ConfigChannel+0x7c4>
 8004ee4:	4a29      	ldr	r2, [pc, #164]	; (8004f8c <HAL_ADC_ConfigChannel+0x868>)
 8004ee6:	e000      	b.n	8004eea <HAL_ADC_ConfigChannel+0x7c6>
 8004ee8:	4a23      	ldr	r2, [pc, #140]	; (8004f78 <HAL_ADC_ConfigChannel+0x854>)
 8004eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	f7ff f896 	bl	8004026 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004efa:	e031      	b.n	8004f60 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a27      	ldr	r2, [pc, #156]	; (8004fa0 <HAL_ADC_ConfigChannel+0x87c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d12d      	bne.n	8004f62 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d127      	bne.n	8004f62 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <HAL_ADC_ConfigChannel+0x864>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d022      	beq.n	8004f62 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f24:	d004      	beq.n	8004f30 <HAL_ADC_ConfigChannel+0x80c>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <HAL_ADC_ConfigChannel+0x864>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d101      	bne.n	8004f34 <HAL_ADC_ConfigChannel+0x810>
 8004f30:	4a16      	ldr	r2, [pc, #88]	; (8004f8c <HAL_ADC_ConfigChannel+0x868>)
 8004f32:	e000      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x812>
 8004f34:	4a10      	ldr	r2, [pc, #64]	; (8004f78 <HAL_ADC_ConfigChannel+0x854>)
 8004f36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4610      	mov	r0, r2
 8004f42:	f7ff f870 	bl	8004026 <LL_ADC_SetCommonPathInternalCh>
 8004f46:	e00c      	b.n	8004f62 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4c:	f043 0220 	orr.w	r2, r3, #32
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004f5a:	e002      	b.n	8004f62 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f5c:	bf00      	nop
 8004f5e:	e000      	b.n	8004f62 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	37d8      	adds	r7, #216	; 0xd8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	50000700 	.word	0x50000700
 8004f7c:	c3210000 	.word	0xc3210000
 8004f80:	90c00010 	.word	0x90c00010
 8004f84:	50000600 	.word	0x50000600
 8004f88:	50000100 	.word	0x50000100
 8004f8c:	50000300 	.word	0x50000300
 8004f90:	20000000 	.word	0x20000000
 8004f94:	053e2d63 	.word	0x053e2d63
 8004f98:	c7520000 	.word	0xc7520000
 8004f9c:	50000500 	.word	0x50000500
 8004fa0:	cb840000 	.word	0xcb840000

08004fa4 <LL_ADC_IsEnabled>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <LL_ADC_IsEnabled+0x18>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <LL_ADC_IsEnabled+0x1a>
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <LL_ADC_REG_IsConversionOngoing>:
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d101      	bne.n	8004fe2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004ff0:	b590      	push	{r4, r7, lr}
 8004ff2:	b0a1      	sub	sp, #132	; 0x84
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800500a:	2302      	movs	r3, #2
 800500c:	e0e7      	b.n	80051de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005016:	2300      	movs	r3, #0
 8005018:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800501a:	2300      	movs	r3, #0
 800501c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005026:	d102      	bne.n	800502e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005028:	4b6f      	ldr	r3, [pc, #444]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800502a:	60bb      	str	r3, [r7, #8]
 800502c:	e009      	b.n	8005042 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a6e      	ldr	r2, [pc, #440]	; (80051ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d102      	bne.n	800503e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005038:	4b6d      	ldr	r3, [pc, #436]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	e001      	b.n	8005042 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800503e:	2300      	movs	r3, #0
 8005040:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10b      	bne.n	8005060 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504c:	f043 0220 	orr.w	r2, r3, #32
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0be      	b.n	80051de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff ffb1 	bl	8004fca <LL_ADC_REG_IsConversionOngoing>
 8005068:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff ffab 	bl	8004fca <LL_ADC_REG_IsConversionOngoing>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	f040 80a0 	bne.w	80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800507c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800507e:	2b00      	cmp	r3, #0
 8005080:	f040 809c 	bne.w	80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800508c:	d004      	beq.n	8005098 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a55      	ldr	r2, [pc, #340]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d101      	bne.n	800509c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005098:	4b56      	ldr	r3, [pc, #344]	; (80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800509a:	e000      	b.n	800509e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800509c:	4b56      	ldr	r3, [pc, #344]	; (80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800509e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d04b      	beq.n	8005140 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80050a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	6859      	ldr	r1, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050ba:	035b      	lsls	r3, r3, #13
 80050bc:	430b      	orrs	r3, r1
 80050be:	431a      	orrs	r2, r3
 80050c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050cc:	d004      	beq.n	80050d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a45      	ldr	r2, [pc, #276]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d10f      	bne.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80050d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80050dc:	f7ff ff62 	bl	8004fa4 <LL_ADC_IsEnabled>
 80050e0:	4604      	mov	r4, r0
 80050e2:	4841      	ldr	r0, [pc, #260]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050e4:	f7ff ff5e 	bl	8004fa4 <LL_ADC_IsEnabled>
 80050e8:	4603      	mov	r3, r0
 80050ea:	4323      	orrs	r3, r4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	e012      	b.n	800511e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80050f8:	483c      	ldr	r0, [pc, #240]	; (80051ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80050fa:	f7ff ff53 	bl	8004fa4 <LL_ADC_IsEnabled>
 80050fe:	4604      	mov	r4, r0
 8005100:	483b      	ldr	r0, [pc, #236]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005102:	f7ff ff4f 	bl	8004fa4 <LL_ADC_IsEnabled>
 8005106:	4603      	mov	r3, r0
 8005108:	431c      	orrs	r4, r3
 800510a:	483c      	ldr	r0, [pc, #240]	; (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800510c:	f7ff ff4a 	bl	8004fa4 <LL_ADC_IsEnabled>
 8005110:	4603      	mov	r3, r0
 8005112:	4323      	orrs	r3, r4
 8005114:	2b00      	cmp	r3, #0
 8005116:	bf0c      	ite	eq
 8005118:	2301      	moveq	r3, #1
 800511a:	2300      	movne	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d056      	beq.n	80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800512a:	f023 030f 	bic.w	r3, r3, #15
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	6811      	ldr	r1, [r2, #0]
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	6892      	ldr	r2, [r2, #8]
 8005136:	430a      	orrs	r2, r1
 8005138:	431a      	orrs	r2, r3
 800513a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800513c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800513e:	e047      	b.n	80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800514a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005154:	d004      	beq.n	8005160 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a23      	ldr	r2, [pc, #140]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10f      	bne.n	8005180 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005160:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005164:	f7ff ff1e 	bl	8004fa4 <LL_ADC_IsEnabled>
 8005168:	4604      	mov	r4, r0
 800516a:	481f      	ldr	r0, [pc, #124]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800516c:	f7ff ff1a 	bl	8004fa4 <LL_ADC_IsEnabled>
 8005170:	4603      	mov	r3, r0
 8005172:	4323      	orrs	r3, r4
 8005174:	2b00      	cmp	r3, #0
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	e012      	b.n	80051a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005180:	481a      	ldr	r0, [pc, #104]	; (80051ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005182:	f7ff ff0f 	bl	8004fa4 <LL_ADC_IsEnabled>
 8005186:	4604      	mov	r4, r0
 8005188:	4819      	ldr	r0, [pc, #100]	; (80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800518a:	f7ff ff0b 	bl	8004fa4 <LL_ADC_IsEnabled>
 800518e:	4603      	mov	r3, r0
 8005190:	431c      	orrs	r4, r3
 8005192:	481a      	ldr	r0, [pc, #104]	; (80051fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005194:	f7ff ff06 	bl	8004fa4 <LL_ADC_IsEnabled>
 8005198:	4603      	mov	r3, r0
 800519a:	4323      	orrs	r3, r4
 800519c:	2b00      	cmp	r3, #0
 800519e:	bf0c      	ite	eq
 80051a0:	2301      	moveq	r3, #1
 80051a2:	2300      	movne	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d012      	beq.n	80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80051b2:	f023 030f 	bic.w	r3, r3, #15
 80051b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80051b8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051ba:	e009      	b.n	80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80051ce:	e000      	b.n	80051d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80051da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3784      	adds	r7, #132	; 0x84
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd90      	pop	{r4, r7, pc}
 80051e6:	bf00      	nop
 80051e8:	50000100 	.word	0x50000100
 80051ec:	50000400 	.word	0x50000400
 80051f0:	50000500 	.word	0x50000500
 80051f4:	50000300 	.word	0x50000300
 80051f8:	50000700 	.word	0x50000700
 80051fc:	50000600 	.word	0x50000600

08005200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <__NVIC_SetPriorityGrouping+0x44>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800521c:	4013      	ands	r3, r2
 800521e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800522c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005232:	4a04      	ldr	r2, [pc, #16]	; (8005244 <__NVIC_SetPriorityGrouping+0x44>)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	60d3      	str	r3, [r2, #12]
}
 8005238:	bf00      	nop
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	e000ed00 	.word	0xe000ed00

08005248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800524c:	4b04      	ldr	r3, [pc, #16]	; (8005260 <__NVIC_GetPriorityGrouping+0x18>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	0a1b      	lsrs	r3, r3, #8
 8005252:	f003 0307 	and.w	r3, r3, #7
}
 8005256:	4618      	mov	r0, r3
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	e000ed00 	.word	0xe000ed00

08005264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800526e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005272:	2b00      	cmp	r3, #0
 8005274:	db0b      	blt.n	800528e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	f003 021f 	and.w	r2, r3, #31
 800527c:	4907      	ldr	r1, [pc, #28]	; (800529c <__NVIC_EnableIRQ+0x38>)
 800527e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	2001      	movs	r0, #1
 8005286:	fa00 f202 	lsl.w	r2, r0, r2
 800528a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	e000e100 	.word	0xe000e100

080052a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	6039      	str	r1, [r7, #0]
 80052aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	db0a      	blt.n	80052ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	490c      	ldr	r1, [pc, #48]	; (80052ec <__NVIC_SetPriority+0x4c>)
 80052ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052be:	0112      	lsls	r2, r2, #4
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	440b      	add	r3, r1
 80052c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052c8:	e00a      	b.n	80052e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	4908      	ldr	r1, [pc, #32]	; (80052f0 <__NVIC_SetPriority+0x50>)
 80052d0:	79fb      	ldrb	r3, [r7, #7]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	3b04      	subs	r3, #4
 80052d8:	0112      	lsls	r2, r2, #4
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	440b      	add	r3, r1
 80052de:	761a      	strb	r2, [r3, #24]
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	e000e100 	.word	0xe000e100
 80052f0:	e000ed00 	.word	0xe000ed00

080052f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b089      	sub	sp, #36	; 0x24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f1c3 0307 	rsb	r3, r3, #7
 800530e:	2b04      	cmp	r3, #4
 8005310:	bf28      	it	cs
 8005312:	2304      	movcs	r3, #4
 8005314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	3304      	adds	r3, #4
 800531a:	2b06      	cmp	r3, #6
 800531c:	d902      	bls.n	8005324 <NVIC_EncodePriority+0x30>
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	3b03      	subs	r3, #3
 8005322:	e000      	b.n	8005326 <NVIC_EncodePriority+0x32>
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005328:	f04f 32ff 	mov.w	r2, #4294967295
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	43da      	mvns	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	401a      	ands	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800533c:	f04f 31ff 	mov.w	r1, #4294967295
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	fa01 f303 	lsl.w	r3, r1, r3
 8005346:	43d9      	mvns	r1, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800534c:	4313      	orrs	r3, r2
         );
}
 800534e:	4618      	mov	r0, r3
 8005350:	3724      	adds	r7, #36	; 0x24
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3b01      	subs	r3, #1
 8005368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800536c:	d301      	bcc.n	8005372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800536e:	2301      	movs	r3, #1
 8005370:	e00f      	b.n	8005392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005372:	4a0a      	ldr	r2, [pc, #40]	; (800539c <SysTick_Config+0x40>)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3b01      	subs	r3, #1
 8005378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800537a:	210f      	movs	r1, #15
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	f7ff ff8e 	bl	80052a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005384:	4b05      	ldr	r3, [pc, #20]	; (800539c <SysTick_Config+0x40>)
 8005386:	2200      	movs	r2, #0
 8005388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800538a:	4b04      	ldr	r3, [pc, #16]	; (800539c <SysTick_Config+0x40>)
 800538c:	2207      	movs	r2, #7
 800538e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	e000e010 	.word	0xe000e010

080053a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff ff29 	bl	8005200 <__NVIC_SetPriorityGrouping>
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b086      	sub	sp, #24
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	4603      	mov	r3, r0
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	607a      	str	r2, [r7, #4]
 80053c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053c4:	f7ff ff40 	bl	8005248 <__NVIC_GetPriorityGrouping>
 80053c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	6978      	ldr	r0, [r7, #20]
 80053d0:	f7ff ff90 	bl	80052f4 <NVIC_EncodePriority>
 80053d4:	4602      	mov	r2, r0
 80053d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053da:	4611      	mov	r1, r2
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff ff5f 	bl	80052a0 <__NVIC_SetPriority>
}
 80053e2:	bf00      	nop
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	4603      	mov	r3, r0
 80053f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff ff33 	bl	8005264 <__NVIC_EnableIRQ>
}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff ffa4 	bl	800535c <SysTick_Config>
 8005414:	4603      	mov	r3, r0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e08d      	b.n	800554e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	4b47      	ldr	r3, [pc, #284]	; (8005558 <HAL_DMA_Init+0x138>)
 800543a:	429a      	cmp	r2, r3
 800543c:	d80f      	bhi.n	800545e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	4b45      	ldr	r3, [pc, #276]	; (800555c <HAL_DMA_Init+0x13c>)
 8005446:	4413      	add	r3, r2
 8005448:	4a45      	ldr	r2, [pc, #276]	; (8005560 <HAL_DMA_Init+0x140>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	009a      	lsls	r2, r3, #2
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a42      	ldr	r2, [pc, #264]	; (8005564 <HAL_DMA_Init+0x144>)
 800545a:	641a      	str	r2, [r3, #64]	; 0x40
 800545c:	e00e      	b.n	800547c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	4b40      	ldr	r3, [pc, #256]	; (8005568 <HAL_DMA_Init+0x148>)
 8005466:	4413      	add	r3, r2
 8005468:	4a3d      	ldr	r2, [pc, #244]	; (8005560 <HAL_DMA_Init+0x140>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	091b      	lsrs	r3, r3, #4
 8005470:	009a      	lsls	r2, r3, #2
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a3c      	ldr	r2, [pc, #240]	; (800556c <HAL_DMA_Init+0x14c>)
 800547a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80054a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8fe 	bl	80056d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054dc:	d102      	bne.n	80054e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054f8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d010      	beq.n	8005524 <HAL_DMA_Init+0x104>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b04      	cmp	r3, #4
 8005508:	d80c      	bhi.n	8005524 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f91e 	bl	800574c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	e008      	b.n	8005536 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40020407 	.word	0x40020407
 800555c:	bffdfff8 	.word	0xbffdfff8
 8005560:	cccccccd 	.word	0xcccccccd
 8005564:	40020000 	.word	0x40020000
 8005568:	bffdfbf8 	.word	0xbffdfbf8
 800556c:	40020400 	.word	0x40020400

08005570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558c:	f003 031f 	and.w	r3, r3, #31
 8005590:	2204      	movs	r2, #4
 8005592:	409a      	lsls	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d026      	beq.n	80055ea <HAL_DMA_IRQHandler+0x7a>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d021      	beq.n	80055ea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0204 	bic.w	r2, r2, #4
 80055c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c8:	f003 021f 	and.w	r2, r3, #31
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	2104      	movs	r1, #4
 80055d2:	fa01 f202 	lsl.w	r2, r1, r2
 80055d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d071      	beq.n	80056c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80055e8:	e06c      	b.n	80056c4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	2202      	movs	r2, #2
 80055f4:	409a      	lsls	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d02e      	beq.n	800565c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d029      	beq.n	800565c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10b      	bne.n	800562e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 020a 	bic.w	r2, r2, #10
 8005624:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	f003 021f 	and.w	r2, r3, #31
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	2102      	movs	r1, #2
 800563c:	fa01 f202 	lsl.w	r2, r1, r2
 8005640:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	2b00      	cmp	r3, #0
 8005650:	d038      	beq.n	80056c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800565a:	e033      	b.n	80056c4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005660:	f003 031f 	and.w	r3, r3, #31
 8005664:	2208      	movs	r2, #8
 8005666:	409a      	lsls	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4013      	ands	r3, r2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d02a      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d025      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 020e 	bic.w	r2, r2, #14
 8005688:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568e:	f003 021f 	and.w	r2, r3, #31
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	2101      	movs	r1, #1
 8005698:	fa01 f202 	lsl.w	r2, r1, r2
 800569c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d004      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop
}
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	4b16      	ldr	r3, [pc, #88]	; (8005738 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d802      	bhi.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80056e4:	4b15      	ldr	r3, [pc, #84]	; (800573c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	e001      	b.n	80056ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80056ea:	4b15      	ldr	r3, [pc, #84]	; (8005740 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80056ec:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	3b08      	subs	r3, #8
 80056fa:	4a12      	ldr	r2, [pc, #72]	; (8005744 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80056fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005700:	091b      	lsrs	r3, r3, #4
 8005702:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005708:	089b      	lsrs	r3, r3, #2
 800570a:	009a      	lsls	r2, r3, #2
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4413      	add	r3, r2
 8005710:	461a      	mov	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a0b      	ldr	r2, [pc, #44]	; (8005748 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800571a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 031f 	and.w	r3, r3, #31
 8005722:	2201      	movs	r2, #1
 8005724:	409a      	lsls	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	651a      	str	r2, [r3, #80]	; 0x50
}
 800572a:	bf00      	nop
 800572c:	371c      	adds	r7, #28
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40020407 	.word	0x40020407
 800573c:	40020800 	.word	0x40020800
 8005740:	40020820 	.word	0x40020820
 8005744:	cccccccd 	.word	0xcccccccd
 8005748:	40020880 	.word	0x40020880

0800574c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4b0b      	ldr	r3, [pc, #44]	; (800578c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	461a      	mov	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a08      	ldr	r2, [pc, #32]	; (8005790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800576e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3b01      	subs	r3, #1
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	2201      	movs	r2, #1
 800577a:	409a      	lsls	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	1000823f 	.word	0x1000823f
 8005790:	40020940 	.word	0x40020940

08005794 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e147      	b.n	8005a36 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fd fe66 	bl	800348c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0210 	bic.w	r2, r2, #16
 80057ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057d0:	f7fe fbe8 	bl	8003fa4 <HAL_GetTick>
 80057d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80057d6:	e012      	b.n	80057fe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80057d8:	f7fe fbe4 	bl	8003fa4 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b0a      	cmp	r3, #10
 80057e4:	d90b      	bls.n	80057fe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ea:	f043 0201 	orr.w	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2203      	movs	r2, #3
 80057f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e11b      	b.n	8005a36 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b08      	cmp	r3, #8
 800580a:	d0e5      	beq.n	80057d8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800581c:	f7fe fbc2 	bl	8003fa4 <HAL_GetTick>
 8005820:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005822:	e012      	b.n	800584a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005824:	f7fe fbbe 	bl	8003fa4 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b0a      	cmp	r3, #10
 8005830:	d90b      	bls.n	800584a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005836:	f043 0201 	orr.w	r2, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2203      	movs	r2, #3
 8005842:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e0f5      	b.n	8005a36 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0e5      	beq.n	8005824 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0202 	orr.w	r2, r2, #2
 8005866:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a74      	ldr	r2, [pc, #464]	; (8005a40 <HAL_FDCAN_Init+0x2ac>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d103      	bne.n	800587a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005872:	4a74      	ldr	r2, [pc, #464]	; (8005a44 <HAL_FDCAN_Init+0x2b0>)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	7c1b      	ldrb	r3, [r3, #16]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d108      	bne.n	8005894 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	699a      	ldr	r2, [r3, #24]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005890:	619a      	str	r2, [r3, #24]
 8005892:	e007      	b.n	80058a4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058a2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	7c5b      	ldrb	r3, [r3, #17]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d108      	bne.n	80058be <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ba:	619a      	str	r2, [r3, #24]
 80058bc:	e007      	b.n	80058ce <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699a      	ldr	r2, [r3, #24]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	7c9b      	ldrb	r3, [r3, #18]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d108      	bne.n	80058e8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699a      	ldr	r2, [r3, #24]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058e4:	619a      	str	r2, [r3, #24]
 80058e6:	e007      	b.n	80058f8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058f6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800591c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0210 	bic.w	r2, r2, #16
 800592c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d108      	bne.n	8005948 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0204 	orr.w	r2, r2, #4
 8005944:	619a      	str	r2, [r3, #24]
 8005946:	e02c      	b.n	80059a2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d028      	beq.n	80059a2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b02      	cmp	r3, #2
 8005956:	d01c      	beq.n	8005992 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005966:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691a      	ldr	r2, [r3, #16]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0210 	orr.w	r2, r2, #16
 8005976:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b03      	cmp	r3, #3
 800597e:	d110      	bne.n	80059a2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0220 	orr.w	r2, r2, #32
 800598e:	619a      	str	r2, [r3, #24]
 8005990:	e007      	b.n	80059a2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	699a      	ldr	r2, [r3, #24]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0220 	orr.w	r2, r2, #32
 80059a0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059b2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059ba:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80059ca:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059cc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059d6:	d115      	bne.n	8005a04 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059dc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	3b01      	subs	r3, #1
 80059e4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80059e6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	3b01      	subs	r3, #1
 80059ee:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80059f0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	3b01      	subs	r3, #1
 80059fa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a00:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a02:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f814 	bl	8005a48 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40006400 	.word	0x40006400
 8005a44:	40006500 	.word	0x40006500

08005a48 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005a50:	4b30      	ldr	r3, [pc, #192]	; (8005b14 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005a52:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a2f      	ldr	r2, [pc, #188]	; (8005b18 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d103      	bne.n	8005a66 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a64:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a2c      	ldr	r2, [pc, #176]	; (8005b1c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d103      	bne.n	8005a78 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005a76:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a86:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8e:	041a      	lsls	r2, r3, #16
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aac:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	061a      	lsls	r2, r3, #24
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	e005      	b.n	8005afa <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	3304      	adds	r3, #4
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d3f3      	bcc.n	8005aee <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005b06:	bf00      	nop
 8005b08:	bf00      	nop
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	4000a400 	.word	0x4000a400
 8005b18:	40006800 	.word	0x40006800
 8005b1c:	40006c00 	.word	0x40006c00

08005b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b2e:	e15a      	b.n	8005de6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	2101      	movs	r1, #1
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 814c 	beq.w	8005de0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d005      	beq.n	8005b60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d130      	bne.n	8005bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	43db      	mvns	r3, r3
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4013      	ands	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	fa02 f303 	lsl.w	r3, r2, r3
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b96:	2201      	movs	r2, #1
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9e:	43db      	mvns	r3, r3
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	091b      	lsrs	r3, r3, #4
 8005bac:	f003 0201 	and.w	r2, r3, #1
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d017      	beq.n	8005bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	2203      	movs	r2, #3
 8005bda:	fa02 f303 	lsl.w	r3, r2, r3
 8005bde:	43db      	mvns	r3, r3
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4013      	ands	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d123      	bne.n	8005c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	08da      	lsrs	r2, r3, #3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3208      	adds	r2, #8
 8005c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	220f      	movs	r2, #15
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	43db      	mvns	r3, r3
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	08da      	lsrs	r2, r3, #3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3208      	adds	r2, #8
 8005c4c:	6939      	ldr	r1, [r7, #16]
 8005c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c62:	43db      	mvns	r3, r3
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4013      	ands	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f003 0203 	and.w	r2, r3, #3
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 80a6 	beq.w	8005de0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c94:	4b5b      	ldr	r3, [pc, #364]	; (8005e04 <HAL_GPIO_Init+0x2e4>)
 8005c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c98:	4a5a      	ldr	r2, [pc, #360]	; (8005e04 <HAL_GPIO_Init+0x2e4>)
 8005c9a:	f043 0301 	orr.w	r3, r3, #1
 8005c9e:	6613      	str	r3, [r2, #96]	; 0x60
 8005ca0:	4b58      	ldr	r3, [pc, #352]	; (8005e04 <HAL_GPIO_Init+0x2e4>)
 8005ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	60bb      	str	r3, [r7, #8]
 8005caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cac:	4a56      	ldr	r2, [pc, #344]	; (8005e08 <HAL_GPIO_Init+0x2e8>)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	089b      	lsrs	r3, r3, #2
 8005cb2:	3302      	adds	r3, #2
 8005cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	220f      	movs	r2, #15
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005cd6:	d01f      	beq.n	8005d18 <HAL_GPIO_Init+0x1f8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a4c      	ldr	r2, [pc, #304]	; (8005e0c <HAL_GPIO_Init+0x2ec>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d019      	beq.n	8005d14 <HAL_GPIO_Init+0x1f4>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a4b      	ldr	r2, [pc, #300]	; (8005e10 <HAL_GPIO_Init+0x2f0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d013      	beq.n	8005d10 <HAL_GPIO_Init+0x1f0>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a4a      	ldr	r2, [pc, #296]	; (8005e14 <HAL_GPIO_Init+0x2f4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00d      	beq.n	8005d0c <HAL_GPIO_Init+0x1ec>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a49      	ldr	r2, [pc, #292]	; (8005e18 <HAL_GPIO_Init+0x2f8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d007      	beq.n	8005d08 <HAL_GPIO_Init+0x1e8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a48      	ldr	r2, [pc, #288]	; (8005e1c <HAL_GPIO_Init+0x2fc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d101      	bne.n	8005d04 <HAL_GPIO_Init+0x1e4>
 8005d00:	2305      	movs	r3, #5
 8005d02:	e00a      	b.n	8005d1a <HAL_GPIO_Init+0x1fa>
 8005d04:	2306      	movs	r3, #6
 8005d06:	e008      	b.n	8005d1a <HAL_GPIO_Init+0x1fa>
 8005d08:	2304      	movs	r3, #4
 8005d0a:	e006      	b.n	8005d1a <HAL_GPIO_Init+0x1fa>
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e004      	b.n	8005d1a <HAL_GPIO_Init+0x1fa>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e002      	b.n	8005d1a <HAL_GPIO_Init+0x1fa>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <HAL_GPIO_Init+0x1fa>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	f002 0203 	and.w	r2, r2, #3
 8005d20:	0092      	lsls	r2, r2, #2
 8005d22:	4093      	lsls	r3, r2
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d2a:	4937      	ldr	r1, [pc, #220]	; (8005e08 <HAL_GPIO_Init+0x2e8>)
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	089b      	lsrs	r3, r3, #2
 8005d30:	3302      	adds	r3, #2
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d38:	4b39      	ldr	r3, [pc, #228]	; (8005e20 <HAL_GPIO_Init+0x300>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	43db      	mvns	r3, r3
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	4013      	ands	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d5c:	4a30      	ldr	r2, [pc, #192]	; (8005e20 <HAL_GPIO_Init+0x300>)
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005d62:	4b2f      	ldr	r3, [pc, #188]	; (8005e20 <HAL_GPIO_Init+0x300>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	43db      	mvns	r3, r3
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d86:	4a26      	ldr	r2, [pc, #152]	; (8005e20 <HAL_GPIO_Init+0x300>)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005d8c:	4b24      	ldr	r3, [pc, #144]	; (8005e20 <HAL_GPIO_Init+0x300>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	43db      	mvns	r3, r3
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005db0:	4a1b      	ldr	r2, [pc, #108]	; (8005e20 <HAL_GPIO_Init+0x300>)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005db6:	4b1a      	ldr	r3, [pc, #104]	; (8005e20 <HAL_GPIO_Init+0x300>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	43db      	mvns	r3, r3
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005dda:	4a11      	ldr	r2, [pc, #68]	; (8005e20 <HAL_GPIO_Init+0x300>)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	3301      	adds	r3, #1
 8005de4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f47f ae9d 	bne.w	8005b30 <HAL_GPIO_Init+0x10>
  }
}
 8005df6:	bf00      	nop
 8005df8:	bf00      	nop
 8005dfa:	371c      	adds	r7, #28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	40021000 	.word	0x40021000
 8005e08:	40010000 	.word	0x40010000
 8005e0c:	48000400 	.word	0x48000400
 8005e10:	48000800 	.word	0x48000800
 8005e14:	48000c00 	.word	0x48000c00
 8005e18:	48001000 	.word	0x48001000
 8005e1c:	48001400 	.word	0x48001400
 8005e20:	40010400 	.word	0x40010400

08005e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	807b      	strh	r3, [r7, #2]
 8005e30:	4613      	mov	r3, r2
 8005e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e34:	787b      	ldrb	r3, [r7, #1]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e3a:	887a      	ldrh	r2, [r7, #2]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e40:	e002      	b.n	8005e48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e42:	887a      	ldrh	r2, [r7, #2]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e08d      	b.n	8005f82 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fd fc06 	bl	800368c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2224      	movs	r2, #36	; 0x24
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ea4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005eb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d107      	bne.n	8005ece <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eca:	609a      	str	r2, [r3, #8]
 8005ecc:	e006      	b.n	8005edc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005eda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d108      	bne.n	8005ef6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ef2:	605a      	str	r2, [r3, #4]
 8005ef4:	e007      	b.n	8005f06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6812      	ldr	r2, [r2, #0]
 8005f10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	69d9      	ldr	r1, [r3, #28]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a1a      	ldr	r2, [r3, #32]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	461a      	mov	r2, r3
 8005f98:	460b      	mov	r3, r1
 8005f9a:	817b      	strh	r3, [r7, #10]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	f040 80fd 	bne.w	80061a8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_I2C_Master_Transmit+0x30>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e0f6      	b.n	80061aa <HAL_I2C_Master_Transmit+0x21e>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fc4:	f7fd ffee 	bl	8003fa4 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	2319      	movs	r3, #25
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 fb72 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e0e1      	b.n	80061aa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2221      	movs	r2, #33	; 0x21
 8005fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	893a      	ldrh	r2, [r7, #8]
 8006006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006012:	b29b      	uxth	r3, r3
 8006014:	2bff      	cmp	r3, #255	; 0xff
 8006016:	d906      	bls.n	8006026 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	22ff      	movs	r2, #255	; 0xff
 800601c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800601e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	e007      	b.n	8006036 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006034:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603a:	2b00      	cmp	r3, #0
 800603c:	d024      	beq.n	8006088 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	781a      	ldrb	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006072:	b2db      	uxtb	r3, r3
 8006074:	3301      	adds	r3, #1
 8006076:	b2da      	uxtb	r2, r3
 8006078:	8979      	ldrh	r1, [r7, #10]
 800607a:	4b4e      	ldr	r3, [pc, #312]	; (80061b4 <HAL_I2C_Master_Transmit+0x228>)
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fd6d 	bl	8006b60 <I2C_TransferConfig>
 8006086:	e066      	b.n	8006156 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608c:	b2da      	uxtb	r2, r3
 800608e:	8979      	ldrh	r1, [r7, #10]
 8006090:	4b48      	ldr	r3, [pc, #288]	; (80061b4 <HAL_I2C_Master_Transmit+0x228>)
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 fd62 	bl	8006b60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800609c:	e05b      	b.n	8006156 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	6a39      	ldr	r1, [r7, #32]
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fb65 	bl	8006772 <I2C_WaitOnTXISFlagUntilTimeout>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e07b      	b.n	80061aa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	781a      	ldrb	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d034      	beq.n	8006156 <HAL_I2C_Master_Transmit+0x1ca>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d130      	bne.n	8006156 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	2200      	movs	r2, #0
 80060fc:	2180      	movs	r1, #128	; 0x80
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fade 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e04d      	b.n	80061aa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006112:	b29b      	uxth	r3, r3
 8006114:	2bff      	cmp	r3, #255	; 0xff
 8006116:	d90e      	bls.n	8006136 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	22ff      	movs	r2, #255	; 0xff
 800611c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006122:	b2da      	uxtb	r2, r3
 8006124:	8979      	ldrh	r1, [r7, #10]
 8006126:	2300      	movs	r3, #0
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fd16 	bl	8006b60 <I2C_TransferConfig>
 8006134:	e00f      	b.n	8006156 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006144:	b2da      	uxtb	r2, r3
 8006146:	8979      	ldrh	r1, [r7, #10]
 8006148:	2300      	movs	r3, #0
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 fd05 	bl	8006b60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d19e      	bne.n	800609e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	6a39      	ldr	r1, [r7, #32]
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 fb4b 	bl	8006800 <I2C_WaitOnSTOPFlagUntilTimeout>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e01a      	b.n	80061aa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2220      	movs	r2, #32
 800617a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6859      	ldr	r1, [r3, #4]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <HAL_I2C_Master_Transmit+0x22c>)
 8006188:	400b      	ands	r3, r1
 800618a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	e000      	b.n	80061aa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80061a8:	2302      	movs	r3, #2
  }
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	80002000 	.word	0x80002000
 80061b8:	fe00e800 	.word	0xfe00e800

080061bc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	607a      	str	r2, [r7, #4]
 80061c6:	461a      	mov	r2, r3
 80061c8:	460b      	mov	r3, r1
 80061ca:	817b      	strh	r3, [r7, #10]
 80061cc:	4613      	mov	r3, r2
 80061ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b20      	cmp	r3, #32
 80061da:	f040 80db 	bne.w	8006394 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_I2C_Master_Receive+0x30>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e0d4      	b.n	8006396 <HAL_I2C_Master_Receive+0x1da>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061f4:	f7fd fed6 	bl	8003fa4 <HAL_GetTick>
 80061f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	2319      	movs	r3, #25
 8006200:	2201      	movs	r2, #1
 8006202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 fa5a 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e0bf      	b.n	8006396 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2222      	movs	r2, #34	; 0x22
 800621a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2210      	movs	r2, #16
 8006222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	893a      	ldrh	r2, [r7, #8]
 8006236:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006242:	b29b      	uxth	r3, r3
 8006244:	2bff      	cmp	r3, #255	; 0xff
 8006246:	d90e      	bls.n	8006266 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	22ff      	movs	r2, #255	; 0xff
 800624c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006252:	b2da      	uxtb	r2, r3
 8006254:	8979      	ldrh	r1, [r7, #10]
 8006256:	4b52      	ldr	r3, [pc, #328]	; (80063a0 <HAL_I2C_Master_Receive+0x1e4>)
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 fc7e 	bl	8006b60 <I2C_TransferConfig>
 8006264:	e06d      	b.n	8006342 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800626a:	b29a      	uxth	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006274:	b2da      	uxtb	r2, r3
 8006276:	8979      	ldrh	r1, [r7, #10]
 8006278:	4b49      	ldr	r3, [pc, #292]	; (80063a0 <HAL_I2C_Master_Receive+0x1e4>)
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fc6d 	bl	8006b60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006286:	e05c      	b.n	8006342 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	6a39      	ldr	r1, [r7, #32]
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 fafb 	bl	8006888 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e07c      	b.n	8006396 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d034      	beq.n	8006342 <HAL_I2C_Master_Receive+0x186>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d130      	bne.n	8006342 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	2200      	movs	r2, #0
 80062e8:	2180      	movs	r1, #128	; 0x80
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 f9e8 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e04d      	b.n	8006396 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2bff      	cmp	r3, #255	; 0xff
 8006302:	d90e      	bls.n	8006322 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	22ff      	movs	r2, #255	; 0xff
 8006308:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630e:	b2da      	uxtb	r2, r3
 8006310:	8979      	ldrh	r1, [r7, #10]
 8006312:	2300      	movs	r3, #0
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 fc20 	bl	8006b60 <I2C_TransferConfig>
 8006320:	e00f      	b.n	8006342 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006330:	b2da      	uxtb	r2, r3
 8006332:	8979      	ldrh	r1, [r7, #10]
 8006334:	2300      	movs	r3, #0
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 fc0f 	bl	8006b60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d19d      	bne.n	8006288 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	6a39      	ldr	r1, [r7, #32]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 fa55 	bl	8006800 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e01a      	b.n	8006396 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2220      	movs	r2, #32
 8006366:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6859      	ldr	r1, [r3, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <HAL_I2C_Master_Receive+0x1e8>)
 8006374:	400b      	ands	r3, r1
 8006376:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	e000      	b.n	8006396 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006394:	2302      	movs	r3, #2
  }
}
 8006396:	4618      	mov	r0, r3
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	80002400 	.word	0x80002400
 80063a4:	fe00e800 	.word	0xfe00e800

080063a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	4608      	mov	r0, r1
 80063b2:	4611      	mov	r1, r2
 80063b4:	461a      	mov	r2, r3
 80063b6:	4603      	mov	r3, r0
 80063b8:	817b      	strh	r3, [r7, #10]
 80063ba:	460b      	mov	r3, r1
 80063bc:	813b      	strh	r3, [r7, #8]
 80063be:	4613      	mov	r3, r2
 80063c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	f040 80f9 	bne.w	80065c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <HAL_I2C_Mem_Write+0x34>
 80063d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d105      	bne.n	80063e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e0ed      	b.n	80065c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_I2C_Mem_Write+0x4e>
 80063f2:	2302      	movs	r3, #2
 80063f4:	e0e6      	b.n	80065c4 <HAL_I2C_Mem_Write+0x21c>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063fe:	f7fd fdd1 	bl	8003fa4 <HAL_GetTick>
 8006402:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	2319      	movs	r3, #25
 800640a:	2201      	movs	r2, #1
 800640c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f955 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e0d1      	b.n	80065c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2221      	movs	r2, #33	; 0x21
 8006424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2240      	movs	r2, #64	; 0x40
 800642c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6a3a      	ldr	r2, [r7, #32]
 800643a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006440:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006448:	88f8      	ldrh	r0, [r7, #6]
 800644a:	893a      	ldrh	r2, [r7, #8]
 800644c:	8979      	ldrh	r1, [r7, #10]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	9301      	str	r3, [sp, #4]
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	4603      	mov	r3, r0
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f8b9 	bl	80065d0 <I2C_RequestMemoryWrite>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d005      	beq.n	8006470 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e0a9      	b.n	80065c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	2bff      	cmp	r3, #255	; 0xff
 8006478:	d90e      	bls.n	8006498 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	22ff      	movs	r2, #255	; 0xff
 800647e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006484:	b2da      	uxtb	r2, r3
 8006486:	8979      	ldrh	r1, [r7, #10]
 8006488:	2300      	movs	r3, #0
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 fb65 	bl	8006b60 <I2C_TransferConfig>
 8006496:	e00f      	b.n	80064b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	8979      	ldrh	r1, [r7, #10]
 80064aa:	2300      	movs	r3, #0
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fb54 	bl	8006b60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 f958 	bl	8006772 <I2C_WaitOnTXISFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e07b      	b.n	80065c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	781a      	ldrb	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d034      	beq.n	8006570 <HAL_I2C_Mem_Write+0x1c8>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650a:	2b00      	cmp	r3, #0
 800650c:	d130      	bne.n	8006570 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	2200      	movs	r2, #0
 8006516:	2180      	movs	r1, #128	; 0x80
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f8d1 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e04d      	b.n	80065c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652c:	b29b      	uxth	r3, r3
 800652e:	2bff      	cmp	r3, #255	; 0xff
 8006530:	d90e      	bls.n	8006550 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	22ff      	movs	r2, #255	; 0xff
 8006536:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653c:	b2da      	uxtb	r2, r3
 800653e:	8979      	ldrh	r1, [r7, #10]
 8006540:	2300      	movs	r3, #0
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fb09 	bl	8006b60 <I2C_TransferConfig>
 800654e:	e00f      	b.n	8006570 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655e:	b2da      	uxtb	r2, r3
 8006560:	8979      	ldrh	r1, [r7, #10]
 8006562:	2300      	movs	r3, #0
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 faf8 	bl	8006b60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d19e      	bne.n	80064b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 f93e 	bl	8006800 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e01a      	b.n	80065c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2220      	movs	r2, #32
 8006594:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6859      	ldr	r1, [r3, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <HAL_I2C_Mem_Write+0x224>)
 80065a2:	400b      	ands	r3, r1
 80065a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	e000      	b.n	80065c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80065c2:	2302      	movs	r3, #2
  }
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	fe00e800 	.word	0xfe00e800

080065d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	4608      	mov	r0, r1
 80065da:	4611      	mov	r1, r2
 80065dc:	461a      	mov	r2, r3
 80065de:	4603      	mov	r3, r0
 80065e0:	817b      	strh	r3, [r7, #10]
 80065e2:	460b      	mov	r3, r1
 80065e4:	813b      	strh	r3, [r7, #8]
 80065e6:	4613      	mov	r3, r2
 80065e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80065ea:	88fb      	ldrh	r3, [r7, #6]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	8979      	ldrh	r1, [r7, #10]
 80065f0:	4b20      	ldr	r3, [pc, #128]	; (8006674 <I2C_RequestMemoryWrite+0xa4>)
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 fab1 	bl	8006b60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	69b9      	ldr	r1, [r7, #24]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f8b5 	bl	8006772 <I2C_WaitOnTXISFlagUntilTimeout>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e02c      	b.n	800666c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006612:	88fb      	ldrh	r3, [r7, #6]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d105      	bne.n	8006624 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006618:	893b      	ldrh	r3, [r7, #8]
 800661a:	b2da      	uxtb	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	629a      	str	r2, [r3, #40]	; 0x28
 8006622:	e015      	b.n	8006650 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006624:	893b      	ldrh	r3, [r7, #8]
 8006626:	0a1b      	lsrs	r3, r3, #8
 8006628:	b29b      	uxth	r3, r3
 800662a:	b2da      	uxtb	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	69b9      	ldr	r1, [r7, #24]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 f89b 	bl	8006772 <I2C_WaitOnTXISFlagUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e012      	b.n	800666c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006646:	893b      	ldrh	r3, [r7, #8]
 8006648:	b2da      	uxtb	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2200      	movs	r2, #0
 8006658:	2180      	movs	r1, #128	; 0x80
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f830 	bl	80066c0 <I2C_WaitOnFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	80002000 	.word	0x80002000

08006678 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b02      	cmp	r3, #2
 800668c:	d103      	bne.n	8006696 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2200      	movs	r2, #0
 8006694:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d007      	beq.n	80066b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0201 	orr.w	r2, r2, #1
 80066b2:	619a      	str	r2, [r3, #24]
  }
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	4613      	mov	r3, r2
 80066ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066d0:	e03b      	b.n	800674a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 f962 	bl	80069a0 <I2C_IsErrorOccurred>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e041      	b.n	800676a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ec:	d02d      	beq.n	800674a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ee:	f7fd fc59 	bl	8003fa4 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d302      	bcc.n	8006704 <I2C_WaitOnFlagUntilTimeout+0x44>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d122      	bne.n	800674a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699a      	ldr	r2, [r3, #24]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	4013      	ands	r3, r2
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	429a      	cmp	r2, r3
 8006712:	bf0c      	ite	eq
 8006714:	2301      	moveq	r3, #1
 8006716:	2300      	movne	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	461a      	mov	r2, r3
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	429a      	cmp	r2, r3
 8006720:	d113      	bne.n	800674a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006726:	f043 0220 	orr.w	r2, r3, #32
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2220      	movs	r2, #32
 8006732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e00f      	b.n	800676a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699a      	ldr	r2, [r3, #24]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	4013      	ands	r3, r2
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	429a      	cmp	r2, r3
 8006758:	bf0c      	ite	eq
 800675a:	2301      	moveq	r3, #1
 800675c:	2300      	movne	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	79fb      	ldrb	r3, [r7, #7]
 8006764:	429a      	cmp	r2, r3
 8006766:	d0b4      	beq.n	80066d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800677e:	e033      	b.n	80067e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 f90b 	bl	80069a0 <I2C_IsErrorOccurred>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e031      	b.n	80067f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d025      	beq.n	80067e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800679c:	f7fd fc02 	bl	8003fa4 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d302      	bcc.n	80067b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d11a      	bne.n	80067e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d013      	beq.n	80067e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c4:	f043 0220 	orr.w	r2, r3, #32
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e007      	b.n	80067f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d1c4      	bne.n	8006780 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800680c:	e02f      	b.n	800686e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 f8c4 	bl	80069a0 <I2C_IsErrorOccurred>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e02d      	b.n	800687e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006822:	f7fd fbbf 	bl	8003fa4 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	429a      	cmp	r2, r3
 8006830:	d302      	bcc.n	8006838 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d11a      	bne.n	800686e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b20      	cmp	r3, #32
 8006844:	d013      	beq.n	800686e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	f043 0220 	orr.w	r2, r3, #32
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2220      	movs	r2, #32
 8006856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e007      	b.n	800687e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	2b20      	cmp	r3, #32
 800687a:	d1c8      	bne.n	800680e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006898:	e071      	b.n	800697e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	68b9      	ldr	r1, [r7, #8]
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 f87e 	bl	80069a0 <I2C_IsErrorOccurred>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b20      	cmp	r3, #32
 80068ba:	d13b      	bne.n	8006934 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d138      	bne.n	8006934 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	d105      	bne.n	80068dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	f003 0310 	and.w	r3, r3, #16
 80068e6:	2b10      	cmp	r3, #16
 80068e8:	d121      	bne.n	800692e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2210      	movs	r2, #16
 80068f0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2204      	movs	r2, #4
 80068f6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2220      	movs	r2, #32
 80068fe:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6859      	ldr	r1, [r3, #4]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	4b24      	ldr	r3, [pc, #144]	; (800699c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800690c:	400b      	ands	r3, r1
 800690e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	75fb      	strb	r3, [r7, #23]
 800692c:	e002      	b.n	8006934 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006934:	f7fd fb36 	bl	8003fa4 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	d302      	bcc.n	800694a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d119      	bne.n	800697e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d116      	bne.n	800697e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f003 0304 	and.w	r3, r3, #4
 800695a:	2b04      	cmp	r3, #4
 800695c:	d00f      	beq.n	800697e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006962:	f043 0220 	orr.w	r2, r3, #32
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2220      	movs	r2, #32
 800696e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b04      	cmp	r3, #4
 800698a:	d002      	beq.n	8006992 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800698c:	7dfb      	ldrb	r3, [r7, #23]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d083      	beq.n	800689a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006992:	7dfb      	ldrb	r3, [r7, #23]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	fe00e800 	.word	0xfe00e800

080069a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08a      	sub	sp, #40	; 0x28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d068      	beq.n	8006a9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2210      	movs	r2, #16
 80069d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069d4:	e049      	b.n	8006a6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069dc:	d045      	beq.n	8006a6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069de:	f7fd fae1 	bl	8003fa4 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d302      	bcc.n	80069f4 <I2C_IsErrorOccurred+0x54>
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d13a      	bne.n	8006a6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a16:	d121      	bne.n	8006a5c <I2C_IsErrorOccurred+0xbc>
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a1e:	d01d      	beq.n	8006a5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006a20:	7cfb      	ldrb	r3, [r7, #19]
 8006a22:	2b20      	cmp	r3, #32
 8006a24:	d01a      	beq.n	8006a5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a36:	f7fd fab5 	bl	8003fa4 <HAL_GetTick>
 8006a3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a3c:	e00e      	b.n	8006a5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a3e:	f7fd fab1 	bl	8003fa4 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b19      	cmp	r3, #25
 8006a4a:	d907      	bls.n	8006a5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	f043 0320 	orr.w	r3, r3, #32
 8006a52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006a5a:	e006      	b.n	8006a6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d1e9      	bne.n	8006a3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	d003      	beq.n	8006a80 <I2C_IsErrorOccurred+0xe0>
 8006a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0aa      	beq.n	80069d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d103      	bne.n	8006a90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	f043 0304 	orr.w	r3, r3, #4
 8006a96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	f043 0301 	orr.w	r3, r3, #1
 8006ab6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ac0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	f043 0308 	orr.w	r3, r3, #8
 8006ad8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ae2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	f043 0302 	orr.w	r3, r3, #2
 8006afa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d01c      	beq.n	8006b4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f7ff fdaf 	bl	8006678 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6859      	ldr	r1, [r3, #4]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	4b0d      	ldr	r3, [pc, #52]	; (8006b5c <I2C_IsErrorOccurred+0x1bc>)
 8006b26:	400b      	ands	r3, r1
 8006b28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	431a      	orrs	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3728      	adds	r7, #40	; 0x28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	fe00e800 	.word	0xfe00e800

08006b60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	607b      	str	r3, [r7, #4]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	817b      	strh	r3, [r7, #10]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b72:	897b      	ldrh	r3, [r7, #10]
 8006b74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b78:	7a7b      	ldrb	r3, [r7, #9]
 8006b7a:	041b      	lsls	r3, r3, #16
 8006b7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	0d5b      	lsrs	r3, r3, #21
 8006b9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b9e:	4b08      	ldr	r3, [pc, #32]	; (8006bc0 <I2C_TransferConfig+0x60>)
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	ea02 0103 	and.w	r1, r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	03ff63ff 	.word	0x03ff63ff

08006bc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	d138      	bne.n	8006c4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e032      	b.n	8006c4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2224      	movs	r2, #36	; 0x24
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0201 	bic.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6819      	ldr	r1, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0201 	orr.w	r2, r2, #1
 8006c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	e000      	b.n	8006c4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c4c:	2302      	movs	r3, #2
  }
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b085      	sub	sp, #20
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d139      	bne.n	8006ce4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e033      	b.n	8006ce6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2224      	movs	r2, #36	; 0x24
 8006c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0201 	bic.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0201 	orr.w	r2, r2, #1
 8006cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e000      	b.n	8006ce6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ce4:	2302      	movs	r3, #2
  }
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e041      	b.n	8006d88 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006d0c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f245 5255 	movw	r2, #21845	; 0x5555
 8006d16:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6852      	ldr	r2, [r2, #4]
 8006d20:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	6892      	ldr	r2, [r2, #8]
 8006d2a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006d2c:	f7fd f93a 	bl	8003fa4 <HAL_GetTick>
 8006d30:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006d32:	e00f      	b.n	8006d54 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006d34:	f7fd f936 	bl	8003fa4 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b31      	cmp	r3, #49	; 0x31
 8006d40:	d908      	bls.n	8006d54 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e019      	b.n	8006d88 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f003 0307 	and.w	r3, r3, #7
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e8      	bne.n	8006d34 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691a      	ldr	r2, [r3, #16]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d005      	beq.n	8006d7c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	68d2      	ldr	r2, [r2, #12]
 8006d78:	611a      	str	r2, [r3, #16]
 8006d7a:	e004      	b.n	8006d86 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006d84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e0c0      	b.n	8006f24 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fc ff08 	bl	8003bcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2203      	movs	r2, #3
 8006dc0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f002 f83d 	bl	8008e48 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]
 8006dd2:	e03e      	b.n	8006e52 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006dd4:	7bfa      	ldrb	r2, [r7, #15]
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	440b      	add	r3, r1
 8006de2:	3311      	adds	r3, #17
 8006de4:	2201      	movs	r2, #1
 8006de6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006de8:	7bfa      	ldrb	r2, [r7, #15]
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	440b      	add	r3, r1
 8006df6:	3310      	adds	r3, #16
 8006df8:	7bfa      	ldrb	r2, [r7, #15]
 8006dfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006dfc:	7bfa      	ldrb	r2, [r7, #15]
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	440b      	add	r3, r1
 8006e0a:	3313      	adds	r3, #19
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006e10:	7bfa      	ldrb	r2, [r7, #15]
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	440b      	add	r3, r1
 8006e1e:	3320      	adds	r3, #32
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006e24:	7bfa      	ldrb	r2, [r7, #15]
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	440b      	add	r3, r1
 8006e32:	3324      	adds	r3, #36	; 0x24
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	4613      	mov	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	00db      	lsls	r3, r3, #3
 8006e46:	440b      	add	r3, r1
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	73fb      	strb	r3, [r7, #15]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	791b      	ldrb	r3, [r3, #4]
 8006e56:	7bfa      	ldrb	r2, [r7, #15]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d3bb      	bcc.n	8006dd4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73fb      	strb	r3, [r7, #15]
 8006e60:	e044      	b.n	8006eec <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e62:	7bfa      	ldrb	r2, [r7, #15]
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	440b      	add	r3, r1
 8006e70:	f203 1351 	addw	r3, r3, #337	; 0x151
 8006e74:	2200      	movs	r2, #0
 8006e76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e78:	7bfa      	ldrb	r2, [r7, #15]
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	440b      	add	r3, r1
 8006e86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e8a:	7bfa      	ldrb	r2, [r7, #15]
 8006e8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e8e:	7bfa      	ldrb	r2, [r7, #15]
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	440b      	add	r3, r1
 8006e9c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006ea4:	7bfa      	ldrb	r2, [r7, #15]
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	440b      	add	r3, r1
 8006eb2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006eba:	7bfa      	ldrb	r2, [r7, #15]
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	00db      	lsls	r3, r3, #3
 8006ec6:	440b      	add	r3, r1
 8006ec8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006ed0:	7bfa      	ldrb	r2, [r7, #15]
 8006ed2:	6879      	ldr	r1, [r7, #4]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	440b      	add	r3, r1
 8006ede:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	73fb      	strb	r3, [r7, #15]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	791b      	ldrb	r3, [r3, #4]
 8006ef0:	7bfa      	ldrb	r2, [r7, #15]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d3b5      	bcc.n	8006e62 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3304      	adds	r3, #4
 8006efe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006f02:	f001 ffbc 	bl	8008e7e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	7a9b      	ldrb	r3, [r3, #10]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d102      	bne.n	8006f22 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f805 	bl	8006f2c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f043 0301 	orr.w	r3, r3, #1
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f043 0302 	orr.w	r3, r3, #2
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d141      	bne.n	8007012 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f8e:	4b4b      	ldr	r3, [pc, #300]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f9a:	d131      	bne.n	8007000 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f9c:	4b47      	ldr	r3, [pc, #284]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fa2:	4a46      	ldr	r2, [pc, #280]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fa8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006fac:	4b43      	ldr	r3, [pc, #268]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006fb4:	4a41      	ldr	r2, [pc, #260]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006fbc:	4b40      	ldr	r3, [pc, #256]	; (80070c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2232      	movs	r2, #50	; 0x32
 8006fc2:	fb02 f303 	mul.w	r3, r2, r3
 8006fc6:	4a3f      	ldr	r2, [pc, #252]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fcc:	0c9b      	lsrs	r3, r3, #18
 8006fce:	3301      	adds	r3, #1
 8006fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fd2:	e002      	b.n	8006fda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fda:	4b38      	ldr	r3, [pc, #224]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe6:	d102      	bne.n	8006fee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1f2      	bne.n	8006fd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006fee:	4b33      	ldr	r3, [pc, #204]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ffa:	d158      	bne.n	80070ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e057      	b.n	80070b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007000:	4b2e      	ldr	r3, [pc, #184]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007006:	4a2d      	ldr	r2, [pc, #180]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800700c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007010:	e04d      	b.n	80070ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007018:	d141      	bne.n	800709e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800701a:	4b28      	ldr	r3, [pc, #160]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007026:	d131      	bne.n	800708c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007028:	4b24      	ldr	r3, [pc, #144]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800702a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800702e:	4a23      	ldr	r2, [pc, #140]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007034:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007038:	4b20      	ldr	r3, [pc, #128]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007040:	4a1e      	ldr	r2, [pc, #120]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007046:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007048:	4b1d      	ldr	r3, [pc, #116]	; (80070c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2232      	movs	r2, #50	; 0x32
 800704e:	fb02 f303 	mul.w	r3, r2, r3
 8007052:	4a1c      	ldr	r2, [pc, #112]	; (80070c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007054:	fba2 2303 	umull	r2, r3, r2, r3
 8007058:	0c9b      	lsrs	r3, r3, #18
 800705a:	3301      	adds	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800705e:	e002      	b.n	8007066 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3b01      	subs	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007066:	4b15      	ldr	r3, [pc, #84]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800706e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007072:	d102      	bne.n	800707a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1f2      	bne.n	8007060 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800707a:	4b10      	ldr	r3, [pc, #64]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007086:	d112      	bne.n	80070ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e011      	b.n	80070b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800708c:	4b0b      	ldr	r3, [pc, #44]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800708e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007092:	4a0a      	ldr	r2, [pc, #40]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007098:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800709c:	e007      	b.n	80070ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800709e:	4b07      	ldr	r3, [pc, #28]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070a6:	4a05      	ldr	r2, [pc, #20]	; (80070bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	40007000 	.word	0x40007000
 80070c0:	20000000 	.word	0x20000000
 80070c4:	431bde83 	.word	0x431bde83

080070c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80070cc:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	4a04      	ldr	r2, [pc, #16]	; (80070e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80070d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070d6:	6093      	str	r3, [r2, #8]
}
 80070d8:	bf00      	nop
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	40007000 	.word	0x40007000

080070e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e2fe      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d075      	beq.n	80071f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007106:	4b97      	ldr	r3, [pc, #604]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 030c 	and.w	r3, r3, #12
 800710e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007110:	4b94      	ldr	r3, [pc, #592]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f003 0303 	and.w	r3, r3, #3
 8007118:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b0c      	cmp	r3, #12
 800711e:	d102      	bne.n	8007126 <HAL_RCC_OscConfig+0x3e>
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2b03      	cmp	r3, #3
 8007124:	d002      	beq.n	800712c <HAL_RCC_OscConfig+0x44>
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b08      	cmp	r3, #8
 800712a:	d10b      	bne.n	8007144 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800712c:	4b8d      	ldr	r3, [pc, #564]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d05b      	beq.n	80071f0 <HAL_RCC_OscConfig+0x108>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d157      	bne.n	80071f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e2d9      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800714c:	d106      	bne.n	800715c <HAL_RCC_OscConfig+0x74>
 800714e:	4b85      	ldr	r3, [pc, #532]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a84      	ldr	r2, [pc, #528]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	e01d      	b.n	8007198 <HAL_RCC_OscConfig+0xb0>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007164:	d10c      	bne.n	8007180 <HAL_RCC_OscConfig+0x98>
 8007166:	4b7f      	ldr	r3, [pc, #508]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a7e      	ldr	r2, [pc, #504]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 800716c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	4b7c      	ldr	r3, [pc, #496]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a7b      	ldr	r2, [pc, #492]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	e00b      	b.n	8007198 <HAL_RCC_OscConfig+0xb0>
 8007180:	4b78      	ldr	r3, [pc, #480]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a77      	ldr	r2, [pc, #476]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	4b75      	ldr	r3, [pc, #468]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a74      	ldr	r2, [pc, #464]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d013      	beq.n	80071c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a0:	f7fc ff00 	bl	8003fa4 <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071a8:	f7fc fefc 	bl	8003fa4 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b64      	cmp	r3, #100	; 0x64
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e29e      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071ba:	4b6a      	ldr	r3, [pc, #424]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0f0      	beq.n	80071a8 <HAL_RCC_OscConfig+0xc0>
 80071c6:	e014      	b.n	80071f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c8:	f7fc feec 	bl	8003fa4 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071d0:	f7fc fee8 	bl	8003fa4 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b64      	cmp	r3, #100	; 0x64
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e28a      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071e2:	4b60      	ldr	r3, [pc, #384]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1f0      	bne.n	80071d0 <HAL_RCC_OscConfig+0xe8>
 80071ee:	e000      	b.n	80071f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d075      	beq.n	80072ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071fe:	4b59      	ldr	r3, [pc, #356]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 030c 	and.w	r3, r3, #12
 8007206:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007208:	4b56      	ldr	r3, [pc, #344]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2b0c      	cmp	r3, #12
 8007216:	d102      	bne.n	800721e <HAL_RCC_OscConfig+0x136>
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d002      	beq.n	8007224 <HAL_RCC_OscConfig+0x13c>
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b04      	cmp	r3, #4
 8007222:	d11f      	bne.n	8007264 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007224:	4b4f      	ldr	r3, [pc, #316]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800722c:	2b00      	cmp	r3, #0
 800722e:	d005      	beq.n	800723c <HAL_RCC_OscConfig+0x154>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e25d      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800723c:	4b49      	ldr	r3, [pc, #292]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	061b      	lsls	r3, r3, #24
 800724a:	4946      	ldr	r1, [pc, #280]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 800724c:	4313      	orrs	r3, r2
 800724e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007250:	4b45      	ldr	r3, [pc, #276]	; (8007368 <HAL_RCC_OscConfig+0x280>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4618      	mov	r0, r3
 8007256:	f7fc fe59 	bl	8003f0c <HAL_InitTick>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d043      	beq.n	80072e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e249      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d023      	beq.n	80072b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800726c:	4b3d      	ldr	r3, [pc, #244]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a3c      	ldr	r2, [pc, #240]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007278:	f7fc fe94 	bl	8003fa4 <HAL_GetTick>
 800727c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800727e:	e008      	b.n	8007292 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007280:	f7fc fe90 	bl	8003fa4 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e232      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007292:	4b34      	ldr	r3, [pc, #208]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0f0      	beq.n	8007280 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800729e:	4b31      	ldr	r3, [pc, #196]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	061b      	lsls	r3, r3, #24
 80072ac:	492d      	ldr	r1, [pc, #180]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	604b      	str	r3, [r1, #4]
 80072b2:	e01a      	b.n	80072ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072b4:	4b2b      	ldr	r3, [pc, #172]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a2a      	ldr	r2, [pc, #168]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 80072ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c0:	f7fc fe70 	bl	8003fa4 <HAL_GetTick>
 80072c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072c6:	e008      	b.n	80072da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072c8:	f7fc fe6c 	bl	8003fa4 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d901      	bls.n	80072da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e20e      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072da:	4b22      	ldr	r3, [pc, #136]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1f0      	bne.n	80072c8 <HAL_RCC_OscConfig+0x1e0>
 80072e6:	e000      	b.n	80072ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d041      	beq.n	800737a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d01c      	beq.n	8007338 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072fe:	4b19      	ldr	r3, [pc, #100]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007304:	4a17      	ldr	r2, [pc, #92]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007306:	f043 0301 	orr.w	r3, r3, #1
 800730a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800730e:	f7fc fe49 	bl	8003fa4 <HAL_GetTick>
 8007312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007314:	e008      	b.n	8007328 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007316:	f7fc fe45 	bl	8003fa4 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d901      	bls.n	8007328 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e1e7      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007328:	4b0e      	ldr	r3, [pc, #56]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 800732a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d0ef      	beq.n	8007316 <HAL_RCC_OscConfig+0x22e>
 8007336:	e020      	b.n	800737a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 800733a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800733e:	4a09      	ldr	r2, [pc, #36]	; (8007364 <HAL_RCC_OscConfig+0x27c>)
 8007340:	f023 0301 	bic.w	r3, r3, #1
 8007344:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007348:	f7fc fe2c 	bl	8003fa4 <HAL_GetTick>
 800734c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800734e:	e00d      	b.n	800736c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007350:	f7fc fe28 	bl	8003fa4 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	2b02      	cmp	r3, #2
 800735c:	d906      	bls.n	800736c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e1ca      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
 8007362:	bf00      	nop
 8007364:	40021000 	.word	0x40021000
 8007368:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800736c:	4b8c      	ldr	r3, [pc, #560]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 800736e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1ea      	bne.n	8007350 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 80a6 	beq.w	80074d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007388:	2300      	movs	r3, #0
 800738a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800738c:	4b84      	ldr	r3, [pc, #528]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 800738e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <HAL_RCC_OscConfig+0x2b4>
 8007398:	2301      	movs	r3, #1
 800739a:	e000      	b.n	800739e <HAL_RCC_OscConfig+0x2b6>
 800739c:	2300      	movs	r3, #0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00d      	beq.n	80073be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073a2:	4b7f      	ldr	r3, [pc, #508]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 80073a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a6:	4a7e      	ldr	r2, [pc, #504]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 80073a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ac:	6593      	str	r3, [r2, #88]	; 0x58
 80073ae:	4b7c      	ldr	r3, [pc, #496]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 80073b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80073ba:	2301      	movs	r3, #1
 80073bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073be:	4b79      	ldr	r3, [pc, #484]	; (80075a4 <HAL_RCC_OscConfig+0x4bc>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d118      	bne.n	80073fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073ca:	4b76      	ldr	r3, [pc, #472]	; (80075a4 <HAL_RCC_OscConfig+0x4bc>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a75      	ldr	r2, [pc, #468]	; (80075a4 <HAL_RCC_OscConfig+0x4bc>)
 80073d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073d6:	f7fc fde5 	bl	8003fa4 <HAL_GetTick>
 80073da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073dc:	e008      	b.n	80073f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073de:	f7fc fde1 	bl	8003fa4 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d901      	bls.n	80073f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e183      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073f0:	4b6c      	ldr	r3, [pc, #432]	; (80075a4 <HAL_RCC_OscConfig+0x4bc>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0f0      	beq.n	80073de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d108      	bne.n	8007416 <HAL_RCC_OscConfig+0x32e>
 8007404:	4b66      	ldr	r3, [pc, #408]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 8007406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740a:	4a65      	ldr	r2, [pc, #404]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 800740c:	f043 0301 	orr.w	r3, r3, #1
 8007410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007414:	e024      	b.n	8007460 <HAL_RCC_OscConfig+0x378>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2b05      	cmp	r3, #5
 800741c:	d110      	bne.n	8007440 <HAL_RCC_OscConfig+0x358>
 800741e:	4b60      	ldr	r3, [pc, #384]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 8007420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007424:	4a5e      	ldr	r2, [pc, #376]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 8007426:	f043 0304 	orr.w	r3, r3, #4
 800742a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800742e:	4b5c      	ldr	r3, [pc, #368]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 8007430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007434:	4a5a      	ldr	r2, [pc, #360]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 8007436:	f043 0301 	orr.w	r3, r3, #1
 800743a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800743e:	e00f      	b.n	8007460 <HAL_RCC_OscConfig+0x378>
 8007440:	4b57      	ldr	r3, [pc, #348]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 8007442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007446:	4a56      	ldr	r2, [pc, #344]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 8007448:	f023 0301 	bic.w	r3, r3, #1
 800744c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007450:	4b53      	ldr	r3, [pc, #332]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 8007452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007456:	4a52      	ldr	r2, [pc, #328]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 8007458:	f023 0304 	bic.w	r3, r3, #4
 800745c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d016      	beq.n	8007496 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007468:	f7fc fd9c 	bl	8003fa4 <HAL_GetTick>
 800746c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800746e:	e00a      	b.n	8007486 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007470:	f7fc fd98 	bl	8003fa4 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	f241 3288 	movw	r2, #5000	; 0x1388
 800747e:	4293      	cmp	r3, r2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e138      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007486:	4b46      	ldr	r3, [pc, #280]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 8007488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0ed      	beq.n	8007470 <HAL_RCC_OscConfig+0x388>
 8007494:	e015      	b.n	80074c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007496:	f7fc fd85 	bl	8003fa4 <HAL_GetTick>
 800749a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800749c:	e00a      	b.n	80074b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800749e:	f7fc fd81 	bl	8003fa4 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e121      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074b4:	4b3a      	ldr	r3, [pc, #232]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1ed      	bne.n	800749e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074c2:	7ffb      	ldrb	r3, [r7, #31]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d105      	bne.n	80074d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074c8:	4b35      	ldr	r3, [pc, #212]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 80074ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074cc:	4a34      	ldr	r2, [pc, #208]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 80074ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d03c      	beq.n	800755a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d01c      	beq.n	8007522 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074e8:	4b2d      	ldr	r3, [pc, #180]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 80074ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074ee:	4a2c      	ldr	r2, [pc, #176]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 80074f0:	f043 0301 	orr.w	r3, r3, #1
 80074f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f8:	f7fc fd54 	bl	8003fa4 <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074fe:	e008      	b.n	8007512 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007500:	f7fc fd50 	bl	8003fa4 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d901      	bls.n	8007512 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e0f2      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007512:	4b23      	ldr	r3, [pc, #140]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 8007514:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d0ef      	beq.n	8007500 <HAL_RCC_OscConfig+0x418>
 8007520:	e01b      	b.n	800755a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007522:	4b1f      	ldr	r3, [pc, #124]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 8007524:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007528:	4a1d      	ldr	r2, [pc, #116]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 800752a:	f023 0301 	bic.w	r3, r3, #1
 800752e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007532:	f7fc fd37 	bl	8003fa4 <HAL_GetTick>
 8007536:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007538:	e008      	b.n	800754c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800753a:	f7fc fd33 	bl	8003fa4 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e0d5      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800754c:	4b14      	ldr	r3, [pc, #80]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 800754e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1ef      	bne.n	800753a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 80c9 	beq.w	80076f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007564:	4b0e      	ldr	r3, [pc, #56]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 030c 	and.w	r3, r3, #12
 800756c:	2b0c      	cmp	r3, #12
 800756e:	f000 8083 	beq.w	8007678 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d15e      	bne.n	8007638 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800757a:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a08      	ldr	r2, [pc, #32]	; (80075a0 <HAL_RCC_OscConfig+0x4b8>)
 8007580:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007586:	f7fc fd0d 	bl	8003fa4 <HAL_GetTick>
 800758a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800758c:	e00c      	b.n	80075a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800758e:	f7fc fd09 	bl	8003fa4 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d905      	bls.n	80075a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e0ab      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
 80075a0:	40021000 	.word	0x40021000
 80075a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075a8:	4b55      	ldr	r3, [pc, #340]	; (8007700 <HAL_RCC_OscConfig+0x618>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1ec      	bne.n	800758e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075b4:	4b52      	ldr	r3, [pc, #328]	; (8007700 <HAL_RCC_OscConfig+0x618>)
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	4b52      	ldr	r3, [pc, #328]	; (8007704 <HAL_RCC_OscConfig+0x61c>)
 80075ba:	4013      	ands	r3, r2
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6a11      	ldr	r1, [r2, #32]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075c4:	3a01      	subs	r2, #1
 80075c6:	0112      	lsls	r2, r2, #4
 80075c8:	4311      	orrs	r1, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80075ce:	0212      	lsls	r2, r2, #8
 80075d0:	4311      	orrs	r1, r2
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80075d6:	0852      	lsrs	r2, r2, #1
 80075d8:	3a01      	subs	r2, #1
 80075da:	0552      	lsls	r2, r2, #21
 80075dc:	4311      	orrs	r1, r2
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80075e2:	0852      	lsrs	r2, r2, #1
 80075e4:	3a01      	subs	r2, #1
 80075e6:	0652      	lsls	r2, r2, #25
 80075e8:	4311      	orrs	r1, r2
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80075ee:	06d2      	lsls	r2, r2, #27
 80075f0:	430a      	orrs	r2, r1
 80075f2:	4943      	ldr	r1, [pc, #268]	; (8007700 <HAL_RCC_OscConfig+0x618>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075f8:	4b41      	ldr	r3, [pc, #260]	; (8007700 <HAL_RCC_OscConfig+0x618>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a40      	ldr	r2, [pc, #256]	; (8007700 <HAL_RCC_OscConfig+0x618>)
 80075fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007602:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007604:	4b3e      	ldr	r3, [pc, #248]	; (8007700 <HAL_RCC_OscConfig+0x618>)
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	4a3d      	ldr	r2, [pc, #244]	; (8007700 <HAL_RCC_OscConfig+0x618>)
 800760a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800760e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007610:	f7fc fcc8 	bl	8003fa4 <HAL_GetTick>
 8007614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007616:	e008      	b.n	800762a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007618:	f7fc fcc4 	bl	8003fa4 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e066      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800762a:	4b35      	ldr	r3, [pc, #212]	; (8007700 <HAL_RCC_OscConfig+0x618>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0f0      	beq.n	8007618 <HAL_RCC_OscConfig+0x530>
 8007636:	e05e      	b.n	80076f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007638:	4b31      	ldr	r3, [pc, #196]	; (8007700 <HAL_RCC_OscConfig+0x618>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a30      	ldr	r2, [pc, #192]	; (8007700 <HAL_RCC_OscConfig+0x618>)
 800763e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007644:	f7fc fcae 	bl	8003fa4 <HAL_GetTick>
 8007648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800764a:	e008      	b.n	800765e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800764c:	f7fc fcaa 	bl	8003fa4 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	2b02      	cmp	r3, #2
 8007658:	d901      	bls.n	800765e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e04c      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800765e:	4b28      	ldr	r3, [pc, #160]	; (8007700 <HAL_RCC_OscConfig+0x618>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1f0      	bne.n	800764c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800766a:	4b25      	ldr	r3, [pc, #148]	; (8007700 <HAL_RCC_OscConfig+0x618>)
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	4924      	ldr	r1, [pc, #144]	; (8007700 <HAL_RCC_OscConfig+0x618>)
 8007670:	4b25      	ldr	r3, [pc, #148]	; (8007708 <HAL_RCC_OscConfig+0x620>)
 8007672:	4013      	ands	r3, r2
 8007674:	60cb      	str	r3, [r1, #12]
 8007676:	e03e      	b.n	80076f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d101      	bne.n	8007684 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e039      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007684:	4b1e      	ldr	r3, [pc, #120]	; (8007700 <HAL_RCC_OscConfig+0x618>)
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f003 0203 	and.w	r2, r3, #3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	429a      	cmp	r2, r3
 8007696:	d12c      	bne.n	80076f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	3b01      	subs	r3, #1
 80076a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d123      	bne.n	80076f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d11b      	bne.n	80076f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d113      	bne.n	80076f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d4:	085b      	lsrs	r3, r3, #1
 80076d6:	3b01      	subs	r3, #1
 80076d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076da:	429a      	cmp	r2, r3
 80076dc:	d109      	bne.n	80076f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e8:	085b      	lsrs	r3, r3, #1
 80076ea:	3b01      	subs	r3, #1
 80076ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d001      	beq.n	80076f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e000      	b.n	80076f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3720      	adds	r7, #32
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	40021000 	.word	0x40021000
 8007704:	019f800c 	.word	0x019f800c
 8007708:	feeefffc 	.word	0xfeeefffc

0800770c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e11e      	b.n	8007962 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007724:	4b91      	ldr	r3, [pc, #580]	; (800796c <HAL_RCC_ClockConfig+0x260>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d910      	bls.n	8007754 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007732:	4b8e      	ldr	r3, [pc, #568]	; (800796c <HAL_RCC_ClockConfig+0x260>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f023 020f 	bic.w	r2, r3, #15
 800773a:	498c      	ldr	r1, [pc, #560]	; (800796c <HAL_RCC_ClockConfig+0x260>)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	4313      	orrs	r3, r2
 8007740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007742:	4b8a      	ldr	r3, [pc, #552]	; (800796c <HAL_RCC_ClockConfig+0x260>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d001      	beq.n	8007754 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e106      	b.n	8007962 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b00      	cmp	r3, #0
 800775e:	d073      	beq.n	8007848 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	2b03      	cmp	r3, #3
 8007766:	d129      	bne.n	80077bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007768:	4b81      	ldr	r3, [pc, #516]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e0f4      	b.n	8007962 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007778:	f000 f99e 	bl	8007ab8 <RCC_GetSysClockFreqFromPLLSource>
 800777c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	4a7c      	ldr	r2, [pc, #496]	; (8007974 <HAL_RCC_ClockConfig+0x268>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d93f      	bls.n	8007806 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007786:	4b7a      	ldr	r3, [pc, #488]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800779a:	2b00      	cmp	r3, #0
 800779c:	d033      	beq.n	8007806 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d12f      	bne.n	8007806 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80077a6:	4b72      	ldr	r3, [pc, #456]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077ae:	4a70      	ldr	r2, [pc, #448]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 80077b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80077b6:	2380      	movs	r3, #128	; 0x80
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	e024      	b.n	8007806 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d107      	bne.n	80077d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077c4:	4b6a      	ldr	r3, [pc, #424]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d109      	bne.n	80077e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e0c6      	b.n	8007962 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077d4:	4b66      	ldr	r3, [pc, #408]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e0be      	b.n	8007962 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80077e4:	f000 f8ce 	bl	8007984 <HAL_RCC_GetSysClockFreq>
 80077e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	4a61      	ldr	r2, [pc, #388]	; (8007974 <HAL_RCC_ClockConfig+0x268>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d909      	bls.n	8007806 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80077f2:	4b5f      	ldr	r3, [pc, #380]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077fa:	4a5d      	ldr	r2, [pc, #372]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 80077fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007800:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007802:	2380      	movs	r3, #128	; 0x80
 8007804:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007806:	4b5a      	ldr	r3, [pc, #360]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f023 0203 	bic.w	r2, r3, #3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	4957      	ldr	r1, [pc, #348]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 8007814:	4313      	orrs	r3, r2
 8007816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007818:	f7fc fbc4 	bl	8003fa4 <HAL_GetTick>
 800781c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800781e:	e00a      	b.n	8007836 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007820:	f7fc fbc0 	bl	8003fa4 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	f241 3288 	movw	r2, #5000	; 0x1388
 800782e:	4293      	cmp	r3, r2
 8007830:	d901      	bls.n	8007836 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e095      	b.n	8007962 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007836:	4b4e      	ldr	r3, [pc, #312]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 020c 	and.w	r2, r3, #12
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	429a      	cmp	r2, r3
 8007846:	d1eb      	bne.n	8007820 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d023      	beq.n	800789c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007860:	4b43      	ldr	r3, [pc, #268]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	4a42      	ldr	r2, [pc, #264]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 8007866:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800786a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0308 	and.w	r3, r3, #8
 8007874:	2b00      	cmp	r3, #0
 8007876:	d007      	beq.n	8007888 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007878:	4b3d      	ldr	r3, [pc, #244]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007880:	4a3b      	ldr	r2, [pc, #236]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 8007882:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007886:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007888:	4b39      	ldr	r3, [pc, #228]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	4936      	ldr	r1, [pc, #216]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 8007896:	4313      	orrs	r3, r2
 8007898:	608b      	str	r3, [r1, #8]
 800789a:	e008      	b.n	80078ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2b80      	cmp	r3, #128	; 0x80
 80078a0:	d105      	bne.n	80078ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80078a2:	4b33      	ldr	r3, [pc, #204]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	4a32      	ldr	r2, [pc, #200]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 80078a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078ae:	4b2f      	ldr	r3, [pc, #188]	; (800796c <HAL_RCC_ClockConfig+0x260>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 030f 	and.w	r3, r3, #15
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d21d      	bcs.n	80078f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078bc:	4b2b      	ldr	r3, [pc, #172]	; (800796c <HAL_RCC_ClockConfig+0x260>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f023 020f 	bic.w	r2, r3, #15
 80078c4:	4929      	ldr	r1, [pc, #164]	; (800796c <HAL_RCC_ClockConfig+0x260>)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80078cc:	f7fc fb6a 	bl	8003fa4 <HAL_GetTick>
 80078d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078d2:	e00a      	b.n	80078ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078d4:	f7fc fb66 	bl	8003fa4 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d901      	bls.n	80078ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e03b      	b.n	8007962 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ea:	4b20      	ldr	r3, [pc, #128]	; (800796c <HAL_RCC_ClockConfig+0x260>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 030f 	and.w	r3, r3, #15
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d1ed      	bne.n	80078d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d008      	beq.n	8007916 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007904:	4b1a      	ldr	r3, [pc, #104]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	4917      	ldr	r1, [pc, #92]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 8007912:	4313      	orrs	r3, r2
 8007914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0308 	and.w	r3, r3, #8
 800791e:	2b00      	cmp	r3, #0
 8007920:	d009      	beq.n	8007936 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007922:	4b13      	ldr	r3, [pc, #76]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	490f      	ldr	r1, [pc, #60]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 8007932:	4313      	orrs	r3, r2
 8007934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007936:	f000 f825 	bl	8007984 <HAL_RCC_GetSysClockFreq>
 800793a:	4602      	mov	r2, r0
 800793c:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <HAL_RCC_ClockConfig+0x264>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	091b      	lsrs	r3, r3, #4
 8007942:	f003 030f 	and.w	r3, r3, #15
 8007946:	490c      	ldr	r1, [pc, #48]	; (8007978 <HAL_RCC_ClockConfig+0x26c>)
 8007948:	5ccb      	ldrb	r3, [r1, r3]
 800794a:	f003 031f 	and.w	r3, r3, #31
 800794e:	fa22 f303 	lsr.w	r3, r2, r3
 8007952:	4a0a      	ldr	r2, [pc, #40]	; (800797c <HAL_RCC_ClockConfig+0x270>)
 8007954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007956:	4b0a      	ldr	r3, [pc, #40]	; (8007980 <HAL_RCC_ClockConfig+0x274>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4618      	mov	r0, r3
 800795c:	f7fc fad6 	bl	8003f0c <HAL_InitTick>
 8007960:	4603      	mov	r3, r0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	40022000 	.word	0x40022000
 8007970:	40021000 	.word	0x40021000
 8007974:	04c4b400 	.word	0x04c4b400
 8007978:	0800b850 	.word	0x0800b850
 800797c:	20000000 	.word	0x20000000
 8007980:	20000004 	.word	0x20000004

08007984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007984:	b480      	push	{r7}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800798a:	4b2c      	ldr	r3, [pc, #176]	; (8007a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f003 030c 	and.w	r3, r3, #12
 8007992:	2b04      	cmp	r3, #4
 8007994:	d102      	bne.n	800799c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007996:	4b2a      	ldr	r3, [pc, #168]	; (8007a40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	e047      	b.n	8007a2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800799c:	4b27      	ldr	r3, [pc, #156]	; (8007a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f003 030c 	and.w	r3, r3, #12
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d102      	bne.n	80079ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80079a8:	4b26      	ldr	r3, [pc, #152]	; (8007a44 <HAL_RCC_GetSysClockFreq+0xc0>)
 80079aa:	613b      	str	r3, [r7, #16]
 80079ac:	e03e      	b.n	8007a2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80079ae:	4b23      	ldr	r3, [pc, #140]	; (8007a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f003 030c 	and.w	r3, r3, #12
 80079b6:	2b0c      	cmp	r3, #12
 80079b8:	d136      	bne.n	8007a28 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079ba:	4b20      	ldr	r3, [pc, #128]	; (8007a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079c4:	4b1d      	ldr	r3, [pc, #116]	; (8007a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	091b      	lsrs	r3, r3, #4
 80079ca:	f003 030f 	and.w	r3, r3, #15
 80079ce:	3301      	adds	r3, #1
 80079d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d10c      	bne.n	80079f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079d8:	4a1a      	ldr	r2, [pc, #104]	; (8007a44 <HAL_RCC_GetSysClockFreq+0xc0>)
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e0:	4a16      	ldr	r2, [pc, #88]	; (8007a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80079e2:	68d2      	ldr	r2, [r2, #12]
 80079e4:	0a12      	lsrs	r2, r2, #8
 80079e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079ea:	fb02 f303 	mul.w	r3, r2, r3
 80079ee:	617b      	str	r3, [r7, #20]
      break;
 80079f0:	e00c      	b.n	8007a0c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079f2:	4a13      	ldr	r2, [pc, #76]	; (8007a40 <HAL_RCC_GetSysClockFreq+0xbc>)
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079fa:	4a10      	ldr	r2, [pc, #64]	; (8007a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80079fc:	68d2      	ldr	r2, [r2, #12]
 80079fe:	0a12      	lsrs	r2, r2, #8
 8007a00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007a04:	fb02 f303 	mul.w	r3, r2, r3
 8007a08:	617b      	str	r3, [r7, #20]
      break;
 8007a0a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a0c:	4b0b      	ldr	r3, [pc, #44]	; (8007a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	0e5b      	lsrs	r3, r3, #25
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	3301      	adds	r3, #1
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a24:	613b      	str	r3, [r7, #16]
 8007a26:	e001      	b.n	8007a2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007a2c:	693b      	ldr	r3, [r7, #16]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	371c      	adds	r7, #28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	40021000 	.word	0x40021000
 8007a40:	00f42400 	.word	0x00f42400
 8007a44:	007a1200 	.word	0x007a1200

08007a48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a4c:	4b03      	ldr	r3, [pc, #12]	; (8007a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	20000000 	.word	0x20000000

08007a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a64:	f7ff fff0 	bl	8007a48 <HAL_RCC_GetHCLKFreq>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	0a1b      	lsrs	r3, r3, #8
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	4904      	ldr	r1, [pc, #16]	; (8007a88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a76:	5ccb      	ldrb	r3, [r1, r3]
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	40021000 	.word	0x40021000
 8007a88:	0800b860 	.word	0x0800b860

08007a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a90:	f7ff ffda 	bl	8007a48 <HAL_RCC_GetHCLKFreq>
 8007a94:	4602      	mov	r2, r0
 8007a96:	4b06      	ldr	r3, [pc, #24]	; (8007ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	0adb      	lsrs	r3, r3, #11
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	4904      	ldr	r1, [pc, #16]	; (8007ab4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007aa2:	5ccb      	ldrb	r3, [r1, r3]
 8007aa4:	f003 031f 	and.w	r3, r3, #31
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	40021000 	.word	0x40021000
 8007ab4:	0800b860 	.word	0x0800b860

08007ab8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007abe:	4b1e      	ldr	r3, [pc, #120]	; (8007b38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ac8:	4b1b      	ldr	r3, [pc, #108]	; (8007b38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	091b      	lsrs	r3, r3, #4
 8007ace:	f003 030f 	and.w	r3, r3, #15
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d10c      	bne.n	8007af6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007adc:	4a17      	ldr	r2, [pc, #92]	; (8007b3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae4:	4a14      	ldr	r2, [pc, #80]	; (8007b38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ae6:	68d2      	ldr	r2, [r2, #12]
 8007ae8:	0a12      	lsrs	r2, r2, #8
 8007aea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007aee:	fb02 f303 	mul.w	r3, r2, r3
 8007af2:	617b      	str	r3, [r7, #20]
    break;
 8007af4:	e00c      	b.n	8007b10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007af6:	4a12      	ldr	r2, [pc, #72]	; (8007b40 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afe:	4a0e      	ldr	r2, [pc, #56]	; (8007b38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b00:	68d2      	ldr	r2, [r2, #12]
 8007b02:	0a12      	lsrs	r2, r2, #8
 8007b04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007b08:	fb02 f303 	mul.w	r3, r2, r3
 8007b0c:	617b      	str	r3, [r7, #20]
    break;
 8007b0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b10:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	0e5b      	lsrs	r3, r3, #25
 8007b16:	f003 0303 	and.w	r3, r3, #3
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007b2a:	687b      	ldr	r3, [r7, #4]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	40021000 	.word	0x40021000
 8007b3c:	007a1200 	.word	0x007a1200
 8007b40:	00f42400 	.word	0x00f42400

08007b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b50:	2300      	movs	r3, #0
 8007b52:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8098 	beq.w	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b62:	2300      	movs	r3, #0
 8007b64:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b66:	4b43      	ldr	r3, [pc, #268]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10d      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b72:	4b40      	ldr	r3, [pc, #256]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b76:	4a3f      	ldr	r2, [pc, #252]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8007b7e:	4b3d      	ldr	r3, [pc, #244]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b86:	60bb      	str	r3, [r7, #8]
 8007b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b8e:	4b3a      	ldr	r3, [pc, #232]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a39      	ldr	r2, [pc, #228]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b9a:	f7fc fa03 	bl	8003fa4 <HAL_GetTick>
 8007b9e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ba0:	e009      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ba2:	f7fc f9ff 	bl	8003fa4 <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d902      	bls.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	74fb      	strb	r3, [r7, #19]
        break;
 8007bb4:	e005      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bb6:	4b30      	ldr	r3, [pc, #192]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0ef      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007bc2:	7cfb      	ldrb	r3, [r7, #19]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d159      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007bc8:	4b2a      	ldr	r3, [pc, #168]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bd2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d01e      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d019      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007be4:	4b23      	ldr	r3, [pc, #140]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bf0:	4b20      	ldr	r3, [pc, #128]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf6:	4a1f      	ldr	r2, [pc, #124]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c00:	4b1c      	ldr	r3, [pc, #112]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c06:	4a1b      	ldr	r2, [pc, #108]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c10:	4a18      	ldr	r2, [pc, #96]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d016      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c22:	f7fc f9bf 	bl	8003fa4 <HAL_GetTick>
 8007c26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c28:	e00b      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c2a:	f7fc f9bb 	bl	8003fa4 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d902      	bls.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	74fb      	strb	r3, [r7, #19]
            break;
 8007c40:	e006      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c42:	4b0c      	ldr	r3, [pc, #48]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d0ec      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007c50:	7cfb      	ldrb	r3, [r7, #19]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10b      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c56:	4b07      	ldr	r3, [pc, #28]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c64:	4903      	ldr	r1, [pc, #12]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007c6c:	e008      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c6e:	7cfb      	ldrb	r3, [r7, #19]
 8007c70:	74bb      	strb	r3, [r7, #18]
 8007c72:	e005      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007c74:	40021000 	.word	0x40021000
 8007c78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7c:	7cfb      	ldrb	r3, [r7, #19]
 8007c7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c80:	7c7b      	ldrb	r3, [r7, #17]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d105      	bne.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c86:	4ba7      	ldr	r3, [pc, #668]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8a:	4aa6      	ldr	r2, [pc, #664]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c9e:	4ba1      	ldr	r3, [pc, #644]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca4:	f023 0203 	bic.w	r2, r3, #3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	499d      	ldr	r1, [pc, #628]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0302 	and.w	r3, r3, #2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cc0:	4b98      	ldr	r3, [pc, #608]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc6:	f023 020c 	bic.w	r2, r3, #12
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	4995      	ldr	r1, [pc, #596]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0304 	and.w	r3, r3, #4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ce2:	4b90      	ldr	r3, [pc, #576]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ce8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	498c      	ldr	r1, [pc, #560]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0308 	and.w	r3, r3, #8
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00a      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d04:	4b87      	ldr	r3, [pc, #540]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	4984      	ldr	r1, [pc, #528]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0310 	and.w	r3, r3, #16
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d26:	4b7f      	ldr	r3, [pc, #508]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	497b      	ldr	r1, [pc, #492]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d48:	4b76      	ldr	r3, [pc, #472]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	4973      	ldr	r1, [pc, #460]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d6a:	4b6e      	ldr	r3, [pc, #440]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	496a      	ldr	r1, [pc, #424]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d8c:	4b65      	ldr	r3, [pc, #404]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	4962      	ldr	r1, [pc, #392]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007dae:	4b5d      	ldr	r3, [pc, #372]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	4959      	ldr	r1, [pc, #356]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007dd0:	4b54      	ldr	r3, [pc, #336]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dd6:	f023 0203 	bic.w	r2, r3, #3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	4951      	ldr	r1, [pc, #324]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007df2:	4b4c      	ldr	r3, [pc, #304]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	4948      	ldr	r1, [pc, #288]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d015      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e14:	4b43      	ldr	r3, [pc, #268]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	4940      	ldr	r1, [pc, #256]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e32:	d105      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e34:	4b3b      	ldr	r3, [pc, #236]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	4a3a      	ldr	r2, [pc, #232]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d015      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e4c:	4b35      	ldr	r3, [pc, #212]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5a:	4932      	ldr	r1, [pc, #200]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e6a:	d105      	bne.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e6c:	4b2d      	ldr	r3, [pc, #180]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	4a2c      	ldr	r2, [pc, #176]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e76:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d015      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e84:	4b27      	ldr	r3, [pc, #156]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	4924      	ldr	r1, [pc, #144]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ea2:	d105      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ea4:	4b1f      	ldr	r3, [pc, #124]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	4a1e      	ldr	r2, [pc, #120]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007eae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d015      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ebc:	4b19      	ldr	r3, [pc, #100]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eca:	4916      	ldr	r1, [pc, #88]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eda:	d105      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007edc:	4b11      	ldr	r3, [pc, #68]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	4a10      	ldr	r2, [pc, #64]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ee6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d019      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ef4:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	4908      	ldr	r1, [pc, #32]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f12:	d109      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f14:	4b03      	ldr	r3, [pc, #12]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	4a02      	ldr	r2, [pc, #8]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f1e:	60d3      	str	r3, [r2, #12]
 8007f20:	e002      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007f22:	bf00      	nop
 8007f24:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d015      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007f34:	4b29      	ldr	r3, [pc, #164]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f42:	4926      	ldr	r1, [pc, #152]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f44:	4313      	orrs	r3, r2
 8007f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f52:	d105      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f54:	4b21      	ldr	r3, [pc, #132]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	4a20      	ldr	r2, [pc, #128]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f5e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d015      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007f6c:	4b1b      	ldr	r3, [pc, #108]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f72:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f7a:	4918      	ldr	r1, [pc, #96]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8a:	d105      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f8c:	4b13      	ldr	r3, [pc, #76]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	4a12      	ldr	r2, [pc, #72]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f96:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d015      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007fa4:	4b0d      	ldr	r3, [pc, #52]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007faa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fb2:	490a      	ldr	r1, [pc, #40]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fc2:	d105      	bne.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fc4:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	4a04      	ldr	r2, [pc, #16]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007fd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3718      	adds	r7, #24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	40021000 	.word	0x40021000

08007fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e09d      	b.n	800812e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d108      	bne.n	800800c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008002:	d009      	beq.n	8008018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	61da      	str	r2, [r3, #28]
 800800a:	e005      	b.n	8008018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d106      	bne.n	8008038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7fb fd54 	bl	8003ae0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800804e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008058:	d902      	bls.n	8008060 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]
 800805e:	e002      	b.n	8008066 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008064:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800806e:	d007      	beq.n	8008080 <HAL_SPI_Init+0xa0>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008078:	d002      	beq.n	8008080 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008090:	431a      	orrs	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	431a      	orrs	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	431a      	orrs	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080ae:	431a      	orrs	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c2:	ea42 0103 	orr.w	r1, r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	0c1b      	lsrs	r3, r3, #16
 80080dc:	f003 0204 	and.w	r2, r3, #4
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	f003 0310 	and.w	r3, r3, #16
 80080e8:	431a      	orrs	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ee:	f003 0308 	and.w	r3, r3, #8
 80080f2:	431a      	orrs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80080fc:	ea42 0103 	orr.w	r1, r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	69da      	ldr	r2, [r3, #28]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800811c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
	...

08008138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800813c:	b08c      	sub	sp, #48	; 0x30
 800813e:	af00      	add	r7, sp, #0
 8008140:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	431a      	orrs	r2, r3
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	431a      	orrs	r2, r3
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	69db      	ldr	r3, [r3, #28]
 800815c:	4313      	orrs	r3, r2
 800815e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	4baa      	ldr	r3, [pc, #680]	; (8008410 <UART_SetConfig+0x2d8>)
 8008168:	4013      	ands	r3, r2
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	6812      	ldr	r2, [r2, #0]
 800816e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008170:	430b      	orrs	r3, r1
 8008172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a9f      	ldr	r2, [pc, #636]	; (8008414 <UART_SetConfig+0x2dc>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d004      	beq.n	80081a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081a0:	4313      	orrs	r3, r2
 80081a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80081ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	6812      	ldr	r2, [r2, #0]
 80081b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081b8:	430b      	orrs	r3, r1
 80081ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c2:	f023 010f 	bic.w	r1, r3, #15
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a90      	ldr	r2, [pc, #576]	; (8008418 <UART_SetConfig+0x2e0>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d125      	bne.n	8008228 <UART_SetConfig+0xf0>
 80081dc:	4b8f      	ldr	r3, [pc, #572]	; (800841c <UART_SetConfig+0x2e4>)
 80081de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e2:	f003 0303 	and.w	r3, r3, #3
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d81a      	bhi.n	8008220 <UART_SetConfig+0xe8>
 80081ea:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <UART_SetConfig+0xb8>)
 80081ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f0:	08008201 	.word	0x08008201
 80081f4:	08008211 	.word	0x08008211
 80081f8:	08008209 	.word	0x08008209
 80081fc:	08008219 	.word	0x08008219
 8008200:	2301      	movs	r3, #1
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008206:	e116      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008208:	2302      	movs	r3, #2
 800820a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800820e:	e112      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008210:	2304      	movs	r3, #4
 8008212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008216:	e10e      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008218:	2308      	movs	r3, #8
 800821a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800821e:	e10a      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008220:	2310      	movs	r3, #16
 8008222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008226:	e106      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a7c      	ldr	r2, [pc, #496]	; (8008420 <UART_SetConfig+0x2e8>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d138      	bne.n	80082a4 <UART_SetConfig+0x16c>
 8008232:	4b7a      	ldr	r3, [pc, #488]	; (800841c <UART_SetConfig+0x2e4>)
 8008234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008238:	f003 030c 	and.w	r3, r3, #12
 800823c:	2b0c      	cmp	r3, #12
 800823e:	d82d      	bhi.n	800829c <UART_SetConfig+0x164>
 8008240:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <UART_SetConfig+0x110>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	0800827d 	.word	0x0800827d
 800824c:	0800829d 	.word	0x0800829d
 8008250:	0800829d 	.word	0x0800829d
 8008254:	0800829d 	.word	0x0800829d
 8008258:	0800828d 	.word	0x0800828d
 800825c:	0800829d 	.word	0x0800829d
 8008260:	0800829d 	.word	0x0800829d
 8008264:	0800829d 	.word	0x0800829d
 8008268:	08008285 	.word	0x08008285
 800826c:	0800829d 	.word	0x0800829d
 8008270:	0800829d 	.word	0x0800829d
 8008274:	0800829d 	.word	0x0800829d
 8008278:	08008295 	.word	0x08008295
 800827c:	2300      	movs	r3, #0
 800827e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008282:	e0d8      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008284:	2302      	movs	r3, #2
 8008286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800828a:	e0d4      	b.n	8008436 <UART_SetConfig+0x2fe>
 800828c:	2304      	movs	r3, #4
 800828e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008292:	e0d0      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008294:	2308      	movs	r3, #8
 8008296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800829a:	e0cc      	b.n	8008436 <UART_SetConfig+0x2fe>
 800829c:	2310      	movs	r3, #16
 800829e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082a2:	e0c8      	b.n	8008436 <UART_SetConfig+0x2fe>
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a5e      	ldr	r2, [pc, #376]	; (8008424 <UART_SetConfig+0x2ec>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d125      	bne.n	80082fa <UART_SetConfig+0x1c2>
 80082ae:	4b5b      	ldr	r3, [pc, #364]	; (800841c <UART_SetConfig+0x2e4>)
 80082b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80082b8:	2b30      	cmp	r3, #48	; 0x30
 80082ba:	d016      	beq.n	80082ea <UART_SetConfig+0x1b2>
 80082bc:	2b30      	cmp	r3, #48	; 0x30
 80082be:	d818      	bhi.n	80082f2 <UART_SetConfig+0x1ba>
 80082c0:	2b20      	cmp	r3, #32
 80082c2:	d00a      	beq.n	80082da <UART_SetConfig+0x1a2>
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d814      	bhi.n	80082f2 <UART_SetConfig+0x1ba>
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <UART_SetConfig+0x19a>
 80082cc:	2b10      	cmp	r3, #16
 80082ce:	d008      	beq.n	80082e2 <UART_SetConfig+0x1aa>
 80082d0:	e00f      	b.n	80082f2 <UART_SetConfig+0x1ba>
 80082d2:	2300      	movs	r3, #0
 80082d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d8:	e0ad      	b.n	8008436 <UART_SetConfig+0x2fe>
 80082da:	2302      	movs	r3, #2
 80082dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e0:	e0a9      	b.n	8008436 <UART_SetConfig+0x2fe>
 80082e2:	2304      	movs	r3, #4
 80082e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e8:	e0a5      	b.n	8008436 <UART_SetConfig+0x2fe>
 80082ea:	2308      	movs	r3, #8
 80082ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f0:	e0a1      	b.n	8008436 <UART_SetConfig+0x2fe>
 80082f2:	2310      	movs	r3, #16
 80082f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f8:	e09d      	b.n	8008436 <UART_SetConfig+0x2fe>
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a4a      	ldr	r2, [pc, #296]	; (8008428 <UART_SetConfig+0x2f0>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d125      	bne.n	8008350 <UART_SetConfig+0x218>
 8008304:	4b45      	ldr	r3, [pc, #276]	; (800841c <UART_SetConfig+0x2e4>)
 8008306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800830a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800830e:	2bc0      	cmp	r3, #192	; 0xc0
 8008310:	d016      	beq.n	8008340 <UART_SetConfig+0x208>
 8008312:	2bc0      	cmp	r3, #192	; 0xc0
 8008314:	d818      	bhi.n	8008348 <UART_SetConfig+0x210>
 8008316:	2b80      	cmp	r3, #128	; 0x80
 8008318:	d00a      	beq.n	8008330 <UART_SetConfig+0x1f8>
 800831a:	2b80      	cmp	r3, #128	; 0x80
 800831c:	d814      	bhi.n	8008348 <UART_SetConfig+0x210>
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <UART_SetConfig+0x1f0>
 8008322:	2b40      	cmp	r3, #64	; 0x40
 8008324:	d008      	beq.n	8008338 <UART_SetConfig+0x200>
 8008326:	e00f      	b.n	8008348 <UART_SetConfig+0x210>
 8008328:	2300      	movs	r3, #0
 800832a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800832e:	e082      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008330:	2302      	movs	r3, #2
 8008332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008336:	e07e      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008338:	2304      	movs	r3, #4
 800833a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800833e:	e07a      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008340:	2308      	movs	r3, #8
 8008342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008346:	e076      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008348:	2310      	movs	r3, #16
 800834a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800834e:	e072      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a35      	ldr	r2, [pc, #212]	; (800842c <UART_SetConfig+0x2f4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d12a      	bne.n	80083b0 <UART_SetConfig+0x278>
 800835a:	4b30      	ldr	r3, [pc, #192]	; (800841c <UART_SetConfig+0x2e4>)
 800835c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008368:	d01a      	beq.n	80083a0 <UART_SetConfig+0x268>
 800836a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800836e:	d81b      	bhi.n	80083a8 <UART_SetConfig+0x270>
 8008370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008374:	d00c      	beq.n	8008390 <UART_SetConfig+0x258>
 8008376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800837a:	d815      	bhi.n	80083a8 <UART_SetConfig+0x270>
 800837c:	2b00      	cmp	r3, #0
 800837e:	d003      	beq.n	8008388 <UART_SetConfig+0x250>
 8008380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008384:	d008      	beq.n	8008398 <UART_SetConfig+0x260>
 8008386:	e00f      	b.n	80083a8 <UART_SetConfig+0x270>
 8008388:	2300      	movs	r3, #0
 800838a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800838e:	e052      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008390:	2302      	movs	r3, #2
 8008392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008396:	e04e      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008398:	2304      	movs	r3, #4
 800839a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800839e:	e04a      	b.n	8008436 <UART_SetConfig+0x2fe>
 80083a0:	2308      	movs	r3, #8
 80083a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083a6:	e046      	b.n	8008436 <UART_SetConfig+0x2fe>
 80083a8:	2310      	movs	r3, #16
 80083aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ae:	e042      	b.n	8008436 <UART_SetConfig+0x2fe>
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a17      	ldr	r2, [pc, #92]	; (8008414 <UART_SetConfig+0x2dc>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d13a      	bne.n	8008430 <UART_SetConfig+0x2f8>
 80083ba:	4b18      	ldr	r3, [pc, #96]	; (800841c <UART_SetConfig+0x2e4>)
 80083bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083c8:	d01a      	beq.n	8008400 <UART_SetConfig+0x2c8>
 80083ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083ce:	d81b      	bhi.n	8008408 <UART_SetConfig+0x2d0>
 80083d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083d4:	d00c      	beq.n	80083f0 <UART_SetConfig+0x2b8>
 80083d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083da:	d815      	bhi.n	8008408 <UART_SetConfig+0x2d0>
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <UART_SetConfig+0x2b0>
 80083e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083e4:	d008      	beq.n	80083f8 <UART_SetConfig+0x2c0>
 80083e6:	e00f      	b.n	8008408 <UART_SetConfig+0x2d0>
 80083e8:	2300      	movs	r3, #0
 80083ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ee:	e022      	b.n	8008436 <UART_SetConfig+0x2fe>
 80083f0:	2302      	movs	r3, #2
 80083f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f6:	e01e      	b.n	8008436 <UART_SetConfig+0x2fe>
 80083f8:	2304      	movs	r3, #4
 80083fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fe:	e01a      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008400:	2308      	movs	r3, #8
 8008402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008406:	e016      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008408:	2310      	movs	r3, #16
 800840a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800840e:	e012      	b.n	8008436 <UART_SetConfig+0x2fe>
 8008410:	cfff69f3 	.word	0xcfff69f3
 8008414:	40008000 	.word	0x40008000
 8008418:	40013800 	.word	0x40013800
 800841c:	40021000 	.word	0x40021000
 8008420:	40004400 	.word	0x40004400
 8008424:	40004800 	.word	0x40004800
 8008428:	40004c00 	.word	0x40004c00
 800842c:	40005000 	.word	0x40005000
 8008430:	2310      	movs	r3, #16
 8008432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4aae      	ldr	r2, [pc, #696]	; (80086f4 <UART_SetConfig+0x5bc>)
 800843c:	4293      	cmp	r3, r2
 800843e:	f040 8097 	bne.w	8008570 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008442:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008446:	2b08      	cmp	r3, #8
 8008448:	d823      	bhi.n	8008492 <UART_SetConfig+0x35a>
 800844a:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <UART_SetConfig+0x318>)
 800844c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008450:	08008475 	.word	0x08008475
 8008454:	08008493 	.word	0x08008493
 8008458:	0800847d 	.word	0x0800847d
 800845c:	08008493 	.word	0x08008493
 8008460:	08008483 	.word	0x08008483
 8008464:	08008493 	.word	0x08008493
 8008468:	08008493 	.word	0x08008493
 800846c:	08008493 	.word	0x08008493
 8008470:	0800848b 	.word	0x0800848b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008474:	f7ff faf4 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 8008478:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800847a:	e010      	b.n	800849e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800847c:	4b9e      	ldr	r3, [pc, #632]	; (80086f8 <UART_SetConfig+0x5c0>)
 800847e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008480:	e00d      	b.n	800849e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008482:	f7ff fa7f 	bl	8007984 <HAL_RCC_GetSysClockFreq>
 8008486:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008488:	e009      	b.n	800849e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800848a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008490:	e005      	b.n	800849e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800849c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 8130 	beq.w	8008706 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084aa:	4a94      	ldr	r2, [pc, #592]	; (80086fc <UART_SetConfig+0x5c4>)
 80084ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084b0:	461a      	mov	r2, r3
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80084b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	4613      	mov	r3, r2
 80084c0:	005b      	lsls	r3, r3, #1
 80084c2:	4413      	add	r3, r2
 80084c4:	69ba      	ldr	r2, [r7, #24]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d305      	bcc.n	80084d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d903      	bls.n	80084de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084dc:	e113      	b.n	8008706 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	2200      	movs	r2, #0
 80084e2:	60bb      	str	r3, [r7, #8]
 80084e4:	60fa      	str	r2, [r7, #12]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	4a84      	ldr	r2, [pc, #528]	; (80086fc <UART_SetConfig+0x5c4>)
 80084ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	2200      	movs	r2, #0
 80084f4:	603b      	str	r3, [r7, #0]
 80084f6:	607a      	str	r2, [r7, #4]
 80084f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008500:	f7f8 fb7a 	bl	8000bf8 <__aeabi_uldivmod>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	4610      	mov	r0, r2
 800850a:	4619      	mov	r1, r3
 800850c:	f04f 0200 	mov.w	r2, #0
 8008510:	f04f 0300 	mov.w	r3, #0
 8008514:	020b      	lsls	r3, r1, #8
 8008516:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800851a:	0202      	lsls	r2, r0, #8
 800851c:	6979      	ldr	r1, [r7, #20]
 800851e:	6849      	ldr	r1, [r1, #4]
 8008520:	0849      	lsrs	r1, r1, #1
 8008522:	2000      	movs	r0, #0
 8008524:	460c      	mov	r4, r1
 8008526:	4605      	mov	r5, r0
 8008528:	eb12 0804 	adds.w	r8, r2, r4
 800852c:	eb43 0905 	adc.w	r9, r3, r5
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	469a      	mov	sl, r3
 8008538:	4693      	mov	fp, r2
 800853a:	4652      	mov	r2, sl
 800853c:	465b      	mov	r3, fp
 800853e:	4640      	mov	r0, r8
 8008540:	4649      	mov	r1, r9
 8008542:	f7f8 fb59 	bl	8000bf8 <__aeabi_uldivmod>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	4613      	mov	r3, r2
 800854c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008554:	d308      	bcc.n	8008568 <UART_SetConfig+0x430>
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800855c:	d204      	bcs.n	8008568 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6a3a      	ldr	r2, [r7, #32]
 8008564:	60da      	str	r2, [r3, #12]
 8008566:	e0ce      	b.n	8008706 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800856e:	e0ca      	b.n	8008706 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008578:	d166      	bne.n	8008648 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800857a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800857e:	2b08      	cmp	r3, #8
 8008580:	d827      	bhi.n	80085d2 <UART_SetConfig+0x49a>
 8008582:	a201      	add	r2, pc, #4	; (adr r2, 8008588 <UART_SetConfig+0x450>)
 8008584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008588:	080085ad 	.word	0x080085ad
 800858c:	080085b5 	.word	0x080085b5
 8008590:	080085bd 	.word	0x080085bd
 8008594:	080085d3 	.word	0x080085d3
 8008598:	080085c3 	.word	0x080085c3
 800859c:	080085d3 	.word	0x080085d3
 80085a0:	080085d3 	.word	0x080085d3
 80085a4:	080085d3 	.word	0x080085d3
 80085a8:	080085cb 	.word	0x080085cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085ac:	f7ff fa58 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 80085b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085b2:	e014      	b.n	80085de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085b4:	f7ff fa6a 	bl	8007a8c <HAL_RCC_GetPCLK2Freq>
 80085b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085ba:	e010      	b.n	80085de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085bc:	4b4e      	ldr	r3, [pc, #312]	; (80086f8 <UART_SetConfig+0x5c0>)
 80085be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085c0:	e00d      	b.n	80085de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085c2:	f7ff f9df 	bl	8007984 <HAL_RCC_GetSysClockFreq>
 80085c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085c8:	e009      	b.n	80085de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085d0:	e005      	b.n	80085de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 8090 	beq.w	8008706 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ea:	4a44      	ldr	r2, [pc, #272]	; (80086fc <UART_SetConfig+0x5c4>)
 80085ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085f0:	461a      	mov	r2, r3
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80085f8:	005a      	lsls	r2, r3, #1
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	085b      	lsrs	r3, r3, #1
 8008600:	441a      	add	r2, r3
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	fbb2 f3f3 	udiv	r3, r2, r3
 800860a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	2b0f      	cmp	r3, #15
 8008610:	d916      	bls.n	8008640 <UART_SetConfig+0x508>
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008618:	d212      	bcs.n	8008640 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	b29b      	uxth	r3, r3
 800861e:	f023 030f 	bic.w	r3, r3, #15
 8008622:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	085b      	lsrs	r3, r3, #1
 8008628:	b29b      	uxth	r3, r3
 800862a:	f003 0307 	and.w	r3, r3, #7
 800862e:	b29a      	uxth	r2, r3
 8008630:	8bfb      	ldrh	r3, [r7, #30]
 8008632:	4313      	orrs	r3, r2
 8008634:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	8bfa      	ldrh	r2, [r7, #30]
 800863c:	60da      	str	r2, [r3, #12]
 800863e:	e062      	b.n	8008706 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008646:	e05e      	b.n	8008706 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008648:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800864c:	2b08      	cmp	r3, #8
 800864e:	d828      	bhi.n	80086a2 <UART_SetConfig+0x56a>
 8008650:	a201      	add	r2, pc, #4	; (adr r2, 8008658 <UART_SetConfig+0x520>)
 8008652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008656:	bf00      	nop
 8008658:	0800867d 	.word	0x0800867d
 800865c:	08008685 	.word	0x08008685
 8008660:	0800868d 	.word	0x0800868d
 8008664:	080086a3 	.word	0x080086a3
 8008668:	08008693 	.word	0x08008693
 800866c:	080086a3 	.word	0x080086a3
 8008670:	080086a3 	.word	0x080086a3
 8008674:	080086a3 	.word	0x080086a3
 8008678:	0800869b 	.word	0x0800869b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800867c:	f7ff f9f0 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 8008680:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008682:	e014      	b.n	80086ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008684:	f7ff fa02 	bl	8007a8c <HAL_RCC_GetPCLK2Freq>
 8008688:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800868a:	e010      	b.n	80086ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800868c:	4b1a      	ldr	r3, [pc, #104]	; (80086f8 <UART_SetConfig+0x5c0>)
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008690:	e00d      	b.n	80086ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008692:	f7ff f977 	bl	8007984 <HAL_RCC_GetSysClockFreq>
 8008696:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008698:	e009      	b.n	80086ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800869a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800869e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086a0:	e005      	b.n	80086ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086ac:	bf00      	nop
    }

    if (pclk != 0U)
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d028      	beq.n	8008706 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	4a10      	ldr	r2, [pc, #64]	; (80086fc <UART_SetConfig+0x5c4>)
 80086ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086be:	461a      	mov	r2, r3
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	085b      	lsrs	r3, r3, #1
 80086cc:	441a      	add	r2, r3
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086d8:	6a3b      	ldr	r3, [r7, #32]
 80086da:	2b0f      	cmp	r3, #15
 80086dc:	d910      	bls.n	8008700 <UART_SetConfig+0x5c8>
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e4:	d20c      	bcs.n	8008700 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	60da      	str	r2, [r3, #12]
 80086f0:	e009      	b.n	8008706 <UART_SetConfig+0x5ce>
 80086f2:	bf00      	nop
 80086f4:	40008000 	.word	0x40008000
 80086f8:	00f42400 	.word	0x00f42400
 80086fc:	0800b868 	.word	0x0800b868
      }
      else
      {
        ret = HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2201      	movs	r2, #1
 800870a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2201      	movs	r2, #1
 8008712:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2200      	movs	r2, #0
 800871a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2200      	movs	r2, #0
 8008720:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008722:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008726:	4618      	mov	r0, r3
 8008728:	3730      	adds	r7, #48	; 0x30
 800872a:	46bd      	mov	sp, r7
 800872c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873c:	f003 0308 	and.w	r3, r3, #8
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00a      	beq.n	800875a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00a      	beq.n	800877c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	430a      	orrs	r2, r1
 800877a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008780:	f003 0302 	and.w	r3, r3, #2
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00a      	beq.n	800879e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00a      	beq.n	80087c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	430a      	orrs	r2, r1
 80087be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c4:	f003 0310 	and.w	r3, r3, #16
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00a      	beq.n	80087e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	430a      	orrs	r2, r1
 8008802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880c:	2b00      	cmp	r3, #0
 800880e:	d01a      	beq.n	8008846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800882e:	d10a      	bne.n	8008846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00a      	beq.n	8008868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	430a      	orrs	r2, r1
 8008866:	605a      	str	r2, [r3, #4]
  }
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b098      	sub	sp, #96	; 0x60
 8008878:	af02      	add	r7, sp, #8
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008884:	f7fb fb8e 	bl	8003fa4 <HAL_GetTick>
 8008888:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0308 	and.w	r3, r3, #8
 8008894:	2b08      	cmp	r3, #8
 8008896:	d12f      	bne.n	80088f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a0:	2200      	movs	r2, #0
 80088a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f88e 	bl	80089c8 <UART_WaitOnFlagUntilTimeout>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d022      	beq.n	80088f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088c6:	653b      	str	r3, [r7, #80]	; 0x50
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088d0:	647b      	str	r3, [r7, #68]	; 0x44
 80088d2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e6      	bne.n	80088b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2220      	movs	r2, #32
 80088e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e063      	b.n	80089c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0304 	and.w	r3, r3, #4
 8008902:	2b04      	cmp	r3, #4
 8008904:	d149      	bne.n	800899a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008906:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800890e:	2200      	movs	r2, #0
 8008910:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f857 	bl	80089c8 <UART_WaitOnFlagUntilTimeout>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d03c      	beq.n	800899a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	623b      	str	r3, [r7, #32]
   return(result);
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800893e:	633b      	str	r3, [r7, #48]	; 0x30
 8008940:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e6      	bne.n	8008920 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3308      	adds	r3, #8
 8008958:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	60fb      	str	r3, [r7, #12]
   return(result);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f023 0301 	bic.w	r3, r3, #1
 8008968:	64bb      	str	r3, [r7, #72]	; 0x48
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3308      	adds	r3, #8
 8008970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008972:	61fa      	str	r2, [r7, #28]
 8008974:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008976:	69b9      	ldr	r1, [r7, #24]
 8008978:	69fa      	ldr	r2, [r7, #28]
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	617b      	str	r3, [r7, #20]
   return(result);
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1e5      	bne.n	8008952 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2220      	movs	r2, #32
 800898a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e012      	b.n	80089c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2220      	movs	r2, #32
 800899e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3758      	adds	r7, #88	; 0x58
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	4613      	mov	r3, r2
 80089d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089d8:	e04f      	b.n	8008a7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e0:	d04b      	beq.n	8008a7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089e2:	f7fb fadf 	bl	8003fa4 <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d302      	bcc.n	80089f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e04e      	b.n	8008a9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0304 	and.w	r3, r3, #4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d037      	beq.n	8008a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b80      	cmp	r3, #128	; 0x80
 8008a0e:	d034      	beq.n	8008a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b40      	cmp	r3, #64	; 0x40
 8008a14:	d031      	beq.n	8008a7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	f003 0308 	and.w	r3, r3, #8
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d110      	bne.n	8008a46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2208      	movs	r2, #8
 8008a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 f838 	bl	8008aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2208      	movs	r2, #8
 8008a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e029      	b.n	8008a9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69db      	ldr	r3, [r3, #28]
 8008a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a54:	d111      	bne.n	8008a7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 f81e 	bl	8008aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e00f      	b.n	8008a9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69da      	ldr	r2, [r3, #28]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	4013      	ands	r3, r2
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	bf0c      	ite	eq
 8008a8a:	2301      	moveq	r3, #1
 8008a8c:	2300      	movne	r3, #0
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d0a0      	beq.n	80089da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b095      	sub	sp, #84	; 0x54
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8008aca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e6      	bne.n	8008aaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008af2:	f023 0301 	bic.w	r3, r3, #1
 8008af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e3      	bne.n	8008adc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d118      	bne.n	8008b4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	e853 3f00 	ldrex	r3, [r3]
 8008b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f023 0310 	bic.w	r3, r3, #16
 8008b30:	647b      	str	r3, [r7, #68]	; 0x44
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b3a:	61bb      	str	r3, [r7, #24]
 8008b3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3e:	6979      	ldr	r1, [r7, #20]
 8008b40:	69ba      	ldr	r2, [r7, #24]
 8008b42:	e841 2300 	strex	r3, r2, [r1]
 8008b46:	613b      	str	r3, [r7, #16]
   return(result);
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1e6      	bne.n	8008b1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008b62:	bf00      	nop
 8008b64:	3754      	adds	r7, #84	; 0x54
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b086      	sub	sp, #24
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	607a      	str	r2, [r7, #4]
 8008b7a:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e058      	b.n	8008c38 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d106      	bne.n	8008b9e <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f7fa ff2b 	bl	80039f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2224      	movs	r2, #36	; 0x24
 8008ba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f022 0201 	bic.w	r2, r2, #1
 8008bb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d002      	beq.n	8008bc4 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f7ff fdb6 	bl	8008730 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7ff fab7 	bl	8008138 <UART_SetConfig>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d101      	bne.n	8008bd4 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e031      	b.n	8008c38 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689a      	ldr	r2, [r3, #8]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008be2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	055b      	lsls	r3, r3, #21
 8008bfc:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	041b      	lsls	r3, r3, #16
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8008c12:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	6812      	ldr	r2, [r2, #0]
 8008c1a:	6979      	ldr	r1, [r7, #20]
 8008c1c:	430b      	orrs	r3, r1
 8008c1e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f042 0201 	orr.w	r2, r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f7ff fe1f 	bl	8008874 <UART_CheckIdleState>
 8008c36:	4603      	mov	r3, r0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d101      	bne.n	8008c56 <HAL_UARTEx_DisableFifoMode+0x16>
 8008c52:	2302      	movs	r3, #2
 8008c54:	e027      	b.n	8008ca6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2224      	movs	r2, #36	; 0x24
 8008c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f022 0201 	bic.w	r2, r2, #1
 8008c7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2220      	movs	r2, #32
 8008c98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d101      	bne.n	8008cca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	e02d      	b.n	8008d26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2224      	movs	r2, #36	; 0x24
 8008cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0201 	bic.w	r2, r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f850 	bl	8008dac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2220      	movs	r2, #32
 8008d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d101      	bne.n	8008d46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d42:	2302      	movs	r3, #2
 8008d44:	e02d      	b.n	8008da2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2224      	movs	r2, #36	; 0x24
 8008d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f022 0201 	bic.w	r2, r2, #1
 8008d6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f812 	bl	8008dac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
	...

08008dac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d108      	bne.n	8008dce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008dcc:	e031      	b.n	8008e32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008dce:	2308      	movs	r3, #8
 8008dd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008dd2:	2308      	movs	r3, #8
 8008dd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	0e5b      	lsrs	r3, r3, #25
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	0f5b      	lsrs	r3, r3, #29
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	f003 0307 	and.w	r3, r3, #7
 8008df4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	7b3a      	ldrb	r2, [r7, #12]
 8008dfa:	4911      	ldr	r1, [pc, #68]	; (8008e40 <UARTEx_SetNbDataToProcess+0x94>)
 8008dfc:	5c8a      	ldrb	r2, [r1, r2]
 8008dfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e02:	7b3a      	ldrb	r2, [r7, #12]
 8008e04:	490f      	ldr	r1, [pc, #60]	; (8008e44 <UARTEx_SetNbDataToProcess+0x98>)
 8008e06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e08:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
 8008e16:	7b7a      	ldrb	r2, [r7, #13]
 8008e18:	4909      	ldr	r1, [pc, #36]	; (8008e40 <UARTEx_SetNbDataToProcess+0x94>)
 8008e1a:	5c8a      	ldrb	r2, [r1, r2]
 8008e1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e20:	7b7a      	ldrb	r2, [r7, #13]
 8008e22:	4908      	ldr	r1, [pc, #32]	; (8008e44 <UARTEx_SetNbDataToProcess+0x98>)
 8008e24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e26:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e32:	bf00      	nop
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	0800b880 	.word	0x0800b880
 8008e44:	0800b888 	.word	0x0800b888

08008e48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008e50:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008e54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	43db      	mvns	r3, r3
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	4013      	ands	r3, r2
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b085      	sub	sp, #20
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	1d3b      	adds	r3, r7, #4
 8008e88:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
	...

08008ebc <malloc>:
 8008ebc:	4b02      	ldr	r3, [pc, #8]	; (8008ec8 <malloc+0xc>)
 8008ebe:	4601      	mov	r1, r0
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	f000 b823 	b.w	8008f0c <_malloc_r>
 8008ec6:	bf00      	nop
 8008ec8:	20000064 	.word	0x20000064

08008ecc <sbrk_aligned>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	4e0e      	ldr	r6, [pc, #56]	; (8008f08 <sbrk_aligned+0x3c>)
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	6831      	ldr	r1, [r6, #0]
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	b911      	cbnz	r1, 8008ede <sbrk_aligned+0x12>
 8008ed8:	f000 fe50 	bl	8009b7c <_sbrk_r>
 8008edc:	6030      	str	r0, [r6, #0]
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f000 fe4b 	bl	8009b7c <_sbrk_r>
 8008ee6:	1c43      	adds	r3, r0, #1
 8008ee8:	d00a      	beq.n	8008f00 <sbrk_aligned+0x34>
 8008eea:	1cc4      	adds	r4, r0, #3
 8008eec:	f024 0403 	bic.w	r4, r4, #3
 8008ef0:	42a0      	cmp	r0, r4
 8008ef2:	d007      	beq.n	8008f04 <sbrk_aligned+0x38>
 8008ef4:	1a21      	subs	r1, r4, r0
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f000 fe40 	bl	8009b7c <_sbrk_r>
 8008efc:	3001      	adds	r0, #1
 8008efe:	d101      	bne.n	8008f04 <sbrk_aligned+0x38>
 8008f00:	f04f 34ff 	mov.w	r4, #4294967295
 8008f04:	4620      	mov	r0, r4
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	20000b84 	.word	0x20000b84

08008f0c <_malloc_r>:
 8008f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f10:	1ccd      	adds	r5, r1, #3
 8008f12:	f025 0503 	bic.w	r5, r5, #3
 8008f16:	3508      	adds	r5, #8
 8008f18:	2d0c      	cmp	r5, #12
 8008f1a:	bf38      	it	cc
 8008f1c:	250c      	movcc	r5, #12
 8008f1e:	2d00      	cmp	r5, #0
 8008f20:	4607      	mov	r7, r0
 8008f22:	db01      	blt.n	8008f28 <_malloc_r+0x1c>
 8008f24:	42a9      	cmp	r1, r5
 8008f26:	d905      	bls.n	8008f34 <_malloc_r+0x28>
 8008f28:	230c      	movs	r3, #12
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	2600      	movs	r6, #0
 8008f2e:	4630      	mov	r0, r6
 8008f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009008 <_malloc_r+0xfc>
 8008f38:	f000 f868 	bl	800900c <__malloc_lock>
 8008f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f40:	461c      	mov	r4, r3
 8008f42:	bb5c      	cbnz	r4, 8008f9c <_malloc_r+0x90>
 8008f44:	4629      	mov	r1, r5
 8008f46:	4638      	mov	r0, r7
 8008f48:	f7ff ffc0 	bl	8008ecc <sbrk_aligned>
 8008f4c:	1c43      	adds	r3, r0, #1
 8008f4e:	4604      	mov	r4, r0
 8008f50:	d155      	bne.n	8008ffe <_malloc_r+0xf2>
 8008f52:	f8d8 4000 	ldr.w	r4, [r8]
 8008f56:	4626      	mov	r6, r4
 8008f58:	2e00      	cmp	r6, #0
 8008f5a:	d145      	bne.n	8008fe8 <_malloc_r+0xdc>
 8008f5c:	2c00      	cmp	r4, #0
 8008f5e:	d048      	beq.n	8008ff2 <_malloc_r+0xe6>
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	4631      	mov	r1, r6
 8008f64:	4638      	mov	r0, r7
 8008f66:	eb04 0903 	add.w	r9, r4, r3
 8008f6a:	f000 fe07 	bl	8009b7c <_sbrk_r>
 8008f6e:	4581      	cmp	r9, r0
 8008f70:	d13f      	bne.n	8008ff2 <_malloc_r+0xe6>
 8008f72:	6821      	ldr	r1, [r4, #0]
 8008f74:	1a6d      	subs	r5, r5, r1
 8008f76:	4629      	mov	r1, r5
 8008f78:	4638      	mov	r0, r7
 8008f7a:	f7ff ffa7 	bl	8008ecc <sbrk_aligned>
 8008f7e:	3001      	adds	r0, #1
 8008f80:	d037      	beq.n	8008ff2 <_malloc_r+0xe6>
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	442b      	add	r3, r5
 8008f86:	6023      	str	r3, [r4, #0]
 8008f88:	f8d8 3000 	ldr.w	r3, [r8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d038      	beq.n	8009002 <_malloc_r+0xf6>
 8008f90:	685a      	ldr	r2, [r3, #4]
 8008f92:	42a2      	cmp	r2, r4
 8008f94:	d12b      	bne.n	8008fee <_malloc_r+0xe2>
 8008f96:	2200      	movs	r2, #0
 8008f98:	605a      	str	r2, [r3, #4]
 8008f9a:	e00f      	b.n	8008fbc <_malloc_r+0xb0>
 8008f9c:	6822      	ldr	r2, [r4, #0]
 8008f9e:	1b52      	subs	r2, r2, r5
 8008fa0:	d41f      	bmi.n	8008fe2 <_malloc_r+0xd6>
 8008fa2:	2a0b      	cmp	r2, #11
 8008fa4:	d917      	bls.n	8008fd6 <_malloc_r+0xca>
 8008fa6:	1961      	adds	r1, r4, r5
 8008fa8:	42a3      	cmp	r3, r4
 8008faa:	6025      	str	r5, [r4, #0]
 8008fac:	bf18      	it	ne
 8008fae:	6059      	strne	r1, [r3, #4]
 8008fb0:	6863      	ldr	r3, [r4, #4]
 8008fb2:	bf08      	it	eq
 8008fb4:	f8c8 1000 	streq.w	r1, [r8]
 8008fb8:	5162      	str	r2, [r4, r5]
 8008fba:	604b      	str	r3, [r1, #4]
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	f104 060b 	add.w	r6, r4, #11
 8008fc2:	f000 f829 	bl	8009018 <__malloc_unlock>
 8008fc6:	f026 0607 	bic.w	r6, r6, #7
 8008fca:	1d23      	adds	r3, r4, #4
 8008fcc:	1af2      	subs	r2, r6, r3
 8008fce:	d0ae      	beq.n	8008f2e <_malloc_r+0x22>
 8008fd0:	1b9b      	subs	r3, r3, r6
 8008fd2:	50a3      	str	r3, [r4, r2]
 8008fd4:	e7ab      	b.n	8008f2e <_malloc_r+0x22>
 8008fd6:	42a3      	cmp	r3, r4
 8008fd8:	6862      	ldr	r2, [r4, #4]
 8008fda:	d1dd      	bne.n	8008f98 <_malloc_r+0x8c>
 8008fdc:	f8c8 2000 	str.w	r2, [r8]
 8008fe0:	e7ec      	b.n	8008fbc <_malloc_r+0xb0>
 8008fe2:	4623      	mov	r3, r4
 8008fe4:	6864      	ldr	r4, [r4, #4]
 8008fe6:	e7ac      	b.n	8008f42 <_malloc_r+0x36>
 8008fe8:	4634      	mov	r4, r6
 8008fea:	6876      	ldr	r6, [r6, #4]
 8008fec:	e7b4      	b.n	8008f58 <_malloc_r+0x4c>
 8008fee:	4613      	mov	r3, r2
 8008ff0:	e7cc      	b.n	8008f8c <_malloc_r+0x80>
 8008ff2:	230c      	movs	r3, #12
 8008ff4:	603b      	str	r3, [r7, #0]
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	f000 f80e 	bl	8009018 <__malloc_unlock>
 8008ffc:	e797      	b.n	8008f2e <_malloc_r+0x22>
 8008ffe:	6025      	str	r5, [r4, #0]
 8009000:	e7dc      	b.n	8008fbc <_malloc_r+0xb0>
 8009002:	605b      	str	r3, [r3, #4]
 8009004:	deff      	udf	#255	; 0xff
 8009006:	bf00      	nop
 8009008:	20000b80 	.word	0x20000b80

0800900c <__malloc_lock>:
 800900c:	4801      	ldr	r0, [pc, #4]	; (8009014 <__malloc_lock+0x8>)
 800900e:	f000 be02 	b.w	8009c16 <__retarget_lock_acquire_recursive>
 8009012:	bf00      	nop
 8009014:	20000cc8 	.word	0x20000cc8

08009018 <__malloc_unlock>:
 8009018:	4801      	ldr	r0, [pc, #4]	; (8009020 <__malloc_unlock+0x8>)
 800901a:	f000 bdfd 	b.w	8009c18 <__retarget_lock_release_recursive>
 800901e:	bf00      	nop
 8009020:	20000cc8 	.word	0x20000cc8

08009024 <__cvt>:
 8009024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009028:	ec55 4b10 	vmov	r4, r5, d0
 800902c:	2d00      	cmp	r5, #0
 800902e:	460e      	mov	r6, r1
 8009030:	4619      	mov	r1, r3
 8009032:	462b      	mov	r3, r5
 8009034:	bfbb      	ittet	lt
 8009036:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800903a:	461d      	movlt	r5, r3
 800903c:	2300      	movge	r3, #0
 800903e:	232d      	movlt	r3, #45	; 0x2d
 8009040:	700b      	strb	r3, [r1, #0]
 8009042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009044:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009048:	4691      	mov	r9, r2
 800904a:	f023 0820 	bic.w	r8, r3, #32
 800904e:	bfbc      	itt	lt
 8009050:	4622      	movlt	r2, r4
 8009052:	4614      	movlt	r4, r2
 8009054:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009058:	d005      	beq.n	8009066 <__cvt+0x42>
 800905a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800905e:	d100      	bne.n	8009062 <__cvt+0x3e>
 8009060:	3601      	adds	r6, #1
 8009062:	2102      	movs	r1, #2
 8009064:	e000      	b.n	8009068 <__cvt+0x44>
 8009066:	2103      	movs	r1, #3
 8009068:	ab03      	add	r3, sp, #12
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	ab02      	add	r3, sp, #8
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	ec45 4b10 	vmov	d0, r4, r5
 8009074:	4653      	mov	r3, sl
 8009076:	4632      	mov	r2, r6
 8009078:	f000 fe66 	bl	8009d48 <_dtoa_r>
 800907c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009080:	4607      	mov	r7, r0
 8009082:	d102      	bne.n	800908a <__cvt+0x66>
 8009084:	f019 0f01 	tst.w	r9, #1
 8009088:	d022      	beq.n	80090d0 <__cvt+0xac>
 800908a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800908e:	eb07 0906 	add.w	r9, r7, r6
 8009092:	d110      	bne.n	80090b6 <__cvt+0x92>
 8009094:	783b      	ldrb	r3, [r7, #0]
 8009096:	2b30      	cmp	r3, #48	; 0x30
 8009098:	d10a      	bne.n	80090b0 <__cvt+0x8c>
 800909a:	2200      	movs	r2, #0
 800909c:	2300      	movs	r3, #0
 800909e:	4620      	mov	r0, r4
 80090a0:	4629      	mov	r1, r5
 80090a2:	f7f7 fd39 	bl	8000b18 <__aeabi_dcmpeq>
 80090a6:	b918      	cbnz	r0, 80090b0 <__cvt+0x8c>
 80090a8:	f1c6 0601 	rsb	r6, r6, #1
 80090ac:	f8ca 6000 	str.w	r6, [sl]
 80090b0:	f8da 3000 	ldr.w	r3, [sl]
 80090b4:	4499      	add	r9, r3
 80090b6:	2200      	movs	r2, #0
 80090b8:	2300      	movs	r3, #0
 80090ba:	4620      	mov	r0, r4
 80090bc:	4629      	mov	r1, r5
 80090be:	f7f7 fd2b 	bl	8000b18 <__aeabi_dcmpeq>
 80090c2:	b108      	cbz	r0, 80090c8 <__cvt+0xa4>
 80090c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80090c8:	2230      	movs	r2, #48	; 0x30
 80090ca:	9b03      	ldr	r3, [sp, #12]
 80090cc:	454b      	cmp	r3, r9
 80090ce:	d307      	bcc.n	80090e0 <__cvt+0xbc>
 80090d0:	9b03      	ldr	r3, [sp, #12]
 80090d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090d4:	1bdb      	subs	r3, r3, r7
 80090d6:	4638      	mov	r0, r7
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	b004      	add	sp, #16
 80090dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e0:	1c59      	adds	r1, r3, #1
 80090e2:	9103      	str	r1, [sp, #12]
 80090e4:	701a      	strb	r2, [r3, #0]
 80090e6:	e7f0      	b.n	80090ca <__cvt+0xa6>

080090e8 <__exponent>:
 80090e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ea:	4603      	mov	r3, r0
 80090ec:	2900      	cmp	r1, #0
 80090ee:	bfb8      	it	lt
 80090f0:	4249      	neglt	r1, r1
 80090f2:	f803 2b02 	strb.w	r2, [r3], #2
 80090f6:	bfb4      	ite	lt
 80090f8:	222d      	movlt	r2, #45	; 0x2d
 80090fa:	222b      	movge	r2, #43	; 0x2b
 80090fc:	2909      	cmp	r1, #9
 80090fe:	7042      	strb	r2, [r0, #1]
 8009100:	dd2a      	ble.n	8009158 <__exponent+0x70>
 8009102:	f10d 0207 	add.w	r2, sp, #7
 8009106:	4617      	mov	r7, r2
 8009108:	260a      	movs	r6, #10
 800910a:	4694      	mov	ip, r2
 800910c:	fb91 f5f6 	sdiv	r5, r1, r6
 8009110:	fb06 1415 	mls	r4, r6, r5, r1
 8009114:	3430      	adds	r4, #48	; 0x30
 8009116:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800911a:	460c      	mov	r4, r1
 800911c:	2c63      	cmp	r4, #99	; 0x63
 800911e:	f102 32ff 	add.w	r2, r2, #4294967295
 8009122:	4629      	mov	r1, r5
 8009124:	dcf1      	bgt.n	800910a <__exponent+0x22>
 8009126:	3130      	adds	r1, #48	; 0x30
 8009128:	f1ac 0402 	sub.w	r4, ip, #2
 800912c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009130:	1c41      	adds	r1, r0, #1
 8009132:	4622      	mov	r2, r4
 8009134:	42ba      	cmp	r2, r7
 8009136:	d30a      	bcc.n	800914e <__exponent+0x66>
 8009138:	f10d 0209 	add.w	r2, sp, #9
 800913c:	eba2 020c 	sub.w	r2, r2, ip
 8009140:	42bc      	cmp	r4, r7
 8009142:	bf88      	it	hi
 8009144:	2200      	movhi	r2, #0
 8009146:	4413      	add	r3, r2
 8009148:	1a18      	subs	r0, r3, r0
 800914a:	b003      	add	sp, #12
 800914c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800914e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009152:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009156:	e7ed      	b.n	8009134 <__exponent+0x4c>
 8009158:	2330      	movs	r3, #48	; 0x30
 800915a:	3130      	adds	r1, #48	; 0x30
 800915c:	7083      	strb	r3, [r0, #2]
 800915e:	70c1      	strb	r1, [r0, #3]
 8009160:	1d03      	adds	r3, r0, #4
 8009162:	e7f1      	b.n	8009148 <__exponent+0x60>

08009164 <_printf_float>:
 8009164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009168:	ed2d 8b02 	vpush	{d8}
 800916c:	b08d      	sub	sp, #52	; 0x34
 800916e:	460c      	mov	r4, r1
 8009170:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009174:	4616      	mov	r6, r2
 8009176:	461f      	mov	r7, r3
 8009178:	4605      	mov	r5, r0
 800917a:	f000 fcc7 	bl	8009b0c <_localeconv_r>
 800917e:	f8d0 a000 	ldr.w	sl, [r0]
 8009182:	4650      	mov	r0, sl
 8009184:	f7f7 f89c 	bl	80002c0 <strlen>
 8009188:	2300      	movs	r3, #0
 800918a:	930a      	str	r3, [sp, #40]	; 0x28
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	9305      	str	r3, [sp, #20]
 8009190:	f8d8 3000 	ldr.w	r3, [r8]
 8009194:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009198:	3307      	adds	r3, #7
 800919a:	f023 0307 	bic.w	r3, r3, #7
 800919e:	f103 0208 	add.w	r2, r3, #8
 80091a2:	f8c8 2000 	str.w	r2, [r8]
 80091a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091ae:	9307      	str	r3, [sp, #28]
 80091b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80091b4:	ee08 0a10 	vmov	s16, r0
 80091b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80091bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091c0:	4b9e      	ldr	r3, [pc, #632]	; (800943c <_printf_float+0x2d8>)
 80091c2:	f04f 32ff 	mov.w	r2, #4294967295
 80091c6:	f7f7 fcd9 	bl	8000b7c <__aeabi_dcmpun>
 80091ca:	bb88      	cbnz	r0, 8009230 <_printf_float+0xcc>
 80091cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091d0:	4b9a      	ldr	r3, [pc, #616]	; (800943c <_printf_float+0x2d8>)
 80091d2:	f04f 32ff 	mov.w	r2, #4294967295
 80091d6:	f7f7 fcb3 	bl	8000b40 <__aeabi_dcmple>
 80091da:	bb48      	cbnz	r0, 8009230 <_printf_float+0xcc>
 80091dc:	2200      	movs	r2, #0
 80091de:	2300      	movs	r3, #0
 80091e0:	4640      	mov	r0, r8
 80091e2:	4649      	mov	r1, r9
 80091e4:	f7f7 fca2 	bl	8000b2c <__aeabi_dcmplt>
 80091e8:	b110      	cbz	r0, 80091f0 <_printf_float+0x8c>
 80091ea:	232d      	movs	r3, #45	; 0x2d
 80091ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091f0:	4a93      	ldr	r2, [pc, #588]	; (8009440 <_printf_float+0x2dc>)
 80091f2:	4b94      	ldr	r3, [pc, #592]	; (8009444 <_printf_float+0x2e0>)
 80091f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80091f8:	bf94      	ite	ls
 80091fa:	4690      	movls	r8, r2
 80091fc:	4698      	movhi	r8, r3
 80091fe:	2303      	movs	r3, #3
 8009200:	6123      	str	r3, [r4, #16]
 8009202:	9b05      	ldr	r3, [sp, #20]
 8009204:	f023 0304 	bic.w	r3, r3, #4
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	f04f 0900 	mov.w	r9, #0
 800920e:	9700      	str	r7, [sp, #0]
 8009210:	4633      	mov	r3, r6
 8009212:	aa0b      	add	r2, sp, #44	; 0x2c
 8009214:	4621      	mov	r1, r4
 8009216:	4628      	mov	r0, r5
 8009218:	f000 f9da 	bl	80095d0 <_printf_common>
 800921c:	3001      	adds	r0, #1
 800921e:	f040 8090 	bne.w	8009342 <_printf_float+0x1de>
 8009222:	f04f 30ff 	mov.w	r0, #4294967295
 8009226:	b00d      	add	sp, #52	; 0x34
 8009228:	ecbd 8b02 	vpop	{d8}
 800922c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009230:	4642      	mov	r2, r8
 8009232:	464b      	mov	r3, r9
 8009234:	4640      	mov	r0, r8
 8009236:	4649      	mov	r1, r9
 8009238:	f7f7 fca0 	bl	8000b7c <__aeabi_dcmpun>
 800923c:	b140      	cbz	r0, 8009250 <_printf_float+0xec>
 800923e:	464b      	mov	r3, r9
 8009240:	2b00      	cmp	r3, #0
 8009242:	bfbc      	itt	lt
 8009244:	232d      	movlt	r3, #45	; 0x2d
 8009246:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800924a:	4a7f      	ldr	r2, [pc, #508]	; (8009448 <_printf_float+0x2e4>)
 800924c:	4b7f      	ldr	r3, [pc, #508]	; (800944c <_printf_float+0x2e8>)
 800924e:	e7d1      	b.n	80091f4 <_printf_float+0x90>
 8009250:	6863      	ldr	r3, [r4, #4]
 8009252:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009256:	9206      	str	r2, [sp, #24]
 8009258:	1c5a      	adds	r2, r3, #1
 800925a:	d13f      	bne.n	80092dc <_printf_float+0x178>
 800925c:	2306      	movs	r3, #6
 800925e:	6063      	str	r3, [r4, #4]
 8009260:	9b05      	ldr	r3, [sp, #20]
 8009262:	6861      	ldr	r1, [r4, #4]
 8009264:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009268:	2300      	movs	r3, #0
 800926a:	9303      	str	r3, [sp, #12]
 800926c:	ab0a      	add	r3, sp, #40	; 0x28
 800926e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009272:	ab09      	add	r3, sp, #36	; 0x24
 8009274:	ec49 8b10 	vmov	d0, r8, r9
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	6022      	str	r2, [r4, #0]
 800927c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009280:	4628      	mov	r0, r5
 8009282:	f7ff fecf 	bl	8009024 <__cvt>
 8009286:	9b06      	ldr	r3, [sp, #24]
 8009288:	9909      	ldr	r1, [sp, #36]	; 0x24
 800928a:	2b47      	cmp	r3, #71	; 0x47
 800928c:	4680      	mov	r8, r0
 800928e:	d108      	bne.n	80092a2 <_printf_float+0x13e>
 8009290:	1cc8      	adds	r0, r1, #3
 8009292:	db02      	blt.n	800929a <_printf_float+0x136>
 8009294:	6863      	ldr	r3, [r4, #4]
 8009296:	4299      	cmp	r1, r3
 8009298:	dd41      	ble.n	800931e <_printf_float+0x1ba>
 800929a:	f1ab 0302 	sub.w	r3, fp, #2
 800929e:	fa5f fb83 	uxtb.w	fp, r3
 80092a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092a6:	d820      	bhi.n	80092ea <_printf_float+0x186>
 80092a8:	3901      	subs	r1, #1
 80092aa:	465a      	mov	r2, fp
 80092ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80092b0:	9109      	str	r1, [sp, #36]	; 0x24
 80092b2:	f7ff ff19 	bl	80090e8 <__exponent>
 80092b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092b8:	1813      	adds	r3, r2, r0
 80092ba:	2a01      	cmp	r2, #1
 80092bc:	4681      	mov	r9, r0
 80092be:	6123      	str	r3, [r4, #16]
 80092c0:	dc02      	bgt.n	80092c8 <_printf_float+0x164>
 80092c2:	6822      	ldr	r2, [r4, #0]
 80092c4:	07d2      	lsls	r2, r2, #31
 80092c6:	d501      	bpl.n	80092cc <_printf_float+0x168>
 80092c8:	3301      	adds	r3, #1
 80092ca:	6123      	str	r3, [r4, #16]
 80092cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d09c      	beq.n	800920e <_printf_float+0xaa>
 80092d4:	232d      	movs	r3, #45	; 0x2d
 80092d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092da:	e798      	b.n	800920e <_printf_float+0xaa>
 80092dc:	9a06      	ldr	r2, [sp, #24]
 80092de:	2a47      	cmp	r2, #71	; 0x47
 80092e0:	d1be      	bne.n	8009260 <_printf_float+0xfc>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1bc      	bne.n	8009260 <_printf_float+0xfc>
 80092e6:	2301      	movs	r3, #1
 80092e8:	e7b9      	b.n	800925e <_printf_float+0xfa>
 80092ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80092ee:	d118      	bne.n	8009322 <_printf_float+0x1be>
 80092f0:	2900      	cmp	r1, #0
 80092f2:	6863      	ldr	r3, [r4, #4]
 80092f4:	dd0b      	ble.n	800930e <_printf_float+0x1aa>
 80092f6:	6121      	str	r1, [r4, #16]
 80092f8:	b913      	cbnz	r3, 8009300 <_printf_float+0x19c>
 80092fa:	6822      	ldr	r2, [r4, #0]
 80092fc:	07d0      	lsls	r0, r2, #31
 80092fe:	d502      	bpl.n	8009306 <_printf_float+0x1a2>
 8009300:	3301      	adds	r3, #1
 8009302:	440b      	add	r3, r1
 8009304:	6123      	str	r3, [r4, #16]
 8009306:	65a1      	str	r1, [r4, #88]	; 0x58
 8009308:	f04f 0900 	mov.w	r9, #0
 800930c:	e7de      	b.n	80092cc <_printf_float+0x168>
 800930e:	b913      	cbnz	r3, 8009316 <_printf_float+0x1b2>
 8009310:	6822      	ldr	r2, [r4, #0]
 8009312:	07d2      	lsls	r2, r2, #31
 8009314:	d501      	bpl.n	800931a <_printf_float+0x1b6>
 8009316:	3302      	adds	r3, #2
 8009318:	e7f4      	b.n	8009304 <_printf_float+0x1a0>
 800931a:	2301      	movs	r3, #1
 800931c:	e7f2      	b.n	8009304 <_printf_float+0x1a0>
 800931e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009324:	4299      	cmp	r1, r3
 8009326:	db05      	blt.n	8009334 <_printf_float+0x1d0>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	6121      	str	r1, [r4, #16]
 800932c:	07d8      	lsls	r0, r3, #31
 800932e:	d5ea      	bpl.n	8009306 <_printf_float+0x1a2>
 8009330:	1c4b      	adds	r3, r1, #1
 8009332:	e7e7      	b.n	8009304 <_printf_float+0x1a0>
 8009334:	2900      	cmp	r1, #0
 8009336:	bfd4      	ite	le
 8009338:	f1c1 0202 	rsble	r2, r1, #2
 800933c:	2201      	movgt	r2, #1
 800933e:	4413      	add	r3, r2
 8009340:	e7e0      	b.n	8009304 <_printf_float+0x1a0>
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	055a      	lsls	r2, r3, #21
 8009346:	d407      	bmi.n	8009358 <_printf_float+0x1f4>
 8009348:	6923      	ldr	r3, [r4, #16]
 800934a:	4642      	mov	r2, r8
 800934c:	4631      	mov	r1, r6
 800934e:	4628      	mov	r0, r5
 8009350:	47b8      	blx	r7
 8009352:	3001      	adds	r0, #1
 8009354:	d12c      	bne.n	80093b0 <_printf_float+0x24c>
 8009356:	e764      	b.n	8009222 <_printf_float+0xbe>
 8009358:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800935c:	f240 80e0 	bls.w	8009520 <_printf_float+0x3bc>
 8009360:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009364:	2200      	movs	r2, #0
 8009366:	2300      	movs	r3, #0
 8009368:	f7f7 fbd6 	bl	8000b18 <__aeabi_dcmpeq>
 800936c:	2800      	cmp	r0, #0
 800936e:	d034      	beq.n	80093da <_printf_float+0x276>
 8009370:	4a37      	ldr	r2, [pc, #220]	; (8009450 <_printf_float+0x2ec>)
 8009372:	2301      	movs	r3, #1
 8009374:	4631      	mov	r1, r6
 8009376:	4628      	mov	r0, r5
 8009378:	47b8      	blx	r7
 800937a:	3001      	adds	r0, #1
 800937c:	f43f af51 	beq.w	8009222 <_printf_float+0xbe>
 8009380:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009384:	429a      	cmp	r2, r3
 8009386:	db02      	blt.n	800938e <_printf_float+0x22a>
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	07d8      	lsls	r0, r3, #31
 800938c:	d510      	bpl.n	80093b0 <_printf_float+0x24c>
 800938e:	ee18 3a10 	vmov	r3, s16
 8009392:	4652      	mov	r2, sl
 8009394:	4631      	mov	r1, r6
 8009396:	4628      	mov	r0, r5
 8009398:	47b8      	blx	r7
 800939a:	3001      	adds	r0, #1
 800939c:	f43f af41 	beq.w	8009222 <_printf_float+0xbe>
 80093a0:	f04f 0800 	mov.w	r8, #0
 80093a4:	f104 091a 	add.w	r9, r4, #26
 80093a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093aa:	3b01      	subs	r3, #1
 80093ac:	4543      	cmp	r3, r8
 80093ae:	dc09      	bgt.n	80093c4 <_printf_float+0x260>
 80093b0:	6823      	ldr	r3, [r4, #0]
 80093b2:	079b      	lsls	r3, r3, #30
 80093b4:	f100 8107 	bmi.w	80095c6 <_printf_float+0x462>
 80093b8:	68e0      	ldr	r0, [r4, #12]
 80093ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093bc:	4298      	cmp	r0, r3
 80093be:	bfb8      	it	lt
 80093c0:	4618      	movlt	r0, r3
 80093c2:	e730      	b.n	8009226 <_printf_float+0xc2>
 80093c4:	2301      	movs	r3, #1
 80093c6:	464a      	mov	r2, r9
 80093c8:	4631      	mov	r1, r6
 80093ca:	4628      	mov	r0, r5
 80093cc:	47b8      	blx	r7
 80093ce:	3001      	adds	r0, #1
 80093d0:	f43f af27 	beq.w	8009222 <_printf_float+0xbe>
 80093d4:	f108 0801 	add.w	r8, r8, #1
 80093d8:	e7e6      	b.n	80093a8 <_printf_float+0x244>
 80093da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093dc:	2b00      	cmp	r3, #0
 80093de:	dc39      	bgt.n	8009454 <_printf_float+0x2f0>
 80093e0:	4a1b      	ldr	r2, [pc, #108]	; (8009450 <_printf_float+0x2ec>)
 80093e2:	2301      	movs	r3, #1
 80093e4:	4631      	mov	r1, r6
 80093e6:	4628      	mov	r0, r5
 80093e8:	47b8      	blx	r7
 80093ea:	3001      	adds	r0, #1
 80093ec:	f43f af19 	beq.w	8009222 <_printf_float+0xbe>
 80093f0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80093f4:	4313      	orrs	r3, r2
 80093f6:	d102      	bne.n	80093fe <_printf_float+0x29a>
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	07d9      	lsls	r1, r3, #31
 80093fc:	d5d8      	bpl.n	80093b0 <_printf_float+0x24c>
 80093fe:	ee18 3a10 	vmov	r3, s16
 8009402:	4652      	mov	r2, sl
 8009404:	4631      	mov	r1, r6
 8009406:	4628      	mov	r0, r5
 8009408:	47b8      	blx	r7
 800940a:	3001      	adds	r0, #1
 800940c:	f43f af09 	beq.w	8009222 <_printf_float+0xbe>
 8009410:	f04f 0900 	mov.w	r9, #0
 8009414:	f104 0a1a 	add.w	sl, r4, #26
 8009418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800941a:	425b      	negs	r3, r3
 800941c:	454b      	cmp	r3, r9
 800941e:	dc01      	bgt.n	8009424 <_printf_float+0x2c0>
 8009420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009422:	e792      	b.n	800934a <_printf_float+0x1e6>
 8009424:	2301      	movs	r3, #1
 8009426:	4652      	mov	r2, sl
 8009428:	4631      	mov	r1, r6
 800942a:	4628      	mov	r0, r5
 800942c:	47b8      	blx	r7
 800942e:	3001      	adds	r0, #1
 8009430:	f43f aef7 	beq.w	8009222 <_printf_float+0xbe>
 8009434:	f109 0901 	add.w	r9, r9, #1
 8009438:	e7ee      	b.n	8009418 <_printf_float+0x2b4>
 800943a:	bf00      	nop
 800943c:	7fefffff 	.word	0x7fefffff
 8009440:	0800b890 	.word	0x0800b890
 8009444:	0800b894 	.word	0x0800b894
 8009448:	0800b898 	.word	0x0800b898
 800944c:	0800b89c 	.word	0x0800b89c
 8009450:	0800b8a0 	.word	0x0800b8a0
 8009454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009458:	429a      	cmp	r2, r3
 800945a:	bfa8      	it	ge
 800945c:	461a      	movge	r2, r3
 800945e:	2a00      	cmp	r2, #0
 8009460:	4691      	mov	r9, r2
 8009462:	dc37      	bgt.n	80094d4 <_printf_float+0x370>
 8009464:	f04f 0b00 	mov.w	fp, #0
 8009468:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800946c:	f104 021a 	add.w	r2, r4, #26
 8009470:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009472:	9305      	str	r3, [sp, #20]
 8009474:	eba3 0309 	sub.w	r3, r3, r9
 8009478:	455b      	cmp	r3, fp
 800947a:	dc33      	bgt.n	80094e4 <_printf_float+0x380>
 800947c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009480:	429a      	cmp	r2, r3
 8009482:	db3b      	blt.n	80094fc <_printf_float+0x398>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	07da      	lsls	r2, r3, #31
 8009488:	d438      	bmi.n	80094fc <_printf_float+0x398>
 800948a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800948e:	eba2 0903 	sub.w	r9, r2, r3
 8009492:	9b05      	ldr	r3, [sp, #20]
 8009494:	1ad2      	subs	r2, r2, r3
 8009496:	4591      	cmp	r9, r2
 8009498:	bfa8      	it	ge
 800949a:	4691      	movge	r9, r2
 800949c:	f1b9 0f00 	cmp.w	r9, #0
 80094a0:	dc35      	bgt.n	800950e <_printf_float+0x3aa>
 80094a2:	f04f 0800 	mov.w	r8, #0
 80094a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094aa:	f104 0a1a 	add.w	sl, r4, #26
 80094ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094b2:	1a9b      	subs	r3, r3, r2
 80094b4:	eba3 0309 	sub.w	r3, r3, r9
 80094b8:	4543      	cmp	r3, r8
 80094ba:	f77f af79 	ble.w	80093b0 <_printf_float+0x24c>
 80094be:	2301      	movs	r3, #1
 80094c0:	4652      	mov	r2, sl
 80094c2:	4631      	mov	r1, r6
 80094c4:	4628      	mov	r0, r5
 80094c6:	47b8      	blx	r7
 80094c8:	3001      	adds	r0, #1
 80094ca:	f43f aeaa 	beq.w	8009222 <_printf_float+0xbe>
 80094ce:	f108 0801 	add.w	r8, r8, #1
 80094d2:	e7ec      	b.n	80094ae <_printf_float+0x34a>
 80094d4:	4613      	mov	r3, r2
 80094d6:	4631      	mov	r1, r6
 80094d8:	4642      	mov	r2, r8
 80094da:	4628      	mov	r0, r5
 80094dc:	47b8      	blx	r7
 80094de:	3001      	adds	r0, #1
 80094e0:	d1c0      	bne.n	8009464 <_printf_float+0x300>
 80094e2:	e69e      	b.n	8009222 <_printf_float+0xbe>
 80094e4:	2301      	movs	r3, #1
 80094e6:	4631      	mov	r1, r6
 80094e8:	4628      	mov	r0, r5
 80094ea:	9205      	str	r2, [sp, #20]
 80094ec:	47b8      	blx	r7
 80094ee:	3001      	adds	r0, #1
 80094f0:	f43f ae97 	beq.w	8009222 <_printf_float+0xbe>
 80094f4:	9a05      	ldr	r2, [sp, #20]
 80094f6:	f10b 0b01 	add.w	fp, fp, #1
 80094fa:	e7b9      	b.n	8009470 <_printf_float+0x30c>
 80094fc:	ee18 3a10 	vmov	r3, s16
 8009500:	4652      	mov	r2, sl
 8009502:	4631      	mov	r1, r6
 8009504:	4628      	mov	r0, r5
 8009506:	47b8      	blx	r7
 8009508:	3001      	adds	r0, #1
 800950a:	d1be      	bne.n	800948a <_printf_float+0x326>
 800950c:	e689      	b.n	8009222 <_printf_float+0xbe>
 800950e:	9a05      	ldr	r2, [sp, #20]
 8009510:	464b      	mov	r3, r9
 8009512:	4442      	add	r2, r8
 8009514:	4631      	mov	r1, r6
 8009516:	4628      	mov	r0, r5
 8009518:	47b8      	blx	r7
 800951a:	3001      	adds	r0, #1
 800951c:	d1c1      	bne.n	80094a2 <_printf_float+0x33e>
 800951e:	e680      	b.n	8009222 <_printf_float+0xbe>
 8009520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009522:	2a01      	cmp	r2, #1
 8009524:	dc01      	bgt.n	800952a <_printf_float+0x3c6>
 8009526:	07db      	lsls	r3, r3, #31
 8009528:	d53a      	bpl.n	80095a0 <_printf_float+0x43c>
 800952a:	2301      	movs	r3, #1
 800952c:	4642      	mov	r2, r8
 800952e:	4631      	mov	r1, r6
 8009530:	4628      	mov	r0, r5
 8009532:	47b8      	blx	r7
 8009534:	3001      	adds	r0, #1
 8009536:	f43f ae74 	beq.w	8009222 <_printf_float+0xbe>
 800953a:	ee18 3a10 	vmov	r3, s16
 800953e:	4652      	mov	r2, sl
 8009540:	4631      	mov	r1, r6
 8009542:	4628      	mov	r0, r5
 8009544:	47b8      	blx	r7
 8009546:	3001      	adds	r0, #1
 8009548:	f43f ae6b 	beq.w	8009222 <_printf_float+0xbe>
 800954c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009550:	2200      	movs	r2, #0
 8009552:	2300      	movs	r3, #0
 8009554:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009558:	f7f7 fade 	bl	8000b18 <__aeabi_dcmpeq>
 800955c:	b9d8      	cbnz	r0, 8009596 <_printf_float+0x432>
 800955e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009562:	f108 0201 	add.w	r2, r8, #1
 8009566:	4631      	mov	r1, r6
 8009568:	4628      	mov	r0, r5
 800956a:	47b8      	blx	r7
 800956c:	3001      	adds	r0, #1
 800956e:	d10e      	bne.n	800958e <_printf_float+0x42a>
 8009570:	e657      	b.n	8009222 <_printf_float+0xbe>
 8009572:	2301      	movs	r3, #1
 8009574:	4652      	mov	r2, sl
 8009576:	4631      	mov	r1, r6
 8009578:	4628      	mov	r0, r5
 800957a:	47b8      	blx	r7
 800957c:	3001      	adds	r0, #1
 800957e:	f43f ae50 	beq.w	8009222 <_printf_float+0xbe>
 8009582:	f108 0801 	add.w	r8, r8, #1
 8009586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009588:	3b01      	subs	r3, #1
 800958a:	4543      	cmp	r3, r8
 800958c:	dcf1      	bgt.n	8009572 <_printf_float+0x40e>
 800958e:	464b      	mov	r3, r9
 8009590:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009594:	e6da      	b.n	800934c <_printf_float+0x1e8>
 8009596:	f04f 0800 	mov.w	r8, #0
 800959a:	f104 0a1a 	add.w	sl, r4, #26
 800959e:	e7f2      	b.n	8009586 <_printf_float+0x422>
 80095a0:	2301      	movs	r3, #1
 80095a2:	4642      	mov	r2, r8
 80095a4:	e7df      	b.n	8009566 <_printf_float+0x402>
 80095a6:	2301      	movs	r3, #1
 80095a8:	464a      	mov	r2, r9
 80095aa:	4631      	mov	r1, r6
 80095ac:	4628      	mov	r0, r5
 80095ae:	47b8      	blx	r7
 80095b0:	3001      	adds	r0, #1
 80095b2:	f43f ae36 	beq.w	8009222 <_printf_float+0xbe>
 80095b6:	f108 0801 	add.w	r8, r8, #1
 80095ba:	68e3      	ldr	r3, [r4, #12]
 80095bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095be:	1a5b      	subs	r3, r3, r1
 80095c0:	4543      	cmp	r3, r8
 80095c2:	dcf0      	bgt.n	80095a6 <_printf_float+0x442>
 80095c4:	e6f8      	b.n	80093b8 <_printf_float+0x254>
 80095c6:	f04f 0800 	mov.w	r8, #0
 80095ca:	f104 0919 	add.w	r9, r4, #25
 80095ce:	e7f4      	b.n	80095ba <_printf_float+0x456>

080095d0 <_printf_common>:
 80095d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d4:	4616      	mov	r6, r2
 80095d6:	4699      	mov	r9, r3
 80095d8:	688a      	ldr	r2, [r1, #8]
 80095da:	690b      	ldr	r3, [r1, #16]
 80095dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095e0:	4293      	cmp	r3, r2
 80095e2:	bfb8      	it	lt
 80095e4:	4613      	movlt	r3, r2
 80095e6:	6033      	str	r3, [r6, #0]
 80095e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095ec:	4607      	mov	r7, r0
 80095ee:	460c      	mov	r4, r1
 80095f0:	b10a      	cbz	r2, 80095f6 <_printf_common+0x26>
 80095f2:	3301      	adds	r3, #1
 80095f4:	6033      	str	r3, [r6, #0]
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	0699      	lsls	r1, r3, #26
 80095fa:	bf42      	ittt	mi
 80095fc:	6833      	ldrmi	r3, [r6, #0]
 80095fe:	3302      	addmi	r3, #2
 8009600:	6033      	strmi	r3, [r6, #0]
 8009602:	6825      	ldr	r5, [r4, #0]
 8009604:	f015 0506 	ands.w	r5, r5, #6
 8009608:	d106      	bne.n	8009618 <_printf_common+0x48>
 800960a:	f104 0a19 	add.w	sl, r4, #25
 800960e:	68e3      	ldr	r3, [r4, #12]
 8009610:	6832      	ldr	r2, [r6, #0]
 8009612:	1a9b      	subs	r3, r3, r2
 8009614:	42ab      	cmp	r3, r5
 8009616:	dc26      	bgt.n	8009666 <_printf_common+0x96>
 8009618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800961c:	1e13      	subs	r3, r2, #0
 800961e:	6822      	ldr	r2, [r4, #0]
 8009620:	bf18      	it	ne
 8009622:	2301      	movne	r3, #1
 8009624:	0692      	lsls	r2, r2, #26
 8009626:	d42b      	bmi.n	8009680 <_printf_common+0xb0>
 8009628:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800962c:	4649      	mov	r1, r9
 800962e:	4638      	mov	r0, r7
 8009630:	47c0      	blx	r8
 8009632:	3001      	adds	r0, #1
 8009634:	d01e      	beq.n	8009674 <_printf_common+0xa4>
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	6922      	ldr	r2, [r4, #16]
 800963a:	f003 0306 	and.w	r3, r3, #6
 800963e:	2b04      	cmp	r3, #4
 8009640:	bf02      	ittt	eq
 8009642:	68e5      	ldreq	r5, [r4, #12]
 8009644:	6833      	ldreq	r3, [r6, #0]
 8009646:	1aed      	subeq	r5, r5, r3
 8009648:	68a3      	ldr	r3, [r4, #8]
 800964a:	bf0c      	ite	eq
 800964c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009650:	2500      	movne	r5, #0
 8009652:	4293      	cmp	r3, r2
 8009654:	bfc4      	itt	gt
 8009656:	1a9b      	subgt	r3, r3, r2
 8009658:	18ed      	addgt	r5, r5, r3
 800965a:	2600      	movs	r6, #0
 800965c:	341a      	adds	r4, #26
 800965e:	42b5      	cmp	r5, r6
 8009660:	d11a      	bne.n	8009698 <_printf_common+0xc8>
 8009662:	2000      	movs	r0, #0
 8009664:	e008      	b.n	8009678 <_printf_common+0xa8>
 8009666:	2301      	movs	r3, #1
 8009668:	4652      	mov	r2, sl
 800966a:	4649      	mov	r1, r9
 800966c:	4638      	mov	r0, r7
 800966e:	47c0      	blx	r8
 8009670:	3001      	adds	r0, #1
 8009672:	d103      	bne.n	800967c <_printf_common+0xac>
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967c:	3501      	adds	r5, #1
 800967e:	e7c6      	b.n	800960e <_printf_common+0x3e>
 8009680:	18e1      	adds	r1, r4, r3
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	2030      	movs	r0, #48	; 0x30
 8009686:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800968a:	4422      	add	r2, r4
 800968c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009690:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009694:	3302      	adds	r3, #2
 8009696:	e7c7      	b.n	8009628 <_printf_common+0x58>
 8009698:	2301      	movs	r3, #1
 800969a:	4622      	mov	r2, r4
 800969c:	4649      	mov	r1, r9
 800969e:	4638      	mov	r0, r7
 80096a0:	47c0      	blx	r8
 80096a2:	3001      	adds	r0, #1
 80096a4:	d0e6      	beq.n	8009674 <_printf_common+0xa4>
 80096a6:	3601      	adds	r6, #1
 80096a8:	e7d9      	b.n	800965e <_printf_common+0x8e>
	...

080096ac <_printf_i>:
 80096ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	7e0f      	ldrb	r7, [r1, #24]
 80096b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096b4:	2f78      	cmp	r7, #120	; 0x78
 80096b6:	4691      	mov	r9, r2
 80096b8:	4680      	mov	r8, r0
 80096ba:	460c      	mov	r4, r1
 80096bc:	469a      	mov	sl, r3
 80096be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096c2:	d807      	bhi.n	80096d4 <_printf_i+0x28>
 80096c4:	2f62      	cmp	r7, #98	; 0x62
 80096c6:	d80a      	bhi.n	80096de <_printf_i+0x32>
 80096c8:	2f00      	cmp	r7, #0
 80096ca:	f000 80d4 	beq.w	8009876 <_printf_i+0x1ca>
 80096ce:	2f58      	cmp	r7, #88	; 0x58
 80096d0:	f000 80c0 	beq.w	8009854 <_printf_i+0x1a8>
 80096d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096dc:	e03a      	b.n	8009754 <_printf_i+0xa8>
 80096de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096e2:	2b15      	cmp	r3, #21
 80096e4:	d8f6      	bhi.n	80096d4 <_printf_i+0x28>
 80096e6:	a101      	add	r1, pc, #4	; (adr r1, 80096ec <_printf_i+0x40>)
 80096e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096ec:	08009745 	.word	0x08009745
 80096f0:	08009759 	.word	0x08009759
 80096f4:	080096d5 	.word	0x080096d5
 80096f8:	080096d5 	.word	0x080096d5
 80096fc:	080096d5 	.word	0x080096d5
 8009700:	080096d5 	.word	0x080096d5
 8009704:	08009759 	.word	0x08009759
 8009708:	080096d5 	.word	0x080096d5
 800970c:	080096d5 	.word	0x080096d5
 8009710:	080096d5 	.word	0x080096d5
 8009714:	080096d5 	.word	0x080096d5
 8009718:	0800985d 	.word	0x0800985d
 800971c:	08009785 	.word	0x08009785
 8009720:	08009817 	.word	0x08009817
 8009724:	080096d5 	.word	0x080096d5
 8009728:	080096d5 	.word	0x080096d5
 800972c:	0800987f 	.word	0x0800987f
 8009730:	080096d5 	.word	0x080096d5
 8009734:	08009785 	.word	0x08009785
 8009738:	080096d5 	.word	0x080096d5
 800973c:	080096d5 	.word	0x080096d5
 8009740:	0800981f 	.word	0x0800981f
 8009744:	682b      	ldr	r3, [r5, #0]
 8009746:	1d1a      	adds	r2, r3, #4
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	602a      	str	r2, [r5, #0]
 800974c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009754:	2301      	movs	r3, #1
 8009756:	e09f      	b.n	8009898 <_printf_i+0x1ec>
 8009758:	6820      	ldr	r0, [r4, #0]
 800975a:	682b      	ldr	r3, [r5, #0]
 800975c:	0607      	lsls	r7, r0, #24
 800975e:	f103 0104 	add.w	r1, r3, #4
 8009762:	6029      	str	r1, [r5, #0]
 8009764:	d501      	bpl.n	800976a <_printf_i+0xbe>
 8009766:	681e      	ldr	r6, [r3, #0]
 8009768:	e003      	b.n	8009772 <_printf_i+0xc6>
 800976a:	0646      	lsls	r6, r0, #25
 800976c:	d5fb      	bpl.n	8009766 <_printf_i+0xba>
 800976e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009772:	2e00      	cmp	r6, #0
 8009774:	da03      	bge.n	800977e <_printf_i+0xd2>
 8009776:	232d      	movs	r3, #45	; 0x2d
 8009778:	4276      	negs	r6, r6
 800977a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800977e:	485a      	ldr	r0, [pc, #360]	; (80098e8 <_printf_i+0x23c>)
 8009780:	230a      	movs	r3, #10
 8009782:	e012      	b.n	80097aa <_printf_i+0xfe>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	6820      	ldr	r0, [r4, #0]
 8009788:	1d19      	adds	r1, r3, #4
 800978a:	6029      	str	r1, [r5, #0]
 800978c:	0605      	lsls	r5, r0, #24
 800978e:	d501      	bpl.n	8009794 <_printf_i+0xe8>
 8009790:	681e      	ldr	r6, [r3, #0]
 8009792:	e002      	b.n	800979a <_printf_i+0xee>
 8009794:	0641      	lsls	r1, r0, #25
 8009796:	d5fb      	bpl.n	8009790 <_printf_i+0xe4>
 8009798:	881e      	ldrh	r6, [r3, #0]
 800979a:	4853      	ldr	r0, [pc, #332]	; (80098e8 <_printf_i+0x23c>)
 800979c:	2f6f      	cmp	r7, #111	; 0x6f
 800979e:	bf0c      	ite	eq
 80097a0:	2308      	moveq	r3, #8
 80097a2:	230a      	movne	r3, #10
 80097a4:	2100      	movs	r1, #0
 80097a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097aa:	6865      	ldr	r5, [r4, #4]
 80097ac:	60a5      	str	r5, [r4, #8]
 80097ae:	2d00      	cmp	r5, #0
 80097b0:	bfa2      	ittt	ge
 80097b2:	6821      	ldrge	r1, [r4, #0]
 80097b4:	f021 0104 	bicge.w	r1, r1, #4
 80097b8:	6021      	strge	r1, [r4, #0]
 80097ba:	b90e      	cbnz	r6, 80097c0 <_printf_i+0x114>
 80097bc:	2d00      	cmp	r5, #0
 80097be:	d04b      	beq.n	8009858 <_printf_i+0x1ac>
 80097c0:	4615      	mov	r5, r2
 80097c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80097c6:	fb03 6711 	mls	r7, r3, r1, r6
 80097ca:	5dc7      	ldrb	r7, [r0, r7]
 80097cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097d0:	4637      	mov	r7, r6
 80097d2:	42bb      	cmp	r3, r7
 80097d4:	460e      	mov	r6, r1
 80097d6:	d9f4      	bls.n	80097c2 <_printf_i+0x116>
 80097d8:	2b08      	cmp	r3, #8
 80097da:	d10b      	bne.n	80097f4 <_printf_i+0x148>
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	07de      	lsls	r6, r3, #31
 80097e0:	d508      	bpl.n	80097f4 <_printf_i+0x148>
 80097e2:	6923      	ldr	r3, [r4, #16]
 80097e4:	6861      	ldr	r1, [r4, #4]
 80097e6:	4299      	cmp	r1, r3
 80097e8:	bfde      	ittt	le
 80097ea:	2330      	movle	r3, #48	; 0x30
 80097ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097f4:	1b52      	subs	r2, r2, r5
 80097f6:	6122      	str	r2, [r4, #16]
 80097f8:	f8cd a000 	str.w	sl, [sp]
 80097fc:	464b      	mov	r3, r9
 80097fe:	aa03      	add	r2, sp, #12
 8009800:	4621      	mov	r1, r4
 8009802:	4640      	mov	r0, r8
 8009804:	f7ff fee4 	bl	80095d0 <_printf_common>
 8009808:	3001      	adds	r0, #1
 800980a:	d14a      	bne.n	80098a2 <_printf_i+0x1f6>
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	b004      	add	sp, #16
 8009812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009816:	6823      	ldr	r3, [r4, #0]
 8009818:	f043 0320 	orr.w	r3, r3, #32
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	4833      	ldr	r0, [pc, #204]	; (80098ec <_printf_i+0x240>)
 8009820:	2778      	movs	r7, #120	; 0x78
 8009822:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	6829      	ldr	r1, [r5, #0]
 800982a:	061f      	lsls	r7, r3, #24
 800982c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009830:	d402      	bmi.n	8009838 <_printf_i+0x18c>
 8009832:	065f      	lsls	r7, r3, #25
 8009834:	bf48      	it	mi
 8009836:	b2b6      	uxthmi	r6, r6
 8009838:	07df      	lsls	r7, r3, #31
 800983a:	bf48      	it	mi
 800983c:	f043 0320 	orrmi.w	r3, r3, #32
 8009840:	6029      	str	r1, [r5, #0]
 8009842:	bf48      	it	mi
 8009844:	6023      	strmi	r3, [r4, #0]
 8009846:	b91e      	cbnz	r6, 8009850 <_printf_i+0x1a4>
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	f023 0320 	bic.w	r3, r3, #32
 800984e:	6023      	str	r3, [r4, #0]
 8009850:	2310      	movs	r3, #16
 8009852:	e7a7      	b.n	80097a4 <_printf_i+0xf8>
 8009854:	4824      	ldr	r0, [pc, #144]	; (80098e8 <_printf_i+0x23c>)
 8009856:	e7e4      	b.n	8009822 <_printf_i+0x176>
 8009858:	4615      	mov	r5, r2
 800985a:	e7bd      	b.n	80097d8 <_printf_i+0x12c>
 800985c:	682b      	ldr	r3, [r5, #0]
 800985e:	6826      	ldr	r6, [r4, #0]
 8009860:	6961      	ldr	r1, [r4, #20]
 8009862:	1d18      	adds	r0, r3, #4
 8009864:	6028      	str	r0, [r5, #0]
 8009866:	0635      	lsls	r5, r6, #24
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	d501      	bpl.n	8009870 <_printf_i+0x1c4>
 800986c:	6019      	str	r1, [r3, #0]
 800986e:	e002      	b.n	8009876 <_printf_i+0x1ca>
 8009870:	0670      	lsls	r0, r6, #25
 8009872:	d5fb      	bpl.n	800986c <_printf_i+0x1c0>
 8009874:	8019      	strh	r1, [r3, #0]
 8009876:	2300      	movs	r3, #0
 8009878:	6123      	str	r3, [r4, #16]
 800987a:	4615      	mov	r5, r2
 800987c:	e7bc      	b.n	80097f8 <_printf_i+0x14c>
 800987e:	682b      	ldr	r3, [r5, #0]
 8009880:	1d1a      	adds	r2, r3, #4
 8009882:	602a      	str	r2, [r5, #0]
 8009884:	681d      	ldr	r5, [r3, #0]
 8009886:	6862      	ldr	r2, [r4, #4]
 8009888:	2100      	movs	r1, #0
 800988a:	4628      	mov	r0, r5
 800988c:	f7f6 fcc8 	bl	8000220 <memchr>
 8009890:	b108      	cbz	r0, 8009896 <_printf_i+0x1ea>
 8009892:	1b40      	subs	r0, r0, r5
 8009894:	6060      	str	r0, [r4, #4]
 8009896:	6863      	ldr	r3, [r4, #4]
 8009898:	6123      	str	r3, [r4, #16]
 800989a:	2300      	movs	r3, #0
 800989c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098a0:	e7aa      	b.n	80097f8 <_printf_i+0x14c>
 80098a2:	6923      	ldr	r3, [r4, #16]
 80098a4:	462a      	mov	r2, r5
 80098a6:	4649      	mov	r1, r9
 80098a8:	4640      	mov	r0, r8
 80098aa:	47d0      	blx	sl
 80098ac:	3001      	adds	r0, #1
 80098ae:	d0ad      	beq.n	800980c <_printf_i+0x160>
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	079b      	lsls	r3, r3, #30
 80098b4:	d413      	bmi.n	80098de <_printf_i+0x232>
 80098b6:	68e0      	ldr	r0, [r4, #12]
 80098b8:	9b03      	ldr	r3, [sp, #12]
 80098ba:	4298      	cmp	r0, r3
 80098bc:	bfb8      	it	lt
 80098be:	4618      	movlt	r0, r3
 80098c0:	e7a6      	b.n	8009810 <_printf_i+0x164>
 80098c2:	2301      	movs	r3, #1
 80098c4:	4632      	mov	r2, r6
 80098c6:	4649      	mov	r1, r9
 80098c8:	4640      	mov	r0, r8
 80098ca:	47d0      	blx	sl
 80098cc:	3001      	adds	r0, #1
 80098ce:	d09d      	beq.n	800980c <_printf_i+0x160>
 80098d0:	3501      	adds	r5, #1
 80098d2:	68e3      	ldr	r3, [r4, #12]
 80098d4:	9903      	ldr	r1, [sp, #12]
 80098d6:	1a5b      	subs	r3, r3, r1
 80098d8:	42ab      	cmp	r3, r5
 80098da:	dcf2      	bgt.n	80098c2 <_printf_i+0x216>
 80098dc:	e7eb      	b.n	80098b6 <_printf_i+0x20a>
 80098de:	2500      	movs	r5, #0
 80098e0:	f104 0619 	add.w	r6, r4, #25
 80098e4:	e7f5      	b.n	80098d2 <_printf_i+0x226>
 80098e6:	bf00      	nop
 80098e8:	0800b8a2 	.word	0x0800b8a2
 80098ec:	0800b8b3 	.word	0x0800b8b3

080098f0 <std>:
 80098f0:	2300      	movs	r3, #0
 80098f2:	b510      	push	{r4, lr}
 80098f4:	4604      	mov	r4, r0
 80098f6:	e9c0 3300 	strd	r3, r3, [r0]
 80098fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098fe:	6083      	str	r3, [r0, #8]
 8009900:	8181      	strh	r1, [r0, #12]
 8009902:	6643      	str	r3, [r0, #100]	; 0x64
 8009904:	81c2      	strh	r2, [r0, #14]
 8009906:	6183      	str	r3, [r0, #24]
 8009908:	4619      	mov	r1, r3
 800990a:	2208      	movs	r2, #8
 800990c:	305c      	adds	r0, #92	; 0x5c
 800990e:	f000 f8f4 	bl	8009afa <memset>
 8009912:	4b0d      	ldr	r3, [pc, #52]	; (8009948 <std+0x58>)
 8009914:	6263      	str	r3, [r4, #36]	; 0x24
 8009916:	4b0d      	ldr	r3, [pc, #52]	; (800994c <std+0x5c>)
 8009918:	62a3      	str	r3, [r4, #40]	; 0x28
 800991a:	4b0d      	ldr	r3, [pc, #52]	; (8009950 <std+0x60>)
 800991c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800991e:	4b0d      	ldr	r3, [pc, #52]	; (8009954 <std+0x64>)
 8009920:	6323      	str	r3, [r4, #48]	; 0x30
 8009922:	4b0d      	ldr	r3, [pc, #52]	; (8009958 <std+0x68>)
 8009924:	6224      	str	r4, [r4, #32]
 8009926:	429c      	cmp	r4, r3
 8009928:	d006      	beq.n	8009938 <std+0x48>
 800992a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800992e:	4294      	cmp	r4, r2
 8009930:	d002      	beq.n	8009938 <std+0x48>
 8009932:	33d0      	adds	r3, #208	; 0xd0
 8009934:	429c      	cmp	r4, r3
 8009936:	d105      	bne.n	8009944 <std+0x54>
 8009938:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800993c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009940:	f000 b968 	b.w	8009c14 <__retarget_lock_init_recursive>
 8009944:	bd10      	pop	{r4, pc}
 8009946:	bf00      	nop
 8009948:	08009a75 	.word	0x08009a75
 800994c:	08009a97 	.word	0x08009a97
 8009950:	08009acf 	.word	0x08009acf
 8009954:	08009af3 	.word	0x08009af3
 8009958:	20000b88 	.word	0x20000b88

0800995c <stdio_exit_handler>:
 800995c:	4a02      	ldr	r2, [pc, #8]	; (8009968 <stdio_exit_handler+0xc>)
 800995e:	4903      	ldr	r1, [pc, #12]	; (800996c <stdio_exit_handler+0x10>)
 8009960:	4803      	ldr	r0, [pc, #12]	; (8009970 <stdio_exit_handler+0x14>)
 8009962:	f000 b869 	b.w	8009a38 <_fwalk_sglue>
 8009966:	bf00      	nop
 8009968:	2000000c 	.word	0x2000000c
 800996c:	0800b1c9 	.word	0x0800b1c9
 8009970:	20000018 	.word	0x20000018

08009974 <cleanup_stdio>:
 8009974:	6841      	ldr	r1, [r0, #4]
 8009976:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <cleanup_stdio+0x34>)
 8009978:	4299      	cmp	r1, r3
 800997a:	b510      	push	{r4, lr}
 800997c:	4604      	mov	r4, r0
 800997e:	d001      	beq.n	8009984 <cleanup_stdio+0x10>
 8009980:	f001 fc22 	bl	800b1c8 <_fflush_r>
 8009984:	68a1      	ldr	r1, [r4, #8]
 8009986:	4b09      	ldr	r3, [pc, #36]	; (80099ac <cleanup_stdio+0x38>)
 8009988:	4299      	cmp	r1, r3
 800998a:	d002      	beq.n	8009992 <cleanup_stdio+0x1e>
 800998c:	4620      	mov	r0, r4
 800998e:	f001 fc1b 	bl	800b1c8 <_fflush_r>
 8009992:	68e1      	ldr	r1, [r4, #12]
 8009994:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <cleanup_stdio+0x3c>)
 8009996:	4299      	cmp	r1, r3
 8009998:	d004      	beq.n	80099a4 <cleanup_stdio+0x30>
 800999a:	4620      	mov	r0, r4
 800999c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a0:	f001 bc12 	b.w	800b1c8 <_fflush_r>
 80099a4:	bd10      	pop	{r4, pc}
 80099a6:	bf00      	nop
 80099a8:	20000b88 	.word	0x20000b88
 80099ac:	20000bf0 	.word	0x20000bf0
 80099b0:	20000c58 	.word	0x20000c58

080099b4 <global_stdio_init.part.0>:
 80099b4:	b510      	push	{r4, lr}
 80099b6:	4b0b      	ldr	r3, [pc, #44]	; (80099e4 <global_stdio_init.part.0+0x30>)
 80099b8:	4c0b      	ldr	r4, [pc, #44]	; (80099e8 <global_stdio_init.part.0+0x34>)
 80099ba:	4a0c      	ldr	r2, [pc, #48]	; (80099ec <global_stdio_init.part.0+0x38>)
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	4620      	mov	r0, r4
 80099c0:	2200      	movs	r2, #0
 80099c2:	2104      	movs	r1, #4
 80099c4:	f7ff ff94 	bl	80098f0 <std>
 80099c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80099cc:	2201      	movs	r2, #1
 80099ce:	2109      	movs	r1, #9
 80099d0:	f7ff ff8e 	bl	80098f0 <std>
 80099d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80099d8:	2202      	movs	r2, #2
 80099da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099de:	2112      	movs	r1, #18
 80099e0:	f7ff bf86 	b.w	80098f0 <std>
 80099e4:	20000cc0 	.word	0x20000cc0
 80099e8:	20000b88 	.word	0x20000b88
 80099ec:	0800995d 	.word	0x0800995d

080099f0 <__sfp_lock_acquire>:
 80099f0:	4801      	ldr	r0, [pc, #4]	; (80099f8 <__sfp_lock_acquire+0x8>)
 80099f2:	f000 b910 	b.w	8009c16 <__retarget_lock_acquire_recursive>
 80099f6:	bf00      	nop
 80099f8:	20000cc9 	.word	0x20000cc9

080099fc <__sfp_lock_release>:
 80099fc:	4801      	ldr	r0, [pc, #4]	; (8009a04 <__sfp_lock_release+0x8>)
 80099fe:	f000 b90b 	b.w	8009c18 <__retarget_lock_release_recursive>
 8009a02:	bf00      	nop
 8009a04:	20000cc9 	.word	0x20000cc9

08009a08 <__sinit>:
 8009a08:	b510      	push	{r4, lr}
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	f7ff fff0 	bl	80099f0 <__sfp_lock_acquire>
 8009a10:	6a23      	ldr	r3, [r4, #32]
 8009a12:	b11b      	cbz	r3, 8009a1c <__sinit+0x14>
 8009a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a18:	f7ff bff0 	b.w	80099fc <__sfp_lock_release>
 8009a1c:	4b04      	ldr	r3, [pc, #16]	; (8009a30 <__sinit+0x28>)
 8009a1e:	6223      	str	r3, [r4, #32]
 8009a20:	4b04      	ldr	r3, [pc, #16]	; (8009a34 <__sinit+0x2c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1f5      	bne.n	8009a14 <__sinit+0xc>
 8009a28:	f7ff ffc4 	bl	80099b4 <global_stdio_init.part.0>
 8009a2c:	e7f2      	b.n	8009a14 <__sinit+0xc>
 8009a2e:	bf00      	nop
 8009a30:	08009975 	.word	0x08009975
 8009a34:	20000cc0 	.word	0x20000cc0

08009a38 <_fwalk_sglue>:
 8009a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a3c:	4607      	mov	r7, r0
 8009a3e:	4688      	mov	r8, r1
 8009a40:	4614      	mov	r4, r2
 8009a42:	2600      	movs	r6, #0
 8009a44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a48:	f1b9 0901 	subs.w	r9, r9, #1
 8009a4c:	d505      	bpl.n	8009a5a <_fwalk_sglue+0x22>
 8009a4e:	6824      	ldr	r4, [r4, #0]
 8009a50:	2c00      	cmp	r4, #0
 8009a52:	d1f7      	bne.n	8009a44 <_fwalk_sglue+0xc>
 8009a54:	4630      	mov	r0, r6
 8009a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a5a:	89ab      	ldrh	r3, [r5, #12]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d907      	bls.n	8009a70 <_fwalk_sglue+0x38>
 8009a60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a64:	3301      	adds	r3, #1
 8009a66:	d003      	beq.n	8009a70 <_fwalk_sglue+0x38>
 8009a68:	4629      	mov	r1, r5
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	47c0      	blx	r8
 8009a6e:	4306      	orrs	r6, r0
 8009a70:	3568      	adds	r5, #104	; 0x68
 8009a72:	e7e9      	b.n	8009a48 <_fwalk_sglue+0x10>

08009a74 <__sread>:
 8009a74:	b510      	push	{r4, lr}
 8009a76:	460c      	mov	r4, r1
 8009a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a7c:	f000 f86c 	bl	8009b58 <_read_r>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	bfab      	itete	ge
 8009a84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a86:	89a3      	ldrhlt	r3, [r4, #12]
 8009a88:	181b      	addge	r3, r3, r0
 8009a8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a8e:	bfac      	ite	ge
 8009a90:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a92:	81a3      	strhlt	r3, [r4, #12]
 8009a94:	bd10      	pop	{r4, pc}

08009a96 <__swrite>:
 8009a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9a:	461f      	mov	r7, r3
 8009a9c:	898b      	ldrh	r3, [r1, #12]
 8009a9e:	05db      	lsls	r3, r3, #23
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	4616      	mov	r6, r2
 8009aa6:	d505      	bpl.n	8009ab4 <__swrite+0x1e>
 8009aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aac:	2302      	movs	r3, #2
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f000 f840 	bl	8009b34 <_lseek_r>
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009abe:	81a3      	strh	r3, [r4, #12]
 8009ac0:	4632      	mov	r2, r6
 8009ac2:	463b      	mov	r3, r7
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009aca:	f000 b867 	b.w	8009b9c <_write_r>

08009ace <__sseek>:
 8009ace:	b510      	push	{r4, lr}
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad6:	f000 f82d 	bl	8009b34 <_lseek_r>
 8009ada:	1c43      	adds	r3, r0, #1
 8009adc:	89a3      	ldrh	r3, [r4, #12]
 8009ade:	bf15      	itete	ne
 8009ae0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009aea:	81a3      	strheq	r3, [r4, #12]
 8009aec:	bf18      	it	ne
 8009aee:	81a3      	strhne	r3, [r4, #12]
 8009af0:	bd10      	pop	{r4, pc}

08009af2 <__sclose>:
 8009af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af6:	f000 b80d 	b.w	8009b14 <_close_r>

08009afa <memset>:
 8009afa:	4402      	add	r2, r0
 8009afc:	4603      	mov	r3, r0
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d100      	bne.n	8009b04 <memset+0xa>
 8009b02:	4770      	bx	lr
 8009b04:	f803 1b01 	strb.w	r1, [r3], #1
 8009b08:	e7f9      	b.n	8009afe <memset+0x4>
	...

08009b0c <_localeconv_r>:
 8009b0c:	4800      	ldr	r0, [pc, #0]	; (8009b10 <_localeconv_r+0x4>)
 8009b0e:	4770      	bx	lr
 8009b10:	20000158 	.word	0x20000158

08009b14 <_close_r>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	4d06      	ldr	r5, [pc, #24]	; (8009b30 <_close_r+0x1c>)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	4608      	mov	r0, r1
 8009b1e:	602b      	str	r3, [r5, #0]
 8009b20:	f7fa f935 	bl	8003d8e <_close>
 8009b24:	1c43      	adds	r3, r0, #1
 8009b26:	d102      	bne.n	8009b2e <_close_r+0x1a>
 8009b28:	682b      	ldr	r3, [r5, #0]
 8009b2a:	b103      	cbz	r3, 8009b2e <_close_r+0x1a>
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}
 8009b30:	20000cc4 	.word	0x20000cc4

08009b34 <_lseek_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4d07      	ldr	r5, [pc, #28]	; (8009b54 <_lseek_r+0x20>)
 8009b38:	4604      	mov	r4, r0
 8009b3a:	4608      	mov	r0, r1
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	2200      	movs	r2, #0
 8009b40:	602a      	str	r2, [r5, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	f7fa f94a 	bl	8003ddc <_lseek>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d102      	bne.n	8009b52 <_lseek_r+0x1e>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	b103      	cbz	r3, 8009b52 <_lseek_r+0x1e>
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	20000cc4 	.word	0x20000cc4

08009b58 <_read_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d07      	ldr	r5, [pc, #28]	; (8009b78 <_read_r+0x20>)
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	4608      	mov	r0, r1
 8009b60:	4611      	mov	r1, r2
 8009b62:	2200      	movs	r2, #0
 8009b64:	602a      	str	r2, [r5, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	f7fa f8d8 	bl	8003d1c <_read>
 8009b6c:	1c43      	adds	r3, r0, #1
 8009b6e:	d102      	bne.n	8009b76 <_read_r+0x1e>
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	b103      	cbz	r3, 8009b76 <_read_r+0x1e>
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	bd38      	pop	{r3, r4, r5, pc}
 8009b78:	20000cc4 	.word	0x20000cc4

08009b7c <_sbrk_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4d06      	ldr	r5, [pc, #24]	; (8009b98 <_sbrk_r+0x1c>)
 8009b80:	2300      	movs	r3, #0
 8009b82:	4604      	mov	r4, r0
 8009b84:	4608      	mov	r0, r1
 8009b86:	602b      	str	r3, [r5, #0]
 8009b88:	f7fa f936 	bl	8003df8 <_sbrk>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d102      	bne.n	8009b96 <_sbrk_r+0x1a>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	b103      	cbz	r3, 8009b96 <_sbrk_r+0x1a>
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	20000cc4 	.word	0x20000cc4

08009b9c <_write_r>:
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	4d07      	ldr	r5, [pc, #28]	; (8009bbc <_write_r+0x20>)
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	4608      	mov	r0, r1
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	602a      	str	r2, [r5, #0]
 8009baa:	461a      	mov	r2, r3
 8009bac:	f7fa f8d3 	bl	8003d56 <_write>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d102      	bne.n	8009bba <_write_r+0x1e>
 8009bb4:	682b      	ldr	r3, [r5, #0]
 8009bb6:	b103      	cbz	r3, 8009bba <_write_r+0x1e>
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	20000cc4 	.word	0x20000cc4

08009bc0 <__errno>:
 8009bc0:	4b01      	ldr	r3, [pc, #4]	; (8009bc8 <__errno+0x8>)
 8009bc2:	6818      	ldr	r0, [r3, #0]
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	20000064 	.word	0x20000064

08009bcc <__libc_init_array>:
 8009bcc:	b570      	push	{r4, r5, r6, lr}
 8009bce:	4d0d      	ldr	r5, [pc, #52]	; (8009c04 <__libc_init_array+0x38>)
 8009bd0:	4c0d      	ldr	r4, [pc, #52]	; (8009c08 <__libc_init_array+0x3c>)
 8009bd2:	1b64      	subs	r4, r4, r5
 8009bd4:	10a4      	asrs	r4, r4, #2
 8009bd6:	2600      	movs	r6, #0
 8009bd8:	42a6      	cmp	r6, r4
 8009bda:	d109      	bne.n	8009bf0 <__libc_init_array+0x24>
 8009bdc:	4d0b      	ldr	r5, [pc, #44]	; (8009c0c <__libc_init_array+0x40>)
 8009bde:	4c0c      	ldr	r4, [pc, #48]	; (8009c10 <__libc_init_array+0x44>)
 8009be0:	f001 fe28 	bl	800b834 <_init>
 8009be4:	1b64      	subs	r4, r4, r5
 8009be6:	10a4      	asrs	r4, r4, #2
 8009be8:	2600      	movs	r6, #0
 8009bea:	42a6      	cmp	r6, r4
 8009bec:	d105      	bne.n	8009bfa <__libc_init_array+0x2e>
 8009bee:	bd70      	pop	{r4, r5, r6, pc}
 8009bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf4:	4798      	blx	r3
 8009bf6:	3601      	adds	r6, #1
 8009bf8:	e7ee      	b.n	8009bd8 <__libc_init_array+0xc>
 8009bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bfe:	4798      	blx	r3
 8009c00:	3601      	adds	r6, #1
 8009c02:	e7f2      	b.n	8009bea <__libc_init_array+0x1e>
 8009c04:	0800bc0c 	.word	0x0800bc0c
 8009c08:	0800bc0c 	.word	0x0800bc0c
 8009c0c:	0800bc0c 	.word	0x0800bc0c
 8009c10:	0800bc10 	.word	0x0800bc10

08009c14 <__retarget_lock_init_recursive>:
 8009c14:	4770      	bx	lr

08009c16 <__retarget_lock_acquire_recursive>:
 8009c16:	4770      	bx	lr

08009c18 <__retarget_lock_release_recursive>:
 8009c18:	4770      	bx	lr

08009c1a <memcpy>:
 8009c1a:	440a      	add	r2, r1
 8009c1c:	4291      	cmp	r1, r2
 8009c1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c22:	d100      	bne.n	8009c26 <memcpy+0xc>
 8009c24:	4770      	bx	lr
 8009c26:	b510      	push	{r4, lr}
 8009c28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c30:	4291      	cmp	r1, r2
 8009c32:	d1f9      	bne.n	8009c28 <memcpy+0xe>
 8009c34:	bd10      	pop	{r4, pc}

08009c36 <quorem>:
 8009c36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3a:	6903      	ldr	r3, [r0, #16]
 8009c3c:	690c      	ldr	r4, [r1, #16]
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	4607      	mov	r7, r0
 8009c42:	db7e      	blt.n	8009d42 <quorem+0x10c>
 8009c44:	3c01      	subs	r4, #1
 8009c46:	f101 0814 	add.w	r8, r1, #20
 8009c4a:	f100 0514 	add.w	r5, r0, #20
 8009c4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c68:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c6c:	d331      	bcc.n	8009cd2 <quorem+0x9c>
 8009c6e:	f04f 0e00 	mov.w	lr, #0
 8009c72:	4640      	mov	r0, r8
 8009c74:	46ac      	mov	ip, r5
 8009c76:	46f2      	mov	sl, lr
 8009c78:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c7c:	b293      	uxth	r3, r2
 8009c7e:	fb06 e303 	mla	r3, r6, r3, lr
 8009c82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c86:	0c1a      	lsrs	r2, r3, #16
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	ebaa 0303 	sub.w	r3, sl, r3
 8009c8e:	f8dc a000 	ldr.w	sl, [ip]
 8009c92:	fa13 f38a 	uxtah	r3, r3, sl
 8009c96:	fb06 220e 	mla	r2, r6, lr, r2
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	9b00      	ldr	r3, [sp, #0]
 8009c9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ca2:	b292      	uxth	r2, r2
 8009ca4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ca8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cac:	f8bd 3000 	ldrh.w	r3, [sp]
 8009cb0:	4581      	cmp	r9, r0
 8009cb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cb6:	f84c 3b04 	str.w	r3, [ip], #4
 8009cba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009cbe:	d2db      	bcs.n	8009c78 <quorem+0x42>
 8009cc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009cc4:	b92b      	cbnz	r3, 8009cd2 <quorem+0x9c>
 8009cc6:	9b01      	ldr	r3, [sp, #4]
 8009cc8:	3b04      	subs	r3, #4
 8009cca:	429d      	cmp	r5, r3
 8009ccc:	461a      	mov	r2, r3
 8009cce:	d32c      	bcc.n	8009d2a <quorem+0xf4>
 8009cd0:	613c      	str	r4, [r7, #16]
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	f001 f8f2 	bl	800aebc <__mcmp>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	db22      	blt.n	8009d22 <quorem+0xec>
 8009cdc:	3601      	adds	r6, #1
 8009cde:	4629      	mov	r1, r5
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ce6:	f8d1 c000 	ldr.w	ip, [r1]
 8009cea:	b293      	uxth	r3, r2
 8009cec:	1ac3      	subs	r3, r0, r3
 8009cee:	0c12      	lsrs	r2, r2, #16
 8009cf0:	fa13 f38c 	uxtah	r3, r3, ip
 8009cf4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009cf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d02:	45c1      	cmp	r9, r8
 8009d04:	f841 3b04 	str.w	r3, [r1], #4
 8009d08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d0c:	d2e9      	bcs.n	8009ce2 <quorem+0xac>
 8009d0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d16:	b922      	cbnz	r2, 8009d22 <quorem+0xec>
 8009d18:	3b04      	subs	r3, #4
 8009d1a:	429d      	cmp	r5, r3
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	d30a      	bcc.n	8009d36 <quorem+0x100>
 8009d20:	613c      	str	r4, [r7, #16]
 8009d22:	4630      	mov	r0, r6
 8009d24:	b003      	add	sp, #12
 8009d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d2a:	6812      	ldr	r2, [r2, #0]
 8009d2c:	3b04      	subs	r3, #4
 8009d2e:	2a00      	cmp	r2, #0
 8009d30:	d1ce      	bne.n	8009cd0 <quorem+0x9a>
 8009d32:	3c01      	subs	r4, #1
 8009d34:	e7c9      	b.n	8009cca <quorem+0x94>
 8009d36:	6812      	ldr	r2, [r2, #0]
 8009d38:	3b04      	subs	r3, #4
 8009d3a:	2a00      	cmp	r2, #0
 8009d3c:	d1f0      	bne.n	8009d20 <quorem+0xea>
 8009d3e:	3c01      	subs	r4, #1
 8009d40:	e7eb      	b.n	8009d1a <quorem+0xe4>
 8009d42:	2000      	movs	r0, #0
 8009d44:	e7ee      	b.n	8009d24 <quorem+0xee>
	...

08009d48 <_dtoa_r>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	ed2d 8b04 	vpush	{d8-d9}
 8009d50:	69c5      	ldr	r5, [r0, #28]
 8009d52:	b093      	sub	sp, #76	; 0x4c
 8009d54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d58:	ec57 6b10 	vmov	r6, r7, d0
 8009d5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009d60:	9107      	str	r1, [sp, #28]
 8009d62:	4604      	mov	r4, r0
 8009d64:	920a      	str	r2, [sp, #40]	; 0x28
 8009d66:	930d      	str	r3, [sp, #52]	; 0x34
 8009d68:	b975      	cbnz	r5, 8009d88 <_dtoa_r+0x40>
 8009d6a:	2010      	movs	r0, #16
 8009d6c:	f7ff f8a6 	bl	8008ebc <malloc>
 8009d70:	4602      	mov	r2, r0
 8009d72:	61e0      	str	r0, [r4, #28]
 8009d74:	b920      	cbnz	r0, 8009d80 <_dtoa_r+0x38>
 8009d76:	4bae      	ldr	r3, [pc, #696]	; (800a030 <_dtoa_r+0x2e8>)
 8009d78:	21ef      	movs	r1, #239	; 0xef
 8009d7a:	48ae      	ldr	r0, [pc, #696]	; (800a034 <_dtoa_r+0x2ec>)
 8009d7c:	f001 fa4c 	bl	800b218 <__assert_func>
 8009d80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d84:	6005      	str	r5, [r0, #0]
 8009d86:	60c5      	str	r5, [r0, #12]
 8009d88:	69e3      	ldr	r3, [r4, #28]
 8009d8a:	6819      	ldr	r1, [r3, #0]
 8009d8c:	b151      	cbz	r1, 8009da4 <_dtoa_r+0x5c>
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	604a      	str	r2, [r1, #4]
 8009d92:	2301      	movs	r3, #1
 8009d94:	4093      	lsls	r3, r2
 8009d96:	608b      	str	r3, [r1, #8]
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f000 fe53 	bl	800aa44 <_Bfree>
 8009d9e:	69e3      	ldr	r3, [r4, #28]
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	1e3b      	subs	r3, r7, #0
 8009da6:	bfbb      	ittet	lt
 8009da8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009dac:	9303      	strlt	r3, [sp, #12]
 8009dae:	2300      	movge	r3, #0
 8009db0:	2201      	movlt	r2, #1
 8009db2:	bfac      	ite	ge
 8009db4:	f8c8 3000 	strge.w	r3, [r8]
 8009db8:	f8c8 2000 	strlt.w	r2, [r8]
 8009dbc:	4b9e      	ldr	r3, [pc, #632]	; (800a038 <_dtoa_r+0x2f0>)
 8009dbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009dc2:	ea33 0308 	bics.w	r3, r3, r8
 8009dc6:	d11b      	bne.n	8009e00 <_dtoa_r+0xb8>
 8009dc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dca:	f242 730f 	movw	r3, #9999	; 0x270f
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009dd4:	4333      	orrs	r3, r6
 8009dd6:	f000 8593 	beq.w	800a900 <_dtoa_r+0xbb8>
 8009dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ddc:	b963      	cbnz	r3, 8009df8 <_dtoa_r+0xb0>
 8009dde:	4b97      	ldr	r3, [pc, #604]	; (800a03c <_dtoa_r+0x2f4>)
 8009de0:	e027      	b.n	8009e32 <_dtoa_r+0xea>
 8009de2:	4b97      	ldr	r3, [pc, #604]	; (800a040 <_dtoa_r+0x2f8>)
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	3308      	adds	r3, #8
 8009de8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	9800      	ldr	r0, [sp, #0]
 8009dee:	b013      	add	sp, #76	; 0x4c
 8009df0:	ecbd 8b04 	vpop	{d8-d9}
 8009df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df8:	4b90      	ldr	r3, [pc, #576]	; (800a03c <_dtoa_r+0x2f4>)
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	3303      	adds	r3, #3
 8009dfe:	e7f3      	b.n	8009de8 <_dtoa_r+0xa0>
 8009e00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e04:	2200      	movs	r2, #0
 8009e06:	ec51 0b17 	vmov	r0, r1, d7
 8009e0a:	eeb0 8a47 	vmov.f32	s16, s14
 8009e0e:	eef0 8a67 	vmov.f32	s17, s15
 8009e12:	2300      	movs	r3, #0
 8009e14:	f7f6 fe80 	bl	8000b18 <__aeabi_dcmpeq>
 8009e18:	4681      	mov	r9, r0
 8009e1a:	b160      	cbz	r0, 8009e36 <_dtoa_r+0xee>
 8009e1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e1e:	2301      	movs	r3, #1
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f000 8568 	beq.w	800a8fa <_dtoa_r+0xbb2>
 8009e2a:	4b86      	ldr	r3, [pc, #536]	; (800a044 <_dtoa_r+0x2fc>)
 8009e2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	3b01      	subs	r3, #1
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	e7da      	b.n	8009dec <_dtoa_r+0xa4>
 8009e36:	aa10      	add	r2, sp, #64	; 0x40
 8009e38:	a911      	add	r1, sp, #68	; 0x44
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	eeb0 0a48 	vmov.f32	s0, s16
 8009e40:	eef0 0a68 	vmov.f32	s1, s17
 8009e44:	f001 f8e0 	bl	800b008 <__d2b>
 8009e48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009e4c:	4682      	mov	sl, r0
 8009e4e:	2d00      	cmp	r5, #0
 8009e50:	d07f      	beq.n	8009f52 <_dtoa_r+0x20a>
 8009e52:	ee18 3a90 	vmov	r3, s17
 8009e56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009e5e:	ec51 0b18 	vmov	r0, r1, d8
 8009e62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009e66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009e6e:	4619      	mov	r1, r3
 8009e70:	2200      	movs	r2, #0
 8009e72:	4b75      	ldr	r3, [pc, #468]	; (800a048 <_dtoa_r+0x300>)
 8009e74:	f7f6 fa30 	bl	80002d8 <__aeabi_dsub>
 8009e78:	a367      	add	r3, pc, #412	; (adr r3, 800a018 <_dtoa_r+0x2d0>)
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	f7f6 fbe3 	bl	8000648 <__aeabi_dmul>
 8009e82:	a367      	add	r3, pc, #412	; (adr r3, 800a020 <_dtoa_r+0x2d8>)
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	f7f6 fa28 	bl	80002dc <__adddf3>
 8009e8c:	4606      	mov	r6, r0
 8009e8e:	4628      	mov	r0, r5
 8009e90:	460f      	mov	r7, r1
 8009e92:	f7f6 fb6f 	bl	8000574 <__aeabi_i2d>
 8009e96:	a364      	add	r3, pc, #400	; (adr r3, 800a028 <_dtoa_r+0x2e0>)
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	f7f6 fbd4 	bl	8000648 <__aeabi_dmul>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	4639      	mov	r1, r7
 8009ea8:	f7f6 fa18 	bl	80002dc <__adddf3>
 8009eac:	4606      	mov	r6, r0
 8009eae:	460f      	mov	r7, r1
 8009eb0:	f7f6 fe7a 	bl	8000ba8 <__aeabi_d2iz>
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	4683      	mov	fp, r0
 8009eb8:	2300      	movs	r3, #0
 8009eba:	4630      	mov	r0, r6
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	f7f6 fe35 	bl	8000b2c <__aeabi_dcmplt>
 8009ec2:	b148      	cbz	r0, 8009ed8 <_dtoa_r+0x190>
 8009ec4:	4658      	mov	r0, fp
 8009ec6:	f7f6 fb55 	bl	8000574 <__aeabi_i2d>
 8009eca:	4632      	mov	r2, r6
 8009ecc:	463b      	mov	r3, r7
 8009ece:	f7f6 fe23 	bl	8000b18 <__aeabi_dcmpeq>
 8009ed2:	b908      	cbnz	r0, 8009ed8 <_dtoa_r+0x190>
 8009ed4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ed8:	f1bb 0f16 	cmp.w	fp, #22
 8009edc:	d857      	bhi.n	8009f8e <_dtoa_r+0x246>
 8009ede:	4b5b      	ldr	r3, [pc, #364]	; (800a04c <_dtoa_r+0x304>)
 8009ee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	ec51 0b18 	vmov	r0, r1, d8
 8009eec:	f7f6 fe1e 	bl	8000b2c <__aeabi_dcmplt>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d04e      	beq.n	8009f92 <_dtoa_r+0x24a>
 8009ef4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ef8:	2300      	movs	r3, #0
 8009efa:	930c      	str	r3, [sp, #48]	; 0x30
 8009efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009efe:	1b5b      	subs	r3, r3, r5
 8009f00:	1e5a      	subs	r2, r3, #1
 8009f02:	bf45      	ittet	mi
 8009f04:	f1c3 0301 	rsbmi	r3, r3, #1
 8009f08:	9305      	strmi	r3, [sp, #20]
 8009f0a:	2300      	movpl	r3, #0
 8009f0c:	2300      	movmi	r3, #0
 8009f0e:	9206      	str	r2, [sp, #24]
 8009f10:	bf54      	ite	pl
 8009f12:	9305      	strpl	r3, [sp, #20]
 8009f14:	9306      	strmi	r3, [sp, #24]
 8009f16:	f1bb 0f00 	cmp.w	fp, #0
 8009f1a:	db3c      	blt.n	8009f96 <_dtoa_r+0x24e>
 8009f1c:	9b06      	ldr	r3, [sp, #24]
 8009f1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009f22:	445b      	add	r3, fp
 8009f24:	9306      	str	r3, [sp, #24]
 8009f26:	2300      	movs	r3, #0
 8009f28:	9308      	str	r3, [sp, #32]
 8009f2a:	9b07      	ldr	r3, [sp, #28]
 8009f2c:	2b09      	cmp	r3, #9
 8009f2e:	d868      	bhi.n	800a002 <_dtoa_r+0x2ba>
 8009f30:	2b05      	cmp	r3, #5
 8009f32:	bfc4      	itt	gt
 8009f34:	3b04      	subgt	r3, #4
 8009f36:	9307      	strgt	r3, [sp, #28]
 8009f38:	9b07      	ldr	r3, [sp, #28]
 8009f3a:	f1a3 0302 	sub.w	r3, r3, #2
 8009f3e:	bfcc      	ite	gt
 8009f40:	2500      	movgt	r5, #0
 8009f42:	2501      	movle	r5, #1
 8009f44:	2b03      	cmp	r3, #3
 8009f46:	f200 8085 	bhi.w	800a054 <_dtoa_r+0x30c>
 8009f4a:	e8df f003 	tbb	[pc, r3]
 8009f4e:	3b2e      	.short	0x3b2e
 8009f50:	5839      	.short	0x5839
 8009f52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009f56:	441d      	add	r5, r3
 8009f58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009f5c:	2b20      	cmp	r3, #32
 8009f5e:	bfc1      	itttt	gt
 8009f60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f64:	fa08 f803 	lslgt.w	r8, r8, r3
 8009f68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009f6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009f70:	bfd6      	itet	le
 8009f72:	f1c3 0320 	rsble	r3, r3, #32
 8009f76:	ea48 0003 	orrgt.w	r0, r8, r3
 8009f7a:	fa06 f003 	lslle.w	r0, r6, r3
 8009f7e:	f7f6 fae9 	bl	8000554 <__aeabi_ui2d>
 8009f82:	2201      	movs	r2, #1
 8009f84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009f88:	3d01      	subs	r5, #1
 8009f8a:	920e      	str	r2, [sp, #56]	; 0x38
 8009f8c:	e76f      	b.n	8009e6e <_dtoa_r+0x126>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e7b3      	b.n	8009efa <_dtoa_r+0x1b2>
 8009f92:	900c      	str	r0, [sp, #48]	; 0x30
 8009f94:	e7b2      	b.n	8009efc <_dtoa_r+0x1b4>
 8009f96:	9b05      	ldr	r3, [sp, #20]
 8009f98:	eba3 030b 	sub.w	r3, r3, fp
 8009f9c:	9305      	str	r3, [sp, #20]
 8009f9e:	f1cb 0300 	rsb	r3, fp, #0
 8009fa2:	9308      	str	r3, [sp, #32]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fa8:	e7bf      	b.n	8009f2a <_dtoa_r+0x1e2>
 8009faa:	2300      	movs	r3, #0
 8009fac:	9309      	str	r3, [sp, #36]	; 0x24
 8009fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	dc52      	bgt.n	800a05a <_dtoa_r+0x312>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	9301      	str	r3, [sp, #4]
 8009fb8:	9304      	str	r3, [sp, #16]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	920a      	str	r2, [sp, #40]	; 0x28
 8009fbe:	e00b      	b.n	8009fd8 <_dtoa_r+0x290>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e7f3      	b.n	8009fac <_dtoa_r+0x264>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fca:	445b      	add	r3, fp
 8009fcc:	9301      	str	r3, [sp, #4]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	9304      	str	r3, [sp, #16]
 8009fd4:	bfb8      	it	lt
 8009fd6:	2301      	movlt	r3, #1
 8009fd8:	69e0      	ldr	r0, [r4, #28]
 8009fda:	2100      	movs	r1, #0
 8009fdc:	2204      	movs	r2, #4
 8009fde:	f102 0614 	add.w	r6, r2, #20
 8009fe2:	429e      	cmp	r6, r3
 8009fe4:	d93d      	bls.n	800a062 <_dtoa_r+0x31a>
 8009fe6:	6041      	str	r1, [r0, #4]
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f000 fceb 	bl	800a9c4 <_Balloc>
 8009fee:	9000      	str	r0, [sp, #0]
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d139      	bne.n	800a068 <_dtoa_r+0x320>
 8009ff4:	4b16      	ldr	r3, [pc, #88]	; (800a050 <_dtoa_r+0x308>)
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	f240 11af 	movw	r1, #431	; 0x1af
 8009ffc:	e6bd      	b.n	8009d7a <_dtoa_r+0x32>
 8009ffe:	2301      	movs	r3, #1
 800a000:	e7e1      	b.n	8009fc6 <_dtoa_r+0x27e>
 800a002:	2501      	movs	r5, #1
 800a004:	2300      	movs	r3, #0
 800a006:	9307      	str	r3, [sp, #28]
 800a008:	9509      	str	r5, [sp, #36]	; 0x24
 800a00a:	f04f 33ff 	mov.w	r3, #4294967295
 800a00e:	9301      	str	r3, [sp, #4]
 800a010:	9304      	str	r3, [sp, #16]
 800a012:	2200      	movs	r2, #0
 800a014:	2312      	movs	r3, #18
 800a016:	e7d1      	b.n	8009fbc <_dtoa_r+0x274>
 800a018:	636f4361 	.word	0x636f4361
 800a01c:	3fd287a7 	.word	0x3fd287a7
 800a020:	8b60c8b3 	.word	0x8b60c8b3
 800a024:	3fc68a28 	.word	0x3fc68a28
 800a028:	509f79fb 	.word	0x509f79fb
 800a02c:	3fd34413 	.word	0x3fd34413
 800a030:	0800b8d1 	.word	0x0800b8d1
 800a034:	0800b8e8 	.word	0x0800b8e8
 800a038:	7ff00000 	.word	0x7ff00000
 800a03c:	0800b8cd 	.word	0x0800b8cd
 800a040:	0800b8c4 	.word	0x0800b8c4
 800a044:	0800b8a1 	.word	0x0800b8a1
 800a048:	3ff80000 	.word	0x3ff80000
 800a04c:	0800b9d8 	.word	0x0800b9d8
 800a050:	0800b940 	.word	0x0800b940
 800a054:	2301      	movs	r3, #1
 800a056:	9309      	str	r3, [sp, #36]	; 0x24
 800a058:	e7d7      	b.n	800a00a <_dtoa_r+0x2c2>
 800a05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a05c:	9301      	str	r3, [sp, #4]
 800a05e:	9304      	str	r3, [sp, #16]
 800a060:	e7ba      	b.n	8009fd8 <_dtoa_r+0x290>
 800a062:	3101      	adds	r1, #1
 800a064:	0052      	lsls	r2, r2, #1
 800a066:	e7ba      	b.n	8009fde <_dtoa_r+0x296>
 800a068:	69e3      	ldr	r3, [r4, #28]
 800a06a:	9a00      	ldr	r2, [sp, #0]
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	9b04      	ldr	r3, [sp, #16]
 800a070:	2b0e      	cmp	r3, #14
 800a072:	f200 80a8 	bhi.w	800a1c6 <_dtoa_r+0x47e>
 800a076:	2d00      	cmp	r5, #0
 800a078:	f000 80a5 	beq.w	800a1c6 <_dtoa_r+0x47e>
 800a07c:	f1bb 0f00 	cmp.w	fp, #0
 800a080:	dd38      	ble.n	800a0f4 <_dtoa_r+0x3ac>
 800a082:	4bc0      	ldr	r3, [pc, #768]	; (800a384 <_dtoa_r+0x63c>)
 800a084:	f00b 020f 	and.w	r2, fp, #15
 800a088:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a08c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a090:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a094:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a098:	d019      	beq.n	800a0ce <_dtoa_r+0x386>
 800a09a:	4bbb      	ldr	r3, [pc, #748]	; (800a388 <_dtoa_r+0x640>)
 800a09c:	ec51 0b18 	vmov	r0, r1, d8
 800a0a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0a4:	f7f6 fbfa 	bl	800089c <__aeabi_ddiv>
 800a0a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0ac:	f008 080f 	and.w	r8, r8, #15
 800a0b0:	2503      	movs	r5, #3
 800a0b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a388 <_dtoa_r+0x640>
 800a0b6:	f1b8 0f00 	cmp.w	r8, #0
 800a0ba:	d10a      	bne.n	800a0d2 <_dtoa_r+0x38a>
 800a0bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0c0:	4632      	mov	r2, r6
 800a0c2:	463b      	mov	r3, r7
 800a0c4:	f7f6 fbea 	bl	800089c <__aeabi_ddiv>
 800a0c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0cc:	e02b      	b.n	800a126 <_dtoa_r+0x3de>
 800a0ce:	2502      	movs	r5, #2
 800a0d0:	e7ef      	b.n	800a0b2 <_dtoa_r+0x36a>
 800a0d2:	f018 0f01 	tst.w	r8, #1
 800a0d6:	d008      	beq.n	800a0ea <_dtoa_r+0x3a2>
 800a0d8:	4630      	mov	r0, r6
 800a0da:	4639      	mov	r1, r7
 800a0dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a0e0:	f7f6 fab2 	bl	8000648 <__aeabi_dmul>
 800a0e4:	3501      	adds	r5, #1
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	460f      	mov	r7, r1
 800a0ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a0ee:	f109 0908 	add.w	r9, r9, #8
 800a0f2:	e7e0      	b.n	800a0b6 <_dtoa_r+0x36e>
 800a0f4:	f000 809f 	beq.w	800a236 <_dtoa_r+0x4ee>
 800a0f8:	f1cb 0600 	rsb	r6, fp, #0
 800a0fc:	4ba1      	ldr	r3, [pc, #644]	; (800a384 <_dtoa_r+0x63c>)
 800a0fe:	4fa2      	ldr	r7, [pc, #648]	; (800a388 <_dtoa_r+0x640>)
 800a100:	f006 020f 	and.w	r2, r6, #15
 800a104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10c:	ec51 0b18 	vmov	r0, r1, d8
 800a110:	f7f6 fa9a 	bl	8000648 <__aeabi_dmul>
 800a114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a118:	1136      	asrs	r6, r6, #4
 800a11a:	2300      	movs	r3, #0
 800a11c:	2502      	movs	r5, #2
 800a11e:	2e00      	cmp	r6, #0
 800a120:	d17e      	bne.n	800a220 <_dtoa_r+0x4d8>
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1d0      	bne.n	800a0c8 <_dtoa_r+0x380>
 800a126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a128:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f000 8084 	beq.w	800a23a <_dtoa_r+0x4f2>
 800a132:	4b96      	ldr	r3, [pc, #600]	; (800a38c <_dtoa_r+0x644>)
 800a134:	2200      	movs	r2, #0
 800a136:	4640      	mov	r0, r8
 800a138:	4649      	mov	r1, r9
 800a13a:	f7f6 fcf7 	bl	8000b2c <__aeabi_dcmplt>
 800a13e:	2800      	cmp	r0, #0
 800a140:	d07b      	beq.n	800a23a <_dtoa_r+0x4f2>
 800a142:	9b04      	ldr	r3, [sp, #16]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d078      	beq.n	800a23a <_dtoa_r+0x4f2>
 800a148:	9b01      	ldr	r3, [sp, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	dd39      	ble.n	800a1c2 <_dtoa_r+0x47a>
 800a14e:	4b90      	ldr	r3, [pc, #576]	; (800a390 <_dtoa_r+0x648>)
 800a150:	2200      	movs	r2, #0
 800a152:	4640      	mov	r0, r8
 800a154:	4649      	mov	r1, r9
 800a156:	f7f6 fa77 	bl	8000648 <__aeabi_dmul>
 800a15a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a15e:	9e01      	ldr	r6, [sp, #4]
 800a160:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a164:	3501      	adds	r5, #1
 800a166:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a16a:	4628      	mov	r0, r5
 800a16c:	f7f6 fa02 	bl	8000574 <__aeabi_i2d>
 800a170:	4642      	mov	r2, r8
 800a172:	464b      	mov	r3, r9
 800a174:	f7f6 fa68 	bl	8000648 <__aeabi_dmul>
 800a178:	4b86      	ldr	r3, [pc, #536]	; (800a394 <_dtoa_r+0x64c>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	f7f6 f8ae 	bl	80002dc <__adddf3>
 800a180:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a188:	9303      	str	r3, [sp, #12]
 800a18a:	2e00      	cmp	r6, #0
 800a18c:	d158      	bne.n	800a240 <_dtoa_r+0x4f8>
 800a18e:	4b82      	ldr	r3, [pc, #520]	; (800a398 <_dtoa_r+0x650>)
 800a190:	2200      	movs	r2, #0
 800a192:	4640      	mov	r0, r8
 800a194:	4649      	mov	r1, r9
 800a196:	f7f6 f89f 	bl	80002d8 <__aeabi_dsub>
 800a19a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a19e:	4680      	mov	r8, r0
 800a1a0:	4689      	mov	r9, r1
 800a1a2:	f7f6 fce1 	bl	8000b68 <__aeabi_dcmpgt>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	f040 8296 	bne.w	800a6d8 <_dtoa_r+0x990>
 800a1ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a1b0:	4640      	mov	r0, r8
 800a1b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	f7f6 fcb8 	bl	8000b2c <__aeabi_dcmplt>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	f040 8289 	bne.w	800a6d4 <_dtoa_r+0x98c>
 800a1c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a1c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f2c0 814e 	blt.w	800a46a <_dtoa_r+0x722>
 800a1ce:	f1bb 0f0e 	cmp.w	fp, #14
 800a1d2:	f300 814a 	bgt.w	800a46a <_dtoa_r+0x722>
 800a1d6:	4b6b      	ldr	r3, [pc, #428]	; (800a384 <_dtoa_r+0x63c>)
 800a1d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a1dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f280 80dc 	bge.w	800a3a0 <_dtoa_r+0x658>
 800a1e8:	9b04      	ldr	r3, [sp, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f300 80d8 	bgt.w	800a3a0 <_dtoa_r+0x658>
 800a1f0:	f040 826f 	bne.w	800a6d2 <_dtoa_r+0x98a>
 800a1f4:	4b68      	ldr	r3, [pc, #416]	; (800a398 <_dtoa_r+0x650>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	4640      	mov	r0, r8
 800a1fa:	4649      	mov	r1, r9
 800a1fc:	f7f6 fa24 	bl	8000648 <__aeabi_dmul>
 800a200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a204:	f7f6 fca6 	bl	8000b54 <__aeabi_dcmpge>
 800a208:	9e04      	ldr	r6, [sp, #16]
 800a20a:	4637      	mov	r7, r6
 800a20c:	2800      	cmp	r0, #0
 800a20e:	f040 8245 	bne.w	800a69c <_dtoa_r+0x954>
 800a212:	9d00      	ldr	r5, [sp, #0]
 800a214:	2331      	movs	r3, #49	; 0x31
 800a216:	f805 3b01 	strb.w	r3, [r5], #1
 800a21a:	f10b 0b01 	add.w	fp, fp, #1
 800a21e:	e241      	b.n	800a6a4 <_dtoa_r+0x95c>
 800a220:	07f2      	lsls	r2, r6, #31
 800a222:	d505      	bpl.n	800a230 <_dtoa_r+0x4e8>
 800a224:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a228:	f7f6 fa0e 	bl	8000648 <__aeabi_dmul>
 800a22c:	3501      	adds	r5, #1
 800a22e:	2301      	movs	r3, #1
 800a230:	1076      	asrs	r6, r6, #1
 800a232:	3708      	adds	r7, #8
 800a234:	e773      	b.n	800a11e <_dtoa_r+0x3d6>
 800a236:	2502      	movs	r5, #2
 800a238:	e775      	b.n	800a126 <_dtoa_r+0x3de>
 800a23a:	9e04      	ldr	r6, [sp, #16]
 800a23c:	465f      	mov	r7, fp
 800a23e:	e792      	b.n	800a166 <_dtoa_r+0x41e>
 800a240:	9900      	ldr	r1, [sp, #0]
 800a242:	4b50      	ldr	r3, [pc, #320]	; (800a384 <_dtoa_r+0x63c>)
 800a244:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a248:	4431      	add	r1, r6
 800a24a:	9102      	str	r1, [sp, #8]
 800a24c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a24e:	eeb0 9a47 	vmov.f32	s18, s14
 800a252:	eef0 9a67 	vmov.f32	s19, s15
 800a256:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a25a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a25e:	2900      	cmp	r1, #0
 800a260:	d044      	beq.n	800a2ec <_dtoa_r+0x5a4>
 800a262:	494e      	ldr	r1, [pc, #312]	; (800a39c <_dtoa_r+0x654>)
 800a264:	2000      	movs	r0, #0
 800a266:	f7f6 fb19 	bl	800089c <__aeabi_ddiv>
 800a26a:	ec53 2b19 	vmov	r2, r3, d9
 800a26e:	f7f6 f833 	bl	80002d8 <__aeabi_dsub>
 800a272:	9d00      	ldr	r5, [sp, #0]
 800a274:	ec41 0b19 	vmov	d9, r0, r1
 800a278:	4649      	mov	r1, r9
 800a27a:	4640      	mov	r0, r8
 800a27c:	f7f6 fc94 	bl	8000ba8 <__aeabi_d2iz>
 800a280:	4606      	mov	r6, r0
 800a282:	f7f6 f977 	bl	8000574 <__aeabi_i2d>
 800a286:	4602      	mov	r2, r0
 800a288:	460b      	mov	r3, r1
 800a28a:	4640      	mov	r0, r8
 800a28c:	4649      	mov	r1, r9
 800a28e:	f7f6 f823 	bl	80002d8 <__aeabi_dsub>
 800a292:	3630      	adds	r6, #48	; 0x30
 800a294:	f805 6b01 	strb.w	r6, [r5], #1
 800a298:	ec53 2b19 	vmov	r2, r3, d9
 800a29c:	4680      	mov	r8, r0
 800a29e:	4689      	mov	r9, r1
 800a2a0:	f7f6 fc44 	bl	8000b2c <__aeabi_dcmplt>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	d164      	bne.n	800a372 <_dtoa_r+0x62a>
 800a2a8:	4642      	mov	r2, r8
 800a2aa:	464b      	mov	r3, r9
 800a2ac:	4937      	ldr	r1, [pc, #220]	; (800a38c <_dtoa_r+0x644>)
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	f7f6 f812 	bl	80002d8 <__aeabi_dsub>
 800a2b4:	ec53 2b19 	vmov	r2, r3, d9
 800a2b8:	f7f6 fc38 	bl	8000b2c <__aeabi_dcmplt>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	f040 80b6 	bne.w	800a42e <_dtoa_r+0x6e6>
 800a2c2:	9b02      	ldr	r3, [sp, #8]
 800a2c4:	429d      	cmp	r5, r3
 800a2c6:	f43f af7c 	beq.w	800a1c2 <_dtoa_r+0x47a>
 800a2ca:	4b31      	ldr	r3, [pc, #196]	; (800a390 <_dtoa_r+0x648>)
 800a2cc:	ec51 0b19 	vmov	r0, r1, d9
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f7f6 f9b9 	bl	8000648 <__aeabi_dmul>
 800a2d6:	4b2e      	ldr	r3, [pc, #184]	; (800a390 <_dtoa_r+0x648>)
 800a2d8:	ec41 0b19 	vmov	d9, r0, r1
 800a2dc:	2200      	movs	r2, #0
 800a2de:	4640      	mov	r0, r8
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	f7f6 f9b1 	bl	8000648 <__aeabi_dmul>
 800a2e6:	4680      	mov	r8, r0
 800a2e8:	4689      	mov	r9, r1
 800a2ea:	e7c5      	b.n	800a278 <_dtoa_r+0x530>
 800a2ec:	ec51 0b17 	vmov	r0, r1, d7
 800a2f0:	f7f6 f9aa 	bl	8000648 <__aeabi_dmul>
 800a2f4:	9b02      	ldr	r3, [sp, #8]
 800a2f6:	9d00      	ldr	r5, [sp, #0]
 800a2f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2fa:	ec41 0b19 	vmov	d9, r0, r1
 800a2fe:	4649      	mov	r1, r9
 800a300:	4640      	mov	r0, r8
 800a302:	f7f6 fc51 	bl	8000ba8 <__aeabi_d2iz>
 800a306:	4606      	mov	r6, r0
 800a308:	f7f6 f934 	bl	8000574 <__aeabi_i2d>
 800a30c:	3630      	adds	r6, #48	; 0x30
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	4640      	mov	r0, r8
 800a314:	4649      	mov	r1, r9
 800a316:	f7f5 ffdf 	bl	80002d8 <__aeabi_dsub>
 800a31a:	f805 6b01 	strb.w	r6, [r5], #1
 800a31e:	9b02      	ldr	r3, [sp, #8]
 800a320:	429d      	cmp	r5, r3
 800a322:	4680      	mov	r8, r0
 800a324:	4689      	mov	r9, r1
 800a326:	f04f 0200 	mov.w	r2, #0
 800a32a:	d124      	bne.n	800a376 <_dtoa_r+0x62e>
 800a32c:	4b1b      	ldr	r3, [pc, #108]	; (800a39c <_dtoa_r+0x654>)
 800a32e:	ec51 0b19 	vmov	r0, r1, d9
 800a332:	f7f5 ffd3 	bl	80002dc <__adddf3>
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	4640      	mov	r0, r8
 800a33c:	4649      	mov	r1, r9
 800a33e:	f7f6 fc13 	bl	8000b68 <__aeabi_dcmpgt>
 800a342:	2800      	cmp	r0, #0
 800a344:	d173      	bne.n	800a42e <_dtoa_r+0x6e6>
 800a346:	ec53 2b19 	vmov	r2, r3, d9
 800a34a:	4914      	ldr	r1, [pc, #80]	; (800a39c <_dtoa_r+0x654>)
 800a34c:	2000      	movs	r0, #0
 800a34e:	f7f5 ffc3 	bl	80002d8 <__aeabi_dsub>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	4640      	mov	r0, r8
 800a358:	4649      	mov	r1, r9
 800a35a:	f7f6 fbe7 	bl	8000b2c <__aeabi_dcmplt>
 800a35e:	2800      	cmp	r0, #0
 800a360:	f43f af2f 	beq.w	800a1c2 <_dtoa_r+0x47a>
 800a364:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a366:	1e6b      	subs	r3, r5, #1
 800a368:	930f      	str	r3, [sp, #60]	; 0x3c
 800a36a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a36e:	2b30      	cmp	r3, #48	; 0x30
 800a370:	d0f8      	beq.n	800a364 <_dtoa_r+0x61c>
 800a372:	46bb      	mov	fp, r7
 800a374:	e04a      	b.n	800a40c <_dtoa_r+0x6c4>
 800a376:	4b06      	ldr	r3, [pc, #24]	; (800a390 <_dtoa_r+0x648>)
 800a378:	f7f6 f966 	bl	8000648 <__aeabi_dmul>
 800a37c:	4680      	mov	r8, r0
 800a37e:	4689      	mov	r9, r1
 800a380:	e7bd      	b.n	800a2fe <_dtoa_r+0x5b6>
 800a382:	bf00      	nop
 800a384:	0800b9d8 	.word	0x0800b9d8
 800a388:	0800b9b0 	.word	0x0800b9b0
 800a38c:	3ff00000 	.word	0x3ff00000
 800a390:	40240000 	.word	0x40240000
 800a394:	401c0000 	.word	0x401c0000
 800a398:	40140000 	.word	0x40140000
 800a39c:	3fe00000 	.word	0x3fe00000
 800a3a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a3a4:	9d00      	ldr	r5, [sp, #0]
 800a3a6:	4642      	mov	r2, r8
 800a3a8:	464b      	mov	r3, r9
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	f7f6 fa75 	bl	800089c <__aeabi_ddiv>
 800a3b2:	f7f6 fbf9 	bl	8000ba8 <__aeabi_d2iz>
 800a3b6:	9001      	str	r0, [sp, #4]
 800a3b8:	f7f6 f8dc 	bl	8000574 <__aeabi_i2d>
 800a3bc:	4642      	mov	r2, r8
 800a3be:	464b      	mov	r3, r9
 800a3c0:	f7f6 f942 	bl	8000648 <__aeabi_dmul>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	f7f5 ff84 	bl	80002d8 <__aeabi_dsub>
 800a3d0:	9e01      	ldr	r6, [sp, #4]
 800a3d2:	9f04      	ldr	r7, [sp, #16]
 800a3d4:	3630      	adds	r6, #48	; 0x30
 800a3d6:	f805 6b01 	strb.w	r6, [r5], #1
 800a3da:	9e00      	ldr	r6, [sp, #0]
 800a3dc:	1bae      	subs	r6, r5, r6
 800a3de:	42b7      	cmp	r7, r6
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	d134      	bne.n	800a450 <_dtoa_r+0x708>
 800a3e6:	f7f5 ff79 	bl	80002dc <__adddf3>
 800a3ea:	4642      	mov	r2, r8
 800a3ec:	464b      	mov	r3, r9
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	460f      	mov	r7, r1
 800a3f2:	f7f6 fbb9 	bl	8000b68 <__aeabi_dcmpgt>
 800a3f6:	b9c8      	cbnz	r0, 800a42c <_dtoa_r+0x6e4>
 800a3f8:	4642      	mov	r2, r8
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	4639      	mov	r1, r7
 800a400:	f7f6 fb8a 	bl	8000b18 <__aeabi_dcmpeq>
 800a404:	b110      	cbz	r0, 800a40c <_dtoa_r+0x6c4>
 800a406:	9b01      	ldr	r3, [sp, #4]
 800a408:	07db      	lsls	r3, r3, #31
 800a40a:	d40f      	bmi.n	800a42c <_dtoa_r+0x6e4>
 800a40c:	4651      	mov	r1, sl
 800a40e:	4620      	mov	r0, r4
 800a410:	f000 fb18 	bl	800aa44 <_Bfree>
 800a414:	2300      	movs	r3, #0
 800a416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a418:	702b      	strb	r3, [r5, #0]
 800a41a:	f10b 0301 	add.w	r3, fp, #1
 800a41e:	6013      	str	r3, [r2, #0]
 800a420:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a422:	2b00      	cmp	r3, #0
 800a424:	f43f ace2 	beq.w	8009dec <_dtoa_r+0xa4>
 800a428:	601d      	str	r5, [r3, #0]
 800a42a:	e4df      	b.n	8009dec <_dtoa_r+0xa4>
 800a42c:	465f      	mov	r7, fp
 800a42e:	462b      	mov	r3, r5
 800a430:	461d      	mov	r5, r3
 800a432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a436:	2a39      	cmp	r2, #57	; 0x39
 800a438:	d106      	bne.n	800a448 <_dtoa_r+0x700>
 800a43a:	9a00      	ldr	r2, [sp, #0]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d1f7      	bne.n	800a430 <_dtoa_r+0x6e8>
 800a440:	9900      	ldr	r1, [sp, #0]
 800a442:	2230      	movs	r2, #48	; 0x30
 800a444:	3701      	adds	r7, #1
 800a446:	700a      	strb	r2, [r1, #0]
 800a448:	781a      	ldrb	r2, [r3, #0]
 800a44a:	3201      	adds	r2, #1
 800a44c:	701a      	strb	r2, [r3, #0]
 800a44e:	e790      	b.n	800a372 <_dtoa_r+0x62a>
 800a450:	4ba3      	ldr	r3, [pc, #652]	; (800a6e0 <_dtoa_r+0x998>)
 800a452:	2200      	movs	r2, #0
 800a454:	f7f6 f8f8 	bl	8000648 <__aeabi_dmul>
 800a458:	2200      	movs	r2, #0
 800a45a:	2300      	movs	r3, #0
 800a45c:	4606      	mov	r6, r0
 800a45e:	460f      	mov	r7, r1
 800a460:	f7f6 fb5a 	bl	8000b18 <__aeabi_dcmpeq>
 800a464:	2800      	cmp	r0, #0
 800a466:	d09e      	beq.n	800a3a6 <_dtoa_r+0x65e>
 800a468:	e7d0      	b.n	800a40c <_dtoa_r+0x6c4>
 800a46a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a46c:	2a00      	cmp	r2, #0
 800a46e:	f000 80ca 	beq.w	800a606 <_dtoa_r+0x8be>
 800a472:	9a07      	ldr	r2, [sp, #28]
 800a474:	2a01      	cmp	r2, #1
 800a476:	f300 80ad 	bgt.w	800a5d4 <_dtoa_r+0x88c>
 800a47a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a47c:	2a00      	cmp	r2, #0
 800a47e:	f000 80a5 	beq.w	800a5cc <_dtoa_r+0x884>
 800a482:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a486:	9e08      	ldr	r6, [sp, #32]
 800a488:	9d05      	ldr	r5, [sp, #20]
 800a48a:	9a05      	ldr	r2, [sp, #20]
 800a48c:	441a      	add	r2, r3
 800a48e:	9205      	str	r2, [sp, #20]
 800a490:	9a06      	ldr	r2, [sp, #24]
 800a492:	2101      	movs	r1, #1
 800a494:	441a      	add	r2, r3
 800a496:	4620      	mov	r0, r4
 800a498:	9206      	str	r2, [sp, #24]
 800a49a:	f000 fb89 	bl	800abb0 <__i2b>
 800a49e:	4607      	mov	r7, r0
 800a4a0:	b165      	cbz	r5, 800a4bc <_dtoa_r+0x774>
 800a4a2:	9b06      	ldr	r3, [sp, #24]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	dd09      	ble.n	800a4bc <_dtoa_r+0x774>
 800a4a8:	42ab      	cmp	r3, r5
 800a4aa:	9a05      	ldr	r2, [sp, #20]
 800a4ac:	bfa8      	it	ge
 800a4ae:	462b      	movge	r3, r5
 800a4b0:	1ad2      	subs	r2, r2, r3
 800a4b2:	9205      	str	r2, [sp, #20]
 800a4b4:	9a06      	ldr	r2, [sp, #24]
 800a4b6:	1aed      	subs	r5, r5, r3
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	9306      	str	r3, [sp, #24]
 800a4bc:	9b08      	ldr	r3, [sp, #32]
 800a4be:	b1f3      	cbz	r3, 800a4fe <_dtoa_r+0x7b6>
 800a4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 80a3 	beq.w	800a60e <_dtoa_r+0x8c6>
 800a4c8:	2e00      	cmp	r6, #0
 800a4ca:	dd10      	ble.n	800a4ee <_dtoa_r+0x7a6>
 800a4cc:	4639      	mov	r1, r7
 800a4ce:	4632      	mov	r2, r6
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f000 fc2d 	bl	800ad30 <__pow5mult>
 800a4d6:	4652      	mov	r2, sl
 800a4d8:	4601      	mov	r1, r0
 800a4da:	4607      	mov	r7, r0
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f000 fb7d 	bl	800abdc <__multiply>
 800a4e2:	4651      	mov	r1, sl
 800a4e4:	4680      	mov	r8, r0
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f000 faac 	bl	800aa44 <_Bfree>
 800a4ec:	46c2      	mov	sl, r8
 800a4ee:	9b08      	ldr	r3, [sp, #32]
 800a4f0:	1b9a      	subs	r2, r3, r6
 800a4f2:	d004      	beq.n	800a4fe <_dtoa_r+0x7b6>
 800a4f4:	4651      	mov	r1, sl
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 fc1a 	bl	800ad30 <__pow5mult>
 800a4fc:	4682      	mov	sl, r0
 800a4fe:	2101      	movs	r1, #1
 800a500:	4620      	mov	r0, r4
 800a502:	f000 fb55 	bl	800abb0 <__i2b>
 800a506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a508:	2b00      	cmp	r3, #0
 800a50a:	4606      	mov	r6, r0
 800a50c:	f340 8081 	ble.w	800a612 <_dtoa_r+0x8ca>
 800a510:	461a      	mov	r2, r3
 800a512:	4601      	mov	r1, r0
 800a514:	4620      	mov	r0, r4
 800a516:	f000 fc0b 	bl	800ad30 <__pow5mult>
 800a51a:	9b07      	ldr	r3, [sp, #28]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	4606      	mov	r6, r0
 800a520:	dd7a      	ble.n	800a618 <_dtoa_r+0x8d0>
 800a522:	f04f 0800 	mov.w	r8, #0
 800a526:	6933      	ldr	r3, [r6, #16]
 800a528:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a52c:	6918      	ldr	r0, [r3, #16]
 800a52e:	f000 faf1 	bl	800ab14 <__hi0bits>
 800a532:	f1c0 0020 	rsb	r0, r0, #32
 800a536:	9b06      	ldr	r3, [sp, #24]
 800a538:	4418      	add	r0, r3
 800a53a:	f010 001f 	ands.w	r0, r0, #31
 800a53e:	f000 8094 	beq.w	800a66a <_dtoa_r+0x922>
 800a542:	f1c0 0320 	rsb	r3, r0, #32
 800a546:	2b04      	cmp	r3, #4
 800a548:	f340 8085 	ble.w	800a656 <_dtoa_r+0x90e>
 800a54c:	9b05      	ldr	r3, [sp, #20]
 800a54e:	f1c0 001c 	rsb	r0, r0, #28
 800a552:	4403      	add	r3, r0
 800a554:	9305      	str	r3, [sp, #20]
 800a556:	9b06      	ldr	r3, [sp, #24]
 800a558:	4403      	add	r3, r0
 800a55a:	4405      	add	r5, r0
 800a55c:	9306      	str	r3, [sp, #24]
 800a55e:	9b05      	ldr	r3, [sp, #20]
 800a560:	2b00      	cmp	r3, #0
 800a562:	dd05      	ble.n	800a570 <_dtoa_r+0x828>
 800a564:	4651      	mov	r1, sl
 800a566:	461a      	mov	r2, r3
 800a568:	4620      	mov	r0, r4
 800a56a:	f000 fc3b 	bl	800ade4 <__lshift>
 800a56e:	4682      	mov	sl, r0
 800a570:	9b06      	ldr	r3, [sp, #24]
 800a572:	2b00      	cmp	r3, #0
 800a574:	dd05      	ble.n	800a582 <_dtoa_r+0x83a>
 800a576:	4631      	mov	r1, r6
 800a578:	461a      	mov	r2, r3
 800a57a:	4620      	mov	r0, r4
 800a57c:	f000 fc32 	bl	800ade4 <__lshift>
 800a580:	4606      	mov	r6, r0
 800a582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a584:	2b00      	cmp	r3, #0
 800a586:	d072      	beq.n	800a66e <_dtoa_r+0x926>
 800a588:	4631      	mov	r1, r6
 800a58a:	4650      	mov	r0, sl
 800a58c:	f000 fc96 	bl	800aebc <__mcmp>
 800a590:	2800      	cmp	r0, #0
 800a592:	da6c      	bge.n	800a66e <_dtoa_r+0x926>
 800a594:	2300      	movs	r3, #0
 800a596:	4651      	mov	r1, sl
 800a598:	220a      	movs	r2, #10
 800a59a:	4620      	mov	r0, r4
 800a59c:	f000 fa74 	bl	800aa88 <__multadd>
 800a5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5a6:	4682      	mov	sl, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f000 81b0 	beq.w	800a90e <_dtoa_r+0xbc6>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	4639      	mov	r1, r7
 800a5b2:	220a      	movs	r2, #10
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f000 fa67 	bl	800aa88 <__multadd>
 800a5ba:	9b01      	ldr	r3, [sp, #4]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	4607      	mov	r7, r0
 800a5c0:	f300 8096 	bgt.w	800a6f0 <_dtoa_r+0x9a8>
 800a5c4:	9b07      	ldr	r3, [sp, #28]
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	dc59      	bgt.n	800a67e <_dtoa_r+0x936>
 800a5ca:	e091      	b.n	800a6f0 <_dtoa_r+0x9a8>
 800a5cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a5d2:	e758      	b.n	800a486 <_dtoa_r+0x73e>
 800a5d4:	9b04      	ldr	r3, [sp, #16]
 800a5d6:	1e5e      	subs	r6, r3, #1
 800a5d8:	9b08      	ldr	r3, [sp, #32]
 800a5da:	42b3      	cmp	r3, r6
 800a5dc:	bfbf      	itttt	lt
 800a5de:	9b08      	ldrlt	r3, [sp, #32]
 800a5e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a5e2:	9608      	strlt	r6, [sp, #32]
 800a5e4:	1af3      	sublt	r3, r6, r3
 800a5e6:	bfb4      	ite	lt
 800a5e8:	18d2      	addlt	r2, r2, r3
 800a5ea:	1b9e      	subge	r6, r3, r6
 800a5ec:	9b04      	ldr	r3, [sp, #16]
 800a5ee:	bfbc      	itt	lt
 800a5f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a5f2:	2600      	movlt	r6, #0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	bfb7      	itett	lt
 800a5f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a5fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a600:	1a9d      	sublt	r5, r3, r2
 800a602:	2300      	movlt	r3, #0
 800a604:	e741      	b.n	800a48a <_dtoa_r+0x742>
 800a606:	9e08      	ldr	r6, [sp, #32]
 800a608:	9d05      	ldr	r5, [sp, #20]
 800a60a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a60c:	e748      	b.n	800a4a0 <_dtoa_r+0x758>
 800a60e:	9a08      	ldr	r2, [sp, #32]
 800a610:	e770      	b.n	800a4f4 <_dtoa_r+0x7ac>
 800a612:	9b07      	ldr	r3, [sp, #28]
 800a614:	2b01      	cmp	r3, #1
 800a616:	dc19      	bgt.n	800a64c <_dtoa_r+0x904>
 800a618:	9b02      	ldr	r3, [sp, #8]
 800a61a:	b9bb      	cbnz	r3, 800a64c <_dtoa_r+0x904>
 800a61c:	9b03      	ldr	r3, [sp, #12]
 800a61e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a622:	b99b      	cbnz	r3, 800a64c <_dtoa_r+0x904>
 800a624:	9b03      	ldr	r3, [sp, #12]
 800a626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a62a:	0d1b      	lsrs	r3, r3, #20
 800a62c:	051b      	lsls	r3, r3, #20
 800a62e:	b183      	cbz	r3, 800a652 <_dtoa_r+0x90a>
 800a630:	9b05      	ldr	r3, [sp, #20]
 800a632:	3301      	adds	r3, #1
 800a634:	9305      	str	r3, [sp, #20]
 800a636:	9b06      	ldr	r3, [sp, #24]
 800a638:	3301      	adds	r3, #1
 800a63a:	9306      	str	r3, [sp, #24]
 800a63c:	f04f 0801 	mov.w	r8, #1
 800a640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a642:	2b00      	cmp	r3, #0
 800a644:	f47f af6f 	bne.w	800a526 <_dtoa_r+0x7de>
 800a648:	2001      	movs	r0, #1
 800a64a:	e774      	b.n	800a536 <_dtoa_r+0x7ee>
 800a64c:	f04f 0800 	mov.w	r8, #0
 800a650:	e7f6      	b.n	800a640 <_dtoa_r+0x8f8>
 800a652:	4698      	mov	r8, r3
 800a654:	e7f4      	b.n	800a640 <_dtoa_r+0x8f8>
 800a656:	d082      	beq.n	800a55e <_dtoa_r+0x816>
 800a658:	9a05      	ldr	r2, [sp, #20]
 800a65a:	331c      	adds	r3, #28
 800a65c:	441a      	add	r2, r3
 800a65e:	9205      	str	r2, [sp, #20]
 800a660:	9a06      	ldr	r2, [sp, #24]
 800a662:	441a      	add	r2, r3
 800a664:	441d      	add	r5, r3
 800a666:	9206      	str	r2, [sp, #24]
 800a668:	e779      	b.n	800a55e <_dtoa_r+0x816>
 800a66a:	4603      	mov	r3, r0
 800a66c:	e7f4      	b.n	800a658 <_dtoa_r+0x910>
 800a66e:	9b04      	ldr	r3, [sp, #16]
 800a670:	2b00      	cmp	r3, #0
 800a672:	dc37      	bgt.n	800a6e4 <_dtoa_r+0x99c>
 800a674:	9b07      	ldr	r3, [sp, #28]
 800a676:	2b02      	cmp	r3, #2
 800a678:	dd34      	ble.n	800a6e4 <_dtoa_r+0x99c>
 800a67a:	9b04      	ldr	r3, [sp, #16]
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	9b01      	ldr	r3, [sp, #4]
 800a680:	b963      	cbnz	r3, 800a69c <_dtoa_r+0x954>
 800a682:	4631      	mov	r1, r6
 800a684:	2205      	movs	r2, #5
 800a686:	4620      	mov	r0, r4
 800a688:	f000 f9fe 	bl	800aa88 <__multadd>
 800a68c:	4601      	mov	r1, r0
 800a68e:	4606      	mov	r6, r0
 800a690:	4650      	mov	r0, sl
 800a692:	f000 fc13 	bl	800aebc <__mcmp>
 800a696:	2800      	cmp	r0, #0
 800a698:	f73f adbb 	bgt.w	800a212 <_dtoa_r+0x4ca>
 800a69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a69e:	9d00      	ldr	r5, [sp, #0]
 800a6a0:	ea6f 0b03 	mvn.w	fp, r3
 800a6a4:	f04f 0800 	mov.w	r8, #0
 800a6a8:	4631      	mov	r1, r6
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f000 f9ca 	bl	800aa44 <_Bfree>
 800a6b0:	2f00      	cmp	r7, #0
 800a6b2:	f43f aeab 	beq.w	800a40c <_dtoa_r+0x6c4>
 800a6b6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ba:	d005      	beq.n	800a6c8 <_dtoa_r+0x980>
 800a6bc:	45b8      	cmp	r8, r7
 800a6be:	d003      	beq.n	800a6c8 <_dtoa_r+0x980>
 800a6c0:	4641      	mov	r1, r8
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f000 f9be 	bl	800aa44 <_Bfree>
 800a6c8:	4639      	mov	r1, r7
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f000 f9ba 	bl	800aa44 <_Bfree>
 800a6d0:	e69c      	b.n	800a40c <_dtoa_r+0x6c4>
 800a6d2:	2600      	movs	r6, #0
 800a6d4:	4637      	mov	r7, r6
 800a6d6:	e7e1      	b.n	800a69c <_dtoa_r+0x954>
 800a6d8:	46bb      	mov	fp, r7
 800a6da:	4637      	mov	r7, r6
 800a6dc:	e599      	b.n	800a212 <_dtoa_r+0x4ca>
 800a6de:	bf00      	nop
 800a6e0:	40240000 	.word	0x40240000
 800a6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f000 80c8 	beq.w	800a87c <_dtoa_r+0xb34>
 800a6ec:	9b04      	ldr	r3, [sp, #16]
 800a6ee:	9301      	str	r3, [sp, #4]
 800a6f0:	2d00      	cmp	r5, #0
 800a6f2:	dd05      	ble.n	800a700 <_dtoa_r+0x9b8>
 800a6f4:	4639      	mov	r1, r7
 800a6f6:	462a      	mov	r2, r5
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 fb73 	bl	800ade4 <__lshift>
 800a6fe:	4607      	mov	r7, r0
 800a700:	f1b8 0f00 	cmp.w	r8, #0
 800a704:	d05b      	beq.n	800a7be <_dtoa_r+0xa76>
 800a706:	6879      	ldr	r1, [r7, #4]
 800a708:	4620      	mov	r0, r4
 800a70a:	f000 f95b 	bl	800a9c4 <_Balloc>
 800a70e:	4605      	mov	r5, r0
 800a710:	b928      	cbnz	r0, 800a71e <_dtoa_r+0x9d6>
 800a712:	4b83      	ldr	r3, [pc, #524]	; (800a920 <_dtoa_r+0xbd8>)
 800a714:	4602      	mov	r2, r0
 800a716:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a71a:	f7ff bb2e 	b.w	8009d7a <_dtoa_r+0x32>
 800a71e:	693a      	ldr	r2, [r7, #16]
 800a720:	3202      	adds	r2, #2
 800a722:	0092      	lsls	r2, r2, #2
 800a724:	f107 010c 	add.w	r1, r7, #12
 800a728:	300c      	adds	r0, #12
 800a72a:	f7ff fa76 	bl	8009c1a <memcpy>
 800a72e:	2201      	movs	r2, #1
 800a730:	4629      	mov	r1, r5
 800a732:	4620      	mov	r0, r4
 800a734:	f000 fb56 	bl	800ade4 <__lshift>
 800a738:	9b00      	ldr	r3, [sp, #0]
 800a73a:	3301      	adds	r3, #1
 800a73c:	9304      	str	r3, [sp, #16]
 800a73e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a742:	4413      	add	r3, r2
 800a744:	9308      	str	r3, [sp, #32]
 800a746:	9b02      	ldr	r3, [sp, #8]
 800a748:	f003 0301 	and.w	r3, r3, #1
 800a74c:	46b8      	mov	r8, r7
 800a74e:	9306      	str	r3, [sp, #24]
 800a750:	4607      	mov	r7, r0
 800a752:	9b04      	ldr	r3, [sp, #16]
 800a754:	4631      	mov	r1, r6
 800a756:	3b01      	subs	r3, #1
 800a758:	4650      	mov	r0, sl
 800a75a:	9301      	str	r3, [sp, #4]
 800a75c:	f7ff fa6b 	bl	8009c36 <quorem>
 800a760:	4641      	mov	r1, r8
 800a762:	9002      	str	r0, [sp, #8]
 800a764:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a768:	4650      	mov	r0, sl
 800a76a:	f000 fba7 	bl	800aebc <__mcmp>
 800a76e:	463a      	mov	r2, r7
 800a770:	9005      	str	r0, [sp, #20]
 800a772:	4631      	mov	r1, r6
 800a774:	4620      	mov	r0, r4
 800a776:	f000 fbbd 	bl	800aef4 <__mdiff>
 800a77a:	68c2      	ldr	r2, [r0, #12]
 800a77c:	4605      	mov	r5, r0
 800a77e:	bb02      	cbnz	r2, 800a7c2 <_dtoa_r+0xa7a>
 800a780:	4601      	mov	r1, r0
 800a782:	4650      	mov	r0, sl
 800a784:	f000 fb9a 	bl	800aebc <__mcmp>
 800a788:	4602      	mov	r2, r0
 800a78a:	4629      	mov	r1, r5
 800a78c:	4620      	mov	r0, r4
 800a78e:	9209      	str	r2, [sp, #36]	; 0x24
 800a790:	f000 f958 	bl	800aa44 <_Bfree>
 800a794:	9b07      	ldr	r3, [sp, #28]
 800a796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a798:	9d04      	ldr	r5, [sp, #16]
 800a79a:	ea43 0102 	orr.w	r1, r3, r2
 800a79e:	9b06      	ldr	r3, [sp, #24]
 800a7a0:	4319      	orrs	r1, r3
 800a7a2:	d110      	bne.n	800a7c6 <_dtoa_r+0xa7e>
 800a7a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a7a8:	d029      	beq.n	800a7fe <_dtoa_r+0xab6>
 800a7aa:	9b05      	ldr	r3, [sp, #20]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	dd02      	ble.n	800a7b6 <_dtoa_r+0xa6e>
 800a7b0:	9b02      	ldr	r3, [sp, #8]
 800a7b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a7b6:	9b01      	ldr	r3, [sp, #4]
 800a7b8:	f883 9000 	strb.w	r9, [r3]
 800a7bc:	e774      	b.n	800a6a8 <_dtoa_r+0x960>
 800a7be:	4638      	mov	r0, r7
 800a7c0:	e7ba      	b.n	800a738 <_dtoa_r+0x9f0>
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	e7e1      	b.n	800a78a <_dtoa_r+0xa42>
 800a7c6:	9b05      	ldr	r3, [sp, #20]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	db04      	blt.n	800a7d6 <_dtoa_r+0xa8e>
 800a7cc:	9907      	ldr	r1, [sp, #28]
 800a7ce:	430b      	orrs	r3, r1
 800a7d0:	9906      	ldr	r1, [sp, #24]
 800a7d2:	430b      	orrs	r3, r1
 800a7d4:	d120      	bne.n	800a818 <_dtoa_r+0xad0>
 800a7d6:	2a00      	cmp	r2, #0
 800a7d8:	dded      	ble.n	800a7b6 <_dtoa_r+0xa6e>
 800a7da:	4651      	mov	r1, sl
 800a7dc:	2201      	movs	r2, #1
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f000 fb00 	bl	800ade4 <__lshift>
 800a7e4:	4631      	mov	r1, r6
 800a7e6:	4682      	mov	sl, r0
 800a7e8:	f000 fb68 	bl	800aebc <__mcmp>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	dc03      	bgt.n	800a7f8 <_dtoa_r+0xab0>
 800a7f0:	d1e1      	bne.n	800a7b6 <_dtoa_r+0xa6e>
 800a7f2:	f019 0f01 	tst.w	r9, #1
 800a7f6:	d0de      	beq.n	800a7b6 <_dtoa_r+0xa6e>
 800a7f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a7fc:	d1d8      	bne.n	800a7b0 <_dtoa_r+0xa68>
 800a7fe:	9a01      	ldr	r2, [sp, #4]
 800a800:	2339      	movs	r3, #57	; 0x39
 800a802:	7013      	strb	r3, [r2, #0]
 800a804:	462b      	mov	r3, r5
 800a806:	461d      	mov	r5, r3
 800a808:	3b01      	subs	r3, #1
 800a80a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a80e:	2a39      	cmp	r2, #57	; 0x39
 800a810:	d06c      	beq.n	800a8ec <_dtoa_r+0xba4>
 800a812:	3201      	adds	r2, #1
 800a814:	701a      	strb	r2, [r3, #0]
 800a816:	e747      	b.n	800a6a8 <_dtoa_r+0x960>
 800a818:	2a00      	cmp	r2, #0
 800a81a:	dd07      	ble.n	800a82c <_dtoa_r+0xae4>
 800a81c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a820:	d0ed      	beq.n	800a7fe <_dtoa_r+0xab6>
 800a822:	9a01      	ldr	r2, [sp, #4]
 800a824:	f109 0301 	add.w	r3, r9, #1
 800a828:	7013      	strb	r3, [r2, #0]
 800a82a:	e73d      	b.n	800a6a8 <_dtoa_r+0x960>
 800a82c:	9b04      	ldr	r3, [sp, #16]
 800a82e:	9a08      	ldr	r2, [sp, #32]
 800a830:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a834:	4293      	cmp	r3, r2
 800a836:	d043      	beq.n	800a8c0 <_dtoa_r+0xb78>
 800a838:	4651      	mov	r1, sl
 800a83a:	2300      	movs	r3, #0
 800a83c:	220a      	movs	r2, #10
 800a83e:	4620      	mov	r0, r4
 800a840:	f000 f922 	bl	800aa88 <__multadd>
 800a844:	45b8      	cmp	r8, r7
 800a846:	4682      	mov	sl, r0
 800a848:	f04f 0300 	mov.w	r3, #0
 800a84c:	f04f 020a 	mov.w	r2, #10
 800a850:	4641      	mov	r1, r8
 800a852:	4620      	mov	r0, r4
 800a854:	d107      	bne.n	800a866 <_dtoa_r+0xb1e>
 800a856:	f000 f917 	bl	800aa88 <__multadd>
 800a85a:	4680      	mov	r8, r0
 800a85c:	4607      	mov	r7, r0
 800a85e:	9b04      	ldr	r3, [sp, #16]
 800a860:	3301      	adds	r3, #1
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	e775      	b.n	800a752 <_dtoa_r+0xa0a>
 800a866:	f000 f90f 	bl	800aa88 <__multadd>
 800a86a:	4639      	mov	r1, r7
 800a86c:	4680      	mov	r8, r0
 800a86e:	2300      	movs	r3, #0
 800a870:	220a      	movs	r2, #10
 800a872:	4620      	mov	r0, r4
 800a874:	f000 f908 	bl	800aa88 <__multadd>
 800a878:	4607      	mov	r7, r0
 800a87a:	e7f0      	b.n	800a85e <_dtoa_r+0xb16>
 800a87c:	9b04      	ldr	r3, [sp, #16]
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	9d00      	ldr	r5, [sp, #0]
 800a882:	4631      	mov	r1, r6
 800a884:	4650      	mov	r0, sl
 800a886:	f7ff f9d6 	bl	8009c36 <quorem>
 800a88a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a88e:	9b00      	ldr	r3, [sp, #0]
 800a890:	f805 9b01 	strb.w	r9, [r5], #1
 800a894:	1aea      	subs	r2, r5, r3
 800a896:	9b01      	ldr	r3, [sp, #4]
 800a898:	4293      	cmp	r3, r2
 800a89a:	dd07      	ble.n	800a8ac <_dtoa_r+0xb64>
 800a89c:	4651      	mov	r1, sl
 800a89e:	2300      	movs	r3, #0
 800a8a0:	220a      	movs	r2, #10
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 f8f0 	bl	800aa88 <__multadd>
 800a8a8:	4682      	mov	sl, r0
 800a8aa:	e7ea      	b.n	800a882 <_dtoa_r+0xb3a>
 800a8ac:	9b01      	ldr	r3, [sp, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	bfc8      	it	gt
 800a8b2:	461d      	movgt	r5, r3
 800a8b4:	9b00      	ldr	r3, [sp, #0]
 800a8b6:	bfd8      	it	le
 800a8b8:	2501      	movle	r5, #1
 800a8ba:	441d      	add	r5, r3
 800a8bc:	f04f 0800 	mov.w	r8, #0
 800a8c0:	4651      	mov	r1, sl
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f000 fa8d 	bl	800ade4 <__lshift>
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	4682      	mov	sl, r0
 800a8ce:	f000 faf5 	bl	800aebc <__mcmp>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	dc96      	bgt.n	800a804 <_dtoa_r+0xabc>
 800a8d6:	d102      	bne.n	800a8de <_dtoa_r+0xb96>
 800a8d8:	f019 0f01 	tst.w	r9, #1
 800a8dc:	d192      	bne.n	800a804 <_dtoa_r+0xabc>
 800a8de:	462b      	mov	r3, r5
 800a8e0:	461d      	mov	r5, r3
 800a8e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8e6:	2a30      	cmp	r2, #48	; 0x30
 800a8e8:	d0fa      	beq.n	800a8e0 <_dtoa_r+0xb98>
 800a8ea:	e6dd      	b.n	800a6a8 <_dtoa_r+0x960>
 800a8ec:	9a00      	ldr	r2, [sp, #0]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d189      	bne.n	800a806 <_dtoa_r+0xabe>
 800a8f2:	f10b 0b01 	add.w	fp, fp, #1
 800a8f6:	2331      	movs	r3, #49	; 0x31
 800a8f8:	e796      	b.n	800a828 <_dtoa_r+0xae0>
 800a8fa:	4b0a      	ldr	r3, [pc, #40]	; (800a924 <_dtoa_r+0xbdc>)
 800a8fc:	f7ff ba99 	b.w	8009e32 <_dtoa_r+0xea>
 800a900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a902:	2b00      	cmp	r3, #0
 800a904:	f47f aa6d 	bne.w	8009de2 <_dtoa_r+0x9a>
 800a908:	4b07      	ldr	r3, [pc, #28]	; (800a928 <_dtoa_r+0xbe0>)
 800a90a:	f7ff ba92 	b.w	8009e32 <_dtoa_r+0xea>
 800a90e:	9b01      	ldr	r3, [sp, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	dcb5      	bgt.n	800a880 <_dtoa_r+0xb38>
 800a914:	9b07      	ldr	r3, [sp, #28]
 800a916:	2b02      	cmp	r3, #2
 800a918:	f73f aeb1 	bgt.w	800a67e <_dtoa_r+0x936>
 800a91c:	e7b0      	b.n	800a880 <_dtoa_r+0xb38>
 800a91e:	bf00      	nop
 800a920:	0800b940 	.word	0x0800b940
 800a924:	0800b8a0 	.word	0x0800b8a0
 800a928:	0800b8c4 	.word	0x0800b8c4

0800a92c <_free_r>:
 800a92c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a92e:	2900      	cmp	r1, #0
 800a930:	d044      	beq.n	800a9bc <_free_r+0x90>
 800a932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a936:	9001      	str	r0, [sp, #4]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f1a1 0404 	sub.w	r4, r1, #4
 800a93e:	bfb8      	it	lt
 800a940:	18e4      	addlt	r4, r4, r3
 800a942:	f7fe fb63 	bl	800900c <__malloc_lock>
 800a946:	4a1e      	ldr	r2, [pc, #120]	; (800a9c0 <_free_r+0x94>)
 800a948:	9801      	ldr	r0, [sp, #4]
 800a94a:	6813      	ldr	r3, [r2, #0]
 800a94c:	b933      	cbnz	r3, 800a95c <_free_r+0x30>
 800a94e:	6063      	str	r3, [r4, #4]
 800a950:	6014      	str	r4, [r2, #0]
 800a952:	b003      	add	sp, #12
 800a954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a958:	f7fe bb5e 	b.w	8009018 <__malloc_unlock>
 800a95c:	42a3      	cmp	r3, r4
 800a95e:	d908      	bls.n	800a972 <_free_r+0x46>
 800a960:	6825      	ldr	r5, [r4, #0]
 800a962:	1961      	adds	r1, r4, r5
 800a964:	428b      	cmp	r3, r1
 800a966:	bf01      	itttt	eq
 800a968:	6819      	ldreq	r1, [r3, #0]
 800a96a:	685b      	ldreq	r3, [r3, #4]
 800a96c:	1949      	addeq	r1, r1, r5
 800a96e:	6021      	streq	r1, [r4, #0]
 800a970:	e7ed      	b.n	800a94e <_free_r+0x22>
 800a972:	461a      	mov	r2, r3
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	b10b      	cbz	r3, 800a97c <_free_r+0x50>
 800a978:	42a3      	cmp	r3, r4
 800a97a:	d9fa      	bls.n	800a972 <_free_r+0x46>
 800a97c:	6811      	ldr	r1, [r2, #0]
 800a97e:	1855      	adds	r5, r2, r1
 800a980:	42a5      	cmp	r5, r4
 800a982:	d10b      	bne.n	800a99c <_free_r+0x70>
 800a984:	6824      	ldr	r4, [r4, #0]
 800a986:	4421      	add	r1, r4
 800a988:	1854      	adds	r4, r2, r1
 800a98a:	42a3      	cmp	r3, r4
 800a98c:	6011      	str	r1, [r2, #0]
 800a98e:	d1e0      	bne.n	800a952 <_free_r+0x26>
 800a990:	681c      	ldr	r4, [r3, #0]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	6053      	str	r3, [r2, #4]
 800a996:	440c      	add	r4, r1
 800a998:	6014      	str	r4, [r2, #0]
 800a99a:	e7da      	b.n	800a952 <_free_r+0x26>
 800a99c:	d902      	bls.n	800a9a4 <_free_r+0x78>
 800a99e:	230c      	movs	r3, #12
 800a9a0:	6003      	str	r3, [r0, #0]
 800a9a2:	e7d6      	b.n	800a952 <_free_r+0x26>
 800a9a4:	6825      	ldr	r5, [r4, #0]
 800a9a6:	1961      	adds	r1, r4, r5
 800a9a8:	428b      	cmp	r3, r1
 800a9aa:	bf04      	itt	eq
 800a9ac:	6819      	ldreq	r1, [r3, #0]
 800a9ae:	685b      	ldreq	r3, [r3, #4]
 800a9b0:	6063      	str	r3, [r4, #4]
 800a9b2:	bf04      	itt	eq
 800a9b4:	1949      	addeq	r1, r1, r5
 800a9b6:	6021      	streq	r1, [r4, #0]
 800a9b8:	6054      	str	r4, [r2, #4]
 800a9ba:	e7ca      	b.n	800a952 <_free_r+0x26>
 800a9bc:	b003      	add	sp, #12
 800a9be:	bd30      	pop	{r4, r5, pc}
 800a9c0:	20000b80 	.word	0x20000b80

0800a9c4 <_Balloc>:
 800a9c4:	b570      	push	{r4, r5, r6, lr}
 800a9c6:	69c6      	ldr	r6, [r0, #28]
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	460d      	mov	r5, r1
 800a9cc:	b976      	cbnz	r6, 800a9ec <_Balloc+0x28>
 800a9ce:	2010      	movs	r0, #16
 800a9d0:	f7fe fa74 	bl	8008ebc <malloc>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	61e0      	str	r0, [r4, #28]
 800a9d8:	b920      	cbnz	r0, 800a9e4 <_Balloc+0x20>
 800a9da:	4b18      	ldr	r3, [pc, #96]	; (800aa3c <_Balloc+0x78>)
 800a9dc:	4818      	ldr	r0, [pc, #96]	; (800aa40 <_Balloc+0x7c>)
 800a9de:	216b      	movs	r1, #107	; 0x6b
 800a9e0:	f000 fc1a 	bl	800b218 <__assert_func>
 800a9e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9e8:	6006      	str	r6, [r0, #0]
 800a9ea:	60c6      	str	r6, [r0, #12]
 800a9ec:	69e6      	ldr	r6, [r4, #28]
 800a9ee:	68f3      	ldr	r3, [r6, #12]
 800a9f0:	b183      	cbz	r3, 800aa14 <_Balloc+0x50>
 800a9f2:	69e3      	ldr	r3, [r4, #28]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9fa:	b9b8      	cbnz	r0, 800aa2c <_Balloc+0x68>
 800a9fc:	2101      	movs	r1, #1
 800a9fe:	fa01 f605 	lsl.w	r6, r1, r5
 800aa02:	1d72      	adds	r2, r6, #5
 800aa04:	0092      	lsls	r2, r2, #2
 800aa06:	4620      	mov	r0, r4
 800aa08:	f000 fc24 	bl	800b254 <_calloc_r>
 800aa0c:	b160      	cbz	r0, 800aa28 <_Balloc+0x64>
 800aa0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa12:	e00e      	b.n	800aa32 <_Balloc+0x6e>
 800aa14:	2221      	movs	r2, #33	; 0x21
 800aa16:	2104      	movs	r1, #4
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f000 fc1b 	bl	800b254 <_calloc_r>
 800aa1e:	69e3      	ldr	r3, [r4, #28]
 800aa20:	60f0      	str	r0, [r6, #12]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1e4      	bne.n	800a9f2 <_Balloc+0x2e>
 800aa28:	2000      	movs	r0, #0
 800aa2a:	bd70      	pop	{r4, r5, r6, pc}
 800aa2c:	6802      	ldr	r2, [r0, #0]
 800aa2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa32:	2300      	movs	r3, #0
 800aa34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa38:	e7f7      	b.n	800aa2a <_Balloc+0x66>
 800aa3a:	bf00      	nop
 800aa3c:	0800b8d1 	.word	0x0800b8d1
 800aa40:	0800b951 	.word	0x0800b951

0800aa44 <_Bfree>:
 800aa44:	b570      	push	{r4, r5, r6, lr}
 800aa46:	69c6      	ldr	r6, [r0, #28]
 800aa48:	4605      	mov	r5, r0
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	b976      	cbnz	r6, 800aa6c <_Bfree+0x28>
 800aa4e:	2010      	movs	r0, #16
 800aa50:	f7fe fa34 	bl	8008ebc <malloc>
 800aa54:	4602      	mov	r2, r0
 800aa56:	61e8      	str	r0, [r5, #28]
 800aa58:	b920      	cbnz	r0, 800aa64 <_Bfree+0x20>
 800aa5a:	4b09      	ldr	r3, [pc, #36]	; (800aa80 <_Bfree+0x3c>)
 800aa5c:	4809      	ldr	r0, [pc, #36]	; (800aa84 <_Bfree+0x40>)
 800aa5e:	218f      	movs	r1, #143	; 0x8f
 800aa60:	f000 fbda 	bl	800b218 <__assert_func>
 800aa64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa68:	6006      	str	r6, [r0, #0]
 800aa6a:	60c6      	str	r6, [r0, #12]
 800aa6c:	b13c      	cbz	r4, 800aa7e <_Bfree+0x3a>
 800aa6e:	69eb      	ldr	r3, [r5, #28]
 800aa70:	6862      	ldr	r2, [r4, #4]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa78:	6021      	str	r1, [r4, #0]
 800aa7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}
 800aa80:	0800b8d1 	.word	0x0800b8d1
 800aa84:	0800b951 	.word	0x0800b951

0800aa88 <__multadd>:
 800aa88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8c:	690d      	ldr	r5, [r1, #16]
 800aa8e:	4607      	mov	r7, r0
 800aa90:	460c      	mov	r4, r1
 800aa92:	461e      	mov	r6, r3
 800aa94:	f101 0c14 	add.w	ip, r1, #20
 800aa98:	2000      	movs	r0, #0
 800aa9a:	f8dc 3000 	ldr.w	r3, [ip]
 800aa9e:	b299      	uxth	r1, r3
 800aaa0:	fb02 6101 	mla	r1, r2, r1, r6
 800aaa4:	0c1e      	lsrs	r6, r3, #16
 800aaa6:	0c0b      	lsrs	r3, r1, #16
 800aaa8:	fb02 3306 	mla	r3, r2, r6, r3
 800aaac:	b289      	uxth	r1, r1
 800aaae:	3001      	adds	r0, #1
 800aab0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aab4:	4285      	cmp	r5, r0
 800aab6:	f84c 1b04 	str.w	r1, [ip], #4
 800aaba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aabe:	dcec      	bgt.n	800aa9a <__multadd+0x12>
 800aac0:	b30e      	cbz	r6, 800ab06 <__multadd+0x7e>
 800aac2:	68a3      	ldr	r3, [r4, #8]
 800aac4:	42ab      	cmp	r3, r5
 800aac6:	dc19      	bgt.n	800aafc <__multadd+0x74>
 800aac8:	6861      	ldr	r1, [r4, #4]
 800aaca:	4638      	mov	r0, r7
 800aacc:	3101      	adds	r1, #1
 800aace:	f7ff ff79 	bl	800a9c4 <_Balloc>
 800aad2:	4680      	mov	r8, r0
 800aad4:	b928      	cbnz	r0, 800aae2 <__multadd+0x5a>
 800aad6:	4602      	mov	r2, r0
 800aad8:	4b0c      	ldr	r3, [pc, #48]	; (800ab0c <__multadd+0x84>)
 800aada:	480d      	ldr	r0, [pc, #52]	; (800ab10 <__multadd+0x88>)
 800aadc:	21ba      	movs	r1, #186	; 0xba
 800aade:	f000 fb9b 	bl	800b218 <__assert_func>
 800aae2:	6922      	ldr	r2, [r4, #16]
 800aae4:	3202      	adds	r2, #2
 800aae6:	f104 010c 	add.w	r1, r4, #12
 800aaea:	0092      	lsls	r2, r2, #2
 800aaec:	300c      	adds	r0, #12
 800aaee:	f7ff f894 	bl	8009c1a <memcpy>
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	f7ff ffa5 	bl	800aa44 <_Bfree>
 800aafa:	4644      	mov	r4, r8
 800aafc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab00:	3501      	adds	r5, #1
 800ab02:	615e      	str	r6, [r3, #20]
 800ab04:	6125      	str	r5, [r4, #16]
 800ab06:	4620      	mov	r0, r4
 800ab08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab0c:	0800b940 	.word	0x0800b940
 800ab10:	0800b951 	.word	0x0800b951

0800ab14 <__hi0bits>:
 800ab14:	0c03      	lsrs	r3, r0, #16
 800ab16:	041b      	lsls	r3, r3, #16
 800ab18:	b9d3      	cbnz	r3, 800ab50 <__hi0bits+0x3c>
 800ab1a:	0400      	lsls	r0, r0, #16
 800ab1c:	2310      	movs	r3, #16
 800ab1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab22:	bf04      	itt	eq
 800ab24:	0200      	lsleq	r0, r0, #8
 800ab26:	3308      	addeq	r3, #8
 800ab28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab2c:	bf04      	itt	eq
 800ab2e:	0100      	lsleq	r0, r0, #4
 800ab30:	3304      	addeq	r3, #4
 800ab32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab36:	bf04      	itt	eq
 800ab38:	0080      	lsleq	r0, r0, #2
 800ab3a:	3302      	addeq	r3, #2
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	db05      	blt.n	800ab4c <__hi0bits+0x38>
 800ab40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab44:	f103 0301 	add.w	r3, r3, #1
 800ab48:	bf08      	it	eq
 800ab4a:	2320      	moveq	r3, #32
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	4770      	bx	lr
 800ab50:	2300      	movs	r3, #0
 800ab52:	e7e4      	b.n	800ab1e <__hi0bits+0xa>

0800ab54 <__lo0bits>:
 800ab54:	6803      	ldr	r3, [r0, #0]
 800ab56:	f013 0207 	ands.w	r2, r3, #7
 800ab5a:	d00c      	beq.n	800ab76 <__lo0bits+0x22>
 800ab5c:	07d9      	lsls	r1, r3, #31
 800ab5e:	d422      	bmi.n	800aba6 <__lo0bits+0x52>
 800ab60:	079a      	lsls	r2, r3, #30
 800ab62:	bf49      	itett	mi
 800ab64:	085b      	lsrmi	r3, r3, #1
 800ab66:	089b      	lsrpl	r3, r3, #2
 800ab68:	6003      	strmi	r3, [r0, #0]
 800ab6a:	2201      	movmi	r2, #1
 800ab6c:	bf5c      	itt	pl
 800ab6e:	6003      	strpl	r3, [r0, #0]
 800ab70:	2202      	movpl	r2, #2
 800ab72:	4610      	mov	r0, r2
 800ab74:	4770      	bx	lr
 800ab76:	b299      	uxth	r1, r3
 800ab78:	b909      	cbnz	r1, 800ab7e <__lo0bits+0x2a>
 800ab7a:	0c1b      	lsrs	r3, r3, #16
 800ab7c:	2210      	movs	r2, #16
 800ab7e:	b2d9      	uxtb	r1, r3
 800ab80:	b909      	cbnz	r1, 800ab86 <__lo0bits+0x32>
 800ab82:	3208      	adds	r2, #8
 800ab84:	0a1b      	lsrs	r3, r3, #8
 800ab86:	0719      	lsls	r1, r3, #28
 800ab88:	bf04      	itt	eq
 800ab8a:	091b      	lsreq	r3, r3, #4
 800ab8c:	3204      	addeq	r2, #4
 800ab8e:	0799      	lsls	r1, r3, #30
 800ab90:	bf04      	itt	eq
 800ab92:	089b      	lsreq	r3, r3, #2
 800ab94:	3202      	addeq	r2, #2
 800ab96:	07d9      	lsls	r1, r3, #31
 800ab98:	d403      	bmi.n	800aba2 <__lo0bits+0x4e>
 800ab9a:	085b      	lsrs	r3, r3, #1
 800ab9c:	f102 0201 	add.w	r2, r2, #1
 800aba0:	d003      	beq.n	800abaa <__lo0bits+0x56>
 800aba2:	6003      	str	r3, [r0, #0]
 800aba4:	e7e5      	b.n	800ab72 <__lo0bits+0x1e>
 800aba6:	2200      	movs	r2, #0
 800aba8:	e7e3      	b.n	800ab72 <__lo0bits+0x1e>
 800abaa:	2220      	movs	r2, #32
 800abac:	e7e1      	b.n	800ab72 <__lo0bits+0x1e>
	...

0800abb0 <__i2b>:
 800abb0:	b510      	push	{r4, lr}
 800abb2:	460c      	mov	r4, r1
 800abb4:	2101      	movs	r1, #1
 800abb6:	f7ff ff05 	bl	800a9c4 <_Balloc>
 800abba:	4602      	mov	r2, r0
 800abbc:	b928      	cbnz	r0, 800abca <__i2b+0x1a>
 800abbe:	4b05      	ldr	r3, [pc, #20]	; (800abd4 <__i2b+0x24>)
 800abc0:	4805      	ldr	r0, [pc, #20]	; (800abd8 <__i2b+0x28>)
 800abc2:	f240 1145 	movw	r1, #325	; 0x145
 800abc6:	f000 fb27 	bl	800b218 <__assert_func>
 800abca:	2301      	movs	r3, #1
 800abcc:	6144      	str	r4, [r0, #20]
 800abce:	6103      	str	r3, [r0, #16]
 800abd0:	bd10      	pop	{r4, pc}
 800abd2:	bf00      	nop
 800abd4:	0800b940 	.word	0x0800b940
 800abd8:	0800b951 	.word	0x0800b951

0800abdc <__multiply>:
 800abdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe0:	4691      	mov	r9, r2
 800abe2:	690a      	ldr	r2, [r1, #16]
 800abe4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abe8:	429a      	cmp	r2, r3
 800abea:	bfb8      	it	lt
 800abec:	460b      	movlt	r3, r1
 800abee:	460c      	mov	r4, r1
 800abf0:	bfbc      	itt	lt
 800abf2:	464c      	movlt	r4, r9
 800abf4:	4699      	movlt	r9, r3
 800abf6:	6927      	ldr	r7, [r4, #16]
 800abf8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800abfc:	68a3      	ldr	r3, [r4, #8]
 800abfe:	6861      	ldr	r1, [r4, #4]
 800ac00:	eb07 060a 	add.w	r6, r7, sl
 800ac04:	42b3      	cmp	r3, r6
 800ac06:	b085      	sub	sp, #20
 800ac08:	bfb8      	it	lt
 800ac0a:	3101      	addlt	r1, #1
 800ac0c:	f7ff feda 	bl	800a9c4 <_Balloc>
 800ac10:	b930      	cbnz	r0, 800ac20 <__multiply+0x44>
 800ac12:	4602      	mov	r2, r0
 800ac14:	4b44      	ldr	r3, [pc, #272]	; (800ad28 <__multiply+0x14c>)
 800ac16:	4845      	ldr	r0, [pc, #276]	; (800ad2c <__multiply+0x150>)
 800ac18:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ac1c:	f000 fafc 	bl	800b218 <__assert_func>
 800ac20:	f100 0514 	add.w	r5, r0, #20
 800ac24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac28:	462b      	mov	r3, r5
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	4543      	cmp	r3, r8
 800ac2e:	d321      	bcc.n	800ac74 <__multiply+0x98>
 800ac30:	f104 0314 	add.w	r3, r4, #20
 800ac34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac38:	f109 0314 	add.w	r3, r9, #20
 800ac3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac40:	9202      	str	r2, [sp, #8]
 800ac42:	1b3a      	subs	r2, r7, r4
 800ac44:	3a15      	subs	r2, #21
 800ac46:	f022 0203 	bic.w	r2, r2, #3
 800ac4a:	3204      	adds	r2, #4
 800ac4c:	f104 0115 	add.w	r1, r4, #21
 800ac50:	428f      	cmp	r7, r1
 800ac52:	bf38      	it	cc
 800ac54:	2204      	movcc	r2, #4
 800ac56:	9201      	str	r2, [sp, #4]
 800ac58:	9a02      	ldr	r2, [sp, #8]
 800ac5a:	9303      	str	r3, [sp, #12]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d80c      	bhi.n	800ac7a <__multiply+0x9e>
 800ac60:	2e00      	cmp	r6, #0
 800ac62:	dd03      	ble.n	800ac6c <__multiply+0x90>
 800ac64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d05b      	beq.n	800ad24 <__multiply+0x148>
 800ac6c:	6106      	str	r6, [r0, #16]
 800ac6e:	b005      	add	sp, #20
 800ac70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac74:	f843 2b04 	str.w	r2, [r3], #4
 800ac78:	e7d8      	b.n	800ac2c <__multiply+0x50>
 800ac7a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac7e:	f1ba 0f00 	cmp.w	sl, #0
 800ac82:	d024      	beq.n	800acce <__multiply+0xf2>
 800ac84:	f104 0e14 	add.w	lr, r4, #20
 800ac88:	46a9      	mov	r9, r5
 800ac8a:	f04f 0c00 	mov.w	ip, #0
 800ac8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ac92:	f8d9 1000 	ldr.w	r1, [r9]
 800ac96:	fa1f fb82 	uxth.w	fp, r2
 800ac9a:	b289      	uxth	r1, r1
 800ac9c:	fb0a 110b 	mla	r1, sl, fp, r1
 800aca0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aca4:	f8d9 2000 	ldr.w	r2, [r9]
 800aca8:	4461      	add	r1, ip
 800acaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acae:	fb0a c20b 	mla	r2, sl, fp, ip
 800acb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800acb6:	b289      	uxth	r1, r1
 800acb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800acbc:	4577      	cmp	r7, lr
 800acbe:	f849 1b04 	str.w	r1, [r9], #4
 800acc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acc6:	d8e2      	bhi.n	800ac8e <__multiply+0xb2>
 800acc8:	9a01      	ldr	r2, [sp, #4]
 800acca:	f845 c002 	str.w	ip, [r5, r2]
 800acce:	9a03      	ldr	r2, [sp, #12]
 800acd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800acd4:	3304      	adds	r3, #4
 800acd6:	f1b9 0f00 	cmp.w	r9, #0
 800acda:	d021      	beq.n	800ad20 <__multiply+0x144>
 800acdc:	6829      	ldr	r1, [r5, #0]
 800acde:	f104 0c14 	add.w	ip, r4, #20
 800ace2:	46ae      	mov	lr, r5
 800ace4:	f04f 0a00 	mov.w	sl, #0
 800ace8:	f8bc b000 	ldrh.w	fp, [ip]
 800acec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800acf0:	fb09 220b 	mla	r2, r9, fp, r2
 800acf4:	4452      	add	r2, sl
 800acf6:	b289      	uxth	r1, r1
 800acf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800acfc:	f84e 1b04 	str.w	r1, [lr], #4
 800ad00:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ad04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad08:	f8be 1000 	ldrh.w	r1, [lr]
 800ad0c:	fb09 110a 	mla	r1, r9, sl, r1
 800ad10:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ad14:	4567      	cmp	r7, ip
 800ad16:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad1a:	d8e5      	bhi.n	800ace8 <__multiply+0x10c>
 800ad1c:	9a01      	ldr	r2, [sp, #4]
 800ad1e:	50a9      	str	r1, [r5, r2]
 800ad20:	3504      	adds	r5, #4
 800ad22:	e799      	b.n	800ac58 <__multiply+0x7c>
 800ad24:	3e01      	subs	r6, #1
 800ad26:	e79b      	b.n	800ac60 <__multiply+0x84>
 800ad28:	0800b940 	.word	0x0800b940
 800ad2c:	0800b951 	.word	0x0800b951

0800ad30 <__pow5mult>:
 800ad30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad34:	4615      	mov	r5, r2
 800ad36:	f012 0203 	ands.w	r2, r2, #3
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	460f      	mov	r7, r1
 800ad3e:	d007      	beq.n	800ad50 <__pow5mult+0x20>
 800ad40:	4c25      	ldr	r4, [pc, #148]	; (800add8 <__pow5mult+0xa8>)
 800ad42:	3a01      	subs	r2, #1
 800ad44:	2300      	movs	r3, #0
 800ad46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad4a:	f7ff fe9d 	bl	800aa88 <__multadd>
 800ad4e:	4607      	mov	r7, r0
 800ad50:	10ad      	asrs	r5, r5, #2
 800ad52:	d03d      	beq.n	800add0 <__pow5mult+0xa0>
 800ad54:	69f4      	ldr	r4, [r6, #28]
 800ad56:	b97c      	cbnz	r4, 800ad78 <__pow5mult+0x48>
 800ad58:	2010      	movs	r0, #16
 800ad5a:	f7fe f8af 	bl	8008ebc <malloc>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	61f0      	str	r0, [r6, #28]
 800ad62:	b928      	cbnz	r0, 800ad70 <__pow5mult+0x40>
 800ad64:	4b1d      	ldr	r3, [pc, #116]	; (800addc <__pow5mult+0xac>)
 800ad66:	481e      	ldr	r0, [pc, #120]	; (800ade0 <__pow5mult+0xb0>)
 800ad68:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ad6c:	f000 fa54 	bl	800b218 <__assert_func>
 800ad70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad74:	6004      	str	r4, [r0, #0]
 800ad76:	60c4      	str	r4, [r0, #12]
 800ad78:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ad7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad80:	b94c      	cbnz	r4, 800ad96 <__pow5mult+0x66>
 800ad82:	f240 2171 	movw	r1, #625	; 0x271
 800ad86:	4630      	mov	r0, r6
 800ad88:	f7ff ff12 	bl	800abb0 <__i2b>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad92:	4604      	mov	r4, r0
 800ad94:	6003      	str	r3, [r0, #0]
 800ad96:	f04f 0900 	mov.w	r9, #0
 800ad9a:	07eb      	lsls	r3, r5, #31
 800ad9c:	d50a      	bpl.n	800adb4 <__pow5mult+0x84>
 800ad9e:	4639      	mov	r1, r7
 800ada0:	4622      	mov	r2, r4
 800ada2:	4630      	mov	r0, r6
 800ada4:	f7ff ff1a 	bl	800abdc <__multiply>
 800ada8:	4639      	mov	r1, r7
 800adaa:	4680      	mov	r8, r0
 800adac:	4630      	mov	r0, r6
 800adae:	f7ff fe49 	bl	800aa44 <_Bfree>
 800adb2:	4647      	mov	r7, r8
 800adb4:	106d      	asrs	r5, r5, #1
 800adb6:	d00b      	beq.n	800add0 <__pow5mult+0xa0>
 800adb8:	6820      	ldr	r0, [r4, #0]
 800adba:	b938      	cbnz	r0, 800adcc <__pow5mult+0x9c>
 800adbc:	4622      	mov	r2, r4
 800adbe:	4621      	mov	r1, r4
 800adc0:	4630      	mov	r0, r6
 800adc2:	f7ff ff0b 	bl	800abdc <__multiply>
 800adc6:	6020      	str	r0, [r4, #0]
 800adc8:	f8c0 9000 	str.w	r9, [r0]
 800adcc:	4604      	mov	r4, r0
 800adce:	e7e4      	b.n	800ad9a <__pow5mult+0x6a>
 800add0:	4638      	mov	r0, r7
 800add2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800add6:	bf00      	nop
 800add8:	0800baa0 	.word	0x0800baa0
 800addc:	0800b8d1 	.word	0x0800b8d1
 800ade0:	0800b951 	.word	0x0800b951

0800ade4 <__lshift>:
 800ade4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade8:	460c      	mov	r4, r1
 800adea:	6849      	ldr	r1, [r1, #4]
 800adec:	6923      	ldr	r3, [r4, #16]
 800adee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800adf2:	68a3      	ldr	r3, [r4, #8]
 800adf4:	4607      	mov	r7, r0
 800adf6:	4691      	mov	r9, r2
 800adf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800adfc:	f108 0601 	add.w	r6, r8, #1
 800ae00:	42b3      	cmp	r3, r6
 800ae02:	db0b      	blt.n	800ae1c <__lshift+0x38>
 800ae04:	4638      	mov	r0, r7
 800ae06:	f7ff fddd 	bl	800a9c4 <_Balloc>
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	b948      	cbnz	r0, 800ae22 <__lshift+0x3e>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	4b28      	ldr	r3, [pc, #160]	; (800aeb4 <__lshift+0xd0>)
 800ae12:	4829      	ldr	r0, [pc, #164]	; (800aeb8 <__lshift+0xd4>)
 800ae14:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ae18:	f000 f9fe 	bl	800b218 <__assert_func>
 800ae1c:	3101      	adds	r1, #1
 800ae1e:	005b      	lsls	r3, r3, #1
 800ae20:	e7ee      	b.n	800ae00 <__lshift+0x1c>
 800ae22:	2300      	movs	r3, #0
 800ae24:	f100 0114 	add.w	r1, r0, #20
 800ae28:	f100 0210 	add.w	r2, r0, #16
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	4553      	cmp	r3, sl
 800ae30:	db33      	blt.n	800ae9a <__lshift+0xb6>
 800ae32:	6920      	ldr	r0, [r4, #16]
 800ae34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae38:	f104 0314 	add.w	r3, r4, #20
 800ae3c:	f019 091f 	ands.w	r9, r9, #31
 800ae40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae48:	d02b      	beq.n	800aea2 <__lshift+0xbe>
 800ae4a:	f1c9 0e20 	rsb	lr, r9, #32
 800ae4e:	468a      	mov	sl, r1
 800ae50:	2200      	movs	r2, #0
 800ae52:	6818      	ldr	r0, [r3, #0]
 800ae54:	fa00 f009 	lsl.w	r0, r0, r9
 800ae58:	4310      	orrs	r0, r2
 800ae5a:	f84a 0b04 	str.w	r0, [sl], #4
 800ae5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae62:	459c      	cmp	ip, r3
 800ae64:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae68:	d8f3      	bhi.n	800ae52 <__lshift+0x6e>
 800ae6a:	ebac 0304 	sub.w	r3, ip, r4
 800ae6e:	3b15      	subs	r3, #21
 800ae70:	f023 0303 	bic.w	r3, r3, #3
 800ae74:	3304      	adds	r3, #4
 800ae76:	f104 0015 	add.w	r0, r4, #21
 800ae7a:	4584      	cmp	ip, r0
 800ae7c:	bf38      	it	cc
 800ae7e:	2304      	movcc	r3, #4
 800ae80:	50ca      	str	r2, [r1, r3]
 800ae82:	b10a      	cbz	r2, 800ae88 <__lshift+0xa4>
 800ae84:	f108 0602 	add.w	r6, r8, #2
 800ae88:	3e01      	subs	r6, #1
 800ae8a:	4638      	mov	r0, r7
 800ae8c:	612e      	str	r6, [r5, #16]
 800ae8e:	4621      	mov	r1, r4
 800ae90:	f7ff fdd8 	bl	800aa44 <_Bfree>
 800ae94:	4628      	mov	r0, r5
 800ae96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae9e:	3301      	adds	r3, #1
 800aea0:	e7c5      	b.n	800ae2e <__lshift+0x4a>
 800aea2:	3904      	subs	r1, #4
 800aea4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aea8:	f841 2f04 	str.w	r2, [r1, #4]!
 800aeac:	459c      	cmp	ip, r3
 800aeae:	d8f9      	bhi.n	800aea4 <__lshift+0xc0>
 800aeb0:	e7ea      	b.n	800ae88 <__lshift+0xa4>
 800aeb2:	bf00      	nop
 800aeb4:	0800b940 	.word	0x0800b940
 800aeb8:	0800b951 	.word	0x0800b951

0800aebc <__mcmp>:
 800aebc:	b530      	push	{r4, r5, lr}
 800aebe:	6902      	ldr	r2, [r0, #16]
 800aec0:	690c      	ldr	r4, [r1, #16]
 800aec2:	1b12      	subs	r2, r2, r4
 800aec4:	d10e      	bne.n	800aee4 <__mcmp+0x28>
 800aec6:	f100 0314 	add.w	r3, r0, #20
 800aeca:	3114      	adds	r1, #20
 800aecc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aed0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aed4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aed8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aedc:	42a5      	cmp	r5, r4
 800aede:	d003      	beq.n	800aee8 <__mcmp+0x2c>
 800aee0:	d305      	bcc.n	800aeee <__mcmp+0x32>
 800aee2:	2201      	movs	r2, #1
 800aee4:	4610      	mov	r0, r2
 800aee6:	bd30      	pop	{r4, r5, pc}
 800aee8:	4283      	cmp	r3, r0
 800aeea:	d3f3      	bcc.n	800aed4 <__mcmp+0x18>
 800aeec:	e7fa      	b.n	800aee4 <__mcmp+0x28>
 800aeee:	f04f 32ff 	mov.w	r2, #4294967295
 800aef2:	e7f7      	b.n	800aee4 <__mcmp+0x28>

0800aef4 <__mdiff>:
 800aef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef8:	460c      	mov	r4, r1
 800aefa:	4606      	mov	r6, r0
 800aefc:	4611      	mov	r1, r2
 800aefe:	4620      	mov	r0, r4
 800af00:	4690      	mov	r8, r2
 800af02:	f7ff ffdb 	bl	800aebc <__mcmp>
 800af06:	1e05      	subs	r5, r0, #0
 800af08:	d110      	bne.n	800af2c <__mdiff+0x38>
 800af0a:	4629      	mov	r1, r5
 800af0c:	4630      	mov	r0, r6
 800af0e:	f7ff fd59 	bl	800a9c4 <_Balloc>
 800af12:	b930      	cbnz	r0, 800af22 <__mdiff+0x2e>
 800af14:	4b3a      	ldr	r3, [pc, #232]	; (800b000 <__mdiff+0x10c>)
 800af16:	4602      	mov	r2, r0
 800af18:	f240 2137 	movw	r1, #567	; 0x237
 800af1c:	4839      	ldr	r0, [pc, #228]	; (800b004 <__mdiff+0x110>)
 800af1e:	f000 f97b 	bl	800b218 <__assert_func>
 800af22:	2301      	movs	r3, #1
 800af24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2c:	bfa4      	itt	ge
 800af2e:	4643      	movge	r3, r8
 800af30:	46a0      	movge	r8, r4
 800af32:	4630      	mov	r0, r6
 800af34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af38:	bfa6      	itte	ge
 800af3a:	461c      	movge	r4, r3
 800af3c:	2500      	movge	r5, #0
 800af3e:	2501      	movlt	r5, #1
 800af40:	f7ff fd40 	bl	800a9c4 <_Balloc>
 800af44:	b920      	cbnz	r0, 800af50 <__mdiff+0x5c>
 800af46:	4b2e      	ldr	r3, [pc, #184]	; (800b000 <__mdiff+0x10c>)
 800af48:	4602      	mov	r2, r0
 800af4a:	f240 2145 	movw	r1, #581	; 0x245
 800af4e:	e7e5      	b.n	800af1c <__mdiff+0x28>
 800af50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af54:	6926      	ldr	r6, [r4, #16]
 800af56:	60c5      	str	r5, [r0, #12]
 800af58:	f104 0914 	add.w	r9, r4, #20
 800af5c:	f108 0514 	add.w	r5, r8, #20
 800af60:	f100 0e14 	add.w	lr, r0, #20
 800af64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800af68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800af6c:	f108 0210 	add.w	r2, r8, #16
 800af70:	46f2      	mov	sl, lr
 800af72:	2100      	movs	r1, #0
 800af74:	f859 3b04 	ldr.w	r3, [r9], #4
 800af78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800af7c:	fa11 f88b 	uxtah	r8, r1, fp
 800af80:	b299      	uxth	r1, r3
 800af82:	0c1b      	lsrs	r3, r3, #16
 800af84:	eba8 0801 	sub.w	r8, r8, r1
 800af88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800af8c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800af90:	fa1f f888 	uxth.w	r8, r8
 800af94:	1419      	asrs	r1, r3, #16
 800af96:	454e      	cmp	r6, r9
 800af98:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800af9c:	f84a 3b04 	str.w	r3, [sl], #4
 800afa0:	d8e8      	bhi.n	800af74 <__mdiff+0x80>
 800afa2:	1b33      	subs	r3, r6, r4
 800afa4:	3b15      	subs	r3, #21
 800afa6:	f023 0303 	bic.w	r3, r3, #3
 800afaa:	3304      	adds	r3, #4
 800afac:	3415      	adds	r4, #21
 800afae:	42a6      	cmp	r6, r4
 800afb0:	bf38      	it	cc
 800afb2:	2304      	movcc	r3, #4
 800afb4:	441d      	add	r5, r3
 800afb6:	4473      	add	r3, lr
 800afb8:	469e      	mov	lr, r3
 800afba:	462e      	mov	r6, r5
 800afbc:	4566      	cmp	r6, ip
 800afbe:	d30e      	bcc.n	800afde <__mdiff+0xea>
 800afc0:	f10c 0203 	add.w	r2, ip, #3
 800afc4:	1b52      	subs	r2, r2, r5
 800afc6:	f022 0203 	bic.w	r2, r2, #3
 800afca:	3d03      	subs	r5, #3
 800afcc:	45ac      	cmp	ip, r5
 800afce:	bf38      	it	cc
 800afd0:	2200      	movcc	r2, #0
 800afd2:	4413      	add	r3, r2
 800afd4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800afd8:	b17a      	cbz	r2, 800affa <__mdiff+0x106>
 800afda:	6107      	str	r7, [r0, #16]
 800afdc:	e7a4      	b.n	800af28 <__mdiff+0x34>
 800afde:	f856 8b04 	ldr.w	r8, [r6], #4
 800afe2:	fa11 f288 	uxtah	r2, r1, r8
 800afe6:	1414      	asrs	r4, r2, #16
 800afe8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800afec:	b292      	uxth	r2, r2
 800afee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aff2:	f84e 2b04 	str.w	r2, [lr], #4
 800aff6:	1421      	asrs	r1, r4, #16
 800aff8:	e7e0      	b.n	800afbc <__mdiff+0xc8>
 800affa:	3f01      	subs	r7, #1
 800affc:	e7ea      	b.n	800afd4 <__mdiff+0xe0>
 800affe:	bf00      	nop
 800b000:	0800b940 	.word	0x0800b940
 800b004:	0800b951 	.word	0x0800b951

0800b008 <__d2b>:
 800b008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b00c:	460f      	mov	r7, r1
 800b00e:	2101      	movs	r1, #1
 800b010:	ec59 8b10 	vmov	r8, r9, d0
 800b014:	4616      	mov	r6, r2
 800b016:	f7ff fcd5 	bl	800a9c4 <_Balloc>
 800b01a:	4604      	mov	r4, r0
 800b01c:	b930      	cbnz	r0, 800b02c <__d2b+0x24>
 800b01e:	4602      	mov	r2, r0
 800b020:	4b24      	ldr	r3, [pc, #144]	; (800b0b4 <__d2b+0xac>)
 800b022:	4825      	ldr	r0, [pc, #148]	; (800b0b8 <__d2b+0xb0>)
 800b024:	f240 310f 	movw	r1, #783	; 0x30f
 800b028:	f000 f8f6 	bl	800b218 <__assert_func>
 800b02c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b034:	bb2d      	cbnz	r5, 800b082 <__d2b+0x7a>
 800b036:	9301      	str	r3, [sp, #4]
 800b038:	f1b8 0300 	subs.w	r3, r8, #0
 800b03c:	d026      	beq.n	800b08c <__d2b+0x84>
 800b03e:	4668      	mov	r0, sp
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	f7ff fd87 	bl	800ab54 <__lo0bits>
 800b046:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b04a:	b1e8      	cbz	r0, 800b088 <__d2b+0x80>
 800b04c:	f1c0 0320 	rsb	r3, r0, #32
 800b050:	fa02 f303 	lsl.w	r3, r2, r3
 800b054:	430b      	orrs	r3, r1
 800b056:	40c2      	lsrs	r2, r0
 800b058:	6163      	str	r3, [r4, #20]
 800b05a:	9201      	str	r2, [sp, #4]
 800b05c:	9b01      	ldr	r3, [sp, #4]
 800b05e:	61a3      	str	r3, [r4, #24]
 800b060:	2b00      	cmp	r3, #0
 800b062:	bf14      	ite	ne
 800b064:	2202      	movne	r2, #2
 800b066:	2201      	moveq	r2, #1
 800b068:	6122      	str	r2, [r4, #16]
 800b06a:	b1bd      	cbz	r5, 800b09c <__d2b+0x94>
 800b06c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b070:	4405      	add	r5, r0
 800b072:	603d      	str	r5, [r7, #0]
 800b074:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b078:	6030      	str	r0, [r6, #0]
 800b07a:	4620      	mov	r0, r4
 800b07c:	b003      	add	sp, #12
 800b07e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b086:	e7d6      	b.n	800b036 <__d2b+0x2e>
 800b088:	6161      	str	r1, [r4, #20]
 800b08a:	e7e7      	b.n	800b05c <__d2b+0x54>
 800b08c:	a801      	add	r0, sp, #4
 800b08e:	f7ff fd61 	bl	800ab54 <__lo0bits>
 800b092:	9b01      	ldr	r3, [sp, #4]
 800b094:	6163      	str	r3, [r4, #20]
 800b096:	3020      	adds	r0, #32
 800b098:	2201      	movs	r2, #1
 800b09a:	e7e5      	b.n	800b068 <__d2b+0x60>
 800b09c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0a4:	6038      	str	r0, [r7, #0]
 800b0a6:	6918      	ldr	r0, [r3, #16]
 800b0a8:	f7ff fd34 	bl	800ab14 <__hi0bits>
 800b0ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b0b0:	e7e2      	b.n	800b078 <__d2b+0x70>
 800b0b2:	bf00      	nop
 800b0b4:	0800b940 	.word	0x0800b940
 800b0b8:	0800b951 	.word	0x0800b951

0800b0bc <__sflush_r>:
 800b0bc:	898a      	ldrh	r2, [r1, #12]
 800b0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c2:	4605      	mov	r5, r0
 800b0c4:	0710      	lsls	r0, r2, #28
 800b0c6:	460c      	mov	r4, r1
 800b0c8:	d458      	bmi.n	800b17c <__sflush_r+0xc0>
 800b0ca:	684b      	ldr	r3, [r1, #4]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	dc05      	bgt.n	800b0dc <__sflush_r+0x20>
 800b0d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	dc02      	bgt.n	800b0dc <__sflush_r+0x20>
 800b0d6:	2000      	movs	r0, #0
 800b0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0de:	2e00      	cmp	r6, #0
 800b0e0:	d0f9      	beq.n	800b0d6 <__sflush_r+0x1a>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0e8:	682f      	ldr	r7, [r5, #0]
 800b0ea:	6a21      	ldr	r1, [r4, #32]
 800b0ec:	602b      	str	r3, [r5, #0]
 800b0ee:	d032      	beq.n	800b156 <__sflush_r+0x9a>
 800b0f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	075a      	lsls	r2, r3, #29
 800b0f6:	d505      	bpl.n	800b104 <__sflush_r+0x48>
 800b0f8:	6863      	ldr	r3, [r4, #4]
 800b0fa:	1ac0      	subs	r0, r0, r3
 800b0fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0fe:	b10b      	cbz	r3, 800b104 <__sflush_r+0x48>
 800b100:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b102:	1ac0      	subs	r0, r0, r3
 800b104:	2300      	movs	r3, #0
 800b106:	4602      	mov	r2, r0
 800b108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b10a:	6a21      	ldr	r1, [r4, #32]
 800b10c:	4628      	mov	r0, r5
 800b10e:	47b0      	blx	r6
 800b110:	1c43      	adds	r3, r0, #1
 800b112:	89a3      	ldrh	r3, [r4, #12]
 800b114:	d106      	bne.n	800b124 <__sflush_r+0x68>
 800b116:	6829      	ldr	r1, [r5, #0]
 800b118:	291d      	cmp	r1, #29
 800b11a:	d82b      	bhi.n	800b174 <__sflush_r+0xb8>
 800b11c:	4a29      	ldr	r2, [pc, #164]	; (800b1c4 <__sflush_r+0x108>)
 800b11e:	410a      	asrs	r2, r1
 800b120:	07d6      	lsls	r6, r2, #31
 800b122:	d427      	bmi.n	800b174 <__sflush_r+0xb8>
 800b124:	2200      	movs	r2, #0
 800b126:	6062      	str	r2, [r4, #4]
 800b128:	04d9      	lsls	r1, r3, #19
 800b12a:	6922      	ldr	r2, [r4, #16]
 800b12c:	6022      	str	r2, [r4, #0]
 800b12e:	d504      	bpl.n	800b13a <__sflush_r+0x7e>
 800b130:	1c42      	adds	r2, r0, #1
 800b132:	d101      	bne.n	800b138 <__sflush_r+0x7c>
 800b134:	682b      	ldr	r3, [r5, #0]
 800b136:	b903      	cbnz	r3, 800b13a <__sflush_r+0x7e>
 800b138:	6560      	str	r0, [r4, #84]	; 0x54
 800b13a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b13c:	602f      	str	r7, [r5, #0]
 800b13e:	2900      	cmp	r1, #0
 800b140:	d0c9      	beq.n	800b0d6 <__sflush_r+0x1a>
 800b142:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b146:	4299      	cmp	r1, r3
 800b148:	d002      	beq.n	800b150 <__sflush_r+0x94>
 800b14a:	4628      	mov	r0, r5
 800b14c:	f7ff fbee 	bl	800a92c <_free_r>
 800b150:	2000      	movs	r0, #0
 800b152:	6360      	str	r0, [r4, #52]	; 0x34
 800b154:	e7c0      	b.n	800b0d8 <__sflush_r+0x1c>
 800b156:	2301      	movs	r3, #1
 800b158:	4628      	mov	r0, r5
 800b15a:	47b0      	blx	r6
 800b15c:	1c41      	adds	r1, r0, #1
 800b15e:	d1c8      	bne.n	800b0f2 <__sflush_r+0x36>
 800b160:	682b      	ldr	r3, [r5, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d0c5      	beq.n	800b0f2 <__sflush_r+0x36>
 800b166:	2b1d      	cmp	r3, #29
 800b168:	d001      	beq.n	800b16e <__sflush_r+0xb2>
 800b16a:	2b16      	cmp	r3, #22
 800b16c:	d101      	bne.n	800b172 <__sflush_r+0xb6>
 800b16e:	602f      	str	r7, [r5, #0]
 800b170:	e7b1      	b.n	800b0d6 <__sflush_r+0x1a>
 800b172:	89a3      	ldrh	r3, [r4, #12]
 800b174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b178:	81a3      	strh	r3, [r4, #12]
 800b17a:	e7ad      	b.n	800b0d8 <__sflush_r+0x1c>
 800b17c:	690f      	ldr	r7, [r1, #16]
 800b17e:	2f00      	cmp	r7, #0
 800b180:	d0a9      	beq.n	800b0d6 <__sflush_r+0x1a>
 800b182:	0793      	lsls	r3, r2, #30
 800b184:	680e      	ldr	r6, [r1, #0]
 800b186:	bf08      	it	eq
 800b188:	694b      	ldreq	r3, [r1, #20]
 800b18a:	600f      	str	r7, [r1, #0]
 800b18c:	bf18      	it	ne
 800b18e:	2300      	movne	r3, #0
 800b190:	eba6 0807 	sub.w	r8, r6, r7
 800b194:	608b      	str	r3, [r1, #8]
 800b196:	f1b8 0f00 	cmp.w	r8, #0
 800b19a:	dd9c      	ble.n	800b0d6 <__sflush_r+0x1a>
 800b19c:	6a21      	ldr	r1, [r4, #32]
 800b19e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1a0:	4643      	mov	r3, r8
 800b1a2:	463a      	mov	r2, r7
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	47b0      	blx	r6
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	dc06      	bgt.n	800b1ba <__sflush_r+0xfe>
 800b1ac:	89a3      	ldrh	r3, [r4, #12]
 800b1ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1b2:	81a3      	strh	r3, [r4, #12]
 800b1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b8:	e78e      	b.n	800b0d8 <__sflush_r+0x1c>
 800b1ba:	4407      	add	r7, r0
 800b1bc:	eba8 0800 	sub.w	r8, r8, r0
 800b1c0:	e7e9      	b.n	800b196 <__sflush_r+0xda>
 800b1c2:	bf00      	nop
 800b1c4:	dfbffffe 	.word	0xdfbffffe

0800b1c8 <_fflush_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	690b      	ldr	r3, [r1, #16]
 800b1cc:	4605      	mov	r5, r0
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	b913      	cbnz	r3, 800b1d8 <_fflush_r+0x10>
 800b1d2:	2500      	movs	r5, #0
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	bd38      	pop	{r3, r4, r5, pc}
 800b1d8:	b118      	cbz	r0, 800b1e2 <_fflush_r+0x1a>
 800b1da:	6a03      	ldr	r3, [r0, #32]
 800b1dc:	b90b      	cbnz	r3, 800b1e2 <_fflush_r+0x1a>
 800b1de:	f7fe fc13 	bl	8009a08 <__sinit>
 800b1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d0f3      	beq.n	800b1d2 <_fflush_r+0xa>
 800b1ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1ec:	07d0      	lsls	r0, r2, #31
 800b1ee:	d404      	bmi.n	800b1fa <_fflush_r+0x32>
 800b1f0:	0599      	lsls	r1, r3, #22
 800b1f2:	d402      	bmi.n	800b1fa <_fflush_r+0x32>
 800b1f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1f6:	f7fe fd0e 	bl	8009c16 <__retarget_lock_acquire_recursive>
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	4621      	mov	r1, r4
 800b1fe:	f7ff ff5d 	bl	800b0bc <__sflush_r>
 800b202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b204:	07da      	lsls	r2, r3, #31
 800b206:	4605      	mov	r5, r0
 800b208:	d4e4      	bmi.n	800b1d4 <_fflush_r+0xc>
 800b20a:	89a3      	ldrh	r3, [r4, #12]
 800b20c:	059b      	lsls	r3, r3, #22
 800b20e:	d4e1      	bmi.n	800b1d4 <_fflush_r+0xc>
 800b210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b212:	f7fe fd01 	bl	8009c18 <__retarget_lock_release_recursive>
 800b216:	e7dd      	b.n	800b1d4 <_fflush_r+0xc>

0800b218 <__assert_func>:
 800b218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b21a:	4614      	mov	r4, r2
 800b21c:	461a      	mov	r2, r3
 800b21e:	4b09      	ldr	r3, [pc, #36]	; (800b244 <__assert_func+0x2c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4605      	mov	r5, r0
 800b224:	68d8      	ldr	r0, [r3, #12]
 800b226:	b14c      	cbz	r4, 800b23c <__assert_func+0x24>
 800b228:	4b07      	ldr	r3, [pc, #28]	; (800b248 <__assert_func+0x30>)
 800b22a:	9100      	str	r1, [sp, #0]
 800b22c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b230:	4906      	ldr	r1, [pc, #24]	; (800b24c <__assert_func+0x34>)
 800b232:	462b      	mov	r3, r5
 800b234:	f000 f844 	bl	800b2c0 <fiprintf>
 800b238:	f000 f854 	bl	800b2e4 <abort>
 800b23c:	4b04      	ldr	r3, [pc, #16]	; (800b250 <__assert_func+0x38>)
 800b23e:	461c      	mov	r4, r3
 800b240:	e7f3      	b.n	800b22a <__assert_func+0x12>
 800b242:	bf00      	nop
 800b244:	20000064 	.word	0x20000064
 800b248:	0800bab6 	.word	0x0800bab6
 800b24c:	0800bac3 	.word	0x0800bac3
 800b250:	0800baf1 	.word	0x0800baf1

0800b254 <_calloc_r>:
 800b254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b256:	fba1 2402 	umull	r2, r4, r1, r2
 800b25a:	b94c      	cbnz	r4, 800b270 <_calloc_r+0x1c>
 800b25c:	4611      	mov	r1, r2
 800b25e:	9201      	str	r2, [sp, #4]
 800b260:	f7fd fe54 	bl	8008f0c <_malloc_r>
 800b264:	9a01      	ldr	r2, [sp, #4]
 800b266:	4605      	mov	r5, r0
 800b268:	b930      	cbnz	r0, 800b278 <_calloc_r+0x24>
 800b26a:	4628      	mov	r0, r5
 800b26c:	b003      	add	sp, #12
 800b26e:	bd30      	pop	{r4, r5, pc}
 800b270:	220c      	movs	r2, #12
 800b272:	6002      	str	r2, [r0, #0]
 800b274:	2500      	movs	r5, #0
 800b276:	e7f8      	b.n	800b26a <_calloc_r+0x16>
 800b278:	4621      	mov	r1, r4
 800b27a:	f7fe fc3e 	bl	8009afa <memset>
 800b27e:	e7f4      	b.n	800b26a <_calloc_r+0x16>

0800b280 <__ascii_mbtowc>:
 800b280:	b082      	sub	sp, #8
 800b282:	b901      	cbnz	r1, 800b286 <__ascii_mbtowc+0x6>
 800b284:	a901      	add	r1, sp, #4
 800b286:	b142      	cbz	r2, 800b29a <__ascii_mbtowc+0x1a>
 800b288:	b14b      	cbz	r3, 800b29e <__ascii_mbtowc+0x1e>
 800b28a:	7813      	ldrb	r3, [r2, #0]
 800b28c:	600b      	str	r3, [r1, #0]
 800b28e:	7812      	ldrb	r2, [r2, #0]
 800b290:	1e10      	subs	r0, r2, #0
 800b292:	bf18      	it	ne
 800b294:	2001      	movne	r0, #1
 800b296:	b002      	add	sp, #8
 800b298:	4770      	bx	lr
 800b29a:	4610      	mov	r0, r2
 800b29c:	e7fb      	b.n	800b296 <__ascii_mbtowc+0x16>
 800b29e:	f06f 0001 	mvn.w	r0, #1
 800b2a2:	e7f8      	b.n	800b296 <__ascii_mbtowc+0x16>

0800b2a4 <__ascii_wctomb>:
 800b2a4:	b149      	cbz	r1, 800b2ba <__ascii_wctomb+0x16>
 800b2a6:	2aff      	cmp	r2, #255	; 0xff
 800b2a8:	bf85      	ittet	hi
 800b2aa:	238a      	movhi	r3, #138	; 0x8a
 800b2ac:	6003      	strhi	r3, [r0, #0]
 800b2ae:	700a      	strbls	r2, [r1, #0]
 800b2b0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b2b4:	bf98      	it	ls
 800b2b6:	2001      	movls	r0, #1
 800b2b8:	4770      	bx	lr
 800b2ba:	4608      	mov	r0, r1
 800b2bc:	4770      	bx	lr
	...

0800b2c0 <fiprintf>:
 800b2c0:	b40e      	push	{r1, r2, r3}
 800b2c2:	b503      	push	{r0, r1, lr}
 800b2c4:	4601      	mov	r1, r0
 800b2c6:	ab03      	add	r3, sp, #12
 800b2c8:	4805      	ldr	r0, [pc, #20]	; (800b2e0 <fiprintf+0x20>)
 800b2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ce:	6800      	ldr	r0, [r0, #0]
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	f000 f837 	bl	800b344 <_vfiprintf_r>
 800b2d6:	b002      	add	sp, #8
 800b2d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2dc:	b003      	add	sp, #12
 800b2de:	4770      	bx	lr
 800b2e0:	20000064 	.word	0x20000064

0800b2e4 <abort>:
 800b2e4:	b508      	push	{r3, lr}
 800b2e6:	2006      	movs	r0, #6
 800b2e8:	f000 fa04 	bl	800b6f4 <raise>
 800b2ec:	2001      	movs	r0, #1
 800b2ee:	f7f8 fd0b 	bl	8003d08 <_exit>

0800b2f2 <__sfputc_r>:
 800b2f2:	6893      	ldr	r3, [r2, #8]
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	b410      	push	{r4}
 800b2fa:	6093      	str	r3, [r2, #8]
 800b2fc:	da08      	bge.n	800b310 <__sfputc_r+0x1e>
 800b2fe:	6994      	ldr	r4, [r2, #24]
 800b300:	42a3      	cmp	r3, r4
 800b302:	db01      	blt.n	800b308 <__sfputc_r+0x16>
 800b304:	290a      	cmp	r1, #10
 800b306:	d103      	bne.n	800b310 <__sfputc_r+0x1e>
 800b308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b30c:	f000 b934 	b.w	800b578 <__swbuf_r>
 800b310:	6813      	ldr	r3, [r2, #0]
 800b312:	1c58      	adds	r0, r3, #1
 800b314:	6010      	str	r0, [r2, #0]
 800b316:	7019      	strb	r1, [r3, #0]
 800b318:	4608      	mov	r0, r1
 800b31a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <__sfputs_r>:
 800b320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b322:	4606      	mov	r6, r0
 800b324:	460f      	mov	r7, r1
 800b326:	4614      	mov	r4, r2
 800b328:	18d5      	adds	r5, r2, r3
 800b32a:	42ac      	cmp	r4, r5
 800b32c:	d101      	bne.n	800b332 <__sfputs_r+0x12>
 800b32e:	2000      	movs	r0, #0
 800b330:	e007      	b.n	800b342 <__sfputs_r+0x22>
 800b332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b336:	463a      	mov	r2, r7
 800b338:	4630      	mov	r0, r6
 800b33a:	f7ff ffda 	bl	800b2f2 <__sfputc_r>
 800b33e:	1c43      	adds	r3, r0, #1
 800b340:	d1f3      	bne.n	800b32a <__sfputs_r+0xa>
 800b342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b344 <_vfiprintf_r>:
 800b344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b348:	460d      	mov	r5, r1
 800b34a:	b09d      	sub	sp, #116	; 0x74
 800b34c:	4614      	mov	r4, r2
 800b34e:	4698      	mov	r8, r3
 800b350:	4606      	mov	r6, r0
 800b352:	b118      	cbz	r0, 800b35c <_vfiprintf_r+0x18>
 800b354:	6a03      	ldr	r3, [r0, #32]
 800b356:	b90b      	cbnz	r3, 800b35c <_vfiprintf_r+0x18>
 800b358:	f7fe fb56 	bl	8009a08 <__sinit>
 800b35c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b35e:	07d9      	lsls	r1, r3, #31
 800b360:	d405      	bmi.n	800b36e <_vfiprintf_r+0x2a>
 800b362:	89ab      	ldrh	r3, [r5, #12]
 800b364:	059a      	lsls	r2, r3, #22
 800b366:	d402      	bmi.n	800b36e <_vfiprintf_r+0x2a>
 800b368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b36a:	f7fe fc54 	bl	8009c16 <__retarget_lock_acquire_recursive>
 800b36e:	89ab      	ldrh	r3, [r5, #12]
 800b370:	071b      	lsls	r3, r3, #28
 800b372:	d501      	bpl.n	800b378 <_vfiprintf_r+0x34>
 800b374:	692b      	ldr	r3, [r5, #16]
 800b376:	b99b      	cbnz	r3, 800b3a0 <_vfiprintf_r+0x5c>
 800b378:	4629      	mov	r1, r5
 800b37a:	4630      	mov	r0, r6
 800b37c:	f000 f93a 	bl	800b5f4 <__swsetup_r>
 800b380:	b170      	cbz	r0, 800b3a0 <_vfiprintf_r+0x5c>
 800b382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b384:	07dc      	lsls	r4, r3, #31
 800b386:	d504      	bpl.n	800b392 <_vfiprintf_r+0x4e>
 800b388:	f04f 30ff 	mov.w	r0, #4294967295
 800b38c:	b01d      	add	sp, #116	; 0x74
 800b38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	0598      	lsls	r0, r3, #22
 800b396:	d4f7      	bmi.n	800b388 <_vfiprintf_r+0x44>
 800b398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b39a:	f7fe fc3d 	bl	8009c18 <__retarget_lock_release_recursive>
 800b39e:	e7f3      	b.n	800b388 <_vfiprintf_r+0x44>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3a4:	2320      	movs	r3, #32
 800b3a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3ae:	2330      	movs	r3, #48	; 0x30
 800b3b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b564 <_vfiprintf_r+0x220>
 800b3b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3b8:	f04f 0901 	mov.w	r9, #1
 800b3bc:	4623      	mov	r3, r4
 800b3be:	469a      	mov	sl, r3
 800b3c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3c4:	b10a      	cbz	r2, 800b3ca <_vfiprintf_r+0x86>
 800b3c6:	2a25      	cmp	r2, #37	; 0x25
 800b3c8:	d1f9      	bne.n	800b3be <_vfiprintf_r+0x7a>
 800b3ca:	ebba 0b04 	subs.w	fp, sl, r4
 800b3ce:	d00b      	beq.n	800b3e8 <_vfiprintf_r+0xa4>
 800b3d0:	465b      	mov	r3, fp
 800b3d2:	4622      	mov	r2, r4
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	f7ff ffa2 	bl	800b320 <__sfputs_r>
 800b3dc:	3001      	adds	r0, #1
 800b3de:	f000 80a9 	beq.w	800b534 <_vfiprintf_r+0x1f0>
 800b3e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3e4:	445a      	add	r2, fp
 800b3e6:	9209      	str	r2, [sp, #36]	; 0x24
 800b3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f000 80a1 	beq.w	800b534 <_vfiprintf_r+0x1f0>
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3fc:	f10a 0a01 	add.w	sl, sl, #1
 800b400:	9304      	str	r3, [sp, #16]
 800b402:	9307      	str	r3, [sp, #28]
 800b404:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b408:	931a      	str	r3, [sp, #104]	; 0x68
 800b40a:	4654      	mov	r4, sl
 800b40c:	2205      	movs	r2, #5
 800b40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b412:	4854      	ldr	r0, [pc, #336]	; (800b564 <_vfiprintf_r+0x220>)
 800b414:	f7f4 ff04 	bl	8000220 <memchr>
 800b418:	9a04      	ldr	r2, [sp, #16]
 800b41a:	b9d8      	cbnz	r0, 800b454 <_vfiprintf_r+0x110>
 800b41c:	06d1      	lsls	r1, r2, #27
 800b41e:	bf44      	itt	mi
 800b420:	2320      	movmi	r3, #32
 800b422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b426:	0713      	lsls	r3, r2, #28
 800b428:	bf44      	itt	mi
 800b42a:	232b      	movmi	r3, #43	; 0x2b
 800b42c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b430:	f89a 3000 	ldrb.w	r3, [sl]
 800b434:	2b2a      	cmp	r3, #42	; 0x2a
 800b436:	d015      	beq.n	800b464 <_vfiprintf_r+0x120>
 800b438:	9a07      	ldr	r2, [sp, #28]
 800b43a:	4654      	mov	r4, sl
 800b43c:	2000      	movs	r0, #0
 800b43e:	f04f 0c0a 	mov.w	ip, #10
 800b442:	4621      	mov	r1, r4
 800b444:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b448:	3b30      	subs	r3, #48	; 0x30
 800b44a:	2b09      	cmp	r3, #9
 800b44c:	d94d      	bls.n	800b4ea <_vfiprintf_r+0x1a6>
 800b44e:	b1b0      	cbz	r0, 800b47e <_vfiprintf_r+0x13a>
 800b450:	9207      	str	r2, [sp, #28]
 800b452:	e014      	b.n	800b47e <_vfiprintf_r+0x13a>
 800b454:	eba0 0308 	sub.w	r3, r0, r8
 800b458:	fa09 f303 	lsl.w	r3, r9, r3
 800b45c:	4313      	orrs	r3, r2
 800b45e:	9304      	str	r3, [sp, #16]
 800b460:	46a2      	mov	sl, r4
 800b462:	e7d2      	b.n	800b40a <_vfiprintf_r+0xc6>
 800b464:	9b03      	ldr	r3, [sp, #12]
 800b466:	1d19      	adds	r1, r3, #4
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	9103      	str	r1, [sp, #12]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	bfbb      	ittet	lt
 800b470:	425b      	neglt	r3, r3
 800b472:	f042 0202 	orrlt.w	r2, r2, #2
 800b476:	9307      	strge	r3, [sp, #28]
 800b478:	9307      	strlt	r3, [sp, #28]
 800b47a:	bfb8      	it	lt
 800b47c:	9204      	strlt	r2, [sp, #16]
 800b47e:	7823      	ldrb	r3, [r4, #0]
 800b480:	2b2e      	cmp	r3, #46	; 0x2e
 800b482:	d10c      	bne.n	800b49e <_vfiprintf_r+0x15a>
 800b484:	7863      	ldrb	r3, [r4, #1]
 800b486:	2b2a      	cmp	r3, #42	; 0x2a
 800b488:	d134      	bne.n	800b4f4 <_vfiprintf_r+0x1b0>
 800b48a:	9b03      	ldr	r3, [sp, #12]
 800b48c:	1d1a      	adds	r2, r3, #4
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	9203      	str	r2, [sp, #12]
 800b492:	2b00      	cmp	r3, #0
 800b494:	bfb8      	it	lt
 800b496:	f04f 33ff 	movlt.w	r3, #4294967295
 800b49a:	3402      	adds	r4, #2
 800b49c:	9305      	str	r3, [sp, #20]
 800b49e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b574 <_vfiprintf_r+0x230>
 800b4a2:	7821      	ldrb	r1, [r4, #0]
 800b4a4:	2203      	movs	r2, #3
 800b4a6:	4650      	mov	r0, sl
 800b4a8:	f7f4 feba 	bl	8000220 <memchr>
 800b4ac:	b138      	cbz	r0, 800b4be <_vfiprintf_r+0x17a>
 800b4ae:	9b04      	ldr	r3, [sp, #16]
 800b4b0:	eba0 000a 	sub.w	r0, r0, sl
 800b4b4:	2240      	movs	r2, #64	; 0x40
 800b4b6:	4082      	lsls	r2, r0
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	3401      	adds	r4, #1
 800b4bc:	9304      	str	r3, [sp, #16]
 800b4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c2:	4829      	ldr	r0, [pc, #164]	; (800b568 <_vfiprintf_r+0x224>)
 800b4c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4c8:	2206      	movs	r2, #6
 800b4ca:	f7f4 fea9 	bl	8000220 <memchr>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d03f      	beq.n	800b552 <_vfiprintf_r+0x20e>
 800b4d2:	4b26      	ldr	r3, [pc, #152]	; (800b56c <_vfiprintf_r+0x228>)
 800b4d4:	bb1b      	cbnz	r3, 800b51e <_vfiprintf_r+0x1da>
 800b4d6:	9b03      	ldr	r3, [sp, #12]
 800b4d8:	3307      	adds	r3, #7
 800b4da:	f023 0307 	bic.w	r3, r3, #7
 800b4de:	3308      	adds	r3, #8
 800b4e0:	9303      	str	r3, [sp, #12]
 800b4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e4:	443b      	add	r3, r7
 800b4e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4e8:	e768      	b.n	800b3bc <_vfiprintf_r+0x78>
 800b4ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4ee:	460c      	mov	r4, r1
 800b4f0:	2001      	movs	r0, #1
 800b4f2:	e7a6      	b.n	800b442 <_vfiprintf_r+0xfe>
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	3401      	adds	r4, #1
 800b4f8:	9305      	str	r3, [sp, #20]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	f04f 0c0a 	mov.w	ip, #10
 800b500:	4620      	mov	r0, r4
 800b502:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b506:	3a30      	subs	r2, #48	; 0x30
 800b508:	2a09      	cmp	r2, #9
 800b50a:	d903      	bls.n	800b514 <_vfiprintf_r+0x1d0>
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0c6      	beq.n	800b49e <_vfiprintf_r+0x15a>
 800b510:	9105      	str	r1, [sp, #20]
 800b512:	e7c4      	b.n	800b49e <_vfiprintf_r+0x15a>
 800b514:	fb0c 2101 	mla	r1, ip, r1, r2
 800b518:	4604      	mov	r4, r0
 800b51a:	2301      	movs	r3, #1
 800b51c:	e7f0      	b.n	800b500 <_vfiprintf_r+0x1bc>
 800b51e:	ab03      	add	r3, sp, #12
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	462a      	mov	r2, r5
 800b524:	4b12      	ldr	r3, [pc, #72]	; (800b570 <_vfiprintf_r+0x22c>)
 800b526:	a904      	add	r1, sp, #16
 800b528:	4630      	mov	r0, r6
 800b52a:	f7fd fe1b 	bl	8009164 <_printf_float>
 800b52e:	4607      	mov	r7, r0
 800b530:	1c78      	adds	r0, r7, #1
 800b532:	d1d6      	bne.n	800b4e2 <_vfiprintf_r+0x19e>
 800b534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b536:	07d9      	lsls	r1, r3, #31
 800b538:	d405      	bmi.n	800b546 <_vfiprintf_r+0x202>
 800b53a:	89ab      	ldrh	r3, [r5, #12]
 800b53c:	059a      	lsls	r2, r3, #22
 800b53e:	d402      	bmi.n	800b546 <_vfiprintf_r+0x202>
 800b540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b542:	f7fe fb69 	bl	8009c18 <__retarget_lock_release_recursive>
 800b546:	89ab      	ldrh	r3, [r5, #12]
 800b548:	065b      	lsls	r3, r3, #25
 800b54a:	f53f af1d 	bmi.w	800b388 <_vfiprintf_r+0x44>
 800b54e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b550:	e71c      	b.n	800b38c <_vfiprintf_r+0x48>
 800b552:	ab03      	add	r3, sp, #12
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	462a      	mov	r2, r5
 800b558:	4b05      	ldr	r3, [pc, #20]	; (800b570 <_vfiprintf_r+0x22c>)
 800b55a:	a904      	add	r1, sp, #16
 800b55c:	4630      	mov	r0, r6
 800b55e:	f7fe f8a5 	bl	80096ac <_printf_i>
 800b562:	e7e4      	b.n	800b52e <_vfiprintf_r+0x1ea>
 800b564:	0800bbf3 	.word	0x0800bbf3
 800b568:	0800bbfd 	.word	0x0800bbfd
 800b56c:	08009165 	.word	0x08009165
 800b570:	0800b321 	.word	0x0800b321
 800b574:	0800bbf9 	.word	0x0800bbf9

0800b578 <__swbuf_r>:
 800b578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b57a:	460e      	mov	r6, r1
 800b57c:	4614      	mov	r4, r2
 800b57e:	4605      	mov	r5, r0
 800b580:	b118      	cbz	r0, 800b58a <__swbuf_r+0x12>
 800b582:	6a03      	ldr	r3, [r0, #32]
 800b584:	b90b      	cbnz	r3, 800b58a <__swbuf_r+0x12>
 800b586:	f7fe fa3f 	bl	8009a08 <__sinit>
 800b58a:	69a3      	ldr	r3, [r4, #24]
 800b58c:	60a3      	str	r3, [r4, #8]
 800b58e:	89a3      	ldrh	r3, [r4, #12]
 800b590:	071a      	lsls	r2, r3, #28
 800b592:	d525      	bpl.n	800b5e0 <__swbuf_r+0x68>
 800b594:	6923      	ldr	r3, [r4, #16]
 800b596:	b31b      	cbz	r3, 800b5e0 <__swbuf_r+0x68>
 800b598:	6823      	ldr	r3, [r4, #0]
 800b59a:	6922      	ldr	r2, [r4, #16]
 800b59c:	1a98      	subs	r0, r3, r2
 800b59e:	6963      	ldr	r3, [r4, #20]
 800b5a0:	b2f6      	uxtb	r6, r6
 800b5a2:	4283      	cmp	r3, r0
 800b5a4:	4637      	mov	r7, r6
 800b5a6:	dc04      	bgt.n	800b5b2 <__swbuf_r+0x3a>
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	f7ff fe0c 	bl	800b1c8 <_fflush_r>
 800b5b0:	b9e0      	cbnz	r0, 800b5ec <__swbuf_r+0x74>
 800b5b2:	68a3      	ldr	r3, [r4, #8]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	60a3      	str	r3, [r4, #8]
 800b5b8:	6823      	ldr	r3, [r4, #0]
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	6022      	str	r2, [r4, #0]
 800b5be:	701e      	strb	r6, [r3, #0]
 800b5c0:	6962      	ldr	r2, [r4, #20]
 800b5c2:	1c43      	adds	r3, r0, #1
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d004      	beq.n	800b5d2 <__swbuf_r+0x5a>
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	07db      	lsls	r3, r3, #31
 800b5cc:	d506      	bpl.n	800b5dc <__swbuf_r+0x64>
 800b5ce:	2e0a      	cmp	r6, #10
 800b5d0:	d104      	bne.n	800b5dc <__swbuf_r+0x64>
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	f7ff fdf7 	bl	800b1c8 <_fflush_r>
 800b5da:	b938      	cbnz	r0, 800b5ec <__swbuf_r+0x74>
 800b5dc:	4638      	mov	r0, r7
 800b5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	f000 f806 	bl	800b5f4 <__swsetup_r>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d0d5      	beq.n	800b598 <__swbuf_r+0x20>
 800b5ec:	f04f 37ff 	mov.w	r7, #4294967295
 800b5f0:	e7f4      	b.n	800b5dc <__swbuf_r+0x64>
	...

0800b5f4 <__swsetup_r>:
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	4b2a      	ldr	r3, [pc, #168]	; (800b6a0 <__swsetup_r+0xac>)
 800b5f8:	4605      	mov	r5, r0
 800b5fa:	6818      	ldr	r0, [r3, #0]
 800b5fc:	460c      	mov	r4, r1
 800b5fe:	b118      	cbz	r0, 800b608 <__swsetup_r+0x14>
 800b600:	6a03      	ldr	r3, [r0, #32]
 800b602:	b90b      	cbnz	r3, 800b608 <__swsetup_r+0x14>
 800b604:	f7fe fa00 	bl	8009a08 <__sinit>
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b60e:	0718      	lsls	r0, r3, #28
 800b610:	d422      	bmi.n	800b658 <__swsetup_r+0x64>
 800b612:	06d9      	lsls	r1, r3, #27
 800b614:	d407      	bmi.n	800b626 <__swsetup_r+0x32>
 800b616:	2309      	movs	r3, #9
 800b618:	602b      	str	r3, [r5, #0]
 800b61a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b61e:	81a3      	strh	r3, [r4, #12]
 800b620:	f04f 30ff 	mov.w	r0, #4294967295
 800b624:	e034      	b.n	800b690 <__swsetup_r+0x9c>
 800b626:	0758      	lsls	r0, r3, #29
 800b628:	d512      	bpl.n	800b650 <__swsetup_r+0x5c>
 800b62a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b62c:	b141      	cbz	r1, 800b640 <__swsetup_r+0x4c>
 800b62e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b632:	4299      	cmp	r1, r3
 800b634:	d002      	beq.n	800b63c <__swsetup_r+0x48>
 800b636:	4628      	mov	r0, r5
 800b638:	f7ff f978 	bl	800a92c <_free_r>
 800b63c:	2300      	movs	r3, #0
 800b63e:	6363      	str	r3, [r4, #52]	; 0x34
 800b640:	89a3      	ldrh	r3, [r4, #12]
 800b642:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b646:	81a3      	strh	r3, [r4, #12]
 800b648:	2300      	movs	r3, #0
 800b64a:	6063      	str	r3, [r4, #4]
 800b64c:	6923      	ldr	r3, [r4, #16]
 800b64e:	6023      	str	r3, [r4, #0]
 800b650:	89a3      	ldrh	r3, [r4, #12]
 800b652:	f043 0308 	orr.w	r3, r3, #8
 800b656:	81a3      	strh	r3, [r4, #12]
 800b658:	6923      	ldr	r3, [r4, #16]
 800b65a:	b94b      	cbnz	r3, 800b670 <__swsetup_r+0x7c>
 800b65c:	89a3      	ldrh	r3, [r4, #12]
 800b65e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b666:	d003      	beq.n	800b670 <__swsetup_r+0x7c>
 800b668:	4621      	mov	r1, r4
 800b66a:	4628      	mov	r0, r5
 800b66c:	f000 f884 	bl	800b778 <__smakebuf_r>
 800b670:	89a0      	ldrh	r0, [r4, #12]
 800b672:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b676:	f010 0301 	ands.w	r3, r0, #1
 800b67a:	d00a      	beq.n	800b692 <__swsetup_r+0x9e>
 800b67c:	2300      	movs	r3, #0
 800b67e:	60a3      	str	r3, [r4, #8]
 800b680:	6963      	ldr	r3, [r4, #20]
 800b682:	425b      	negs	r3, r3
 800b684:	61a3      	str	r3, [r4, #24]
 800b686:	6923      	ldr	r3, [r4, #16]
 800b688:	b943      	cbnz	r3, 800b69c <__swsetup_r+0xa8>
 800b68a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b68e:	d1c4      	bne.n	800b61a <__swsetup_r+0x26>
 800b690:	bd38      	pop	{r3, r4, r5, pc}
 800b692:	0781      	lsls	r1, r0, #30
 800b694:	bf58      	it	pl
 800b696:	6963      	ldrpl	r3, [r4, #20]
 800b698:	60a3      	str	r3, [r4, #8]
 800b69a:	e7f4      	b.n	800b686 <__swsetup_r+0x92>
 800b69c:	2000      	movs	r0, #0
 800b69e:	e7f7      	b.n	800b690 <__swsetup_r+0x9c>
 800b6a0:	20000064 	.word	0x20000064

0800b6a4 <_raise_r>:
 800b6a4:	291f      	cmp	r1, #31
 800b6a6:	b538      	push	{r3, r4, r5, lr}
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	460d      	mov	r5, r1
 800b6ac:	d904      	bls.n	800b6b8 <_raise_r+0x14>
 800b6ae:	2316      	movs	r3, #22
 800b6b0:	6003      	str	r3, [r0, #0]
 800b6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b6:	bd38      	pop	{r3, r4, r5, pc}
 800b6b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b6ba:	b112      	cbz	r2, 800b6c2 <_raise_r+0x1e>
 800b6bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6c0:	b94b      	cbnz	r3, 800b6d6 <_raise_r+0x32>
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f000 f830 	bl	800b728 <_getpid_r>
 800b6c8:	462a      	mov	r2, r5
 800b6ca:	4601      	mov	r1, r0
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6d2:	f000 b817 	b.w	800b704 <_kill_r>
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d00a      	beq.n	800b6f0 <_raise_r+0x4c>
 800b6da:	1c59      	adds	r1, r3, #1
 800b6dc:	d103      	bne.n	800b6e6 <_raise_r+0x42>
 800b6de:	2316      	movs	r3, #22
 800b6e0:	6003      	str	r3, [r0, #0]
 800b6e2:	2001      	movs	r0, #1
 800b6e4:	e7e7      	b.n	800b6b6 <_raise_r+0x12>
 800b6e6:	2400      	movs	r4, #0
 800b6e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	4798      	blx	r3
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	e7e0      	b.n	800b6b6 <_raise_r+0x12>

0800b6f4 <raise>:
 800b6f4:	4b02      	ldr	r3, [pc, #8]	; (800b700 <raise+0xc>)
 800b6f6:	4601      	mov	r1, r0
 800b6f8:	6818      	ldr	r0, [r3, #0]
 800b6fa:	f7ff bfd3 	b.w	800b6a4 <_raise_r>
 800b6fe:	bf00      	nop
 800b700:	20000064 	.word	0x20000064

0800b704 <_kill_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4d07      	ldr	r5, [pc, #28]	; (800b724 <_kill_r+0x20>)
 800b708:	2300      	movs	r3, #0
 800b70a:	4604      	mov	r4, r0
 800b70c:	4608      	mov	r0, r1
 800b70e:	4611      	mov	r1, r2
 800b710:	602b      	str	r3, [r5, #0]
 800b712:	f7f8 fae9 	bl	8003ce8 <_kill>
 800b716:	1c43      	adds	r3, r0, #1
 800b718:	d102      	bne.n	800b720 <_kill_r+0x1c>
 800b71a:	682b      	ldr	r3, [r5, #0]
 800b71c:	b103      	cbz	r3, 800b720 <_kill_r+0x1c>
 800b71e:	6023      	str	r3, [r4, #0]
 800b720:	bd38      	pop	{r3, r4, r5, pc}
 800b722:	bf00      	nop
 800b724:	20000cc4 	.word	0x20000cc4

0800b728 <_getpid_r>:
 800b728:	f7f8 bad6 	b.w	8003cd8 <_getpid>

0800b72c <__swhatbuf_r>:
 800b72c:	b570      	push	{r4, r5, r6, lr}
 800b72e:	460c      	mov	r4, r1
 800b730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b734:	2900      	cmp	r1, #0
 800b736:	b096      	sub	sp, #88	; 0x58
 800b738:	4615      	mov	r5, r2
 800b73a:	461e      	mov	r6, r3
 800b73c:	da0d      	bge.n	800b75a <__swhatbuf_r+0x2e>
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b744:	f04f 0100 	mov.w	r1, #0
 800b748:	bf0c      	ite	eq
 800b74a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b74e:	2340      	movne	r3, #64	; 0x40
 800b750:	2000      	movs	r0, #0
 800b752:	6031      	str	r1, [r6, #0]
 800b754:	602b      	str	r3, [r5, #0]
 800b756:	b016      	add	sp, #88	; 0x58
 800b758:	bd70      	pop	{r4, r5, r6, pc}
 800b75a:	466a      	mov	r2, sp
 800b75c:	f000 f848 	bl	800b7f0 <_fstat_r>
 800b760:	2800      	cmp	r0, #0
 800b762:	dbec      	blt.n	800b73e <__swhatbuf_r+0x12>
 800b764:	9901      	ldr	r1, [sp, #4]
 800b766:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b76a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b76e:	4259      	negs	r1, r3
 800b770:	4159      	adcs	r1, r3
 800b772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b776:	e7eb      	b.n	800b750 <__swhatbuf_r+0x24>

0800b778 <__smakebuf_r>:
 800b778:	898b      	ldrh	r3, [r1, #12]
 800b77a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b77c:	079d      	lsls	r5, r3, #30
 800b77e:	4606      	mov	r6, r0
 800b780:	460c      	mov	r4, r1
 800b782:	d507      	bpl.n	800b794 <__smakebuf_r+0x1c>
 800b784:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b788:	6023      	str	r3, [r4, #0]
 800b78a:	6123      	str	r3, [r4, #16]
 800b78c:	2301      	movs	r3, #1
 800b78e:	6163      	str	r3, [r4, #20]
 800b790:	b002      	add	sp, #8
 800b792:	bd70      	pop	{r4, r5, r6, pc}
 800b794:	ab01      	add	r3, sp, #4
 800b796:	466a      	mov	r2, sp
 800b798:	f7ff ffc8 	bl	800b72c <__swhatbuf_r>
 800b79c:	9900      	ldr	r1, [sp, #0]
 800b79e:	4605      	mov	r5, r0
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f7fd fbb3 	bl	8008f0c <_malloc_r>
 800b7a6:	b948      	cbnz	r0, 800b7bc <__smakebuf_r+0x44>
 800b7a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ac:	059a      	lsls	r2, r3, #22
 800b7ae:	d4ef      	bmi.n	800b790 <__smakebuf_r+0x18>
 800b7b0:	f023 0303 	bic.w	r3, r3, #3
 800b7b4:	f043 0302 	orr.w	r3, r3, #2
 800b7b8:	81a3      	strh	r3, [r4, #12]
 800b7ba:	e7e3      	b.n	800b784 <__smakebuf_r+0xc>
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	6020      	str	r0, [r4, #0]
 800b7c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7c4:	81a3      	strh	r3, [r4, #12]
 800b7c6:	9b00      	ldr	r3, [sp, #0]
 800b7c8:	6163      	str	r3, [r4, #20]
 800b7ca:	9b01      	ldr	r3, [sp, #4]
 800b7cc:	6120      	str	r0, [r4, #16]
 800b7ce:	b15b      	cbz	r3, 800b7e8 <__smakebuf_r+0x70>
 800b7d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	f000 f81d 	bl	800b814 <_isatty_r>
 800b7da:	b128      	cbz	r0, 800b7e8 <__smakebuf_r+0x70>
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	f023 0303 	bic.w	r3, r3, #3
 800b7e2:	f043 0301 	orr.w	r3, r3, #1
 800b7e6:	81a3      	strh	r3, [r4, #12]
 800b7e8:	89a3      	ldrh	r3, [r4, #12]
 800b7ea:	431d      	orrs	r5, r3
 800b7ec:	81a5      	strh	r5, [r4, #12]
 800b7ee:	e7cf      	b.n	800b790 <__smakebuf_r+0x18>

0800b7f0 <_fstat_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d07      	ldr	r5, [pc, #28]	; (800b810 <_fstat_r+0x20>)
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	602b      	str	r3, [r5, #0]
 800b7fe:	f7f8 fad2 	bl	8003da6 <_fstat>
 800b802:	1c43      	adds	r3, r0, #1
 800b804:	d102      	bne.n	800b80c <_fstat_r+0x1c>
 800b806:	682b      	ldr	r3, [r5, #0]
 800b808:	b103      	cbz	r3, 800b80c <_fstat_r+0x1c>
 800b80a:	6023      	str	r3, [r4, #0]
 800b80c:	bd38      	pop	{r3, r4, r5, pc}
 800b80e:	bf00      	nop
 800b810:	20000cc4 	.word	0x20000cc4

0800b814 <_isatty_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4d06      	ldr	r5, [pc, #24]	; (800b830 <_isatty_r+0x1c>)
 800b818:	2300      	movs	r3, #0
 800b81a:	4604      	mov	r4, r0
 800b81c:	4608      	mov	r0, r1
 800b81e:	602b      	str	r3, [r5, #0]
 800b820:	f7f8 fad1 	bl	8003dc6 <_isatty>
 800b824:	1c43      	adds	r3, r0, #1
 800b826:	d102      	bne.n	800b82e <_isatty_r+0x1a>
 800b828:	682b      	ldr	r3, [r5, #0]
 800b82a:	b103      	cbz	r3, 800b82e <_isatty_r+0x1a>
 800b82c:	6023      	str	r3, [r4, #0]
 800b82e:	bd38      	pop	{r3, r4, r5, pc}
 800b830:	20000cc4 	.word	0x20000cc4

0800b834 <_init>:
 800b834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b836:	bf00      	nop
 800b838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b83a:	bc08      	pop	{r3}
 800b83c:	469e      	mov	lr, r3
 800b83e:	4770      	bx	lr

0800b840 <_fini>:
 800b840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b842:	bf00      	nop
 800b844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b846:	bc08      	pop	{r3}
 800b848:	469e      	mov	lr, r3
 800b84a:	4770      	bx	lr
