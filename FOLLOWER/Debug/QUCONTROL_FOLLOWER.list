
QUCONTROL_FOLLOWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074b8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08007690  08007690  00017690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007850  08007850  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08007850  08007850  00017850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007858  08007858  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007858  08007858  00017858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08007860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  20000068  080078c8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b50  080078c8  00020b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023af3  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fff  00000000  00000000  00043bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f78  00000000  00000000  00047bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001887  00000000  00000000  00049b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005312  00000000  00000000  0004b3cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025e57  00000000  00000000  000506e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001225e1  00000000  00000000  00076538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009004  00000000  00000000  00198b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a1b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007678 	.word	0x08007678

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08007678 	.word	0x08007678

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Run_State>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Run_State(enum PodState state) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b09      	cmp	r3, #9
 8000522:	d817      	bhi.n	8000554 <Run_State+0x40>
 8000524:	a201      	add	r2, pc, #4	; (adr r2, 800052c <Run_State+0x18>)
 8000526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052a:	bf00      	nop
 800052c:	0800055d 	.word	0x0800055d
 8000530:	0800055d 	.word	0x0800055d
 8000534:	0800055d 	.word	0x0800055d
 8000538:	0800055d 	.word	0x0800055d
 800053c:	0800055d 	.word	0x0800055d
 8000540:	0800055d 	.word	0x0800055d
 8000544:	0800055d 	.word	0x0800055d
 8000548:	0800055d 	.word	0x0800055d
 800054c:	0800055d 	.word	0x0800055d
 8000550:	0800055d 	.word	0x0800055d
            break;
        case STDBY:

            break;
        default:
            printf("Invalid state\n");
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <Run_State+0x54>)
 8000556:	f006 fda5 	bl	80070a4 <puts>
            break;
 800055a:	e000      	b.n	800055e <Run_State+0x4a>
            break;
 800055c:	bf00      	nop
    }
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	08007690 	.word	0x08007690

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f001 fc1e 	bl	8001db2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f827 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 fcb5 	bl	8000ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 800057e:	f000 fc69 	bl	8000e54 <MX_DMA_Init>
  MX_ADC1_Init();
 8000582:	f000 f877 	bl	8000674 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000586:	f000 f977 	bl	8000878 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800058a:	f000 f9bb 	bl	8000904 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 800058e:	f000 f9ff 	bl	8000990 <MX_FDCAN3_Init>
  MX_I2C1_Init();
 8000592:	f000 fa43 	bl	8000a1c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000596:	f000 fb6b 	bl	8000c70 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800059a:	f000 fc33 	bl	8000e04 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800059e:	f000 fa7d 	bl	8000a9c <MX_I2C2_Init>
  MX_IWDG_Init();
 80005a2:	f000 fafb 	bl	8000b9c <MX_IWDG_Init>
  MX_ADC5_Init();
 80005a6:	f000 f901 	bl	80007ac <MX_ADC5_Init>
  MX_I2C3_Init();
 80005aa:	f000 fab7 	bl	8000b1c <MX_I2C3_Init>
  MX_SPI3_Init();
 80005ae:	f000 fb9d 	bl	8000cec <MX_SPI3_Init>
  MX_LPUART1_UART_Init();
 80005b2:	f000 fb11 	bl	8000bd8 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80005b6:	f000 fbd7 	bl	8000d68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  enum PodState Curr_State = INIT;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
  Run_State(Curr_State);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ffa7 	bl	8000514 <Run_State>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <main+0x5a>

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	2238      	movs	r2, #56	; 0x38
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f006 fe44 	bl	8007264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f003 fdf6 	bl	80041dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 80005f0:	232b      	movs	r3, #43	; 0x2b
 80005f2:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2340      	movs	r3, #64	; 0x40
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000610:	2303      	movs	r3, #3
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000618:	2355      	movs	r3, #85	; 0x55
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0318 	add.w	r3, r7, #24
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fe89 	bl	8004344 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000638:	f000 fd26 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2303      	movs	r3, #3
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000652:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2104      	movs	r1, #4
 8000658:	4618      	mov	r0, r3
 800065a:	f004 f985 	bl	8004968 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000664:	f000 fd10 	bl	8001088 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000668:	f004 fb54 	bl	8004d14 <HAL_RCC_EnableCSS>
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	; 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08c      	sub	sp, #48	; 0x30
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800067a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2220      	movs	r2, #32
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f006 fde9 	bl	8007264 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000692:	4b44      	ldr	r3, [pc, #272]	; (80007a4 <MX_ADC1_Init+0x130>)
 8000694:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000698:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800069a:	4b42      	ldr	r3, [pc, #264]	; (80007a4 <MX_ADC1_Init+0x130>)
 800069c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a8:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006ae:	4b3d      	ldr	r3, [pc, #244]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006b4:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ba:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006bc:	2204      	movs	r2, #4
 80006be:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006c0:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c6:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80006cc:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006ce:	2204      	movs	r2, #4
 80006d0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006da:	4b32      	ldr	r3, [pc, #200]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e0:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006f4:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fc:	4829      	ldr	r0, [pc, #164]	; (80007a4 <MX_ADC1_Init+0x130>)
 80006fe:	f001 fd9f 	bl	8002240 <HAL_ADC_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000708:	f000 fcbe 	bl	8001088 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000714:	4619      	mov	r1, r3
 8000716:	4823      	ldr	r0, [pc, #140]	; (80007a4 <MX_ADC1_Init+0x130>)
 8000718:	f002 fbb4 	bl	8002e84 <HAL_ADCEx_MultiModeConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000722:	f000 fcb1 	bl	8001088 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <MX_ADC1_Init+0x134>)
 8000728:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800072a:	2306      	movs	r3, #6
 800072c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000732:	237f      	movs	r3, #127	; 0x7f
 8000734:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000736:	2304      	movs	r3, #4
 8000738:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4619      	mov	r1, r3
 8000742:	4818      	ldr	r0, [pc, #96]	; (80007a4 <MX_ADC1_Init+0x130>)
 8000744:	f001 ff38 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800074e:	f000 fc9b 	bl	8001088 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000752:	230c      	movs	r3, #12
 8000754:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4812      	ldr	r0, [pc, #72]	; (80007a4 <MX_ADC1_Init+0x130>)
 800075c:	f001 ff2c 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000766:	f000 fc8f 	bl	8001088 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800076a:	2312      	movs	r3, #18
 800076c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	480c      	ldr	r0, [pc, #48]	; (80007a4 <MX_ADC1_Init+0x130>)
 8000774:	f001 ff20 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 800077e:	f000 fc83 	bl	8001088 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000782:	2318      	movs	r3, #24
 8000784:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <MX_ADC1_Init+0x130>)
 800078c:	f001 ff14 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000796:	f000 fc77 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3730      	adds	r7, #48	; 0x30
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000084 	.word	0x20000084
 80007a8:	04300002 	.word	0x04300002

080007ac <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f006 fd53 	bl	8007264 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80007be:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_ADC5_Init+0xc0>)
 80007c0:	4a2b      	ldr	r2, [pc, #172]	; (8000870 <MX_ADC5_Init+0xc4>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <MX_ADC5_Init+0xc0>)
 80007c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007ca:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <MX_ADC5_Init+0xc0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_ADC5_Init+0xc0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <MX_ADC5_Init+0xc0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <MX_ADC5_Init+0xc0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_ADC5_Init+0xc0>)
 80007e6:	2204      	movs	r2, #4
 80007e8:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <MX_ADC5_Init+0xc0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_ADC5_Init+0xc0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_ADC5_Init+0xc0>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_ADC5_Init+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_ADC5_Init+0xc0>)
 8000806:	2200      	movs	r2, #0
 8000808:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_ADC5_Init+0xc0>)
 800080c:	2200      	movs	r2, #0
 800080e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_ADC5_Init+0xc0>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_ADC5_Init+0xc0>)
 800081a:	2200      	movs	r2, #0
 800081c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_ADC5_Init+0xc0>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <MX_ADC5_Init+0xc0>)
 8000828:	f001 fd0a 	bl	8002240 <HAL_ADC_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000832:	f000 fc29 	bl	8001088 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_ADC5_Init+0xc8>)
 8000838:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083a:	2306      	movs	r3, #6
 800083c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000842:	237f      	movs	r3, #127	; 0x7f
 8000844:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000846:	2304      	movs	r3, #4
 8000848:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800084e:	463b      	mov	r3, r7
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <MX_ADC5_Init+0xc0>)
 8000854:	f001 feb0 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 800085e:	f000 fc13 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3720      	adds	r7, #32
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000f0 	.word	0x200000f0
 8000870:	50000600 	.word	0x50000600
 8000874:	08600004 	.word	0x08600004

08000878 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_FDCAN1_Init+0x84>)
 800087e:	4a20      	ldr	r2, [pc, #128]	; (8000900 <MX_FDCAN1_Init+0x88>)
 8000880:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_FDCAN1_Init+0x84>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_FDCAN1_Init+0x84>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_FDCAN1_Init+0x84>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_FDCAN1_Init+0x84>)
 8000896:	2200      	movs	r2, #0
 8000898:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_FDCAN1_Init+0x84>)
 800089c:	2200      	movs	r2, #0
 800089e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_FDCAN1_Init+0x84>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_FDCAN1_Init+0x84>)
 80008a8:	2210      	movs	r2, #16
 80008aa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_FDCAN1_Init+0x84>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_FDCAN1_Init+0x84>)
 80008b4:	2202      	movs	r2, #2
 80008b6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_FDCAN1_Init+0x84>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_FDCAN1_Init+0x84>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_FDCAN1_Init+0x84>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_FDCAN1_Init+0x84>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_FDCAN1_Init+0x84>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_FDCAN1_Init+0x84>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_FDCAN1_Init+0x84>)
 80008de:	2200      	movs	r2, #0
 80008e0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_FDCAN1_Init+0x84>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_FDCAN1_Init+0x84>)
 80008ea:	f002 fe9d 	bl	8003628 <HAL_FDCAN_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80008f4:	f000 fbc8 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000021c 	.word	0x2000021c
 8000900:	40006400 	.word	0x40006400

08000904 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_FDCAN2_Init+0x84>)
 800090a:	4a20      	ldr	r2, [pc, #128]	; (800098c <MX_FDCAN2_Init+0x88>)
 800090c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_FDCAN2_Init+0x84>)
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_FDCAN2_Init+0x84>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800091a:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_FDCAN2_Init+0x84>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_FDCAN2_Init+0x84>)
 8000922:	2200      	movs	r2, #0
 8000924:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_FDCAN2_Init+0x84>)
 8000928:	2200      	movs	r2, #0
 800092a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_FDCAN2_Init+0x84>)
 800092e:	2200      	movs	r2, #0
 8000930:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_FDCAN2_Init+0x84>)
 8000934:	2210      	movs	r2, #16
 8000936:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_FDCAN2_Init+0x84>)
 800093a:	2201      	movs	r2, #1
 800093c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_FDCAN2_Init+0x84>)
 8000940:	2202      	movs	r2, #2
 8000942:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_FDCAN2_Init+0x84>)
 8000946:	2202      	movs	r2, #2
 8000948:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_FDCAN2_Init+0x84>)
 800094c:	2201      	movs	r2, #1
 800094e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <MX_FDCAN2_Init+0x84>)
 8000952:	2201      	movs	r2, #1
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_FDCAN2_Init+0x84>)
 8000958:	2201      	movs	r2, #1
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <MX_FDCAN2_Init+0x84>)
 800095e:	2201      	movs	r2, #1
 8000960:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_FDCAN2_Init+0x84>)
 8000964:	2200      	movs	r2, #0
 8000966:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <MX_FDCAN2_Init+0x84>)
 800096a:	2200      	movs	r2, #0
 800096c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_FDCAN2_Init+0x84>)
 8000970:	2200      	movs	r2, #0
 8000972:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_FDCAN2_Init+0x84>)
 8000976:	f002 fe57 	bl	8003628 <HAL_FDCAN_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000980:	f000 fb82 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000280 	.word	0x20000280
 800098c:	40006800 	.word	0x40006800

08000990 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 8000996:	4a20      	ldr	r2, [pc, #128]	; (8000a18 <MX_FDCAN3_Init+0x88>)
 8000998:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009c0:	2210      	movs	r2, #16
 80009c2:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009d8:	2201      	movs	r2, #1
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009de:	2201      	movs	r2, #1
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_FDCAN3_Init+0x84>)
 8000a02:	f002 fe11 	bl	8003628 <HAL_FDCAN_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 8000a0c:	f000 fb3c 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200002e4 	.word	0x200002e4
 8000a18:	40006c00 	.word	0x40006c00

08000a1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a22:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <MX_I2C1_Init+0x78>)
 8000a24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A0A6FB;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a28:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <MX_I2C1_Init+0x7c>)
 8000a2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a56:	480e      	ldr	r0, [pc, #56]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a58:	f003 f946 	bl	8003ce8 <HAL_I2C_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a62:	f000 fb11 	bl	8001088 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	4809      	ldr	r0, [pc, #36]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a6a:	f003 f9d8 	bl	8003e1e <HAL_I2CEx_ConfigAnalogFilter>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a74:	f000 fb08 	bl	8001088 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_I2C1_Init+0x74>)
 8000a7c:	f003 fa1a 	bl	8003eb4 <HAL_I2CEx_ConfigDigitalFilter>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a86:	f000 faff 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000348 	.word	0x20000348
 8000a94:	40005400 	.word	0x40005400
 8000a98:	10a0a6fb 	.word	0x10a0a6fb

08000a9c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000aa2:	4a1c      	ldr	r2, [pc, #112]	; (8000b14 <MX_I2C2_Init+0x78>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10A0A6FB;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <MX_I2C2_Init+0x7c>)
 8000aaa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ad6:	480e      	ldr	r0, [pc, #56]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000ad8:	f003 f906 	bl	8003ce8 <HAL_I2C_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ae2:	f000 fad1 	bl	8001088 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000aea:	f003 f998 	bl	8003e1e <HAL_I2CEx_ConfigAnalogFilter>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000af4:	f000 fac8 	bl	8001088 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000af8:	2100      	movs	r1, #0
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000afc:	f003 f9da 	bl	8003eb4 <HAL_I2CEx_ConfigDigitalFilter>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b06:	f000 fabf 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000039c 	.word	0x2000039c
 8000b14:	40005800 	.word	0x40005800
 8000b18:	10a0a6fb 	.word	0x10a0a6fb

08000b1c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <MX_I2C3_Init+0x78>)
 8000b24:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10A0A6FB;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b28:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <MX_I2C3_Init+0x7c>)
 8000b2a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b56:	480e      	ldr	r0, [pc, #56]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b58:	f003 f8c6 	bl	8003ce8 <HAL_I2C_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b62:	f000 fa91 	bl	8001088 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b6a:	f003 f958 	bl	8003e1e <HAL_I2CEx_ConfigAnalogFilter>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b74:	f000 fa88 	bl	8001088 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b7c:	f003 f99a 	bl	8003eb4 <HAL_I2CEx_ConfigDigitalFilter>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b86:	f000 fa7f 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200003f0 	.word	0x200003f0
 8000b94:	40007800 	.word	0x40007800
 8000b98:	10a0a6fb 	.word	0x10a0a6fb

08000b9c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_IWDG_Init+0x34>)
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <MX_IWDG_Init+0x38>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <MX_IWDG_Init+0x34>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_IWDG_Init+0x34>)
 8000bae:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bb2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_IWDG_Init+0x34>)
 8000bb6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bba:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_IWDG_Init+0x34>)
 8000bbe:	f003 f9c5 	bl	8003f4c <HAL_IWDG_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000bc8:	f000 fa5e 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000564 	.word	0x20000564
 8000bd4:	40003000 	.word	0x40003000

08000bd8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_LPUART1_UART_Init+0x90>)
 8000bde:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <MX_LPUART1_UART_Init+0x94>)
 8000be0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <MX_LPUART1_UART_Init+0x90>)
 8000be4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000be8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_LPUART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <MX_LPUART1_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <MX_LPUART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_LPUART1_UART_Init+0x90>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <MX_LPUART1_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_LPUART1_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_LPUART1_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_LPUART1_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4811      	ldr	r0, [pc, #68]	; (8000c68 <MX_LPUART1_UART_Init+0x90>)
 8000c22:	f005 fe46 	bl	80068b2 <HAL_RS485Ex_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c2c:	f000 fa2c 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c30:	2100      	movs	r1, #0
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <MX_LPUART1_UART_Init+0x90>)
 8000c34:	f005 fedf 	bl	80069f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c3e:	f000 fa23 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <MX_LPUART1_UART_Init+0x90>)
 8000c46:	f005 ff14 	bl	8006a72 <HAL_UARTEx_SetRxFifoThreshold>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c50:	f000 fa1a 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_LPUART1_UART_Init+0x90>)
 8000c56:	f005 fe95 	bl	8006984 <HAL_UARTEx_DisableFifoMode>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c60:	f000 fa12 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000574 	.word	0x20000574
 8000c6c:	40008000 	.word	0x40008000

08000c70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000c76:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <MX_SPI1_Init+0x78>)
 8000c78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000c7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000c8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000cbe:	2207      	movs	r2, #7
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000cca:	2208      	movs	r2, #8
 8000ccc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_SPI1_Init+0x74>)
 8000cd0:	f004 fae0 	bl	8005294 <HAL_SPI_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cda:	f000 f9d5 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000608 	.word	0x20000608
 8000ce8:	40013000 	.word	0x40013000

08000cec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <MX_SPI3_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cfc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d06:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d0a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d46:	2208      	movs	r2, #8
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d4c:	f004 faa2 	bl	8005294 <HAL_SPI_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f000 f997 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000066c 	.word	0x2000066c
 8000d64:	40003c00 	.word	0x40003c00

08000d68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16999;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000d90:	f244 2267 	movw	r2, #16999	; 0x4267
 8000d94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000d98:	2210      	movs	r2, #16
 8000d9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000d9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000da2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db0:	4813      	ldr	r0, [pc, #76]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000db2:	f004 fb1a 	bl	80053ea <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000dbc:	f000 f964 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000dce:	f004 fce1 	bl	8005794 <HAL_TIM_ConfigClockSource>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000dd8:	f000 f956 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000dea:	f004 ff6b 	bl	8005cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000df4:	f000 f948 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200006d0 	.word	0x200006d0

08000e04 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <MX_USB_PCD_Init+0x48>)
 8000e0a:	4a11      	ldr	r2, [pc, #68]	; (8000e50 <MX_USB_PCD_Init+0x4c>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_USB_PCD_Init+0x48>)
 8000e10:	2208      	movs	r2, #8
 8000e12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <MX_USB_PCD_Init+0x48>)
 8000e16:	2202      	movs	r2, #2
 8000e18:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_USB_PCD_Init+0x48>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <MX_USB_PCD_Init+0x48>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_USB_PCD_Init+0x48>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <MX_USB_PCD_Init+0x48>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_USB_PCD_Init+0x48>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <MX_USB_PCD_Init+0x48>)
 8000e3a:	f003 f8d6 	bl	8003fea <HAL_PCD_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000e44:	f000 f920 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000071c 	.word	0x2000071c
 8000e50:	40005c00 	.word	0x40005c00

08000e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e5a:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <MX_DMA_Init+0x90>)
 8000e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e5e:	4a21      	ldr	r2, [pc, #132]	; (8000ee4 <MX_DMA_Init+0x90>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6493      	str	r3, [r2, #72]	; 0x48
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_DMA_Init+0x90>)
 8000e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_DMA_Init+0x90>)
 8000e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e76:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <MX_DMA_Init+0x90>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6493      	str	r3, [r2, #72]	; 0x48
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_DMA_Init+0x90>)
 8000e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	200b      	movs	r0, #11
 8000e90:	f002 f9db 	bl	800324a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e94:	200b      	movs	r0, #11
 8000e96:	f002 f9f2 	bl	800327e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	200c      	movs	r0, #12
 8000ea0:	f002 f9d3 	bl	800324a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ea4:	200c      	movs	r0, #12
 8000ea6:	f002 f9ea 	bl	800327e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	200d      	movs	r0, #13
 8000eb0:	f002 f9cb 	bl	800324a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000eb4:	200d      	movs	r0, #13
 8000eb6:	f002 f9e2 	bl	800327e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	200e      	movs	r0, #14
 8000ec0:	f002 f9c3 	bl	800324a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ec4:	200e      	movs	r0, #14
 8000ec6:	f002 f9da 	bl	800327e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f002 f9bb 	bl	800324a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ed4:	200f      	movs	r0, #15
 8000ed6:	f002 f9d2 	bl	800327e <HAL_NVIC_EnableIRQ>

}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	; 0x30
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efe:	4b5d      	ldr	r3, [pc, #372]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a5c      	ldr	r2, [pc, #368]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b5a      	ldr	r3, [pc, #360]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	4b57      	ldr	r3, [pc, #348]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a56      	ldr	r2, [pc, #344]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b54      	ldr	r3, [pc, #336]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2e:	4b51      	ldr	r3, [pc, #324]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a50      	ldr	r2, [pc, #320]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f34:	f043 0320 	orr.w	r3, r3, #32
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b4e      	ldr	r3, [pc, #312]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0320 	and.w	r3, r3, #32
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b4b      	ldr	r3, [pc, #300]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a4a      	ldr	r2, [pc, #296]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b48      	ldr	r3, [pc, #288]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	4b45      	ldr	r3, [pc, #276]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	4a44      	ldr	r2, [pc, #272]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6a:	4b42      	ldr	r3, [pc, #264]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a3e      	ldr	r2, [pc, #248]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <MX_GPIO_Init+0x18c>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f64e 71c0 	movw	r1, #61376	; 0xefc0
 8000f94:	4838      	ldr	r0, [pc, #224]	; (8001078 <MX_GPIO_Init+0x190>)
 8000f96:	f002 fe8f 	bl	8003cb8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa0:	4836      	ldr	r0, [pc, #216]	; (800107c <MX_GPIO_Init+0x194>)
 8000fa2:	f002 fe89 	bl	8003cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fac:	4834      	ldr	r0, [pc, #208]	; (8001080 <MX_GPIO_Init+0x198>)
 8000fae:	f002 fe83 	bl	8003cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f64f 711c 	movw	r1, #65308	; 0xff1c
 8000fb8:	4832      	ldr	r0, [pc, #200]	; (8001084 <MX_GPIO_Init+0x19c>)
 8000fba:	f002 fe7d 	bl	8003cb8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fbe:	233c      	movs	r3, #60	; 0x3c
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4829      	ldr	r0, [pc, #164]	; (8001078 <MX_GPIO_Init+0x190>)
 8000fd2:	f002 fcef 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9
                           PE10 PE11 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000fd6:	f64e 73c0 	movw	r3, #61376	; 0xefc0
 8000fda:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4822      	ldr	r0, [pc, #136]	; (8001078 <MX_GPIO_Init+0x190>)
 8000ff0:	f002 fce0 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	481b      	ldr	r0, [pc, #108]	; (800107c <MX_GPIO_Init+0x194>)
 800100e:	f002 fcd1 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	4815      	ldr	r0, [pc, #84]	; (8001080 <MX_GPIO_Init+0x198>)
 800102c:	f002 fcc2 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001030:	f64f 731c 	movw	r3, #65308	; 0xff1c
 8001034:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	480e      	ldr	r0, [pc, #56]	; (8001084 <MX_GPIO_Init+0x19c>)
 800104a:	f002 fcb3 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800104e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f002 fca5 	bl	80039b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800106a:	bf00      	nop
 800106c:	3730      	adds	r7, #48	; 0x30
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	48001000 	.word	0x48001000
 800107c:	48000800 	.word	0x48000800
 8001080:	48000400 	.word	0x48000400
 8001084:	48000c00 	.word	0x48000c00

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <HV_on>:
	HAL_GPIO_WritePin(GPIOE, RELAY9, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_SET); //RESISTOR ON
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_SET);
	HAL_TIM_Base_Start_IT(&htim2);
}
void HV_on(void){
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, RELAY11, GPIO_PIN_SET); //HIGHSIDE ON
 8001098:	4814      	ldr	r0, [pc, #80]	; (80010ec <HV_on+0x58>)
 800109a:	f005 fdb0 	bl	8006bfe <atoi>
 800109e:	4603      	mov	r3, r0
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	2201      	movs	r2, #1
 80010a4:	4619      	mov	r1, r3
 80010a6:	4812      	ldr	r0, [pc, #72]	; (80010f0 <HV_on+0x5c>)
 80010a8:	f002 fe06 	bl	8003cb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY16, GPIO_PIN_SET);
 80010ac:	4811      	ldr	r0, [pc, #68]	; (80010f4 <HV_on+0x60>)
 80010ae:	f005 fda6 	bl	8006bfe <atoi>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	2201      	movs	r2, #1
 80010b8:	4619      	mov	r1, r3
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <HV_on+0x5c>)
 80010bc:	f002 fdfc 	bl	8003cb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_RESET); //RESISTOR OFF
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <HV_on+0x64>)
 80010c2:	f005 fd9c 	bl	8006bfe <atoi>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	2200      	movs	r2, #0
 80010cc:	4619      	mov	r1, r3
 80010ce:	4808      	ldr	r0, [pc, #32]	; (80010f0 <HV_on+0x5c>)
 80010d0:	f002 fdf2 	bl	8003cb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_RESET);
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <HV_on+0x68>)
 80010d6:	f005 fd92 	bl	8006bfe <atoi>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29b      	uxth	r3, r3
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <HV_on+0x5c>)
 80010e4:	f002 fde8 	bl	8003cb8 <HAL_GPIO_WritePin>

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	080076d0 	.word	0x080076d0
 80010f0:	48001000 	.word	0x48001000
 80010f4:	080076dc 	.word	0x080076dc
 80010f8:	080076b8 	.word	0x080076b8
 80010fc:	080076c4 	.word	0x080076c4

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_MspInit+0x44>)
 8001108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_MspInit+0x44>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6613      	str	r3, [r2, #96]	; 0x60
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <HAL_MspInit+0x44>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_MspInit+0x44>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_MspInit+0x44>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	6593      	str	r3, [r2, #88]	; 0x58
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_MspInit+0x44>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001136:	f003 f8f5 	bl	8004324 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000

08001148 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b0a0      	sub	sp, #128	; 0x80
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001160:	f107 0318 	add.w	r3, r7, #24
 8001164:	2254      	movs	r2, #84	; 0x54
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f006 f87b 	bl	8007264 <memset>
  if(hadc->Instance==ADC1)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001176:	d160      	bne.n	800123a <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800117c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800117e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001182:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	4618      	mov	r0, r3
 800118a:	f003 fe35 	bl	8004df8 <HAL_RCCEx_PeriphCLKConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001194:	f7ff ff78 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001198:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <HAL_ADC_MspInit+0x1c8>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a5c      	ldr	r2, [pc, #368]	; (8001310 <HAL_ADC_MspInit+0x1c8>)
 800119e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b5a      	ldr	r3, [pc, #360]	; (8001310 <HAL_ADC_MspInit+0x1c8>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b57      	ldr	r3, [pc, #348]	; (8001310 <HAL_ADC_MspInit+0x1c8>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	4a56      	ldr	r2, [pc, #344]	; (8001310 <HAL_ADC_MspInit+0x1c8>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011bc:	4b54      	ldr	r3, [pc, #336]	; (8001310 <HAL_ADC_MspInit+0x1c8>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011c8:	230f      	movs	r3, #15
 80011ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011cc:	2303      	movs	r3, #3
 80011ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011de:	f002 fbe9 	bl	80039b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011e2:	4b4c      	ldr	r3, [pc, #304]	; (8001314 <HAL_ADC_MspInit+0x1cc>)
 80011e4:	4a4c      	ldr	r2, [pc, #304]	; (8001318 <HAL_ADC_MspInit+0x1d0>)
 80011e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011e8:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <HAL_ADC_MspInit+0x1cc>)
 80011ea:	2205      	movs	r2, #5
 80011ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ee:	4b49      	ldr	r3, [pc, #292]	; (8001314 <HAL_ADC_MspInit+0x1cc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f4:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_ADC_MspInit+0x1cc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011fa:	4b46      	ldr	r3, [pc, #280]	; (8001314 <HAL_ADC_MspInit+0x1cc>)
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001200:	4b44      	ldr	r3, [pc, #272]	; (8001314 <HAL_ADC_MspInit+0x1cc>)
 8001202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001206:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001208:	4b42      	ldr	r3, [pc, #264]	; (8001314 <HAL_ADC_MspInit+0x1cc>)
 800120a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800120e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001210:	4b40      	ldr	r3, [pc, #256]	; (8001314 <HAL_ADC_MspInit+0x1cc>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <HAL_ADC_MspInit+0x1cc>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800121c:	483d      	ldr	r0, [pc, #244]	; (8001314 <HAL_ADC_MspInit+0x1cc>)
 800121e:	f002 f849 	bl	80032b4 <HAL_DMA_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001228:	f7ff ff2e 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a39      	ldr	r2, [pc, #228]	; (8001314 <HAL_ADC_MspInit+0x1cc>)
 8001230:	655a      	str	r2, [r3, #84]	; 0x54
 8001232:	4a38      	ldr	r2, [pc, #224]	; (8001314 <HAL_ADC_MspInit+0x1cc>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8001238:	e065      	b.n	8001306 <HAL_ADC_MspInit+0x1be>
  else if(hadc->Instance==ADC5)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a37      	ldr	r2, [pc, #220]	; (800131c <HAL_ADC_MspInit+0x1d4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d160      	bne.n	8001306 <HAL_ADC_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001248:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800124a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800124e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fdcf 	bl	8004df8 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 8001260:	f7ff ff12 	bl	8001088 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001264:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <HAL_ADC_MspInit+0x1c8>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	4a29      	ldr	r2, [pc, #164]	; (8001310 <HAL_ADC_MspInit+0x1c8>)
 800126a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <HAL_ADC_MspInit+0x1c8>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <HAL_ADC_MspInit+0x1c8>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001280:	4a23      	ldr	r2, [pc, #140]	; (8001310 <HAL_ADC_MspInit+0x1c8>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_ADC_MspInit+0x1c8>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001298:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129a:	2303      	movs	r3, #3
 800129c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ac:	f002 fb82 	bl	80039b4 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <HAL_ADC_MspInit+0x1d8>)
 80012b2:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <HAL_ADC_MspInit+0x1dc>)
 80012b4:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <HAL_ADC_MspInit+0x1d8>)
 80012b8:	2227      	movs	r2, #39	; 0x27
 80012ba:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_ADC_MspInit+0x1d8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_ADC_MspInit+0x1d8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_ADC_MspInit+0x1d8>)
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <HAL_ADC_MspInit+0x1d8>)
 80012d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d4:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_ADC_MspInit+0x1d8>)
 80012d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012dc:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <HAL_ADC_MspInit+0x1d8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_ADC_MspInit+0x1d8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80012ea:	480d      	ldr	r0, [pc, #52]	; (8001320 <HAL_ADC_MspInit+0x1d8>)
 80012ec:	f001 ffe2 	bl	80032b4 <HAL_DMA_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 80012f6:	f7ff fec7 	bl	8001088 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <HAL_ADC_MspInit+0x1d8>)
 80012fe:	655a      	str	r2, [r3, #84]	; 0x54
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_ADC_MspInit+0x1d8>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001306:	bf00      	nop
 8001308:	3780      	adds	r7, #128	; 0x80
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000
 8001314:	2000015c 	.word	0x2000015c
 8001318:	40020008 	.word	0x40020008
 800131c:	50000600 	.word	0x50000600
 8001320:	200001bc 	.word	0x200001bc
 8001324:	40020058 	.word	0x40020058

08001328 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b0a2      	sub	sp, #136	; 0x88
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001340:	f107 0320 	add.w	r3, r7, #32
 8001344:	2254      	movs	r2, #84	; 0x54
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f005 ff8b 	bl	8007264 <memset>
  if(hfdcan->Instance==FDCAN1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6e      	ldr	r2, [pc, #440]	; (800150c <HAL_FDCAN_MspInit+0x1e4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d143      	bne.n	80013e0 <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800135e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001362:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4618      	mov	r0, r3
 800136a:	f003 fd45 	bl	8004df8 <HAL_RCCEx_PeriphCLKConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001374:	f7ff fe88 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001378:	4b65      	ldr	r3, [pc, #404]	; (8001510 <HAL_FDCAN_MspInit+0x1e8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4a64      	ldr	r2, [pc, #400]	; (8001510 <HAL_FDCAN_MspInit+0x1e8>)
 8001380:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001382:	4b63      	ldr	r3, [pc, #396]	; (8001510 <HAL_FDCAN_MspInit+0x1e8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d10b      	bne.n	80013a2 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800138a:	4b62      	ldr	r3, [pc, #392]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	4a61      	ldr	r2, [pc, #388]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 8001390:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001394:	6593      	str	r3, [r2, #88]	; 0x58
 8001396:	4b5f      	ldr	r3, [pc, #380]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	4b5c      	ldr	r3, [pc, #368]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a5b      	ldr	r2, [pc, #364]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b59      	ldr	r3, [pc, #356]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013ba:	2303      	movs	r3, #3
 80013bc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80013cc:	2309      	movs	r3, #9
 80013ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013d6:	4619      	mov	r1, r3
 80013d8:	484f      	ldr	r0, [pc, #316]	; (8001518 <HAL_FDCAN_MspInit+0x1f0>)
 80013da:	f002 faeb 	bl	80039b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80013de:	e091      	b.n	8001504 <HAL_FDCAN_MspInit+0x1dc>
  else if(hfdcan->Instance==FDCAN2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a4d      	ldr	r2, [pc, #308]	; (800151c <HAL_FDCAN_MspInit+0x1f4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d144      	bne.n	8001474 <HAL_FDCAN_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80013ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80013f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013f4:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f6:	f107 0320 	add.w	r3, r7, #32
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 fcfc 	bl	8004df8 <HAL_RCCEx_PeriphCLKConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_FDCAN_MspInit+0xe2>
      Error_Handler();
 8001406:	f7ff fe3f 	bl	8001088 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <HAL_FDCAN_MspInit+0x1e8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3301      	adds	r3, #1
 8001410:	4a3f      	ldr	r2, [pc, #252]	; (8001510 <HAL_FDCAN_MspInit+0x1e8>)
 8001412:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001414:	4b3e      	ldr	r3, [pc, #248]	; (8001510 <HAL_FDCAN_MspInit+0x1e8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d10b      	bne.n	8001434 <HAL_FDCAN_MspInit+0x10c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800141c:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	4a3c      	ldr	r2, [pc, #240]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 8001422:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001426:	6593      	str	r3, [r2, #88]	; 0x58
 8001428:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001434:	4b37      	ldr	r3, [pc, #220]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	4a36      	ldr	r2, [pc, #216]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 800143a:	f043 0302 	orr.w	r3, r3, #2
 800143e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001440:	4b34      	ldr	r3, [pc, #208]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800144c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001450:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001460:	2309      	movs	r3, #9
 8001462:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800146a:	4619      	mov	r1, r3
 800146c:	482c      	ldr	r0, [pc, #176]	; (8001520 <HAL_FDCAN_MspInit+0x1f8>)
 800146e:	f002 faa1 	bl	80039b4 <HAL_GPIO_Init>
}
 8001472:	e047      	b.n	8001504 <HAL_FDCAN_MspInit+0x1dc>
  else if(hfdcan->Instance==FDCAN3)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a2a      	ldr	r2, [pc, #168]	; (8001524 <HAL_FDCAN_MspInit+0x1fc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d142      	bne.n	8001504 <HAL_FDCAN_MspInit+0x1dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800147e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001482:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001484:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001488:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148a:	f107 0320 	add.w	r3, r7, #32
 800148e:	4618      	mov	r0, r3
 8001490:	f003 fcb2 	bl	8004df8 <HAL_RCCEx_PeriphCLKConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_FDCAN_MspInit+0x176>
      Error_Handler();
 800149a:	f7ff fdf5 	bl	8001088 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <HAL_FDCAN_MspInit+0x1e8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a1a      	ldr	r2, [pc, #104]	; (8001510 <HAL_FDCAN_MspInit+0x1e8>)
 80014a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <HAL_FDCAN_MspInit+0x1e8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d10b      	bne.n	80014c8 <HAL_FDCAN_MspInit+0x1a0>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	4a17      	ldr	r2, [pc, #92]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 80014b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ba:	6593      	str	r3, [r2, #88]	; 0x58
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	4a11      	ldr	r2, [pc, #68]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 80014ce:	f043 0302 	orr.w	r3, r3, #2
 80014d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <HAL_FDCAN_MspInit+0x1ec>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80014e0:	2318      	movs	r3, #24
 80014e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 80014f2:	230b      	movs	r3, #11
 80014f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014fc:	4619      	mov	r1, r3
 80014fe:	4808      	ldr	r0, [pc, #32]	; (8001520 <HAL_FDCAN_MspInit+0x1f8>)
 8001500:	f002 fa58 	bl	80039b4 <HAL_GPIO_Init>
}
 8001504:	bf00      	nop
 8001506:	3788      	adds	r7, #136	; 0x88
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40006400 	.word	0x40006400
 8001510:	200009f8 	.word	0x200009f8
 8001514:	40021000 	.word	0x40021000
 8001518:	48000c00 	.word	0x48000c00
 800151c:	40006800 	.word	0x40006800
 8001520:	48000400 	.word	0x48000400
 8001524:	40006c00 	.word	0x40006c00

08001528 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0a4      	sub	sp, #144	; 0x90
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001540:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001544:	2254      	movs	r2, #84	; 0x54
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f005 fe8b 	bl	8007264 <memset>
  if(hi2c->Instance==I2C1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a8a      	ldr	r2, [pc, #552]	; (800177c <HAL_I2C_MspInit+0x254>)
 8001554:	4293      	cmp	r3, r2
 8001556:	f040 80af 	bne.w	80016b8 <HAL_I2C_MspInit+0x190>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800155a:	2340      	movs	r3, #64	; 0x40
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800155e:	2300      	movs	r3, #0
 8001560:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001566:	4618      	mov	r0, r3
 8001568:	f003 fc46 	bl	8004df8 <HAL_RCCEx_PeriphCLKConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001572:	f7ff fd89 	bl	8001088 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b82      	ldr	r3, [pc, #520]	; (8001780 <HAL_I2C_MspInit+0x258>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a81      	ldr	r2, [pc, #516]	; (8001780 <HAL_I2C_MspInit+0x258>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001582:	4b7f      	ldr	r3, [pc, #508]	; (8001780 <HAL_I2C_MspInit+0x258>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	4b7c      	ldr	r3, [pc, #496]	; (8001780 <HAL_I2C_MspInit+0x258>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	4a7b      	ldr	r2, [pc, #492]	; (8001780 <HAL_I2C_MspInit+0x258>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159a:	4b79      	ldr	r3, [pc, #484]	; (8001780 <HAL_I2C_MspInit+0x258>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
 80015a4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ac:	2312      	movs	r3, #18
 80015ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015be:	2304      	movs	r3, #4
 80015c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ce:	f002 f9f1 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d6:	2312      	movs	r3, #18
 80015d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015e8:	2304      	movs	r3, #4
 80015ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015f2:	4619      	mov	r1, r3
 80015f4:	4863      	ldr	r0, [pc, #396]	; (8001784 <HAL_I2C_MspInit+0x25c>)
 80015f6:	f002 f9dd 	bl	80039b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015fa:	4b61      	ldr	r3, [pc, #388]	; (8001780 <HAL_I2C_MspInit+0x258>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	4a60      	ldr	r2, [pc, #384]	; (8001780 <HAL_I2C_MspInit+0x258>)
 8001600:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001604:	6593      	str	r3, [r2, #88]	; 0x58
 8001606:	4b5e      	ldr	r3, [pc, #376]	; (8001780 <HAL_I2C_MspInit+0x258>)
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160e:	61fb      	str	r3, [r7, #28]
 8001610:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 8001612:	4b5d      	ldr	r3, [pc, #372]	; (8001788 <HAL_I2C_MspInit+0x260>)
 8001614:	4a5d      	ldr	r2, [pc, #372]	; (800178c <HAL_I2C_MspInit+0x264>)
 8001616:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001618:	4b5b      	ldr	r3, [pc, #364]	; (8001788 <HAL_I2C_MspInit+0x260>)
 800161a:	2210      	movs	r2, #16
 800161c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161e:	4b5a      	ldr	r3, [pc, #360]	; (8001788 <HAL_I2C_MspInit+0x260>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001624:	4b58      	ldr	r3, [pc, #352]	; (8001788 <HAL_I2C_MspInit+0x260>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800162a:	4b57      	ldr	r3, [pc, #348]	; (8001788 <HAL_I2C_MspInit+0x260>)
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001630:	4b55      	ldr	r3, [pc, #340]	; (8001788 <HAL_I2C_MspInit+0x260>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001636:	4b54      	ldr	r3, [pc, #336]	; (8001788 <HAL_I2C_MspInit+0x260>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800163c:	4b52      	ldr	r3, [pc, #328]	; (8001788 <HAL_I2C_MspInit+0x260>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001642:	4b51      	ldr	r3, [pc, #324]	; (8001788 <HAL_I2C_MspInit+0x260>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001648:	484f      	ldr	r0, [pc, #316]	; (8001788 <HAL_I2C_MspInit+0x260>)
 800164a:	f001 fe33 	bl	80032b4 <HAL_DMA_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_I2C_MspInit+0x130>
    {
      Error_Handler();
 8001654:	f7ff fd18 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a4b      	ldr	r2, [pc, #300]	; (8001788 <HAL_I2C_MspInit+0x260>)
 800165c:	63da      	str	r2, [r3, #60]	; 0x3c
 800165e:	4a4a      	ldr	r2, [pc, #296]	; (8001788 <HAL_I2C_MspInit+0x260>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 8001664:	4b4a      	ldr	r3, [pc, #296]	; (8001790 <HAL_I2C_MspInit+0x268>)
 8001666:	4a4b      	ldr	r2, [pc, #300]	; (8001794 <HAL_I2C_MspInit+0x26c>)
 8001668:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800166a:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_I2C_MspInit+0x268>)
 800166c:	2211      	movs	r2, #17
 800166e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001670:	4b47      	ldr	r3, [pc, #284]	; (8001790 <HAL_I2C_MspInit+0x268>)
 8001672:	2210      	movs	r2, #16
 8001674:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001676:	4b46      	ldr	r3, [pc, #280]	; (8001790 <HAL_I2C_MspInit+0x268>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800167c:	4b44      	ldr	r3, [pc, #272]	; (8001790 <HAL_I2C_MspInit+0x268>)
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001682:	4b43      	ldr	r3, [pc, #268]	; (8001790 <HAL_I2C_MspInit+0x268>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001688:	4b41      	ldr	r3, [pc, #260]	; (8001790 <HAL_I2C_MspInit+0x268>)
 800168a:	2200      	movs	r2, #0
 800168c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800168e:	4b40      	ldr	r3, [pc, #256]	; (8001790 <HAL_I2C_MspInit+0x268>)
 8001690:	2200      	movs	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001694:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <HAL_I2C_MspInit+0x268>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800169a:	483d      	ldr	r0, [pc, #244]	; (8001790 <HAL_I2C_MspInit+0x268>)
 800169c:	f001 fe0a 	bl	80032b4 <HAL_DMA_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_I2C_MspInit+0x182>
    {
      Error_Handler();
 80016a6:	f7ff fcef 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a38      	ldr	r2, [pc, #224]	; (8001790 <HAL_I2C_MspInit+0x268>)
 80016ae:	639a      	str	r2, [r3, #56]	; 0x38
 80016b0:	4a37      	ldr	r2, [pc, #220]	; (8001790 <HAL_I2C_MspInit+0x268>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80016b6:	e0dd      	b.n	8001874 <HAL_I2C_MspInit+0x34c>
  else if(hi2c->Instance==I2C2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a36      	ldr	r2, [pc, #216]	; (8001798 <HAL_I2C_MspInit+0x270>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d16e      	bne.n	80017a0 <HAL_I2C_MspInit+0x278>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 fb92 	bl	8004df8 <HAL_RCCEx_PeriphCLKConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 80016da:	f7ff fcd5 	bl	8001088 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	4b28      	ldr	r3, [pc, #160]	; (8001780 <HAL_I2C_MspInit+0x258>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a27      	ldr	r2, [pc, #156]	; (8001780 <HAL_I2C_MspInit+0x258>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b25      	ldr	r3, [pc, #148]	; (8001780 <HAL_I2C_MspInit+0x258>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <HAL_I2C_MspInit+0x258>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	4a21      	ldr	r2, [pc, #132]	; (8001780 <HAL_I2C_MspInit+0x258>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001702:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <HAL_I2C_MspInit+0x258>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800170e:	2310      	movs	r3, #16
 8001710:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001712:	2312      	movs	r3, #18
 8001714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001724:	2304      	movs	r3, #4
 8001726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800172e:	4619      	mov	r1, r3
 8001730:	481a      	ldr	r0, [pc, #104]	; (800179c <HAL_I2C_MspInit+0x274>)
 8001732:	f002 f93f 	bl	80039b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800173c:	2312      	movs	r3, #18
 800173e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800174e:	2304      	movs	r3, #4
 8001750:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001758:	4619      	mov	r1, r3
 800175a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175e:	f002 f929 	bl	80039b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <HAL_I2C_MspInit+0x258>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_I2C_MspInit+0x258>)
 8001768:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800176c:	6593      	str	r3, [r2, #88]	; 0x58
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <HAL_I2C_MspInit+0x258>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
}
 800177a:	e07b      	b.n	8001874 <HAL_I2C_MspInit+0x34c>
 800177c:	40005400 	.word	0x40005400
 8001780:	40021000 	.word	0x40021000
 8001784:	48000400 	.word	0x48000400
 8001788:	20000444 	.word	0x20000444
 800178c:	4002001c 	.word	0x4002001c
 8001790:	200004a4 	.word	0x200004a4
 8001794:	40020030 	.word	0x40020030
 8001798:	40005800 	.word	0x40005800
 800179c:	48000800 	.word	0x48000800
  else if(hi2c->Instance==I2C3)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a35      	ldr	r2, [pc, #212]	; (800187c <HAL_I2C_MspInit+0x354>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d164      	bne.n	8001874 <HAL_I2C_MspInit+0x34c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80017aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 fb1d 	bl	8004df8 <HAL_RCCEx_PeriphCLKConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_I2C_MspInit+0x2a0>
      Error_Handler();
 80017c4:	f7ff fc60 	bl	8001088 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_I2C_MspInit+0x358>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	4a2c      	ldr	r2, [pc, #176]	; (8001880 <HAL_I2C_MspInit+0x358>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_I2C_MspInit+0x358>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e6:	2312      	movs	r3, #18
 80017e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80017f8:	2308      	movs	r3, #8
 80017fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001802:	4619      	mov	r1, r3
 8001804:	481f      	ldr	r0, [pc, #124]	; (8001884 <HAL_I2C_MspInit+0x35c>)
 8001806:	f002 f8d5 	bl	80039b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_I2C_MspInit+0x358>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <HAL_I2C_MspInit+0x358>)
 8001810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_I2C_MspInit+0x358>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Channel4;
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_I2C_MspInit+0x360>)
 8001824:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_I2C_MspInit+0x364>)
 8001826:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_I2C_MspInit+0x360>)
 800182a:	2214      	movs	r2, #20
 800182c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_I2C_MspInit+0x360>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_I2C_MspInit+0x360>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_I2C_MspInit+0x360>)
 800183c:	2280      	movs	r2, #128	; 0x80
 800183e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_I2C_MspInit+0x360>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_I2C_MspInit+0x360>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_I2C_MspInit+0x360>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_I2C_MspInit+0x360>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8001858:	480b      	ldr	r0, [pc, #44]	; (8001888 <HAL_I2C_MspInit+0x360>)
 800185a:	f001 fd2b 	bl	80032b4 <HAL_DMA_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_I2C_MspInit+0x340>
      Error_Handler();
 8001864:	f7ff fc10 	bl	8001088 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_I2C_MspInit+0x360>)
 800186c:	63da      	str	r2, [r3, #60]	; 0x3c
 800186e:	4a06      	ldr	r2, [pc, #24]	; (8001888 <HAL_I2C_MspInit+0x360>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001874:	bf00      	nop
 8001876:	3790      	adds	r7, #144	; 0x90
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40007800 	.word	0x40007800
 8001880:	40021000 	.word	0x40021000
 8001884:	48000800 	.word	0x48000800
 8001888:	20000504 	.word	0x20000504
 800188c:	40020044 	.word	0x40020044

08001890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b0a0      	sub	sp, #128	; 0x80
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a8:	f107 0318 	add.w	r3, r7, #24
 80018ac:	2254      	movs	r2, #84	; 0x54
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f005 fcd7 	bl	8007264 <memset>
  if(huart->Instance==LPUART1)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2d      	ldr	r2, [pc, #180]	; (8001970 <HAL_UART_MspInit+0xe0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d152      	bne.n	8001966 <HAL_UART_MspInit+0xd6>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018c0:	2320      	movs	r3, #32
 80018c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 80018c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018c8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ca:	f107 0318 	add.w	r3, r7, #24
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 fa92 	bl	8004df8 <HAL_RCCEx_PeriphCLKConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018da:	f7ff fbd5 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <HAL_UART_MspInit+0xe4>)
 80018e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e2:	4a24      	ldr	r2, [pc, #144]	; (8001974 <HAL_UART_MspInit+0xe4>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_UART_MspInit+0xe4>)
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f6:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <HAL_UART_MspInit+0xe4>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <HAL_UART_MspInit+0xe4>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001902:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <HAL_UART_MspInit+0xe4>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_UART_MspInit+0xe4>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	4a18      	ldr	r2, [pc, #96]	; (8001974 <HAL_UART_MspInit+0xe4>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <HAL_UART_MspInit+0xe4>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001926:	2303      	movs	r3, #3
 8001928:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001936:	2308      	movs	r3, #8
 8001938:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800193e:	4619      	mov	r1, r3
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <HAL_UART_MspInit+0xe8>)
 8001942:	f002 f837 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001946:	2302      	movs	r3, #2
 8001948:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001956:	230c      	movs	r3, #12
 8001958:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800195e:	4619      	mov	r1, r3
 8001960:	4806      	ldr	r0, [pc, #24]	; (800197c <HAL_UART_MspInit+0xec>)
 8001962:	f002 f827 	bl	80039b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3780      	adds	r7, #128	; 0x80
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40008000 	.word	0x40008000
 8001974:	40021000 	.word	0x40021000
 8001978:	48000800 	.word	0x48000800
 800197c:	48000400 	.word	0x48000400

08001980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08c      	sub	sp, #48	; 0x30
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a2f      	ldr	r2, [pc, #188]	; (8001a5c <HAL_SPI_MspInit+0xdc>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d129      	bne.n	80019f6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019a2:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <HAL_SPI_MspInit+0xe0>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	4a2e      	ldr	r2, [pc, #184]	; (8001a60 <HAL_SPI_MspInit+0xe0>)
 80019a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019ac:	6613      	str	r3, [r2, #96]	; 0x60
 80019ae:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <HAL_SPI_MspInit+0xe0>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <HAL_SPI_MspInit+0xe0>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <HAL_SPI_MspInit+0xe0>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_SPI_MspInit+0xe0>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019d2:	23e0      	movs	r3, #224	; 0xe0
 80019d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019e2:	2305      	movs	r3, #5
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f0:	f001 ffe0 	bl	80039b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019f4:	e02d      	b.n	8001a52 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1a      	ldr	r2, [pc, #104]	; (8001a64 <HAL_SPI_MspInit+0xe4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d128      	bne.n	8001a52 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_SPI_MspInit+0xe0>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	4a16      	ldr	r2, [pc, #88]	; (8001a60 <HAL_SPI_MspInit+0xe0>)
 8001a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_SPI_MspInit+0xe0>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_SPI_MspInit+0xe0>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1c:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_SPI_MspInit+0xe0>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_SPI_MspInit+0xe0>)
 8001a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a30:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a42:	2306      	movs	r3, #6
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4806      	ldr	r0, [pc, #24]	; (8001a68 <HAL_SPI_MspInit+0xe8>)
 8001a4e:	f001 ffb1 	bl	80039b4 <HAL_GPIO_Init>
}
 8001a52:	bf00      	nop
 8001a54:	3730      	adds	r7, #48	; 0x30
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40013000 	.word	0x40013000
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40003c00 	.word	0x40003c00
 8001a68:	48000800 	.word	0x48000800

08001a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7c:	d113      	bne.n	8001aa6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_TIM_Base_MspInit+0x44>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <HAL_TIM_Base_MspInit+0x44>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6593      	str	r3, [r2, #88]	; 0x58
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_TIM_Base_MspInit+0x44>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	201c      	movs	r0, #28
 8001a9c:	f001 fbd5 	bl	800324a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001aa0:	201c      	movs	r0, #28
 8001aa2:	f001 fbec 	bl	800327e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b098      	sub	sp, #96	; 0x60
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	2254      	movs	r2, #84	; 0x54
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f005 fbcd 	bl	8007264 <memset>
  if(hpcd->Instance==USB)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <HAL_PCD_MspInit+0x60>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d11a      	bne.n	8001b0a <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001ada:	2300      	movs	r3, #0
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 f988 	bl	8004df8 <HAL_RCCEx_PeriphCLKConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8001aee:	f7ff facb 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_PCD_MspInit+0x64>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af6:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <HAL_PCD_MspInit+0x64>)
 8001af8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001afc:	6593      	str	r3, [r2, #88]	; 0x58
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_PCD_MspInit+0x64>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001b0a:	bf00      	nop
 8001b0c:	3760      	adds	r7, #96	; 0x60
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40005c00 	.word	0x40005c00
 8001b18:	40021000 	.word	0x40021000

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001b20:	f003 f908 	bl	8004d34 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b24:	e7fe      	b.n	8001b24 <NMI_Handler+0x8>

08001b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <MemManage_Handler+0x4>

08001b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f000 f974 	bl	8001e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <DMA1_Channel1_IRQHandler+0x10>)
 8001b7a:	f001 fc43 	bl	8003404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000015c 	.word	0x2000015c

08001b88 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <DMA1_Channel2_IRQHandler+0x10>)
 8001b8e:	f001 fc39 	bl	8003404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000444 	.word	0x20000444

08001b9c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <DMA1_Channel3_IRQHandler+0x10>)
 8001ba2:	f001 fc2f 	bl	8003404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200004a4 	.word	0x200004a4

08001bb0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <DMA1_Channel4_IRQHandler+0x10>)
 8001bb6:	f001 fc25 	bl	8003404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000504 	.word	0x20000504

08001bc4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <DMA1_Channel5_IRQHandler+0x10>)
 8001bca:	f001 fc1b 	bl	8003404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200001bc 	.word	0x200001bc

08001bd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bdc:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <TIM2_IRQHandler+0x18>)
 8001bde:	f003 fc8a 	bl	80054f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim2);
 8001be2:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <TIM2_IRQHandler+0x18>)
 8001be4:	f003 fc58 	bl	8005498 <HAL_TIM_Base_Stop_IT>
  HV_on();
 8001be8:	f7ff fa54 	bl	8001094 <HV_on>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200006d0 	.word	0x200006d0

08001bf4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e00a      	b.n	8001c1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c06:	f3af 8000 	nop.w
 8001c0a:	4601      	mov	r1, r0
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	60ba      	str	r2, [r7, #8]
 8001c12:	b2ca      	uxtb	r2, r1
 8001c14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	dbf0      	blt.n	8001c06 <_read+0x12>
  }

  return len;
 8001c24:	687b      	ldr	r3, [r7, #4]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e009      	b.n	8001c54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	60ba      	str	r2, [r7, #8]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbf1      	blt.n	8001c40 <_write+0x12>
  }
  return len;
 8001c5c:	687b      	ldr	r3, [r7, #4]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_close>:

int _close(int file)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c8e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <_isatty>:

int _isatty(int file)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <_sbrk+0x5c>)
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <_sbrk+0x60>)
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <_sbrk+0x64>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <_sbrk+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d207      	bcs.n	8001d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d00:	f005 fb0e 	bl	8007320 <__errno>
 8001d04:	4603      	mov	r3, r0
 8001d06:	220c      	movs	r2, #12
 8001d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0e:	e009      	b.n	8001d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <_sbrk+0x64>)
 8001d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20020000 	.word	0x20020000
 8001d30:	00000400 	.word	0x00000400
 8001d34:	200009fc 	.word	0x200009fc
 8001d38:	20000b50 	.word	0x20000b50

08001d3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <SystemInit+0x20>)
 8001d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <SystemInit+0x20>)
 8001d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d60:	480d      	ldr	r0, [pc, #52]	; (8001d98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d64:	f7ff ffea 	bl	8001d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d68:	480c      	ldr	r0, [pc, #48]	; (8001d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d6a:	490d      	ldr	r1, [pc, #52]	; (8001da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	; (8001da4 <LoopForever+0xe>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d70:	e002      	b.n	8001d78 <LoopCopyDataInit>

08001d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d76:	3304      	adds	r3, #4

08001d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d7c:	d3f9      	bcc.n	8001d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d80:	4c0a      	ldr	r4, [pc, #40]	; (8001dac <LoopForever+0x16>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d84:	e001      	b.n	8001d8a <LoopFillZerobss>

08001d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d88:	3204      	adds	r2, #4

08001d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d8c:	d3fb      	bcc.n	8001d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f005 facd 	bl	800732c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d92:	f7fe fbeb 	bl	800056c <main>

08001d96 <LoopForever>:

LoopForever:
    b LoopForever
 8001d96:	e7fe      	b.n	8001d96 <LoopForever>
  ldr   r0, =_estack
 8001d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001da4:	08007860 	.word	0x08007860
  ldr r2, =_sbss
 8001da8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001dac:	20000b50 	.word	0x20000b50

08001db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <ADC1_2_IRQHandler>

08001db2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f001 fa39 	bl	8003234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dc2:	200f      	movs	r0, #15
 8001dc4:	f000 f80e 	bl	8001de4 <HAL_InitTick>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	71fb      	strb	r3, [r7, #7]
 8001dd2:	e001      	b.n	8001dd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dd4:	f7ff f994 	bl	8001100 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dd8:	79fb      	ldrb	r3, [r7, #7]

}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <HAL_InitTick+0x68>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d022      	beq.n	8001e3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001df8:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_InitTick+0x6c>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_InitTick+0x68>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f001 fa44 	bl	800329a <HAL_SYSTICK_Config>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10f      	bne.n	8001e38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	d809      	bhi.n	8001e32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	f04f 30ff 	mov.w	r0, #4294967295
 8001e26:	f001 fa10 	bl	800324a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <HAL_InitTick+0x70>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e007      	b.n	8001e42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e004      	b.n	8001e42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e001      	b.n	8001e42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	20000000 	.word	0x20000000
 8001e54:	20000004 	.word	0x20000004

08001e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_IncTick+0x1c>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_IncTick+0x20>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a03      	ldr	r2, [pc, #12]	; (8001e74 <HAL_IncTick+0x1c>)
 8001e68:	6013      	str	r3, [r2, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	20000a00 	.word	0x20000a00
 8001e78:	20000008 	.word	0x20000008

08001e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_GetTick+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000a00 	.word	0x20000a00

08001e94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	609a      	str	r2, [r3, #8]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3360      	adds	r3, #96	; 0x60
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <LL_ADC_SetOffset+0x44>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f34:	bf00      	nop
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	03fff000 	.word	0x03fff000

08001f44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3360      	adds	r3, #96	; 0x60
 8001f52:	461a      	mov	r2, r3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3360      	adds	r3, #96	; 0x60
 8001f80:	461a      	mov	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f9a:	bf00      	nop
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b087      	sub	sp, #28
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3360      	adds	r3, #96	; 0x60
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001fd0:	bf00      	nop
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3360      	adds	r3, #96	; 0x60
 8001fec:	461a      	mov	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	431a      	orrs	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	615a      	str	r2, [r3, #20]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3330      	adds	r3, #48	; 0x30
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	f003 030c 	and.w	r3, r3, #12
 8002054:	4413      	add	r3, r2
 8002056:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	211f      	movs	r1, #31
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	0e9b      	lsrs	r3, r3, #26
 8002070:	f003 011f 	and.w	r1, r3, #31
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	431a      	orrs	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002084:	bf00      	nop
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3314      	adds	r3, #20
 80020a0:	461a      	mov	r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	0e5b      	lsrs	r3, r3, #25
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	4413      	add	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	0d1b      	lsrs	r3, r3, #20
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	2107      	movs	r1, #7
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	401a      	ands	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	0d1b      	lsrs	r3, r3, #20
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	431a      	orrs	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002100:	43db      	mvns	r3, r3
 8002102:	401a      	ands	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0318 	and.w	r3, r3, #24
 800210a:	4908      	ldr	r1, [pc, #32]	; (800212c <LL_ADC_SetChannelSingleDiff+0x44>)
 800210c:	40d9      	lsrs	r1, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	400b      	ands	r3, r1
 8002112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002116:	431a      	orrs	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	0007ffff 	.word	0x0007ffff

08002130 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002140:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6093      	str	r3, [r2, #8]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002168:	d101      	bne.n	800216e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800218c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002190:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021b8:	d101      	bne.n	80021be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <LL_ADC_IsEnabled+0x18>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <LL_ADC_IsEnabled+0x1a>
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b04      	cmp	r3, #4
 8002204:	d101      	bne.n	800220a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b08      	cmp	r3, #8
 800222a:	d101      	bne.n	8002230 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e1a9      	b.n	80025ae <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d109      	bne.n	800227c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7fe ff6d 	bl	8001148 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff67 	bl	8002154 <LL_ADC_IsDeepPowerDownEnabled>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d004      	beq.n	8002296 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff4d 	bl	8002130 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ff82 	bl	80021a4 <LL_ADC_IsInternalRegulatorEnabled>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d115      	bne.n	80022d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff66 	bl	800217c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022b0:	4b9c      	ldr	r3, [pc, #624]	; (8002524 <HAL_ADC_Init+0x2e4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	099b      	lsrs	r3, r3, #6
 80022b6:	4a9c      	ldr	r2, [pc, #624]	; (8002528 <HAL_ADC_Init+0x2e8>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	099b      	lsrs	r3, r3, #6
 80022be:	3301      	adds	r3, #1
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022c4:	e002      	b.n	80022cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f9      	bne.n	80022c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff64 	bl	80021a4 <LL_ADC_IsInternalRegulatorEnabled>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10d      	bne.n	80022fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	f043 0210 	orr.w	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	f043 0201 	orr.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff75 	bl	80021f2 <LL_ADC_REG_IsConversionOngoing>
 8002308:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 8142 	bne.w	800259c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f040 813e 	bne.w	800259c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002328:	f043 0202 	orr.w	r2, r3, #2
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff49 	bl	80021cc <LL_ADC_IsEnabled>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d141      	bne.n	80023c4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002348:	d004      	beq.n	8002354 <HAL_ADC_Init+0x114>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a77      	ldr	r2, [pc, #476]	; (800252c <HAL_ADC_Init+0x2ec>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d10f      	bne.n	8002374 <HAL_ADC_Init+0x134>
 8002354:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002358:	f7ff ff38 	bl	80021cc <LL_ADC_IsEnabled>
 800235c:	4604      	mov	r4, r0
 800235e:	4873      	ldr	r0, [pc, #460]	; (800252c <HAL_ADC_Init+0x2ec>)
 8002360:	f7ff ff34 	bl	80021cc <LL_ADC_IsEnabled>
 8002364:	4603      	mov	r3, r0
 8002366:	4323      	orrs	r3, r4
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	e012      	b.n	800239a <HAL_ADC_Init+0x15a>
 8002374:	486e      	ldr	r0, [pc, #440]	; (8002530 <HAL_ADC_Init+0x2f0>)
 8002376:	f7ff ff29 	bl	80021cc <LL_ADC_IsEnabled>
 800237a:	4604      	mov	r4, r0
 800237c:	486d      	ldr	r0, [pc, #436]	; (8002534 <HAL_ADC_Init+0x2f4>)
 800237e:	f7ff ff25 	bl	80021cc <LL_ADC_IsEnabled>
 8002382:	4603      	mov	r3, r0
 8002384:	431c      	orrs	r4, r3
 8002386:	486c      	ldr	r0, [pc, #432]	; (8002538 <HAL_ADC_Init+0x2f8>)
 8002388:	f7ff ff20 	bl	80021cc <LL_ADC_IsEnabled>
 800238c:	4603      	mov	r3, r0
 800238e:	4323      	orrs	r3, r4
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d012      	beq.n	80023c4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a6:	d004      	beq.n	80023b2 <HAL_ADC_Init+0x172>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a5f      	ldr	r2, [pc, #380]	; (800252c <HAL_ADC_Init+0x2ec>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_ADC_Init+0x176>
 80023b2:	4a62      	ldr	r2, [pc, #392]	; (800253c <HAL_ADC_Init+0x2fc>)
 80023b4:	e000      	b.n	80023b8 <HAL_ADC_Init+0x178>
 80023b6:	4a62      	ldr	r2, [pc, #392]	; (8002540 <HAL_ADC_Init+0x300>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4619      	mov	r1, r3
 80023be:	4610      	mov	r0, r2
 80023c0:	f7ff fd68 	bl	8001e94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7f5b      	ldrb	r3, [r3, #29]
 80023c8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023d4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80023da:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023e2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d106      	bne.n	8002400 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	3b01      	subs	r3, #1
 80023f8:	045b      	lsls	r3, r3, #17
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	4b48      	ldr	r3, [pc, #288]	; (8002544 <HAL_ADC_Init+0x304>)
 8002424:	4013      	ands	r3, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	69b9      	ldr	r1, [r7, #24]
 800242c:	430b      	orrs	r3, r1
 800242e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fee4 	bl	8002218 <LL_ADC_INJ_IsConversionOngoing>
 8002450:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d17f      	bne.n	8002558 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d17c      	bne.n	8002558 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002462:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800246a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800247a:	f023 0302 	bic.w	r3, r3, #2
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	69b9      	ldr	r1, [r7, #24]
 8002484:	430b      	orrs	r3, r1
 8002486:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d017      	beq.n	80024c0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800249e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6911      	ldr	r1, [r2, #16]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80024be:	e013      	b.n	80024e8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d12a      	bne.n	8002548 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002508:	4311      	orrs	r1, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002514:	430a      	orrs	r2, r1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0201 	orr.w	r2, r2, #1
 8002520:	611a      	str	r2, [r3, #16]
 8002522:	e019      	b.n	8002558 <HAL_ADC_Init+0x318>
 8002524:	20000000 	.word	0x20000000
 8002528:	053e2d63 	.word	0x053e2d63
 800252c:	50000100 	.word	0x50000100
 8002530:	50000400 	.word	0x50000400
 8002534:	50000500 	.word	0x50000500
 8002538:	50000600 	.word	0x50000600
 800253c:	50000300 	.word	0x50000300
 8002540:	50000700 	.word	0x50000700
 8002544:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d10c      	bne.n	800257a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f023 010f 	bic.w	r1, r3, #15
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	1e5a      	subs	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
 8002578:	e007      	b.n	800258a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 020f 	bic.w	r2, r2, #15
 8002588:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	65da      	str	r2, [r3, #92]	; 0x5c
 800259a:	e007      	b.n	80025ac <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	f043 0210 	orr.w	r2, r3, #16
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3724      	adds	r7, #36	; 0x24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd90      	pop	{r4, r7, pc}
 80025b6:	bf00      	nop

080025b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b0b6      	sub	sp, #216	; 0xd8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d102      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x24>
 80025d6:	2302      	movs	r3, #2
 80025d8:	f000 bc13 	b.w	8002e02 <HAL_ADC_ConfigChannel+0x84a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fe02 	bl	80021f2 <LL_ADC_REG_IsConversionOngoing>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f040 83f3 	bne.w	8002ddc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	f7ff fd18 	bl	8002038 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fdf0 	bl	80021f2 <LL_ADC_REG_IsConversionOngoing>
 8002612:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fdfc 	bl	8002218 <LL_ADC_INJ_IsConversionOngoing>
 8002620:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002624:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 81d9 	bne.w	80029e0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800262e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 81d4 	bne.w	80029e0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002640:	d10f      	bne.n	8002662 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2200      	movs	r2, #0
 800264c:	4619      	mov	r1, r3
 800264e:	f7ff fd1f 	bl	8002090 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fcd9 	bl	8002012 <LL_ADC_SetSamplingTimeCommonConfig>
 8002660:	e00e      	b.n	8002680 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	461a      	mov	r2, r3
 8002670:	f7ff fd0e 	bl	8002090 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fcc9 	bl	8002012 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	08db      	lsrs	r3, r3, #3
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d022      	beq.n	80026e8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6919      	ldr	r1, [r3, #16]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026b2:	f7ff fc23 	bl	8001efc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6919      	ldr	r1, [r3, #16]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f7ff fc6f 	bl	8001fa6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d102      	bne.n	80026de <HAL_ADC_ConfigChannel+0x126>
 80026d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026dc:	e000      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x128>
 80026de:	2300      	movs	r3, #0
 80026e0:	461a      	mov	r2, r3
 80026e2:	f7ff fc7b 	bl	8001fdc <LL_ADC_SetOffsetSaturation>
 80026e6:	e17b      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fc28 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x15c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fc1d 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 800270a:	4603      	mov	r3, r0
 800270c:	0e9b      	lsrs	r3, r3, #26
 800270e:	f003 021f 	and.w	r2, r3, #31
 8002712:	e01e      	b.n	8002752 <HAL_ADC_ConfigChannel+0x19a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fc12 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002720:	4603      	mov	r3, r0
 8002722:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002732:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800273a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002742:	2320      	movs	r3, #32
 8002744:	e004      	b.n	8002750 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002746:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <HAL_ADC_ConfigChannel+0x1b2>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0e9b      	lsrs	r3, r3, #26
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	e018      	b.n	800279c <HAL_ADC_ConfigChannel+0x1e4>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800277e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002782:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002786:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800278e:	2320      	movs	r3, #32
 8002790:	e004      	b.n	800279c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002792:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800279c:	429a      	cmp	r2, r3
 800279e:	d106      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2200      	movs	r2, #0
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fbe1 	bl	8001f70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2101      	movs	r1, #1
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fbc5 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <HAL_ADC_ConfigChannel+0x222>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2101      	movs	r1, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fbba 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 80027d0:	4603      	mov	r3, r0
 80027d2:	0e9b      	lsrs	r3, r3, #26
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	e01e      	b.n	8002818 <HAL_ADC_ConfigChannel+0x260>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2101      	movs	r1, #1
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fbaf 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002800:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002808:	2320      	movs	r3, #32
 800280a:	e004      	b.n	8002816 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800280c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x278>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0e9b      	lsrs	r3, r3, #26
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	e018      	b.n	8002862 <HAL_ADC_ConfigChannel+0x2aa>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002844:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800284c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002854:	2320      	movs	r3, #32
 8002856:	e004      	b.n	8002862 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002858:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002862:	429a      	cmp	r2, r3
 8002864:	d106      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2200      	movs	r2, #0
 800286c:	2101      	movs	r1, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fb7e 	bl	8001f70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2102      	movs	r1, #2
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fb62 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002880:	4603      	mov	r3, r0
 8002882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x2e8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2102      	movs	r1, #2
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fb57 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	0e9b      	lsrs	r3, r3, #26
 800289a:	f003 021f 	and.w	r2, r3, #31
 800289e:	e01e      	b.n	80028de <HAL_ADC_ConfigChannel+0x326>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2102      	movs	r1, #2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fb4c 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80028ce:	2320      	movs	r3, #32
 80028d0:	e004      	b.n	80028dc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80028d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d105      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x33e>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	0e9b      	lsrs	r3, r3, #26
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	e016      	b.n	8002924 <HAL_ADC_ConfigChannel+0x36c>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002908:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800290a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800290e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002916:	2320      	movs	r3, #32
 8002918:	e004      	b.n	8002924 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800291a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002924:	429a      	cmp	r2, r3
 8002926:	d106      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2200      	movs	r2, #0
 800292e:	2102      	movs	r1, #2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fb1d 	bl	8001f70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2103      	movs	r1, #3
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fb01 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x3aa>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2103      	movs	r1, #3
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff faf6 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002958:	4603      	mov	r3, r0
 800295a:	0e9b      	lsrs	r3, r3, #26
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	e017      	b.n	8002992 <HAL_ADC_ConfigChannel+0x3da>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2103      	movs	r1, #3
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff faeb 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 800296e:	4603      	mov	r3, r0
 8002970:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800297a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800297c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800297e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002984:	2320      	movs	r3, #32
 8002986:	e003      	b.n	8002990 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299a:	2b00      	cmp	r3, #0
 800299c:	d105      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x3f2>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	0e9b      	lsrs	r3, r3, #26
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	e011      	b.n	80029ce <HAL_ADC_ConfigChannel+0x416>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80029b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80029c2:	2320      	movs	r3, #32
 80029c4:	e003      	b.n	80029ce <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80029c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d106      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2200      	movs	r2, #0
 80029d8:	2103      	movs	r1, #3
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fac8 	bl	8001f70 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fbf1 	bl	80021cc <LL_ADC_IsEnabled>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f040 813d 	bne.w	8002c6c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	461a      	mov	r2, r3
 8002a00:	f7ff fb72 	bl	80020e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4aa2      	ldr	r2, [pc, #648]	; (8002c94 <HAL_ADC_ConfigChannel+0x6dc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	f040 812e 	bne.w	8002c6c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10b      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x480>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	3301      	adds	r3, #1
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	2b09      	cmp	r3, #9
 8002a2e:	bf94      	ite	ls
 8002a30:	2301      	movls	r3, #1
 8002a32:	2300      	movhi	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e019      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x4b4>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a48:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a50:	2320      	movs	r3, #32
 8002a52:	e003      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	2b09      	cmp	r3, #9
 8002a64:	bf94      	ite	ls
 8002a66:	2301      	movls	r3, #1
 8002a68:	2300      	movhi	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d079      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d107      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x4d4>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0e9b      	lsrs	r3, r3, #26
 8002a82:	3301      	adds	r3, #1
 8002a84:	069b      	lsls	r3, r3, #26
 8002a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a8a:	e015      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x500>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	e003      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	069b      	lsls	r3, r3, #26
 8002ab4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x520>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0e9b      	lsrs	r3, r3, #26
 8002aca:	3301      	adds	r3, #1
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	e017      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x550>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002af0:	2320      	movs	r3, #32
 8002af2:	e003      	b.n	8002afc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2101      	movs	r1, #1
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	ea42 0103 	orr.w	r1, r2, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10a      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x576>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0e9b      	lsrs	r3, r3, #26
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f003 021f 	and.w	r2, r3, #31
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	051b      	lsls	r3, r3, #20
 8002b2c:	e018      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x5a8>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b46:	2320      	movs	r3, #32
 8002b48:	e003      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	3301      	adds	r3, #1
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b60:	430b      	orrs	r3, r1
 8002b62:	e07e      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d107      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x5c8>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	0e9b      	lsrs	r3, r3, #26
 8002b76:	3301      	adds	r3, #1
 8002b78:	069b      	lsls	r3, r3, #26
 8002b7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7e:	e015      	b.n	8002bac <HAL_ADC_ConfigChannel+0x5f4>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e003      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	069b      	lsls	r3, r3, #26
 8002ba8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x614>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	e017      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x644>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	61fb      	str	r3, [r7, #28]
  return result;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002be4:	2320      	movs	r3, #32
 8002be6:	e003      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfc:	ea42 0103 	orr.w	r1, r2, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10d      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x670>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0e9b      	lsrs	r3, r3, #26
 8002c12:	3301      	adds	r3, #1
 8002c14:	f003 021f 	and.w	r2, r3, #31
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3b1e      	subs	r3, #30
 8002c20:	051b      	lsls	r3, r3, #20
 8002c22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c26:	e01b      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x6a8>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	613b      	str	r3, [r7, #16]
  return result;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c40:	2320      	movs	r3, #32
 8002c42:	e003      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f003 021f 	and.w	r2, r3, #31
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	3b1e      	subs	r3, #30
 8002c5a:	051b      	lsls	r3, r3, #20
 8002c5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c60:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c66:	4619      	mov	r1, r3
 8002c68:	f7ff fa12 	bl	8002090 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_ADC_ConfigChannel+0x6e0>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80be 	beq.w	8002df6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c82:	d004      	beq.n	8002c8e <HAL_ADC_ConfigChannel+0x6d6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <HAL_ADC_ConfigChannel+0x6e4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10a      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x6ec>
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <HAL_ADC_ConfigChannel+0x6e8>)
 8002c90:	e009      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x6ee>
 8002c92:	bf00      	nop
 8002c94:	407f0000 	.word	0x407f0000
 8002c98:	80080000 	.word	0x80080000
 8002c9c:	50000100 	.word	0x50000100
 8002ca0:	50000300 	.word	0x50000300
 8002ca4:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_ADC_ConfigChannel+0x854>)
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f91a 	bl	8001ee0 <LL_ADC_GetCommonPathInternalCh>
 8002cac:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a56      	ldr	r2, [pc, #344]	; (8002e10 <HAL_ADC_ConfigChannel+0x858>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_ADC_ConfigChannel+0x70c>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a55      	ldr	r2, [pc, #340]	; (8002e14 <HAL_ADC_ConfigChannel+0x85c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d13a      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d134      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd8:	d005      	beq.n	8002ce6 <HAL_ADC_ConfigChannel+0x72e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a4e      	ldr	r2, [pc, #312]	; (8002e18 <HAL_ADC_ConfigChannel+0x860>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	f040 8085 	bne.w	8002df0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cee:	d004      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x742>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a49      	ldr	r2, [pc, #292]	; (8002e1c <HAL_ADC_ConfigChannel+0x864>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x746>
 8002cfa:	4a49      	ldr	r2, [pc, #292]	; (8002e20 <HAL_ADC_ConfigChannel+0x868>)
 8002cfc:	e000      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x748>
 8002cfe:	4a43      	ldr	r2, [pc, #268]	; (8002e0c <HAL_ADC_ConfigChannel+0x854>)
 8002d00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f7ff f8d5 	bl	8001eba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d10:	4b44      	ldr	r3, [pc, #272]	; (8002e24 <HAL_ADC_ConfigChannel+0x86c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	4a44      	ldr	r2, [pc, #272]	; (8002e28 <HAL_ADC_ConfigChannel+0x870>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	4613      	mov	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d2a:	e002      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f9      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d38:	e05a      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a3b      	ldr	r2, [pc, #236]	; (8002e2c <HAL_ADC_ConfigChannel+0x874>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d125      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d11f      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a31      	ldr	r2, [pc, #196]	; (8002e1c <HAL_ADC_ConfigChannel+0x864>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d104      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x7ac>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <HAL_ADC_ConfigChannel+0x878>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d047      	beq.n	8002df4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6c:	d004      	beq.n	8002d78 <HAL_ADC_ConfigChannel+0x7c0>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2a      	ldr	r2, [pc, #168]	; (8002e1c <HAL_ADC_ConfigChannel+0x864>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d101      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x7c4>
 8002d78:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <HAL_ADC_ConfigChannel+0x868>)
 8002d7a:	e000      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x7c6>
 8002d7c:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <HAL_ADC_ConfigChannel+0x854>)
 8002d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f7ff f896 	bl	8001eba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d8e:	e031      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a27      	ldr	r2, [pc, #156]	; (8002e34 <HAL_ADC_ConfigChannel+0x87c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d12d      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d127      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <HAL_ADC_ConfigChannel+0x864>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d022      	beq.n	8002df6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db8:	d004      	beq.n	8002dc4 <HAL_ADC_ConfigChannel+0x80c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a17      	ldr	r2, [pc, #92]	; (8002e1c <HAL_ADC_ConfigChannel+0x864>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x810>
 8002dc4:	4a16      	ldr	r2, [pc, #88]	; (8002e20 <HAL_ADC_ConfigChannel+0x868>)
 8002dc6:	e000      	b.n	8002dca <HAL_ADC_ConfigChannel+0x812>
 8002dc8:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <HAL_ADC_ConfigChannel+0x854>)
 8002dca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f7ff f870 	bl	8001eba <LL_ADC_SetCommonPathInternalCh>
 8002dda:	e00c      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002dee:	e002      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002df0:	bf00      	nop
 8002df2:	e000      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002df4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002dfe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	37d8      	adds	r7, #216	; 0xd8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	50000700 	.word	0x50000700
 8002e10:	c3210000 	.word	0xc3210000
 8002e14:	90c00010 	.word	0x90c00010
 8002e18:	50000600 	.word	0x50000600
 8002e1c:	50000100 	.word	0x50000100
 8002e20:	50000300 	.word	0x50000300
 8002e24:	20000000 	.word	0x20000000
 8002e28:	053e2d63 	.word	0x053e2d63
 8002e2c:	c7520000 	.word	0xc7520000
 8002e30:	50000500 	.word	0x50000500
 8002e34:	cb840000 	.word	0xcb840000

08002e38 <LL_ADC_IsEnabled>:
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <LL_ADC_IsEnabled+0x18>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <LL_ADC_IsEnabled+0x1a>
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_ADC_REG_IsConversionOngoing>:
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d101      	bne.n	8002e76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b0a1      	sub	sp, #132	; 0x84
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e0e7      	b.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eba:	d102      	bne.n	8002ec2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ebc:	4b6f      	ldr	r3, [pc, #444]	; (800307c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	e009      	b.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a6e      	ldr	r2, [pc, #440]	; (8003080 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d102      	bne.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002ecc:	4b6d      	ldr	r3, [pc, #436]	; (8003084 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	e001      	b.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10b      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0be      	b.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ffb1 	bl	8002e5e <LL_ADC_REG_IsConversionOngoing>
 8002efc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ffab 	bl	8002e5e <LL_ADC_REG_IsConversionOngoing>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f040 80a0 	bne.w	8003050 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 809c 	bne.w	8003050 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f20:	d004      	beq.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a55      	ldr	r2, [pc, #340]	; (800307c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002f2c:	4b56      	ldr	r3, [pc, #344]	; (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002f2e:	e000      	b.n	8002f32 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002f30:	4b56      	ldr	r3, [pc, #344]	; (800308c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002f32:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d04b      	beq.n	8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f4e:	035b      	lsls	r3, r3, #13
 8002f50:	430b      	orrs	r3, r1
 8002f52:	431a      	orrs	r2, r3
 8002f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f60:	d004      	beq.n	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a45      	ldr	r2, [pc, #276]	; (800307c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d10f      	bne.n	8002f8c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002f6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f70:	f7ff ff62 	bl	8002e38 <LL_ADC_IsEnabled>
 8002f74:	4604      	mov	r4, r0
 8002f76:	4841      	ldr	r0, [pc, #260]	; (800307c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f78:	f7ff ff5e 	bl	8002e38 <LL_ADC_IsEnabled>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4323      	orrs	r3, r4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e012      	b.n	8002fb2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002f8c:	483c      	ldr	r0, [pc, #240]	; (8003080 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f8e:	f7ff ff53 	bl	8002e38 <LL_ADC_IsEnabled>
 8002f92:	4604      	mov	r4, r0
 8002f94:	483b      	ldr	r0, [pc, #236]	; (8003084 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f96:	f7ff ff4f 	bl	8002e38 <LL_ADC_IsEnabled>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	431c      	orrs	r4, r3
 8002f9e:	483c      	ldr	r0, [pc, #240]	; (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002fa0:	f7ff ff4a 	bl	8002e38 <LL_ADC_IsEnabled>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4323      	orrs	r3, r4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d056      	beq.n	8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fbe:	f023 030f 	bic.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	6811      	ldr	r1, [r2, #0]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	6892      	ldr	r2, [r2, #8]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fd2:	e047      	b.n	8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fde:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe8:	d004      	beq.n	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d10f      	bne.n	8003014 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002ff4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ff8:	f7ff ff1e 	bl	8002e38 <LL_ADC_IsEnabled>
 8002ffc:	4604      	mov	r4, r0
 8002ffe:	481f      	ldr	r0, [pc, #124]	; (800307c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003000:	f7ff ff1a 	bl	8002e38 <LL_ADC_IsEnabled>
 8003004:	4603      	mov	r3, r0
 8003006:	4323      	orrs	r3, r4
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e012      	b.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003014:	481a      	ldr	r0, [pc, #104]	; (8003080 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003016:	f7ff ff0f 	bl	8002e38 <LL_ADC_IsEnabled>
 800301a:	4604      	mov	r4, r0
 800301c:	4819      	ldr	r0, [pc, #100]	; (8003084 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800301e:	f7ff ff0b 	bl	8002e38 <LL_ADC_IsEnabled>
 8003022:	4603      	mov	r3, r0
 8003024:	431c      	orrs	r4, r3
 8003026:	481a      	ldr	r0, [pc, #104]	; (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003028:	f7ff ff06 	bl	8002e38 <LL_ADC_IsEnabled>
 800302c:	4603      	mov	r3, r0
 800302e:	4323      	orrs	r3, r4
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d012      	beq.n	8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800303e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003046:	f023 030f 	bic.w	r3, r3, #15
 800304a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800304c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800304e:	e009      	b.n	8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003062:	e000      	b.n	8003066 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003064:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800306e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003072:	4618      	mov	r0, r3
 8003074:	3784      	adds	r7, #132	; 0x84
 8003076:	46bd      	mov	sp, r7
 8003078:	bd90      	pop	{r4, r7, pc}
 800307a:	bf00      	nop
 800307c:	50000100 	.word	0x50000100
 8003080:	50000400 	.word	0x50000400
 8003084:	50000500 	.word	0x50000500
 8003088:	50000300 	.word	0x50000300
 800308c:	50000700 	.word	0x50000700
 8003090:	50000600 	.word	0x50000600

08003094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030b0:	4013      	ands	r3, r2
 80030b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030c6:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	60d3      	str	r3, [r2, #12]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <__NVIC_GetPriorityGrouping+0x18>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	f003 0307 	and.w	r3, r3, #7
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	2b00      	cmp	r3, #0
 8003108:	db0b      	blt.n	8003122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	4907      	ldr	r1, [pc, #28]	; (8003130 <__NVIC_EnableIRQ+0x38>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2001      	movs	r0, #1
 800311a:	fa00 f202 	lsl.w	r2, r0, r2
 800311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e100 	.word	0xe000e100

08003134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db0a      	blt.n	800315e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	490c      	ldr	r1, [pc, #48]	; (8003180 <__NVIC_SetPriority+0x4c>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	440b      	add	r3, r1
 8003158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800315c:	e00a      	b.n	8003174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4908      	ldr	r1, [pc, #32]	; (8003184 <__NVIC_SetPriority+0x50>)
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	3b04      	subs	r3, #4
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	440b      	add	r3, r1
 8003172:	761a      	strb	r2, [r3, #24]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000e100 	.word	0xe000e100
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	; 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f1c3 0307 	rsb	r3, r3, #7
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	bf28      	it	cs
 80031a6:	2304      	movcs	r3, #4
 80031a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d902      	bls.n	80031b8 <NVIC_EncodePriority+0x30>
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3b03      	subs	r3, #3
 80031b6:	e000      	b.n	80031ba <NVIC_EncodePriority+0x32>
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	401a      	ands	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d0:	f04f 31ff 	mov.w	r1, #4294967295
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	43d9      	mvns	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	4313      	orrs	r3, r2
         );
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3724      	adds	r7, #36	; 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003200:	d301      	bcc.n	8003206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003202:	2301      	movs	r3, #1
 8003204:	e00f      	b.n	8003226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003206:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <SysTick_Config+0x40>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3b01      	subs	r3, #1
 800320c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800320e:	210f      	movs	r1, #15
 8003210:	f04f 30ff 	mov.w	r0, #4294967295
 8003214:	f7ff ff8e 	bl	8003134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <SysTick_Config+0x40>)
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <SysTick_Config+0x40>)
 8003220:	2207      	movs	r2, #7
 8003222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	e000e010 	.word	0xe000e010

08003234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff ff29 	bl	8003094 <__NVIC_SetPriorityGrouping>
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	4603      	mov	r3, r0
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003258:	f7ff ff40 	bl	80030dc <__NVIC_GetPriorityGrouping>
 800325c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	6978      	ldr	r0, [r7, #20]
 8003264:	f7ff ff90 	bl	8003188 <NVIC_EncodePriority>
 8003268:	4602      	mov	r2, r0
 800326a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff5f 	bl	8003134 <__NVIC_SetPriority>
}
 8003276:	bf00      	nop
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	4603      	mov	r3, r0
 8003286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff33 	bl	80030f8 <__NVIC_EnableIRQ>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ffa4 	bl	80031f0 <SysTick_Config>
 80032a8:	4603      	mov	r3, r0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e08d      	b.n	80033e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_DMA_Init+0x138>)
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d80f      	bhi.n	80032f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	4b45      	ldr	r3, [pc, #276]	; (80033f0 <HAL_DMA_Init+0x13c>)
 80032da:	4413      	add	r3, r2
 80032dc:	4a45      	ldr	r2, [pc, #276]	; (80033f4 <HAL_DMA_Init+0x140>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	009a      	lsls	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a42      	ldr	r2, [pc, #264]	; (80033f8 <HAL_DMA_Init+0x144>)
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40
 80032f0:	e00e      	b.n	8003310 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	4b40      	ldr	r3, [pc, #256]	; (80033fc <HAL_DMA_Init+0x148>)
 80032fa:	4413      	add	r3, r2
 80032fc:	4a3d      	ldr	r2, [pc, #244]	; (80033f4 <HAL_DMA_Init+0x140>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	009a      	lsls	r2, r3, #2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a3c      	ldr	r2, [pc, #240]	; (8003400 <HAL_DMA_Init+0x14c>)
 800330e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003334:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003340:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800334c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8fe 	bl	8003564 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003370:	d102      	bne.n	8003378 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800338c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d010      	beq.n	80033b8 <HAL_DMA_Init+0x104>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b04      	cmp	r3, #4
 800339c:	d80c      	bhi.n	80033b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f91e 	bl	80035e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	e008      	b.n	80033ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40020407 	.word	0x40020407
 80033f0:	bffdfff8 	.word	0xbffdfff8
 80033f4:	cccccccd 	.word	0xcccccccd
 80033f8:	40020000 	.word	0x40020000
 80033fc:	bffdfbf8 	.word	0xbffdfbf8
 8003400:	40020400 	.word	0x40020400

08003404 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	2204      	movs	r2, #4
 8003426:	409a      	lsls	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d026      	beq.n	800347e <HAL_DMA_IRQHandler+0x7a>
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d021      	beq.n	800347e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0204 	bic.w	r2, r2, #4
 8003456:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345c:	f003 021f 	and.w	r2, r3, #31
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	2104      	movs	r1, #4
 8003466:	fa01 f202 	lsl.w	r2, r1, r2
 800346a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	2b00      	cmp	r3, #0
 8003472:	d071      	beq.n	8003558 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800347c:	e06c      	b.n	8003558 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	2202      	movs	r2, #2
 8003488:	409a      	lsls	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4013      	ands	r3, r2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d02e      	beq.n	80034f0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d029      	beq.n	80034f0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10b      	bne.n	80034c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 020a 	bic.w	r2, r2, #10
 80034b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	f003 021f 	and.w	r2, r3, #31
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2102      	movs	r1, #2
 80034d0:	fa01 f202 	lsl.w	r2, r1, r2
 80034d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d038      	beq.n	8003558 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80034ee:	e033      	b.n	8003558 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	2208      	movs	r2, #8
 80034fa:	409a      	lsls	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d02a      	beq.n	800355a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d025      	beq.n	800355a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 020e 	bic.w	r2, r2, #14
 800351c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f003 021f 	and.w	r2, r3, #31
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	2101      	movs	r1, #1
 800352c:	fa01 f202 	lsl.w	r2, r1, r2
 8003530:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003558:	bf00      	nop
 800355a:	bf00      	nop
}
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	4b16      	ldr	r3, [pc, #88]	; (80035cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003574:	429a      	cmp	r2, r3
 8003576:	d802      	bhi.n	800357e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003578:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e001      	b.n	8003582 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003580:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3b08      	subs	r3, #8
 800358e:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	009a      	lsls	r2, r3, #2
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4413      	add	r3, r2
 80035a4:	461a      	mov	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80035ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	2201      	movs	r2, #1
 80035b8:	409a      	lsls	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40020407 	.word	0x40020407
 80035d0:	40020800 	.word	0x40020800
 80035d4:	40020820 	.word	0x40020820
 80035d8:	cccccccd 	.word	0xcccccccd
 80035dc:	40020880 	.word	0x40020880

080035e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	461a      	mov	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a08      	ldr	r2, [pc, #32]	; (8003624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003602:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3b01      	subs	r3, #1
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2201      	movs	r2, #1
 800360e:	409a      	lsls	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	1000823f 	.word	0x1000823f
 8003624:	40020940 	.word	0x40020940

08003628 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e147      	b.n	80038ca <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fe6a 	bl	8001328 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0210 	bic.w	r2, r2, #16
 8003662:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003664:	f7fe fc0a 	bl	8001e7c <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800366a:	e012      	b.n	8003692 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800366c:	f7fe fc06 	bl	8001e7c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b0a      	cmp	r3, #10
 8003678:	d90b      	bls.n	8003692 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367e:	f043 0201 	orr.w	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2203      	movs	r2, #3
 800368a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e11b      	b.n	80038ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b08      	cmp	r3, #8
 800369e:	d0e5      	beq.n	800366c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036b0:	f7fe fbe4 	bl	8001e7c <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80036b6:	e012      	b.n	80036de <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80036b8:	f7fe fbe0 	bl	8001e7c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b0a      	cmp	r3, #10
 80036c4:	d90b      	bls.n	80036de <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ca:	f043 0201 	orr.w	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2203      	movs	r2, #3
 80036d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0f5      	b.n	80038ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0e5      	beq.n	80036b8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0202 	orr.w	r2, r2, #2
 80036fa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a74      	ldr	r2, [pc, #464]	; (80038d4 <HAL_FDCAN_Init+0x2ac>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d103      	bne.n	800370e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003706:	4a74      	ldr	r2, [pc, #464]	; (80038d8 <HAL_FDCAN_Init+0x2b0>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	7c1b      	ldrb	r3, [r3, #16]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d108      	bne.n	8003728 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699a      	ldr	r2, [r3, #24]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003724:	619a      	str	r2, [r3, #24]
 8003726:	e007      	b.n	8003738 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003736:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7c5b      	ldrb	r3, [r3, #17]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d108      	bne.n	8003752 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800374e:	619a      	str	r2, [r3, #24]
 8003750:	e007      	b.n	8003762 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003760:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	7c9b      	ldrb	r3, [r3, #18]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d108      	bne.n	800377c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699a      	ldr	r2, [r3, #24]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003778:	619a      	str	r2, [r3, #24]
 800377a:	e007      	b.n	800378c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800378a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699a      	ldr	r2, [r3, #24]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80037b0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0210 	bic.w	r2, r2, #16
 80037c0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d108      	bne.n	80037dc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699a      	ldr	r2, [r3, #24]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0204 	orr.w	r2, r2, #4
 80037d8:	619a      	str	r2, [r3, #24]
 80037da:	e02c      	b.n	8003836 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d028      	beq.n	8003836 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d01c      	beq.n	8003826 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037fa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0210 	orr.w	r2, r2, #16
 800380a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d110      	bne.n	8003836 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0220 	orr.w	r2, r2, #32
 8003822:	619a      	str	r2, [r3, #24]
 8003824:	e007      	b.n	8003836 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699a      	ldr	r2, [r3, #24]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0220 	orr.w	r2, r2, #32
 8003834:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	3b01      	subs	r3, #1
 800383c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	3b01      	subs	r3, #1
 8003844:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003846:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800384e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	3b01      	subs	r3, #1
 8003858:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800385e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003860:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800386a:	d115      	bne.n	8003898 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	3b01      	subs	r3, #1
 8003878:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800387a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	3b01      	subs	r3, #1
 8003882:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003884:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	3b01      	subs	r3, #1
 800388e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003894:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003896:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f814 	bl	80038dc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40006400 	.word	0x40006400
 80038d8:	40006500 	.word	0x40006500

080038dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80038e4:	4b30      	ldr	r3, [pc, #192]	; (80039a8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80038e6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2f      	ldr	r2, [pc, #188]	; (80039ac <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d103      	bne.n	80038fa <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80038f8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2c      	ldr	r2, [pc, #176]	; (80039b0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d103      	bne.n	800390c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800390a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800391a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003922:	041a      	lsls	r2, r3, #16
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003940:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	061a      	lsls	r2, r3, #24
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e005      	b.n	800398e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3304      	adds	r3, #4
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	429a      	cmp	r2, r3
 8003998:	d3f3      	bcc.n	8003982 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800399a:	bf00      	nop
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	4000a400 	.word	0x4000a400
 80039ac:	40006800 	.word	0x40006800
 80039b0:	40006c00 	.word	0x40006c00

080039b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039c2:	e15a      	b.n	8003c7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	4013      	ands	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 814c 	beq.w	8003c74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d005      	beq.n	80039f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d130      	bne.n	8003a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	f003 0201 	and.w	r2, r3, #1
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d017      	beq.n	8003a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d123      	bne.n	8003ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	08da      	lsrs	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3208      	adds	r2, #8
 8003aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	08da      	lsrs	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3208      	adds	r2, #8
 8003ae0:	6939      	ldr	r1, [r7, #16]
 8003ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	2203      	movs	r2, #3
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0203 	and.w	r2, r3, #3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80a6 	beq.w	8003c74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b28:	4b5b      	ldr	r3, [pc, #364]	; (8003c98 <HAL_GPIO_Init+0x2e4>)
 8003b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2c:	4a5a      	ldr	r2, [pc, #360]	; (8003c98 <HAL_GPIO_Init+0x2e4>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6613      	str	r3, [r2, #96]	; 0x60
 8003b34:	4b58      	ldr	r3, [pc, #352]	; (8003c98 <HAL_GPIO_Init+0x2e4>)
 8003b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b40:	4a56      	ldr	r2, [pc, #344]	; (8003c9c <HAL_GPIO_Init+0x2e8>)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	3302      	adds	r3, #2
 8003b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	220f      	movs	r2, #15
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b6a:	d01f      	beq.n	8003bac <HAL_GPIO_Init+0x1f8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a4c      	ldr	r2, [pc, #304]	; (8003ca0 <HAL_GPIO_Init+0x2ec>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d019      	beq.n	8003ba8 <HAL_GPIO_Init+0x1f4>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a4b      	ldr	r2, [pc, #300]	; (8003ca4 <HAL_GPIO_Init+0x2f0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <HAL_GPIO_Init+0x1f0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a4a      	ldr	r2, [pc, #296]	; (8003ca8 <HAL_GPIO_Init+0x2f4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00d      	beq.n	8003ba0 <HAL_GPIO_Init+0x1ec>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a49      	ldr	r2, [pc, #292]	; (8003cac <HAL_GPIO_Init+0x2f8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <HAL_GPIO_Init+0x1e8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a48      	ldr	r2, [pc, #288]	; (8003cb0 <HAL_GPIO_Init+0x2fc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d101      	bne.n	8003b98 <HAL_GPIO_Init+0x1e4>
 8003b94:	2305      	movs	r3, #5
 8003b96:	e00a      	b.n	8003bae <HAL_GPIO_Init+0x1fa>
 8003b98:	2306      	movs	r3, #6
 8003b9a:	e008      	b.n	8003bae <HAL_GPIO_Init+0x1fa>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	e006      	b.n	8003bae <HAL_GPIO_Init+0x1fa>
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e004      	b.n	8003bae <HAL_GPIO_Init+0x1fa>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e002      	b.n	8003bae <HAL_GPIO_Init+0x1fa>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <HAL_GPIO_Init+0x1fa>
 8003bac:	2300      	movs	r3, #0
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	f002 0203 	and.w	r2, r2, #3
 8003bb4:	0092      	lsls	r2, r2, #2
 8003bb6:	4093      	lsls	r3, r2
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bbe:	4937      	ldr	r1, [pc, #220]	; (8003c9c <HAL_GPIO_Init+0x2e8>)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	089b      	lsrs	r3, r3, #2
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bcc:	4b39      	ldr	r3, [pc, #228]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bf0:	4a30      	ldr	r2, [pc, #192]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bf6:	4b2f      	ldr	r3, [pc, #188]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c1a:	4a26      	ldr	r2, [pc, #152]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c20:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c44:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	43db      	mvns	r3, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c6e:	4a11      	ldr	r2, [pc, #68]	; (8003cb4 <HAL_GPIO_Init+0x300>)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	3301      	adds	r3, #1
 8003c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f47f ae9d 	bne.w	80039c4 <HAL_GPIO_Init+0x10>
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	bf00      	nop
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	48000400 	.word	0x48000400
 8003ca4:	48000800 	.word	0x48000800
 8003ca8:	48000c00 	.word	0x48000c00
 8003cac:	48001000 	.word	0x48001000
 8003cb0:	48001400 	.word	0x48001400
 8003cb4:	40010400 	.word	0x40010400

08003cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	807b      	strh	r3, [r7, #2]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cc8:	787b      	ldrb	r3, [r7, #1]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cce:	887a      	ldrh	r2, [r7, #2]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cd4:	e002      	b.n	8003cdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cd6:	887a      	ldrh	r2, [r7, #2]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e08d      	b.n	8003e16 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fd fc0a 	bl	8001528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2224      	movs	r2, #36	; 0x24
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d107      	bne.n	8003d62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	e006      	b.n	8003d70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d108      	bne.n	8003d8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	e007      	b.n	8003d9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69d9      	ldr	r1, [r3, #28]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d138      	bne.n	8003ea6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e032      	b.n	8003ea8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2224      	movs	r2, #36	; 0x24
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e70:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6819      	ldr	r1, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e000      	b.n	8003ea8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ea6:	2302      	movs	r3, #2
  }
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d139      	bne.n	8003f3e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e033      	b.n	8003f40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2224      	movs	r2, #36	; 0x24
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0201 	bic.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f06:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e000      	b.n	8003f40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f3e:	2302      	movs	r3, #2
  }
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e041      	b.n	8003fe2 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003f66:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f245 5255 	movw	r2, #21845	; 0x5555
 8003f70:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6852      	ldr	r2, [r2, #4]
 8003f7a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6892      	ldr	r2, [r2, #8]
 8003f84:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003f86:	f7fd ff79 	bl	8001e7c <HAL_GetTick>
 8003f8a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f8c:	e00f      	b.n	8003fae <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003f8e:	f7fd ff75 	bl	8001e7c <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b31      	cmp	r3, #49	; 0x31
 8003f9a:	d908      	bls.n	8003fae <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e019      	b.n	8003fe2 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e8      	bne.n	8003f8e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d005      	beq.n	8003fd6 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68d2      	ldr	r2, [r2, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
 8003fd4:	e004      	b.n	8003fe0 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003fde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0c0      	b.n	800417e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7fd fd4f 	bl	8001ab4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2203      	movs	r2, #3
 800401a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f002 fdb2 	bl	8006b8c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	e03e      	b.n	80040ac <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800402e:	7bfa      	ldrb	r2, [r7, #15]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	440b      	add	r3, r1
 800403c:	3311      	adds	r3, #17
 800403e:	2201      	movs	r2, #1
 8004040:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	440b      	add	r3, r1
 8004050:	3310      	adds	r3, #16
 8004052:	7bfa      	ldrb	r2, [r7, #15]
 8004054:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	440b      	add	r3, r1
 8004064:	3313      	adds	r3, #19
 8004066:	2200      	movs	r2, #0
 8004068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	440b      	add	r3, r1
 8004078:	3320      	adds	r3, #32
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800407e:	7bfa      	ldrb	r2, [r7, #15]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	440b      	add	r3, r1
 800408c:	3324      	adds	r3, #36	; 0x24
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	440b      	add	r3, r1
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	3301      	adds	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	791b      	ldrb	r3, [r3, #4]
 80040b0:	7bfa      	ldrb	r2, [r7, #15]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d3bb      	bcc.n	800402e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b6:	2300      	movs	r3, #0
 80040b8:	73fb      	strb	r3, [r7, #15]
 80040ba:	e044      	b.n	8004146 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	440b      	add	r3, r1
 80040ca:	f203 1351 	addw	r3, r3, #337	; 0x151
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040d2:	7bfa      	ldrb	r2, [r7, #15]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	440b      	add	r3, r1
 80040e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80040e4:	7bfa      	ldrb	r2, [r7, #15]
 80040e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040e8:	7bfa      	ldrb	r2, [r7, #15]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	440b      	add	r3, r1
 80040f6:	f203 1353 	addw	r3, r3, #339	; 0x153
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	440b      	add	r3, r1
 800410c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	440b      	add	r3, r1
 8004122:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	440b      	add	r3, r1
 8004138:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	3301      	adds	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	791b      	ldrb	r3, [r3, #4]
 800414a:	7bfa      	ldrb	r2, [r7, #15]
 800414c:	429a      	cmp	r2, r3
 800414e:	d3b5      	bcc.n	80040bc <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	e893 0006 	ldmia.w	r3, {r1, r2}
 800415c:	f002 fd31 	bl	8006bc2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	7a9b      	ldrb	r3, [r3, #10]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d102      	bne.n	800417c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f805 	bl	8004186 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80041be:	b29b      	uxth	r3, r3
 80041c0:	f043 0302 	orr.w	r3, r3, #2
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d141      	bne.n	800426e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ea:	4b4b      	ldr	r3, [pc, #300]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f6:	d131      	bne.n	800425c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041f8:	4b47      	ldr	r3, [pc, #284]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041fe:	4a46      	ldr	r2, [pc, #280]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004204:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004208:	4b43      	ldr	r3, [pc, #268]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004210:	4a41      	ldr	r2, [pc, #260]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004216:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004218:	4b40      	ldr	r3, [pc, #256]	; (800431c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2232      	movs	r2, #50	; 0x32
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	4a3f      	ldr	r2, [pc, #252]	; (8004320 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	0c9b      	lsrs	r3, r3, #18
 800422a:	3301      	adds	r3, #1
 800422c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800422e:	e002      	b.n	8004236 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3b01      	subs	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004236:	4b38      	ldr	r3, [pc, #224]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004242:	d102      	bne.n	800424a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f2      	bne.n	8004230 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800424a:	4b33      	ldr	r3, [pc, #204]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004256:	d158      	bne.n	800430a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e057      	b.n	800430c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800425c:	4b2e      	ldr	r3, [pc, #184]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004262:	4a2d      	ldr	r2, [pc, #180]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004268:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800426c:	e04d      	b.n	800430a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004274:	d141      	bne.n	80042fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004276:	4b28      	ldr	r3, [pc, #160]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800427e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004282:	d131      	bne.n	80042e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004284:	4b24      	ldr	r3, [pc, #144]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800428a:	4a23      	ldr	r2, [pc, #140]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800428c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004290:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004294:	4b20      	ldr	r3, [pc, #128]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800429c:	4a1e      	ldr	r2, [pc, #120]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042a4:	4b1d      	ldr	r3, [pc, #116]	; (800431c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2232      	movs	r2, #50	; 0x32
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	0c9b      	lsrs	r3, r3, #18
 80042b6:	3301      	adds	r3, #1
 80042b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ba:	e002      	b.n	80042c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3b01      	subs	r3, #1
 80042c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042c2:	4b15      	ldr	r3, [pc, #84]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ce:	d102      	bne.n	80042d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f2      	bne.n	80042bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042d6:	4b10      	ldr	r3, [pc, #64]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e2:	d112      	bne.n	800430a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e011      	b.n	800430c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042e8:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ee:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80042f8:	e007      	b.n	800430a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042fa:	4b07      	ldr	r3, [pc, #28]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004302:	4a05      	ldr	r2, [pc, #20]	; (8004318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004304:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004308:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40007000 	.word	0x40007000
 800431c:	20000000 	.word	0x20000000
 8004320:	431bde83 	.word	0x431bde83

08004324 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	4a04      	ldr	r2, [pc, #16]	; (8004340 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800432e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004332:	6093      	str	r3, [r2, #8]
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40007000 	.word	0x40007000

08004344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e2fe      	b.n	8004954 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d075      	beq.n	800444e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004362:	4b97      	ldr	r3, [pc, #604]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800436c:	4b94      	ldr	r3, [pc, #592]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b0c      	cmp	r3, #12
 800437a:	d102      	bne.n	8004382 <HAL_RCC_OscConfig+0x3e>
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2b03      	cmp	r3, #3
 8004380:	d002      	beq.n	8004388 <HAL_RCC_OscConfig+0x44>
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b08      	cmp	r3, #8
 8004386:	d10b      	bne.n	80043a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004388:	4b8d      	ldr	r3, [pc, #564]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d05b      	beq.n	800444c <HAL_RCC_OscConfig+0x108>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d157      	bne.n	800444c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e2d9      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a8:	d106      	bne.n	80043b8 <HAL_RCC_OscConfig+0x74>
 80043aa:	4b85      	ldr	r3, [pc, #532]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a84      	ldr	r2, [pc, #528]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e01d      	b.n	80043f4 <HAL_RCC_OscConfig+0xb0>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0x98>
 80043c2:	4b7f      	ldr	r3, [pc, #508]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a7e      	ldr	r2, [pc, #504]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80043c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	4b7c      	ldr	r3, [pc, #496]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a7b      	ldr	r2, [pc, #492]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e00b      	b.n	80043f4 <HAL_RCC_OscConfig+0xb0>
 80043dc:	4b78      	ldr	r3, [pc, #480]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a77      	ldr	r2, [pc, #476]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80043e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	4b75      	ldr	r3, [pc, #468]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a74      	ldr	r2, [pc, #464]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80043ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d013      	beq.n	8004424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fd fd3e 	bl	8001e7c <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004404:	f7fd fd3a 	bl	8001e7c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	; 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e29e      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004416:	4b6a      	ldr	r3, [pc, #424]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0xc0>
 8004422:	e014      	b.n	800444e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004424:	f7fd fd2a 	bl	8001e7c <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800442c:	f7fd fd26 	bl	8001e7c <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	; 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e28a      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800443e:	4b60      	ldr	r3, [pc, #384]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0xe8>
 800444a:	e000      	b.n	800444e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d075      	beq.n	8004546 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445a:	4b59      	ldr	r3, [pc, #356]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004464:	4b56      	ldr	r3, [pc, #344]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b0c      	cmp	r3, #12
 8004472:	d102      	bne.n	800447a <HAL_RCC_OscConfig+0x136>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d002      	beq.n	8004480 <HAL_RCC_OscConfig+0x13c>
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d11f      	bne.n	80044c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004480:	4b4f      	ldr	r3, [pc, #316]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_OscConfig+0x154>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e25d      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004498:	4b49      	ldr	r3, [pc, #292]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	4946      	ldr	r1, [pc, #280]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044ac:	4b45      	ldr	r3, [pc, #276]	; (80045c4 <HAL_RCC_OscConfig+0x280>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fd fc97 	bl	8001de4 <HAL_InitTick>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d043      	beq.n	8004544 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e249      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d023      	beq.n	8004510 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c8:	4b3d      	ldr	r3, [pc, #244]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a3c      	ldr	r2, [pc, #240]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80044ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fd fcd2 	bl	8001e7c <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044dc:	f7fd fcce 	bl	8001e7c <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e232      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044ee:	4b34      	ldr	r3, [pc, #208]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fa:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	061b      	lsls	r3, r3, #24
 8004508:	492d      	ldr	r1, [pc, #180]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 800450a:	4313      	orrs	r3, r2
 800450c:	604b      	str	r3, [r1, #4]
 800450e:	e01a      	b.n	8004546 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004510:	4b2b      	ldr	r3, [pc, #172]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a2a      	ldr	r2, [pc, #168]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 8004516:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800451a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fd fcae 	bl	8001e7c <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004524:	f7fd fcaa 	bl	8001e7c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e20e      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004536:	4b22      	ldr	r3, [pc, #136]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x1e0>
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004544:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d041      	beq.n	80045d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01c      	beq.n	8004594 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800455a:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 800455c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004560:	4a17      	ldr	r2, [pc, #92]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456a:	f7fd fc87 	bl	8001e7c <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004572:	f7fd fc83 	bl	8001e7c <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e1e7      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004584:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 8004586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0ef      	beq.n	8004572 <HAL_RCC_OscConfig+0x22e>
 8004592:	e020      	b.n	80045d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004594:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 8004596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800459a:	4a09      	ldr	r2, [pc, #36]	; (80045c0 <HAL_RCC_OscConfig+0x27c>)
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7fd fc6a 	bl	8001e7c <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045aa:	e00d      	b.n	80045c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ac:	f7fd fc66 	bl	8001e7c <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d906      	bls.n	80045c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e1ca      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045c8:	4b8c      	ldr	r3, [pc, #560]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 80045ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1ea      	bne.n	80045ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80a6 	beq.w	8004730 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e4:	2300      	movs	r3, #0
 80045e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045e8:	4b84      	ldr	r3, [pc, #528]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_OscConfig+0x2b4>
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x2b6>
 80045f8:	2300      	movs	r3, #0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fe:	4b7f      	ldr	r3, [pc, #508]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 8004600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004602:	4a7e      	ldr	r2, [pc, #504]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 8004604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004608:	6593      	str	r3, [r2, #88]	; 0x58
 800460a:	4b7c      	ldr	r3, [pc, #496]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 800460c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004616:	2301      	movs	r3, #1
 8004618:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800461a:	4b79      	ldr	r3, [pc, #484]	; (8004800 <HAL_RCC_OscConfig+0x4bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d118      	bne.n	8004658 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004626:	4b76      	ldr	r3, [pc, #472]	; (8004800 <HAL_RCC_OscConfig+0x4bc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a75      	ldr	r2, [pc, #468]	; (8004800 <HAL_RCC_OscConfig+0x4bc>)
 800462c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004632:	f7fd fc23 	bl	8001e7c <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463a:	f7fd fc1f 	bl	8001e7c <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e183      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800464c:	4b6c      	ldr	r3, [pc, #432]	; (8004800 <HAL_RCC_OscConfig+0x4bc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d108      	bne.n	8004672 <HAL_RCC_OscConfig+0x32e>
 8004660:	4b66      	ldr	r3, [pc, #408]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	4a65      	ldr	r2, [pc, #404]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004670:	e024      	b.n	80046bc <HAL_RCC_OscConfig+0x378>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b05      	cmp	r3, #5
 8004678:	d110      	bne.n	800469c <HAL_RCC_OscConfig+0x358>
 800467a:	4b60      	ldr	r3, [pc, #384]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	4a5e      	ldr	r2, [pc, #376]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 8004682:	f043 0304 	orr.w	r3, r3, #4
 8004686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800468a:	4b5c      	ldr	r3, [pc, #368]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	4a5a      	ldr	r2, [pc, #360]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800469a:	e00f      	b.n	80046bc <HAL_RCC_OscConfig+0x378>
 800469c:	4b57      	ldr	r3, [pc, #348]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a2:	4a56      	ldr	r2, [pc, #344]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046ac:	4b53      	ldr	r3, [pc, #332]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	4a52      	ldr	r2, [pc, #328]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 80046b4:	f023 0304 	bic.w	r3, r3, #4
 80046b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d016      	beq.n	80046f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fd fbda 	bl	8001e7c <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046cc:	f7fd fbd6 	bl	8001e7c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e138      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e2:	4b46      	ldr	r3, [pc, #280]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0ed      	beq.n	80046cc <HAL_RCC_OscConfig+0x388>
 80046f0:	e015      	b.n	800471e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f2:	f7fd fbc3 	bl	8001e7c <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046f8:	e00a      	b.n	8004710 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fa:	f7fd fbbf 	bl	8001e7c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f241 3288 	movw	r2, #5000	; 0x1388
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e121      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004710:	4b3a      	ldr	r3, [pc, #232]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1ed      	bne.n	80046fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800471e:	7ffb      	ldrb	r3, [r7, #31]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d105      	bne.n	8004730 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004724:	4b35      	ldr	r3, [pc, #212]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	4a34      	ldr	r2, [pc, #208]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 800472a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	d03c      	beq.n	80047b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01c      	beq.n	800477e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004744:	4b2d      	ldr	r3, [pc, #180]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 8004746:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800474a:	4a2c      	ldr	r2, [pc, #176]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004754:	f7fd fb92 	bl	8001e7c <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800475c:	f7fd fb8e 	bl	8001e7c <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e0f2      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800476e:	4b23      	ldr	r3, [pc, #140]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 8004770:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0ef      	beq.n	800475c <HAL_RCC_OscConfig+0x418>
 800477c:	e01b      	b.n	80047b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800477e:	4b1f      	ldr	r3, [pc, #124]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 8004780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004784:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478e:	f7fd fb75 	bl	8001e7c <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004796:	f7fd fb71 	bl	8001e7c <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e0d5      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047a8:	4b14      	ldr	r3, [pc, #80]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 80047aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1ef      	bne.n	8004796 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 80c9 	beq.w	8004952 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047c0:	4b0e      	ldr	r3, [pc, #56]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	2b0c      	cmp	r3, #12
 80047ca:	f000 8083 	beq.w	80048d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d15e      	bne.n	8004894 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	4b09      	ldr	r3, [pc, #36]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a08      	ldr	r2, [pc, #32]	; (80047fc <HAL_RCC_OscConfig+0x4b8>)
 80047dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fd fb4b 	bl	8001e7c <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e8:	e00c      	b.n	8004804 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ea:	f7fd fb47 	bl	8001e7c <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d905      	bls.n	8004804 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e0ab      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
 80047fc:	40021000 	.word	0x40021000
 8004800:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004804:	4b55      	ldr	r3, [pc, #340]	; (800495c <HAL_RCC_OscConfig+0x618>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1ec      	bne.n	80047ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004810:	4b52      	ldr	r3, [pc, #328]	; (800495c <HAL_RCC_OscConfig+0x618>)
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	4b52      	ldr	r3, [pc, #328]	; (8004960 <HAL_RCC_OscConfig+0x61c>)
 8004816:	4013      	ands	r3, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6a11      	ldr	r1, [r2, #32]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004820:	3a01      	subs	r2, #1
 8004822:	0112      	lsls	r2, r2, #4
 8004824:	4311      	orrs	r1, r2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800482a:	0212      	lsls	r2, r2, #8
 800482c:	4311      	orrs	r1, r2
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004832:	0852      	lsrs	r2, r2, #1
 8004834:	3a01      	subs	r2, #1
 8004836:	0552      	lsls	r2, r2, #21
 8004838:	4311      	orrs	r1, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800483e:	0852      	lsrs	r2, r2, #1
 8004840:	3a01      	subs	r2, #1
 8004842:	0652      	lsls	r2, r2, #25
 8004844:	4311      	orrs	r1, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800484a:	06d2      	lsls	r2, r2, #27
 800484c:	430a      	orrs	r2, r1
 800484e:	4943      	ldr	r1, [pc, #268]	; (800495c <HAL_RCC_OscConfig+0x618>)
 8004850:	4313      	orrs	r3, r2
 8004852:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004854:	4b41      	ldr	r3, [pc, #260]	; (800495c <HAL_RCC_OscConfig+0x618>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a40      	ldr	r2, [pc, #256]	; (800495c <HAL_RCC_OscConfig+0x618>)
 800485a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800485e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004860:	4b3e      	ldr	r3, [pc, #248]	; (800495c <HAL_RCC_OscConfig+0x618>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4a3d      	ldr	r2, [pc, #244]	; (800495c <HAL_RCC_OscConfig+0x618>)
 8004866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800486a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fd fb06 	bl	8001e7c <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004874:	f7fd fb02 	bl	8001e7c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e066      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004886:	4b35      	ldr	r3, [pc, #212]	; (800495c <HAL_RCC_OscConfig+0x618>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f0      	beq.n	8004874 <HAL_RCC_OscConfig+0x530>
 8004892:	e05e      	b.n	8004952 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004894:	4b31      	ldr	r3, [pc, #196]	; (800495c <HAL_RCC_OscConfig+0x618>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a30      	ldr	r2, [pc, #192]	; (800495c <HAL_RCC_OscConfig+0x618>)
 800489a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800489e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fd faec 	bl	8001e7c <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fd fae8 	bl	8001e7c <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e04c      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ba:	4b28      	ldr	r3, [pc, #160]	; (800495c <HAL_RCC_OscConfig+0x618>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80048c6:	4b25      	ldr	r3, [pc, #148]	; (800495c <HAL_RCC_OscConfig+0x618>)
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	4924      	ldr	r1, [pc, #144]	; (800495c <HAL_RCC_OscConfig+0x618>)
 80048cc:	4b25      	ldr	r3, [pc, #148]	; (8004964 <HAL_RCC_OscConfig+0x620>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	60cb      	str	r3, [r1, #12]
 80048d2:	e03e      	b.n	8004952 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e039      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80048e0:	4b1e      	ldr	r3, [pc, #120]	; (800495c <HAL_RCC_OscConfig+0x618>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f003 0203 	and.w	r2, r3, #3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d12c      	bne.n	800494e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	3b01      	subs	r3, #1
 8004900:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004902:	429a      	cmp	r2, r3
 8004904:	d123      	bne.n	800494e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d11b      	bne.n	800494e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d113      	bne.n	800494e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	3b01      	subs	r3, #1
 8004934:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d109      	bne.n	800494e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	3b01      	subs	r3, #1
 8004948:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d001      	beq.n	8004952 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3720      	adds	r7, #32
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40021000 	.word	0x40021000
 8004960:	019f800c 	.word	0x019f800c
 8004964:	feeefffc 	.word	0xfeeefffc

08004968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e11e      	b.n	8004bbe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004980:	4b91      	ldr	r3, [pc, #580]	; (8004bc8 <HAL_RCC_ClockConfig+0x260>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d910      	bls.n	80049b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b8e      	ldr	r3, [pc, #568]	; (8004bc8 <HAL_RCC_ClockConfig+0x260>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 020f 	bic.w	r2, r3, #15
 8004996:	498c      	ldr	r1, [pc, #560]	; (8004bc8 <HAL_RCC_ClockConfig+0x260>)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b8a      	ldr	r3, [pc, #552]	; (8004bc8 <HAL_RCC_ClockConfig+0x260>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e106      	b.n	8004bbe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d073      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d129      	bne.n	8004a18 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c4:	4b81      	ldr	r3, [pc, #516]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0f4      	b.n	8004bbe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80049d4:	f000 f9ca 	bl	8004d6c <RCC_GetSysClockFreqFromPLLSource>
 80049d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4a7c      	ldr	r2, [pc, #496]	; (8004bd0 <HAL_RCC_ClockConfig+0x268>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d93f      	bls.n	8004a62 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049e2:	4b7a      	ldr	r3, [pc, #488]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d033      	beq.n	8004a62 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d12f      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a02:	4b72      	ldr	r3, [pc, #456]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a0a:	4a70      	ldr	r2, [pc, #448]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	e024      	b.n	8004a62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a20:	4b6a      	ldr	r3, [pc, #424]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d109      	bne.n	8004a40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0c6      	b.n	8004bbe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a30:	4b66      	ldr	r3, [pc, #408]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0be      	b.n	8004bbe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a40:	f000 f8ce 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 8004a44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	4a61      	ldr	r2, [pc, #388]	; (8004bd0 <HAL_RCC_ClockConfig+0x268>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d909      	bls.n	8004a62 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a4e:	4b5f      	ldr	r3, [pc, #380]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a56:	4a5d      	ldr	r2, [pc, #372]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a5e:	2380      	movs	r3, #128	; 0x80
 8004a60:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a62:	4b5a      	ldr	r3, [pc, #360]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f023 0203 	bic.w	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	4957      	ldr	r1, [pc, #348]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a74:	f7fd fa02 	bl	8001e7c <HAL_GetTick>
 8004a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a7c:	f7fd f9fe 	bl	8001e7c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e095      	b.n	8004bbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a92:	4b4e      	ldr	r3, [pc, #312]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 020c 	and.w	r2, r3, #12
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d1eb      	bne.n	8004a7c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d023      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004abc:	4b43      	ldr	r3, [pc, #268]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4a42      	ldr	r2, [pc, #264]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004ac2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ac6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004ad4:	4b3d      	ldr	r3, [pc, #244]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004adc:	4a3b      	ldr	r2, [pc, #236]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004ade:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ae2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae4:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	4936      	ldr	r1, [pc, #216]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	608b      	str	r3, [r1, #8]
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2b80      	cmp	r3, #128	; 0x80
 8004afc:	d105      	bne.n	8004b0a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004afe:	4b33      	ldr	r3, [pc, #204]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	4a32      	ldr	r2, [pc, #200]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004b04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b08:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b0a:	4b2f      	ldr	r3, [pc, #188]	; (8004bc8 <HAL_RCC_ClockConfig+0x260>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d21d      	bcs.n	8004b54 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b18:	4b2b      	ldr	r3, [pc, #172]	; (8004bc8 <HAL_RCC_ClockConfig+0x260>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f023 020f 	bic.w	r2, r3, #15
 8004b20:	4929      	ldr	r1, [pc, #164]	; (8004bc8 <HAL_RCC_ClockConfig+0x260>)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b28:	f7fd f9a8 	bl	8001e7c <HAL_GetTick>
 8004b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2e:	e00a      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b30:	f7fd f9a4 	bl	8001e7c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e03b      	b.n	8004bbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <HAL_RCC_ClockConfig+0x260>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d1ed      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b60:	4b1a      	ldr	r3, [pc, #104]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4917      	ldr	r1, [pc, #92]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d009      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b7e:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	490f      	ldr	r1, [pc, #60]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b92:	f000 f825 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 8004b96:	4602      	mov	r2, r0
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <HAL_RCC_ClockConfig+0x264>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	490c      	ldr	r1, [pc, #48]	; (8004bd4 <HAL_RCC_ClockConfig+0x26c>)
 8004ba4:	5ccb      	ldrb	r3, [r1, r3]
 8004ba6:	f003 031f 	and.w	r3, r3, #31
 8004baa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bae:	4a0a      	ldr	r2, [pc, #40]	; (8004bd8 <HAL_RCC_ClockConfig+0x270>)
 8004bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <HAL_RCC_ClockConfig+0x274>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fd f914 	bl	8001de4 <HAL_InitTick>
 8004bbc:	4603      	mov	r3, r0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40022000 	.word	0x40022000
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	04c4b400 	.word	0x04c4b400
 8004bd4:	0800770c 	.word	0x0800770c
 8004bd8:	20000000 	.word	0x20000000
 8004bdc:	20000004 	.word	0x20000004

08004be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004be6:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d102      	bne.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bf2:	4b2a      	ldr	r3, [pc, #168]	; (8004c9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	e047      	b.n	8004c88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004bf8:	4b27      	ldr	r3, [pc, #156]	; (8004c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 030c 	and.w	r3, r3, #12
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d102      	bne.n	8004c0a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c04:	4b26      	ldr	r3, [pc, #152]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	e03e      	b.n	8004c88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c0a:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b0c      	cmp	r3, #12
 8004c14:	d136      	bne.n	8004c84 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c16:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c20:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d10c      	bne.n	8004c4e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c34:	4a1a      	ldr	r2, [pc, #104]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	4a16      	ldr	r2, [pc, #88]	; (8004c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c3e:	68d2      	ldr	r2, [r2, #12]
 8004c40:	0a12      	lsrs	r2, r2, #8
 8004c42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c46:	fb02 f303 	mul.w	r3, r2, r3
 8004c4a:	617b      	str	r3, [r7, #20]
      break;
 8004c4c:	e00c      	b.n	8004c68 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c4e:	4a13      	ldr	r2, [pc, #76]	; (8004c9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c56:	4a10      	ldr	r2, [pc, #64]	; (8004c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c58:	68d2      	ldr	r2, [r2, #12]
 8004c5a:	0a12      	lsrs	r2, r2, #8
 8004c5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c60:	fb02 f303 	mul.w	r3, r2, r3
 8004c64:	617b      	str	r3, [r7, #20]
      break;
 8004c66:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	0e5b      	lsrs	r3, r3, #25
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	3301      	adds	r3, #1
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	e001      	b.n	8004c88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c88:	693b      	ldr	r3, [r7, #16]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	00f42400 	.word	0x00f42400
 8004ca0:	007a1200 	.word	0x007a1200

08004ca4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca8:	4b03      	ldr	r3, [pc, #12]	; (8004cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004caa:	681b      	ldr	r3, [r3, #0]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000000 	.word	0x20000000

08004cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cc0:	f7ff fff0 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	0a1b      	lsrs	r3, r3, #8
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	4904      	ldr	r1, [pc, #16]	; (8004ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cd2:	5ccb      	ldrb	r3, [r1, r3]
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	0800771c 	.word	0x0800771c

08004ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cec:	f7ff ffda 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	0adb      	lsrs	r3, r3, #11
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	4904      	ldr	r1, [pc, #16]	; (8004d10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cfe:	5ccb      	ldrb	r3, [r1, r3]
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	0800771c 	.word	0x0800771c

08004d14 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <HAL_RCC_EnableCSS+0x1c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a04      	ldr	r2, [pc, #16]	; (8004d30 <HAL_RCC_EnableCSS+0x1c>)
 8004d1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d22:	6013      	str	r3, [r2, #0]
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40021000 	.word	0x40021000

08004d34 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004d38:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d44:	d105      	bne.n	8004d52 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004d46:	f000 f809 	bl	8004d5c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004d4a:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d50:	621a      	str	r2, [r3, #32]
  }
}
 8004d52:	bf00      	nop
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40021000 	.word	0x40021000

08004d5c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d72:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	3301      	adds	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d10c      	bne.n	8004daa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d90:	4a17      	ldr	r2, [pc, #92]	; (8004df0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	4a14      	ldr	r2, [pc, #80]	; (8004dec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d9a:	68d2      	ldr	r2, [r2, #12]
 8004d9c:	0a12      	lsrs	r2, r2, #8
 8004d9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	617b      	str	r3, [r7, #20]
    break;
 8004da8:	e00c      	b.n	8004dc4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004daa:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	4a0e      	ldr	r2, [pc, #56]	; (8004dec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004db4:	68d2      	ldr	r2, [r2, #12]
 8004db6:	0a12      	lsrs	r2, r2, #8
 8004db8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dbc:	fb02 f303 	mul.w	r3, r2, r3
 8004dc0:	617b      	str	r3, [r7, #20]
    break;
 8004dc2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dc4:	4b09      	ldr	r3, [pc, #36]	; (8004dec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	0e5b      	lsrs	r3, r3, #25
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	3301      	adds	r3, #1
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004dde:	687b      	ldr	r3, [r7, #4]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40021000 	.word	0x40021000
 8004df0:	007a1200 	.word	0x007a1200
 8004df4:	00f42400 	.word	0x00f42400

08004df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e00:	2300      	movs	r3, #0
 8004e02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e04:	2300      	movs	r3, #0
 8004e06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8098 	beq.w	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e16:	2300      	movs	r3, #0
 8004e18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e1a:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10d      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e26:	4b40      	ldr	r3, [pc, #256]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e30:	6593      	str	r3, [r2, #88]	; 0x58
 8004e32:	4b3d      	ldr	r3, [pc, #244]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e42:	4b3a      	ldr	r3, [pc, #232]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a39      	ldr	r2, [pc, #228]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e4e:	f7fd f815 	bl	8001e7c <HAL_GetTick>
 8004e52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e54:	e009      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e56:	f7fd f811 	bl	8001e7c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d902      	bls.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	74fb      	strb	r3, [r7, #19]
        break;
 8004e68:	e005      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e6a:	4b30      	ldr	r3, [pc, #192]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0ef      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e76:	7cfb      	ldrb	r3, [r7, #19]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d159      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e7c:	4b2a      	ldr	r3, [pc, #168]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01e      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d019      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e98:	4b23      	ldr	r3, [pc, #140]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ea4:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb4:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eba:	4a1b      	ldr	r2, [pc, #108]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ec4:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d016      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed6:	f7fc ffd1 	bl	8001e7c <HAL_GetTick>
 8004eda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004edc:	e00b      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f7fc ffcd 	bl	8001e7c <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d902      	bls.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ef4:	e006      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef6:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ec      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f0a:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f18:	4903      	ldr	r1, [pc, #12]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f20:	e008      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f22:	7cfb      	ldrb	r3, [r7, #19]
 8004f24:	74bb      	strb	r3, [r7, #18]
 8004f26:	e005      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f34:	7c7b      	ldrb	r3, [r7, #17]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d105      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3a:	4ba7      	ldr	r3, [pc, #668]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	4aa6      	ldr	r2, [pc, #664]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f52:	4ba1      	ldr	r3, [pc, #644]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f023 0203 	bic.w	r2, r3, #3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	499d      	ldr	r1, [pc, #628]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f74:	4b98      	ldr	r3, [pc, #608]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f023 020c 	bic.w	r2, r3, #12
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	4995      	ldr	r1, [pc, #596]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f96:	4b90      	ldr	r3, [pc, #576]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	498c      	ldr	r1, [pc, #560]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fb8:	4b87      	ldr	r3, [pc, #540]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	4984      	ldr	r1, [pc, #528]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fda:	4b7f      	ldr	r3, [pc, #508]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	497b      	ldr	r1, [pc, #492]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ffc:	4b76      	ldr	r3, [pc, #472]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	4973      	ldr	r1, [pc, #460]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800501e:	4b6e      	ldr	r3, [pc, #440]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	496a      	ldr	r1, [pc, #424]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005040:	4b65      	ldr	r3, [pc, #404]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005046:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	4962      	ldr	r1, [pc, #392]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005062:	4b5d      	ldr	r3, [pc, #372]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	4959      	ldr	r1, [pc, #356]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005084:	4b54      	ldr	r3, [pc, #336]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800508a:	f023 0203 	bic.w	r2, r3, #3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	4951      	ldr	r1, [pc, #324]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050a6:	4b4c      	ldr	r3, [pc, #304]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	4948      	ldr	r1, [pc, #288]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d015      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050c8:	4b43      	ldr	r3, [pc, #268]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	4940      	ldr	r1, [pc, #256]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e6:	d105      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050e8:	4b3b      	ldr	r3, [pc, #236]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4a3a      	ldr	r2, [pc, #232]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d015      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005100:	4b35      	ldr	r3, [pc, #212]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005106:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510e:	4932      	ldr	r1, [pc, #200]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800511e:	d105      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005120:	4b2d      	ldr	r3, [pc, #180]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4a2c      	ldr	r2, [pc, #176]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800512a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d015      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005138:	4b27      	ldr	r3, [pc, #156]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	4924      	ldr	r1, [pc, #144]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005156:	d105      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005158:	4b1f      	ldr	r3, [pc, #124]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4a1e      	ldr	r2, [pc, #120]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005162:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d015      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005170:	4b19      	ldr	r3, [pc, #100]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	4916      	ldr	r1, [pc, #88]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800518e:	d105      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005190:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4a10      	ldr	r2, [pc, #64]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800519a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d019      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	4908      	ldr	r1, [pc, #32]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051c6:	d109      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c8:	4b03      	ldr	r3, [pc, #12]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4a02      	ldr	r2, [pc, #8]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d2:	60d3      	str	r3, [r2, #12]
 80051d4:	e002      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80051d6:	bf00      	nop
 80051d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d015      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051e8:	4b29      	ldr	r3, [pc, #164]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	4926      	ldr	r1, [pc, #152]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005206:	d105      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005208:	4b21      	ldr	r3, [pc, #132]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4a20      	ldr	r2, [pc, #128]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800520e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005212:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d015      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005220:	4b1b      	ldr	r3, [pc, #108]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522e:	4918      	ldr	r1, [pc, #96]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523e:	d105      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005240:	4b13      	ldr	r3, [pc, #76]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4a12      	ldr	r2, [pc, #72]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800524a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d015      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005258:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800525a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800525e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005266:	490a      	ldr	r1, [pc, #40]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005276:	d105      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4a04      	ldr	r2, [pc, #16]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800527e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005282:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005284:	7cbb      	ldrb	r3, [r7, #18]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40021000 	.word	0x40021000

08005294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e09d      	b.n	80053e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d108      	bne.n	80052c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052b6:	d009      	beq.n	80052cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	61da      	str	r2, [r3, #28]
 80052be:	e005      	b.n	80052cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fc fb4a 	bl	8001980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005302:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800530c:	d902      	bls.n	8005314 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	e002      	b.n	800531a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005318:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005322:	d007      	beq.n	8005334 <HAL_SPI_Init+0xa0>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800532c:	d002      	beq.n	8005334 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	ea42 0103 	orr.w	r1, r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	0c1b      	lsrs	r3, r3, #16
 8005390:	f003 0204 	and.w	r2, r3, #4
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053b0:	ea42 0103 	orr.w	r1, r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e049      	b.n	8005490 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fc fb2b 	bl	8001a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2202      	movs	r2, #2
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3304      	adds	r3, #4
 8005426:	4619      	mov	r1, r3
 8005428:	4610      	mov	r0, r2
 800542a:	f000 fafb 	bl	8005a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0201 	bic.w	r2, r2, #1
 80054ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6a1a      	ldr	r2, [r3, #32]
 80054b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10f      	bne.n	80054e0 <HAL_TIM_Base_Stop_IT+0x48>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6a1a      	ldr	r2, [r3, #32]
 80054c6:	f244 4344 	movw	r3, #17476	; 0x4444
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d107      	bne.n	80054e0 <HAL_TIM_Base_Stop_IT+0x48>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0201 	bic.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d020      	beq.n	800555a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01b      	beq.n	800555a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f06f 0202 	mvn.w	r2, #2
 800552a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fa51 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 8005546:	e005      	b.n	8005554 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fa43 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fa54 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d020      	beq.n	80055a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b00      	cmp	r3, #0
 800556c:	d01b      	beq.n	80055a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f06f 0204 	mvn.w	r2, #4
 8005576:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fa2b 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 8005592:	e005      	b.n	80055a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fa1d 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa2e 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d020      	beq.n	80055f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01b      	beq.n	80055f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f06f 0208 	mvn.w	r2, #8
 80055c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2204      	movs	r2, #4
 80055c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	f003 0303 	and.w	r3, r3, #3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fa05 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 80055de:	e005      	b.n	80055ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f9f7 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa08 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d020      	beq.n	800563e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01b      	beq.n	800563e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f06f 0210 	mvn.w	r2, #16
 800560e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2208      	movs	r2, #8
 8005614:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f9df 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 800562a:	e005      	b.n	8005638 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f9d1 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f9e2 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00c      	beq.n	8005662 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f06f 0201 	mvn.w	r2, #1
 800565a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f9af 	bl	80059c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005668:	2b00      	cmp	r3, #0
 800566a:	d104      	bne.n	8005676 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00c      	beq.n	8005690 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567c:	2b00      	cmp	r3, #0
 800567e:	d007      	beq.n	8005690 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fbba 	bl	8005e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00c      	beq.n	80056b4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fbb2 	bl	8005e18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00c      	beq.n	80056d8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f99c 	bl	8005a10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00c      	beq.n	80056fc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d007      	beq.n	80056fc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0220 	mvn.w	r2, #32
 80056f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fb7a 	bl	8005df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00c      	beq.n	8005720 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d007      	beq.n	8005720 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fb86 	bl	8005e2c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00c      	beq.n	8005744 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800573c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fb7e 	bl	8005e40 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00c      	beq.n	8005768 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fb76 	bl	8005e54 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00c      	beq.n	800578c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d007      	beq.n	800578c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fb6e 	bl	8005e68 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800578c:	bf00      	nop
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIM_ConfigClockSource+0x1c>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e0f6      	b.n	800599e <HAL_TIM_ConfigClockSource+0x20a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80057ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a6f      	ldr	r2, [pc, #444]	; (80059a8 <HAL_TIM_ConfigClockSource+0x214>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	f000 80c1 	beq.w	8005972 <HAL_TIM_ConfigClockSource+0x1de>
 80057f0:	4a6d      	ldr	r2, [pc, #436]	; (80059a8 <HAL_TIM_ConfigClockSource+0x214>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	f200 80c6 	bhi.w	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 80057f8:	4a6c      	ldr	r2, [pc, #432]	; (80059ac <HAL_TIM_ConfigClockSource+0x218>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	f000 80b9 	beq.w	8005972 <HAL_TIM_ConfigClockSource+0x1de>
 8005800:	4a6a      	ldr	r2, [pc, #424]	; (80059ac <HAL_TIM_ConfigClockSource+0x218>)
 8005802:	4293      	cmp	r3, r2
 8005804:	f200 80be 	bhi.w	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 8005808:	4a69      	ldr	r2, [pc, #420]	; (80059b0 <HAL_TIM_ConfigClockSource+0x21c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	f000 80b1 	beq.w	8005972 <HAL_TIM_ConfigClockSource+0x1de>
 8005810:	4a67      	ldr	r2, [pc, #412]	; (80059b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	f200 80b6 	bhi.w	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 8005818:	4a66      	ldr	r2, [pc, #408]	; (80059b4 <HAL_TIM_ConfigClockSource+0x220>)
 800581a:	4293      	cmp	r3, r2
 800581c:	f000 80a9 	beq.w	8005972 <HAL_TIM_ConfigClockSource+0x1de>
 8005820:	4a64      	ldr	r2, [pc, #400]	; (80059b4 <HAL_TIM_ConfigClockSource+0x220>)
 8005822:	4293      	cmp	r3, r2
 8005824:	f200 80ae 	bhi.w	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 8005828:	4a63      	ldr	r2, [pc, #396]	; (80059b8 <HAL_TIM_ConfigClockSource+0x224>)
 800582a:	4293      	cmp	r3, r2
 800582c:	f000 80a1 	beq.w	8005972 <HAL_TIM_ConfigClockSource+0x1de>
 8005830:	4a61      	ldr	r2, [pc, #388]	; (80059b8 <HAL_TIM_ConfigClockSource+0x224>)
 8005832:	4293      	cmp	r3, r2
 8005834:	f200 80a6 	bhi.w	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 8005838:	4a60      	ldr	r2, [pc, #384]	; (80059bc <HAL_TIM_ConfigClockSource+0x228>)
 800583a:	4293      	cmp	r3, r2
 800583c:	f000 8099 	beq.w	8005972 <HAL_TIM_ConfigClockSource+0x1de>
 8005840:	4a5e      	ldr	r2, [pc, #376]	; (80059bc <HAL_TIM_ConfigClockSource+0x228>)
 8005842:	4293      	cmp	r3, r2
 8005844:	f200 809e 	bhi.w	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 8005848:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800584c:	f000 8091 	beq.w	8005972 <HAL_TIM_ConfigClockSource+0x1de>
 8005850:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005854:	f200 8096 	bhi.w	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 8005858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800585c:	f000 8089 	beq.w	8005972 <HAL_TIM_ConfigClockSource+0x1de>
 8005860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005864:	f200 808e 	bhi.w	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 8005868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586c:	d03e      	beq.n	80058ec <HAL_TIM_ConfigClockSource+0x158>
 800586e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005872:	f200 8087 	bhi.w	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587a:	f000 8086 	beq.w	800598a <HAL_TIM_ConfigClockSource+0x1f6>
 800587e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005882:	d87f      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 8005884:	2b70      	cmp	r3, #112	; 0x70
 8005886:	d01a      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x12a>
 8005888:	2b70      	cmp	r3, #112	; 0x70
 800588a:	d87b      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 800588c:	2b60      	cmp	r3, #96	; 0x60
 800588e:	d050      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x19e>
 8005890:	2b60      	cmp	r3, #96	; 0x60
 8005892:	d877      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 8005894:	2b50      	cmp	r3, #80	; 0x50
 8005896:	d03c      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x17e>
 8005898:	2b50      	cmp	r3, #80	; 0x50
 800589a:	d873      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 800589c:	2b40      	cmp	r3, #64	; 0x40
 800589e:	d058      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x1be>
 80058a0:	2b40      	cmp	r3, #64	; 0x40
 80058a2:	d86f      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 80058a4:	2b30      	cmp	r3, #48	; 0x30
 80058a6:	d064      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x1de>
 80058a8:	2b30      	cmp	r3, #48	; 0x30
 80058aa:	d86b      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d060      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x1de>
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d867      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d05c      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x1de>
 80058b8:	2b10      	cmp	r3, #16
 80058ba:	d05a      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x1de>
 80058bc:	e062      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058ce:	f000 f9d9 	bl	8005c84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	609a      	str	r2, [r3, #8]
      break;
 80058ea:	e04f      	b.n	800598c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058fc:	f000 f9c2 	bl	8005c84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800590e:	609a      	str	r2, [r3, #8]
      break;
 8005910:	e03c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	461a      	mov	r2, r3
 8005920:	f000 f934 	bl	8005b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2150      	movs	r1, #80	; 0x50
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f98d 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 8005930:	e02c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800593e:	461a      	mov	r2, r3
 8005940:	f000 f953 	bl	8005bea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2160      	movs	r1, #96	; 0x60
 800594a:	4618      	mov	r0, r3
 800594c:	f000 f97d 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 8005950:	e01c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	461a      	mov	r2, r3
 8005960:	f000 f914 	bl	8005b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2140      	movs	r1, #64	; 0x40
 800596a:	4618      	mov	r0, r3
 800596c:	f000 f96d 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 8005970:	e00c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4619      	mov	r1, r3
 800597c:	4610      	mov	r0, r2
 800597e:	f000 f964 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 8005982:	e003      	b.n	800598c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
      break;
 8005988:	e000      	b.n	800598c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800598a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	00100070 	.word	0x00100070
 80059ac:	00100060 	.word	0x00100060
 80059b0:	00100050 	.word	0x00100050
 80059b4:	00100040 	.word	0x00100040
 80059b8:	00100030 	.word	0x00100030
 80059bc:	00100020 	.word	0x00100020

080059c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a4c      	ldr	r2, [pc, #304]	; (8005b68 <TIM_Base_SetConfig+0x144>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d017      	beq.n	8005a6c <TIM_Base_SetConfig+0x48>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a42:	d013      	beq.n	8005a6c <TIM_Base_SetConfig+0x48>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a49      	ldr	r2, [pc, #292]	; (8005b6c <TIM_Base_SetConfig+0x148>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00f      	beq.n	8005a6c <TIM_Base_SetConfig+0x48>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a48      	ldr	r2, [pc, #288]	; (8005b70 <TIM_Base_SetConfig+0x14c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00b      	beq.n	8005a6c <TIM_Base_SetConfig+0x48>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a47      	ldr	r2, [pc, #284]	; (8005b74 <TIM_Base_SetConfig+0x150>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d007      	beq.n	8005a6c <TIM_Base_SetConfig+0x48>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a46      	ldr	r2, [pc, #280]	; (8005b78 <TIM_Base_SetConfig+0x154>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d003      	beq.n	8005a6c <TIM_Base_SetConfig+0x48>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a45      	ldr	r2, [pc, #276]	; (8005b7c <TIM_Base_SetConfig+0x158>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d108      	bne.n	8005a7e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a39      	ldr	r2, [pc, #228]	; (8005b68 <TIM_Base_SetConfig+0x144>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d023      	beq.n	8005ace <TIM_Base_SetConfig+0xaa>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8c:	d01f      	beq.n	8005ace <TIM_Base_SetConfig+0xaa>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a36      	ldr	r2, [pc, #216]	; (8005b6c <TIM_Base_SetConfig+0x148>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01b      	beq.n	8005ace <TIM_Base_SetConfig+0xaa>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a35      	ldr	r2, [pc, #212]	; (8005b70 <TIM_Base_SetConfig+0x14c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d017      	beq.n	8005ace <TIM_Base_SetConfig+0xaa>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a34      	ldr	r2, [pc, #208]	; (8005b74 <TIM_Base_SetConfig+0x150>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <TIM_Base_SetConfig+0xaa>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a33      	ldr	r2, [pc, #204]	; (8005b78 <TIM_Base_SetConfig+0x154>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00f      	beq.n	8005ace <TIM_Base_SetConfig+0xaa>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a33      	ldr	r2, [pc, #204]	; (8005b80 <TIM_Base_SetConfig+0x15c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00b      	beq.n	8005ace <TIM_Base_SetConfig+0xaa>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a32      	ldr	r2, [pc, #200]	; (8005b84 <TIM_Base_SetConfig+0x160>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d007      	beq.n	8005ace <TIM_Base_SetConfig+0xaa>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a31      	ldr	r2, [pc, #196]	; (8005b88 <TIM_Base_SetConfig+0x164>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_Base_SetConfig+0xaa>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a2c      	ldr	r2, [pc, #176]	; (8005b7c <TIM_Base_SetConfig+0x158>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d108      	bne.n	8005ae0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <TIM_Base_SetConfig+0x144>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d013      	beq.n	8005b34 <TIM_Base_SetConfig+0x110>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a1a      	ldr	r2, [pc, #104]	; (8005b78 <TIM_Base_SetConfig+0x154>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00f      	beq.n	8005b34 <TIM_Base_SetConfig+0x110>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a1a      	ldr	r2, [pc, #104]	; (8005b80 <TIM_Base_SetConfig+0x15c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00b      	beq.n	8005b34 <TIM_Base_SetConfig+0x110>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a19      	ldr	r2, [pc, #100]	; (8005b84 <TIM_Base_SetConfig+0x160>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d007      	beq.n	8005b34 <TIM_Base_SetConfig+0x110>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <TIM_Base_SetConfig+0x164>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_Base_SetConfig+0x110>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a13      	ldr	r2, [pc, #76]	; (8005b7c <TIM_Base_SetConfig+0x158>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d103      	bne.n	8005b3c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d105      	bne.n	8005b5a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f023 0201 	bic.w	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	611a      	str	r2, [r3, #16]
  }
}
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40000400 	.word	0x40000400
 8005b70:	40000800 	.word	0x40000800
 8005b74:	40000c00 	.word	0x40000c00
 8005b78:	40013400 	.word	0x40013400
 8005b7c:	40015000 	.word	0x40015000
 8005b80:	40014000 	.word	0x40014000
 8005b84:	40014400 	.word	0x40014400
 8005b88:	40014800 	.word	0x40014800

08005b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	f023 0201 	bic.w	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f023 030a 	bic.w	r3, r3, #10
 8005bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	621a      	str	r2, [r3, #32]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b087      	sub	sp, #28
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f023 0210 	bic.w	r2, r3, #16
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	031b      	lsls	r3, r3, #12
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b085      	sub	sp, #20
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f043 0307 	orr.w	r3, r3, #7
 8005c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	609a      	str	r2, [r3, #8]
}
 8005c78:	bf00      	nop
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	021a      	lsls	r2, r3, #8
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	609a      	str	r2, [r3, #8]
}
 8005cb8:	bf00      	nop
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e074      	b.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a34      	ldr	r2, [pc, #208]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d009      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a33      	ldr	r2, [pc, #204]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d004      	beq.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a31      	ldr	r2, [pc, #196]	; (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d108      	bne.n	8005d2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a21      	ldr	r2, [pc, #132]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d022      	beq.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5c:	d01d      	beq.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d018      	beq.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1d      	ldr	r2, [pc, #116]	; (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d013      	beq.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1c      	ldr	r2, [pc, #112]	; (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00e      	beq.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a15      	ldr	r2, [pc, #84]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d009      	beq.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a18      	ldr	r2, [pc, #96]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d004      	beq.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a11      	ldr	r2, [pc, #68]	; (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d10c      	bne.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40013400 	.word	0x40013400
 8005ddc:	40015000 	.word	0x40015000
 8005de0:	40000400 	.word	0x40000400
 8005de4:	40000800 	.word	0x40000800
 8005de8:	40000c00 	.word	0x40000c00
 8005dec:	40014000 	.word	0x40014000

08005df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e80:	b08c      	sub	sp, #48	; 0x30
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	431a      	orrs	r2, r3
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4baa      	ldr	r3, [pc, #680]	; (8006154 <UART_SetConfig+0x2d8>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a9f      	ldr	r2, [pc, #636]	; (8006158 <UART_SetConfig+0x2dc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005ef2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	6812      	ldr	r2, [r2, #0]
 8005efa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	f023 010f 	bic.w	r1, r3, #15
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a90      	ldr	r2, [pc, #576]	; (800615c <UART_SetConfig+0x2e0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d125      	bne.n	8005f6c <UART_SetConfig+0xf0>
 8005f20:	4b8f      	ldr	r3, [pc, #572]	; (8006160 <UART_SetConfig+0x2e4>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d81a      	bhi.n	8005f64 <UART_SetConfig+0xe8>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <UART_SetConfig+0xb8>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f55 	.word	0x08005f55
 8005f3c:	08005f4d 	.word	0x08005f4d
 8005f40:	08005f5d 	.word	0x08005f5d
 8005f44:	2301      	movs	r3, #1
 8005f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f4a:	e116      	b.n	800617a <UART_SetConfig+0x2fe>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f52:	e112      	b.n	800617a <UART_SetConfig+0x2fe>
 8005f54:	2304      	movs	r3, #4
 8005f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f5a:	e10e      	b.n	800617a <UART_SetConfig+0x2fe>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f62:	e10a      	b.n	800617a <UART_SetConfig+0x2fe>
 8005f64:	2310      	movs	r3, #16
 8005f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f6a:	e106      	b.n	800617a <UART_SetConfig+0x2fe>
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a7c      	ldr	r2, [pc, #496]	; (8006164 <UART_SetConfig+0x2e8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d138      	bne.n	8005fe8 <UART_SetConfig+0x16c>
 8005f76:	4b7a      	ldr	r3, [pc, #488]	; (8006160 <UART_SetConfig+0x2e4>)
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7c:	f003 030c 	and.w	r3, r3, #12
 8005f80:	2b0c      	cmp	r3, #12
 8005f82:	d82d      	bhi.n	8005fe0 <UART_SetConfig+0x164>
 8005f84:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <UART_SetConfig+0x110>)
 8005f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8a:	bf00      	nop
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	08005fe1 	.word	0x08005fe1
 8005f94:	08005fe1 	.word	0x08005fe1
 8005f98:	08005fe1 	.word	0x08005fe1
 8005f9c:	08005fd1 	.word	0x08005fd1
 8005fa0:	08005fe1 	.word	0x08005fe1
 8005fa4:	08005fe1 	.word	0x08005fe1
 8005fa8:	08005fe1 	.word	0x08005fe1
 8005fac:	08005fc9 	.word	0x08005fc9
 8005fb0:	08005fe1 	.word	0x08005fe1
 8005fb4:	08005fe1 	.word	0x08005fe1
 8005fb8:	08005fe1 	.word	0x08005fe1
 8005fbc:	08005fd9 	.word	0x08005fd9
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fc6:	e0d8      	b.n	800617a <UART_SetConfig+0x2fe>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fce:	e0d4      	b.n	800617a <UART_SetConfig+0x2fe>
 8005fd0:	2304      	movs	r3, #4
 8005fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fd6:	e0d0      	b.n	800617a <UART_SetConfig+0x2fe>
 8005fd8:	2308      	movs	r3, #8
 8005fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fde:	e0cc      	b.n	800617a <UART_SetConfig+0x2fe>
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fe6:	e0c8      	b.n	800617a <UART_SetConfig+0x2fe>
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a5e      	ldr	r2, [pc, #376]	; (8006168 <UART_SetConfig+0x2ec>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d125      	bne.n	800603e <UART_SetConfig+0x1c2>
 8005ff2:	4b5b      	ldr	r3, [pc, #364]	; (8006160 <UART_SetConfig+0x2e4>)
 8005ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ffc:	2b30      	cmp	r3, #48	; 0x30
 8005ffe:	d016      	beq.n	800602e <UART_SetConfig+0x1b2>
 8006000:	2b30      	cmp	r3, #48	; 0x30
 8006002:	d818      	bhi.n	8006036 <UART_SetConfig+0x1ba>
 8006004:	2b20      	cmp	r3, #32
 8006006:	d00a      	beq.n	800601e <UART_SetConfig+0x1a2>
 8006008:	2b20      	cmp	r3, #32
 800600a:	d814      	bhi.n	8006036 <UART_SetConfig+0x1ba>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <UART_SetConfig+0x19a>
 8006010:	2b10      	cmp	r3, #16
 8006012:	d008      	beq.n	8006026 <UART_SetConfig+0x1aa>
 8006014:	e00f      	b.n	8006036 <UART_SetConfig+0x1ba>
 8006016:	2300      	movs	r3, #0
 8006018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800601c:	e0ad      	b.n	800617a <UART_SetConfig+0x2fe>
 800601e:	2302      	movs	r3, #2
 8006020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006024:	e0a9      	b.n	800617a <UART_SetConfig+0x2fe>
 8006026:	2304      	movs	r3, #4
 8006028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800602c:	e0a5      	b.n	800617a <UART_SetConfig+0x2fe>
 800602e:	2308      	movs	r3, #8
 8006030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006034:	e0a1      	b.n	800617a <UART_SetConfig+0x2fe>
 8006036:	2310      	movs	r3, #16
 8006038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800603c:	e09d      	b.n	800617a <UART_SetConfig+0x2fe>
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a4a      	ldr	r2, [pc, #296]	; (800616c <UART_SetConfig+0x2f0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d125      	bne.n	8006094 <UART_SetConfig+0x218>
 8006048:	4b45      	ldr	r3, [pc, #276]	; (8006160 <UART_SetConfig+0x2e4>)
 800604a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006052:	2bc0      	cmp	r3, #192	; 0xc0
 8006054:	d016      	beq.n	8006084 <UART_SetConfig+0x208>
 8006056:	2bc0      	cmp	r3, #192	; 0xc0
 8006058:	d818      	bhi.n	800608c <UART_SetConfig+0x210>
 800605a:	2b80      	cmp	r3, #128	; 0x80
 800605c:	d00a      	beq.n	8006074 <UART_SetConfig+0x1f8>
 800605e:	2b80      	cmp	r3, #128	; 0x80
 8006060:	d814      	bhi.n	800608c <UART_SetConfig+0x210>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <UART_SetConfig+0x1f0>
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d008      	beq.n	800607c <UART_SetConfig+0x200>
 800606a:	e00f      	b.n	800608c <UART_SetConfig+0x210>
 800606c:	2300      	movs	r3, #0
 800606e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006072:	e082      	b.n	800617a <UART_SetConfig+0x2fe>
 8006074:	2302      	movs	r3, #2
 8006076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800607a:	e07e      	b.n	800617a <UART_SetConfig+0x2fe>
 800607c:	2304      	movs	r3, #4
 800607e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006082:	e07a      	b.n	800617a <UART_SetConfig+0x2fe>
 8006084:	2308      	movs	r3, #8
 8006086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800608a:	e076      	b.n	800617a <UART_SetConfig+0x2fe>
 800608c:	2310      	movs	r3, #16
 800608e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006092:	e072      	b.n	800617a <UART_SetConfig+0x2fe>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a35      	ldr	r2, [pc, #212]	; (8006170 <UART_SetConfig+0x2f4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d12a      	bne.n	80060f4 <UART_SetConfig+0x278>
 800609e:	4b30      	ldr	r3, [pc, #192]	; (8006160 <UART_SetConfig+0x2e4>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ac:	d01a      	beq.n	80060e4 <UART_SetConfig+0x268>
 80060ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b2:	d81b      	bhi.n	80060ec <UART_SetConfig+0x270>
 80060b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b8:	d00c      	beq.n	80060d4 <UART_SetConfig+0x258>
 80060ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060be:	d815      	bhi.n	80060ec <UART_SetConfig+0x270>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <UART_SetConfig+0x250>
 80060c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c8:	d008      	beq.n	80060dc <UART_SetConfig+0x260>
 80060ca:	e00f      	b.n	80060ec <UART_SetConfig+0x270>
 80060cc:	2300      	movs	r3, #0
 80060ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060d2:	e052      	b.n	800617a <UART_SetConfig+0x2fe>
 80060d4:	2302      	movs	r3, #2
 80060d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060da:	e04e      	b.n	800617a <UART_SetConfig+0x2fe>
 80060dc:	2304      	movs	r3, #4
 80060de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060e2:	e04a      	b.n	800617a <UART_SetConfig+0x2fe>
 80060e4:	2308      	movs	r3, #8
 80060e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ea:	e046      	b.n	800617a <UART_SetConfig+0x2fe>
 80060ec:	2310      	movs	r3, #16
 80060ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060f2:	e042      	b.n	800617a <UART_SetConfig+0x2fe>
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a17      	ldr	r2, [pc, #92]	; (8006158 <UART_SetConfig+0x2dc>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d13a      	bne.n	8006174 <UART_SetConfig+0x2f8>
 80060fe:	4b18      	ldr	r3, [pc, #96]	; (8006160 <UART_SetConfig+0x2e4>)
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006104:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800610c:	d01a      	beq.n	8006144 <UART_SetConfig+0x2c8>
 800610e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006112:	d81b      	bhi.n	800614c <UART_SetConfig+0x2d0>
 8006114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006118:	d00c      	beq.n	8006134 <UART_SetConfig+0x2b8>
 800611a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800611e:	d815      	bhi.n	800614c <UART_SetConfig+0x2d0>
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <UART_SetConfig+0x2b0>
 8006124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006128:	d008      	beq.n	800613c <UART_SetConfig+0x2c0>
 800612a:	e00f      	b.n	800614c <UART_SetConfig+0x2d0>
 800612c:	2300      	movs	r3, #0
 800612e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006132:	e022      	b.n	800617a <UART_SetConfig+0x2fe>
 8006134:	2302      	movs	r3, #2
 8006136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800613a:	e01e      	b.n	800617a <UART_SetConfig+0x2fe>
 800613c:	2304      	movs	r3, #4
 800613e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006142:	e01a      	b.n	800617a <UART_SetConfig+0x2fe>
 8006144:	2308      	movs	r3, #8
 8006146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800614a:	e016      	b.n	800617a <UART_SetConfig+0x2fe>
 800614c:	2310      	movs	r3, #16
 800614e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006152:	e012      	b.n	800617a <UART_SetConfig+0x2fe>
 8006154:	cfff69f3 	.word	0xcfff69f3
 8006158:	40008000 	.word	0x40008000
 800615c:	40013800 	.word	0x40013800
 8006160:	40021000 	.word	0x40021000
 8006164:	40004400 	.word	0x40004400
 8006168:	40004800 	.word	0x40004800
 800616c:	40004c00 	.word	0x40004c00
 8006170:	40005000 	.word	0x40005000
 8006174:	2310      	movs	r3, #16
 8006176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4aae      	ldr	r2, [pc, #696]	; (8006438 <UART_SetConfig+0x5bc>)
 8006180:	4293      	cmp	r3, r2
 8006182:	f040 8097 	bne.w	80062b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800618a:	2b08      	cmp	r3, #8
 800618c:	d823      	bhi.n	80061d6 <UART_SetConfig+0x35a>
 800618e:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <UART_SetConfig+0x318>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	080061b9 	.word	0x080061b9
 8006198:	080061d7 	.word	0x080061d7
 800619c:	080061c1 	.word	0x080061c1
 80061a0:	080061d7 	.word	0x080061d7
 80061a4:	080061c7 	.word	0x080061c7
 80061a8:	080061d7 	.word	0x080061d7
 80061ac:	080061d7 	.word	0x080061d7
 80061b0:	080061d7 	.word	0x080061d7
 80061b4:	080061cf 	.word	0x080061cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061b8:	f7fe fd80 	bl	8004cbc <HAL_RCC_GetPCLK1Freq>
 80061bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061be:	e010      	b.n	80061e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061c0:	4b9e      	ldr	r3, [pc, #632]	; (800643c <UART_SetConfig+0x5c0>)
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061c4:	e00d      	b.n	80061e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061c6:	f7fe fd0b 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 80061ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061cc:	e009      	b.n	80061e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061d4:	e005      	b.n	80061e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8130 	beq.w	800644a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	4a94      	ldr	r2, [pc, #592]	; (8006440 <UART_SetConfig+0x5c4>)
 80061f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f4:	461a      	mov	r2, r3
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	4413      	add	r3, r2
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	429a      	cmp	r2, r3
 800620c:	d305      	bcc.n	800621a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	429a      	cmp	r2, r3
 8006218:	d903      	bls.n	8006222 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006220:	e113      	b.n	800644a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	2200      	movs	r2, #0
 8006226:	60bb      	str	r3, [r7, #8]
 8006228:	60fa      	str	r2, [r7, #12]
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	4a84      	ldr	r2, [pc, #528]	; (8006440 <UART_SetConfig+0x5c4>)
 8006230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006234:	b29b      	uxth	r3, r3
 8006236:	2200      	movs	r2, #0
 8006238:	603b      	str	r3, [r7, #0]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006240:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006244:	f7f9 ffe8 	bl	8000218 <__aeabi_uldivmod>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	4610      	mov	r0, r2
 800624e:	4619      	mov	r1, r3
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	020b      	lsls	r3, r1, #8
 800625a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800625e:	0202      	lsls	r2, r0, #8
 8006260:	6979      	ldr	r1, [r7, #20]
 8006262:	6849      	ldr	r1, [r1, #4]
 8006264:	0849      	lsrs	r1, r1, #1
 8006266:	2000      	movs	r0, #0
 8006268:	460c      	mov	r4, r1
 800626a:	4605      	mov	r5, r0
 800626c:	eb12 0804 	adds.w	r8, r2, r4
 8006270:	eb43 0905 	adc.w	r9, r3, r5
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	469a      	mov	sl, r3
 800627c:	4693      	mov	fp, r2
 800627e:	4652      	mov	r2, sl
 8006280:	465b      	mov	r3, fp
 8006282:	4640      	mov	r0, r8
 8006284:	4649      	mov	r1, r9
 8006286:	f7f9 ffc7 	bl	8000218 <__aeabi_uldivmod>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4613      	mov	r3, r2
 8006290:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006298:	d308      	bcc.n	80062ac <UART_SetConfig+0x430>
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a0:	d204      	bcs.n	80062ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6a3a      	ldr	r2, [r7, #32]
 80062a8:	60da      	str	r2, [r3, #12]
 80062aa:	e0ce      	b.n	800644a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80062b2:	e0ca      	b.n	800644a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062bc:	d166      	bne.n	800638c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80062be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062c2:	2b08      	cmp	r3, #8
 80062c4:	d827      	bhi.n	8006316 <UART_SetConfig+0x49a>
 80062c6:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <UART_SetConfig+0x450>)
 80062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062cc:	080062f1 	.word	0x080062f1
 80062d0:	080062f9 	.word	0x080062f9
 80062d4:	08006301 	.word	0x08006301
 80062d8:	08006317 	.word	0x08006317
 80062dc:	08006307 	.word	0x08006307
 80062e0:	08006317 	.word	0x08006317
 80062e4:	08006317 	.word	0x08006317
 80062e8:	08006317 	.word	0x08006317
 80062ec:	0800630f 	.word	0x0800630f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f0:	f7fe fce4 	bl	8004cbc <HAL_RCC_GetPCLK1Freq>
 80062f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062f6:	e014      	b.n	8006322 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062f8:	f7fe fcf6 	bl	8004ce8 <HAL_RCC_GetPCLK2Freq>
 80062fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062fe:	e010      	b.n	8006322 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006300:	4b4e      	ldr	r3, [pc, #312]	; (800643c <UART_SetConfig+0x5c0>)
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006304:	e00d      	b.n	8006322 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006306:	f7fe fc6b 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 800630a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800630c:	e009      	b.n	8006322 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800630e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006314:	e005      	b.n	8006322 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006320:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 8090 	beq.w	800644a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	4a44      	ldr	r2, [pc, #272]	; (8006440 <UART_SetConfig+0x5c4>)
 8006330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006334:	461a      	mov	r2, r3
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	fbb3 f3f2 	udiv	r3, r3, r2
 800633c:	005a      	lsls	r2, r3, #1
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	085b      	lsrs	r3, r3, #1
 8006344:	441a      	add	r2, r3
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	fbb2 f3f3 	udiv	r3, r2, r3
 800634e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	2b0f      	cmp	r3, #15
 8006354:	d916      	bls.n	8006384 <UART_SetConfig+0x508>
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800635c:	d212      	bcs.n	8006384 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	b29b      	uxth	r3, r3
 8006362:	f023 030f 	bic.w	r3, r3, #15
 8006366:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	085b      	lsrs	r3, r3, #1
 800636c:	b29b      	uxth	r3, r3
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	b29a      	uxth	r2, r3
 8006374:	8bfb      	ldrh	r3, [r7, #30]
 8006376:	4313      	orrs	r3, r2
 8006378:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	8bfa      	ldrh	r2, [r7, #30]
 8006380:	60da      	str	r2, [r3, #12]
 8006382:	e062      	b.n	800644a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800638a:	e05e      	b.n	800644a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800638c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006390:	2b08      	cmp	r3, #8
 8006392:	d828      	bhi.n	80063e6 <UART_SetConfig+0x56a>
 8006394:	a201      	add	r2, pc, #4	; (adr r2, 800639c <UART_SetConfig+0x520>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063c1 	.word	0x080063c1
 80063a0:	080063c9 	.word	0x080063c9
 80063a4:	080063d1 	.word	0x080063d1
 80063a8:	080063e7 	.word	0x080063e7
 80063ac:	080063d7 	.word	0x080063d7
 80063b0:	080063e7 	.word	0x080063e7
 80063b4:	080063e7 	.word	0x080063e7
 80063b8:	080063e7 	.word	0x080063e7
 80063bc:	080063df 	.word	0x080063df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063c0:	f7fe fc7c 	bl	8004cbc <HAL_RCC_GetPCLK1Freq>
 80063c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063c6:	e014      	b.n	80063f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c8:	f7fe fc8e 	bl	8004ce8 <HAL_RCC_GetPCLK2Freq>
 80063cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063ce:	e010      	b.n	80063f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063d0:	4b1a      	ldr	r3, [pc, #104]	; (800643c <UART_SetConfig+0x5c0>)
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063d4:	e00d      	b.n	80063f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063d6:	f7fe fc03 	bl	8004be0 <HAL_RCC_GetSysClockFreq>
 80063da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063dc:	e009      	b.n	80063f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063e4:	e005      	b.n	80063f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80063f0:	bf00      	nop
    }

    if (pclk != 0U)
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d028      	beq.n	800644a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	4a10      	ldr	r2, [pc, #64]	; (8006440 <UART_SetConfig+0x5c4>)
 80063fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006402:	461a      	mov	r2, r3
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	fbb3 f2f2 	udiv	r2, r3, r2
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	441a      	add	r2, r3
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	fbb2 f3f3 	udiv	r3, r2, r3
 800641a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	2b0f      	cmp	r3, #15
 8006420:	d910      	bls.n	8006444 <UART_SetConfig+0x5c8>
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006428:	d20c      	bcs.n	8006444 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	b29a      	uxth	r2, r3
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60da      	str	r2, [r3, #12]
 8006434:	e009      	b.n	800644a <UART_SetConfig+0x5ce>
 8006436:	bf00      	nop
 8006438:	40008000 	.word	0x40008000
 800643c:	00f42400 	.word	0x00f42400
 8006440:	08007724 	.word	0x08007724
      }
      else
      {
        ret = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2201      	movs	r2, #1
 800644e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2201      	movs	r2, #1
 8006456:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2200      	movs	r2, #0
 800645e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2200      	movs	r2, #0
 8006464:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006466:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800646a:	4618      	mov	r0, r3
 800646c:	3730      	adds	r7, #48	; 0x30
 800646e:	46bd      	mov	sp, r7
 8006470:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	f003 0310 	and.w	r3, r3, #16
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01a      	beq.n	800658a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006572:	d10a      	bne.n	800658a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	605a      	str	r2, [r3, #4]
  }
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b098      	sub	sp, #96	; 0x60
 80065bc:	af02      	add	r7, sp, #8
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065c8:	f7fb fc58 	bl	8001e7c <HAL_GetTick>
 80065cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d12f      	bne.n	800663c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e4:	2200      	movs	r2, #0
 80065e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f88e 	bl	800670c <UART_WaitOnFlagUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d022      	beq.n	800663c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800660a:	653b      	str	r3, [r7, #80]	; 0x50
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006614:	647b      	str	r3, [r7, #68]	; 0x44
 8006616:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800661a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e6      	bne.n	80065f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e063      	b.n	8006704 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b04      	cmp	r3, #4
 8006648:	d149      	bne.n	80066de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800664a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006652:	2200      	movs	r2, #0
 8006654:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f857 	bl	800670c <UART_WaitOnFlagUntilTimeout>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d03c      	beq.n	80066de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	623b      	str	r3, [r7, #32]
   return(result);
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006678:	64fb      	str	r3, [r7, #76]	; 0x4c
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006682:	633b      	str	r3, [r7, #48]	; 0x30
 8006684:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e6      	bne.n	8006664 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3308      	adds	r3, #8
 800669c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f023 0301 	bic.w	r3, r3, #1
 80066ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3308      	adds	r3, #8
 80066b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066b6:	61fa      	str	r2, [r7, #28]
 80066b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	69b9      	ldr	r1, [r7, #24]
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	617b      	str	r3, [r7, #20]
   return(result);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e5      	bne.n	8006696 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e012      	b.n	8006704 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3758      	adds	r7, #88	; 0x58
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	4613      	mov	r3, r2
 800671a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800671c:	e04f      	b.n	80067be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d04b      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006726:	f7fb fba9 	bl	8001e7c <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	429a      	cmp	r2, r3
 8006734:	d302      	bcc.n	800673c <UART_WaitOnFlagUntilTimeout+0x30>
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e04e      	b.n	80067de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	d037      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0xb2>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b80      	cmp	r3, #128	; 0x80
 8006752:	d034      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0xb2>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b40      	cmp	r3, #64	; 0x40
 8006758:	d031      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b08      	cmp	r3, #8
 8006766:	d110      	bne.n	800678a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2208      	movs	r2, #8
 800676e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 f838 	bl	80067e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2208      	movs	r2, #8
 800677a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e029      	b.n	80067de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006798:	d111      	bne.n	80067be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 f81e 	bl	80067e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e00f      	b.n	80067de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69da      	ldr	r2, [r3, #28]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4013      	ands	r3, r2
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	bf0c      	ite	eq
 80067ce:	2301      	moveq	r3, #1
 80067d0:	2300      	movne	r3, #0
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	461a      	mov	r2, r3
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d0a0      	beq.n	800671e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b095      	sub	sp, #84	; 0x54
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800680c:	643b      	str	r3, [r7, #64]	; 0x40
 800680e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006812:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e6      	bne.n	80067ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3308      	adds	r3, #8
 8006826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006836:	f023 0301 	bic.w	r3, r3, #1
 800683a:	64bb      	str	r3, [r7, #72]	; 0x48
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3308      	adds	r3, #8
 8006842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006844:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800684a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e3      	bne.n	8006820 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800685c:	2b01      	cmp	r3, #1
 800685e:	d118      	bne.n	8006892 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	60bb      	str	r3, [r7, #8]
   return(result);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f023 0310 	bic.w	r3, r3, #16
 8006874:	647b      	str	r3, [r7, #68]	; 0x44
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800687e:	61bb      	str	r3, [r7, #24]
 8006880:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6979      	ldr	r1, [r7, #20]
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	613b      	str	r3, [r7, #16]
   return(result);
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e6      	bne.n	8006860 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80068a6:	bf00      	nop
 80068a8:	3754      	adds	r7, #84	; 0x54
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b086      	sub	sp, #24
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e058      	b.n	800697c <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d106      	bne.n	80068e2 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f7fa ffd7 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2224      	movs	r2, #36	; 0x24
 80068e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0201 	bic.w	r2, r2, #1
 80068f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff fdb6 	bl	8006474 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7ff fab7 	bl	8005e7c <UART_SetConfig>
 800690e:	4603      	mov	r3, r0
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e031      	b.n	800697c <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006926:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	430a      	orrs	r2, r1
 800693a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	055b      	lsls	r3, r3, #21
 8006940:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	041b      	lsls	r3, r3, #16
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	4313      	orrs	r3, r2
 800694a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8006956:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	6812      	ldr	r2, [r2, #0]
 800695e:	6979      	ldr	r1, [r7, #20]
 8006960:	430b      	orrs	r3, r1
 8006962:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f7ff fe1f 	bl	80065b8 <UART_CheckIdleState>
 800697a:	4603      	mov	r3, r0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <HAL_UARTEx_DisableFifoMode+0x16>
 8006996:	2302      	movs	r3, #2
 8006998:	e027      	b.n	80069ea <HAL_UARTEx_DisableFifoMode+0x66>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2224      	movs	r2, #36	; 0x24
 80069a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 0201 	bic.w	r2, r2, #1
 80069c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80069c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2220      	movs	r2, #32
 80069dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b084      	sub	sp, #16
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e02d      	b.n	8006a6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2224      	movs	r2, #36	; 0x24
 8006a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f850 	bl	8006af0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d101      	bne.n	8006a8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a86:	2302      	movs	r3, #2
 8006a88:	e02d      	b.n	8006ae6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2224      	movs	r2, #36	; 0x24
 8006a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0201 	bic.w	r2, r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f812 	bl	8006af0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d108      	bne.n	8006b12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b10:	e031      	b.n	8006b76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b12:	2308      	movs	r3, #8
 8006b14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b16:	2308      	movs	r3, #8
 8006b18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	0e5b      	lsrs	r3, r3, #25
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	0f5b      	lsrs	r3, r3, #29
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	7b3a      	ldrb	r2, [r7, #12]
 8006b3e:	4911      	ldr	r1, [pc, #68]	; (8006b84 <UARTEx_SetNbDataToProcess+0x94>)
 8006b40:	5c8a      	ldrb	r2, [r1, r2]
 8006b42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b46:	7b3a      	ldrb	r2, [r7, #12]
 8006b48:	490f      	ldr	r1, [pc, #60]	; (8006b88 <UARTEx_SetNbDataToProcess+0x98>)
 8006b4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	7b7a      	ldrb	r2, [r7, #13]
 8006b5c:	4909      	ldr	r1, [pc, #36]	; (8006b84 <UARTEx_SetNbDataToProcess+0x94>)
 8006b5e:	5c8a      	ldrb	r2, [r1, r2]
 8006b60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b64:	7b7a      	ldrb	r2, [r7, #13]
 8006b66:	4908      	ldr	r1, [pc, #32]	; (8006b88 <UARTEx_SetNbDataToProcess+0x98>)
 8006b68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	0800773c 	.word	0x0800773c
 8006b88:	08007744 	.word	0x08007744

08006b8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b94:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	43db      	mvns	r3, r3
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	4013      	ands	r3, r2
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	1d3b      	adds	r3, r7, #4
 8006bcc:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <atoi>:
 8006bfe:	220a      	movs	r2, #10
 8006c00:	2100      	movs	r1, #0
 8006c02:	f000 b92f 	b.w	8006e64 <strtol>
	...

08006c08 <sbrk_aligned>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	4e0e      	ldr	r6, [pc, #56]	; (8006c44 <sbrk_aligned+0x3c>)
 8006c0c:	460c      	mov	r4, r1
 8006c0e:	6831      	ldr	r1, [r6, #0]
 8006c10:	4605      	mov	r5, r0
 8006c12:	b911      	cbnz	r1, 8006c1a <sbrk_aligned+0x12>
 8006c14:	f000 fb62 	bl	80072dc <_sbrk_r>
 8006c18:	6030      	str	r0, [r6, #0]
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f000 fb5d 	bl	80072dc <_sbrk_r>
 8006c22:	1c43      	adds	r3, r0, #1
 8006c24:	d00a      	beq.n	8006c3c <sbrk_aligned+0x34>
 8006c26:	1cc4      	adds	r4, r0, #3
 8006c28:	f024 0403 	bic.w	r4, r4, #3
 8006c2c:	42a0      	cmp	r0, r4
 8006c2e:	d007      	beq.n	8006c40 <sbrk_aligned+0x38>
 8006c30:	1a21      	subs	r1, r4, r0
 8006c32:	4628      	mov	r0, r5
 8006c34:	f000 fb52 	bl	80072dc <_sbrk_r>
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d101      	bne.n	8006c40 <sbrk_aligned+0x38>
 8006c3c:	f04f 34ff 	mov.w	r4, #4294967295
 8006c40:	4620      	mov	r0, r4
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
 8006c44:	20000a08 	.word	0x20000a08

08006c48 <_malloc_r>:
 8006c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c4c:	1ccd      	adds	r5, r1, #3
 8006c4e:	f025 0503 	bic.w	r5, r5, #3
 8006c52:	3508      	adds	r5, #8
 8006c54:	2d0c      	cmp	r5, #12
 8006c56:	bf38      	it	cc
 8006c58:	250c      	movcc	r5, #12
 8006c5a:	2d00      	cmp	r5, #0
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	db01      	blt.n	8006c64 <_malloc_r+0x1c>
 8006c60:	42a9      	cmp	r1, r5
 8006c62:	d905      	bls.n	8006c70 <_malloc_r+0x28>
 8006c64:	230c      	movs	r3, #12
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	2600      	movs	r6, #0
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d44 <_malloc_r+0xfc>
 8006c74:	f000 f868 	bl	8006d48 <__malloc_lock>
 8006c78:	f8d8 3000 	ldr.w	r3, [r8]
 8006c7c:	461c      	mov	r4, r3
 8006c7e:	bb5c      	cbnz	r4, 8006cd8 <_malloc_r+0x90>
 8006c80:	4629      	mov	r1, r5
 8006c82:	4638      	mov	r0, r7
 8006c84:	f7ff ffc0 	bl	8006c08 <sbrk_aligned>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	d155      	bne.n	8006d3a <_malloc_r+0xf2>
 8006c8e:	f8d8 4000 	ldr.w	r4, [r8]
 8006c92:	4626      	mov	r6, r4
 8006c94:	2e00      	cmp	r6, #0
 8006c96:	d145      	bne.n	8006d24 <_malloc_r+0xdc>
 8006c98:	2c00      	cmp	r4, #0
 8006c9a:	d048      	beq.n	8006d2e <_malloc_r+0xe6>
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	eb04 0903 	add.w	r9, r4, r3
 8006ca6:	f000 fb19 	bl	80072dc <_sbrk_r>
 8006caa:	4581      	cmp	r9, r0
 8006cac:	d13f      	bne.n	8006d2e <_malloc_r+0xe6>
 8006cae:	6821      	ldr	r1, [r4, #0]
 8006cb0:	1a6d      	subs	r5, r5, r1
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	f7ff ffa7 	bl	8006c08 <sbrk_aligned>
 8006cba:	3001      	adds	r0, #1
 8006cbc:	d037      	beq.n	8006d2e <_malloc_r+0xe6>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	442b      	add	r3, r5
 8006cc2:	6023      	str	r3, [r4, #0]
 8006cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d038      	beq.n	8006d3e <_malloc_r+0xf6>
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	42a2      	cmp	r2, r4
 8006cd0:	d12b      	bne.n	8006d2a <_malloc_r+0xe2>
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	605a      	str	r2, [r3, #4]
 8006cd6:	e00f      	b.n	8006cf8 <_malloc_r+0xb0>
 8006cd8:	6822      	ldr	r2, [r4, #0]
 8006cda:	1b52      	subs	r2, r2, r5
 8006cdc:	d41f      	bmi.n	8006d1e <_malloc_r+0xd6>
 8006cde:	2a0b      	cmp	r2, #11
 8006ce0:	d917      	bls.n	8006d12 <_malloc_r+0xca>
 8006ce2:	1961      	adds	r1, r4, r5
 8006ce4:	42a3      	cmp	r3, r4
 8006ce6:	6025      	str	r5, [r4, #0]
 8006ce8:	bf18      	it	ne
 8006cea:	6059      	strne	r1, [r3, #4]
 8006cec:	6863      	ldr	r3, [r4, #4]
 8006cee:	bf08      	it	eq
 8006cf0:	f8c8 1000 	streq.w	r1, [r8]
 8006cf4:	5162      	str	r2, [r4, r5]
 8006cf6:	604b      	str	r3, [r1, #4]
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	f104 060b 	add.w	r6, r4, #11
 8006cfe:	f000 f829 	bl	8006d54 <__malloc_unlock>
 8006d02:	f026 0607 	bic.w	r6, r6, #7
 8006d06:	1d23      	adds	r3, r4, #4
 8006d08:	1af2      	subs	r2, r6, r3
 8006d0a:	d0ae      	beq.n	8006c6a <_malloc_r+0x22>
 8006d0c:	1b9b      	subs	r3, r3, r6
 8006d0e:	50a3      	str	r3, [r4, r2]
 8006d10:	e7ab      	b.n	8006c6a <_malloc_r+0x22>
 8006d12:	42a3      	cmp	r3, r4
 8006d14:	6862      	ldr	r2, [r4, #4]
 8006d16:	d1dd      	bne.n	8006cd4 <_malloc_r+0x8c>
 8006d18:	f8c8 2000 	str.w	r2, [r8]
 8006d1c:	e7ec      	b.n	8006cf8 <_malloc_r+0xb0>
 8006d1e:	4623      	mov	r3, r4
 8006d20:	6864      	ldr	r4, [r4, #4]
 8006d22:	e7ac      	b.n	8006c7e <_malloc_r+0x36>
 8006d24:	4634      	mov	r4, r6
 8006d26:	6876      	ldr	r6, [r6, #4]
 8006d28:	e7b4      	b.n	8006c94 <_malloc_r+0x4c>
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	e7cc      	b.n	8006cc8 <_malloc_r+0x80>
 8006d2e:	230c      	movs	r3, #12
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	4638      	mov	r0, r7
 8006d34:	f000 f80e 	bl	8006d54 <__malloc_unlock>
 8006d38:	e797      	b.n	8006c6a <_malloc_r+0x22>
 8006d3a:	6025      	str	r5, [r4, #0]
 8006d3c:	e7dc      	b.n	8006cf8 <_malloc_r+0xb0>
 8006d3e:	605b      	str	r3, [r3, #4]
 8006d40:	deff      	udf	#255	; 0xff
 8006d42:	bf00      	nop
 8006d44:	20000a04 	.word	0x20000a04

08006d48 <__malloc_lock>:
 8006d48:	4801      	ldr	r0, [pc, #4]	; (8006d50 <__malloc_lock+0x8>)
 8006d4a:	f000 bb14 	b.w	8007376 <__retarget_lock_acquire_recursive>
 8006d4e:	bf00      	nop
 8006d50:	20000b4c 	.word	0x20000b4c

08006d54 <__malloc_unlock>:
 8006d54:	4801      	ldr	r0, [pc, #4]	; (8006d5c <__malloc_unlock+0x8>)
 8006d56:	f000 bb0f 	b.w	8007378 <__retarget_lock_release_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	20000b4c 	.word	0x20000b4c

08006d60 <_strtol_l.constprop.0>:
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d66:	d001      	beq.n	8006d6c <_strtol_l.constprop.0+0xc>
 8006d68:	2b24      	cmp	r3, #36	; 0x24
 8006d6a:	d906      	bls.n	8006d7a <_strtol_l.constprop.0+0x1a>
 8006d6c:	f000 fad8 	bl	8007320 <__errno>
 8006d70:	2316      	movs	r3, #22
 8006d72:	6003      	str	r3, [r0, #0]
 8006d74:	2000      	movs	r0, #0
 8006d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006e60 <_strtol_l.constprop.0+0x100>
 8006d7e:	460d      	mov	r5, r1
 8006d80:	462e      	mov	r6, r5
 8006d82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d86:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006d8a:	f017 0708 	ands.w	r7, r7, #8
 8006d8e:	d1f7      	bne.n	8006d80 <_strtol_l.constprop.0+0x20>
 8006d90:	2c2d      	cmp	r4, #45	; 0x2d
 8006d92:	d132      	bne.n	8006dfa <_strtol_l.constprop.0+0x9a>
 8006d94:	782c      	ldrb	r4, [r5, #0]
 8006d96:	2701      	movs	r7, #1
 8006d98:	1cb5      	adds	r5, r6, #2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d05b      	beq.n	8006e56 <_strtol_l.constprop.0+0xf6>
 8006d9e:	2b10      	cmp	r3, #16
 8006da0:	d109      	bne.n	8006db6 <_strtol_l.constprop.0+0x56>
 8006da2:	2c30      	cmp	r4, #48	; 0x30
 8006da4:	d107      	bne.n	8006db6 <_strtol_l.constprop.0+0x56>
 8006da6:	782c      	ldrb	r4, [r5, #0]
 8006da8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006dac:	2c58      	cmp	r4, #88	; 0x58
 8006dae:	d14d      	bne.n	8006e4c <_strtol_l.constprop.0+0xec>
 8006db0:	786c      	ldrb	r4, [r5, #1]
 8006db2:	2310      	movs	r3, #16
 8006db4:	3502      	adds	r5, #2
 8006db6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006dba:	f108 38ff 	add.w	r8, r8, #4294967295
 8006dbe:	f04f 0e00 	mov.w	lr, #0
 8006dc2:	fbb8 f9f3 	udiv	r9, r8, r3
 8006dc6:	4676      	mov	r6, lr
 8006dc8:	fb03 8a19 	mls	sl, r3, r9, r8
 8006dcc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006dd0:	f1bc 0f09 	cmp.w	ip, #9
 8006dd4:	d816      	bhi.n	8006e04 <_strtol_l.constprop.0+0xa4>
 8006dd6:	4664      	mov	r4, ip
 8006dd8:	42a3      	cmp	r3, r4
 8006dda:	dd24      	ble.n	8006e26 <_strtol_l.constprop.0+0xc6>
 8006ddc:	f1be 3fff 	cmp.w	lr, #4294967295
 8006de0:	d008      	beq.n	8006df4 <_strtol_l.constprop.0+0x94>
 8006de2:	45b1      	cmp	r9, r6
 8006de4:	d31c      	bcc.n	8006e20 <_strtol_l.constprop.0+0xc0>
 8006de6:	d101      	bne.n	8006dec <_strtol_l.constprop.0+0x8c>
 8006de8:	45a2      	cmp	sl, r4
 8006dea:	db19      	blt.n	8006e20 <_strtol_l.constprop.0+0xc0>
 8006dec:	fb06 4603 	mla	r6, r6, r3, r4
 8006df0:	f04f 0e01 	mov.w	lr, #1
 8006df4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006df8:	e7e8      	b.n	8006dcc <_strtol_l.constprop.0+0x6c>
 8006dfa:	2c2b      	cmp	r4, #43	; 0x2b
 8006dfc:	bf04      	itt	eq
 8006dfe:	782c      	ldrbeq	r4, [r5, #0]
 8006e00:	1cb5      	addeq	r5, r6, #2
 8006e02:	e7ca      	b.n	8006d9a <_strtol_l.constprop.0+0x3a>
 8006e04:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006e08:	f1bc 0f19 	cmp.w	ip, #25
 8006e0c:	d801      	bhi.n	8006e12 <_strtol_l.constprop.0+0xb2>
 8006e0e:	3c37      	subs	r4, #55	; 0x37
 8006e10:	e7e2      	b.n	8006dd8 <_strtol_l.constprop.0+0x78>
 8006e12:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006e16:	f1bc 0f19 	cmp.w	ip, #25
 8006e1a:	d804      	bhi.n	8006e26 <_strtol_l.constprop.0+0xc6>
 8006e1c:	3c57      	subs	r4, #87	; 0x57
 8006e1e:	e7db      	b.n	8006dd8 <_strtol_l.constprop.0+0x78>
 8006e20:	f04f 3eff 	mov.w	lr, #4294967295
 8006e24:	e7e6      	b.n	8006df4 <_strtol_l.constprop.0+0x94>
 8006e26:	f1be 3fff 	cmp.w	lr, #4294967295
 8006e2a:	d105      	bne.n	8006e38 <_strtol_l.constprop.0+0xd8>
 8006e2c:	2322      	movs	r3, #34	; 0x22
 8006e2e:	6003      	str	r3, [r0, #0]
 8006e30:	4646      	mov	r6, r8
 8006e32:	b942      	cbnz	r2, 8006e46 <_strtol_l.constprop.0+0xe6>
 8006e34:	4630      	mov	r0, r6
 8006e36:	e79e      	b.n	8006d76 <_strtol_l.constprop.0+0x16>
 8006e38:	b107      	cbz	r7, 8006e3c <_strtol_l.constprop.0+0xdc>
 8006e3a:	4276      	negs	r6, r6
 8006e3c:	2a00      	cmp	r2, #0
 8006e3e:	d0f9      	beq.n	8006e34 <_strtol_l.constprop.0+0xd4>
 8006e40:	f1be 0f00 	cmp.w	lr, #0
 8006e44:	d000      	beq.n	8006e48 <_strtol_l.constprop.0+0xe8>
 8006e46:	1e69      	subs	r1, r5, #1
 8006e48:	6011      	str	r1, [r2, #0]
 8006e4a:	e7f3      	b.n	8006e34 <_strtol_l.constprop.0+0xd4>
 8006e4c:	2430      	movs	r4, #48	; 0x30
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1b1      	bne.n	8006db6 <_strtol_l.constprop.0+0x56>
 8006e52:	2308      	movs	r3, #8
 8006e54:	e7af      	b.n	8006db6 <_strtol_l.constprop.0+0x56>
 8006e56:	2c30      	cmp	r4, #48	; 0x30
 8006e58:	d0a5      	beq.n	8006da6 <_strtol_l.constprop.0+0x46>
 8006e5a:	230a      	movs	r3, #10
 8006e5c:	e7ab      	b.n	8006db6 <_strtol_l.constprop.0+0x56>
 8006e5e:	bf00      	nop
 8006e60:	0800774d 	.word	0x0800774d

08006e64 <strtol>:
 8006e64:	4613      	mov	r3, r2
 8006e66:	460a      	mov	r2, r1
 8006e68:	4601      	mov	r1, r0
 8006e6a:	4802      	ldr	r0, [pc, #8]	; (8006e74 <strtol+0x10>)
 8006e6c:	6800      	ldr	r0, [r0, #0]
 8006e6e:	f7ff bf77 	b.w	8006d60 <_strtol_l.constprop.0>
 8006e72:	bf00      	nop
 8006e74:	20000064 	.word	0x20000064

08006e78 <std>:
 8006e78:	2300      	movs	r3, #0
 8006e7a:	b510      	push	{r4, lr}
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e86:	6083      	str	r3, [r0, #8]
 8006e88:	8181      	strh	r1, [r0, #12]
 8006e8a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e8c:	81c2      	strh	r2, [r0, #14]
 8006e8e:	6183      	str	r3, [r0, #24]
 8006e90:	4619      	mov	r1, r3
 8006e92:	2208      	movs	r2, #8
 8006e94:	305c      	adds	r0, #92	; 0x5c
 8006e96:	f000 f9e5 	bl	8007264 <memset>
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	; (8006ed0 <std+0x58>)
 8006e9c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <std+0x5c>)
 8006ea0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <std+0x60>)
 8006ea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <std+0x64>)
 8006ea8:	6323      	str	r3, [r4, #48]	; 0x30
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	; (8006ee0 <std+0x68>)
 8006eac:	6224      	str	r4, [r4, #32]
 8006eae:	429c      	cmp	r4, r3
 8006eb0:	d006      	beq.n	8006ec0 <std+0x48>
 8006eb2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006eb6:	4294      	cmp	r4, r2
 8006eb8:	d002      	beq.n	8006ec0 <std+0x48>
 8006eba:	33d0      	adds	r3, #208	; 0xd0
 8006ebc:	429c      	cmp	r4, r3
 8006ebe:	d105      	bne.n	8006ecc <std+0x54>
 8006ec0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec8:	f000 ba54 	b.w	8007374 <__retarget_lock_init_recursive>
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	bf00      	nop
 8006ed0:	080070b5 	.word	0x080070b5
 8006ed4:	080070d7 	.word	0x080070d7
 8006ed8:	0800710f 	.word	0x0800710f
 8006edc:	08007133 	.word	0x08007133
 8006ee0:	20000a0c 	.word	0x20000a0c

08006ee4 <stdio_exit_handler>:
 8006ee4:	4a02      	ldr	r2, [pc, #8]	; (8006ef0 <stdio_exit_handler+0xc>)
 8006ee6:	4903      	ldr	r1, [pc, #12]	; (8006ef4 <stdio_exit_handler+0x10>)
 8006ee8:	4803      	ldr	r0, [pc, #12]	; (8006ef8 <stdio_exit_handler+0x14>)
 8006eea:	f000 b869 	b.w	8006fc0 <_fwalk_sglue>
 8006eee:	bf00      	nop
 8006ef0:	2000000c 	.word	0x2000000c
 8006ef4:	08007521 	.word	0x08007521
 8006ef8:	20000018 	.word	0x20000018

08006efc <cleanup_stdio>:
 8006efc:	6841      	ldr	r1, [r0, #4]
 8006efe:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <cleanup_stdio+0x34>)
 8006f00:	4299      	cmp	r1, r3
 8006f02:	b510      	push	{r4, lr}
 8006f04:	4604      	mov	r4, r0
 8006f06:	d001      	beq.n	8006f0c <cleanup_stdio+0x10>
 8006f08:	f000 fb0a 	bl	8007520 <_fflush_r>
 8006f0c:	68a1      	ldr	r1, [r4, #8]
 8006f0e:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <cleanup_stdio+0x38>)
 8006f10:	4299      	cmp	r1, r3
 8006f12:	d002      	beq.n	8006f1a <cleanup_stdio+0x1e>
 8006f14:	4620      	mov	r0, r4
 8006f16:	f000 fb03 	bl	8007520 <_fflush_r>
 8006f1a:	68e1      	ldr	r1, [r4, #12]
 8006f1c:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <cleanup_stdio+0x3c>)
 8006f1e:	4299      	cmp	r1, r3
 8006f20:	d004      	beq.n	8006f2c <cleanup_stdio+0x30>
 8006f22:	4620      	mov	r0, r4
 8006f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f28:	f000 bafa 	b.w	8007520 <_fflush_r>
 8006f2c:	bd10      	pop	{r4, pc}
 8006f2e:	bf00      	nop
 8006f30:	20000a0c 	.word	0x20000a0c
 8006f34:	20000a74 	.word	0x20000a74
 8006f38:	20000adc 	.word	0x20000adc

08006f3c <global_stdio_init.part.0>:
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	4b0b      	ldr	r3, [pc, #44]	; (8006f6c <global_stdio_init.part.0+0x30>)
 8006f40:	4c0b      	ldr	r4, [pc, #44]	; (8006f70 <global_stdio_init.part.0+0x34>)
 8006f42:	4a0c      	ldr	r2, [pc, #48]	; (8006f74 <global_stdio_init.part.0+0x38>)
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	4620      	mov	r0, r4
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2104      	movs	r1, #4
 8006f4c:	f7ff ff94 	bl	8006e78 <std>
 8006f50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f54:	2201      	movs	r2, #1
 8006f56:	2109      	movs	r1, #9
 8006f58:	f7ff ff8e 	bl	8006e78 <std>
 8006f5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f60:	2202      	movs	r2, #2
 8006f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f66:	2112      	movs	r1, #18
 8006f68:	f7ff bf86 	b.w	8006e78 <std>
 8006f6c:	20000b44 	.word	0x20000b44
 8006f70:	20000a0c 	.word	0x20000a0c
 8006f74:	08006ee5 	.word	0x08006ee5

08006f78 <__sfp_lock_acquire>:
 8006f78:	4801      	ldr	r0, [pc, #4]	; (8006f80 <__sfp_lock_acquire+0x8>)
 8006f7a:	f000 b9fc 	b.w	8007376 <__retarget_lock_acquire_recursive>
 8006f7e:	bf00      	nop
 8006f80:	20000b4d 	.word	0x20000b4d

08006f84 <__sfp_lock_release>:
 8006f84:	4801      	ldr	r0, [pc, #4]	; (8006f8c <__sfp_lock_release+0x8>)
 8006f86:	f000 b9f7 	b.w	8007378 <__retarget_lock_release_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	20000b4d 	.word	0x20000b4d

08006f90 <__sinit>:
 8006f90:	b510      	push	{r4, lr}
 8006f92:	4604      	mov	r4, r0
 8006f94:	f7ff fff0 	bl	8006f78 <__sfp_lock_acquire>
 8006f98:	6a23      	ldr	r3, [r4, #32]
 8006f9a:	b11b      	cbz	r3, 8006fa4 <__sinit+0x14>
 8006f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa0:	f7ff bff0 	b.w	8006f84 <__sfp_lock_release>
 8006fa4:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <__sinit+0x28>)
 8006fa6:	6223      	str	r3, [r4, #32]
 8006fa8:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <__sinit+0x2c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1f5      	bne.n	8006f9c <__sinit+0xc>
 8006fb0:	f7ff ffc4 	bl	8006f3c <global_stdio_init.part.0>
 8006fb4:	e7f2      	b.n	8006f9c <__sinit+0xc>
 8006fb6:	bf00      	nop
 8006fb8:	08006efd 	.word	0x08006efd
 8006fbc:	20000b44 	.word	0x20000b44

08006fc0 <_fwalk_sglue>:
 8006fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc4:	4607      	mov	r7, r0
 8006fc6:	4688      	mov	r8, r1
 8006fc8:	4614      	mov	r4, r2
 8006fca:	2600      	movs	r6, #0
 8006fcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fd0:	f1b9 0901 	subs.w	r9, r9, #1
 8006fd4:	d505      	bpl.n	8006fe2 <_fwalk_sglue+0x22>
 8006fd6:	6824      	ldr	r4, [r4, #0]
 8006fd8:	2c00      	cmp	r4, #0
 8006fda:	d1f7      	bne.n	8006fcc <_fwalk_sglue+0xc>
 8006fdc:	4630      	mov	r0, r6
 8006fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fe2:	89ab      	ldrh	r3, [r5, #12]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d907      	bls.n	8006ff8 <_fwalk_sglue+0x38>
 8006fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fec:	3301      	adds	r3, #1
 8006fee:	d003      	beq.n	8006ff8 <_fwalk_sglue+0x38>
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	47c0      	blx	r8
 8006ff6:	4306      	orrs	r6, r0
 8006ff8:	3568      	adds	r5, #104	; 0x68
 8006ffa:	e7e9      	b.n	8006fd0 <_fwalk_sglue+0x10>

08006ffc <_puts_r>:
 8006ffc:	6a03      	ldr	r3, [r0, #32]
 8006ffe:	b570      	push	{r4, r5, r6, lr}
 8007000:	6884      	ldr	r4, [r0, #8]
 8007002:	4605      	mov	r5, r0
 8007004:	460e      	mov	r6, r1
 8007006:	b90b      	cbnz	r3, 800700c <_puts_r+0x10>
 8007008:	f7ff ffc2 	bl	8006f90 <__sinit>
 800700c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800700e:	07db      	lsls	r3, r3, #31
 8007010:	d405      	bmi.n	800701e <_puts_r+0x22>
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	0598      	lsls	r0, r3, #22
 8007016:	d402      	bmi.n	800701e <_puts_r+0x22>
 8007018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800701a:	f000 f9ac 	bl	8007376 <__retarget_lock_acquire_recursive>
 800701e:	89a3      	ldrh	r3, [r4, #12]
 8007020:	0719      	lsls	r1, r3, #28
 8007022:	d513      	bpl.n	800704c <_puts_r+0x50>
 8007024:	6923      	ldr	r3, [r4, #16]
 8007026:	b18b      	cbz	r3, 800704c <_puts_r+0x50>
 8007028:	3e01      	subs	r6, #1
 800702a:	68a3      	ldr	r3, [r4, #8]
 800702c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007030:	3b01      	subs	r3, #1
 8007032:	60a3      	str	r3, [r4, #8]
 8007034:	b9e9      	cbnz	r1, 8007072 <_puts_r+0x76>
 8007036:	2b00      	cmp	r3, #0
 8007038:	da2e      	bge.n	8007098 <_puts_r+0x9c>
 800703a:	4622      	mov	r2, r4
 800703c:	210a      	movs	r1, #10
 800703e:	4628      	mov	r0, r5
 8007040:	f000 f87b 	bl	800713a <__swbuf_r>
 8007044:	3001      	adds	r0, #1
 8007046:	d007      	beq.n	8007058 <_puts_r+0x5c>
 8007048:	250a      	movs	r5, #10
 800704a:	e007      	b.n	800705c <_puts_r+0x60>
 800704c:	4621      	mov	r1, r4
 800704e:	4628      	mov	r0, r5
 8007050:	f000 f8b0 	bl	80071b4 <__swsetup_r>
 8007054:	2800      	cmp	r0, #0
 8007056:	d0e7      	beq.n	8007028 <_puts_r+0x2c>
 8007058:	f04f 35ff 	mov.w	r5, #4294967295
 800705c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800705e:	07da      	lsls	r2, r3, #31
 8007060:	d405      	bmi.n	800706e <_puts_r+0x72>
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	059b      	lsls	r3, r3, #22
 8007066:	d402      	bmi.n	800706e <_puts_r+0x72>
 8007068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800706a:	f000 f985 	bl	8007378 <__retarget_lock_release_recursive>
 800706e:	4628      	mov	r0, r5
 8007070:	bd70      	pop	{r4, r5, r6, pc}
 8007072:	2b00      	cmp	r3, #0
 8007074:	da04      	bge.n	8007080 <_puts_r+0x84>
 8007076:	69a2      	ldr	r2, [r4, #24]
 8007078:	429a      	cmp	r2, r3
 800707a:	dc06      	bgt.n	800708a <_puts_r+0x8e>
 800707c:	290a      	cmp	r1, #10
 800707e:	d004      	beq.n	800708a <_puts_r+0x8e>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	6022      	str	r2, [r4, #0]
 8007086:	7019      	strb	r1, [r3, #0]
 8007088:	e7cf      	b.n	800702a <_puts_r+0x2e>
 800708a:	4622      	mov	r2, r4
 800708c:	4628      	mov	r0, r5
 800708e:	f000 f854 	bl	800713a <__swbuf_r>
 8007092:	3001      	adds	r0, #1
 8007094:	d1c9      	bne.n	800702a <_puts_r+0x2e>
 8007096:	e7df      	b.n	8007058 <_puts_r+0x5c>
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	250a      	movs	r5, #10
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	6022      	str	r2, [r4, #0]
 80070a0:	701d      	strb	r5, [r3, #0]
 80070a2:	e7db      	b.n	800705c <_puts_r+0x60>

080070a4 <puts>:
 80070a4:	4b02      	ldr	r3, [pc, #8]	; (80070b0 <puts+0xc>)
 80070a6:	4601      	mov	r1, r0
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	f7ff bfa7 	b.w	8006ffc <_puts_r>
 80070ae:	bf00      	nop
 80070b0:	20000064 	.word	0x20000064

080070b4 <__sread>:
 80070b4:	b510      	push	{r4, lr}
 80070b6:	460c      	mov	r4, r1
 80070b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070bc:	f000 f8fc 	bl	80072b8 <_read_r>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	bfab      	itete	ge
 80070c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070c6:	89a3      	ldrhlt	r3, [r4, #12]
 80070c8:	181b      	addge	r3, r3, r0
 80070ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070ce:	bfac      	ite	ge
 80070d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80070d2:	81a3      	strhlt	r3, [r4, #12]
 80070d4:	bd10      	pop	{r4, pc}

080070d6 <__swrite>:
 80070d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070da:	461f      	mov	r7, r3
 80070dc:	898b      	ldrh	r3, [r1, #12]
 80070de:	05db      	lsls	r3, r3, #23
 80070e0:	4605      	mov	r5, r0
 80070e2:	460c      	mov	r4, r1
 80070e4:	4616      	mov	r6, r2
 80070e6:	d505      	bpl.n	80070f4 <__swrite+0x1e>
 80070e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ec:	2302      	movs	r3, #2
 80070ee:	2200      	movs	r2, #0
 80070f0:	f000 f8d0 	bl	8007294 <_lseek_r>
 80070f4:	89a3      	ldrh	r3, [r4, #12]
 80070f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070fe:	81a3      	strh	r3, [r4, #12]
 8007100:	4632      	mov	r2, r6
 8007102:	463b      	mov	r3, r7
 8007104:	4628      	mov	r0, r5
 8007106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800710a:	f000 b8f7 	b.w	80072fc <_write_r>

0800710e <__sseek>:
 800710e:	b510      	push	{r4, lr}
 8007110:	460c      	mov	r4, r1
 8007112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007116:	f000 f8bd 	bl	8007294 <_lseek_r>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	89a3      	ldrh	r3, [r4, #12]
 800711e:	bf15      	itete	ne
 8007120:	6560      	strne	r0, [r4, #84]	; 0x54
 8007122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800712a:	81a3      	strheq	r3, [r4, #12]
 800712c:	bf18      	it	ne
 800712e:	81a3      	strhne	r3, [r4, #12]
 8007130:	bd10      	pop	{r4, pc}

08007132 <__sclose>:
 8007132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007136:	f000 b89d 	b.w	8007274 <_close_r>

0800713a <__swbuf_r>:
 800713a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713c:	460e      	mov	r6, r1
 800713e:	4614      	mov	r4, r2
 8007140:	4605      	mov	r5, r0
 8007142:	b118      	cbz	r0, 800714c <__swbuf_r+0x12>
 8007144:	6a03      	ldr	r3, [r0, #32]
 8007146:	b90b      	cbnz	r3, 800714c <__swbuf_r+0x12>
 8007148:	f7ff ff22 	bl	8006f90 <__sinit>
 800714c:	69a3      	ldr	r3, [r4, #24]
 800714e:	60a3      	str	r3, [r4, #8]
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	071a      	lsls	r2, r3, #28
 8007154:	d525      	bpl.n	80071a2 <__swbuf_r+0x68>
 8007156:	6923      	ldr	r3, [r4, #16]
 8007158:	b31b      	cbz	r3, 80071a2 <__swbuf_r+0x68>
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	6922      	ldr	r2, [r4, #16]
 800715e:	1a98      	subs	r0, r3, r2
 8007160:	6963      	ldr	r3, [r4, #20]
 8007162:	b2f6      	uxtb	r6, r6
 8007164:	4283      	cmp	r3, r0
 8007166:	4637      	mov	r7, r6
 8007168:	dc04      	bgt.n	8007174 <__swbuf_r+0x3a>
 800716a:	4621      	mov	r1, r4
 800716c:	4628      	mov	r0, r5
 800716e:	f000 f9d7 	bl	8007520 <_fflush_r>
 8007172:	b9e0      	cbnz	r0, 80071ae <__swbuf_r+0x74>
 8007174:	68a3      	ldr	r3, [r4, #8]
 8007176:	3b01      	subs	r3, #1
 8007178:	60a3      	str	r3, [r4, #8]
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	6022      	str	r2, [r4, #0]
 8007180:	701e      	strb	r6, [r3, #0]
 8007182:	6962      	ldr	r2, [r4, #20]
 8007184:	1c43      	adds	r3, r0, #1
 8007186:	429a      	cmp	r2, r3
 8007188:	d004      	beq.n	8007194 <__swbuf_r+0x5a>
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	07db      	lsls	r3, r3, #31
 800718e:	d506      	bpl.n	800719e <__swbuf_r+0x64>
 8007190:	2e0a      	cmp	r6, #10
 8007192:	d104      	bne.n	800719e <__swbuf_r+0x64>
 8007194:	4621      	mov	r1, r4
 8007196:	4628      	mov	r0, r5
 8007198:	f000 f9c2 	bl	8007520 <_fflush_r>
 800719c:	b938      	cbnz	r0, 80071ae <__swbuf_r+0x74>
 800719e:	4638      	mov	r0, r7
 80071a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a2:	4621      	mov	r1, r4
 80071a4:	4628      	mov	r0, r5
 80071a6:	f000 f805 	bl	80071b4 <__swsetup_r>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d0d5      	beq.n	800715a <__swbuf_r+0x20>
 80071ae:	f04f 37ff 	mov.w	r7, #4294967295
 80071b2:	e7f4      	b.n	800719e <__swbuf_r+0x64>

080071b4 <__swsetup_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4b2a      	ldr	r3, [pc, #168]	; (8007260 <__swsetup_r+0xac>)
 80071b8:	4605      	mov	r5, r0
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	460c      	mov	r4, r1
 80071be:	b118      	cbz	r0, 80071c8 <__swsetup_r+0x14>
 80071c0:	6a03      	ldr	r3, [r0, #32]
 80071c2:	b90b      	cbnz	r3, 80071c8 <__swsetup_r+0x14>
 80071c4:	f7ff fee4 	bl	8006f90 <__sinit>
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071ce:	0718      	lsls	r0, r3, #28
 80071d0:	d422      	bmi.n	8007218 <__swsetup_r+0x64>
 80071d2:	06d9      	lsls	r1, r3, #27
 80071d4:	d407      	bmi.n	80071e6 <__swsetup_r+0x32>
 80071d6:	2309      	movs	r3, #9
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071de:	81a3      	strh	r3, [r4, #12]
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
 80071e4:	e034      	b.n	8007250 <__swsetup_r+0x9c>
 80071e6:	0758      	lsls	r0, r3, #29
 80071e8:	d512      	bpl.n	8007210 <__swsetup_r+0x5c>
 80071ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071ec:	b141      	cbz	r1, 8007200 <__swsetup_r+0x4c>
 80071ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071f2:	4299      	cmp	r1, r3
 80071f4:	d002      	beq.n	80071fc <__swsetup_r+0x48>
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 f8c0 	bl	800737c <_free_r>
 80071fc:	2300      	movs	r3, #0
 80071fe:	6363      	str	r3, [r4, #52]	; 0x34
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007206:	81a3      	strh	r3, [r4, #12]
 8007208:	2300      	movs	r3, #0
 800720a:	6063      	str	r3, [r4, #4]
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	6023      	str	r3, [r4, #0]
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	f043 0308 	orr.w	r3, r3, #8
 8007216:	81a3      	strh	r3, [r4, #12]
 8007218:	6923      	ldr	r3, [r4, #16]
 800721a:	b94b      	cbnz	r3, 8007230 <__swsetup_r+0x7c>
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007226:	d003      	beq.n	8007230 <__swsetup_r+0x7c>
 8007228:	4621      	mov	r1, r4
 800722a:	4628      	mov	r0, r5
 800722c:	f000 f9c6 	bl	80075bc <__smakebuf_r>
 8007230:	89a0      	ldrh	r0, [r4, #12]
 8007232:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007236:	f010 0301 	ands.w	r3, r0, #1
 800723a:	d00a      	beq.n	8007252 <__swsetup_r+0x9e>
 800723c:	2300      	movs	r3, #0
 800723e:	60a3      	str	r3, [r4, #8]
 8007240:	6963      	ldr	r3, [r4, #20]
 8007242:	425b      	negs	r3, r3
 8007244:	61a3      	str	r3, [r4, #24]
 8007246:	6923      	ldr	r3, [r4, #16]
 8007248:	b943      	cbnz	r3, 800725c <__swsetup_r+0xa8>
 800724a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800724e:	d1c4      	bne.n	80071da <__swsetup_r+0x26>
 8007250:	bd38      	pop	{r3, r4, r5, pc}
 8007252:	0781      	lsls	r1, r0, #30
 8007254:	bf58      	it	pl
 8007256:	6963      	ldrpl	r3, [r4, #20]
 8007258:	60a3      	str	r3, [r4, #8]
 800725a:	e7f4      	b.n	8007246 <__swsetup_r+0x92>
 800725c:	2000      	movs	r0, #0
 800725e:	e7f7      	b.n	8007250 <__swsetup_r+0x9c>
 8007260:	20000064 	.word	0x20000064

08007264 <memset>:
 8007264:	4402      	add	r2, r0
 8007266:	4603      	mov	r3, r0
 8007268:	4293      	cmp	r3, r2
 800726a:	d100      	bne.n	800726e <memset+0xa>
 800726c:	4770      	bx	lr
 800726e:	f803 1b01 	strb.w	r1, [r3], #1
 8007272:	e7f9      	b.n	8007268 <memset+0x4>

08007274 <_close_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4d06      	ldr	r5, [pc, #24]	; (8007290 <_close_r+0x1c>)
 8007278:	2300      	movs	r3, #0
 800727a:	4604      	mov	r4, r0
 800727c:	4608      	mov	r0, r1
 800727e:	602b      	str	r3, [r5, #0]
 8007280:	f7fa fcf1 	bl	8001c66 <_close>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d102      	bne.n	800728e <_close_r+0x1a>
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	b103      	cbz	r3, 800728e <_close_r+0x1a>
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	20000b48 	.word	0x20000b48

08007294 <_lseek_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d07      	ldr	r5, [pc, #28]	; (80072b4 <_lseek_r+0x20>)
 8007298:	4604      	mov	r4, r0
 800729a:	4608      	mov	r0, r1
 800729c:	4611      	mov	r1, r2
 800729e:	2200      	movs	r2, #0
 80072a0:	602a      	str	r2, [r5, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	f7fa fd06 	bl	8001cb4 <_lseek>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_lseek_r+0x1e>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_lseek_r+0x1e>
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	20000b48 	.word	0x20000b48

080072b8 <_read_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4d07      	ldr	r5, [pc, #28]	; (80072d8 <_read_r+0x20>)
 80072bc:	4604      	mov	r4, r0
 80072be:	4608      	mov	r0, r1
 80072c0:	4611      	mov	r1, r2
 80072c2:	2200      	movs	r2, #0
 80072c4:	602a      	str	r2, [r5, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	f7fa fc94 	bl	8001bf4 <_read>
 80072cc:	1c43      	adds	r3, r0, #1
 80072ce:	d102      	bne.n	80072d6 <_read_r+0x1e>
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	b103      	cbz	r3, 80072d6 <_read_r+0x1e>
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	bd38      	pop	{r3, r4, r5, pc}
 80072d8:	20000b48 	.word	0x20000b48

080072dc <_sbrk_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4d06      	ldr	r5, [pc, #24]	; (80072f8 <_sbrk_r+0x1c>)
 80072e0:	2300      	movs	r3, #0
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	602b      	str	r3, [r5, #0]
 80072e8:	f7fa fcf2 	bl	8001cd0 <_sbrk>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_sbrk_r+0x1a>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_sbrk_r+0x1a>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	20000b48 	.word	0x20000b48

080072fc <_write_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	4d07      	ldr	r5, [pc, #28]	; (800731c <_write_r+0x20>)
 8007300:	4604      	mov	r4, r0
 8007302:	4608      	mov	r0, r1
 8007304:	4611      	mov	r1, r2
 8007306:	2200      	movs	r2, #0
 8007308:	602a      	str	r2, [r5, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	f7fa fc8f 	bl	8001c2e <_write>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	d102      	bne.n	800731a <_write_r+0x1e>
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	b103      	cbz	r3, 800731a <_write_r+0x1e>
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	20000b48 	.word	0x20000b48

08007320 <__errno>:
 8007320:	4b01      	ldr	r3, [pc, #4]	; (8007328 <__errno+0x8>)
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	20000064 	.word	0x20000064

0800732c <__libc_init_array>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	4d0d      	ldr	r5, [pc, #52]	; (8007364 <__libc_init_array+0x38>)
 8007330:	4c0d      	ldr	r4, [pc, #52]	; (8007368 <__libc_init_array+0x3c>)
 8007332:	1b64      	subs	r4, r4, r5
 8007334:	10a4      	asrs	r4, r4, #2
 8007336:	2600      	movs	r6, #0
 8007338:	42a6      	cmp	r6, r4
 800733a:	d109      	bne.n	8007350 <__libc_init_array+0x24>
 800733c:	4d0b      	ldr	r5, [pc, #44]	; (800736c <__libc_init_array+0x40>)
 800733e:	4c0c      	ldr	r4, [pc, #48]	; (8007370 <__libc_init_array+0x44>)
 8007340:	f000 f99a 	bl	8007678 <_init>
 8007344:	1b64      	subs	r4, r4, r5
 8007346:	10a4      	asrs	r4, r4, #2
 8007348:	2600      	movs	r6, #0
 800734a:	42a6      	cmp	r6, r4
 800734c:	d105      	bne.n	800735a <__libc_init_array+0x2e>
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	f855 3b04 	ldr.w	r3, [r5], #4
 8007354:	4798      	blx	r3
 8007356:	3601      	adds	r6, #1
 8007358:	e7ee      	b.n	8007338 <__libc_init_array+0xc>
 800735a:	f855 3b04 	ldr.w	r3, [r5], #4
 800735e:	4798      	blx	r3
 8007360:	3601      	adds	r6, #1
 8007362:	e7f2      	b.n	800734a <__libc_init_array+0x1e>
 8007364:	08007858 	.word	0x08007858
 8007368:	08007858 	.word	0x08007858
 800736c:	08007858 	.word	0x08007858
 8007370:	0800785c 	.word	0x0800785c

08007374 <__retarget_lock_init_recursive>:
 8007374:	4770      	bx	lr

08007376 <__retarget_lock_acquire_recursive>:
 8007376:	4770      	bx	lr

08007378 <__retarget_lock_release_recursive>:
 8007378:	4770      	bx	lr
	...

0800737c <_free_r>:
 800737c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800737e:	2900      	cmp	r1, #0
 8007380:	d044      	beq.n	800740c <_free_r+0x90>
 8007382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007386:	9001      	str	r0, [sp, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	f1a1 0404 	sub.w	r4, r1, #4
 800738e:	bfb8      	it	lt
 8007390:	18e4      	addlt	r4, r4, r3
 8007392:	f7ff fcd9 	bl	8006d48 <__malloc_lock>
 8007396:	4a1e      	ldr	r2, [pc, #120]	; (8007410 <_free_r+0x94>)
 8007398:	9801      	ldr	r0, [sp, #4]
 800739a:	6813      	ldr	r3, [r2, #0]
 800739c:	b933      	cbnz	r3, 80073ac <_free_r+0x30>
 800739e:	6063      	str	r3, [r4, #4]
 80073a0:	6014      	str	r4, [r2, #0]
 80073a2:	b003      	add	sp, #12
 80073a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073a8:	f7ff bcd4 	b.w	8006d54 <__malloc_unlock>
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	d908      	bls.n	80073c2 <_free_r+0x46>
 80073b0:	6825      	ldr	r5, [r4, #0]
 80073b2:	1961      	adds	r1, r4, r5
 80073b4:	428b      	cmp	r3, r1
 80073b6:	bf01      	itttt	eq
 80073b8:	6819      	ldreq	r1, [r3, #0]
 80073ba:	685b      	ldreq	r3, [r3, #4]
 80073bc:	1949      	addeq	r1, r1, r5
 80073be:	6021      	streq	r1, [r4, #0]
 80073c0:	e7ed      	b.n	800739e <_free_r+0x22>
 80073c2:	461a      	mov	r2, r3
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	b10b      	cbz	r3, 80073cc <_free_r+0x50>
 80073c8:	42a3      	cmp	r3, r4
 80073ca:	d9fa      	bls.n	80073c2 <_free_r+0x46>
 80073cc:	6811      	ldr	r1, [r2, #0]
 80073ce:	1855      	adds	r5, r2, r1
 80073d0:	42a5      	cmp	r5, r4
 80073d2:	d10b      	bne.n	80073ec <_free_r+0x70>
 80073d4:	6824      	ldr	r4, [r4, #0]
 80073d6:	4421      	add	r1, r4
 80073d8:	1854      	adds	r4, r2, r1
 80073da:	42a3      	cmp	r3, r4
 80073dc:	6011      	str	r1, [r2, #0]
 80073de:	d1e0      	bne.n	80073a2 <_free_r+0x26>
 80073e0:	681c      	ldr	r4, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	6053      	str	r3, [r2, #4]
 80073e6:	440c      	add	r4, r1
 80073e8:	6014      	str	r4, [r2, #0]
 80073ea:	e7da      	b.n	80073a2 <_free_r+0x26>
 80073ec:	d902      	bls.n	80073f4 <_free_r+0x78>
 80073ee:	230c      	movs	r3, #12
 80073f0:	6003      	str	r3, [r0, #0]
 80073f2:	e7d6      	b.n	80073a2 <_free_r+0x26>
 80073f4:	6825      	ldr	r5, [r4, #0]
 80073f6:	1961      	adds	r1, r4, r5
 80073f8:	428b      	cmp	r3, r1
 80073fa:	bf04      	itt	eq
 80073fc:	6819      	ldreq	r1, [r3, #0]
 80073fe:	685b      	ldreq	r3, [r3, #4]
 8007400:	6063      	str	r3, [r4, #4]
 8007402:	bf04      	itt	eq
 8007404:	1949      	addeq	r1, r1, r5
 8007406:	6021      	streq	r1, [r4, #0]
 8007408:	6054      	str	r4, [r2, #4]
 800740a:	e7ca      	b.n	80073a2 <_free_r+0x26>
 800740c:	b003      	add	sp, #12
 800740e:	bd30      	pop	{r4, r5, pc}
 8007410:	20000a04 	.word	0x20000a04

08007414 <__sflush_r>:
 8007414:	898a      	ldrh	r2, [r1, #12]
 8007416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800741a:	4605      	mov	r5, r0
 800741c:	0710      	lsls	r0, r2, #28
 800741e:	460c      	mov	r4, r1
 8007420:	d458      	bmi.n	80074d4 <__sflush_r+0xc0>
 8007422:	684b      	ldr	r3, [r1, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	dc05      	bgt.n	8007434 <__sflush_r+0x20>
 8007428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800742a:	2b00      	cmp	r3, #0
 800742c:	dc02      	bgt.n	8007434 <__sflush_r+0x20>
 800742e:	2000      	movs	r0, #0
 8007430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007436:	2e00      	cmp	r6, #0
 8007438:	d0f9      	beq.n	800742e <__sflush_r+0x1a>
 800743a:	2300      	movs	r3, #0
 800743c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007440:	682f      	ldr	r7, [r5, #0]
 8007442:	6a21      	ldr	r1, [r4, #32]
 8007444:	602b      	str	r3, [r5, #0]
 8007446:	d032      	beq.n	80074ae <__sflush_r+0x9a>
 8007448:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	075a      	lsls	r2, r3, #29
 800744e:	d505      	bpl.n	800745c <__sflush_r+0x48>
 8007450:	6863      	ldr	r3, [r4, #4]
 8007452:	1ac0      	subs	r0, r0, r3
 8007454:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007456:	b10b      	cbz	r3, 800745c <__sflush_r+0x48>
 8007458:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800745a:	1ac0      	subs	r0, r0, r3
 800745c:	2300      	movs	r3, #0
 800745e:	4602      	mov	r2, r0
 8007460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007462:	6a21      	ldr	r1, [r4, #32]
 8007464:	4628      	mov	r0, r5
 8007466:	47b0      	blx	r6
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	d106      	bne.n	800747c <__sflush_r+0x68>
 800746e:	6829      	ldr	r1, [r5, #0]
 8007470:	291d      	cmp	r1, #29
 8007472:	d82b      	bhi.n	80074cc <__sflush_r+0xb8>
 8007474:	4a29      	ldr	r2, [pc, #164]	; (800751c <__sflush_r+0x108>)
 8007476:	410a      	asrs	r2, r1
 8007478:	07d6      	lsls	r6, r2, #31
 800747a:	d427      	bmi.n	80074cc <__sflush_r+0xb8>
 800747c:	2200      	movs	r2, #0
 800747e:	6062      	str	r2, [r4, #4]
 8007480:	04d9      	lsls	r1, r3, #19
 8007482:	6922      	ldr	r2, [r4, #16]
 8007484:	6022      	str	r2, [r4, #0]
 8007486:	d504      	bpl.n	8007492 <__sflush_r+0x7e>
 8007488:	1c42      	adds	r2, r0, #1
 800748a:	d101      	bne.n	8007490 <__sflush_r+0x7c>
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	b903      	cbnz	r3, 8007492 <__sflush_r+0x7e>
 8007490:	6560      	str	r0, [r4, #84]	; 0x54
 8007492:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007494:	602f      	str	r7, [r5, #0]
 8007496:	2900      	cmp	r1, #0
 8007498:	d0c9      	beq.n	800742e <__sflush_r+0x1a>
 800749a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800749e:	4299      	cmp	r1, r3
 80074a0:	d002      	beq.n	80074a8 <__sflush_r+0x94>
 80074a2:	4628      	mov	r0, r5
 80074a4:	f7ff ff6a 	bl	800737c <_free_r>
 80074a8:	2000      	movs	r0, #0
 80074aa:	6360      	str	r0, [r4, #52]	; 0x34
 80074ac:	e7c0      	b.n	8007430 <__sflush_r+0x1c>
 80074ae:	2301      	movs	r3, #1
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b0      	blx	r6
 80074b4:	1c41      	adds	r1, r0, #1
 80074b6:	d1c8      	bne.n	800744a <__sflush_r+0x36>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0c5      	beq.n	800744a <__sflush_r+0x36>
 80074be:	2b1d      	cmp	r3, #29
 80074c0:	d001      	beq.n	80074c6 <__sflush_r+0xb2>
 80074c2:	2b16      	cmp	r3, #22
 80074c4:	d101      	bne.n	80074ca <__sflush_r+0xb6>
 80074c6:	602f      	str	r7, [r5, #0]
 80074c8:	e7b1      	b.n	800742e <__sflush_r+0x1a>
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d0:	81a3      	strh	r3, [r4, #12]
 80074d2:	e7ad      	b.n	8007430 <__sflush_r+0x1c>
 80074d4:	690f      	ldr	r7, [r1, #16]
 80074d6:	2f00      	cmp	r7, #0
 80074d8:	d0a9      	beq.n	800742e <__sflush_r+0x1a>
 80074da:	0793      	lsls	r3, r2, #30
 80074dc:	680e      	ldr	r6, [r1, #0]
 80074de:	bf08      	it	eq
 80074e0:	694b      	ldreq	r3, [r1, #20]
 80074e2:	600f      	str	r7, [r1, #0]
 80074e4:	bf18      	it	ne
 80074e6:	2300      	movne	r3, #0
 80074e8:	eba6 0807 	sub.w	r8, r6, r7
 80074ec:	608b      	str	r3, [r1, #8]
 80074ee:	f1b8 0f00 	cmp.w	r8, #0
 80074f2:	dd9c      	ble.n	800742e <__sflush_r+0x1a>
 80074f4:	6a21      	ldr	r1, [r4, #32]
 80074f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074f8:	4643      	mov	r3, r8
 80074fa:	463a      	mov	r2, r7
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b0      	blx	r6
 8007500:	2800      	cmp	r0, #0
 8007502:	dc06      	bgt.n	8007512 <__sflush_r+0xfe>
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800750a:	81a3      	strh	r3, [r4, #12]
 800750c:	f04f 30ff 	mov.w	r0, #4294967295
 8007510:	e78e      	b.n	8007430 <__sflush_r+0x1c>
 8007512:	4407      	add	r7, r0
 8007514:	eba8 0800 	sub.w	r8, r8, r0
 8007518:	e7e9      	b.n	80074ee <__sflush_r+0xda>
 800751a:	bf00      	nop
 800751c:	dfbffffe 	.word	0xdfbffffe

08007520 <_fflush_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	690b      	ldr	r3, [r1, #16]
 8007524:	4605      	mov	r5, r0
 8007526:	460c      	mov	r4, r1
 8007528:	b913      	cbnz	r3, 8007530 <_fflush_r+0x10>
 800752a:	2500      	movs	r5, #0
 800752c:	4628      	mov	r0, r5
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	b118      	cbz	r0, 800753a <_fflush_r+0x1a>
 8007532:	6a03      	ldr	r3, [r0, #32]
 8007534:	b90b      	cbnz	r3, 800753a <_fflush_r+0x1a>
 8007536:	f7ff fd2b 	bl	8006f90 <__sinit>
 800753a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0f3      	beq.n	800752a <_fflush_r+0xa>
 8007542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007544:	07d0      	lsls	r0, r2, #31
 8007546:	d404      	bmi.n	8007552 <_fflush_r+0x32>
 8007548:	0599      	lsls	r1, r3, #22
 800754a:	d402      	bmi.n	8007552 <_fflush_r+0x32>
 800754c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800754e:	f7ff ff12 	bl	8007376 <__retarget_lock_acquire_recursive>
 8007552:	4628      	mov	r0, r5
 8007554:	4621      	mov	r1, r4
 8007556:	f7ff ff5d 	bl	8007414 <__sflush_r>
 800755a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800755c:	07da      	lsls	r2, r3, #31
 800755e:	4605      	mov	r5, r0
 8007560:	d4e4      	bmi.n	800752c <_fflush_r+0xc>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	059b      	lsls	r3, r3, #22
 8007566:	d4e1      	bmi.n	800752c <_fflush_r+0xc>
 8007568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800756a:	f7ff ff05 	bl	8007378 <__retarget_lock_release_recursive>
 800756e:	e7dd      	b.n	800752c <_fflush_r+0xc>

08007570 <__swhatbuf_r>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	460c      	mov	r4, r1
 8007574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007578:	2900      	cmp	r1, #0
 800757a:	b096      	sub	sp, #88	; 0x58
 800757c:	4615      	mov	r5, r2
 800757e:	461e      	mov	r6, r3
 8007580:	da0d      	bge.n	800759e <__swhatbuf_r+0x2e>
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007588:	f04f 0100 	mov.w	r1, #0
 800758c:	bf0c      	ite	eq
 800758e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007592:	2340      	movne	r3, #64	; 0x40
 8007594:	2000      	movs	r0, #0
 8007596:	6031      	str	r1, [r6, #0]
 8007598:	602b      	str	r3, [r5, #0]
 800759a:	b016      	add	sp, #88	; 0x58
 800759c:	bd70      	pop	{r4, r5, r6, pc}
 800759e:	466a      	mov	r2, sp
 80075a0:	f000 f848 	bl	8007634 <_fstat_r>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	dbec      	blt.n	8007582 <__swhatbuf_r+0x12>
 80075a8:	9901      	ldr	r1, [sp, #4]
 80075aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80075ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80075b2:	4259      	negs	r1, r3
 80075b4:	4159      	adcs	r1, r3
 80075b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ba:	e7eb      	b.n	8007594 <__swhatbuf_r+0x24>

080075bc <__smakebuf_r>:
 80075bc:	898b      	ldrh	r3, [r1, #12]
 80075be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075c0:	079d      	lsls	r5, r3, #30
 80075c2:	4606      	mov	r6, r0
 80075c4:	460c      	mov	r4, r1
 80075c6:	d507      	bpl.n	80075d8 <__smakebuf_r+0x1c>
 80075c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	6123      	str	r3, [r4, #16]
 80075d0:	2301      	movs	r3, #1
 80075d2:	6163      	str	r3, [r4, #20]
 80075d4:	b002      	add	sp, #8
 80075d6:	bd70      	pop	{r4, r5, r6, pc}
 80075d8:	ab01      	add	r3, sp, #4
 80075da:	466a      	mov	r2, sp
 80075dc:	f7ff ffc8 	bl	8007570 <__swhatbuf_r>
 80075e0:	9900      	ldr	r1, [sp, #0]
 80075e2:	4605      	mov	r5, r0
 80075e4:	4630      	mov	r0, r6
 80075e6:	f7ff fb2f 	bl	8006c48 <_malloc_r>
 80075ea:	b948      	cbnz	r0, 8007600 <__smakebuf_r+0x44>
 80075ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075f0:	059a      	lsls	r2, r3, #22
 80075f2:	d4ef      	bmi.n	80075d4 <__smakebuf_r+0x18>
 80075f4:	f023 0303 	bic.w	r3, r3, #3
 80075f8:	f043 0302 	orr.w	r3, r3, #2
 80075fc:	81a3      	strh	r3, [r4, #12]
 80075fe:	e7e3      	b.n	80075c8 <__smakebuf_r+0xc>
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	6020      	str	r0, [r4, #0]
 8007604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007608:	81a3      	strh	r3, [r4, #12]
 800760a:	9b00      	ldr	r3, [sp, #0]
 800760c:	6163      	str	r3, [r4, #20]
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	6120      	str	r0, [r4, #16]
 8007612:	b15b      	cbz	r3, 800762c <__smakebuf_r+0x70>
 8007614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007618:	4630      	mov	r0, r6
 800761a:	f000 f81d 	bl	8007658 <_isatty_r>
 800761e:	b128      	cbz	r0, 800762c <__smakebuf_r+0x70>
 8007620:	89a3      	ldrh	r3, [r4, #12]
 8007622:	f023 0303 	bic.w	r3, r3, #3
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	81a3      	strh	r3, [r4, #12]
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	431d      	orrs	r5, r3
 8007630:	81a5      	strh	r5, [r4, #12]
 8007632:	e7cf      	b.n	80075d4 <__smakebuf_r+0x18>

08007634 <_fstat_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4d07      	ldr	r5, [pc, #28]	; (8007654 <_fstat_r+0x20>)
 8007638:	2300      	movs	r3, #0
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	4611      	mov	r1, r2
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	f7fa fb1c 	bl	8001c7e <_fstat>
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	d102      	bne.n	8007650 <_fstat_r+0x1c>
 800764a:	682b      	ldr	r3, [r5, #0]
 800764c:	b103      	cbz	r3, 8007650 <_fstat_r+0x1c>
 800764e:	6023      	str	r3, [r4, #0]
 8007650:	bd38      	pop	{r3, r4, r5, pc}
 8007652:	bf00      	nop
 8007654:	20000b48 	.word	0x20000b48

08007658 <_isatty_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d06      	ldr	r5, [pc, #24]	; (8007674 <_isatty_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	f7fa fb1b 	bl	8001c9e <_isatty>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_isatty_r+0x1a>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_isatty_r+0x1a>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	20000b48 	.word	0x20000b48

08007678 <_init>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr

08007684 <_fini>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	bf00      	nop
 8007688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768a:	bc08      	pop	{r3}
 800768c:	469e      	mov	lr, r3
 800768e:	4770      	bx	lr
