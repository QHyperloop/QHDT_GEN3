
QUCONTROL_FOLLOWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08008dd0  08008dd0  00018dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f90  08008f90  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008f90  08008f90  00018f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f98  08008f98  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f98  08008f98  00018f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f9c  08008f9c  00018f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc8  20000060  08009000  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d28  08009000  00020d28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025dd3  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044ea  00000000  00000000  00045ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fc0  00000000  00000000  0004a390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018c3  00000000  00000000  0004c350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005735  00000000  00000000  0004dc13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000283c7  00000000  00000000  00053348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00122218  00000000  00000000  0007b70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008b68  00000000  00000000  0019d928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a6490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008db8 	.word	0x08008db8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	08008db8 	.word	0x08008db8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <IMD_Req_Isolation>:
		err = CAN3_MSG_ERR;
	}
	return err;
}

error_handler IMD_Req_Isolation(){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	error_handler err;
	err = CAN_OK;
 800051a:	2305      	movs	r3, #5
 800051c:	71fb      	strb	r3, [r7, #7]
	TxHeader_Pod.Identifier = IMD_ID;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <IMD_Req_Isolation+0x3c>)
 8000520:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <IMD_Req_Isolation+0x40>)
 8000522:	601a      	str	r2, [r3, #0]
	TxHeader_Pod.DataLength = FDCAN_DLC_BYTES_1;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <IMD_Req_Isolation+0x3c>)
 8000526:	2201      	movs	r2, #1
 8000528:	60da      	str	r2, [r3, #12]
	uint8_t temp_data[] = {0xE0};
 800052a:	23e0      	movs	r3, #224	; 0xe0
 800052c:	713b      	strb	r3, [r7, #4]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader_Pod, temp_data)!= HAL_OK){
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	461a      	mov	r2, r3
 8000532:	4907      	ldr	r1, [pc, #28]	; (8000550 <IMD_Req_Isolation+0x3c>)
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <IMD_Req_Isolation+0x44>)
 8000536:	f004 f80b 	bl	8004550 <HAL_FDCAN_AddMessageToTxFifoQ>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <IMD_Req_Isolation+0x30>
		err = CAN3_MSG_ERR;
 8000540:	2302      	movs	r3, #2
 8000542:	71fb      	strb	r3, [r7, #7]
	}
	return err;
 8000544:	79fb      	ldrb	r3, [r7, #7]

}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200000a0 	.word	0x200000a0
 8000554:	0a100101 	.word	0x0a100101
 8000558:	200003cc 	.word	0x200003cc

0800055c <Sensor_Data>:
	return err;


}

error_handler Sensor_Data(){
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
	error_handler err;
	err = CAN_OK;
 8000562:	2305      	movs	r3, #5
 8000564:	71fb      	strb	r3, [r7, #7]
	TxHeader_Master_Data.Identifier = 0x01000100 | FOLLOWER_ID;
 8000566:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <Sensor_Data+0xbc>)
 8000568:	4a2c      	ldr	r2, [pc, #176]	; (800061c <Sensor_Data+0xc0>)
 800056a:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.TxFrameType = FDCAN_DATA_FRAME;
 800056c:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <Sensor_Data+0xbc>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_16;
 8000572:	4b29      	ldr	r3, [pc, #164]	; (8000618 <Sensor_Data+0xbc>)
 8000574:	220a      	movs	r2, #10
 8000576:	60da      	str	r2, [r3, #12]
	uint8_t Temperature_Data[] = {};
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, Temperature_Data)!= HAL_OK){
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	461a      	mov	r2, r3
 800057c:	4926      	ldr	r1, [pc, #152]	; (8000618 <Sensor_Data+0xbc>)
 800057e:	4828      	ldr	r0, [pc, #160]	; (8000620 <Sensor_Data+0xc4>)
 8000580:	f003 ffe6 	bl	8004550 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <Sensor_Data+0x32>
		err = CAN1_MSG_ERR;
 800058a:	2304      	movs	r3, #4
 800058c:	71fb      	strb	r3, [r7, #7]
	}


	TxHeader_Master_Data.Identifier = 0x01000200 | FOLLOWER_ID;
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <Sensor_Data+0xbc>)
 8000590:	4a24      	ldr	r2, [pc, #144]	; (8000624 <Sensor_Data+0xc8>)
 8000592:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_16;
 8000594:	4b20      	ldr	r3, [pc, #128]	; (8000618 <Sensor_Data+0xbc>)
 8000596:	220a      	movs	r2, #10
 8000598:	60da      	str	r2, [r3, #12]
	uint8_t ESC_Data[] = {};
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, ESC_Data)!= HAL_OK){
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	461a      	mov	r2, r3
 800059e:	491e      	ldr	r1, [pc, #120]	; (8000618 <Sensor_Data+0xbc>)
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <Sensor_Data+0xc4>)
 80005a2:	f003 ffd5 	bl	8004550 <HAL_FDCAN_AddMessageToTxFifoQ>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <Sensor_Data+0x54>
		err = CAN2_MSG_ERR;
 80005ac:	2303      	movs	r3, #3
 80005ae:	71fb      	strb	r3, [r7, #7]
	}


	TxHeader_Master_Data.Identifier = 0x01000300 | FOLLOWER_ID;
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <Sensor_Data+0xbc>)
 80005b2:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <Sensor_Data+0xcc>)
 80005b4:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_2;
 80005b6:	4b18      	ldr	r3, [pc, #96]	; (8000618 <Sensor_Data+0xbc>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	60da      	str	r2, [r3, #12]
	uint8_t Relay_Data[] = {0x00,0x00};
 80005bc:	2300      	movs	r3, #0
 80005be:	803b      	strh	r3, [r7, #0]
	Relay_Data[0] = (RelayStates & 0xFF00) >> 8;
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <Sensor_Data+0xd0>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	0a1b      	lsrs	r3, r3, #8
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	703b      	strb	r3, [r7, #0]
	Relay_Data[1] = (RelayStates & 0x00FF);
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <Sensor_Data+0xd0>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	707b      	strb	r3, [r7, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, Relay_Data)!= HAL_OK){
 80005d4:	463b      	mov	r3, r7
 80005d6:	461a      	mov	r2, r3
 80005d8:	490f      	ldr	r1, [pc, #60]	; (8000618 <Sensor_Data+0xbc>)
 80005da:	4811      	ldr	r0, [pc, #68]	; (8000620 <Sensor_Data+0xc4>)
 80005dc:	f003 ffb8 	bl	8004550 <HAL_FDCAN_AddMessageToTxFifoQ>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <Sensor_Data+0x8e>
		err = CAN2_MSG_ERR;
 80005e6:	2303      	movs	r3, #3
 80005e8:	71fb      	strb	r3, [r7, #7]
	}


	TxHeader_Master_Data.Identifier = 0x01000400 | FOLLOWER_ID;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <Sensor_Data+0xbc>)
 80005ec:	4a10      	ldr	r2, [pc, #64]	; (8000630 <Sensor_Data+0xd4>)
 80005ee:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_16;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <Sensor_Data+0xbc>)
 80005f2:	220a      	movs	r2, #10
 80005f4:	60da      	str	r2, [r3, #12]
	uint8_t Batt_Data[] = {};
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, Batt_Data)!= HAL_OK){
 80005f6:	463b      	mov	r3, r7
 80005f8:	461a      	mov	r2, r3
 80005fa:	4907      	ldr	r1, [pc, #28]	; (8000618 <Sensor_Data+0xbc>)
 80005fc:	4808      	ldr	r0, [pc, #32]	; (8000620 <Sensor_Data+0xc4>)
 80005fe:	f003 ffa7 	bl	8004550 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <Sensor_Data+0xb0>
		err = CAN2_MSG_ERR;
 8000608:	2303      	movs	r3, #3
 800060a:	71fb      	strb	r3, [r7, #7]
	}
	return err;
 800060c:	79fb      	ldrb	r3, [r7, #7]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000007c 	.word	0x2000007c
 800061c:	01000101 	.word	0x01000101
 8000620:	20000368 	.word	0x20000368
 8000624:	01000201 	.word	0x01000201
 8000628:	01000301 	.word	0x01000301
 800062c:	20000bc6 	.word	0x20000bc6
 8000630:	01000401 	.word	0x01000401

08000634 <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Master, RxData_Master) != HAL_OK){
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000640:	4a35      	ldr	r2, [pc, #212]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000642:	2140      	movs	r1, #64	; 0x40
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f003 ffc7 	bl	80045d8 <HAL_FDCAN_GetRxMessage>
		//Error_Handler();
	}
	if((RxHeader_Master.Identifier & 0x000000FF) == 0x00){
 800064a:	4b33      	ldr	r3, [pc, #204]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d147      	bne.n	80006e4 <HAL_FDCAN_RxFifo0Callback+0xb0>
		if(RxHeader_Master.Identifier == 0x00001000){
 8000654:	4b30      	ldr	r3, [pc, #192]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800065c:	d102      	bne.n	8000664 <HAL_FDCAN_RxFifo0Callback+0x30>
			//init
			Curr_State = INIT;
 800065e:	4b2f      	ldr	r3, [pc, #188]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001100){
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 800066c:	d102      	bne.n	8000674 <HAL_FDCAN_RxFifo0Callback+0x40>
			//Fault
			Curr_State = FAULT;
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001200){
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 800067c:	d102      	bne.n	8000684 <HAL_FDCAN_RxFifo0Callback+0x50>
			//safe to approach
			Curr_State = SAFE_TO_APPROACH;
 800067e:	4b27      	ldr	r3, [pc, #156]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000680:	2202      	movs	r2, #2
 8000682:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001300){
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 800068c:	d102      	bne.n	8000694 <HAL_FDCAN_RxFifo0Callback+0x60>
			//coast
			Curr_State = COAST;
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000690:	2205      	movs	r2, #5
 8000692:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001400){
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800069c:	d102      	bne.n	80006a4 <HAL_FDCAN_RxFifo0Callback+0x70>
			//brake
			Curr_State = BRAKE;
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80006a0:	2206      	movs	r2, #6
 80006a2:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001500){
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f5b3 5fa8 	cmp.w	r3, #5376	; 0x1500
 80006ac:	d102      	bne.n	80006b4 <HAL_FDCAN_RxFifo0Callback+0x80>
			//crawl
			Curr_State = CRAWL;
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001600){
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 80006bc:	d102      	bne.n	80006c4 <HAL_FDCAN_RxFifo0Callback+0x90>
			//track
			Curr_State = TRACK;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80006c0:	2208      	movs	r2, #8
 80006c2:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x0000FF00){
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80006cc:	d102      	bne.n	80006d4 <HAL_FDCAN_RxFifo0Callback+0xa0>
			//launch
			Curr_State = LAUNCH;
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80006d0:	2204      	movs	r2, #4
 80006d2:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001700){
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f5b3 5fb8 	cmp.w	r3, #5888	; 0x1700
 80006dc:	d102      	bne.n	80006e4 <HAL_FDCAN_RxFifo0Callback+0xb0>
			//ready to launch
			Curr_State = READY;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80006e0:	2203      	movs	r2, #3
 80006e2:	701a      	strb	r2, [r3, #0]
		}
	}
	if((RxHeader_Master.Identifier & 0x0000FFFF) == (0x0000FF00 | FOLLOWER_ID)){
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	f64f 7201 	movw	r2, #65281	; 0xff01
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d101      	bne.n	80006f6 <HAL_FDCAN_RxFifo0Callback+0xc2>
		Sensor_Data();
 80006f2:	f7ff ff33 	bl	800055c <Sensor_Data>

	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 80006f6:	2200      	movs	r2, #0
 80006f8:	2101      	movs	r1, #1
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80006fc:	f004 f874 	bl	80047e8 <HAL_FDCAN_ActivateNotification>
			//fault
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8000700:	2200      	movs	r2, #0
 8000702:	2101      	movs	r1, #1
 8000704:	4807      	ldr	r0, [pc, #28]	; (8000724 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8000706:	f004 f86f 	bl	80047e8 <HAL_FDCAN_ActivateNotification>
			//fault
	}


}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000011c 	.word	0x2000011c
 8000718:	200000c4 	.word	0x200000c4
 800071c:	20000bc2 	.word	0x20000bc2
 8000720:	20000304 	.word	0x20000304
 8000724:	20000368 	.word	0x20000368

08000728 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs){
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader_Pod, RxData_Pod) != HAL_OK){
 8000732:	4b45      	ldr	r3, [pc, #276]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8000734:	4a45      	ldr	r2, [pc, #276]	; (800084c <HAL_FDCAN_RxFifo1Callback+0x124>)
 8000736:	2141      	movs	r1, #65	; 0x41
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f003 ff4d 	bl	80045d8 <HAL_FDCAN_GetRxMessage>
		//Error_Handler();
	}
// HE NE HU - HV LV IS1 ISO
	if(RxHeader_Pod.Identifier == IMD_ID){
 800073e:	4b43      	ldr	r3, [pc, #268]	; (800084c <HAL_FDCAN_RxFifo1Callback+0x124>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a43      	ldr	r2, [pc, #268]	; (8000850 <HAL_FDCAN_RxFifo1Callback+0x128>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d121      	bne.n	800078c <HAL_FDCAN_RxFifo1Callback+0x64>
		if((RxData_Pod[1] & 0x40) == 0x40){
 8000748:	4b3f      	ldr	r3, [pc, #252]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800074a:	785b      	ldrb	r3, [r3, #1]
 800074c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000750:	2b00      	cmp	r3, #0
 8000752:	d01b      	beq.n	800078c <HAL_FDCAN_RxFifo1Callback+0x64>
			if((RxData_Pod[1] & 0x03) == 0b10){
 8000754:	4b3c      	ldr	r3, [pc, #240]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8000756:	785b      	ldrb	r3, [r3, #1]
 8000758:	f003 0303 	and.w	r3, r3, #3
 800075c:	2b02      	cmp	r3, #2
 800075e:	d105      	bne.n	800076c <HAL_FDCAN_RxFifo1Callback+0x44>
				ISO_STATE = 0xF0; //Warning set LED to yellow
 8000760:	4b3c      	ldr	r3, [pc, #240]	; (8000854 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 8000762:	22f0      	movs	r2, #240	; 0xf0
 8000764:	701a      	strb	r2, [r3, #0]
				IMD_Req_Isolation();
 8000766:	f7ff fed5 	bl	8000514 <IMD_Req_Isolation>
 800076a:	e00f      	b.n	800078c <HAL_FDCAN_RxFifo1Callback+0x64>
			}else if((RxData_Pod[1] & 0x03) == 0b11){
 800076c:	4b36      	ldr	r3, [pc, #216]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800076e:	785b      	ldrb	r3, [r3, #1]
 8000770:	f003 0303 	and.w	r3, r3, #3
 8000774:	2b03      	cmp	r3, #3
 8000776:	d106      	bne.n	8000786 <HAL_FDCAN_RxFifo1Callback+0x5e>
				ISO_STATE = 0xFF; //fault set LED to Red and full estop
 8000778:	4b36      	ldr	r3, [pc, #216]	; (8000854 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 800077a:	22ff      	movs	r2, #255	; 0xff
 800077c:	701a      	strb	r2, [r3, #0]
				Curr_State = FAULT;
 800077e:	4b36      	ldr	r3, [pc, #216]	; (8000858 <HAL_FDCAN_RxFifo1Callback+0x130>)
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	e002      	b.n	800078c <HAL_FDCAN_RxFifo1Callback+0x64>
			}else{
				ISO_STATE = 0x00; //all good
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
			}
		}
	}else{
		//fault
	}
	if((RxHeader_Pod.Identifier & 0x000000FF) == BMS_ID){
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <HAL_FDCAN_RxFifo1Callback+0x124>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b99      	cmp	r3, #153	; 0x99
 8000794:	d14e      	bne.n	8000834 <HAL_FDCAN_RxFifo1Callback+0x10c>
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x0900){
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <HAL_FDCAN_RxFifo1Callback+0x124>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800079e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80007a2:	d11c      	bne.n	80007de <HAL_FDCAN_RxFifo1Callback+0xb6>
			//status 1
			M_RPM = (RxData_Pod[7]<<24) | (RxData_Pod[6]<<16) | (RxData_Pod[5]<<8) | (RxData_Pod[4]);
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007a6:	79db      	ldrb	r3, [r3, #7]
 80007a8:	061a      	lsls	r2, r3, #24
 80007aa:	4b27      	ldr	r3, [pc, #156]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007ac:	799b      	ldrb	r3, [r3, #6]
 80007ae:	041b      	lsls	r3, r3, #16
 80007b0:	431a      	orrs	r2, r3
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007b4:	795b      	ldrb	r3, [r3, #5]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	4313      	orrs	r3, r2
 80007ba:	4a23      	ldr	r2, [pc, #140]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007bc:	7912      	ldrb	r2, [r2, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <HAL_FDCAN_RxFifo1Callback+0x134>)
 80007c4:	601a      	str	r2, [r3, #0]
			M_Current = (RxData_Pod[3]<<8) | (RxData_Pod[2]);
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007c8:	78db      	ldrb	r3, [r3, #3]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	b21a      	sxth	r2, r3
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <HAL_FDCAN_RxFifo1Callback+0x138>)
 80007dc:	801a      	strh	r2, [r3, #0]
			//status 2
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x0F00){
			//status 3
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x1000){
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <HAL_FDCAN_RxFifo1Callback+0x124>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80007e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007ea:	d123      	bne.n	8000834 <HAL_FDCAN_RxFifo1Callback+0x10c>
			//status 4
			M_Temp_fet = (RxData_Pod[7]<<8) | (RxData_Pod[6]);
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007ee:	79db      	ldrb	r3, [r3, #7]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80007f6:	799b      	ldrb	r3, [r3, #6]
 80007f8:	b21b      	sxth	r3, r3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_FDCAN_RxFifo1Callback+0x13c>)
 8000802:	801a      	strh	r2, [r3, #0]
			M_Temp_motor = (RxData_Pod[5]<<8) | (RxData_Pod[4]);
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8000806:	795b      	ldrb	r3, [r3, #5]
 8000808:	021b      	lsls	r3, r3, #8
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <HAL_FDCAN_RxFifo1Callback+0x140>)
 800081a:	801a      	strh	r2, [r3, #0]
			M_Current_in = (RxData_Pod[3]<<8) | (RxData_Pod[2]);
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800081e:	78db      	ldrb	r3, [r3, #3]
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	b21a      	sxth	r2, r3
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8000826:	789b      	ldrb	r3, [r3, #2]
 8000828:	b21b      	sxth	r3, r3
 800082a:	4313      	orrs	r3, r2
 800082c:	b21b      	sxth	r3, r3
 800082e:	b29a      	uxth	r2, r3
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <HAL_FDCAN_RxFifo1Callback+0x144>)
 8000832:	801a      	strh	r2, [r3, #0]
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x1B00){
			//status 5
		}
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK){
 8000834:	2200      	movs	r2, #0
 8000836:	2108      	movs	r1, #8
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <HAL_FDCAN_RxFifo1Callback+0x148>)
 800083a:	f003 ffd5 	bl	80047e8 <HAL_FDCAN_ActivateNotification>
		//fault
	}

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000114 	.word	0x20000114
 800084c:	200000ec 	.word	0x200000ec
 8000850:	0a100101 	.word	0x0a100101
 8000854:	20000bc1 	.word	0x20000bc1
 8000858:	20000bc2 	.word	0x20000bc2
 800085c:	2000015c 	.word	0x2000015c
 8000860:	20000160 	.word	0x20000160
 8000864:	20000162 	.word	0x20000162
 8000868:	20000164 	.word	0x20000164
 800086c:	20000166 	.word	0x20000166
 8000870:	200003cc 	.word	0x200003cc

08000874 <Run_State>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t Run_State(PodState state) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	73fb      	strb	r3, [r7, #15]

    switch (state) {
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b08      	cmp	r3, #8
 8000886:	d878      	bhi.n	800097a <Run_State+0x106>
 8000888:	a201      	add	r2, pc, #4	; (adr r2, 8000890 <Run_State+0x1c>)
 800088a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088e:	bf00      	nop
 8000890:	080008b5 	.word	0x080008b5
 8000894:	080008d7 	.word	0x080008d7
 8000898:	080008fd 	.word	0x080008fd
 800089c:	08000901 	.word	0x08000901
 80008a0:	08000915 	.word	0x08000915
 80008a4:	08000925 	.word	0x08000925
 80008a8:	08000935 	.word	0x08000935
 80008ac:	0800094b 	.word	0x0800094b
 80008b0:	08000961 	.word	0x08000961
        case INIT:

        	if(TEMP_INIT() != TEMP_INIT_SUCCESS){
 80008b4:	f001 ffc2 	bl	800283c <TEMP_INIT>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b18      	cmp	r3, #24
 80008bc:	d001      	beq.n	80008c2 <Run_State+0x4e>
        		return 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	e05f      	b.n	8000982 <Run_State+0x10e>
        	if(CAN_INIT() != CAN_INIT_OK){
        		return 1;
        	}*/


        	pump_control(1);
 80008c2:	2001      	movs	r0, #1
 80008c4:	f001 f944 	bl	8001b50 <pump_control>

        	UPDATE_TEMP();
 80008c8:	f001 ffd4 	bl	8002874 <UPDATE_TEMP>
        	Curr_State = SAFE_TO_APPROACH;
 80008cc:	4b2f      	ldr	r3, [pc, #188]	; (800098c <Run_State+0x118>)
 80008ce:	2202      	movs	r2, #2
 80008d0:	701a      	strb	r2, [r3, #0]
        	return 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e055      	b.n	8000982 <Run_State+0x10e>
            break;
        case FAULT:
        	HV_off();
 80008d6:	f001 f821 	bl	800191c <HV_off>
        	yellowstatus(0);
 80008da:	2000      	movs	r0, #0
 80008dc:	f001 f896 	bl	8001a0c <yellowstatus>
        	greenstatus(0);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 f8c9 	bl	8001a78 <greenstatus>
        	redstatus(1);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f001 f858 	bl	800199c <redstatus>
        	pump_control(0);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f001 f92f 	bl	8001b50 <pump_control>
        	brake_state(0);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f001 f8f6 	bl	8001ae4 <brake_state>

        	return status;
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	e042      	b.n	8000982 <Run_State+0x10e>
        	/*HV_off();
        	yellowstatus(0);
        	greenstatus(0);
        	brake_state(1);*/

        	return status;
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	e040      	b.n	8000982 <Run_State+0x10e>
            break;
        case READY:
        	precharge();
 8000900:	f000 ff82 	bl	8001808 <precharge>
        	yellowstatus(1);
 8000904:	2001      	movs	r0, #1
 8000906:	f001 f881 	bl	8001a0c <yellowstatus>
        	brake_state(0);
 800090a:	2000      	movs	r0, #0
 800090c:	f001 f8ea 	bl	8001ae4 <brake_state>
        	return status;
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	e036      	b.n	8000982 <Run_State+0x10e>
            break;
        case LAUNCH:
        	yellowstatus(0);
 8000914:	2000      	movs	r0, #0
 8000916:	f001 f879 	bl	8001a0c <yellowstatus>
        	greenstatus(1);
 800091a:	2001      	movs	r0, #1
 800091c:	f001 f8ac 	bl	8001a78 <greenstatus>

        	return status;
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	e02e      	b.n	8000982 <Run_State+0x10e>
            break;
        case COAST:
        	yellowstatus(0);
 8000924:	2000      	movs	r0, #0
 8000926:	f001 f871 	bl	8001a0c <yellowstatus>
        	greenstatus(1);
 800092a:	2001      	movs	r0, #1
 800092c:	f001 f8a4 	bl	8001a78 <greenstatus>

        	return status;
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	e026      	b.n	8000982 <Run_State+0x10e>
            break;
        case BRAKE:
        	yellowstatus(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f001 f869 	bl	8001a0c <yellowstatus>
        	greenstatus(1);
 800093a:	2001      	movs	r0, #1
 800093c:	f001 f89c 	bl	8001a78 <greenstatus>
        	brake_state(1);
 8000940:	2001      	movs	r0, #1
 8000942:	f001 f8cf 	bl	8001ae4 <brake_state>

        	return status;
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	e01b      	b.n	8000982 <Run_State+0x10e>
            break;
        case CRAWL:
        	yellowstatus(0);
 800094a:	2000      	movs	r0, #0
 800094c:	f001 f85e 	bl	8001a0c <yellowstatus>
        	greenstatus(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f001 f891 	bl	8001a78 <greenstatus>
        	brake_state(0);
 8000956:	2000      	movs	r0, #0
 8000958:	f001 f8c4 	bl	8001ae4 <brake_state>

        	return status;
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	e010      	b.n	8000982 <Run_State+0x10e>
            break;
        case TRACK:
        	HV_off();
 8000960:	f000 ffdc 	bl	800191c <HV_off>
        	yellowstatus(0);
 8000964:	2000      	movs	r0, #0
 8000966:	f001 f851 	bl	8001a0c <yellowstatus>
        	greenstatus(0);
 800096a:	2000      	movs	r0, #0
 800096c:	f001 f884 	bl	8001a78 <greenstatus>
        	brake_state(0);
 8000970:	2000      	movs	r0, #0
 8000972:	f001 f8b7 	bl	8001ae4 <brake_state>

        	return status;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	e003      	b.n	8000982 <Run_State+0x10e>
            break;
        default:
        	Curr_State = FAULT;
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <Run_State+0x118>)
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
        	//invalid state
            return 1;
 8000980:	2301      	movs	r3, #1
            break;
    }
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000bc2 	.word	0x20000bc2

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000994:	f002 f847 	bl	8002a26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f848 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f000 fd6a 	bl	8001474 <MX_GPIO_Init>
  MX_DMA_Init();
 80009a0:	f000 fd1e 	bl	80013e0 <MX_DMA_Init>
  MX_ADC1_Init();
 80009a4:	f000 f898 	bl	8000ad8 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80009a8:	f000 f998 	bl	8000cdc <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80009ac:	f000 f9de 	bl	8000d6c <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 80009b0:	f000 fa24 	bl	8000dfc <MX_FDCAN3_Init>
  MX_I2C1_Init();
 80009b4:	f000 fa6a 	bl	8000e8c <MX_I2C1_Init>
  MX_SPI1_Init();
 80009b8:	f000 fbde 	bl	8001178 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80009bc:	f000 fce8 	bl	8001390 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 80009c0:	f000 faa4 	bl	8000f0c <MX_I2C2_Init>
  MX_IWDG_Init();
 80009c4:	f000 fb22 	bl	800100c <MX_IWDG_Init>
  MX_ADC5_Init();
 80009c8:	f000 f922 	bl	8000c10 <MX_ADC5_Init>
  MX_I2C3_Init();
 80009cc:	f000 fade 	bl	8000f8c <MX_I2C3_Init>
  MX_SPI3_Init();
 80009d0:	f000 fc10 	bl	80011f4 <MX_SPI3_Init>
  MX_LPUART1_UART_Init();
 80009d4:	f000 fb38 	bl	8001048 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80009d8:	f000 fc4a 	bl	8001270 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80009dc:	f000 fb80 	bl	80010e0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80009e0:	f000 fc96 	bl	8001310 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //timer_val = __HAL_TIM_GET_COUNTER(&htim6);


  Fault_Flag = Run_State(Curr_State);
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <main+0x90>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff43 	bl	8000874 <Run_State>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <main+0x94>)
 80009f4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <main+0x98>)
 80009f8:	f006 fcaa 	bl	8007350 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Fault_Flag = Run_State(Curr_State);
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <main+0x90>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff37 	bl	8000874 <Run_State>
 8000a06:	4603      	mov	r3, r0
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <main+0x94>)
 8000a0c:	701a      	strb	r2, [r3, #0]
	  if(Fault_Flag != 0){
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <main+0x94>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0f1      	beq.n	80009fc <main+0x6c>
		  Curr_State = FAULT;
 8000a18:	4b01      	ldr	r3, [pc, #4]	; (8000a20 <main+0x90>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
	  Fault_Flag = Run_State(Curr_State);
 8000a1e:	e7ed      	b.n	80009fc <main+0x6c>
 8000a20:	20000bc2 	.word	0x20000bc2
 8000a24:	20000bc0 	.word	0x20000bc0
 8000a28:	20000898 	.word	0x20000898

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0318 	add.w	r3, r7, #24
 8000a36:	2238      	movs	r2, #56	; 0x38
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f008 f98a 	bl	8008d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f005 fb20 	bl	8006094 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8000a54:	232b      	movs	r3, #43	; 0x2b
 8000a56:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a5c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a64:	2340      	movs	r3, #64	; 0x40
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a70:	2302      	movs	r3, #2
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a74:	2303      	movs	r3, #3
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a7c:	2355      	movs	r3, #85	; 0x55
 8000a7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 0318 	add.w	r3, r7, #24
 8000a90:	4618      	mov	r0, r3
 8000a92:	f005 fbb3 	bl	80061fc <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a9c:	f000 fdde 	bl	800165c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2104      	movs	r1, #4
 8000abc:	4618      	mov	r0, r3
 8000abe:	f005 feaf 	bl	8006820 <HAL_RCC_ClockConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000ac8:	f000 fdc8 	bl	800165c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000acc:	f006 f87e 	bl	8006bcc <HAL_RCC_EnableCSS>
}
 8000ad0:	bf00      	nop
 8000ad2:	3750      	adds	r7, #80	; 0x50
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	; 0x30
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2220      	movs	r2, #32
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f008 f92f 	bl	8008d54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000af6:	4b44      	ldr	r3, [pc, #272]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000af8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000afc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000afe:	4b42      	ldr	r3, [pc, #264]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b06:	4b40      	ldr	r3, [pc, #256]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b0c:	4b3e      	ldr	r3, [pc, #248]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000b12:	4b3d      	ldr	r3, [pc, #244]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b18:	4b3b      	ldr	r3, [pc, #236]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b1e:	4b3a      	ldr	r3, [pc, #232]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b20:	2204      	movs	r2, #4
 8000b22:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b24:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b2a:	4b37      	ldr	r3, [pc, #220]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000b30:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b32:	2204      	movs	r2, #4
 8000b34:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b36:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b3e:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b44:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b4a:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b52:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b60:	4829      	ldr	r0, [pc, #164]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b62:	f002 f9a7 	bl	8002eb4 <HAL_ADC_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b6c:	f000 fd76 	bl	800165c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4823      	ldr	r0, [pc, #140]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000b7c:	f002 ffbc 	bl	8003af8 <HAL_ADCEx_MultiModeConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b86:	f000 fd69 	bl	800165c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <MX_ADC1_Init+0x134>)
 8000b8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b8e:	2306      	movs	r3, #6
 8000b90:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b96:	237f      	movs	r3, #127	; 0x7f
 8000b98:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4818      	ldr	r0, [pc, #96]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000ba8:	f002 fb40 	bl	800322c <HAL_ADC_ConfigChannel>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000bb2:	f000 fd53 	bl	800165c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4812      	ldr	r0, [pc, #72]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000bc0:	f002 fb34 	bl	800322c <HAL_ADC_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000bca:	f000 fd47 	bl	800165c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bce:	2312      	movs	r3, #18
 8000bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000bd8:	f002 fb28 	bl	800322c <HAL_ADC_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 8000be2:	f000 fd3b 	bl	800165c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000be6:	2318      	movs	r3, #24
 8000be8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	; (8000c08 <MX_ADC1_Init+0x130>)
 8000bf0:	f002 fb1c 	bl	800322c <HAL_ADC_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000bfa:	f000 fd2f 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	3730      	adds	r7, #48	; 0x30
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2000016c 	.word	0x2000016c
 8000c0c:	04300002 	.word	0x04300002

08000c10 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c16:	463b      	mov	r3, r7
 8000c18:	2220      	movs	r2, #32
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f008 f899 	bl	8008d54 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000c22:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c24:	4a2b      	ldr	r2, [pc, #172]	; (8000cd4 <MX_ADC5_Init+0xc4>)
 8000c26:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c28:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c2a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c2e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c48:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000c8a:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000c8c:	f002 f912 	bl	8002eb4 <HAL_ADC_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000c96:	f000 fce1 	bl	800165c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_ADC5_Init+0xc8>)
 8000c9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ca6:	237f      	movs	r3, #127	; 0x7f
 8000ca8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000caa:	2304      	movs	r3, #4
 8000cac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <MX_ADC5_Init+0xc0>)
 8000cb8:	f002 fab8 	bl	800322c <HAL_ADC_ConfigChannel>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000cc2:	f000 fccb 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	3720      	adds	r7, #32
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200001d8 	.word	0x200001d8
 8000cd4:	50000600 	.word	0x50000600
 8000cd8:	08600004 	.word	0x08600004

08000cdc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ce0:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000ce2:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <MX_FDCAN1_Init+0x8c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000cee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cf2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 167;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000d1a:	22a7      	movs	r2, #167	; 0xa7
 8000d1c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000d20:	2202      	movs	r2, #2
 8000d22:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 17;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000d26:	2211      	movs	r2, #17
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000d32:	2205      	movs	r2, #5
 8000d34:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000d38:	2204      	movs	r2, #4
 8000d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_FDCAN1_Init+0x88>)
 8000d50:	f003 faa4 	bl	800429c <HAL_FDCAN_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000d5a:	f000 fc7f 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000304 	.word	0x20000304
 8000d68:	40006400 	.word	0x40006400

08000d6c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000d72:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <MX_FDCAN2_Init+0x8c>)
 8000d74:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000d76:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000d7e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d82:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 2;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000d9e:	2202      	movs	r2, #2
 8000da0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 2;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000da4:	2202      	movs	r2, #2
 8000da6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 167;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000daa:	22a7      	movs	r2, #167	; 0xa7
 8000dac:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000db0:	2202      	movs	r2, #2
 8000db2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 17;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000db6:	2211      	movs	r2, #17
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 5;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000dc2:	2205      	movs	r2, #5
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 4;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000dc8:	2204      	movs	r2, #4
 8000dca:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_FDCAN2_Init+0x88>)
 8000de0:	f003 fa5c 	bl	800429c <HAL_FDCAN_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8000dea:	f000 fc37 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000368 	.word	0x20000368
 8000df8:	40006800 	.word	0x40006800

08000dfc <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000e00:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e02:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <MX_FDCAN3_Init+0x8c>)
 8000e04:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e0e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e12:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 2;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e2e:	2202      	movs	r2, #2
 8000e30:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 2;
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e34:	2202      	movs	r2, #2
 8000e36:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 167;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e3a:	22a7      	movs	r2, #167	; 0xa7
 8000e3c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 17;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e46:	2211      	movs	r2, #17
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 4;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 5;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e52:	2205      	movs	r2, #5
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 4;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e58:	2204      	movs	r2, #4
 8000e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_FDCAN3_Init+0x88>)
 8000e70:	f003 fa14 	bl	800429c <HAL_FDCAN_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_FDCAN3_Init+0x82>
  {
    Error_Handler();
 8000e7a:	f000 fbef 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200003cc 	.word	0x200003cc
 8000e88:	40006c00 	.word	0x40006c00

08000e8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000e92:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <MX_I2C1_Init+0x78>)
 8000e94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A0A6FB;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <MX_I2C1_Init+0x7c>)
 8000e9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec6:	480e      	ldr	r0, [pc, #56]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ec8:	f004 f97a 	bl	80051c0 <HAL_I2C_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ed2:	f000 fbc3 	bl	800165c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eda:	f004 fefd 	bl	8005cd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ee4:	f000 fbba 	bl	800165c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eec:	f004 ff3f 	bl	8005d6e <HAL_I2CEx_ConfigDigitalFilter>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ef6:	f000 fbb1 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000430 	.word	0x20000430
 8000f04:	40005400 	.word	0x40005400
 8000f08:	10a0a6fb 	.word	0x10a0a6fb

08000f0c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f12:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <MX_I2C2_Init+0x78>)
 8000f14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10A0A6FB;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f18:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <MX_I2C2_Init+0x7c>)
 8000f1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f46:	480e      	ldr	r0, [pc, #56]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f48:	f004 f93a 	bl	80051c0 <HAL_I2C_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f52:	f000 fb83 	bl	800165c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f56:	2100      	movs	r1, #0
 8000f58:	4809      	ldr	r0, [pc, #36]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f5a:	f004 febd 	bl	8005cd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f64:	f000 fb7a 	bl	800165c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_I2C2_Init+0x74>)
 8000f6c:	f004 feff 	bl	8005d6e <HAL_I2CEx_ConfigDigitalFilter>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f76:	f000 fb71 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000484 	.word	0x20000484
 8000f84:	40005800 	.word	0x40005800
 8000f88:	10a0a6fb 	.word	0x10a0a6fb

08000f8c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_I2C3_Init+0x74>)
 8000f92:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <MX_I2C3_Init+0x78>)
 8000f94:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10A0A6FB;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <MX_I2C3_Init+0x74>)
 8000f98:	4a1b      	ldr	r2, [pc, #108]	; (8001008 <MX_I2C3_Init+0x7c>)
 8000f9a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_I2C3_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <MX_I2C3_Init+0x74>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_I2C3_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fae:	4b14      	ldr	r3, [pc, #80]	; (8001000 <MX_I2C3_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_I2C3_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_I2C3_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_I2C3_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fc6:	480e      	ldr	r0, [pc, #56]	; (8001000 <MX_I2C3_Init+0x74>)
 8000fc8:	f004 f8fa 	bl	80051c0 <HAL_I2C_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000fd2:	f000 fb43 	bl	800165c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4809      	ldr	r0, [pc, #36]	; (8001000 <MX_I2C3_Init+0x74>)
 8000fda:	f004 fe7d 	bl	8005cd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000fe4:	f000 fb3a 	bl	800165c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_I2C3_Init+0x74>)
 8000fec:	f004 febf 	bl	8005d6e <HAL_I2CEx_ConfigDigitalFilter>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ff6:	f000 fb31 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200004d8 	.word	0x200004d8
 8001004:	40007800 	.word	0x40007800
 8001008:	10a0a6fb 	.word	0x10a0a6fb

0800100c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_IWDG_Init+0x34>)
 8001012:	4a0c      	ldr	r2, [pc, #48]	; (8001044 <MX_IWDG_Init+0x38>)
 8001014:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <MX_IWDG_Init+0x34>)
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_IWDG_Init+0x34>)
 800101e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001022:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_IWDG_Init+0x34>)
 8001026:	f640 72ff 	movw	r2, #4095	; 0xfff
 800102a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_IWDG_Init+0x34>)
 800102e:	f004 feea 	bl	8005e06 <HAL_IWDG_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001038:	f000 fb10 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000064c 	.word	0x2000064c
 8001044:	40003000 	.word	0x40003000

08001048 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 800104e:	4a23      	ldr	r2, [pc, #140]	; (80010dc <MX_LPUART1_UART_Init+0x94>)
 8001050:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 8001054:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001058:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 8001086:	2200      	movs	r2, #0
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800108a:	2300      	movs	r3, #0
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	4811      	ldr	r0, [pc, #68]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 8001092:	f007 fc28 	bl	80088e6 <HAL_RS485Ex_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800109c:	f000 fade 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a0:	2100      	movs	r1, #0
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 80010a4:	f007 fcc1 	bl	8008a2a <HAL_UARTEx_SetTxFifoThreshold>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010ae:	f000 fad5 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4808      	ldr	r0, [pc, #32]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 80010b6:	f007 fcf6 	bl	8008aa6 <HAL_UARTEx_SetRxFifoThreshold>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010c0:	f000 facc 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 80010c6:	f007 fc77 	bl	80089b8 <HAL_UARTEx_DisableFifoMode>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010d0:	f000 fac4 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000065c 	.word	0x2000065c
 80010dc:	40008000 	.word	0x40008000

080010e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <MX_USART2_UART_Init+0x90>)
 80010e6:	4a23      	ldr	r2, [pc, #140]	; (8001174 <MX_USART2_UART_Init+0x94>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <MX_USART2_UART_Init+0x90>)
 80010ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <MX_USART2_UART_Init+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_USART2_UART_Init+0x90>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <MX_USART2_UART_Init+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_USART2_UART_Init+0x90>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_USART2_UART_Init+0x90>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_USART2_UART_Init+0x90>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <MX_USART2_UART_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_USART2_UART_Init+0x90>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <MX_USART2_UART_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001128:	4811      	ldr	r0, [pc, #68]	; (8001170 <MX_USART2_UART_Init+0x90>)
 800112a:	f006 fe71 	bl	8007e10 <HAL_UART_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001134:	f000 fa92 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001138:	2100      	movs	r1, #0
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_USART2_UART_Init+0x90>)
 800113c:	f007 fc75 	bl	8008a2a <HAL_UARTEx_SetTxFifoThreshold>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001146:	f000 fa89 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114a:	2100      	movs	r1, #0
 800114c:	4808      	ldr	r0, [pc, #32]	; (8001170 <MX_USART2_UART_Init+0x90>)
 800114e:	f007 fcaa 	bl	8008aa6 <HAL_UARTEx_SetRxFifoThreshold>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001158:	f000 fa80 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_USART2_UART_Init+0x90>)
 800115e:	f007 fc2b 	bl	80089b8 <HAL_UARTEx_DisableFifoMode>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001168:	f000 fa78 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200006f0 	.word	0x200006f0
 8001174:	40004400 	.word	0x40004400

08001178 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_SPI1_Init+0x74>)
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <MX_SPI1_Init+0x78>)
 8001180:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_SPI1_Init+0x74>)
 8001184:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001188:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_SPI1_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_SPI1_Init+0x74>)
 8001192:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001196:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_SPI1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_SPI1_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_SPI1_Init+0x74>)
 80011a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_SPI1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_SPI1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_SPI1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_SPI1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_SPI1_Init+0x74>)
 80011c6:	2207      	movs	r2, #7
 80011c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_SPI1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_SPI1_Init+0x74>)
 80011d2:	2208      	movs	r2, #8
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_SPI1_Init+0x74>)
 80011d8:	f005 ffb8 	bl	800714c <HAL_SPI_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011e2:	f000 fa3b 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000784 	.word	0x20000784
 80011f0:	40013000 	.word	0x40013000

080011f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_SPI3_Init+0x74>)
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <MX_SPI3_Init+0x78>)
 80011fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_SPI3_Init+0x74>)
 8001200:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001204:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_SPI3_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_SPI3_Init+0x74>)
 800120e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001212:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_SPI3_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_SPI3_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_SPI3_Init+0x74>)
 8001222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001226:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_SPI3_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_SPI3_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_SPI3_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_SPI3_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_SPI3_Init+0x74>)
 8001242:	2207      	movs	r2, #7
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_SPI3_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_SPI3_Init+0x74>)
 800124e:	2208      	movs	r2, #8
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_SPI3_Init+0x74>)
 8001254:	f005 ff7a 	bl	800714c <HAL_SPI_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800125e:	f000 f9fd 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200007e8 	.word	0x200007e8
 800126c:	40003c00 	.word	0x40003c00

08001270 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <MX_TIM2_Init+0x98>)
 8001290:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001294:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1699;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_TIM2_Init+0x98>)
 8001298:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800129c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_TIM2_Init+0x98>)
 80012a0:	2210      	movs	r2, #16
 80012a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000000;
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <MX_TIM2_Init+0x98>)
 80012a6:	4a19      	ldr	r2, [pc, #100]	; (800130c <MX_TIM2_Init+0x9c>)
 80012a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <MX_TIM2_Init+0x98>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_TIM2_Init+0x98>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b6:	4814      	ldr	r0, [pc, #80]	; (8001308 <MX_TIM2_Init+0x98>)
 80012b8:	f005 fff3 	bl	80072a2 <HAL_TIM_Base_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012c2:	f000 f9cb 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_TIM2_Init+0x98>)
 80012d4:	f006 fa32 	bl	800773c <HAL_TIM_ConfigClockSource>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012de:	f000 f9bd 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	; (8001308 <MX_TIM2_Init+0x98>)
 80012f0:	f006 fcb2 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012fa:	f000 f9af 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000084c 	.word	0x2000084c
 800130c:	004c4b40 	.word	0x004c4b40

08001310 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2036      	movs	r0, #54	; 0x36
 8001326:	f002 fdca 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800132a:	2036      	movs	r0, #54	; 0x36
 800132c:	f002 fde1 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_TIM6_Init+0x78>)
 8001332:	4a16      	ldr	r2, [pc, #88]	; (800138c <MX_TIM6_Init+0x7c>)
 8001334:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 26009;
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_TIM6_Init+0x78>)
 8001338:	f246 5299 	movw	r2, #26009	; 0x6599
 800133c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_TIM6_Init+0x78>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65358;
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <MX_TIM6_Init+0x78>)
 8001346:	f64f 724e 	movw	r2, #65358	; 0xff4e
 800134a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_TIM6_Init+0x78>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_TIM6_Init+0x78>)
 8001354:	f005 ffa5 	bl	80072a2 <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 800135e:	f000 f97d 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_TIM6_Init+0x78>)
 8001370:	f006 fc72 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 800137a:	f000 f96f 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000898 	.word	0x20000898
 800138c:	40001000 	.word	0x40001000

08001390 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 8001396:	4a11      	ldr	r2, [pc, #68]	; (80013dc <MX_USB_PCD_Init+0x4c>)
 8001398:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 800139c:	2208      	movs	r2, #8
 800139e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 80013a2:	2202      	movs	r2, #2
 80013a4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 80013a8:	2202      	movs	r2, #2
 80013aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 80013c6:	f004 fd6d 	bl	8005ea4 <HAL_PCD_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80013d0:	f000 f944 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200008e4 	.word	0x200008e4
 80013dc:	40005c00 	.word	0x40005c00

080013e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <MX_DMA_Init+0x90>)
 80013e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ea:	4a21      	ldr	r2, [pc, #132]	; (8001470 <MX_DMA_Init+0x90>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6493      	str	r3, [r2, #72]	; 0x48
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <MX_DMA_Init+0x90>)
 80013f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <MX_DMA_Init+0x90>)
 8001400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001402:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <MX_DMA_Init+0x90>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6493      	str	r3, [r2, #72]	; 0x48
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_DMA_Init+0x90>)
 800140c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	200b      	movs	r0, #11
 800141c:	f002 fd4f 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001420:	200b      	movs	r0, #11
 8001422:	f002 fd66 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	200c      	movs	r0, #12
 800142c:	f002 fd47 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001430:	200c      	movs	r0, #12
 8001432:	f002 fd5e 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	200d      	movs	r0, #13
 800143c:	f002 fd3f 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001440:	200d      	movs	r0, #13
 8001442:	f002 fd56 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	200e      	movs	r0, #14
 800144c:	f002 fd37 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001450:	200e      	movs	r0, #14
 8001452:	f002 fd4e 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	200f      	movs	r0, #15
 800145c:	f002 fd2f 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001460:	200f      	movs	r0, #15
 8001462:	f002 fd46 	bl	8003ef2 <HAL_NVIC_EnableIRQ>

}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	; 0x30
 8001478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800148a:	4b5d      	ldr	r3, [pc, #372]	; (8001600 <MX_GPIO_Init+0x18c>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	4a5c      	ldr	r2, [pc, #368]	; (8001600 <MX_GPIO_Init+0x18c>)
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001496:	4b5a      	ldr	r3, [pc, #360]	; (8001600 <MX_GPIO_Init+0x18c>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b57      	ldr	r3, [pc, #348]	; (8001600 <MX_GPIO_Init+0x18c>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4a56      	ldr	r2, [pc, #344]	; (8001600 <MX_GPIO_Init+0x18c>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4b54      	ldr	r3, [pc, #336]	; (8001600 <MX_GPIO_Init+0x18c>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ba:	4b51      	ldr	r3, [pc, #324]	; (8001600 <MX_GPIO_Init+0x18c>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	4a50      	ldr	r2, [pc, #320]	; (8001600 <MX_GPIO_Init+0x18c>)
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c6:	4b4e      	ldr	r3, [pc, #312]	; (8001600 <MX_GPIO_Init+0x18c>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	f003 0320 	and.w	r3, r3, #32
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b4b      	ldr	r3, [pc, #300]	; (8001600 <MX_GPIO_Init+0x18c>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	4a4a      	ldr	r2, [pc, #296]	; (8001600 <MX_GPIO_Init+0x18c>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014de:	4b48      	ldr	r3, [pc, #288]	; (8001600 <MX_GPIO_Init+0x18c>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b45      	ldr	r3, [pc, #276]	; (8001600 <MX_GPIO_Init+0x18c>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	4a44      	ldr	r2, [pc, #272]	; (8001600 <MX_GPIO_Init+0x18c>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f6:	4b42      	ldr	r3, [pc, #264]	; (8001600 <MX_GPIO_Init+0x18c>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001502:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <MX_GPIO_Init+0x18c>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	4a3e      	ldr	r2, [pc, #248]	; (8001600 <MX_GPIO_Init+0x18c>)
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150e:	4b3c      	ldr	r3, [pc, #240]	; (8001600 <MX_GPIO_Init+0x18c>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800151a:	2200      	movs	r2, #0
 800151c:	f64e 71c0 	movw	r1, #61376	; 0xefc0
 8001520:	4838      	ldr	r0, [pc, #224]	; (8001604 <MX_GPIO_Init+0x190>)
 8001522:	f003 fe35 	bl	8005190 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152c:	4836      	ldr	r0, [pc, #216]	; (8001608 <MX_GPIO_Init+0x194>)
 800152e:	f003 fe2f 	bl	8005190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001538:	4834      	ldr	r0, [pc, #208]	; (800160c <MX_GPIO_Init+0x198>)
 800153a:	f003 fe29 	bl	8005190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800153e:	2200      	movs	r2, #0
 8001540:	f64f 711c 	movw	r1, #65308	; 0xff1c
 8001544:	4832      	ldr	r0, [pc, #200]	; (8001610 <MX_GPIO_Init+0x19c>)
 8001546:	f003 fe23 	bl	8005190 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800154a:	233c      	movs	r3, #60	; 0x3c
 800154c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	4829      	ldr	r0, [pc, #164]	; (8001604 <MX_GPIO_Init+0x190>)
 800155e:	f003 fc95 	bl	8004e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9
                           PE10 PE11 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001562:	f64e 73c0 	movw	r3, #61376	; 0xefc0
 8001566:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4822      	ldr	r0, [pc, #136]	; (8001604 <MX_GPIO_Init+0x190>)
 800157c:	f003 fc86 	bl	8004e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	481b      	ldr	r0, [pc, #108]	; (8001608 <MX_GPIO_Init+0x194>)
 800159a:	f003 fc77 	bl	8004e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800159e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4815      	ldr	r0, [pc, #84]	; (800160c <MX_GPIO_Init+0x198>)
 80015b8:	f003 fc68 	bl	8004e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015bc:	f64f 731c 	movw	r3, #65308	; 0xff1c
 80015c0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	480e      	ldr	r0, [pc, #56]	; (8001610 <MX_GPIO_Init+0x19c>)
 80015d6:	f003 fc59 	bl	8004e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f2:	f003 fc4b 	bl	8004e8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f6:	bf00      	nop
 80015f8:	3730      	adds	r7, #48	; 0x30
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	48001000 	.word	0x48001000
 8001608:	48000800 	.word	0x48000800
 800160c:	48000400 	.word	0x48000400
 8001610:	48000c00 	.word	0x48000c00

08001614 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	test = test+1;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001626:	701a      	strb	r2, [r3, #0]
	//UPDATE_TEMP();
	if(htim == &htim6){
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d101      	bne.n	8001634 <HAL_TIM_PeriodElapsedCallback+0x20>
		UPDATE_TEMP();
 8001630:	f001 f920 	bl	8002874 <UPDATE_TEMP>
		//Fault_Flag = IMD_Req_Isolation();
	}
	if(htim == &htim2){
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d104      	bne.n	8001646 <HAL_TIM_PeriodElapsedCallback+0x32>
		HV_on();
 800163c:	f000 f928 	bl	8001890 <HV_on>
		HAL_TIM_Base_Stop_IT(&htim2);
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001642:	f005 fefd 	bl	8007440 <HAL_TIM_Base_Stop_IT>
	}
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000168 	.word	0x20000168
 8001654:	20000898 	.word	0x20000898
 8001658:	2000084c 	.word	0x2000084c

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	e7fe      	b.n	8001664 <Error_Handler+0x8>
	...

08001668 <MCP_INIT>:

#include "mcp9600driver.h"

uint8_t mcp_temp_data[2];

error_handler MCP_INIT(uint8_t addr){
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af04      	add	r7, sp, #16
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
	uint8_t len_buf;


	//MCP ID CHECK

	reg = MCP9600_REG_DEVICE_ID_REVISON;
 8001672:	2320      	movs	r3, #32
 8001674:	81fb      	strh	r3, [r7, #14]
	len_reg = 1;
 8001676:	2301      	movs	r3, #1
 8001678:	81bb      	strh	r3, [r7, #12]
	buf[0] = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	723b      	strb	r3, [r7, #8]
	len_buf = 1;
 800167e:	2301      	movs	r3, #1
 8001680:	72fb      	strb	r3, [r7, #11]

	if(HAL_I2C_Mem_Read(&hi2c1,addr, reg, len_reg, buf ,len_buf,20) != HAL_OK){
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	b299      	uxth	r1, r3
 8001686:	7afb      	ldrb	r3, [r7, #11]
 8001688:	b29b      	uxth	r3, r3
 800168a:	89b8      	ldrh	r0, [r7, #12]
 800168c:	89fa      	ldrh	r2, [r7, #14]
 800168e:	2414      	movs	r4, #20
 8001690:	9402      	str	r4, [sp, #8]
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	4603      	mov	r3, r0
 800169c:	483f      	ldr	r0, [pc, #252]	; (800179c <MCP_INIT+0x134>)
 800169e:	f003 ff3f 	bl	8005520 <HAL_I2C_Mem_Read>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MCP_INIT+0x44>
			return MCP_ID_FAIL;
 80016a8:	2309      	movs	r3, #9
 80016aa:	e073      	b.n	8001794 <MCP_INIT+0x12c>
	}
	if(buf[0] != 0x40){
 80016ac:	7a3b      	ldrb	r3, [r7, #8]
 80016ae:	2b40      	cmp	r3, #64	; 0x40
 80016b0:	d001      	beq.n	80016b6 <MCP_INIT+0x4e>
		return MCP_ID_FAIL;
 80016b2:	2309      	movs	r3, #9
 80016b4:	e06e      	b.n	8001794 <MCP_INIT+0x12c>

	}
	//device config

	reg = MCP9600_REG_DEVICE_CONFIGURATION;
 80016b6:	2306      	movs	r3, #6
 80016b8:	81fb      	strh	r3, [r7, #14]
	len_reg = 1;
 80016ba:	2301      	movs	r3, #1
 80016bc:	81bb      	strh	r3, [r7, #12]
	buf[0] = 0b01100000;
 80016be:	2360      	movs	r3, #96	; 0x60
 80016c0:	723b      	strb	r3, [r7, #8]
	len_buf = 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	72fb      	strb	r3, [r7, #11]
	if(HAL_I2C_Mem_Write(&hi2c1, addr, reg, len_reg, buf ,len_buf ,20) != HAL_OK){
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	b299      	uxth	r1, r3
 80016ca:	7afb      	ldrb	r3, [r7, #11]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	89b8      	ldrh	r0, [r7, #12]
 80016d0:	89fa      	ldrh	r2, [r7, #14]
 80016d2:	2414      	movs	r4, #20
 80016d4:	9402      	str	r4, [sp, #8]
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	4603      	mov	r3, r0
 80016e0:	482e      	ldr	r0, [pc, #184]	; (800179c <MCP_INIT+0x134>)
 80016e2:	f003 fe09 	bl	80052f8 <HAL_I2C_Mem_Write>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MCP_INIT+0x88>
		return ERROR_MCP_REG;
 80016ec:	230a      	movs	r3, #10
 80016ee:	e051      	b.n	8001794 <MCP_INIT+0x12c>
	}

	if(HAL_I2C_Mem_Read(&hi2c1,addr, reg, len_reg, buf ,len_buf,20) != HAL_OK){
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	b299      	uxth	r1, r3
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	89b8      	ldrh	r0, [r7, #12]
 80016fa:	89fa      	ldrh	r2, [r7, #14]
 80016fc:	2414      	movs	r4, #20
 80016fe:	9402      	str	r4, [sp, #8]
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4603      	mov	r3, r0
 800170a:	4824      	ldr	r0, [pc, #144]	; (800179c <MCP_INIT+0x134>)
 800170c:	f003 ff08 	bl	8005520 <HAL_I2C_Mem_Read>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MCP_INIT+0xb2>
		return ERROR_MCP_REG;
 8001716:	230a      	movs	r3, #10
 8001718:	e03c      	b.n	8001794 <MCP_INIT+0x12c>
	}

	if(buf[0] != 0b01100000){
 800171a:	7a3b      	ldrb	r3, [r7, #8]
 800171c:	2b60      	cmp	r3, #96	; 0x60
 800171e:	d001      	beq.n	8001724 <MCP_INIT+0xbc>
		return ERROR_MCP_REG;
 8001720:	230a      	movs	r3, #10
 8001722:	e037      	b.n	8001794 <MCP_INIT+0x12c>
	}

	//device thermocouple

	reg = MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION;
 8001724:	2305      	movs	r3, #5
 8001726:	81fb      	strh	r3, [r7, #14]
	len_reg = 1;
 8001728:	2301      	movs	r3, #1
 800172a:	81bb      	strh	r3, [r7, #12]
	buf[0] = 0b00000000;
 800172c:	2300      	movs	r3, #0
 800172e:	723b      	strb	r3, [r7, #8]
	len_buf = 1;
 8001730:	2301      	movs	r3, #1
 8001732:	72fb      	strb	r3, [r7, #11]
	if(HAL_I2C_Mem_Write(&hi2c1, addr, reg, len_reg, buf ,len_buf ,20) != HAL_OK){
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	b299      	uxth	r1, r3
 8001738:	7afb      	ldrb	r3, [r7, #11]
 800173a:	b29b      	uxth	r3, r3
 800173c:	89b8      	ldrh	r0, [r7, #12]
 800173e:	89fa      	ldrh	r2, [r7, #14]
 8001740:	2414      	movs	r4, #20
 8001742:	9402      	str	r4, [sp, #8]
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	4603      	mov	r3, r0
 800174e:	4813      	ldr	r0, [pc, #76]	; (800179c <MCP_INIT+0x134>)
 8001750:	f003 fdd2 	bl	80052f8 <HAL_I2C_Mem_Write>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MCP_INIT+0xf6>
		return ERROR_MCP_THERMO;
 800175a:	230b      	movs	r3, #11
 800175c:	e01a      	b.n	8001794 <MCP_INIT+0x12c>
	}


	if(HAL_I2C_Mem_Read(&hi2c1,addr, reg, len_reg, buf ,len_buf,20) != HAL_OK){
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	b299      	uxth	r1, r3
 8001762:	7afb      	ldrb	r3, [r7, #11]
 8001764:	b29b      	uxth	r3, r3
 8001766:	89b8      	ldrh	r0, [r7, #12]
 8001768:	89fa      	ldrh	r2, [r7, #14]
 800176a:	2414      	movs	r4, #20
 800176c:	9402      	str	r4, [sp, #8]
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	4603      	mov	r3, r0
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <MCP_INIT+0x134>)
 800177a:	f003 fed1 	bl	8005520 <HAL_I2C_Mem_Read>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MCP_INIT+0x120>
		return ERROR_MCP_THERMO;
 8001784:	230b      	movs	r3, #11
 8001786:	e005      	b.n	8001794 <MCP_INIT+0x12c>
	}

	if(buf[0] != 0b00000000){
 8001788:	7a3b      	ldrb	r3, [r7, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MCP_INIT+0x12a>
		return ERROR_MCP_THERMO;
 800178e:	230b      	movs	r3, #11
 8001790:	e000      	b.n	8001794 <MCP_INIT+0x12c>
	}

	return MCP_CONFIG_OK;
 8001792:	230c      	movs	r3, #12
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bd90      	pop	{r4, r7, pc}
 800179c:	20000430 	.word	0x20000430

080017a0 <MCP_TEMP_READ>:

error_handler MCP_TEMP_READ(uint8_t addr){
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af04      	add	r7, sp, #16
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
	uint16_t reg;
	uint16_t len_reg;
	uint8_t buf[2];
	uint8_t len_buf;

	reg = MCP9600_REG_THERMOCOUPLE_HOT_JUNCTION;
 80017aa:	2300      	movs	r3, #0
 80017ac:	81fb      	strh	r3, [r7, #14]
	len_reg = 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	81bb      	strh	r3, [r7, #12]
	buf[0] = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	723b      	strb	r3, [r7, #8]
	buf[1] = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	727b      	strb	r3, [r7, #9]
	len_buf = 2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	72fb      	strb	r3, [r7, #11]

	if(HAL_I2C_Mem_Read(&hi2c1,addr, reg, len_reg, buf ,len_buf,20) != HAL_OK){
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	b299      	uxth	r1, r3
 80017c2:	7afb      	ldrb	r3, [r7, #11]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	89b8      	ldrh	r0, [r7, #12]
 80017c8:	89fa      	ldrh	r2, [r7, #14]
 80017ca:	2414      	movs	r4, #20
 80017cc:	9402      	str	r4, [sp, #8]
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	4603      	mov	r3, r0
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <MCP_TEMP_READ+0x60>)
 80017da:	f003 fea1 	bl	8005520 <HAL_I2C_Mem_Read>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MCP_TEMP_READ+0x48>
		return MCP_TEMP_FAIL;
 80017e4:	2319      	movs	r3, #25
 80017e6:	e006      	b.n	80017f6 <MCP_TEMP_READ+0x56>
	}
	mcp_temp_data[0] = buf[0];
 80017e8:	7a3a      	ldrb	r2, [r7, #8]
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MCP_TEMP_READ+0x64>)
 80017ec:	701a      	strb	r2, [r3, #0]
	mcp_temp_data[1] = buf[1];
 80017ee:	7a7a      	ldrb	r2, [r7, #9]
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <MCP_TEMP_READ+0x64>)
 80017f2:	705a      	strb	r2, [r3, #1]
	return MCP_TEMP_OK;
 80017f4:	230d      	movs	r3, #13

}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd90      	pop	{r4, r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000430 	.word	0x20000430
 8001804:	20000bc4 	.word	0x20000bc4

08001808 <precharge>:
extern TIM_HandleTypeDef htim2;
uint16_t RelayStates = 0x0000;

//PORT MATCHES LETTER

void precharge(void){
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
 //high side on, low side precharge resitor on wait 500ms then low side main on, resistor off
	HAL_GPIO_WritePin(GPIOE, RELAY14, GPIO_PIN_SET); //LOW SIDE ON
 800180c:	4819      	ldr	r0, [pc, #100]	; (8001874 <precharge+0x6c>)
 800180e:	f007 fa10 	bl	8008c32 <atoi>
 8001812:	4603      	mov	r3, r0
 8001814:	b29b      	uxth	r3, r3
 8001816:	2201      	movs	r2, #1
 8001818:	4619      	mov	r1, r3
 800181a:	4817      	ldr	r0, [pc, #92]	; (8001878 <precharge+0x70>)
 800181c:	f003 fcb8 	bl	8005190 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY9, GPIO_PIN_SET);
 8001820:	4816      	ldr	r0, [pc, #88]	; (800187c <precharge+0x74>)
 8001822:	f007 fa06 	bl	8008c32 <atoi>
 8001826:	4603      	mov	r3, r0
 8001828:	b29b      	uxth	r3, r3
 800182a:	2201      	movs	r2, #1
 800182c:	4619      	mov	r1, r3
 800182e:	4812      	ldr	r0, [pc, #72]	; (8001878 <precharge+0x70>)
 8001830:	f003 fcae 	bl	8005190 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_SET); //RESISTOR ON
 8001834:	4812      	ldr	r0, [pc, #72]	; (8001880 <precharge+0x78>)
 8001836:	f007 f9fc 	bl	8008c32 <atoi>
 800183a:	4603      	mov	r3, r0
 800183c:	b29b      	uxth	r3, r3
 800183e:	2201      	movs	r2, #1
 8001840:	4619      	mov	r1, r3
 8001842:	480d      	ldr	r0, [pc, #52]	; (8001878 <precharge+0x70>)
 8001844:	f003 fca4 	bl	8005190 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_SET);
 8001848:	480e      	ldr	r0, [pc, #56]	; (8001884 <precharge+0x7c>)
 800184a:	f007 f9f2 	bl	8008c32 <atoi>
 800184e:	4603      	mov	r3, r0
 8001850:	b29b      	uxth	r3, r3
 8001852:	2201      	movs	r2, #1
 8001854:	4619      	mov	r1, r3
 8001856:	4808      	ldr	r0, [pc, #32]	; (8001878 <precharge+0x70>)
 8001858:	f003 fc9a 	bl	8005190 <HAL_GPIO_WritePin>
	RelayStates = RelayStates | 0x00C6;
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <precharge+0x80>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	f043 03c6 	orr.w	r3, r3, #198	; 0xc6
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <precharge+0x80>)
 8001868:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 800186a:	4808      	ldr	r0, [pc, #32]	; (800188c <precharge+0x84>)
 800186c:	f005 fd70 	bl	8007350 <HAL_TIM_Base_Start_IT>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	08008dd0 	.word	0x08008dd0
 8001878:	48001000 	.word	0x48001000
 800187c:	08008ddc 	.word	0x08008ddc
 8001880:	08008de8 	.word	0x08008de8
 8001884:	08008df4 	.word	0x08008df4
 8001888:	20000bc6 	.word	0x20000bc6
 800188c:	2000084c 	.word	0x2000084c

08001890 <HV_on>:
void HV_on(void){
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, RELAY11, GPIO_PIN_SET); //HIGHSIDE ON
 8001894:	481b      	ldr	r0, [pc, #108]	; (8001904 <HV_on+0x74>)
 8001896:	f007 f9cc 	bl	8008c32 <atoi>
 800189a:	4603      	mov	r3, r0
 800189c:	b29b      	uxth	r3, r3
 800189e:	2201      	movs	r2, #1
 80018a0:	4619      	mov	r1, r3
 80018a2:	4819      	ldr	r0, [pc, #100]	; (8001908 <HV_on+0x78>)
 80018a4:	f003 fc74 	bl	8005190 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY16, GPIO_PIN_SET);
 80018a8:	4818      	ldr	r0, [pc, #96]	; (800190c <HV_on+0x7c>)
 80018aa:	f007 f9c2 	bl	8008c32 <atoi>
 80018ae:	4603      	mov	r3, r0
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	2201      	movs	r2, #1
 80018b4:	4619      	mov	r1, r3
 80018b6:	4814      	ldr	r0, [pc, #80]	; (8001908 <HV_on+0x78>)
 80018b8:	f003 fc6a 	bl	8005190 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_RESET); //RESISTOR OFF
 80018bc:	4814      	ldr	r0, [pc, #80]	; (8001910 <HV_on+0x80>)
 80018be:	f007 f9b8 	bl	8008c32 <atoi>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	2200      	movs	r2, #0
 80018c8:	4619      	mov	r1, r3
 80018ca:	480f      	ldr	r0, [pc, #60]	; (8001908 <HV_on+0x78>)
 80018cc:	f003 fc60 	bl	8005190 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_RESET);
 80018d0:	4810      	ldr	r0, [pc, #64]	; (8001914 <HV_on+0x84>)
 80018d2:	f007 f9ae 	bl	8008c32 <atoi>
 80018d6:	4603      	mov	r3, r0
 80018d8:	b29b      	uxth	r3, r3
 80018da:	2200      	movs	r2, #0
 80018dc:	4619      	mov	r1, r3
 80018de:	480a      	ldr	r0, [pc, #40]	; (8001908 <HV_on+0x78>)
 80018e0:	f003 fc56 	bl	8005190 <HAL_GPIO_WritePin>
	RelayStates = RelayStates | 0x0021;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HV_on+0x88>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HV_on+0x88>)
 80018f0:	801a      	strh	r2, [r3, #0]
	RelayStates = RelayStates & 0xFFBD;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HV_on+0x88>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	f023 0342 	bic.w	r3, r3, #66	; 0x42
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HV_on+0x88>)
 80018fe:	801a      	strh	r2, [r3, #0]

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	08008e00 	.word	0x08008e00
 8001908:	48001000 	.word	0x48001000
 800190c:	08008e0c 	.word	0x08008e0c
 8001910:	08008de8 	.word	0x08008de8
 8001914:	08008df4 	.word	0x08008df4
 8001918:	20000bc6 	.word	0x20000bc6

0800191c <HV_off>:

void HV_off(void){
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, RELAY11, GPIO_PIN_RESET); //HIGHSIDE OFF
 8001920:	4818      	ldr	r0, [pc, #96]	; (8001984 <HV_off+0x68>)
 8001922:	f007 f986 	bl	8008c32 <atoi>
 8001926:	4603      	mov	r3, r0
 8001928:	b29b      	uxth	r3, r3
 800192a:	2200      	movs	r2, #0
 800192c:	4619      	mov	r1, r3
 800192e:	4816      	ldr	r0, [pc, #88]	; (8001988 <HV_off+0x6c>)
 8001930:	f003 fc2e 	bl	8005190 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY16, GPIO_PIN_RESET);
 8001934:	4815      	ldr	r0, [pc, #84]	; (800198c <HV_off+0x70>)
 8001936:	f007 f97c 	bl	8008c32 <atoi>
 800193a:	4603      	mov	r3, r0
 800193c:	b29b      	uxth	r3, r3
 800193e:	2200      	movs	r2, #0
 8001940:	4619      	mov	r1, r3
 8001942:	4811      	ldr	r0, [pc, #68]	; (8001988 <HV_off+0x6c>)
 8001944:	f003 fc24 	bl	8005190 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY14, GPIO_PIN_RESET); //LOW SIDE OFF
 8001948:	4811      	ldr	r0, [pc, #68]	; (8001990 <HV_off+0x74>)
 800194a:	f007 f972 	bl	8008c32 <atoi>
 800194e:	4603      	mov	r3, r0
 8001950:	b29b      	uxth	r3, r3
 8001952:	2200      	movs	r2, #0
 8001954:	4619      	mov	r1, r3
 8001956:	480c      	ldr	r0, [pc, #48]	; (8001988 <HV_off+0x6c>)
 8001958:	f003 fc1a 	bl	8005190 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY9, GPIO_PIN_RESET);
 800195c:	480d      	ldr	r0, [pc, #52]	; (8001994 <HV_off+0x78>)
 800195e:	f007 f968 	bl	8008c32 <atoi>
 8001962:	4603      	mov	r3, r0
 8001964:	b29b      	uxth	r3, r3
 8001966:	2200      	movs	r2, #0
 8001968:	4619      	mov	r1, r3
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <HV_off+0x6c>)
 800196c:	f003 fc10 	bl	8005190 <HAL_GPIO_WritePin>
	RelayStates = RelayStates & 0xFF5A;
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HV_off+0x7c>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	f023 03a5 	bic.w	r3, r3, #165	; 0xa5
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <HV_off+0x7c>)
 800197c:	801a      	strh	r2, [r3, #0]
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	08008e00 	.word	0x08008e00
 8001988:	48001000 	.word	0x48001000
 800198c:	08008e0c 	.word	0x08008e0c
 8001990:	08008dd0 	.word	0x08008dd0
 8001994:	08008ddc 	.word	0x08008ddc
 8001998:	20000bc6 	.word	0x20000bc6

0800199c <redstatus>:

void redstatus(uint8_t state){
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d113      	bne.n	80019d4 <redstatus+0x38>
		HAL_GPIO_WritePin(GPIOD, RELAY1, GPIO_PIN_SET);
 80019ac:	4814      	ldr	r0, [pc, #80]	; (8001a00 <redstatus+0x64>)
 80019ae:	f007 f940 	bl	8008c32 <atoi>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	2201      	movs	r2, #1
 80019b8:	4619      	mov	r1, r3
 80019ba:	4812      	ldr	r0, [pc, #72]	; (8001a04 <redstatus+0x68>)
 80019bc:	f003 fbe8 	bl	8005190 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x8000;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <redstatus+0x6c>)
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <redstatus+0x6c>)
 80019d0:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY1, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0x7FFF;
	}

}
 80019d2:	e010      	b.n	80019f6 <redstatus+0x5a>
		HAL_GPIO_WritePin(GPIOD, RELAY1, GPIO_PIN_RESET);
 80019d4:	480a      	ldr	r0, [pc, #40]	; (8001a00 <redstatus+0x64>)
 80019d6:	f007 f92c 	bl	8008c32 <atoi>
 80019da:	4603      	mov	r3, r0
 80019dc:	b29b      	uxth	r3, r3
 80019de:	2200      	movs	r2, #0
 80019e0:	4619      	mov	r1, r3
 80019e2:	4808      	ldr	r0, [pc, #32]	; (8001a04 <redstatus+0x68>)
 80019e4:	f003 fbd4 	bl	8005190 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0x7FFF;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <redstatus+0x6c>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <redstatus+0x6c>)
 80019f4:	801a      	strh	r2, [r3, #0]
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	08008e0c 	.word	0x08008e0c
 8001a04:	48000c00 	.word	0x48000c00
 8001a08:	20000bc6 	.word	0x20000bc6

08001a0c <yellowstatus>:

void yellowstatus(uint8_t state){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d111      	bne.n	8001a40 <yellowstatus+0x34>
		HAL_GPIO_WritePin(GPIOD, RELAY2, GPIO_PIN_SET);
 8001a1c:	4813      	ldr	r0, [pc, #76]	; (8001a6c <yellowstatus+0x60>)
 8001a1e:	f007 f908 	bl	8008c32 <atoi>
 8001a22:	4603      	mov	r3, r0
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2201      	movs	r2, #1
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4811      	ldr	r0, [pc, #68]	; (8001a70 <yellowstatus+0x64>)
 8001a2c:	f003 fbb0 	bl	8005190 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x4000;
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <yellowstatus+0x68>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <yellowstatus+0x68>)
 8001a3c:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY2, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xBFFF;
	}
}
 8001a3e:	e010      	b.n	8001a62 <yellowstatus+0x56>
		HAL_GPIO_WritePin(GPIOD, RELAY2, GPIO_PIN_RESET);
 8001a40:	480a      	ldr	r0, [pc, #40]	; (8001a6c <yellowstatus+0x60>)
 8001a42:	f007 f8f6 	bl	8008c32 <atoi>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4808      	ldr	r0, [pc, #32]	; (8001a70 <yellowstatus+0x64>)
 8001a50:	f003 fb9e 	bl	8005190 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xBFFF;
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <yellowstatus+0x68>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <yellowstatus+0x68>)
 8001a60:	801a      	strh	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	08008de8 	.word	0x08008de8
 8001a70:	48000c00 	.word	0x48000c00
 8001a74:	20000bc6 	.word	0x20000bc6

08001a78 <greenstatus>:

void greenstatus(uint8_t state){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d111      	bne.n	8001aac <greenstatus+0x34>
		HAL_GPIO_WritePin(GPIOD, RELAY3, GPIO_PIN_SET);
 8001a88:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <greenstatus+0x60>)
 8001a8a:	f007 f8d2 	bl	8008c32 <atoi>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	2201      	movs	r2, #1
 8001a94:	4619      	mov	r1, r3
 8001a96:	4811      	ldr	r0, [pc, #68]	; (8001adc <greenstatus+0x64>)
 8001a98:	f003 fb7a 	bl	8005190 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x2000;
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <greenstatus+0x68>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <greenstatus+0x68>)
 8001aa8:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY3, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xDFFF;
	}
}
 8001aaa:	e010      	b.n	8001ace <greenstatus+0x56>
		HAL_GPIO_WritePin(GPIOD, RELAY3, GPIO_PIN_RESET);
 8001aac:	480a      	ldr	r0, [pc, #40]	; (8001ad8 <greenstatus+0x60>)
 8001aae:	f007 f8c0 	bl	8008c32 <atoi>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4808      	ldr	r0, [pc, #32]	; (8001adc <greenstatus+0x64>)
 8001abc:	f003 fb68 	bl	8005190 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xDFFF;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <greenstatus+0x68>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <greenstatus+0x68>)
 8001acc:	801a      	strh	r2, [r3, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	08008dd0 	.word	0x08008dd0
 8001adc:	48000c00 	.word	0x48000c00
 8001ae0:	20000bc6 	.word	0x20000bc6

08001ae4 <brake_state>:

void brake_state(uint8_t state){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d111      	bne.n	8001b18 <brake_state+0x34>
		HAL_GPIO_WritePin(GPIOD, RELAY4, GPIO_PIN_SET);
 8001af4:	4813      	ldr	r0, [pc, #76]	; (8001b44 <brake_state+0x60>)
 8001af6:	f007 f89c 	bl	8008c32 <atoi>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	2201      	movs	r2, #1
 8001b00:	4619      	mov	r1, r3
 8001b02:	4811      	ldr	r0, [pc, #68]	; (8001b48 <brake_state+0x64>)
 8001b04:	f003 fb44 	bl	8005190 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x1000;
 8001b08:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <brake_state+0x68>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <brake_state+0x68>)
 8001b14:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY4, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xEFFF;
	}
}
 8001b16:	e010      	b.n	8001b3a <brake_state+0x56>
		HAL_GPIO_WritePin(GPIOD, RELAY4, GPIO_PIN_RESET);
 8001b18:	480a      	ldr	r0, [pc, #40]	; (8001b44 <brake_state+0x60>)
 8001b1a:	f007 f88a 	bl	8008c32 <atoi>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	2200      	movs	r2, #0
 8001b24:	4619      	mov	r1, r3
 8001b26:	4808      	ldr	r0, [pc, #32]	; (8001b48 <brake_state+0x64>)
 8001b28:	f003 fb32 	bl	8005190 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xEFFF;
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <brake_state+0x68>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <brake_state+0x68>)
 8001b38:	801a      	strh	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	08008e18 	.word	0x08008e18
 8001b48:	48000c00 	.word	0x48000c00
 8001b4c:	20000bc6 	.word	0x20000bc6

08001b50 <pump_control>:

void pump_control(uint8_t state){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d11b      	bne.n	8001b98 <pump_control+0x48>
		HAL_GPIO_WritePin(GPIOD, RELAY5, GPIO_PIN_SET);
 8001b60:	481d      	ldr	r0, [pc, #116]	; (8001bd8 <pump_control+0x88>)
 8001b62:	f007 f866 	bl	8008c32 <atoi>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	481b      	ldr	r0, [pc, #108]	; (8001bdc <pump_control+0x8c>)
 8001b70:	f003 fb0e 	bl	8005190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, RELAY6, GPIO_PIN_RESET);
 8001b74:	481a      	ldr	r0, [pc, #104]	; (8001be0 <pump_control+0x90>)
 8001b76:	f007 f85c 	bl	8008c32 <atoi>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4619      	mov	r1, r3
 8001b82:	4816      	ldr	r0, [pc, #88]	; (8001bdc <pump_control+0x8c>)
 8001b84:	f003 fb04 	bl	8005190 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x0C00;
 8001b88:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <pump_control+0x94>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <pump_control+0x94>)
 8001b94:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY5, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD, RELAY6, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xF7FF;
	}
}
 8001b96:	e01a      	b.n	8001bce <pump_control+0x7e>
		HAL_GPIO_WritePin(GPIOD, RELAY5, GPIO_PIN_SET);
 8001b98:	480f      	ldr	r0, [pc, #60]	; (8001bd8 <pump_control+0x88>)
 8001b9a:	f007 f84a 	bl	8008c32 <atoi>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480d      	ldr	r0, [pc, #52]	; (8001bdc <pump_control+0x8c>)
 8001ba8:	f003 faf2 	bl	8005190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, RELAY6, GPIO_PIN_RESET);
 8001bac:	480c      	ldr	r0, [pc, #48]	; (8001be0 <pump_control+0x90>)
 8001bae:	f007 f840 	bl	8008c32 <atoi>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4808      	ldr	r0, [pc, #32]	; (8001bdc <pump_control+0x8c>)
 8001bbc:	f003 fae8 	bl	8005190 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xF7FF;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <pump_control+0x94>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <pump_control+0x94>)
 8001bcc:	801a      	strh	r2, [r3, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	08008e24 	.word	0x08008e24
 8001bdc:	48000c00 	.word	0x48000c00
 8001be0:	08008e30 	.word	0x08008e30
 8001be4:	20000bc6 	.word	0x20000bc6

08001be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <HAL_MspInit+0x44>)
 8001bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf2:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <HAL_MspInit+0x44>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <HAL_MspInit+0x44>)
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_MspInit+0x44>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <HAL_MspInit+0x44>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_MspInit+0x44>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c1e:	f004 fadd 	bl	80061dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000

08001c30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0a0      	sub	sp, #128	; 0x80
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c48:	f107 0318 	add.w	r3, r7, #24
 8001c4c:	2254      	movs	r2, #84	; 0x54
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f007 f87f 	bl	8008d54 <memset>
  if(hadc->Instance==ADC1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c5e:	d160      	bne.n	8001d22 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c64:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c66:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c6c:	f107 0318 	add.w	r3, r7, #24
 8001c70:	4618      	mov	r0, r3
 8001c72:	f005 f81d 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001c7c:	f7ff fcee 	bl	800165c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c80:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <HAL_ADC_MspInit+0x1c8>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c84:	4a5c      	ldr	r2, [pc, #368]	; (8001df8 <HAL_ADC_MspInit+0x1c8>)
 8001c86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8c:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <HAL_ADC_MspInit+0x1c8>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <HAL_ADC_MspInit+0x1c8>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9c:	4a56      	ldr	r2, [pc, #344]	; (8001df8 <HAL_ADC_MspInit+0x1c8>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca4:	4b54      	ldr	r3, [pc, #336]	; (8001df8 <HAL_ADC_MspInit+0x1c8>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc6:	f003 f8e1 	bl	8004e8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001cca:	4b4c      	ldr	r3, [pc, #304]	; (8001dfc <HAL_ADC_MspInit+0x1cc>)
 8001ccc:	4a4c      	ldr	r2, [pc, #304]	; (8001e00 <HAL_ADC_MspInit+0x1d0>)
 8001cce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001cd0:	4b4a      	ldr	r3, [pc, #296]	; (8001dfc <HAL_ADC_MspInit+0x1cc>)
 8001cd2:	2205      	movs	r2, #5
 8001cd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cd6:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <HAL_ADC_MspInit+0x1cc>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cdc:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <HAL_ADC_MspInit+0x1cc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ce2:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <HAL_ADC_MspInit+0x1cc>)
 8001ce4:	2280      	movs	r2, #128	; 0x80
 8001ce6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ce8:	4b44      	ldr	r3, [pc, #272]	; (8001dfc <HAL_ADC_MspInit+0x1cc>)
 8001cea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cf0:	4b42      	ldr	r3, [pc, #264]	; (8001dfc <HAL_ADC_MspInit+0x1cc>)
 8001cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001cf8:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <HAL_ADC_MspInit+0x1cc>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cfe:	4b3f      	ldr	r3, [pc, #252]	; (8001dfc <HAL_ADC_MspInit+0x1cc>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d04:	483d      	ldr	r0, [pc, #244]	; (8001dfc <HAL_ADC_MspInit+0x1cc>)
 8001d06:	f002 f90f 	bl	8003f28 <HAL_DMA_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001d10:	f7ff fca4 	bl	800165c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a39      	ldr	r2, [pc, #228]	; (8001dfc <HAL_ADC_MspInit+0x1cc>)
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
 8001d1a:	4a38      	ldr	r2, [pc, #224]	; (8001dfc <HAL_ADC_MspInit+0x1cc>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8001d20:	e065      	b.n	8001dee <HAL_ADC_MspInit+0x1be>
  else if(hadc->Instance==ADC5)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a37      	ldr	r2, [pc, #220]	; (8001e04 <HAL_ADC_MspInit+0x1d4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d160      	bne.n	8001dee <HAL_ADC_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d30:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001d32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d36:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d38:	f107 0318 	add.w	r3, r7, #24
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f004 ffb7 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 8001d48:	f7ff fc88 	bl	800165c <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <HAL_ADC_MspInit+0x1c8>)
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d50:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <HAL_ADC_MspInit+0x1c8>)
 8001d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d58:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <HAL_ADC_MspInit+0x1c8>)
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d64:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <HAL_ADC_MspInit+0x1c8>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <HAL_ADC_MspInit+0x1c8>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <HAL_ADC_MspInit+0x1c8>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d80:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d82:	2303      	movs	r3, #3
 8001d84:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d94:	f003 f87a 	bl	8004e8c <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_ADC_MspInit+0x1d8>)
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_ADC_MspInit+0x1dc>)
 8001d9c:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <HAL_ADC_MspInit+0x1d8>)
 8001da0:	2227      	movs	r2, #39	; 0x27
 8001da2:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <HAL_ADC_MspInit+0x1d8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_ADC_MspInit+0x1d8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <HAL_ADC_MspInit+0x1d8>)
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_ADC_MspInit+0x1d8>)
 8001db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dbc:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_ADC_MspInit+0x1d8>)
 8001dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc4:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_ADC_MspInit+0x1d8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_ADC_MspInit+0x1d8>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001dd2:	480d      	ldr	r0, [pc, #52]	; (8001e08 <HAL_ADC_MspInit+0x1d8>)
 8001dd4:	f002 f8a8 	bl	8003f28 <HAL_DMA_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8001dde:	f7ff fc3d 	bl	800165c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <HAL_ADC_MspInit+0x1d8>)
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54
 8001de8:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <HAL_ADC_MspInit+0x1d8>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001dee:	bf00      	nop
 8001df0:	3780      	adds	r7, #128	; 0x80
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	20000244 	.word	0x20000244
 8001e00:	40020008 	.word	0x40020008
 8001e04:	50000600 	.word	0x50000600
 8001e08:	200002a4 	.word	0x200002a4
 8001e0c:	40020058 	.word	0x40020058

08001e10 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b0a2      	sub	sp, #136	; 0x88
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e28:	f107 0320 	add.w	r3, r7, #32
 8001e2c:	2254      	movs	r2, #84	; 0x54
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f006 ff8f 	bl	8008d54 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a7a      	ldr	r2, [pc, #488]	; (8002024 <HAL_FDCAN_MspInit+0x214>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d14b      	bne.n	8001ed8 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e44:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001e46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e4a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4c:	f107 0320 	add.w	r3, r7, #32
 8001e50:	4618      	mov	r0, r3
 8001e52:	f004 ff2d 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001e5c:	f7ff fbfe 	bl	800165c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e60:	4b71      	ldr	r3, [pc, #452]	; (8002028 <HAL_FDCAN_MspInit+0x218>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	4a70      	ldr	r2, [pc, #448]	; (8002028 <HAL_FDCAN_MspInit+0x218>)
 8001e68:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e6a:	4b6f      	ldr	r3, [pc, #444]	; (8002028 <HAL_FDCAN_MspInit+0x218>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d10b      	bne.n	8001e8a <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e72:	4b6e      	ldr	r3, [pc, #440]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	4a6d      	ldr	r2, [pc, #436]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001e78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7e:	4b6b      	ldr	r3, [pc, #428]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	61fb      	str	r3, [r7, #28]
 8001e88:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8a:	4b68      	ldr	r3, [pc, #416]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4a67      	ldr	r2, [pc, #412]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e96:	4b65      	ldr	r3, [pc, #404]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001eb4:	2309      	movs	r3, #9
 8001eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	485b      	ldr	r0, [pc, #364]	; (8002030 <HAL_FDCAN_MspInit+0x220>)
 8001ec2:	f002 ffe3 	bl	8004e8c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2015      	movs	r0, #21
 8001ecc:	f001 fff7 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001ed0:	2015      	movs	r0, #21
 8001ed2:	f002 f80e 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001ed6:	e0a1      	b.n	800201c <HAL_FDCAN_MspInit+0x20c>
  else if(hfdcan->Instance==FDCAN2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a55      	ldr	r2, [pc, #340]	; (8002034 <HAL_FDCAN_MspInit+0x224>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d14c      	bne.n	8001f7c <HAL_FDCAN_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eec:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eee:	f107 0320 	add.w	r3, r7, #32
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f004 fedc 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 8001efe:	f7ff fbad 	bl	800165c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001f02:	4b49      	ldr	r3, [pc, #292]	; (8002028 <HAL_FDCAN_MspInit+0x218>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	4a47      	ldr	r2, [pc, #284]	; (8002028 <HAL_FDCAN_MspInit+0x218>)
 8001f0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f0c:	4b46      	ldr	r3, [pc, #280]	; (8002028 <HAL_FDCAN_MspInit+0x218>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d10b      	bne.n	8001f2c <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f14:	4b45      	ldr	r3, [pc, #276]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	4a44      	ldr	r2, [pc, #272]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001f1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f20:	4b42      	ldr	r3, [pc, #264]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2c:	4b3f      	ldr	r3, [pc, #252]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f30:	4a3e      	ldr	r2, [pc, #248]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f38:	4b3c      	ldr	r3, [pc, #240]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f44:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f48:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001f58:	2309      	movs	r3, #9
 8001f5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f62:	4619      	mov	r1, r3
 8001f64:	4834      	ldr	r0, [pc, #208]	; (8002038 <HAL_FDCAN_MspInit+0x228>)
 8001f66:	f002 ff91 	bl	8004e8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2056      	movs	r0, #86	; 0x56
 8001f70:	f001 ffa5 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001f74:	2056      	movs	r0, #86	; 0x56
 8001f76:	f001 ffbc 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
}
 8001f7a:	e04f      	b.n	800201c <HAL_FDCAN_MspInit+0x20c>
  else if(hfdcan->Instance==FDCAN3)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a2e      	ldr	r2, [pc, #184]	; (800203c <HAL_FDCAN_MspInit+0x22c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d14a      	bne.n	800201c <HAL_FDCAN_MspInit+0x20c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f90:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f92:	f107 0320 	add.w	r3, r7, #32
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 fe8a 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_FDCAN_MspInit+0x196>
      Error_Handler();
 8001fa2:	f7ff fb5b 	bl	800165c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_FDCAN_MspInit+0x218>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <HAL_FDCAN_MspInit+0x218>)
 8001fae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_FDCAN_MspInit+0x218>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_FDCAN_MspInit+0x1c0>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	4a1b      	ldr	r2, [pc, #108]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001fbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd4:	4a15      	ldr	r2, [pc, #84]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_FDCAN_MspInit+0x21c>)
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001fe8:	2318      	movs	r3, #24
 8001fea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8001ffa:	230b      	movs	r3, #11
 8001ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002000:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002004:	4619      	mov	r1, r3
 8002006:	480c      	ldr	r0, [pc, #48]	; (8002038 <HAL_FDCAN_MspInit+0x228>)
 8002008:	f002 ff40 	bl	8004e8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	2059      	movs	r0, #89	; 0x59
 8002012:	f001 ff54 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 8002016:	2059      	movs	r0, #89	; 0x59
 8002018:	f001 ff6b 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
}
 800201c:	bf00      	nop
 800201e:	3788      	adds	r7, #136	; 0x88
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40006400 	.word	0x40006400
 8002028:	20000bc8 	.word	0x20000bc8
 800202c:	40021000 	.word	0x40021000
 8002030:	48000c00 	.word	0x48000c00
 8002034:	40006800 	.word	0x40006800
 8002038:	48000400 	.word	0x48000400
 800203c:	40006c00 	.word	0x40006c00

08002040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b0a4      	sub	sp, #144	; 0x90
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800205c:	2254      	movs	r2, #84	; 0x54
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f006 fe77 	bl	8008d54 <memset>
  if(hi2c->Instance==I2C1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a8a      	ldr	r2, [pc, #552]	; (8002294 <HAL_I2C_MspInit+0x254>)
 800206c:	4293      	cmp	r3, r2
 800206e:	f040 80af 	bne.w	80021d0 <HAL_I2C_MspInit+0x190>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002072:	2340      	movs	r3, #64	; 0x40
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002076:	2300      	movs	r3, #0
 8002078:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800207a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207e:	4618      	mov	r0, r3
 8002080:	f004 fe16 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800208a:	f7ff fae7 	bl	800165c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	4b82      	ldr	r3, [pc, #520]	; (8002298 <HAL_I2C_MspInit+0x258>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	4a81      	ldr	r2, [pc, #516]	; (8002298 <HAL_I2C_MspInit+0x258>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209a:	4b7f      	ldr	r3, [pc, #508]	; (8002298 <HAL_I2C_MspInit+0x258>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a6:	4b7c      	ldr	r3, [pc, #496]	; (8002298 <HAL_I2C_MspInit+0x258>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	4a7b      	ldr	r2, [pc, #492]	; (8002298 <HAL_I2C_MspInit+0x258>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b2:	4b79      	ldr	r3, [pc, #484]	; (8002298 <HAL_I2C_MspInit+0x258>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	623b      	str	r3, [r7, #32]
 80020bc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c4:	2312      	movs	r3, #18
 80020c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020d6:	2304      	movs	r3, #4
 80020d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020e0:	4619      	mov	r1, r3
 80020e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e6:	f002 fed1 	bl	8004e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ee:	2312      	movs	r3, #18
 80020f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002100:	2304      	movs	r3, #4
 8002102:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800210a:	4619      	mov	r1, r3
 800210c:	4863      	ldr	r0, [pc, #396]	; (800229c <HAL_I2C_MspInit+0x25c>)
 800210e:	f002 febd 	bl	8004e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002112:	4b61      	ldr	r3, [pc, #388]	; (8002298 <HAL_I2C_MspInit+0x258>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	4a60      	ldr	r2, [pc, #384]	; (8002298 <HAL_I2C_MspInit+0x258>)
 8002118:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800211c:	6593      	str	r3, [r2, #88]	; 0x58
 800211e:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <HAL_I2C_MspInit+0x258>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 800212a:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <HAL_I2C_MspInit+0x260>)
 800212c:	4a5d      	ldr	r2, [pc, #372]	; (80022a4 <HAL_I2C_MspInit+0x264>)
 800212e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002130:	4b5b      	ldr	r3, [pc, #364]	; (80022a0 <HAL_I2C_MspInit+0x260>)
 8002132:	2210      	movs	r2, #16
 8002134:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002136:	4b5a      	ldr	r3, [pc, #360]	; (80022a0 <HAL_I2C_MspInit+0x260>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800213c:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <HAL_I2C_MspInit+0x260>)
 800213e:	2200      	movs	r2, #0
 8002140:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002142:	4b57      	ldr	r3, [pc, #348]	; (80022a0 <HAL_I2C_MspInit+0x260>)
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002148:	4b55      	ldr	r3, [pc, #340]	; (80022a0 <HAL_I2C_MspInit+0x260>)
 800214a:	2200      	movs	r2, #0
 800214c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800214e:	4b54      	ldr	r3, [pc, #336]	; (80022a0 <HAL_I2C_MspInit+0x260>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002154:	4b52      	ldr	r3, [pc, #328]	; (80022a0 <HAL_I2C_MspInit+0x260>)
 8002156:	2200      	movs	r2, #0
 8002158:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800215a:	4b51      	ldr	r3, [pc, #324]	; (80022a0 <HAL_I2C_MspInit+0x260>)
 800215c:	2200      	movs	r2, #0
 800215e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002160:	484f      	ldr	r0, [pc, #316]	; (80022a0 <HAL_I2C_MspInit+0x260>)
 8002162:	f001 fee1 	bl	8003f28 <HAL_DMA_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_I2C_MspInit+0x130>
    {
      Error_Handler();
 800216c:	f7ff fa76 	bl	800165c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a4b      	ldr	r2, [pc, #300]	; (80022a0 <HAL_I2C_MspInit+0x260>)
 8002174:	63da      	str	r2, [r3, #60]	; 0x3c
 8002176:	4a4a      	ldr	r2, [pc, #296]	; (80022a0 <HAL_I2C_MspInit+0x260>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 800217c:	4b4a      	ldr	r3, [pc, #296]	; (80022a8 <HAL_I2C_MspInit+0x268>)
 800217e:	4a4b      	ldr	r2, [pc, #300]	; (80022ac <HAL_I2C_MspInit+0x26c>)
 8002180:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002182:	4b49      	ldr	r3, [pc, #292]	; (80022a8 <HAL_I2C_MspInit+0x268>)
 8002184:	2211      	movs	r2, #17
 8002186:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002188:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <HAL_I2C_MspInit+0x268>)
 800218a:	2210      	movs	r2, #16
 800218c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800218e:	4b46      	ldr	r3, [pc, #280]	; (80022a8 <HAL_I2C_MspInit+0x268>)
 8002190:	2200      	movs	r2, #0
 8002192:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002194:	4b44      	ldr	r3, [pc, #272]	; (80022a8 <HAL_I2C_MspInit+0x268>)
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219a:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <HAL_I2C_MspInit+0x268>)
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a0:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <HAL_I2C_MspInit+0x268>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80021a6:	4b40      	ldr	r3, [pc, #256]	; (80022a8 <HAL_I2C_MspInit+0x268>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021ac:	4b3e      	ldr	r3, [pc, #248]	; (80022a8 <HAL_I2C_MspInit+0x268>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80021b2:	483d      	ldr	r0, [pc, #244]	; (80022a8 <HAL_I2C_MspInit+0x268>)
 80021b4:	f001 feb8 	bl	8003f28 <HAL_DMA_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_MspInit+0x182>
    {
      Error_Handler();
 80021be:	f7ff fa4d 	bl	800165c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a38      	ldr	r2, [pc, #224]	; (80022a8 <HAL_I2C_MspInit+0x268>)
 80021c6:	639a      	str	r2, [r3, #56]	; 0x38
 80021c8:	4a37      	ldr	r2, [pc, #220]	; (80022a8 <HAL_I2C_MspInit+0x268>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80021ce:	e0dd      	b.n	800238c <HAL_I2C_MspInit+0x34c>
  else if(hi2c->Instance==I2C2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a36      	ldr	r2, [pc, #216]	; (80022b0 <HAL_I2C_MspInit+0x270>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d16e      	bne.n	80022b8 <HAL_I2C_MspInit+0x278>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80021de:	2300      	movs	r3, #0
 80021e0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 fd62 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 80021f2:	f7ff fa33 	bl	800165c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f6:	4b28      	ldr	r3, [pc, #160]	; (8002298 <HAL_I2C_MspInit+0x258>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	4a27      	ldr	r2, [pc, #156]	; (8002298 <HAL_I2C_MspInit+0x258>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002202:	4b25      	ldr	r3, [pc, #148]	; (8002298 <HAL_I2C_MspInit+0x258>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <HAL_I2C_MspInit+0x258>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	4a21      	ldr	r2, [pc, #132]	; (8002298 <HAL_I2C_MspInit+0x258>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <HAL_I2C_MspInit+0x258>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002226:	2310      	movs	r3, #16
 8002228:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800222a:	2312      	movs	r3, #18
 800222c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800223c:	2304      	movs	r3, #4
 800223e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002242:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002246:	4619      	mov	r1, r3
 8002248:	481a      	ldr	r0, [pc, #104]	; (80022b4 <HAL_I2C_MspInit+0x274>)
 800224a:	f002 fe1f 	bl	8004e8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800224e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002252:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002254:	2312      	movs	r3, #18
 8002256:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002266:	2304      	movs	r3, #4
 8002268:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002270:	4619      	mov	r1, r3
 8002272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002276:	f002 fe09 	bl	8004e8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <HAL_I2C_MspInit+0x258>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	4a06      	ldr	r2, [pc, #24]	; (8002298 <HAL_I2C_MspInit+0x258>)
 8002280:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002284:	6593      	str	r3, [r2, #88]	; 0x58
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <HAL_I2C_MspInit+0x258>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]
}
 8002292:	e07b      	b.n	800238c <HAL_I2C_MspInit+0x34c>
 8002294:	40005400 	.word	0x40005400
 8002298:	40021000 	.word	0x40021000
 800229c:	48000400 	.word	0x48000400
 80022a0:	2000052c 	.word	0x2000052c
 80022a4:	4002001c 	.word	0x4002001c
 80022a8:	2000058c 	.word	0x2000058c
 80022ac:	40020030 	.word	0x40020030
 80022b0:	40005800 	.word	0x40005800
 80022b4:	48000800 	.word	0x48000800
  else if(hi2c->Instance==I2C3)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a35      	ldr	r2, [pc, #212]	; (8002394 <HAL_I2C_MspInit+0x354>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d164      	bne.n	800238c <HAL_I2C_MspInit+0x34c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80022c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80022c8:	2300      	movs	r3, #0
 80022ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d0:	4618      	mov	r0, r3
 80022d2:	f004 fced 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_I2C_MspInit+0x2a0>
      Error_Handler();
 80022dc:	f7ff f9be 	bl	800165c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e0:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_I2C_MspInit+0x358>)
 80022e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e4:	4a2c      	ldr	r2, [pc, #176]	; (8002398 <HAL_I2C_MspInit+0x358>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_I2C_MspInit+0x358>)
 80022ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022fc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022fe:	2312      	movs	r3, #18
 8002300:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002310:	2308      	movs	r3, #8
 8002312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002316:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800231a:	4619      	mov	r1, r3
 800231c:	481f      	ldr	r0, [pc, #124]	; (800239c <HAL_I2C_MspInit+0x35c>)
 800231e:	f002 fdb5 	bl	8004e8c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_I2C_MspInit+0x358>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <HAL_I2C_MspInit+0x358>)
 8002328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800232c:	6593      	str	r3, [r2, #88]	; 0x58
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_I2C_MspInit+0x358>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Channel4;
 800233a:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_I2C_MspInit+0x360>)
 800233c:	4a19      	ldr	r2, [pc, #100]	; (80023a4 <HAL_I2C_MspInit+0x364>)
 800233e:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_I2C_MspInit+0x360>)
 8002342:	2214      	movs	r2, #20
 8002344:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_I2C_MspInit+0x360>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <HAL_I2C_MspInit+0x360>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_I2C_MspInit+0x360>)
 8002354:	2280      	movs	r2, #128	; 0x80
 8002356:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_I2C_MspInit+0x360>)
 800235a:	2200      	movs	r2, #0
 800235c:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_I2C_MspInit+0x360>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_I2C_MspInit+0x360>)
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_I2C_MspInit+0x360>)
 800236c:	2200      	movs	r2, #0
 800236e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8002370:	480b      	ldr	r0, [pc, #44]	; (80023a0 <HAL_I2C_MspInit+0x360>)
 8002372:	f001 fdd9 	bl	8003f28 <HAL_DMA_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_MspInit+0x340>
      Error_Handler();
 800237c:	f7ff f96e 	bl	800165c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_I2C_MspInit+0x360>)
 8002384:	63da      	str	r2, [r3, #60]	; 0x3c
 8002386:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <HAL_I2C_MspInit+0x360>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800238c:	bf00      	nop
 800238e:	3790      	adds	r7, #144	; 0x90
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40007800 	.word	0x40007800
 8002398:	40021000 	.word	0x40021000
 800239c:	48000800 	.word	0x48000800
 80023a0:	200005ec 	.word	0x200005ec
 80023a4:	40020044 	.word	0x40020044

080023a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b0a2      	sub	sp, #136	; 0x88
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023c0:	f107 0320 	add.w	r3, r7, #32
 80023c4:	2254      	movs	r2, #84	; 0x54
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f006 fcc3 	bl	8008d54 <memset>
  if(huart->Instance==LPUART1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a4e      	ldr	r2, [pc, #312]	; (800250c <HAL_UART_MspInit+0x164>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d157      	bne.n	8002488 <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80023d8:	2320      	movs	r3, #32
 80023da:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 80023dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023e0:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e2:	f107 0320 	add.w	r3, r7, #32
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 fc62 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023f2:	f7ff f933 	bl	800165c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80023f6:	4b46      	ldr	r3, [pc, #280]	; (8002510 <HAL_UART_MspInit+0x168>)
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	4a45      	ldr	r2, [pc, #276]	; (8002510 <HAL_UART_MspInit+0x168>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002402:	4b43      	ldr	r3, [pc, #268]	; (8002510 <HAL_UART_MspInit+0x168>)
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240e:	4b40      	ldr	r3, [pc, #256]	; (8002510 <HAL_UART_MspInit+0x168>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	4a3f      	ldr	r2, [pc, #252]	; (8002510 <HAL_UART_MspInit+0x168>)
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800241a:	4b3d      	ldr	r3, [pc, #244]	; (8002510 <HAL_UART_MspInit+0x168>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002426:	4b3a      	ldr	r3, [pc, #232]	; (8002510 <HAL_UART_MspInit+0x168>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	4a39      	ldr	r2, [pc, #228]	; (8002510 <HAL_UART_MspInit+0x168>)
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002432:	4b37      	ldr	r3, [pc, #220]	; (8002510 <HAL_UART_MspInit+0x168>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800243e:	2303      	movs	r3, #3
 8002440:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002450:	2308      	movs	r3, #8
 8002452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002456:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800245a:	4619      	mov	r1, r3
 800245c:	482d      	ldr	r0, [pc, #180]	; (8002514 <HAL_UART_MspInit+0x16c>)
 800245e:	f002 fd15 	bl	8004e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002462:	2302      	movs	r3, #2
 8002464:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002474:	230c      	movs	r3, #12
 8002476:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800247e:	4619      	mov	r1, r3
 8002480:	4825      	ldr	r0, [pc, #148]	; (8002518 <HAL_UART_MspInit+0x170>)
 8002482:	f002 fd03 	bl	8004e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002486:	e03c      	b.n	8002502 <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a23      	ldr	r2, [pc, #140]	; (800251c <HAL_UART_MspInit+0x174>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d137      	bne.n	8002502 <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002492:	2302      	movs	r3, #2
 8002494:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002496:	2300      	movs	r3, #0
 8002498:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800249a:	f107 0320 	add.w	r3, r7, #32
 800249e:	4618      	mov	r0, r3
 80024a0:	f004 fc06 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_UART_MspInit+0x106>
      Error_Handler();
 80024aa:	f7ff f8d7 	bl	800165c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	4a17      	ldr	r2, [pc, #92]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	4a11      	ldr	r2, [pc, #68]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024cc:	f043 0308 	orr.w	r3, r3, #8
 80024d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_UART_MspInit+0x168>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80024de:	2360      	movs	r3, #96	; 0x60
 80024e0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024f0:	2307      	movs	r3, #7
 80024f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024fa:	4619      	mov	r1, r3
 80024fc:	4808      	ldr	r0, [pc, #32]	; (8002520 <HAL_UART_MspInit+0x178>)
 80024fe:	f002 fcc5 	bl	8004e8c <HAL_GPIO_Init>
}
 8002502:	bf00      	nop
 8002504:	3788      	adds	r7, #136	; 0x88
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40008000 	.word	0x40008000
 8002510:	40021000 	.word	0x40021000
 8002514:	48000800 	.word	0x48000800
 8002518:	48000400 	.word	0x48000400
 800251c:	40004400 	.word	0x40004400
 8002520:	48000c00 	.word	0x48000c00

08002524 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08c      	sub	sp, #48	; 0x30
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a2f      	ldr	r2, [pc, #188]	; (8002600 <HAL_SPI_MspInit+0xdc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d129      	bne.n	800259a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002546:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <HAL_SPI_MspInit+0xe0>)
 8002548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254a:	4a2e      	ldr	r2, [pc, #184]	; (8002604 <HAL_SPI_MspInit+0xe0>)
 800254c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002550:	6613      	str	r3, [r2, #96]	; 0x60
 8002552:	4b2c      	ldr	r3, [pc, #176]	; (8002604 <HAL_SPI_MspInit+0xe0>)
 8002554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002556:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	4b29      	ldr	r3, [pc, #164]	; (8002604 <HAL_SPI_MspInit+0xe0>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	4a28      	ldr	r2, [pc, #160]	; (8002604 <HAL_SPI_MspInit+0xe0>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800256a:	4b26      	ldr	r3, [pc, #152]	; (8002604 <HAL_SPI_MspInit+0xe0>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002576:	23e0      	movs	r3, #224	; 0xe0
 8002578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002586:	2305      	movs	r3, #5
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 031c 	add.w	r3, r7, #28
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002594:	f002 fc7a 	bl	8004e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002598:	e02d      	b.n	80025f6 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1a      	ldr	r2, [pc, #104]	; (8002608 <HAL_SPI_MspInit+0xe4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d128      	bne.n	80025f6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_SPI_MspInit+0xe0>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	4a16      	ldr	r2, [pc, #88]	; (8002604 <HAL_SPI_MspInit+0xe0>)
 80025aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ae:	6593      	str	r3, [r2, #88]	; 0x58
 80025b0:	4b14      	ldr	r3, [pc, #80]	; (8002604 <HAL_SPI_MspInit+0xe0>)
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_SPI_MspInit+0xe0>)
 80025be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c0:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_SPI_MspInit+0xe0>)
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_SPI_MspInit+0xe0>)
 80025ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80025d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80025d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025e6:	2306      	movs	r3, #6
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ea:	f107 031c 	add.w	r3, r7, #28
 80025ee:	4619      	mov	r1, r3
 80025f0:	4806      	ldr	r0, [pc, #24]	; (800260c <HAL_SPI_MspInit+0xe8>)
 80025f2:	f002 fc4b 	bl	8004e8c <HAL_GPIO_Init>
}
 80025f6:	bf00      	nop
 80025f8:	3730      	adds	r7, #48	; 0x30
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40013000 	.word	0x40013000
 8002604:	40021000 	.word	0x40021000
 8002608:	40003c00 	.word	0x40003c00
 800260c:	48000800 	.word	0x48000800

08002610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002620:	d114      	bne.n	800264c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002622:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_TIM_Base_MspInit+0x78>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	4a18      	ldr	r2, [pc, #96]	; (8002688 <HAL_TIM_Base_MspInit+0x78>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6593      	str	r3, [r2, #88]	; 0x58
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <HAL_TIM_Base_MspInit+0x78>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	201c      	movs	r0, #28
 8002640:	f001 fc3d 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002644:	201c      	movs	r0, #28
 8002646:	f001 fc54 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800264a:	e018      	b.n	800267e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0e      	ldr	r2, [pc, #56]	; (800268c <HAL_TIM_Base_MspInit+0x7c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d113      	bne.n	800267e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <HAL_TIM_Base_MspInit+0x78>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <HAL_TIM_Base_MspInit+0x78>)
 800265c:	f043 0310 	orr.w	r3, r3, #16
 8002660:	6593      	str	r3, [r2, #88]	; 0x58
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_TIM_Base_MspInit+0x78>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800266e:	2200      	movs	r2, #0
 8002670:	2100      	movs	r1, #0
 8002672:	2036      	movs	r0, #54	; 0x36
 8002674:	f001 fc23 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002678:	2036      	movs	r0, #54	; 0x36
 800267a:	f001 fc3a 	bl	8003ef2 <HAL_NVIC_EnableIRQ>
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	40001000 	.word	0x40001000

08002690 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b098      	sub	sp, #96	; 0x60
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	2254      	movs	r2, #84	; 0x54
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f006 fb57 	bl	8008d54 <memset>
  if(hpcd->Instance==USB)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a11      	ldr	r2, [pc, #68]	; (80026f0 <HAL_PCD_MspInit+0x60>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d11a      	bne.n	80026e6 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80026b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026b4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80026b6:	2300      	movs	r3, #0
 80026b8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ba:	f107 030c 	add.w	r3, r7, #12
 80026be:	4618      	mov	r0, r3
 80026c0:	f004 faf6 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80026ca:	f7fe ffc7 	bl	800165c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_PCD_MspInit+0x64>)
 80026d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d2:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <HAL_PCD_MspInit+0x64>)
 80026d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026d8:	6593      	str	r3, [r2, #88]	; 0x58
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_PCD_MspInit+0x64>)
 80026dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80026e6:	bf00      	nop
 80026e8:	3760      	adds	r7, #96	; 0x60
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40005c00 	.word	0x40005c00
 80026f4:	40021000 	.word	0x40021000

080026f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80026fc:	f004 fa76 	bl	8006bec <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002700:	e7fe      	b.n	8002700 <NMI_Handler+0x8>

08002702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <HardFault_Handler+0x4>

08002708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800270c:	e7fe      	b.n	800270c <MemManage_Handler+0x4>

0800270e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002712:	e7fe      	b.n	8002712 <BusFault_Handler+0x4>

08002714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <UsageFault_Handler+0x4>

0800271a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002748:	f000 f9c0 	bl	8002acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}

08002750 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <DMA1_Channel1_IRQHandler+0x10>)
 8002756:	f001 fc8f 	bl	8004078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000244 	.word	0x20000244

08002764 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <DMA1_Channel2_IRQHandler+0x10>)
 800276a:	f001 fc85 	bl	8004078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000052c 	.word	0x2000052c

08002778 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <DMA1_Channel3_IRQHandler+0x10>)
 800277e:	f001 fc7b 	bl	8004078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	2000058c 	.word	0x2000058c

0800278c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <DMA1_Channel4_IRQHandler+0x10>)
 8002792:	f001 fc71 	bl	8004078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	200005ec 	.word	0x200005ec

080027a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <DMA1_Channel5_IRQHandler+0x10>)
 80027a6:	f001 fc67 	bl	8004078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200002a4 	.word	0x200002a4

080027b4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <FDCAN1_IT0_IRQHandler+0x10>)
 80027ba:	f002 f8fb 	bl	80049b4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000304 	.word	0x20000304

080027c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// T_out = ((ARR+1)(PSC+1))/F_clk

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <TIM2_IRQHandler+0x10>)
 80027ce:	f004 fe66 	bl	800749e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000084c 	.word	0x2000084c

080027dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <TIM6_DAC_IRQHandler+0x10>)
 80027e2:	f004 fe5c 	bl	800749e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000898 	.word	0x20000898

080027f0 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <FDCAN2_IT0_IRQHandler+0x10>)
 80027f6:	f002 f8dd 	bl	80049b4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000368 	.word	0x20000368

08002804 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <FDCAN3_IT1_IRQHandler+0x10>)
 800280a:	f002 f8d3 	bl	80049b4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200003cc 	.word	0x200003cc

08002818 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <SystemInit+0x20>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	4a05      	ldr	r2, [pc, #20]	; (8002838 <SystemInit+0x20>)
 8002824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <TEMP_INIT>:





error_handler TEMP_INIT(){
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0

	error_handler status;

	status = MCP_INIT(MCP_0);
 8002842:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <TEMP_INIT+0x34>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe ff0e 	bl	8001668 <MCP_INIT>
 800284c:	4603      	mov	r3, r0
 800284e:	71fb      	strb	r3, [r7, #7]
	if(status != MCP_CONFIG_OK){
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	2b0c      	cmp	r3, #12
 8002854:	d001      	beq.n	800285a <TEMP_INIT+0x1e>
		return status;
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	e005      	b.n	8002866 <TEMP_INIT+0x2a>
	}

	//status = MCP_INIT(MCP_1);
	if(status != MCP_CONFIG_OK){
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	2b0c      	cmp	r3, #12
 800285e:	d001      	beq.n	8002864 <TEMP_INIT+0x28>
		return status;
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	e000      	b.n	8002866 <TEMP_INIT+0x2a>
	}
	adc5_convert = 0;
	if(adc5_result_dma[0] <= 0){
		return ADC_CONVERT_FAIL;
	}*/
	return TEMP_INIT_SUCCESS;
 8002864:	2318      	movs	r3, #24
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000004 	.word	0x20000004

08002874 <UPDATE_TEMP>:

error_handler UPDATE_TEMP(){
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_result_dma,adc1_count); //starts adc conversion sets convert to 2, indicates running prevents restarting while running.
		adc1_convert = 2;
	}*/


	if(MCP_TEMP_READ(MCP_0) != MCP_TEMP_OK){
 8002878:	4b52      	ldr	r3, [pc, #328]	; (80029c4 <UPDATE_TEMP+0x150>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe ff8f 	bl	80017a0 <MCP_TEMP_READ>
 8002882:	4603      	mov	r3, r0
 8002884:	2b0d      	cmp	r3, #13
 8002886:	d001      	beq.n	800288c <UPDATE_TEMP+0x18>
		return MCP_0_READFAIL; //read fail
 8002888:	230e      	movs	r3, #14
 800288a:	e098      	b.n	80029be <UPDATE_TEMP+0x14a>
	}
	temps[4] = (int32_t)roundf((mcp_temp_data[0]*16 + mcp_temp_data[1]/16)*10.0f);
 800288c:	4b4e      	ldr	r3, [pc, #312]	; (80029c8 <UPDATE_TEMP+0x154>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	4a4d      	ldr	r2, [pc, #308]	; (80029c8 <UPDATE_TEMP+0x154>)
 8002894:	7852      	ldrb	r2, [r2, #1]
 8002896:	0912      	lsrs	r2, r2, #4
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	4413      	add	r3, r2
 800289c:	ee07 3a90 	vmov	s15, r3
 80028a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028b0:	ee17 2a90 	vmov	r2, s15
 80028b4:	4b45      	ldr	r3, [pc, #276]	; (80029cc <UPDATE_TEMP+0x158>)
 80028b6:	611a      	str	r2, [r3, #16]

	//if(MCP_TEMP_READ(MCP_1) == MCP_TEMP_OK){
		//return MCP_1_READFAIL; //read fail
	//}
	temps[5] = (int32_t)roundf((mcp_temp_data[0]*16 + mcp_temp_data[1]/16)*10.0f);
 80028b8:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <UPDATE_TEMP+0x154>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	4a42      	ldr	r2, [pc, #264]	; (80029c8 <UPDATE_TEMP+0x154>)
 80028c0:	7852      	ldrb	r2, [r2, #1]
 80028c2:	0912      	lsrs	r2, r2, #4
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	4413      	add	r3, r2
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028dc:	ee17 2a90 	vmov	r2, s15
 80028e0:	4b3a      	ldr	r3, [pc, #232]	; (80029cc <UPDATE_TEMP+0x158>)
 80028e2:	615a      	str	r2, [r3, #20]


	if(temps[0] > ADC1_1_MAX_TEMP || temps[0] < ADC1_1_MIN_TEMP ){
 80028e4:	4b39      	ldr	r3, [pc, #228]	; (80029cc <UPDATE_TEMP+0x158>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2bfa      	cmp	r3, #250	; 0xfa
 80028ea:	dc03      	bgt.n	80028f4 <UPDATE_TEMP+0x80>
 80028ec:	4b37      	ldr	r3, [pc, #220]	; (80029cc <UPDATE_TEMP+0x158>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	da01      	bge.n	80028f8 <UPDATE_TEMP+0x84>
		return ADC1_1_TEMPFAULT; //temp fault
 80028f4:	2310      	movs	r3, #16
 80028f6:	e062      	b.n	80029be <UPDATE_TEMP+0x14a>
	}
	if(temps[1] > ADC1_2_MAX_TEMP || temps[1] < ADC1_2_MIN_TEMP ){
 80028f8:	4b34      	ldr	r3, [pc, #208]	; (80029cc <UPDATE_TEMP+0x158>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2bfa      	cmp	r3, #250	; 0xfa
 80028fe:	dc03      	bgt.n	8002908 <UPDATE_TEMP+0x94>
 8002900:	4b32      	ldr	r3, [pc, #200]	; (80029cc <UPDATE_TEMP+0x158>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	da01      	bge.n	800290c <UPDATE_TEMP+0x98>
		return ADC1_2_TEMPFAULT; //temp fault
 8002908:	2311      	movs	r3, #17
 800290a:	e058      	b.n	80029be <UPDATE_TEMP+0x14a>
	}
	if(temps[2] > ADC1_3_MAX_TEMP || temps[2] < ADC1_3_MIN_TEMP ){
 800290c:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <UPDATE_TEMP+0x158>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2bfa      	cmp	r3, #250	; 0xfa
 8002912:	dc03      	bgt.n	800291c <UPDATE_TEMP+0xa8>
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <UPDATE_TEMP+0x158>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	da01      	bge.n	8002920 <UPDATE_TEMP+0xac>
		return ADC1_3_TEMPFAULT; //temp fault
 800291c:	2312      	movs	r3, #18
 800291e:	e04e      	b.n	80029be <UPDATE_TEMP+0x14a>
	}
	if(temps[3] > ADC1_4_MAX_TEMP || temps[3] < ADC1_4_MIN_TEMP ){
 8002920:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <UPDATE_TEMP+0x158>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2bfa      	cmp	r3, #250	; 0xfa
 8002926:	dc03      	bgt.n	8002930 <UPDATE_TEMP+0xbc>
 8002928:	4b28      	ldr	r3, [pc, #160]	; (80029cc <UPDATE_TEMP+0x158>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	da01      	bge.n	8002934 <UPDATE_TEMP+0xc0>
		return ADC1_4_TEMPFAULT; //temp fault
 8002930:	2313      	movs	r3, #19
 8002932:	e044      	b.n	80029be <UPDATE_TEMP+0x14a>
	}
	if((float)(temps[4]/16.0f) > MCP_0_MAX_TEMP || (float)(temps[4]/16.0f) < MCP_0_MIN_TEMP ){
 8002934:	4b25      	ldr	r3, [pc, #148]	; (80029cc <UPDATE_TEMP+0x158>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	ee07 3a90 	vmov	s15, r3
 800293c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002940:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002948:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80029d0 <UPDATE_TEMP+0x15c>
 800294c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002954:	dc0e      	bgt.n	8002974 <UPDATE_TEMP+0x100>
 8002956:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <UPDATE_TEMP+0x158>)
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002962:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002966:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800296a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002972:	d501      	bpl.n	8002978 <UPDATE_TEMP+0x104>
		return MCP0_TEMPFAULT; //temp fault
 8002974:	2314      	movs	r3, #20
 8002976:	e022      	b.n	80029be <UPDATE_TEMP+0x14a>
	}
	if((float)(temps[5]/16.0f) > MCP_1_MAX_TEMP || (float)(temps[5]/16.0f) < MCP_1_MIN_TEMP ){
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <UPDATE_TEMP+0x158>)
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	ee07 3a90 	vmov	s15, r3
 8002980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002984:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800298c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80029d0 <UPDATE_TEMP+0x15c>
 8002990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	dc0e      	bgt.n	80029b8 <UPDATE_TEMP+0x144>
 800299a:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <UPDATE_TEMP+0x158>)
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029a6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80029aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b6:	d501      	bpl.n	80029bc <UPDATE_TEMP+0x148>
		return MCP1_TEMPFAULT; //temp fault
 80029b8:	2315      	movs	r3, #21
 80029ba:	e000      	b.n	80029be <UPDATE_TEMP+0x14a>
	}
	return TEMP_OK;
 80029bc:	2316      	movs	r3, #22
}
 80029be:	4618      	mov	r0, r3
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000004 	.word	0x20000004
 80029c8:	20000bc4 	.word	0x20000bc4
 80029cc:	20000bcc 	.word	0x20000bcc
 80029d0:	437a0000 	.word	0x437a0000

080029d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029d4:	480d      	ldr	r0, [pc, #52]	; (8002a0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029d8:	f7ff ff1e 	bl	8002818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029dc:	480c      	ldr	r0, [pc, #48]	; (8002a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80029de:	490d      	ldr	r1, [pc, #52]	; (8002a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029e0:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <LoopForever+0xe>)
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029e4:	e002      	b.n	80029ec <LoopCopyDataInit>

080029e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ea:	3304      	adds	r3, #4

080029ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f0:	d3f9      	bcc.n	80029e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80029f4:	4c0a      	ldr	r4, [pc, #40]	; (8002a20 <LoopForever+0x16>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f8:	e001      	b.n	80029fe <LoopFillZerobss>

080029fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029fc:	3204      	adds	r2, #4

080029fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a00:	d3fb      	bcc.n	80029fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a02:	f006 f9b5 	bl	8008d70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a06:	f7fd ffc3 	bl	8000990 <main>

08002a0a <LoopForever>:

LoopForever:
    b LoopForever
 8002a0a:	e7fe      	b.n	8002a0a <LoopForever>
  ldr   r0, =_estack
 8002a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a14:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002a18:	08008fa0 	.word	0x08008fa0
  ldr r2, =_sbss
 8002a1c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002a20:	20000d28 	.word	0x20000d28

08002a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a24:	e7fe      	b.n	8002a24 <ADC1_2_IRQHandler>

08002a26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a30:	2003      	movs	r0, #3
 8002a32:	f001 fa39 	bl	8003ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a36:	200f      	movs	r0, #15
 8002a38:	f000 f80e 	bl	8002a58 <HAL_InitTick>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	71fb      	strb	r3, [r7, #7]
 8002a46:	e001      	b.n	8002a4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a48:	f7ff f8ce 	bl	8001be8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a4c:	79fb      	ldrb	r3, [r7, #7]

}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_InitTick+0x68>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d022      	beq.n	8002ab2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a6c:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <HAL_InitTick+0x6c>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <HAL_InitTick+0x68>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 fa44 	bl	8003f0e <HAL_SYSTICK_Config>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10f      	bne.n	8002aac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b0f      	cmp	r3, #15
 8002a90:	d809      	bhi.n	8002aa6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a92:	2200      	movs	r2, #0
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9a:	f001 fa10 	bl	8003ebe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <HAL_InitTick+0x70>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	e007      	b.n	8002ab6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
 8002aaa:	e004      	b.n	8002ab6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e001      	b.n	8002ab6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	2000000c 	.word	0x2000000c
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	20000008 	.word	0x20000008

08002acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_IncTick+0x1c>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_IncTick+0x20>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	4a03      	ldr	r2, [pc, #12]	; (8002ae8 <HAL_IncTick+0x1c>)
 8002adc:	6013      	str	r3, [r2, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	20000bec 	.word	0x20000bec
 8002aec:	2000000c 	.word	0x2000000c

08002af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return uwTick;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_GetTick+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000bec 	.word	0x20000bec

08002b08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	609a      	str	r2, [r3, #8]
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	609a      	str	r2, [r3, #8]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3360      	adds	r3, #96	; 0x60
 8002b82:	461a      	mov	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <LL_ADC_SetOffset+0x44>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	03fff000 	.word	0x03fff000

08002bb8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3360      	adds	r3, #96	; 0x60
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3360      	adds	r3, #96	; 0x60
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b087      	sub	sp, #28
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3360      	adds	r3, #96	; 0x60
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	3360      	adds	r3, #96	; 0x60
 8002c60:	461a      	mov	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	615a      	str	r2, [r3, #20]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	3330      	adds	r3, #48	; 0x30
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	4413      	add	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	211f      	movs	r1, #31
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	401a      	ands	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0e9b      	lsrs	r3, r3, #26
 8002ce4:	f003 011f 	and.w	r1, r3, #31
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cf8:	bf00      	nop
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3314      	adds	r3, #20
 8002d14:	461a      	mov	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	0e5b      	lsrs	r3, r3, #25
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	4413      	add	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	0d1b      	lsrs	r3, r3, #20
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	2107      	movs	r1, #7
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	401a      	ands	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	0d1b      	lsrs	r3, r3, #20
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	fa01 f303 	lsl.w	r3, r1, r3
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d74:	43db      	mvns	r3, r3
 8002d76:	401a      	ands	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f003 0318 	and.w	r3, r3, #24
 8002d7e:	4908      	ldr	r1, [pc, #32]	; (8002da0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d80:	40d9      	lsrs	r1, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	400b      	ands	r3, r1
 8002d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	0007ffff 	.word	0x0007ffff

08002da4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002db4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6093      	str	r3, [r2, #8]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ddc:	d101      	bne.n	8002de2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e2c:	d101      	bne.n	8002e32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <LL_ADC_IsEnabled+0x18>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <LL_ADC_IsEnabled+0x1a>
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d101      	bne.n	8002e7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d101      	bne.n	8002ea4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b089      	sub	sp, #36	; 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e1a9      	b.n	8003222 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7fe fea7 	bl	8001c30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff67 	bl	8002dc8 <LL_ADC_IsDeepPowerDownEnabled>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff4d 	bl	8002da4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ff82 	bl	8002e18 <LL_ADC_IsInternalRegulatorEnabled>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d115      	bne.n	8002f46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff66 	bl	8002df0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f24:	4b9c      	ldr	r3, [pc, #624]	; (8003198 <HAL_ADC_Init+0x2e4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	4a9c      	ldr	r2, [pc, #624]	; (800319c <HAL_ADC_Init+0x2e8>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	099b      	lsrs	r3, r3, #6
 8002f32:	3301      	adds	r3, #1
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f38:	e002      	b.n	8002f40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f9      	bne.n	8002f3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ff64 	bl	8002e18 <LL_ADC_IsInternalRegulatorEnabled>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10d      	bne.n	8002f72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5a:	f043 0210 	orr.w	r2, r3, #16
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f66:	f043 0201 	orr.w	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff ff75 	bl	8002e66 <LL_ADC_REG_IsConversionOngoing>
 8002f7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 8142 	bne.w	8003210 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 813e 	bne.w	8003210 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f9c:	f043 0202 	orr.w	r2, r3, #2
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff49 	bl	8002e40 <LL_ADC_IsEnabled>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d141      	bne.n	8003038 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fbc:	d004      	beq.n	8002fc8 <HAL_ADC_Init+0x114>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a77      	ldr	r2, [pc, #476]	; (80031a0 <HAL_ADC_Init+0x2ec>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d10f      	bne.n	8002fe8 <HAL_ADC_Init+0x134>
 8002fc8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fcc:	f7ff ff38 	bl	8002e40 <LL_ADC_IsEnabled>
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	4873      	ldr	r0, [pc, #460]	; (80031a0 <HAL_ADC_Init+0x2ec>)
 8002fd4:	f7ff ff34 	bl	8002e40 <LL_ADC_IsEnabled>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4323      	orrs	r3, r4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e012      	b.n	800300e <HAL_ADC_Init+0x15a>
 8002fe8:	486e      	ldr	r0, [pc, #440]	; (80031a4 <HAL_ADC_Init+0x2f0>)
 8002fea:	f7ff ff29 	bl	8002e40 <LL_ADC_IsEnabled>
 8002fee:	4604      	mov	r4, r0
 8002ff0:	486d      	ldr	r0, [pc, #436]	; (80031a8 <HAL_ADC_Init+0x2f4>)
 8002ff2:	f7ff ff25 	bl	8002e40 <LL_ADC_IsEnabled>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	431c      	orrs	r4, r3
 8002ffa:	486c      	ldr	r0, [pc, #432]	; (80031ac <HAL_ADC_Init+0x2f8>)
 8002ffc:	f7ff ff20 	bl	8002e40 <LL_ADC_IsEnabled>
 8003000:	4603      	mov	r3, r0
 8003002:	4323      	orrs	r3, r4
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d012      	beq.n	8003038 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800301a:	d004      	beq.n	8003026 <HAL_ADC_Init+0x172>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a5f      	ldr	r2, [pc, #380]	; (80031a0 <HAL_ADC_Init+0x2ec>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d101      	bne.n	800302a <HAL_ADC_Init+0x176>
 8003026:	4a62      	ldr	r2, [pc, #392]	; (80031b0 <HAL_ADC_Init+0x2fc>)
 8003028:	e000      	b.n	800302c <HAL_ADC_Init+0x178>
 800302a:	4a62      	ldr	r2, [pc, #392]	; (80031b4 <HAL_ADC_Init+0x300>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f7ff fd68 	bl	8002b08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7f5b      	ldrb	r3, [r3, #29]
 800303c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003042:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003048:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800304e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003056:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003062:	2b01      	cmp	r3, #1
 8003064:	d106      	bne.n	8003074 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	3b01      	subs	r3, #1
 800306c:	045b      	lsls	r3, r3, #17
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d009      	beq.n	8003090 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <HAL_ADC_Init+0x304>)
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	69b9      	ldr	r1, [r7, #24]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fee4 	bl	8002e8c <LL_ADC_INJ_IsConversionOngoing>
 80030c4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d17f      	bne.n	80031cc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d17c      	bne.n	80031cc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80030d6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030de:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ee:	f023 0302 	bic.w	r3, r3, #2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	69b9      	ldr	r1, [r7, #24]
 80030f8:	430b      	orrs	r3, r1
 80030fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d017      	beq.n	8003134 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003112:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800311c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003120:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6911      	ldr	r1, [r2, #16]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	430b      	orrs	r3, r1
 800312e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003132:	e013      	b.n	800315c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003142:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003154:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003158:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003162:	2b01      	cmp	r3, #1
 8003164:	d12a      	bne.n	80031bc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800317c:	4311      	orrs	r1, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003182:	4311      	orrs	r1, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003188:	430a      	orrs	r2, r1
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	611a      	str	r2, [r3, #16]
 8003196:	e019      	b.n	80031cc <HAL_ADC_Init+0x318>
 8003198:	20000000 	.word	0x20000000
 800319c:	053e2d63 	.word	0x053e2d63
 80031a0:	50000100 	.word	0x50000100
 80031a4:	50000400 	.word	0x50000400
 80031a8:	50000500 	.word	0x50000500
 80031ac:	50000600 	.word	0x50000600
 80031b0:	50000300 	.word	0x50000300
 80031b4:	50000700 	.word	0x50000700
 80031b8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d10c      	bne.n	80031ee <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f023 010f 	bic.w	r1, r3, #15
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	1e5a      	subs	r2, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
 80031ec:	e007      	b.n	80031fe <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 020f 	bic.w	r2, r2, #15
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003202:	f023 0303 	bic.w	r3, r3, #3
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	65da      	str	r2, [r3, #92]	; 0x5c
 800320e:	e007      	b.n	8003220 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	f043 0210 	orr.w	r2, r3, #16
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003220:	7ffb      	ldrb	r3, [r7, #31]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3724      	adds	r7, #36	; 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd90      	pop	{r4, r7, pc}
 800322a:	bf00      	nop

0800322c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b0b6      	sub	sp, #216	; 0xd8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003246:	2b01      	cmp	r3, #1
 8003248:	d102      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x24>
 800324a:	2302      	movs	r3, #2
 800324c:	f000 bc13 	b.w	8003a76 <HAL_ADC_ConfigChannel+0x84a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fe02 	bl	8002e66 <LL_ADC_REG_IsConversionOngoing>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	f040 83f3 	bne.w	8003a50 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	f7ff fd18 	bl	8002cac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fdf0 	bl	8002e66 <LL_ADC_REG_IsConversionOngoing>
 8003286:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fdfc 	bl	8002e8c <LL_ADC_INJ_IsConversionOngoing>
 8003294:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003298:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 81d9 	bne.w	8003654 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 81d4 	bne.w	8003654 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032b4:	d10f      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2200      	movs	r2, #0
 80032c0:	4619      	mov	r1, r3
 80032c2:	f7ff fd1f 	bl	8002d04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fcd9 	bl	8002c86 <LL_ADC_SetSamplingTimeCommonConfig>
 80032d4:	e00e      	b.n	80032f4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6819      	ldr	r1, [r3, #0]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	461a      	mov	r2, r3
 80032e4:	f7ff fd0e 	bl	8002d04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fcc9 	bl	8002c86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	695a      	ldr	r2, [r3, #20]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	08db      	lsrs	r3, r3, #3
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b04      	cmp	r3, #4
 8003314:	d022      	beq.n	800335c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6919      	ldr	r1, [r3, #16]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003326:	f7ff fc23 	bl	8002b70 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6919      	ldr	r1, [r3, #16]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	461a      	mov	r2, r3
 8003338:	f7ff fc6f 	bl	8002c1a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003348:	2b01      	cmp	r3, #1
 800334a:	d102      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x126>
 800334c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003350:	e000      	b.n	8003354 <HAL_ADC_ConfigChannel+0x128>
 8003352:	2300      	movs	r3, #0
 8003354:	461a      	mov	r2, r3
 8003356:	f7ff fc7b 	bl	8002c50 <LL_ADC_SetOffsetSaturation>
 800335a:	e17b      	b.n	8003654 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2100      	movs	r1, #0
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fc28 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 8003368:	4603      	mov	r3, r0
 800336a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x15c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fc1d 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 800337e:	4603      	mov	r3, r0
 8003380:	0e9b      	lsrs	r3, r3, #26
 8003382:	f003 021f 	and.w	r2, r3, #31
 8003386:	e01e      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x19a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fc12 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 8003394:	4603      	mov	r3, r0
 8003396:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80033b6:	2320      	movs	r3, #32
 80033b8:	e004      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80033ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d105      	bne.n	80033de <HAL_ADC_ConfigChannel+0x1b2>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	0e9b      	lsrs	r3, r3, #26
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	e018      	b.n	8003410 <HAL_ADC_ConfigChannel+0x1e4>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80033f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80033fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003402:	2320      	movs	r3, #32
 8003404:	e004      	b.n	8003410 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003410:	429a      	cmp	r2, r3
 8003412:	d106      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2200      	movs	r2, #0
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fbe1 	bl	8002be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2101      	movs	r1, #1
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fbc5 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 800342e:	4603      	mov	r3, r0
 8003430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10a      	bne.n	800344e <HAL_ADC_ConfigChannel+0x222>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2101      	movs	r1, #1
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fbba 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 8003444:	4603      	mov	r3, r0
 8003446:	0e9b      	lsrs	r3, r3, #26
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	e01e      	b.n	800348c <HAL_ADC_ConfigChannel+0x260>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2101      	movs	r1, #1
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fbaf 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 800345a:	4603      	mov	r3, r0
 800345c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800346c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800347c:	2320      	movs	r3, #32
 800347e:	e004      	b.n	800348a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003480:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003484:	fab3 f383 	clz	r3, r3
 8003488:	b2db      	uxtb	r3, r3
 800348a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003494:	2b00      	cmp	r3, #0
 8003496:	d105      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x278>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0e9b      	lsrs	r3, r3, #26
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	e018      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x2aa>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80034b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80034c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80034c8:	2320      	movs	r3, #32
 80034ca:	e004      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80034cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034d0:	fab3 f383 	clz	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d106      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2200      	movs	r2, #0
 80034e0:	2101      	movs	r1, #1
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff fb7e 	bl	8002be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2102      	movs	r1, #2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fb62 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10a      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x2e8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2102      	movs	r1, #2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fb57 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 800350a:	4603      	mov	r3, r0
 800350c:	0e9b      	lsrs	r3, r3, #26
 800350e:	f003 021f 	and.w	r2, r3, #31
 8003512:	e01e      	b.n	8003552 <HAL_ADC_ConfigChannel+0x326>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2102      	movs	r1, #2
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fb4c 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 8003520:	4603      	mov	r3, r0
 8003522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003532:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800353a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003542:	2320      	movs	r3, #32
 8003544:	e004      	b.n	8003550 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003546:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800354a:	fab3 f383 	clz	r3, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355a:	2b00      	cmp	r3, #0
 800355c:	d105      	bne.n	800356a <HAL_ADC_ConfigChannel+0x33e>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	0e9b      	lsrs	r3, r3, #26
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	e016      	b.n	8003598 <HAL_ADC_ConfigChannel+0x36c>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800357c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800357e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003582:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800358a:	2320      	movs	r3, #32
 800358c:	e004      	b.n	8003598 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800358e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003598:	429a      	cmp	r2, r3
 800359a:	d106      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2102      	movs	r1, #2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fb1d 	bl	8002be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2103      	movs	r1, #3
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fb01 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x3aa>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2103      	movs	r1, #3
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff faf6 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 80035cc:	4603      	mov	r3, r0
 80035ce:	0e9b      	lsrs	r3, r3, #26
 80035d0:	f003 021f 	and.w	r2, r3, #31
 80035d4:	e017      	b.n	8003606 <HAL_ADC_ConfigChannel+0x3da>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2103      	movs	r1, #3
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff faeb 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 80035e2:	4603      	mov	r3, r0
 80035e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80035ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035f0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80035f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80035f8:	2320      	movs	r3, #32
 80035fa:	e003      	b.n	8003604 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80035fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360e:	2b00      	cmp	r3, #0
 8003610:	d105      	bne.n	800361e <HAL_ADC_ConfigChannel+0x3f2>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	0e9b      	lsrs	r3, r3, #26
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	e011      	b.n	8003642 <HAL_ADC_ConfigChannel+0x416>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800362c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800362e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003636:	2320      	movs	r3, #32
 8003638:	e003      	b.n	8003642 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800363a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363c:	fab3 f383 	clz	r3, r3
 8003640:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003642:	429a      	cmp	r2, r3
 8003644:	d106      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2200      	movs	r2, #0
 800364c:	2103      	movs	r1, #3
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fac8 	bl	8002be4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fbf1 	bl	8002e40 <LL_ADC_IsEnabled>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	f040 813d 	bne.w	80038e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	461a      	mov	r2, r3
 8003674:	f7ff fb72 	bl	8002d5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4aa2      	ldr	r2, [pc, #648]	; (8003908 <HAL_ADC_ConfigChannel+0x6dc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	f040 812e 	bne.w	80038e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10b      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x480>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	0e9b      	lsrs	r3, r3, #26
 800369a:	3301      	adds	r3, #1
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	2b09      	cmp	r3, #9
 80036a2:	bf94      	ite	ls
 80036a4:	2301      	movls	r3, #1
 80036a6:	2300      	movhi	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e019      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x4b4>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80036ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80036be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80036c4:	2320      	movs	r3, #32
 80036c6:	e003      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80036c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	3301      	adds	r3, #1
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	2b09      	cmp	r3, #9
 80036d8:	bf94      	ite	ls
 80036da:	2301      	movls	r3, #1
 80036dc:	2300      	movhi	r3, #0
 80036de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d079      	beq.n	80037d8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d107      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x4d4>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	0e9b      	lsrs	r3, r3, #26
 80036f6:	3301      	adds	r3, #1
 80036f8:	069b      	lsls	r3, r3, #26
 80036fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036fe:	e015      	b.n	800372c <HAL_ADC_ConfigChannel+0x500>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800370e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003710:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003718:	2320      	movs	r3, #32
 800371a:	e003      	b.n	8003724 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800371c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	3301      	adds	r3, #1
 8003726:	069b      	lsls	r3, r3, #26
 8003728:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <HAL_ADC_ConfigChannel+0x520>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0e9b      	lsrs	r3, r3, #26
 800373e:	3301      	adds	r3, #1
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	2101      	movs	r1, #1
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	e017      	b.n	800377c <HAL_ADC_ConfigChannel+0x550>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003754:	fa93 f3a3 	rbit	r3, r3
 8003758:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800375a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800375e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003764:	2320      	movs	r3, #32
 8003766:	e003      	b.n	8003770 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	3301      	adds	r3, #1
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	2101      	movs	r1, #1
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	ea42 0103 	orr.w	r1, r2, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x576>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	0e9b      	lsrs	r3, r3, #26
 8003792:	3301      	adds	r3, #1
 8003794:	f003 021f 	and.w	r2, r3, #31
 8003798:	4613      	mov	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4413      	add	r3, r2
 800379e:	051b      	lsls	r3, r3, #20
 80037a0:	e018      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x5a8>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80037b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80037ba:	2320      	movs	r3, #32
 80037bc:	e003      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80037be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c0:	fab3 f383 	clz	r3, r3
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	3301      	adds	r3, #1
 80037c8:	f003 021f 	and.w	r2, r3, #31
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037d4:	430b      	orrs	r3, r1
 80037d6:	e07e      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x5c8>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	0e9b      	lsrs	r3, r3, #26
 80037ea:	3301      	adds	r3, #1
 80037ec:	069b      	lsls	r3, r3, #26
 80037ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037f2:	e015      	b.n	8003820 <HAL_ADC_ConfigChannel+0x5f4>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800380c:	2320      	movs	r3, #32
 800380e:	e003      	b.n	8003818 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	3301      	adds	r3, #1
 800381a:	069b      	lsls	r3, r3, #26
 800381c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003828:	2b00      	cmp	r3, #0
 800382a:	d109      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x614>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0e9b      	lsrs	r3, r3, #26
 8003832:	3301      	adds	r3, #1
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	2101      	movs	r1, #1
 800383a:	fa01 f303 	lsl.w	r3, r1, r3
 800383e:	e017      	b.n	8003870 <HAL_ADC_ConfigChannel+0x644>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	61fb      	str	r3, [r7, #28]
  return result;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003858:	2320      	movs	r3, #32
 800385a:	e003      	b.n	8003864 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	fab3 f383 	clz	r3, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	3301      	adds	r3, #1
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	2101      	movs	r1, #1
 800386c:	fa01 f303 	lsl.w	r3, r1, r3
 8003870:	ea42 0103 	orr.w	r1, r2, r3
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10d      	bne.n	800389c <HAL_ADC_ConfigChannel+0x670>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	0e9b      	lsrs	r3, r3, #26
 8003886:	3301      	adds	r3, #1
 8003888:	f003 021f 	and.w	r2, r3, #31
 800388c:	4613      	mov	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4413      	add	r3, r2
 8003892:	3b1e      	subs	r3, #30
 8003894:	051b      	lsls	r3, r3, #20
 8003896:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800389a:	e01b      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x6a8>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	fa93 f3a3 	rbit	r3, r3
 80038a8:	613b      	str	r3, [r7, #16]
  return result;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80038b4:	2320      	movs	r3, #32
 80038b6:	e003      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	3301      	adds	r3, #1
 80038c2:	f003 021f 	and.w	r2, r3, #31
 80038c6:	4613      	mov	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4413      	add	r3, r2
 80038cc:	3b1e      	subs	r3, #30
 80038ce:	051b      	lsls	r3, r3, #20
 80038d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038da:	4619      	mov	r1, r3
 80038dc:	f7ff fa12 	bl	8002d04 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4b09      	ldr	r3, [pc, #36]	; (800390c <HAL_ADC_ConfigChannel+0x6e0>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80be 	beq.w	8003a6a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038f6:	d004      	beq.n	8003902 <HAL_ADC_ConfigChannel+0x6d6>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a04      	ldr	r2, [pc, #16]	; (8003910 <HAL_ADC_ConfigChannel+0x6e4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d10a      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x6ec>
 8003902:	4b04      	ldr	r3, [pc, #16]	; (8003914 <HAL_ADC_ConfigChannel+0x6e8>)
 8003904:	e009      	b.n	800391a <HAL_ADC_ConfigChannel+0x6ee>
 8003906:	bf00      	nop
 8003908:	407f0000 	.word	0x407f0000
 800390c:	80080000 	.word	0x80080000
 8003910:	50000100 	.word	0x50000100
 8003914:	50000300 	.word	0x50000300
 8003918:	4b59      	ldr	r3, [pc, #356]	; (8003a80 <HAL_ADC_ConfigChannel+0x854>)
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff f91a 	bl	8002b54 <LL_ADC_GetCommonPathInternalCh>
 8003920:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a56      	ldr	r2, [pc, #344]	; (8003a84 <HAL_ADC_ConfigChannel+0x858>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_ADC_ConfigChannel+0x70c>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a55      	ldr	r2, [pc, #340]	; (8003a88 <HAL_ADC_ConfigChannel+0x85c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d13a      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800393c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d134      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800394c:	d005      	beq.n	800395a <HAL_ADC_ConfigChannel+0x72e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a4e      	ldr	r2, [pc, #312]	; (8003a8c <HAL_ADC_ConfigChannel+0x860>)
 8003954:	4293      	cmp	r3, r2
 8003956:	f040 8085 	bne.w	8003a64 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003962:	d004      	beq.n	800396e <HAL_ADC_ConfigChannel+0x742>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a49      	ldr	r2, [pc, #292]	; (8003a90 <HAL_ADC_ConfigChannel+0x864>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d101      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x746>
 800396e:	4a49      	ldr	r2, [pc, #292]	; (8003a94 <HAL_ADC_ConfigChannel+0x868>)
 8003970:	e000      	b.n	8003974 <HAL_ADC_ConfigChannel+0x748>
 8003972:	4a43      	ldr	r2, [pc, #268]	; (8003a80 <HAL_ADC_ConfigChannel+0x854>)
 8003974:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003978:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f7ff f8d5 	bl	8002b2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003984:	4b44      	ldr	r3, [pc, #272]	; (8003a98 <HAL_ADC_ConfigChannel+0x86c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	099b      	lsrs	r3, r3, #6
 800398a:	4a44      	ldr	r2, [pc, #272]	; (8003a9c <HAL_ADC_ConfigChannel+0x870>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800399e:	e002      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f9      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039ac:	e05a      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a3b      	ldr	r2, [pc, #236]	; (8003aa0 <HAL_ADC_ConfigChannel+0x874>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d125      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d11f      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a31      	ldr	r2, [pc, #196]	; (8003a90 <HAL_ADC_ConfigChannel+0x864>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d104      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x7ac>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a34      	ldr	r2, [pc, #208]	; (8003aa4 <HAL_ADC_ConfigChannel+0x878>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d047      	beq.n	8003a68 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e0:	d004      	beq.n	80039ec <HAL_ADC_ConfigChannel+0x7c0>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <HAL_ADC_ConfigChannel+0x864>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d101      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x7c4>
 80039ec:	4a29      	ldr	r2, [pc, #164]	; (8003a94 <HAL_ADC_ConfigChannel+0x868>)
 80039ee:	e000      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x7c6>
 80039f0:	4a23      	ldr	r2, [pc, #140]	; (8003a80 <HAL_ADC_ConfigChannel+0x854>)
 80039f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039fa:	4619      	mov	r1, r3
 80039fc:	4610      	mov	r0, r2
 80039fe:	f7ff f896 	bl	8002b2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a02:	e031      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a27      	ldr	r2, [pc, #156]	; (8003aa8 <HAL_ADC_ConfigChannel+0x87c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d12d      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d127      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	; (8003a90 <HAL_ADC_ConfigChannel+0x864>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d022      	beq.n	8003a6a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a2c:	d004      	beq.n	8003a38 <HAL_ADC_ConfigChannel+0x80c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a17      	ldr	r2, [pc, #92]	; (8003a90 <HAL_ADC_ConfigChannel+0x864>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d101      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x810>
 8003a38:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <HAL_ADC_ConfigChannel+0x868>)
 8003a3a:	e000      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x812>
 8003a3c:	4a10      	ldr	r2, [pc, #64]	; (8003a80 <HAL_ADC_ConfigChannel+0x854>)
 8003a3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a46:	4619      	mov	r1, r3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	f7ff f870 	bl	8002b2e <LL_ADC_SetCommonPathInternalCh>
 8003a4e:	e00c      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003a62:	e002      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a64:	bf00      	nop
 8003a66:	e000      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a72:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	37d8      	adds	r7, #216	; 0xd8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	50000700 	.word	0x50000700
 8003a84:	c3210000 	.word	0xc3210000
 8003a88:	90c00010 	.word	0x90c00010
 8003a8c:	50000600 	.word	0x50000600
 8003a90:	50000100 	.word	0x50000100
 8003a94:	50000300 	.word	0x50000300
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	053e2d63 	.word	0x053e2d63
 8003aa0:	c7520000 	.word	0xc7520000
 8003aa4:	50000500 	.word	0x50000500
 8003aa8:	cb840000 	.word	0xcb840000

08003aac <LL_ADC_IsEnabled>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <LL_ADC_IsEnabled+0x18>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <LL_ADC_IsEnabled+0x1a>
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d101      	bne.n	8003aea <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	b0a1      	sub	sp, #132	; 0x84
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e0e7      	b.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003b1e:	2300      	movs	r3, #0
 8003b20:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003b22:	2300      	movs	r3, #0
 8003b24:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b2e:	d102      	bne.n	8003b36 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b30:	4b6f      	ldr	r3, [pc, #444]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	e009      	b.n	8003b4a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a6e      	ldr	r2, [pc, #440]	; (8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d102      	bne.n	8003b46 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003b40:	4b6d      	ldr	r3, [pc, #436]	; (8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	e001      	b.n	8003b4a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0be      	b.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff ffb1 	bl	8003ad2 <LL_ADC_REG_IsConversionOngoing>
 8003b70:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff ffab 	bl	8003ad2 <LL_ADC_REG_IsConversionOngoing>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f040 80a0 	bne.w	8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f040 809c 	bne.w	8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b94:	d004      	beq.n	8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a55      	ldr	r2, [pc, #340]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d101      	bne.n	8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003ba0:	4b56      	ldr	r3, [pc, #344]	; (8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003ba2:	e000      	b.n	8003ba6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003ba4:	4b56      	ldr	r3, [pc, #344]	; (8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003ba6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d04b      	beq.n	8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	6859      	ldr	r1, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bc2:	035b      	lsls	r3, r3, #13
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bd4:	d004      	beq.n	8003be0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a45      	ldr	r2, [pc, #276]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d10f      	bne.n	8003c00 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003be0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003be4:	f7ff ff62 	bl	8003aac <LL_ADC_IsEnabled>
 8003be8:	4604      	mov	r4, r0
 8003bea:	4841      	ldr	r0, [pc, #260]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bec:	f7ff ff5e 	bl	8003aac <LL_ADC_IsEnabled>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	4323      	orrs	r3, r4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	e012      	b.n	8003c26 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003c00:	483c      	ldr	r0, [pc, #240]	; (8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c02:	f7ff ff53 	bl	8003aac <LL_ADC_IsEnabled>
 8003c06:	4604      	mov	r4, r0
 8003c08:	483b      	ldr	r0, [pc, #236]	; (8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c0a:	f7ff ff4f 	bl	8003aac <LL_ADC_IsEnabled>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	431c      	orrs	r4, r3
 8003c12:	483c      	ldr	r0, [pc, #240]	; (8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003c14:	f7ff ff4a 	bl	8003aac <LL_ADC_IsEnabled>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4323      	orrs	r3, r4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d056      	beq.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c32:	f023 030f 	bic.w	r3, r3, #15
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	6811      	ldr	r1, [r2, #0]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	6892      	ldr	r2, [r2, #8]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	431a      	orrs	r2, r3
 8003c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c44:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c46:	e047      	b.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c52:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c5c:	d004      	beq.n	8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a23      	ldr	r2, [pc, #140]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d10f      	bne.n	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003c68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c6c:	f7ff ff1e 	bl	8003aac <LL_ADC_IsEnabled>
 8003c70:	4604      	mov	r4, r0
 8003c72:	481f      	ldr	r0, [pc, #124]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c74:	f7ff ff1a 	bl	8003aac <LL_ADC_IsEnabled>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4323      	orrs	r3, r4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	e012      	b.n	8003cae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003c88:	481a      	ldr	r0, [pc, #104]	; (8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c8a:	f7ff ff0f 	bl	8003aac <LL_ADC_IsEnabled>
 8003c8e:	4604      	mov	r4, r0
 8003c90:	4819      	ldr	r0, [pc, #100]	; (8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c92:	f7ff ff0b 	bl	8003aac <LL_ADC_IsEnabled>
 8003c96:	4603      	mov	r3, r0
 8003c98:	431c      	orrs	r4, r3
 8003c9a:	481a      	ldr	r0, [pc, #104]	; (8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003c9c:	f7ff ff06 	bl	8003aac <LL_ADC_IsEnabled>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4323      	orrs	r3, r4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d012      	beq.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003cba:	f023 030f 	bic.w	r3, r3, #15
 8003cbe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003cc0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cc2:	e009      	b.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc8:	f043 0220 	orr.w	r2, r3, #32
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003cd6:	e000      	b.n	8003cda <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ce2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3784      	adds	r7, #132	; 0x84
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd90      	pop	{r4, r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	50000100 	.word	0x50000100
 8003cf4:	50000400 	.word	0x50000400
 8003cf8:	50000500 	.word	0x50000500
 8003cfc:	50000300 	.word	0x50000300
 8003d00:	50000700 	.word	0x50000700
 8003d04:	50000600 	.word	0x50000600

08003d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <__NVIC_SetPriorityGrouping+0x44>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d24:	4013      	ands	r3, r2
 8003d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d3a:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <__NVIC_SetPriorityGrouping+0x44>)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	60d3      	str	r3, [r2, #12]
}
 8003d40:	bf00      	nop
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <__NVIC_GetPriorityGrouping+0x18>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	f003 0307 	and.w	r3, r3, #7
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	e000ed00 	.word	0xe000ed00

08003d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	db0b      	blt.n	8003d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	f003 021f 	and.w	r2, r3, #31
 8003d84:	4907      	ldr	r1, [pc, #28]	; (8003da4 <__NVIC_EnableIRQ+0x38>)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	e000e100 	.word	0xe000e100

08003da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	6039      	str	r1, [r7, #0]
 8003db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	db0a      	blt.n	8003dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	490c      	ldr	r1, [pc, #48]	; (8003df4 <__NVIC_SetPriority+0x4c>)
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	0112      	lsls	r2, r2, #4
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	440b      	add	r3, r1
 8003dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dd0:	e00a      	b.n	8003de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4908      	ldr	r1, [pc, #32]	; (8003df8 <__NVIC_SetPriority+0x50>)
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	3b04      	subs	r3, #4
 8003de0:	0112      	lsls	r2, r2, #4
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	440b      	add	r3, r1
 8003de6:	761a      	strb	r2, [r3, #24]
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000e100 	.word	0xe000e100
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b089      	sub	sp, #36	; 0x24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f1c3 0307 	rsb	r3, r3, #7
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	bf28      	it	cs
 8003e1a:	2304      	movcs	r3, #4
 8003e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3304      	adds	r3, #4
 8003e22:	2b06      	cmp	r3, #6
 8003e24:	d902      	bls.n	8003e2c <NVIC_EncodePriority+0x30>
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3b03      	subs	r3, #3
 8003e2a:	e000      	b.n	8003e2e <NVIC_EncodePriority+0x32>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e30:	f04f 32ff 	mov.w	r2, #4294967295
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43da      	mvns	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	401a      	ands	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e44:	f04f 31ff 	mov.w	r1, #4294967295
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	43d9      	mvns	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e54:	4313      	orrs	r3, r2
         );
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3724      	adds	r7, #36	; 0x24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e74:	d301      	bcc.n	8003e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e76:	2301      	movs	r3, #1
 8003e78:	e00f      	b.n	8003e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ea4 <SysTick_Config+0x40>)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e82:	210f      	movs	r1, #15
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	f7ff ff8e 	bl	8003da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <SysTick_Config+0x40>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e92:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <SysTick_Config+0x40>)
 8003e94:	2207      	movs	r2, #7
 8003e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	e000e010 	.word	0xe000e010

08003ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff ff29 	bl	8003d08 <__NVIC_SetPriorityGrouping>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ecc:	f7ff ff40 	bl	8003d50 <__NVIC_GetPriorityGrouping>
 8003ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	6978      	ldr	r0, [r7, #20]
 8003ed8:	f7ff ff90 	bl	8003dfc <NVIC_EncodePriority>
 8003edc:	4602      	mov	r2, r0
 8003ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff ff5f 	bl	8003da8 <__NVIC_SetPriority>
}
 8003eea:	bf00      	nop
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	4603      	mov	r3, r0
 8003efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff ff33 	bl	8003d6c <__NVIC_EnableIRQ>
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff ffa4 	bl	8003e64 <SysTick_Config>
 8003f1c:	4603      	mov	r3, r0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e08d      	b.n	8004056 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4b47      	ldr	r3, [pc, #284]	; (8004060 <HAL_DMA_Init+0x138>)
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d80f      	bhi.n	8003f66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4b45      	ldr	r3, [pc, #276]	; (8004064 <HAL_DMA_Init+0x13c>)
 8003f4e:	4413      	add	r3, r2
 8003f50:	4a45      	ldr	r2, [pc, #276]	; (8004068 <HAL_DMA_Init+0x140>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	009a      	lsls	r2, r3, #2
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a42      	ldr	r2, [pc, #264]	; (800406c <HAL_DMA_Init+0x144>)
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40
 8003f64:	e00e      	b.n	8003f84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	4b40      	ldr	r3, [pc, #256]	; (8004070 <HAL_DMA_Init+0x148>)
 8003f6e:	4413      	add	r3, r2
 8003f70:	4a3d      	ldr	r2, [pc, #244]	; (8004068 <HAL_DMA_Init+0x140>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	009a      	lsls	r2, r3, #2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a3c      	ldr	r2, [pc, #240]	; (8004074 <HAL_DMA_Init+0x14c>)
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f8fe 	bl	80041d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe4:	d102      	bne.n	8003fec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004000:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d010      	beq.n	800402c <HAL_DMA_Init+0x104>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b04      	cmp	r3, #4
 8004010:	d80c      	bhi.n	800402c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f91e 	bl	8004254 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	e008      	b.n	800403e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40020407 	.word	0x40020407
 8004064:	bffdfff8 	.word	0xbffdfff8
 8004068:	cccccccd 	.word	0xcccccccd
 800406c:	40020000 	.word	0x40020000
 8004070:	bffdfbf8 	.word	0xbffdfbf8
 8004074:	40020400 	.word	0x40020400

08004078 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2204      	movs	r2, #4
 800409a:	409a      	lsls	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d026      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x7a>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d021      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d107      	bne.n	80040cc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	f003 021f 	and.w	r2, r3, #31
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	2104      	movs	r1, #4
 80040da:	fa01 f202 	lsl.w	r2, r1, r2
 80040de:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d071      	beq.n	80041cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040f0:	e06c      	b.n	80041cc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	2202      	movs	r2, #2
 80040fc:	409a      	lsls	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4013      	ands	r3, r2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d02e      	beq.n	8004164 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d029      	beq.n	8004164 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10b      	bne.n	8004136 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 020a 	bic.w	r2, r2, #10
 800412c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	f003 021f 	and.w	r2, r3, #31
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	2102      	movs	r1, #2
 8004144:	fa01 f202 	lsl.w	r2, r1, r2
 8004148:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d038      	beq.n	80041cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004162:	e033      	b.n	80041cc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	2208      	movs	r2, #8
 800416e:	409a      	lsls	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d02a      	beq.n	80041ce <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d025      	beq.n	80041ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 020e 	bic.w	r2, r2, #14
 8004190:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f003 021f 	and.w	r2, r3, #31
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2101      	movs	r1, #1
 80041a0:	fa01 f202 	lsl.w	r2, r1, r2
 80041a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
}
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b16      	ldr	r3, [pc, #88]	; (8004240 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d802      	bhi.n	80041f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80041ec:	4b15      	ldr	r3, [pc, #84]	; (8004244 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	e001      	b.n	80041f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80041f2:	4b15      	ldr	r3, [pc, #84]	; (8004248 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80041f4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	3b08      	subs	r3, #8
 8004202:	4a12      	ldr	r2, [pc, #72]	; (800424c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004210:	089b      	lsrs	r3, r3, #2
 8004212:	009a      	lsls	r2, r3, #2
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4413      	add	r3, r2
 8004218:	461a      	mov	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a0b      	ldr	r2, [pc, #44]	; (8004250 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004222:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	2201      	movs	r2, #1
 800422c:	409a      	lsls	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40020407 	.word	0x40020407
 8004244:	40020800 	.word	0x40020800
 8004248:	40020820 	.word	0x40020820
 800424c:	cccccccd 	.word	0xcccccccd
 8004250:	40020880 	.word	0x40020880

08004254 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	461a      	mov	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a08      	ldr	r2, [pc, #32]	; (8004298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004276:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3b01      	subs	r3, #1
 800427c:	f003 031f 	and.w	r3, r3, #31
 8004280:	2201      	movs	r2, #1
 8004282:	409a      	lsls	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	1000823f 	.word	0x1000823f
 8004298:	40020940 	.word	0x40020940

0800429c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e147      	b.n	800453e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fd fda4 	bl	8001e10 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0210 	bic.w	r2, r2, #16
 80042d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042d8:	f7fe fc0a 	bl	8002af0 <HAL_GetTick>
 80042dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80042de:	e012      	b.n	8004306 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80042e0:	f7fe fc06 	bl	8002af0 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b0a      	cmp	r3, #10
 80042ec:	d90b      	bls.n	8004306 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f2:	f043 0201 	orr.w	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2203      	movs	r2, #3
 80042fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e11b      	b.n	800453e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b08      	cmp	r3, #8
 8004312:	d0e5      	beq.n	80042e0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004324:	f7fe fbe4 	bl	8002af0 <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800432a:	e012      	b.n	8004352 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800432c:	f7fe fbe0 	bl	8002af0 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b0a      	cmp	r3, #10
 8004338:	d90b      	bls.n	8004352 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433e:	f043 0201 	orr.w	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2203      	movs	r2, #3
 800434a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e0f5      	b.n	800453e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0e5      	beq.n	800432c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0202 	orr.w	r2, r2, #2
 800436e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a74      	ldr	r2, [pc, #464]	; (8004548 <HAL_FDCAN_Init+0x2ac>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d103      	bne.n	8004382 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800437a:	4a74      	ldr	r2, [pc, #464]	; (800454c <HAL_FDCAN_Init+0x2b0>)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	7c1b      	ldrb	r3, [r3, #16]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d108      	bne.n	800439c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004398:	619a      	str	r2, [r3, #24]
 800439a:	e007      	b.n	80043ac <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043aa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	7c5b      	ldrb	r3, [r3, #17]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d108      	bne.n	80043c6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043c2:	619a      	str	r2, [r3, #24]
 80043c4:	e007      	b.n	80043d6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699a      	ldr	r2, [r3, #24]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043d4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	7c9b      	ldrb	r3, [r3, #18]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d108      	bne.n	80043f0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699a      	ldr	r2, [r3, #24]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043ec:	619a      	str	r2, [r3, #24]
 80043ee:	e007      	b.n	8004400 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043fe:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004424:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0210 	bic.w	r2, r2, #16
 8004434:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d108      	bne.n	8004450 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699a      	ldr	r2, [r3, #24]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0204 	orr.w	r2, r2, #4
 800444c:	619a      	str	r2, [r3, #24]
 800444e:	e02c      	b.n	80044aa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d028      	beq.n	80044aa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d01c      	beq.n	800449a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800446e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0210 	orr.w	r2, r2, #16
 800447e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d110      	bne.n	80044aa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0220 	orr.w	r2, r2, #32
 8004496:	619a      	str	r2, [r3, #24]
 8004498:	e007      	b.n	80044aa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699a      	ldr	r2, [r3, #24]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0220 	orr.w	r2, r2, #32
 80044a8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80044ba:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80044c2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80044d2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80044d4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044de:	d115      	bne.n	800450c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	3b01      	subs	r3, #1
 80044ec:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80044ee:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	3b01      	subs	r3, #1
 80044f6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80044f8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	3b01      	subs	r3, #1
 8004502:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004508:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800450a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fbca 	bl	8004cbc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40006400 	.word	0x40006400
 800454c:	40006500 	.word	0x40006500

08004550 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d12c      	bne.n	80045c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e023      	b.n	80045d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004590:	0c1b      	lsrs	r3, r3, #16
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 fbf8 	bl	8004d94 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2101      	movs	r1, #1
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	fa01 f202 	lsl.w	r2, r1, r2
 80045b0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80045b4:	2201      	movs	r2, #1
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	409a      	lsls	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e006      	b.n	80045d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c6:	f043 0208 	orr.w	r2, r3, #8
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
  }
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80045d8:	b480      	push	{r7}
 80045da:	b08b      	sub	sp, #44	; 0x2c
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045f0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80045f2:	7efb      	ldrb	r3, [r7, #27]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	f040 80e8 	bne.w	80047ca <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b40      	cmp	r3, #64	; 0x40
 80045fe:	d137      	bne.n	8004670 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	2b00      	cmp	r3, #0
 800460e:	d107      	bne.n	8004620 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004614:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0db      	b.n	80047d8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004628:	0e1b      	lsrs	r3, r3, #24
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b01      	cmp	r3, #1
 8004630:	d10a      	bne.n	8004648 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463a:	0a5b      	lsrs	r3, r3, #9
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004644:	2301      	movs	r3, #1
 8004646:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004650:	0a1b      	lsrs	r3, r3, #8
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4413      	add	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	440b      	add	r3, r1
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
 800466e:	e036      	b.n	80046de <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	2b00      	cmp	r3, #0
 800467e:	d107      	bne.n	8004690 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004684:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0a3      	b.n	80047d8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004698:	0e1b      	lsrs	r3, r3, #24
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d10a      	bne.n	80046b8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80046b4:	2301      	movs	r3, #1
 80046b6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046c0:	0a1b      	lsrs	r3, r3, #8
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	440b      	add	r3, r1
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d107      	bne.n	8004702 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	0c9b      	lsrs	r3, r3, #18
 80046f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e005      	b.n	800470e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	3304      	adds	r3, #4
 800472a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	b29a      	uxth	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	0c1b      	lsrs	r3, r3, #16
 800473c:	f003 020f 	and.w	r2, r3, #15
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	0e1b      	lsrs	r3, r3, #24
 8004762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	0fda      	lsrs	r2, r3, #31
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	3304      	adds	r3, #4
 8004778:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800477e:	2300      	movs	r3, #0
 8004780:	623b      	str	r3, [r7, #32]
 8004782:	e00a      	b.n	800479a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	441a      	add	r2, r3
 800478a:	6839      	ldr	r1, [r7, #0]
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	440b      	add	r3, r1
 8004790:	7812      	ldrb	r2, [r2, #0]
 8004792:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	3301      	adds	r3, #1
 8004798:	623b      	str	r3, [r7, #32]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	4a11      	ldr	r2, [pc, #68]	; (80047e4 <HAL_FDCAN_GetRxMessage+0x20c>)
 80047a0:	5cd3      	ldrb	r3, [r2, r3]
 80047a2:	461a      	mov	r2, r3
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d3ec      	bcc.n	8004784 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b40      	cmp	r3, #64	; 0x40
 80047ae:	d105      	bne.n	80047bc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80047ba:	e004      	b.n	80047c6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69fa      	ldr	r2, [r7, #28]
 80047c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e006      	b.n	80047d8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ce:	f043 0208 	orr.w	r2, r3, #8
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
  }
}
 80047d8:	4618      	mov	r0, r3
 80047da:	372c      	adds	r7, #44	; 0x2c
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	08008e54 	.word	0x08008e54

080047e8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047fa:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d003      	beq.n	800480a <HAL_FDCAN_ActivateNotification+0x22>
 8004802:	7dfb      	ldrb	r3, [r7, #23]
 8004804:	2b02      	cmp	r3, #2
 8004806:	f040 80c8 	bne.w	800499a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d03b      	beq.n	800489e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800482c:	2b00      	cmp	r3, #0
 800482e:	d004      	beq.n	800483a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d031      	beq.n	800489e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004840:	2b00      	cmp	r3, #0
 8004842:	d004      	beq.n	800484e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	d027      	beq.n	800489e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004854:	2b00      	cmp	r3, #0
 8004856:	d004      	beq.n	8004862 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01d      	beq.n	800489e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004868:	2b00      	cmp	r3, #0
 800486a:	d004      	beq.n	8004876 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b00      	cmp	r3, #0
 8004874:	d013      	beq.n	800489e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800487c:	2b00      	cmp	r3, #0
 800487e:	d004      	beq.n	800488a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00c      	beq.n	80048ae <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d107      	bne.n	80048ae <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d004      	beq.n	80048c2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d13b      	bne.n	800493a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d131      	bne.n	800493a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d004      	beq.n	80048ea <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d127      	bne.n	800493a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d11d      	bne.n	800493a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	d113      	bne.n	800493a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004918:	2b00      	cmp	r3, #0
 800491a:	d004      	beq.n	8004926 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00c      	beq.n	800494a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0202 	orr.w	r2, r2, #2
 8004948:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004950:	2b00      	cmp	r3, #0
 8004952:	d009      	beq.n	8004968 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	430a      	orrs	r2, r1
 8004964:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d009      	beq.n	8004986 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	430a      	orrs	r2, r1
 8004982:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	430a      	orrs	r2, r1
 8004994:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e006      	b.n	80049a8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499e:	f043 0202 	orr.w	r2, r3, #2
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
  }
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08c      	sub	sp, #48	; 0x30
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d0:	4013      	ands	r3, r2
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e8:	4013      	ands	r3, r2
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a00:	4013      	ands	r3, r2
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8004a0e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a16:	6a3a      	ldr	r2, [r7, #32]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a22:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004a26:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	4013      	ands	r3, r2
 8004a32:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a42:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d006      	beq.n	8004a66 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2240      	movs	r2, #64	; 0x40
 8004a5e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f90b 	bl	8004c7c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d019      	beq.n	8004aa4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d014      	beq.n	8004aa4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004a82:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a9a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004a9c:	6939      	ldr	r1, [r7, #16]
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f8cd 	bl	8004c3e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f8a2 	bl	8004bfe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d007      	beq.n	8004ad0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ac6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fb fdb2 	bl	8000634 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004adc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7fb fe21 	bl	8000728 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b02:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f885 	bl	8004c14 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d018      	beq.n	8004b46 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d013      	beq.n	8004b46 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004b26:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4013      	ands	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2280      	movs	r2, #128	; 0x80
 8004b3c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004b3e:	68f9      	ldr	r1, [r7, #12]
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f871 	bl	8004c28 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00c      	beq.n	8004b6a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d007      	beq.n	8004b6a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b62:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f875 	bl	8004c54 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00c      	beq.n	8004b8e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d007      	beq.n	8004b8e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004b86:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f86d 	bl	8004c68 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00f      	beq.n	8004bb8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004baa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004bc6:	69f9      	ldr	r1, [r7, #28]
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f86b 	bl	8004ca4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d009      	beq.n	8004be8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a3a      	ldr	r2, [r7, #32]
 8004bda:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f84d 	bl	8004c90 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	3730      	adds	r7, #48	; 0x30
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
	...

08004cbc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004cc4:	4b30      	ldr	r3, [pc, #192]	; (8004d88 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004cc6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a2f      	ldr	r2, [pc, #188]	; (8004d8c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d103      	bne.n	8004cda <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004cd8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a2c      	ldr	r2, [pc, #176]	; (8004d90 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d103      	bne.n	8004cec <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8004cea:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cfa:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d02:	041a      	lsls	r2, r3, #16
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d20:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	061a      	lsls	r2, r3, #24
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e005      	b.n	8004d6e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d3f3      	bcc.n	8004d62 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004d7a:	bf00      	nop
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	4000a400 	.word	0x4000a400
 8004d8c:	40006800 	.word	0x40006800
 8004d90:	40006c00 	.word	0x40006c00

08004d94 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b089      	sub	sp, #36	; 0x24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004db2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	e00a      	b.n	8004dd6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004dc8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004dce:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004dd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dd4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004de0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004de6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004dec:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4413      	add	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	440b      	add	r3, r1
 8004e08:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	3304      	adds	r3, #4
 8004e14:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	e020      	b.n	8004e6a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	3303      	adds	r3, #3
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	3302      	adds	r3, #2
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	440b      	add	r3, r1
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004e40:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	3301      	adds	r3, #1
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	440b      	add	r3, r1
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004e4e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	440a      	add	r2, r1
 8004e56:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004e58:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	3304      	adds	r3, #4
 8004e62:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	3304      	adds	r3, #4
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	4a06      	ldr	r2, [pc, #24]	; (8004e88 <FDCAN_CopyMessageToRAM+0xf4>)
 8004e70:	5cd3      	ldrb	r3, [r2, r3]
 8004e72:	461a      	mov	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d3d6      	bcc.n	8004e28 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	3724      	adds	r7, #36	; 0x24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	08008e54 	.word	0x08008e54

08004e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e9a:	e15a      	b.n	8005152 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 814c 	beq.w	800514c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d005      	beq.n	8004ecc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d130      	bne.n	8004f2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	2203      	movs	r2, #3
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	43db      	mvns	r3, r3
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f02:	2201      	movs	r2, #1
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	091b      	lsrs	r3, r3, #4
 8004f18:	f003 0201 	and.w	r2, r3, #1
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d017      	beq.n	8004f6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	2203      	movs	r2, #3
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d123      	bne.n	8004fbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	08da      	lsrs	r2, r3, #3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3208      	adds	r2, #8
 8004f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	220f      	movs	r2, #15
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43db      	mvns	r3, r3
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4013      	ands	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	08da      	lsrs	r2, r3, #3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3208      	adds	r2, #8
 8004fb8:	6939      	ldr	r1, [r7, #16]
 8004fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	2203      	movs	r2, #3
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f003 0203 	and.w	r2, r3, #3
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80a6 	beq.w	800514c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005000:	4b5b      	ldr	r3, [pc, #364]	; (8005170 <HAL_GPIO_Init+0x2e4>)
 8005002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005004:	4a5a      	ldr	r2, [pc, #360]	; (8005170 <HAL_GPIO_Init+0x2e4>)
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	6613      	str	r3, [r2, #96]	; 0x60
 800500c:	4b58      	ldr	r3, [pc, #352]	; (8005170 <HAL_GPIO_Init+0x2e4>)
 800500e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005018:	4a56      	ldr	r2, [pc, #344]	; (8005174 <HAL_GPIO_Init+0x2e8>)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	089b      	lsrs	r3, r3, #2
 800501e:	3302      	adds	r3, #2
 8005020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	220f      	movs	r2, #15
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	43db      	mvns	r3, r3
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4013      	ands	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005042:	d01f      	beq.n	8005084 <HAL_GPIO_Init+0x1f8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a4c      	ldr	r2, [pc, #304]	; (8005178 <HAL_GPIO_Init+0x2ec>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d019      	beq.n	8005080 <HAL_GPIO_Init+0x1f4>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a4b      	ldr	r2, [pc, #300]	; (800517c <HAL_GPIO_Init+0x2f0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d013      	beq.n	800507c <HAL_GPIO_Init+0x1f0>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a4a      	ldr	r2, [pc, #296]	; (8005180 <HAL_GPIO_Init+0x2f4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00d      	beq.n	8005078 <HAL_GPIO_Init+0x1ec>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a49      	ldr	r2, [pc, #292]	; (8005184 <HAL_GPIO_Init+0x2f8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d007      	beq.n	8005074 <HAL_GPIO_Init+0x1e8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a48      	ldr	r2, [pc, #288]	; (8005188 <HAL_GPIO_Init+0x2fc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d101      	bne.n	8005070 <HAL_GPIO_Init+0x1e4>
 800506c:	2305      	movs	r3, #5
 800506e:	e00a      	b.n	8005086 <HAL_GPIO_Init+0x1fa>
 8005070:	2306      	movs	r3, #6
 8005072:	e008      	b.n	8005086 <HAL_GPIO_Init+0x1fa>
 8005074:	2304      	movs	r3, #4
 8005076:	e006      	b.n	8005086 <HAL_GPIO_Init+0x1fa>
 8005078:	2303      	movs	r3, #3
 800507a:	e004      	b.n	8005086 <HAL_GPIO_Init+0x1fa>
 800507c:	2302      	movs	r3, #2
 800507e:	e002      	b.n	8005086 <HAL_GPIO_Init+0x1fa>
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <HAL_GPIO_Init+0x1fa>
 8005084:	2300      	movs	r3, #0
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	f002 0203 	and.w	r2, r2, #3
 800508c:	0092      	lsls	r2, r2, #2
 800508e:	4093      	lsls	r3, r2
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005096:	4937      	ldr	r1, [pc, #220]	; (8005174 <HAL_GPIO_Init+0x2e8>)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	089b      	lsrs	r3, r3, #2
 800509c:	3302      	adds	r3, #2
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050a4:	4b39      	ldr	r3, [pc, #228]	; (800518c <HAL_GPIO_Init+0x300>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4013      	ands	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050c8:	4a30      	ldr	r2, [pc, #192]	; (800518c <HAL_GPIO_Init+0x300>)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80050ce:	4b2f      	ldr	r3, [pc, #188]	; (800518c <HAL_GPIO_Init+0x300>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	43db      	mvns	r3, r3
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4013      	ands	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050f2:	4a26      	ldr	r2, [pc, #152]	; (800518c <HAL_GPIO_Init+0x300>)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80050f8:	4b24      	ldr	r3, [pc, #144]	; (800518c <HAL_GPIO_Init+0x300>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	43db      	mvns	r3, r3
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4013      	ands	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800511c:	4a1b      	ldr	r2, [pc, #108]	; (800518c <HAL_GPIO_Init+0x300>)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005122:	4b1a      	ldr	r3, [pc, #104]	; (800518c <HAL_GPIO_Init+0x300>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	43db      	mvns	r3, r3
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4013      	ands	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005146:	4a11      	ldr	r2, [pc, #68]	; (800518c <HAL_GPIO_Init+0x300>)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	3301      	adds	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	f47f ae9d 	bne.w	8004e9c <HAL_GPIO_Init+0x10>
  }
}
 8005162:	bf00      	nop
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	40021000 	.word	0x40021000
 8005174:	40010000 	.word	0x40010000
 8005178:	48000400 	.word	0x48000400
 800517c:	48000800 	.word	0x48000800
 8005180:	48000c00 	.word	0x48000c00
 8005184:	48001000 	.word	0x48001000
 8005188:	48001400 	.word	0x48001400
 800518c:	40010400 	.word	0x40010400

08005190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	807b      	strh	r3, [r7, #2]
 800519c:	4613      	mov	r3, r2
 800519e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051a0:	787b      	ldrb	r3, [r7, #1]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051a6:	887a      	ldrh	r2, [r7, #2]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051ac:	e002      	b.n	80051b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051ae:	887a      	ldrh	r2, [r7, #2]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e08d      	b.n	80052ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fc ff2a 	bl	8002040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2224      	movs	r2, #36	; 0x24
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0201 	bic.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005210:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005220:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d107      	bne.n	800523a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	e006      	b.n	8005248 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005246:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d108      	bne.n	8005262 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800525e:	605a      	str	r2, [r3, #4]
 8005260:	e007      	b.n	8005272 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005270:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6812      	ldr	r2, [r2, #0]
 800527c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005284:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005294:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69d9      	ldr	r1, [r3, #28]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1a      	ldr	r2, [r3, #32]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	4608      	mov	r0, r1
 8005302:	4611      	mov	r1, r2
 8005304:	461a      	mov	r2, r3
 8005306:	4603      	mov	r3, r0
 8005308:	817b      	strh	r3, [r7, #10]
 800530a:	460b      	mov	r3, r1
 800530c:	813b      	strh	r3, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b20      	cmp	r3, #32
 800531c:	f040 80f9 	bne.w	8005512 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_I2C_Mem_Write+0x34>
 8005326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005328:	2b00      	cmp	r3, #0
 800532a:	d105      	bne.n	8005338 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005332:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0ed      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_I2C_Mem_Write+0x4e>
 8005342:	2302      	movs	r3, #2
 8005344:	e0e6      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800534e:	f7fd fbcf 	bl	8002af0 <HAL_GetTick>
 8005352:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	2319      	movs	r3, #25
 800535a:	2201      	movs	r2, #1
 800535c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fac3 	bl	80058ec <I2C_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0d1      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2221      	movs	r2, #33	; 0x21
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2240      	movs	r2, #64	; 0x40
 800537c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a3a      	ldr	r2, [r7, #32]
 800538a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005390:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005398:	88f8      	ldrh	r0, [r7, #6]
 800539a:	893a      	ldrh	r2, [r7, #8]
 800539c:	8979      	ldrh	r1, [r7, #10]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	9301      	str	r3, [sp, #4]
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	4603      	mov	r3, r0
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f9d3 	bl	8005754 <I2C_RequestMemoryWrite>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0a9      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2bff      	cmp	r3, #255	; 0xff
 80053c8:	d90e      	bls.n	80053e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	22ff      	movs	r2, #255	; 0xff
 80053ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	8979      	ldrh	r1, [r7, #10]
 80053d8:	2300      	movs	r3, #0
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fc47 	bl	8005c74 <I2C_TransferConfig>
 80053e6:	e00f      	b.n	8005408 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	8979      	ldrh	r1, [r7, #10]
 80053fa:	2300      	movs	r3, #0
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fc36 	bl	8005c74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fac6 	bl	800599e <I2C_WaitOnTXISFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e07b      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	781a      	ldrb	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d034      	beq.n	80054c0 <HAL_I2C_Mem_Write+0x1c8>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545a:	2b00      	cmp	r3, #0
 800545c:	d130      	bne.n	80054c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	2200      	movs	r2, #0
 8005466:	2180      	movs	r1, #128	; 0x80
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 fa3f 	bl	80058ec <I2C_WaitOnFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e04d      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	2bff      	cmp	r3, #255	; 0xff
 8005480:	d90e      	bls.n	80054a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	22ff      	movs	r2, #255	; 0xff
 8005486:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548c:	b2da      	uxtb	r2, r3
 800548e:	8979      	ldrh	r1, [r7, #10]
 8005490:	2300      	movs	r3, #0
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 fbeb 	bl	8005c74 <I2C_TransferConfig>
 800549e:	e00f      	b.n	80054c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	8979      	ldrh	r1, [r7, #10]
 80054b2:	2300      	movs	r3, #0
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 fbda 	bl	8005c74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d19e      	bne.n	8005408 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 faac 	bl	8005a2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e01a      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2220      	movs	r2, #32
 80054e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6859      	ldr	r1, [r3, #4]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <HAL_I2C_Mem_Write+0x224>)
 80054f2:	400b      	ands	r3, r1
 80054f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	e000      	b.n	8005514 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005512:	2302      	movs	r3, #2
  }
}
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	fe00e800 	.word	0xfe00e800

08005520 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	4608      	mov	r0, r1
 800552a:	4611      	mov	r1, r2
 800552c:	461a      	mov	r2, r3
 800552e:	4603      	mov	r3, r0
 8005530:	817b      	strh	r3, [r7, #10]
 8005532:	460b      	mov	r3, r1
 8005534:	813b      	strh	r3, [r7, #8]
 8005536:	4613      	mov	r3, r2
 8005538:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b20      	cmp	r3, #32
 8005544:	f040 80fd 	bne.w	8005742 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_I2C_Mem_Read+0x34>
 800554e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005550:	2b00      	cmp	r3, #0
 8005552:	d105      	bne.n	8005560 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e0f1      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_I2C_Mem_Read+0x4e>
 800556a:	2302      	movs	r3, #2
 800556c:	e0ea      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005576:	f7fd fabb 	bl	8002af0 <HAL_GetTick>
 800557a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	2319      	movs	r3, #25
 8005582:	2201      	movs	r2, #1
 8005584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f9af 	bl	80058ec <I2C_WaitOnFlagUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e0d5      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2222      	movs	r2, #34	; 0x22
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2240      	movs	r2, #64	; 0x40
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a3a      	ldr	r2, [r7, #32]
 80055b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055c0:	88f8      	ldrh	r0, [r7, #6]
 80055c2:	893a      	ldrh	r2, [r7, #8]
 80055c4:	8979      	ldrh	r1, [r7, #10]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	4603      	mov	r3, r0
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f913 	bl	80057fc <I2C_RequestMemoryRead>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0ad      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2bff      	cmp	r3, #255	; 0xff
 80055f0:	d90e      	bls.n	8005610 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	22ff      	movs	r2, #255	; 0xff
 80055f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	8979      	ldrh	r1, [r7, #10]
 8005600:	4b52      	ldr	r3, [pc, #328]	; (800574c <HAL_I2C_Mem_Read+0x22c>)
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 fb33 	bl	8005c74 <I2C_TransferConfig>
 800560e:	e00f      	b.n	8005630 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005614:	b29a      	uxth	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561e:	b2da      	uxtb	r2, r3
 8005620:	8979      	ldrh	r1, [r7, #10]
 8005622:	4b4a      	ldr	r3, [pc, #296]	; (800574c <HAL_I2C_Mem_Read+0x22c>)
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 fb22 	bl	8005c74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	2200      	movs	r2, #0
 8005638:	2104      	movs	r1, #4
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f956 	bl	80058ec <I2C_WaitOnFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e07c      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005680:	b29b      	uxth	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d034      	beq.n	80056f0 <HAL_I2C_Mem_Read+0x1d0>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d130      	bne.n	80056f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	2200      	movs	r2, #0
 8005696:	2180      	movs	r1, #128	; 0x80
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f927 	bl	80058ec <I2C_WaitOnFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e04d      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2bff      	cmp	r3, #255	; 0xff
 80056b0:	d90e      	bls.n	80056d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	8979      	ldrh	r1, [r7, #10]
 80056c0:	2300      	movs	r3, #0
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 fad3 	bl	8005c74 <I2C_TransferConfig>
 80056ce:	e00f      	b.n	80056f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	8979      	ldrh	r1, [r7, #10]
 80056e2:	2300      	movs	r3, #0
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 fac2 	bl	8005c74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d19a      	bne.n	8005630 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f994 	bl	8005a2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e01a      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2220      	movs	r2, #32
 8005714:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6859      	ldr	r1, [r3, #4]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_I2C_Mem_Read+0x230>)
 8005722:	400b      	ands	r3, r1
 8005724:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e000      	b.n	8005744 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005742:	2302      	movs	r3, #2
  }
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	80002400 	.word	0x80002400
 8005750:	fe00e800 	.word	0xfe00e800

08005754 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	4608      	mov	r0, r1
 800575e:	4611      	mov	r1, r2
 8005760:	461a      	mov	r2, r3
 8005762:	4603      	mov	r3, r0
 8005764:	817b      	strh	r3, [r7, #10]
 8005766:	460b      	mov	r3, r1
 8005768:	813b      	strh	r3, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	8979      	ldrh	r1, [r7, #10]
 8005774:	4b20      	ldr	r3, [pc, #128]	; (80057f8 <I2C_RequestMemoryWrite+0xa4>)
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 fa79 	bl	8005c74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	69b9      	ldr	r1, [r7, #24]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 f909 	bl	800599e <I2C_WaitOnTXISFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e02c      	b.n	80057f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d105      	bne.n	80057a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800579c:	893b      	ldrh	r3, [r7, #8]
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	629a      	str	r2, [r3, #40]	; 0x28
 80057a6:	e015      	b.n	80057d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057a8:	893b      	ldrh	r3, [r7, #8]
 80057aa:	0a1b      	lsrs	r3, r3, #8
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	69b9      	ldr	r1, [r7, #24]
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 f8ef 	bl	800599e <I2C_WaitOnTXISFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e012      	b.n	80057f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057ca:	893b      	ldrh	r3, [r7, #8]
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	2200      	movs	r2, #0
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 f884 	bl	80058ec <I2C_WaitOnFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	80002000 	.word	0x80002000

080057fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	4608      	mov	r0, r1
 8005806:	4611      	mov	r1, r2
 8005808:	461a      	mov	r2, r3
 800580a:	4603      	mov	r3, r0
 800580c:	817b      	strh	r3, [r7, #10]
 800580e:	460b      	mov	r3, r1
 8005810:	813b      	strh	r3, [r7, #8]
 8005812:	4613      	mov	r3, r2
 8005814:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005816:	88fb      	ldrh	r3, [r7, #6]
 8005818:	b2da      	uxtb	r2, r3
 800581a:	8979      	ldrh	r1, [r7, #10]
 800581c:	4b20      	ldr	r3, [pc, #128]	; (80058a0 <I2C_RequestMemoryRead+0xa4>)
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	2300      	movs	r3, #0
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 fa26 	bl	8005c74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	69b9      	ldr	r1, [r7, #24]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f8b6 	bl	800599e <I2C_WaitOnTXISFlagUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e02c      	b.n	8005896 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d105      	bne.n	800584e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005842:	893b      	ldrh	r3, [r7, #8]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	629a      	str	r2, [r3, #40]	; 0x28
 800584c:	e015      	b.n	800587a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800584e:	893b      	ldrh	r3, [r7, #8]
 8005850:	0a1b      	lsrs	r3, r3, #8
 8005852:	b29b      	uxth	r3, r3
 8005854:	b2da      	uxtb	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	69b9      	ldr	r1, [r7, #24]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f89c 	bl	800599e <I2C_WaitOnTXISFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e012      	b.n	8005896 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005870:	893b      	ldrh	r3, [r7, #8]
 8005872:	b2da      	uxtb	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2200      	movs	r2, #0
 8005882:	2140      	movs	r1, #64	; 0x40
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f831 	bl	80058ec <I2C_WaitOnFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	80002000 	.word	0x80002000

080058a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d103      	bne.n	80058c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2200      	movs	r2, #0
 80058c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d007      	beq.n	80058e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	619a      	str	r2, [r3, #24]
  }
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	4613      	mov	r3, r2
 80058fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058fc:	e03b      	b.n	8005976 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	6839      	ldr	r1, [r7, #0]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 f8d6 	bl	8005ab4 <I2C_IsErrorOccurred>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e041      	b.n	8005996 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005918:	d02d      	beq.n	8005976 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591a:	f7fd f8e9 	bl	8002af0 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d302      	bcc.n	8005930 <I2C_WaitOnFlagUntilTimeout+0x44>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d122      	bne.n	8005976 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4013      	ands	r3, r2
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	429a      	cmp	r2, r3
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	429a      	cmp	r2, r3
 800594c:	d113      	bne.n	8005976 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005952:	f043 0220 	orr.w	r2, r3, #32
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e00f      	b.n	8005996 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699a      	ldr	r2, [r3, #24]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4013      	ands	r3, r2
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	429a      	cmp	r2, r3
 8005984:	bf0c      	ite	eq
 8005986:	2301      	moveq	r3, #1
 8005988:	2300      	movne	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	429a      	cmp	r2, r3
 8005992:	d0b4      	beq.n	80058fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059aa:	e033      	b.n	8005a14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f87f 	bl	8005ab4 <I2C_IsErrorOccurred>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e031      	b.n	8005a24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c6:	d025      	beq.n	8005a14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c8:	f7fd f892 	bl	8002af0 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d302      	bcc.n	80059de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d11a      	bne.n	8005a14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d013      	beq.n	8005a14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f0:	f043 0220 	orr.w	r2, r3, #32
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e007      	b.n	8005a24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d1c4      	bne.n	80059ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a38:	e02f      	b.n	8005a9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 f838 	bl	8005ab4 <I2C_IsErrorOccurred>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e02d      	b.n	8005aaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4e:	f7fd f84f 	bl	8002af0 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d302      	bcc.n	8005a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d11a      	bne.n	8005a9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	d013      	beq.n	8005a9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a76:	f043 0220 	orr.w	r2, r3, #32
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e007      	b.n	8005aaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d1c8      	bne.n	8005a3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08a      	sub	sp, #40	; 0x28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d068      	beq.n	8005bb2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ae8:	e049      	b.n	8005b7e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af0:	d045      	beq.n	8005b7e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005af2:	f7fc fffd 	bl	8002af0 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d302      	bcc.n	8005b08 <I2C_IsErrorOccurred+0x54>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d13a      	bne.n	8005b7e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b2a:	d121      	bne.n	8005b70 <I2C_IsErrorOccurred+0xbc>
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b32:	d01d      	beq.n	8005b70 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b34:	7cfb      	ldrb	r3, [r7, #19]
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d01a      	beq.n	8005b70 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b4a:	f7fc ffd1 	bl	8002af0 <HAL_GetTick>
 8005b4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b50:	e00e      	b.n	8005b70 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b52:	f7fc ffcd 	bl	8002af0 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b19      	cmp	r3, #25
 8005b5e:	d907      	bls.n	8005b70 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	f043 0320 	orr.w	r3, r3, #32
 8005b66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005b6e:	e006      	b.n	8005b7e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	d1e9      	bne.n	8005b52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d003      	beq.n	8005b94 <I2C_IsErrorOccurred+0xe0>
 8005b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0aa      	beq.n	8005aea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d103      	bne.n	8005ba4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	f043 0304 	orr.w	r3, r3, #4
 8005baa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	f043 0308 	orr.w	r3, r3, #8
 8005bec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bf6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00b      	beq.n	8005c20 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	f043 0302 	orr.w	r3, r3, #2
 8005c0e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01c      	beq.n	8005c62 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7ff fe3b 	bl	80058a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6859      	ldr	r1, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <I2C_IsErrorOccurred+0x1bc>)
 8005c3a:	400b      	ands	r3, r1
 8005c3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	431a      	orrs	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005c62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3728      	adds	r7, #40	; 0x28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	fe00e800 	.word	0xfe00e800

08005c74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	607b      	str	r3, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	817b      	strh	r3, [r7, #10]
 8005c82:	4613      	mov	r3, r2
 8005c84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c86:	897b      	ldrh	r3, [r7, #10]
 8005c88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c8c:	7a7b      	ldrb	r3, [r7, #9]
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ca2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	0d5b      	lsrs	r3, r3, #21
 8005cae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005cb2:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <I2C_TransferConfig+0x60>)
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	ea02 0103 	and.w	r1, r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	03ff63ff 	.word	0x03ff63ff

08005cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d138      	bne.n	8005d60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e032      	b.n	8005d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2224      	movs	r2, #36	; 0x24
 8005d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6819      	ldr	r1, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e000      	b.n	8005d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d60:	2302      	movs	r3, #2
  }
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d139      	bne.n	8005df8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e033      	b.n	8005dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2224      	movs	r2, #36	; 0x24
 8005d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0201 	bic.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005dc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e000      	b.n	8005dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005df8:	2302      	movs	r3, #2
  }
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e041      	b.n	8005e9c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005e20:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f245 5255 	movw	r2, #21845	; 0x5555
 8005e2a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6852      	ldr	r2, [r2, #4]
 8005e34:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6892      	ldr	r2, [r2, #8]
 8005e3e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005e40:	f7fc fe56 	bl	8002af0 <HAL_GetTick>
 8005e44:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005e46:	e00f      	b.n	8005e68 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005e48:	f7fc fe52 	bl	8002af0 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b31      	cmp	r3, #49	; 0x31
 8005e54:	d908      	bls.n	8005e68 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e019      	b.n	8005e9c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e8      	bne.n	8005e48 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d005      	beq.n	8005e90 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	68d2      	ldr	r2, [r2, #12]
 8005e8c:	611a      	str	r2, [r3, #16]
 8005e8e:	e004      	b.n	8005e9a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005e98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e0c0      	b.n	8006038 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fc fbe0 	bl	8002690 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f002 fe6f 	bl	8008bc0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
 8005ee6:	e03e      	b.n	8005f66 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005ee8:	7bfa      	ldrb	r2, [r7, #15]
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3311      	adds	r3, #17
 8005ef8:	2201      	movs	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005efc:	7bfa      	ldrb	r2, [r7, #15]
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	4613      	mov	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	440b      	add	r3, r1
 8005f0a:	3310      	adds	r3, #16
 8005f0c:	7bfa      	ldrb	r2, [r7, #15]
 8005f0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f10:	7bfa      	ldrb	r2, [r7, #15]
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	440b      	add	r3, r1
 8005f1e:	3313      	adds	r3, #19
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f24:	7bfa      	ldrb	r2, [r7, #15]
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	440b      	add	r3, r1
 8005f32:	3320      	adds	r3, #32
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f38:	7bfa      	ldrb	r2, [r7, #15]
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	440b      	add	r3, r1
 8005f46:	3324      	adds	r3, #36	; 0x24
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	4613      	mov	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	440b      	add	r3, r1
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	3301      	adds	r3, #1
 8005f64:	73fb      	strb	r3, [r7, #15]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	791b      	ldrb	r3, [r3, #4]
 8005f6a:	7bfa      	ldrb	r2, [r7, #15]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d3bb      	bcc.n	8005ee8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f70:	2300      	movs	r3, #0
 8005f72:	73fb      	strb	r3, [r7, #15]
 8005f74:	e044      	b.n	8006000 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f76:	7bfa      	ldrb	r2, [r7, #15]
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	440b      	add	r3, r1
 8005f84:	f203 1351 	addw	r3, r3, #337	; 0x151
 8005f88:	2200      	movs	r2, #0
 8005f8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f8c:	7bfa      	ldrb	r2, [r7, #15]
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	440b      	add	r3, r1
 8005f9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f9e:	7bfa      	ldrb	r2, [r7, #15]
 8005fa0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005fa2:	7bfa      	ldrb	r2, [r7, #15]
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	440b      	add	r3, r1
 8005fb0:	f203 1353 	addw	r3, r3, #339	; 0x153
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005fb8:	7bfa      	ldrb	r2, [r7, #15]
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	440b      	add	r3, r1
 8005fc6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005fce:	7bfa      	ldrb	r2, [r7, #15]
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	440b      	add	r3, r1
 8005fdc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005fe4:	7bfa      	ldrb	r2, [r7, #15]
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	440b      	add	r3, r1
 8005ff2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	73fb      	strb	r3, [r7, #15]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	791b      	ldrb	r3, [r3, #4]
 8006004:	7bfa      	ldrb	r2, [r7, #15]
 8006006:	429a      	cmp	r2, r3
 8006008:	d3b5      	bcc.n	8005f76 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6818      	ldr	r0, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3304      	adds	r3, #4
 8006012:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006016:	f002 fdee 	bl	8008bf6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	7a9b      	ldrb	r3, [r3, #10]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d102      	bne.n	8006036 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f805 	bl	8006040 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006064:	b29b      	uxth	r3, r3
 8006066:	f043 0301 	orr.w	r3, r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006078:	b29b      	uxth	r3, r3
 800607a:	f043 0302 	orr.w	r3, r3, #2
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d141      	bne.n	8006126 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80060a2:	4b4b      	ldr	r3, [pc, #300]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80060aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ae:	d131      	bne.n	8006114 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060b0:	4b47      	ldr	r3, [pc, #284]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060b6:	4a46      	ldr	r2, [pc, #280]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80060c0:	4b43      	ldr	r3, [pc, #268]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80060c8:	4a41      	ldr	r2, [pc, #260]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060d0:	4b40      	ldr	r3, [pc, #256]	; (80061d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2232      	movs	r2, #50	; 0x32
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	4a3f      	ldr	r2, [pc, #252]	; (80061d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80060dc:	fba2 2303 	umull	r2, r3, r2, r3
 80060e0:	0c9b      	lsrs	r3, r3, #18
 80060e2:	3301      	adds	r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060e6:	e002      	b.n	80060ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060ee:	4b38      	ldr	r3, [pc, #224]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060fa:	d102      	bne.n	8006102 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1f2      	bne.n	80060e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006102:	4b33      	ldr	r3, [pc, #204]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800610a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610e:	d158      	bne.n	80061c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e057      	b.n	80061c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006114:	4b2e      	ldr	r3, [pc, #184]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800611a:	4a2d      	ldr	r2, [pc, #180]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800611c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006120:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006124:	e04d      	b.n	80061c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800612c:	d141      	bne.n	80061b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800612e:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800613a:	d131      	bne.n	80061a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800613c:	4b24      	ldr	r3, [pc, #144]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800613e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006142:	4a23      	ldr	r2, [pc, #140]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006148:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800614c:	4b20      	ldr	r3, [pc, #128]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006154:	4a1e      	ldr	r2, [pc, #120]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800615a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800615c:	4b1d      	ldr	r3, [pc, #116]	; (80061d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2232      	movs	r2, #50	; 0x32
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	4a1c      	ldr	r2, [pc, #112]	; (80061d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006168:	fba2 2303 	umull	r2, r3, r2, r3
 800616c:	0c9b      	lsrs	r3, r3, #18
 800616e:	3301      	adds	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006172:	e002      	b.n	800617a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3b01      	subs	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800617a:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006186:	d102      	bne.n	800618e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f2      	bne.n	8006174 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800618e:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800619a:	d112      	bne.n	80061c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e011      	b.n	80061c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061a6:	4a0a      	ldr	r2, [pc, #40]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80061b0:	e007      	b.n	80061c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80061b2:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061ba:	4a05      	ldr	r2, [pc, #20]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	40007000 	.word	0x40007000
 80061d4:	20000000 	.word	0x20000000
 80061d8:	431bde83 	.word	0x431bde83

080061dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80061e0:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	4a04      	ldr	r2, [pc, #16]	; (80061f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80061e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061ea:	6093      	str	r3, [r2, #8]
}
 80061ec:	bf00      	nop
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40007000 	.word	0x40007000

080061fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e2fe      	b.n	800680c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d075      	beq.n	8006306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800621a:	4b97      	ldr	r3, [pc, #604]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f003 030c 	and.w	r3, r3, #12
 8006222:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006224:	4b94      	ldr	r3, [pc, #592]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	2b0c      	cmp	r3, #12
 8006232:	d102      	bne.n	800623a <HAL_RCC_OscConfig+0x3e>
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2b03      	cmp	r3, #3
 8006238:	d002      	beq.n	8006240 <HAL_RCC_OscConfig+0x44>
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b08      	cmp	r3, #8
 800623e:	d10b      	bne.n	8006258 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006240:	4b8d      	ldr	r3, [pc, #564]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d05b      	beq.n	8006304 <HAL_RCC_OscConfig+0x108>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d157      	bne.n	8006304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e2d9      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006260:	d106      	bne.n	8006270 <HAL_RCC_OscConfig+0x74>
 8006262:	4b85      	ldr	r3, [pc, #532]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a84      	ldr	r2, [pc, #528]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e01d      	b.n	80062ac <HAL_RCC_OscConfig+0xb0>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006278:	d10c      	bne.n	8006294 <HAL_RCC_OscConfig+0x98>
 800627a:	4b7f      	ldr	r3, [pc, #508]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a7e      	ldr	r2, [pc, #504]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	4b7c      	ldr	r3, [pc, #496]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a7b      	ldr	r2, [pc, #492]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 800628c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	e00b      	b.n	80062ac <HAL_RCC_OscConfig+0xb0>
 8006294:	4b78      	ldr	r3, [pc, #480]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a77      	ldr	r2, [pc, #476]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 800629a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	4b75      	ldr	r3, [pc, #468]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a74      	ldr	r2, [pc, #464]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 80062a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d013      	beq.n	80062dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b4:	f7fc fc1c 	bl	8002af0 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062bc:	f7fc fc18 	bl	8002af0 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b64      	cmp	r3, #100	; 0x64
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e29e      	b.n	800680c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062ce:	4b6a      	ldr	r3, [pc, #424]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0f0      	beq.n	80062bc <HAL_RCC_OscConfig+0xc0>
 80062da:	e014      	b.n	8006306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062dc:	f7fc fc08 	bl	8002af0 <HAL_GetTick>
 80062e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062e4:	f7fc fc04 	bl	8002af0 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b64      	cmp	r3, #100	; 0x64
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e28a      	b.n	800680c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062f6:	4b60      	ldr	r3, [pc, #384]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f0      	bne.n	80062e4 <HAL_RCC_OscConfig+0xe8>
 8006302:	e000      	b.n	8006306 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d075      	beq.n	80063fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006312:	4b59      	ldr	r3, [pc, #356]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 030c 	and.w	r3, r3, #12
 800631a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800631c:	4b56      	ldr	r3, [pc, #344]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0303 	and.w	r3, r3, #3
 8006324:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	2b0c      	cmp	r3, #12
 800632a:	d102      	bne.n	8006332 <HAL_RCC_OscConfig+0x136>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b02      	cmp	r3, #2
 8006330:	d002      	beq.n	8006338 <HAL_RCC_OscConfig+0x13c>
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	2b04      	cmp	r3, #4
 8006336:	d11f      	bne.n	8006378 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006338:	4b4f      	ldr	r3, [pc, #316]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <HAL_RCC_OscConfig+0x154>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e25d      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006350:	4b49      	ldr	r3, [pc, #292]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	061b      	lsls	r3, r3, #24
 800635e:	4946      	ldr	r1, [pc, #280]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006360:	4313      	orrs	r3, r2
 8006362:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006364:	4b45      	ldr	r3, [pc, #276]	; (800647c <HAL_RCC_OscConfig+0x280>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f7fc fb75 	bl	8002a58 <HAL_InitTick>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d043      	beq.n	80063fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e249      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d023      	beq.n	80063c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006380:	4b3d      	ldr	r3, [pc, #244]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a3c      	ldr	r2, [pc, #240]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800638a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7fc fbb0 	bl	8002af0 <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006394:	f7fc fbac 	bl	8002af0 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e232      	b.n	800680c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063a6:	4b34      	ldr	r3, [pc, #208]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0f0      	beq.n	8006394 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b2:	4b31      	ldr	r3, [pc, #196]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	061b      	lsls	r3, r3, #24
 80063c0:	492d      	ldr	r1, [pc, #180]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	604b      	str	r3, [r1, #4]
 80063c6:	e01a      	b.n	80063fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063c8:	4b2b      	ldr	r3, [pc, #172]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a2a      	ldr	r2, [pc, #168]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 80063ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fc fb8c 	bl	8002af0 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063dc:	f7fc fb88 	bl	8002af0 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e20e      	b.n	800680c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063ee:	4b22      	ldr	r3, [pc, #136]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x1e0>
 80063fa:	e000      	b.n	80063fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0308 	and.w	r3, r3, #8
 8006406:	2b00      	cmp	r3, #0
 8006408:	d041      	beq.n	800648e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01c      	beq.n	800644c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006412:	4b19      	ldr	r3, [pc, #100]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006418:	4a17      	ldr	r2, [pc, #92]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006422:	f7fc fb65 	bl	8002af0 <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800642a:	f7fc fb61 	bl	8002af0 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e1e7      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800643c:	4b0e      	ldr	r3, [pc, #56]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 800643e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0ef      	beq.n	800642a <HAL_RCC_OscConfig+0x22e>
 800644a:	e020      	b.n	800648e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 800644e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006452:	4a09      	ldr	r2, [pc, #36]	; (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006454:	f023 0301 	bic.w	r3, r3, #1
 8006458:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645c:	f7fc fb48 	bl	8002af0 <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006462:	e00d      	b.n	8006480 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006464:	f7fc fb44 	bl	8002af0 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d906      	bls.n	8006480 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e1ca      	b.n	800680c <HAL_RCC_OscConfig+0x610>
 8006476:	bf00      	nop
 8006478:	40021000 	.word	0x40021000
 800647c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006480:	4b8c      	ldr	r3, [pc, #560]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1ea      	bne.n	8006464 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 80a6 	beq.w	80065e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800649c:	2300      	movs	r3, #0
 800649e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80064a0:	4b84      	ldr	r3, [pc, #528]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80064a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_RCC_OscConfig+0x2b4>
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <HAL_RCC_OscConfig+0x2b6>
 80064b0:	2300      	movs	r3, #0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00d      	beq.n	80064d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064b6:	4b7f      	ldr	r3, [pc, #508]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80064b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ba:	4a7e      	ldr	r2, [pc, #504]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80064bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c0:	6593      	str	r3, [r2, #88]	; 0x58
 80064c2:	4b7c      	ldr	r3, [pc, #496]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80064c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80064ce:	2301      	movs	r3, #1
 80064d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064d2:	4b79      	ldr	r3, [pc, #484]	; (80066b8 <HAL_RCC_OscConfig+0x4bc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d118      	bne.n	8006510 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064de:	4b76      	ldr	r3, [pc, #472]	; (80066b8 <HAL_RCC_OscConfig+0x4bc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a75      	ldr	r2, [pc, #468]	; (80066b8 <HAL_RCC_OscConfig+0x4bc>)
 80064e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ea:	f7fc fb01 	bl	8002af0 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f2:	f7fc fafd 	bl	8002af0 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e183      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006504:	4b6c      	ldr	r3, [pc, #432]	; (80066b8 <HAL_RCC_OscConfig+0x4bc>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0f0      	beq.n	80064f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d108      	bne.n	800652a <HAL_RCC_OscConfig+0x32e>
 8006518:	4b66      	ldr	r3, [pc, #408]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800651a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651e:	4a65      	ldr	r2, [pc, #404]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006520:	f043 0301 	orr.w	r3, r3, #1
 8006524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006528:	e024      	b.n	8006574 <HAL_RCC_OscConfig+0x378>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2b05      	cmp	r3, #5
 8006530:	d110      	bne.n	8006554 <HAL_RCC_OscConfig+0x358>
 8006532:	4b60      	ldr	r3, [pc, #384]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006538:	4a5e      	ldr	r2, [pc, #376]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800653a:	f043 0304 	orr.w	r3, r3, #4
 800653e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006542:	4b5c      	ldr	r3, [pc, #368]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006548:	4a5a      	ldr	r2, [pc, #360]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800654a:	f043 0301 	orr.w	r3, r3, #1
 800654e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006552:	e00f      	b.n	8006574 <HAL_RCC_OscConfig+0x378>
 8006554:	4b57      	ldr	r3, [pc, #348]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655a:	4a56      	ldr	r2, [pc, #344]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006564:	4b53      	ldr	r3, [pc, #332]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656a:	4a52      	ldr	r2, [pc, #328]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800656c:	f023 0304 	bic.w	r3, r3, #4
 8006570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d016      	beq.n	80065aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657c:	f7fc fab8 	bl	8002af0 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006582:	e00a      	b.n	800659a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006584:	f7fc fab4 	bl	8002af0 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006592:	4293      	cmp	r3, r2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e138      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800659a:	4b46      	ldr	r3, [pc, #280]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800659c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0ed      	beq.n	8006584 <HAL_RCC_OscConfig+0x388>
 80065a8:	e015      	b.n	80065d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065aa:	f7fc faa1 	bl	8002af0 <HAL_GetTick>
 80065ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065b0:	e00a      	b.n	80065c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065b2:	f7fc fa9d 	bl	8002af0 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d901      	bls.n	80065c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e121      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065c8:	4b3a      	ldr	r3, [pc, #232]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80065ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1ed      	bne.n	80065b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065d6:	7ffb      	ldrb	r3, [r7, #31]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d105      	bne.n	80065e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065dc:	4b35      	ldr	r3, [pc, #212]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80065de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e0:	4a34      	ldr	r2, [pc, #208]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80065e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d03c      	beq.n	800666e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01c      	beq.n	8006636 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065fc:	4b2d      	ldr	r3, [pc, #180]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80065fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006602:	4a2c      	ldr	r2, [pc, #176]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006604:	f043 0301 	orr.w	r3, r3, #1
 8006608:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800660c:	f7fc fa70 	bl	8002af0 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006614:	f7fc fa6c 	bl	8002af0 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e0f2      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006626:	4b23      	ldr	r3, [pc, #140]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006628:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0ef      	beq.n	8006614 <HAL_RCC_OscConfig+0x418>
 8006634:	e01b      	b.n	800666e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006636:	4b1f      	ldr	r3, [pc, #124]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006638:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800663c:	4a1d      	ldr	r2, [pc, #116]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006646:	f7fc fa53 	bl	8002af0 <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800664e:	f7fc fa4f 	bl	8002af0 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e0d5      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006660:	4b14      	ldr	r3, [pc, #80]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1ef      	bne.n	800664e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 80c9 	beq.w	800680a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006678:	4b0e      	ldr	r3, [pc, #56]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f003 030c 	and.w	r3, r3, #12
 8006680:	2b0c      	cmp	r3, #12
 8006682:	f000 8083 	beq.w	800678c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	2b02      	cmp	r3, #2
 800668c:	d15e      	bne.n	800674c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800668e:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a08      	ldr	r2, [pc, #32]	; (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006694:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800669a:	f7fc fa29 	bl	8002af0 <HAL_GetTick>
 800669e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066a0:	e00c      	b.n	80066bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066a2:	f7fc fa25 	bl	8002af0 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d905      	bls.n	80066bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e0ab      	b.n	800680c <HAL_RCC_OscConfig+0x610>
 80066b4:	40021000 	.word	0x40021000
 80066b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066bc:	4b55      	ldr	r3, [pc, #340]	; (8006814 <HAL_RCC_OscConfig+0x618>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1ec      	bne.n	80066a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066c8:	4b52      	ldr	r3, [pc, #328]	; (8006814 <HAL_RCC_OscConfig+0x618>)
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	4b52      	ldr	r3, [pc, #328]	; (8006818 <HAL_RCC_OscConfig+0x61c>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6a11      	ldr	r1, [r2, #32]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066d8:	3a01      	subs	r2, #1
 80066da:	0112      	lsls	r2, r2, #4
 80066dc:	4311      	orrs	r1, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80066e2:	0212      	lsls	r2, r2, #8
 80066e4:	4311      	orrs	r1, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80066ea:	0852      	lsrs	r2, r2, #1
 80066ec:	3a01      	subs	r2, #1
 80066ee:	0552      	lsls	r2, r2, #21
 80066f0:	4311      	orrs	r1, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066f6:	0852      	lsrs	r2, r2, #1
 80066f8:	3a01      	subs	r2, #1
 80066fa:	0652      	lsls	r2, r2, #25
 80066fc:	4311      	orrs	r1, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006702:	06d2      	lsls	r2, r2, #27
 8006704:	430a      	orrs	r2, r1
 8006706:	4943      	ldr	r1, [pc, #268]	; (8006814 <HAL_RCC_OscConfig+0x618>)
 8006708:	4313      	orrs	r3, r2
 800670a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800670c:	4b41      	ldr	r3, [pc, #260]	; (8006814 <HAL_RCC_OscConfig+0x618>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a40      	ldr	r2, [pc, #256]	; (8006814 <HAL_RCC_OscConfig+0x618>)
 8006712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006716:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006718:	4b3e      	ldr	r3, [pc, #248]	; (8006814 <HAL_RCC_OscConfig+0x618>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4a3d      	ldr	r2, [pc, #244]	; (8006814 <HAL_RCC_OscConfig+0x618>)
 800671e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006722:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006724:	f7fc f9e4 	bl	8002af0 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800672c:	f7fc f9e0 	bl	8002af0 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e066      	b.n	800680c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800673e:	4b35      	ldr	r3, [pc, #212]	; (8006814 <HAL_RCC_OscConfig+0x618>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0f0      	beq.n	800672c <HAL_RCC_OscConfig+0x530>
 800674a:	e05e      	b.n	800680a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800674c:	4b31      	ldr	r3, [pc, #196]	; (8006814 <HAL_RCC_OscConfig+0x618>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a30      	ldr	r2, [pc, #192]	; (8006814 <HAL_RCC_OscConfig+0x618>)
 8006752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006758:	f7fc f9ca 	bl	8002af0 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006760:	f7fc f9c6 	bl	8002af0 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e04c      	b.n	800680c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006772:	4b28      	ldr	r3, [pc, #160]	; (8006814 <HAL_RCC_OscConfig+0x618>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f0      	bne.n	8006760 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800677e:	4b25      	ldr	r3, [pc, #148]	; (8006814 <HAL_RCC_OscConfig+0x618>)
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	4924      	ldr	r1, [pc, #144]	; (8006814 <HAL_RCC_OscConfig+0x618>)
 8006784:	4b25      	ldr	r3, [pc, #148]	; (800681c <HAL_RCC_OscConfig+0x620>)
 8006786:	4013      	ands	r3, r2
 8006788:	60cb      	str	r3, [r1, #12]
 800678a:	e03e      	b.n	800680a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e039      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006798:	4b1e      	ldr	r3, [pc, #120]	; (8006814 <HAL_RCC_OscConfig+0x618>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f003 0203 	and.w	r2, r3, #3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d12c      	bne.n	8006806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	3b01      	subs	r3, #1
 80067b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d123      	bne.n	8006806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d11b      	bne.n	8006806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067da:	429a      	cmp	r2, r3
 80067dc:	d113      	bne.n	8006806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	085b      	lsrs	r3, r3, #1
 80067ea:	3b01      	subs	r3, #1
 80067ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d109      	bne.n	8006806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fc:	085b      	lsrs	r3, r3, #1
 80067fe:	3b01      	subs	r3, #1
 8006800:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006802:	429a      	cmp	r2, r3
 8006804:	d001      	beq.n	800680a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e000      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3720      	adds	r7, #32
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	40021000 	.word	0x40021000
 8006818:	019f800c 	.word	0x019f800c
 800681c:	feeefffc 	.word	0xfeeefffc

08006820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800682a:	2300      	movs	r3, #0
 800682c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e11e      	b.n	8006a76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006838:	4b91      	ldr	r3, [pc, #580]	; (8006a80 <HAL_RCC_ClockConfig+0x260>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 030f 	and.w	r3, r3, #15
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d910      	bls.n	8006868 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006846:	4b8e      	ldr	r3, [pc, #568]	; (8006a80 <HAL_RCC_ClockConfig+0x260>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f023 020f 	bic.w	r2, r3, #15
 800684e:	498c      	ldr	r1, [pc, #560]	; (8006a80 <HAL_RCC_ClockConfig+0x260>)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	4313      	orrs	r3, r2
 8006854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006856:	4b8a      	ldr	r3, [pc, #552]	; (8006a80 <HAL_RCC_ClockConfig+0x260>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d001      	beq.n	8006868 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e106      	b.n	8006a76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d073      	beq.n	800695c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2b03      	cmp	r3, #3
 800687a:	d129      	bne.n	80068d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800687c:	4b81      	ldr	r3, [pc, #516]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e0f4      	b.n	8006a76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800688c:	f000 f9ca 	bl	8006c24 <RCC_GetSysClockFreqFromPLLSource>
 8006890:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	4a7c      	ldr	r2, [pc, #496]	; (8006a88 <HAL_RCC_ClockConfig+0x268>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d93f      	bls.n	800691a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800689a:	4b7a      	ldr	r3, [pc, #488]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d009      	beq.n	80068ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d033      	beq.n	800691a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d12f      	bne.n	800691a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068ba:	4b72      	ldr	r3, [pc, #456]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068c2:	4a70      	ldr	r2, [pc, #448]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 80068c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80068ca:	2380      	movs	r3, #128	; 0x80
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	e024      	b.n	800691a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d107      	bne.n	80068e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068d8:	4b6a      	ldr	r3, [pc, #424]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d109      	bne.n	80068f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0c6      	b.n	8006a76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068e8:	4b66      	ldr	r3, [pc, #408]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e0be      	b.n	8006a76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80068f8:	f000 f8ce 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 80068fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	4a61      	ldr	r2, [pc, #388]	; (8006a88 <HAL_RCC_ClockConfig+0x268>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d909      	bls.n	800691a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006906:	4b5f      	ldr	r3, [pc, #380]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800690e:	4a5d      	ldr	r2, [pc, #372]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006914:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006916:	2380      	movs	r3, #128	; 0x80
 8006918:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800691a:	4b5a      	ldr	r3, [pc, #360]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f023 0203 	bic.w	r2, r3, #3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	4957      	ldr	r1, [pc, #348]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006928:	4313      	orrs	r3, r2
 800692a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800692c:	f7fc f8e0 	bl	8002af0 <HAL_GetTick>
 8006930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006932:	e00a      	b.n	800694a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006934:	f7fc f8dc 	bl	8002af0 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006942:	4293      	cmp	r3, r2
 8006944:	d901      	bls.n	800694a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e095      	b.n	8006a76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694a:	4b4e      	ldr	r3, [pc, #312]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 020c 	and.w	r2, r3, #12
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	429a      	cmp	r2, r3
 800695a:	d1eb      	bne.n	8006934 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d023      	beq.n	80069b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006974:	4b43      	ldr	r3, [pc, #268]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	4a42      	ldr	r2, [pc, #264]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 800697a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800697e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800698c:	4b3d      	ldr	r3, [pc, #244]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006994:	4a3b      	ldr	r2, [pc, #236]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006996:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800699a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800699c:	4b39      	ldr	r3, [pc, #228]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	4936      	ldr	r1, [pc, #216]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	608b      	str	r3, [r1, #8]
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2b80      	cmp	r3, #128	; 0x80
 80069b4:	d105      	bne.n	80069c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80069b6:	4b33      	ldr	r3, [pc, #204]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	4a32      	ldr	r2, [pc, #200]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 80069bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069c2:	4b2f      	ldr	r3, [pc, #188]	; (8006a80 <HAL_RCC_ClockConfig+0x260>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d21d      	bcs.n	8006a0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d0:	4b2b      	ldr	r3, [pc, #172]	; (8006a80 <HAL_RCC_ClockConfig+0x260>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f023 020f 	bic.w	r2, r3, #15
 80069d8:	4929      	ldr	r1, [pc, #164]	; (8006a80 <HAL_RCC_ClockConfig+0x260>)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	4313      	orrs	r3, r2
 80069de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80069e0:	f7fc f886 	bl	8002af0 <HAL_GetTick>
 80069e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e6:	e00a      	b.n	80069fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069e8:	f7fc f882 	bl	8002af0 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e03b      	b.n	8006a76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069fe:	4b20      	ldr	r3, [pc, #128]	; (8006a80 <HAL_RCC_ClockConfig+0x260>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d1ed      	bne.n	80069e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d008      	beq.n	8006a2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a18:	4b1a      	ldr	r3, [pc, #104]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	4917      	ldr	r1, [pc, #92]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a36:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	490f      	ldr	r1, [pc, #60]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a4a:	f000 f825 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	091b      	lsrs	r3, r3, #4
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	490c      	ldr	r1, [pc, #48]	; (8006a8c <HAL_RCC_ClockConfig+0x26c>)
 8006a5c:	5ccb      	ldrb	r3, [r1, r3]
 8006a5e:	f003 031f 	and.w	r3, r3, #31
 8006a62:	fa22 f303 	lsr.w	r3, r2, r3
 8006a66:	4a0a      	ldr	r2, [pc, #40]	; (8006a90 <HAL_RCC_ClockConfig+0x270>)
 8006a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a6a:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <HAL_RCC_ClockConfig+0x274>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fb fff2 	bl	8002a58 <HAL_InitTick>
 8006a74:	4603      	mov	r3, r0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40022000 	.word	0x40022000
 8006a84:	40021000 	.word	0x40021000
 8006a88:	04c4b400 	.word	0x04c4b400
 8006a8c:	08008e3c 	.word	0x08008e3c
 8006a90:	20000000 	.word	0x20000000
 8006a94:	20000008 	.word	0x20000008

08006a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006a9e:	4b2c      	ldr	r3, [pc, #176]	; (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 030c 	and.w	r3, r3, #12
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d102      	bne.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006aaa:	4b2a      	ldr	r3, [pc, #168]	; (8006b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	e047      	b.n	8006b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006ab0:	4b27      	ldr	r3, [pc, #156]	; (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 030c 	and.w	r3, r3, #12
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d102      	bne.n	8006ac2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006abc:	4b26      	ldr	r3, [pc, #152]	; (8006b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006abe:	613b      	str	r3, [r7, #16]
 8006ac0:	e03e      	b.n	8006b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006ac2:	4b23      	ldr	r3, [pc, #140]	; (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 030c 	and.w	r3, r3, #12
 8006aca:	2b0c      	cmp	r3, #12
 8006acc:	d136      	bne.n	8006b3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ace:	4b20      	ldr	r3, [pc, #128]	; (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	091b      	lsrs	r3, r3, #4
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d10c      	bne.n	8006b06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006aec:	4a1a      	ldr	r2, [pc, #104]	; (8006b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af4:	4a16      	ldr	r2, [pc, #88]	; (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006af6:	68d2      	ldr	r2, [r2, #12]
 8006af8:	0a12      	lsrs	r2, r2, #8
 8006afa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006afe:	fb02 f303 	mul.w	r3, r2, r3
 8006b02:	617b      	str	r3, [r7, #20]
      break;
 8006b04:	e00c      	b.n	8006b20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b06:	4a13      	ldr	r2, [pc, #76]	; (8006b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0e:	4a10      	ldr	r2, [pc, #64]	; (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b10:	68d2      	ldr	r2, [r2, #12]
 8006b12:	0a12      	lsrs	r2, r2, #8
 8006b14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b18:	fb02 f303 	mul.w	r3, r2, r3
 8006b1c:	617b      	str	r3, [r7, #20]
      break;
 8006b1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b20:	4b0b      	ldr	r3, [pc, #44]	; (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	0e5b      	lsrs	r3, r3, #25
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	e001      	b.n	8006b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006b40:	693b      	ldr	r3, [r7, #16]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	40021000 	.word	0x40021000
 8006b54:	00f42400 	.word	0x00f42400
 8006b58:	007a1200 	.word	0x007a1200

08006b5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b60:	4b03      	ldr	r3, [pc, #12]	; (8006b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b62:	681b      	ldr	r3, [r3, #0]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20000000 	.word	0x20000000

08006b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b78:	f7ff fff0 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	0a1b      	lsrs	r3, r3, #8
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	4904      	ldr	r1, [pc, #16]	; (8006b9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b8a:	5ccb      	ldrb	r3, [r1, r3]
 8006b8c:	f003 031f 	and.w	r3, r3, #31
 8006b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40021000 	.word	0x40021000
 8006b9c:	08008e4c 	.word	0x08008e4c

08006ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ba4:	f7ff ffda 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	0adb      	lsrs	r3, r3, #11
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	4904      	ldr	r1, [pc, #16]	; (8006bc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bb6:	5ccb      	ldrb	r3, [r1, r3]
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	08008e4c 	.word	0x08008e4c

08006bcc <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8006bd0:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <HAL_RCC_EnableCSS+0x1c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a04      	ldr	r2, [pc, #16]	; (8006be8 <HAL_RCC_EnableCSS+0x1c>)
 8006bd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bda:	6013      	str	r3, [r2, #0]
}
 8006bdc:	bf00      	nop
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40021000 	.word	0x40021000

08006bec <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006bf0:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfc:	d105      	bne.n	8006c0a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006bfe:	f000 f809 	bl	8006c14 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006c02:	4b03      	ldr	r3, [pc, #12]	; (8006c10 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c08:	621a      	str	r2, [r3, #32]
  }
}
 8006c0a:	bf00      	nop
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	40021000 	.word	0x40021000

08006c14 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c2a:	4b1e      	ldr	r3, [pc, #120]	; (8006ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c34:	4b1b      	ldr	r3, [pc, #108]	; (8006ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	091b      	lsrs	r3, r3, #4
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	3301      	adds	r3, #1
 8006c40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d10c      	bne.n	8006c62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c48:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c50:	4a14      	ldr	r2, [pc, #80]	; (8006ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c52:	68d2      	ldr	r2, [r2, #12]
 8006c54:	0a12      	lsrs	r2, r2, #8
 8006c56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	617b      	str	r3, [r7, #20]
    break;
 8006c60:	e00c      	b.n	8006c7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c62:	4a12      	ldr	r2, [pc, #72]	; (8006cac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6a:	4a0e      	ldr	r2, [pc, #56]	; (8006ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c6c:	68d2      	ldr	r2, [r2, #12]
 8006c6e:	0a12      	lsrs	r2, r2, #8
 8006c70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c74:	fb02 f303 	mul.w	r3, r2, r3
 8006c78:	617b      	str	r3, [r7, #20]
    break;
 8006c7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c7c:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	0e5b      	lsrs	r3, r3, #25
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	3301      	adds	r3, #1
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006c96:	687b      	ldr	r3, [r7, #4]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	371c      	adds	r7, #28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	40021000 	.word	0x40021000
 8006ca8:	007a1200 	.word	0x007a1200
 8006cac:	00f42400 	.word	0x00f42400

08006cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cb8:	2300      	movs	r3, #0
 8006cba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 8098 	beq.w	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cd2:	4b43      	ldr	r3, [pc, #268]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10d      	bne.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cde:	4b40      	ldr	r3, [pc, #256]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce2:	4a3f      	ldr	r2, [pc, #252]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8006cea:	4b3d      	ldr	r3, [pc, #244]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cf2:	60bb      	str	r3, [r7, #8]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cfa:	4b3a      	ldr	r3, [pc, #232]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a39      	ldr	r2, [pc, #228]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d06:	f7fb fef3 	bl	8002af0 <HAL_GetTick>
 8006d0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d0c:	e009      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d0e:	f7fb feef 	bl	8002af0 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d902      	bls.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	74fb      	strb	r3, [r7, #19]
        break;
 8006d20:	e005      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d22:	4b30      	ldr	r3, [pc, #192]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0ef      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006d2e:	7cfb      	ldrb	r3, [r7, #19]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d159      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d34:	4b2a      	ldr	r3, [pc, #168]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d01e      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d019      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d50:	4b23      	ldr	r3, [pc, #140]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d5c:	4b20      	ldr	r3, [pc, #128]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d62:	4a1f      	ldr	r2, [pc, #124]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d6c:	4b1c      	ldr	r3, [pc, #112]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d72:	4a1b      	ldr	r2, [pc, #108]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d7c:	4a18      	ldr	r2, [pc, #96]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d016      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8e:	f7fb feaf 	bl	8002af0 <HAL_GetTick>
 8006d92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d94:	e00b      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d96:	f7fb feab 	bl	8002af0 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d902      	bls.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	74fb      	strb	r3, [r7, #19]
            break;
 8006dac:	e006      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dae:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0ec      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006dbc:	7cfb      	ldrb	r3, [r7, #19]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10b      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dc2:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd0:	4903      	ldr	r1, [pc, #12]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006dd8:	e008      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dda:	7cfb      	ldrb	r3, [r7, #19]
 8006ddc:	74bb      	strb	r3, [r7, #18]
 8006dde:	e005      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006de0:	40021000 	.word	0x40021000
 8006de4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de8:	7cfb      	ldrb	r3, [r7, #19]
 8006dea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dec:	7c7b      	ldrb	r3, [r7, #17]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d105      	bne.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006df2:	4ba7      	ldr	r3, [pc, #668]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df6:	4aa6      	ldr	r2, [pc, #664]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00a      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e0a:	4ba1      	ldr	r3, [pc, #644]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e10:	f023 0203 	bic.w	r2, r3, #3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	499d      	ldr	r1, [pc, #628]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00a      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e2c:	4b98      	ldr	r3, [pc, #608]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e32:	f023 020c 	bic.w	r2, r3, #12
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	4995      	ldr	r1, [pc, #596]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00a      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e4e:	4b90      	ldr	r3, [pc, #576]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	498c      	ldr	r1, [pc, #560]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0308 	and.w	r3, r3, #8
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00a      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e70:	4b87      	ldr	r3, [pc, #540]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	4984      	ldr	r1, [pc, #528]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0310 	and.w	r3, r3, #16
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e92:	4b7f      	ldr	r3, [pc, #508]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	497b      	ldr	r1, [pc, #492]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0320 	and.w	r3, r3, #32
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006eb4:	4b76      	ldr	r3, [pc, #472]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	4973      	ldr	r1, [pc, #460]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ed6:	4b6e      	ldr	r3, [pc, #440]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006edc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	496a      	ldr	r1, [pc, #424]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ef8:	4b65      	ldr	r3, [pc, #404]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006efe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	4962      	ldr	r1, [pc, #392]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f1a:	4b5d      	ldr	r3, [pc, #372]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	4959      	ldr	r1, [pc, #356]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00a      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f3c:	4b54      	ldr	r3, [pc, #336]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f42:	f023 0203 	bic.w	r2, r3, #3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4a:	4951      	ldr	r1, [pc, #324]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f5e:	4b4c      	ldr	r3, [pc, #304]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	4948      	ldr	r1, [pc, #288]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d015      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f80:	4b43      	ldr	r3, [pc, #268]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	4940      	ldr	r1, [pc, #256]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f9e:	d105      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fa0:	4b3b      	ldr	r3, [pc, #236]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	4a3a      	ldr	r2, [pc, #232]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006faa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d015      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006fb8:	4b35      	ldr	r3, [pc, #212]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc6:	4932      	ldr	r1, [pc, #200]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fd6:	d105      	bne.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fd8:	4b2d      	ldr	r3, [pc, #180]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	4a2c      	ldr	r2, [pc, #176]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fe2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d015      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ff0:	4b27      	ldr	r3, [pc, #156]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	4924      	ldr	r1, [pc, #144]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007000:	4313      	orrs	r3, r2
 8007002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800700e:	d105      	bne.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007010:	4b1f      	ldr	r3, [pc, #124]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	4a1e      	ldr	r2, [pc, #120]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800701a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d015      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007028:	4b19      	ldr	r3, [pc, #100]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800702a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800702e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007036:	4916      	ldr	r1, [pc, #88]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007038:	4313      	orrs	r3, r2
 800703a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007046:	d105      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007048:	4b11      	ldr	r3, [pc, #68]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	4a10      	ldr	r2, [pc, #64]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800704e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007052:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d019      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007060:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007066:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	4908      	ldr	r1, [pc, #32]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007070:	4313      	orrs	r3, r2
 8007072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800707e:	d109      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007080:	4b03      	ldr	r3, [pc, #12]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	4a02      	ldr	r2, [pc, #8]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800708a:	60d3      	str	r3, [r2, #12]
 800708c:	e002      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800708e:	bf00      	nop
 8007090:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d015      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80070a0:	4b29      	ldr	r3, [pc, #164]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ae:	4926      	ldr	r1, [pc, #152]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070be:	d105      	bne.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070c0:	4b21      	ldr	r3, [pc, #132]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	4a20      	ldr	r2, [pc, #128]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d015      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80070d8:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070e6:	4918      	ldr	r1, [pc, #96]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f6:	d105      	bne.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070f8:	4b13      	ldr	r3, [pc, #76]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	4a12      	ldr	r2, [pc, #72]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007102:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d015      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007110:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007112:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007116:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711e:	490a      	ldr	r1, [pc, #40]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007120:	4313      	orrs	r3, r2
 8007122:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800712a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800712e:	d105      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007130:	4b05      	ldr	r3, [pc, #20]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	4a04      	ldr	r2, [pc, #16]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800713a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800713c:	7cbb      	ldrb	r3, [r7, #18]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	40021000 	.word	0x40021000

0800714c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e09d      	b.n	800729a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	2b00      	cmp	r3, #0
 8007164:	d108      	bne.n	8007178 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800716e:	d009      	beq.n	8007184 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	61da      	str	r2, [r3, #28]
 8007176:	e005      	b.n	8007184 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fb f9c0 	bl	8002524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071c4:	d902      	bls.n	80071cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	e002      	b.n	80071d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80071cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80071da:	d007      	beq.n	80071ec <HAL_SPI_Init+0xa0>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071e4:	d002      	beq.n	80071ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071fc:	431a      	orrs	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	431a      	orrs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007224:	431a      	orrs	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722e:	ea42 0103 	orr.w	r1, r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	0c1b      	lsrs	r3, r3, #16
 8007248:	f003 0204 	and.w	r2, r3, #4
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	f003 0310 	and.w	r3, r3, #16
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725a:	f003 0308 	and.w	r3, r3, #8
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007268:	ea42 0103 	orr.w	r1, r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69da      	ldr	r2, [r3, #28]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007288:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b082      	sub	sp, #8
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e049      	b.n	8007348 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d106      	bne.n	80072ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7fb f9a1 	bl	8002610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2202      	movs	r2, #2
 80072d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3304      	adds	r3, #4
 80072de:	4619      	mov	r1, r3
 80072e0:	4610      	mov	r0, r2
 80072e2:	f000 fb69 	bl	80079b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	d001      	beq.n	8007368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e054      	b.n	8007412 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0201 	orr.w	r2, r2, #1
 800737e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a26      	ldr	r2, [pc, #152]	; (8007420 <HAL_TIM_Base_Start_IT+0xd0>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d022      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x80>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007392:	d01d      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x80>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a22      	ldr	r2, [pc, #136]	; (8007424 <HAL_TIM_Base_Start_IT+0xd4>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d018      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x80>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a21      	ldr	r2, [pc, #132]	; (8007428 <HAL_TIM_Base_Start_IT+0xd8>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d013      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x80>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a1f      	ldr	r2, [pc, #124]	; (800742c <HAL_TIM_Base_Start_IT+0xdc>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00e      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x80>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1e      	ldr	r2, [pc, #120]	; (8007430 <HAL_TIM_Base_Start_IT+0xe0>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d009      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x80>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1c      	ldr	r2, [pc, #112]	; (8007434 <HAL_TIM_Base_Start_IT+0xe4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d004      	beq.n	80073d0 <HAL_TIM_Base_Start_IT+0x80>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a1b      	ldr	r2, [pc, #108]	; (8007438 <HAL_TIM_Base_Start_IT+0xe8>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d115      	bne.n	80073fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689a      	ldr	r2, [r3, #8]
 80073d6:	4b19      	ldr	r3, [pc, #100]	; (800743c <HAL_TIM_Base_Start_IT+0xec>)
 80073d8:	4013      	ands	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b06      	cmp	r3, #6
 80073e0:	d015      	beq.n	800740e <HAL_TIM_Base_Start_IT+0xbe>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073e8:	d011      	beq.n	800740e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0201 	orr.w	r2, r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073fa:	e008      	b.n	800740e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	e000      	b.n	8007410 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800740e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	40012c00 	.word	0x40012c00
 8007424:	40000400 	.word	0x40000400
 8007428:	40000800 	.word	0x40000800
 800742c:	40000c00 	.word	0x40000c00
 8007430:	40013400 	.word	0x40013400
 8007434:	40014000 	.word	0x40014000
 8007438:	40015000 	.word	0x40015000
 800743c:	00010007 	.word	0x00010007

08007440 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 0201 	bic.w	r2, r2, #1
 8007456:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6a1a      	ldr	r2, [r3, #32]
 800745e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007462:	4013      	ands	r3, r2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10f      	bne.n	8007488 <HAL_TIM_Base_Stop_IT+0x48>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6a1a      	ldr	r2, [r3, #32]
 800746e:	f244 4344 	movw	r3, #17476	; 0x4444
 8007472:	4013      	ands	r3, r2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d107      	bne.n	8007488 <HAL_TIM_Base_Stop_IT+0x48>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0201 	bic.w	r2, r2, #1
 8007486:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b084      	sub	sp, #16
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d020      	beq.n	8007502 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d01b      	beq.n	8007502 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f06f 0202 	mvn.w	r2, #2
 80074d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	f003 0303 	and.w	r3, r3, #3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fa47 	bl	800797c <HAL_TIM_IC_CaptureCallback>
 80074ee:	e005      	b.n	80074fc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fa39 	bl	8007968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fa4a 	bl	8007990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d020      	beq.n	800754e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f003 0304 	and.w	r3, r3, #4
 8007512:	2b00      	cmp	r3, #0
 8007514:	d01b      	beq.n	800754e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f06f 0204 	mvn.w	r2, #4
 800751e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fa21 	bl	800797c <HAL_TIM_IC_CaptureCallback>
 800753a:	e005      	b.n	8007548 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fa13 	bl	8007968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fa24 	bl	8007990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f003 0308 	and.w	r3, r3, #8
 8007554:	2b00      	cmp	r3, #0
 8007556:	d020      	beq.n	800759a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01b      	beq.n	800759a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f06f 0208 	mvn.w	r2, #8
 800756a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2204      	movs	r2, #4
 8007570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69db      	ldr	r3, [r3, #28]
 8007578:	f003 0303 	and.w	r3, r3, #3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f9fb 	bl	800797c <HAL_TIM_IC_CaptureCallback>
 8007586:	e005      	b.n	8007594 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f9ed 	bl	8007968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f9fe 	bl	8007990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d020      	beq.n	80075e6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f003 0310 	and.w	r3, r3, #16
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01b      	beq.n	80075e6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f06f 0210 	mvn.w	r2, #16
 80075b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2208      	movs	r2, #8
 80075bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f9d5 	bl	800797c <HAL_TIM_IC_CaptureCallback>
 80075d2:	e005      	b.n	80075e0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f9c7 	bl	8007968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f9d8 	bl	8007990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00c      	beq.n	800760a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d007      	beq.n	800760a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f06f 0201 	mvn.w	r2, #1
 8007602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7fa f805 	bl	8001614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007610:	2b00      	cmp	r3, #0
 8007612:	d104      	bne.n	800761e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00c      	beq.n	8007638 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007624:	2b00      	cmp	r3, #0
 8007626:	d007      	beq.n	8007638 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fbb0 	bl	8007d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00c      	beq.n	800765c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007648:	2b00      	cmp	r3, #0
 800764a:	d007      	beq.n	800765c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fba8 	bl	8007dac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00c      	beq.n	8007680 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766c:	2b00      	cmp	r3, #0
 800766e:	d007      	beq.n	8007680 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f992 	bl	80079a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00c      	beq.n	80076a4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f003 0320 	and.w	r3, r3, #32
 8007690:	2b00      	cmp	r3, #0
 8007692:	d007      	beq.n	80076a4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0220 	mvn.w	r2, #32
 800769c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fb70 	bl	8007d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00c      	beq.n	80076c8 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d007      	beq.n	80076c8 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80076c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fb7c 	bl	8007dc0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00c      	beq.n	80076ec <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d007      	beq.n	80076ec <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80076e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fb74 	bl	8007dd4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00c      	beq.n	8007710 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d007      	beq.n	8007710 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fb6c 	bl	8007de8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00c      	beq.n	8007734 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d007      	beq.n	8007734 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800772c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fb64 	bl	8007dfc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007734:	bf00      	nop
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007750:	2b01      	cmp	r3, #1
 8007752:	d101      	bne.n	8007758 <HAL_TIM_ConfigClockSource+0x1c>
 8007754:	2302      	movs	r3, #2
 8007756:	e0f6      	b.n	8007946 <HAL_TIM_ConfigClockSource+0x20a>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007776:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800777a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a6f      	ldr	r2, [pc, #444]	; (8007950 <HAL_TIM_ConfigClockSource+0x214>)
 8007792:	4293      	cmp	r3, r2
 8007794:	f000 80c1 	beq.w	800791a <HAL_TIM_ConfigClockSource+0x1de>
 8007798:	4a6d      	ldr	r2, [pc, #436]	; (8007950 <HAL_TIM_ConfigClockSource+0x214>)
 800779a:	4293      	cmp	r3, r2
 800779c:	f200 80c6 	bhi.w	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 80077a0:	4a6c      	ldr	r2, [pc, #432]	; (8007954 <HAL_TIM_ConfigClockSource+0x218>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	f000 80b9 	beq.w	800791a <HAL_TIM_ConfigClockSource+0x1de>
 80077a8:	4a6a      	ldr	r2, [pc, #424]	; (8007954 <HAL_TIM_ConfigClockSource+0x218>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	f200 80be 	bhi.w	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 80077b0:	4a69      	ldr	r2, [pc, #420]	; (8007958 <HAL_TIM_ConfigClockSource+0x21c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	f000 80b1 	beq.w	800791a <HAL_TIM_ConfigClockSource+0x1de>
 80077b8:	4a67      	ldr	r2, [pc, #412]	; (8007958 <HAL_TIM_ConfigClockSource+0x21c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	f200 80b6 	bhi.w	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 80077c0:	4a66      	ldr	r2, [pc, #408]	; (800795c <HAL_TIM_ConfigClockSource+0x220>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	f000 80a9 	beq.w	800791a <HAL_TIM_ConfigClockSource+0x1de>
 80077c8:	4a64      	ldr	r2, [pc, #400]	; (800795c <HAL_TIM_ConfigClockSource+0x220>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	f200 80ae 	bhi.w	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 80077d0:	4a63      	ldr	r2, [pc, #396]	; (8007960 <HAL_TIM_ConfigClockSource+0x224>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	f000 80a1 	beq.w	800791a <HAL_TIM_ConfigClockSource+0x1de>
 80077d8:	4a61      	ldr	r2, [pc, #388]	; (8007960 <HAL_TIM_ConfigClockSource+0x224>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	f200 80a6 	bhi.w	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 80077e0:	4a60      	ldr	r2, [pc, #384]	; (8007964 <HAL_TIM_ConfigClockSource+0x228>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	f000 8099 	beq.w	800791a <HAL_TIM_ConfigClockSource+0x1de>
 80077e8:	4a5e      	ldr	r2, [pc, #376]	; (8007964 <HAL_TIM_ConfigClockSource+0x228>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	f200 809e 	bhi.w	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 80077f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80077f4:	f000 8091 	beq.w	800791a <HAL_TIM_ConfigClockSource+0x1de>
 80077f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80077fc:	f200 8096 	bhi.w	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 8007800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007804:	f000 8089 	beq.w	800791a <HAL_TIM_ConfigClockSource+0x1de>
 8007808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800780c:	f200 808e 	bhi.w	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 8007810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007814:	d03e      	beq.n	8007894 <HAL_TIM_ConfigClockSource+0x158>
 8007816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800781a:	f200 8087 	bhi.w	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 800781e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007822:	f000 8086 	beq.w	8007932 <HAL_TIM_ConfigClockSource+0x1f6>
 8007826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800782a:	d87f      	bhi.n	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 800782c:	2b70      	cmp	r3, #112	; 0x70
 800782e:	d01a      	beq.n	8007866 <HAL_TIM_ConfigClockSource+0x12a>
 8007830:	2b70      	cmp	r3, #112	; 0x70
 8007832:	d87b      	bhi.n	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 8007834:	2b60      	cmp	r3, #96	; 0x60
 8007836:	d050      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x19e>
 8007838:	2b60      	cmp	r3, #96	; 0x60
 800783a:	d877      	bhi.n	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 800783c:	2b50      	cmp	r3, #80	; 0x50
 800783e:	d03c      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x17e>
 8007840:	2b50      	cmp	r3, #80	; 0x50
 8007842:	d873      	bhi.n	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 8007844:	2b40      	cmp	r3, #64	; 0x40
 8007846:	d058      	beq.n	80078fa <HAL_TIM_ConfigClockSource+0x1be>
 8007848:	2b40      	cmp	r3, #64	; 0x40
 800784a:	d86f      	bhi.n	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 800784c:	2b30      	cmp	r3, #48	; 0x30
 800784e:	d064      	beq.n	800791a <HAL_TIM_ConfigClockSource+0x1de>
 8007850:	2b30      	cmp	r3, #48	; 0x30
 8007852:	d86b      	bhi.n	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 8007854:	2b20      	cmp	r3, #32
 8007856:	d060      	beq.n	800791a <HAL_TIM_ConfigClockSource+0x1de>
 8007858:	2b20      	cmp	r3, #32
 800785a:	d867      	bhi.n	800792c <HAL_TIM_ConfigClockSource+0x1f0>
 800785c:	2b00      	cmp	r3, #0
 800785e:	d05c      	beq.n	800791a <HAL_TIM_ConfigClockSource+0x1de>
 8007860:	2b10      	cmp	r3, #16
 8007862:	d05a      	beq.n	800791a <HAL_TIM_ConfigClockSource+0x1de>
 8007864:	e062      	b.n	800792c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007876:	f000 f9cf 	bl	8007c18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	609a      	str	r2, [r3, #8]
      break;
 8007892:	e04f      	b.n	8007934 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078a4:	f000 f9b8 	bl	8007c18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078b6:	609a      	str	r2, [r3, #8]
      break;
 80078b8:	e03c      	b.n	8007934 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c6:	461a      	mov	r2, r3
 80078c8:	f000 f92a 	bl	8007b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2150      	movs	r1, #80	; 0x50
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 f983 	bl	8007bde <TIM_ITRx_SetConfig>
      break;
 80078d8:	e02c      	b.n	8007934 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078e6:	461a      	mov	r2, r3
 80078e8:	f000 f949 	bl	8007b7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2160      	movs	r1, #96	; 0x60
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 f973 	bl	8007bde <TIM_ITRx_SetConfig>
      break;
 80078f8:	e01c      	b.n	8007934 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007906:	461a      	mov	r2, r3
 8007908:	f000 f90a 	bl	8007b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2140      	movs	r1, #64	; 0x40
 8007912:	4618      	mov	r0, r3
 8007914:	f000 f963 	bl	8007bde <TIM_ITRx_SetConfig>
      break;
 8007918:	e00c      	b.n	8007934 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4619      	mov	r1, r3
 8007924:	4610      	mov	r0, r2
 8007926:	f000 f95a 	bl	8007bde <TIM_ITRx_SetConfig>
      break;
 800792a:	e003      	b.n	8007934 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	73fb      	strb	r3, [r7, #15]
      break;
 8007930:	e000      	b.n	8007934 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	00100070 	.word	0x00100070
 8007954:	00100060 	.word	0x00100060
 8007958:	00100050 	.word	0x00100050
 800795c:	00100040 	.word	0x00100040
 8007960:	00100030 	.word	0x00100030
 8007964:	00100020 	.word	0x00100020

08007968 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a4c      	ldr	r2, [pc, #304]	; (8007afc <TIM_Base_SetConfig+0x144>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d017      	beq.n	8007a00 <TIM_Base_SetConfig+0x48>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d6:	d013      	beq.n	8007a00 <TIM_Base_SetConfig+0x48>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a49      	ldr	r2, [pc, #292]	; (8007b00 <TIM_Base_SetConfig+0x148>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d00f      	beq.n	8007a00 <TIM_Base_SetConfig+0x48>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a48      	ldr	r2, [pc, #288]	; (8007b04 <TIM_Base_SetConfig+0x14c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00b      	beq.n	8007a00 <TIM_Base_SetConfig+0x48>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a47      	ldr	r2, [pc, #284]	; (8007b08 <TIM_Base_SetConfig+0x150>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d007      	beq.n	8007a00 <TIM_Base_SetConfig+0x48>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a46      	ldr	r2, [pc, #280]	; (8007b0c <TIM_Base_SetConfig+0x154>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d003      	beq.n	8007a00 <TIM_Base_SetConfig+0x48>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a45      	ldr	r2, [pc, #276]	; (8007b10 <TIM_Base_SetConfig+0x158>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d108      	bne.n	8007a12 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a39      	ldr	r2, [pc, #228]	; (8007afc <TIM_Base_SetConfig+0x144>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d023      	beq.n	8007a62 <TIM_Base_SetConfig+0xaa>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a20:	d01f      	beq.n	8007a62 <TIM_Base_SetConfig+0xaa>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a36      	ldr	r2, [pc, #216]	; (8007b00 <TIM_Base_SetConfig+0x148>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d01b      	beq.n	8007a62 <TIM_Base_SetConfig+0xaa>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a35      	ldr	r2, [pc, #212]	; (8007b04 <TIM_Base_SetConfig+0x14c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d017      	beq.n	8007a62 <TIM_Base_SetConfig+0xaa>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a34      	ldr	r2, [pc, #208]	; (8007b08 <TIM_Base_SetConfig+0x150>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d013      	beq.n	8007a62 <TIM_Base_SetConfig+0xaa>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a33      	ldr	r2, [pc, #204]	; (8007b0c <TIM_Base_SetConfig+0x154>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d00f      	beq.n	8007a62 <TIM_Base_SetConfig+0xaa>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a33      	ldr	r2, [pc, #204]	; (8007b14 <TIM_Base_SetConfig+0x15c>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00b      	beq.n	8007a62 <TIM_Base_SetConfig+0xaa>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a32      	ldr	r2, [pc, #200]	; (8007b18 <TIM_Base_SetConfig+0x160>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d007      	beq.n	8007a62 <TIM_Base_SetConfig+0xaa>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a31      	ldr	r2, [pc, #196]	; (8007b1c <TIM_Base_SetConfig+0x164>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d003      	beq.n	8007a62 <TIM_Base_SetConfig+0xaa>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a2c      	ldr	r2, [pc, #176]	; (8007b10 <TIM_Base_SetConfig+0x158>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d108      	bne.n	8007a74 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a18      	ldr	r2, [pc, #96]	; (8007afc <TIM_Base_SetConfig+0x144>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d013      	beq.n	8007ac8 <TIM_Base_SetConfig+0x110>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a1a      	ldr	r2, [pc, #104]	; (8007b0c <TIM_Base_SetConfig+0x154>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00f      	beq.n	8007ac8 <TIM_Base_SetConfig+0x110>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a1a      	ldr	r2, [pc, #104]	; (8007b14 <TIM_Base_SetConfig+0x15c>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00b      	beq.n	8007ac8 <TIM_Base_SetConfig+0x110>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a19      	ldr	r2, [pc, #100]	; (8007b18 <TIM_Base_SetConfig+0x160>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d007      	beq.n	8007ac8 <TIM_Base_SetConfig+0x110>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a18      	ldr	r2, [pc, #96]	; (8007b1c <TIM_Base_SetConfig+0x164>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d003      	beq.n	8007ac8 <TIM_Base_SetConfig+0x110>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a13      	ldr	r2, [pc, #76]	; (8007b10 <TIM_Base_SetConfig+0x158>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d103      	bne.n	8007ad0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d105      	bne.n	8007aee <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f023 0201 	bic.w	r2, r3, #1
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	611a      	str	r2, [r3, #16]
  }
}
 8007aee:	bf00      	nop
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	40012c00 	.word	0x40012c00
 8007b00:	40000400 	.word	0x40000400
 8007b04:	40000800 	.word	0x40000800
 8007b08:	40000c00 	.word	0x40000c00
 8007b0c:	40013400 	.word	0x40013400
 8007b10:	40015000 	.word	0x40015000
 8007b14:	40014000 	.word	0x40014000
 8007b18:	40014400 	.word	0x40014400
 8007b1c:	40014800 	.word	0x40014800

08007b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	f023 0201 	bic.w	r2, r3, #1
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f023 030a 	bic.w	r3, r3, #10
 8007b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	621a      	str	r2, [r3, #32]
}
 8007b72:	bf00      	nop
 8007b74:	371c      	adds	r7, #28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b087      	sub	sp, #28
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	f023 0210 	bic.w	r2, r3, #16
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	031b      	lsls	r3, r3, #12
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	011b      	lsls	r3, r3, #4
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	621a      	str	r2, [r3, #32]
}
 8007bd2:	bf00      	nop
 8007bd4:	371c      	adds	r7, #28
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b085      	sub	sp, #20
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	f043 0307 	orr.w	r3, r3, #7
 8007c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	609a      	str	r2, [r3, #8]
}
 8007c0c:	bf00      	nop
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
 8007c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	021a      	lsls	r2, r3, #8
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	609a      	str	r2, [r3, #8]
}
 8007c4c:	bf00      	nop
 8007c4e:	371c      	adds	r7, #28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e074      	b.n	8007d5a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a34      	ldr	r2, [pc, #208]	; (8007d68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d009      	beq.n	8007cae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a33      	ldr	r2, [pc, #204]	; (8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d004      	beq.n	8007cae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a31      	ldr	r2, [pc, #196]	; (8007d70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d108      	bne.n	8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007cb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a21      	ldr	r2, [pc, #132]	; (8007d68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d022      	beq.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf0:	d01d      	beq.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a1f      	ldr	r2, [pc, #124]	; (8007d74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d018      	beq.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a1d      	ldr	r2, [pc, #116]	; (8007d78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d013      	beq.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a1c      	ldr	r2, [pc, #112]	; (8007d7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d00e      	beq.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a15      	ldr	r2, [pc, #84]	; (8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d009      	beq.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a18      	ldr	r2, [pc, #96]	; (8007d80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d004      	beq.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a11      	ldr	r2, [pc, #68]	; (8007d70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d10c      	bne.n	8007d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40012c00 	.word	0x40012c00
 8007d6c:	40013400 	.word	0x40013400
 8007d70:	40015000 	.word	0x40015000
 8007d74:	40000400 	.word	0x40000400
 8007d78:	40000800 	.word	0x40000800
 8007d7c:	40000c00 	.word	0x40000c00
 8007d80:	40014000 	.word	0x40014000

08007d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e042      	b.n	8007ea8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d106      	bne.n	8007e3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7fa fab7 	bl	80023a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2224      	movs	r2, #36	; 0x24
 8007e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f022 0201 	bic.w	r2, r2, #1
 8007e50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fb24 	bl	80084a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f825 	bl	8007eb0 <UART_SetConfig>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d101      	bne.n	8007e70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e01b      	b.n	8007ea8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0201 	orr.w	r2, r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fba3 	bl	80085ec <UART_CheckIdleState>
 8007ea6:	4603      	mov	r3, r0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eb4:	b08c      	sub	sp, #48	; 0x30
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	689a      	ldr	r2, [r3, #8]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	4baa      	ldr	r3, [pc, #680]	; (8008188 <UART_SetConfig+0x2d8>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	6812      	ldr	r2, [r2, #0]
 8007ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ee8:	430b      	orrs	r3, r1
 8007eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a9f      	ldr	r2, [pc, #636]	; (800818c <UART_SetConfig+0x2dc>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d004      	beq.n	8007f1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007f26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	6812      	ldr	r2, [r2, #0]
 8007f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f30:	430b      	orrs	r3, r1
 8007f32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3a:	f023 010f 	bic.w	r1, r3, #15
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a90      	ldr	r2, [pc, #576]	; (8008190 <UART_SetConfig+0x2e0>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d125      	bne.n	8007fa0 <UART_SetConfig+0xf0>
 8007f54:	4b8f      	ldr	r3, [pc, #572]	; (8008194 <UART_SetConfig+0x2e4>)
 8007f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d81a      	bhi.n	8007f98 <UART_SetConfig+0xe8>
 8007f62:	a201      	add	r2, pc, #4	; (adr r2, 8007f68 <UART_SetConfig+0xb8>)
 8007f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f68:	08007f79 	.word	0x08007f79
 8007f6c:	08007f89 	.word	0x08007f89
 8007f70:	08007f81 	.word	0x08007f81
 8007f74:	08007f91 	.word	0x08007f91
 8007f78:	2301      	movs	r3, #1
 8007f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f7e:	e116      	b.n	80081ae <UART_SetConfig+0x2fe>
 8007f80:	2302      	movs	r3, #2
 8007f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f86:	e112      	b.n	80081ae <UART_SetConfig+0x2fe>
 8007f88:	2304      	movs	r3, #4
 8007f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f8e:	e10e      	b.n	80081ae <UART_SetConfig+0x2fe>
 8007f90:	2308      	movs	r3, #8
 8007f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f96:	e10a      	b.n	80081ae <UART_SetConfig+0x2fe>
 8007f98:	2310      	movs	r3, #16
 8007f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f9e:	e106      	b.n	80081ae <UART_SetConfig+0x2fe>
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a7c      	ldr	r2, [pc, #496]	; (8008198 <UART_SetConfig+0x2e8>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d138      	bne.n	800801c <UART_SetConfig+0x16c>
 8007faa:	4b7a      	ldr	r3, [pc, #488]	; (8008194 <UART_SetConfig+0x2e4>)
 8007fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb0:	f003 030c 	and.w	r3, r3, #12
 8007fb4:	2b0c      	cmp	r3, #12
 8007fb6:	d82d      	bhi.n	8008014 <UART_SetConfig+0x164>
 8007fb8:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <UART_SetConfig+0x110>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	08007ff5 	.word	0x08007ff5
 8007fc4:	08008015 	.word	0x08008015
 8007fc8:	08008015 	.word	0x08008015
 8007fcc:	08008015 	.word	0x08008015
 8007fd0:	08008005 	.word	0x08008005
 8007fd4:	08008015 	.word	0x08008015
 8007fd8:	08008015 	.word	0x08008015
 8007fdc:	08008015 	.word	0x08008015
 8007fe0:	08007ffd 	.word	0x08007ffd
 8007fe4:	08008015 	.word	0x08008015
 8007fe8:	08008015 	.word	0x08008015
 8007fec:	08008015 	.word	0x08008015
 8007ff0:	0800800d 	.word	0x0800800d
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ffa:	e0d8      	b.n	80081ae <UART_SetConfig+0x2fe>
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008002:	e0d4      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008004:	2304      	movs	r3, #4
 8008006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800800a:	e0d0      	b.n	80081ae <UART_SetConfig+0x2fe>
 800800c:	2308      	movs	r3, #8
 800800e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008012:	e0cc      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008014:	2310      	movs	r3, #16
 8008016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800801a:	e0c8      	b.n	80081ae <UART_SetConfig+0x2fe>
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a5e      	ldr	r2, [pc, #376]	; (800819c <UART_SetConfig+0x2ec>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d125      	bne.n	8008072 <UART_SetConfig+0x1c2>
 8008026:	4b5b      	ldr	r3, [pc, #364]	; (8008194 <UART_SetConfig+0x2e4>)
 8008028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800802c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008030:	2b30      	cmp	r3, #48	; 0x30
 8008032:	d016      	beq.n	8008062 <UART_SetConfig+0x1b2>
 8008034:	2b30      	cmp	r3, #48	; 0x30
 8008036:	d818      	bhi.n	800806a <UART_SetConfig+0x1ba>
 8008038:	2b20      	cmp	r3, #32
 800803a:	d00a      	beq.n	8008052 <UART_SetConfig+0x1a2>
 800803c:	2b20      	cmp	r3, #32
 800803e:	d814      	bhi.n	800806a <UART_SetConfig+0x1ba>
 8008040:	2b00      	cmp	r3, #0
 8008042:	d002      	beq.n	800804a <UART_SetConfig+0x19a>
 8008044:	2b10      	cmp	r3, #16
 8008046:	d008      	beq.n	800805a <UART_SetConfig+0x1aa>
 8008048:	e00f      	b.n	800806a <UART_SetConfig+0x1ba>
 800804a:	2300      	movs	r3, #0
 800804c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008050:	e0ad      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008052:	2302      	movs	r3, #2
 8008054:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008058:	e0a9      	b.n	80081ae <UART_SetConfig+0x2fe>
 800805a:	2304      	movs	r3, #4
 800805c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008060:	e0a5      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008062:	2308      	movs	r3, #8
 8008064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008068:	e0a1      	b.n	80081ae <UART_SetConfig+0x2fe>
 800806a:	2310      	movs	r3, #16
 800806c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008070:	e09d      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a4a      	ldr	r2, [pc, #296]	; (80081a0 <UART_SetConfig+0x2f0>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d125      	bne.n	80080c8 <UART_SetConfig+0x218>
 800807c:	4b45      	ldr	r3, [pc, #276]	; (8008194 <UART_SetConfig+0x2e4>)
 800807e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008082:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008086:	2bc0      	cmp	r3, #192	; 0xc0
 8008088:	d016      	beq.n	80080b8 <UART_SetConfig+0x208>
 800808a:	2bc0      	cmp	r3, #192	; 0xc0
 800808c:	d818      	bhi.n	80080c0 <UART_SetConfig+0x210>
 800808e:	2b80      	cmp	r3, #128	; 0x80
 8008090:	d00a      	beq.n	80080a8 <UART_SetConfig+0x1f8>
 8008092:	2b80      	cmp	r3, #128	; 0x80
 8008094:	d814      	bhi.n	80080c0 <UART_SetConfig+0x210>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <UART_SetConfig+0x1f0>
 800809a:	2b40      	cmp	r3, #64	; 0x40
 800809c:	d008      	beq.n	80080b0 <UART_SetConfig+0x200>
 800809e:	e00f      	b.n	80080c0 <UART_SetConfig+0x210>
 80080a0:	2300      	movs	r3, #0
 80080a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080a6:	e082      	b.n	80081ae <UART_SetConfig+0x2fe>
 80080a8:	2302      	movs	r3, #2
 80080aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ae:	e07e      	b.n	80081ae <UART_SetConfig+0x2fe>
 80080b0:	2304      	movs	r3, #4
 80080b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080b6:	e07a      	b.n	80081ae <UART_SetConfig+0x2fe>
 80080b8:	2308      	movs	r3, #8
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080be:	e076      	b.n	80081ae <UART_SetConfig+0x2fe>
 80080c0:	2310      	movs	r3, #16
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c6:	e072      	b.n	80081ae <UART_SetConfig+0x2fe>
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a35      	ldr	r2, [pc, #212]	; (80081a4 <UART_SetConfig+0x2f4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d12a      	bne.n	8008128 <UART_SetConfig+0x278>
 80080d2:	4b30      	ldr	r3, [pc, #192]	; (8008194 <UART_SetConfig+0x2e4>)
 80080d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080e0:	d01a      	beq.n	8008118 <UART_SetConfig+0x268>
 80080e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080e6:	d81b      	bhi.n	8008120 <UART_SetConfig+0x270>
 80080e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ec:	d00c      	beq.n	8008108 <UART_SetConfig+0x258>
 80080ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080f2:	d815      	bhi.n	8008120 <UART_SetConfig+0x270>
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <UART_SetConfig+0x250>
 80080f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080fc:	d008      	beq.n	8008110 <UART_SetConfig+0x260>
 80080fe:	e00f      	b.n	8008120 <UART_SetConfig+0x270>
 8008100:	2300      	movs	r3, #0
 8008102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008106:	e052      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008108:	2302      	movs	r3, #2
 800810a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800810e:	e04e      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008110:	2304      	movs	r3, #4
 8008112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008116:	e04a      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008118:	2308      	movs	r3, #8
 800811a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800811e:	e046      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008120:	2310      	movs	r3, #16
 8008122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008126:	e042      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a17      	ldr	r2, [pc, #92]	; (800818c <UART_SetConfig+0x2dc>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d13a      	bne.n	80081a8 <UART_SetConfig+0x2f8>
 8008132:	4b18      	ldr	r3, [pc, #96]	; (8008194 <UART_SetConfig+0x2e4>)
 8008134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008138:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800813c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008140:	d01a      	beq.n	8008178 <UART_SetConfig+0x2c8>
 8008142:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008146:	d81b      	bhi.n	8008180 <UART_SetConfig+0x2d0>
 8008148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800814c:	d00c      	beq.n	8008168 <UART_SetConfig+0x2b8>
 800814e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008152:	d815      	bhi.n	8008180 <UART_SetConfig+0x2d0>
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <UART_SetConfig+0x2b0>
 8008158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800815c:	d008      	beq.n	8008170 <UART_SetConfig+0x2c0>
 800815e:	e00f      	b.n	8008180 <UART_SetConfig+0x2d0>
 8008160:	2300      	movs	r3, #0
 8008162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008166:	e022      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008168:	2302      	movs	r3, #2
 800816a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800816e:	e01e      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008170:	2304      	movs	r3, #4
 8008172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008176:	e01a      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008178:	2308      	movs	r3, #8
 800817a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800817e:	e016      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008180:	2310      	movs	r3, #16
 8008182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008186:	e012      	b.n	80081ae <UART_SetConfig+0x2fe>
 8008188:	cfff69f3 	.word	0xcfff69f3
 800818c:	40008000 	.word	0x40008000
 8008190:	40013800 	.word	0x40013800
 8008194:	40021000 	.word	0x40021000
 8008198:	40004400 	.word	0x40004400
 800819c:	40004800 	.word	0x40004800
 80081a0:	40004c00 	.word	0x40004c00
 80081a4:	40005000 	.word	0x40005000
 80081a8:	2310      	movs	r3, #16
 80081aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4aae      	ldr	r2, [pc, #696]	; (800846c <UART_SetConfig+0x5bc>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	f040 8097 	bne.w	80082e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081be:	2b08      	cmp	r3, #8
 80081c0:	d823      	bhi.n	800820a <UART_SetConfig+0x35a>
 80081c2:	a201      	add	r2, pc, #4	; (adr r2, 80081c8 <UART_SetConfig+0x318>)
 80081c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c8:	080081ed 	.word	0x080081ed
 80081cc:	0800820b 	.word	0x0800820b
 80081d0:	080081f5 	.word	0x080081f5
 80081d4:	0800820b 	.word	0x0800820b
 80081d8:	080081fb 	.word	0x080081fb
 80081dc:	0800820b 	.word	0x0800820b
 80081e0:	0800820b 	.word	0x0800820b
 80081e4:	0800820b 	.word	0x0800820b
 80081e8:	08008203 	.word	0x08008203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081ec:	f7fe fcc2 	bl	8006b74 <HAL_RCC_GetPCLK1Freq>
 80081f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081f2:	e010      	b.n	8008216 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081f4:	4b9e      	ldr	r3, [pc, #632]	; (8008470 <UART_SetConfig+0x5c0>)
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081f8:	e00d      	b.n	8008216 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081fa:	f7fe fc4d 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 80081fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008200:	e009      	b.n	8008216 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008208:	e005      	b.n	8008216 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008214:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 8130 	beq.w	800847e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	4a94      	ldr	r2, [pc, #592]	; (8008474 <UART_SetConfig+0x5c4>)
 8008224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008228:	461a      	mov	r2, r3
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008230:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	4613      	mov	r3, r2
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	4413      	add	r3, r2
 800823c:	69ba      	ldr	r2, [r7, #24]
 800823e:	429a      	cmp	r2, r3
 8008240:	d305      	bcc.n	800824e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	429a      	cmp	r2, r3
 800824c:	d903      	bls.n	8008256 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008254:	e113      	b.n	800847e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	2200      	movs	r2, #0
 800825a:	60bb      	str	r3, [r7, #8]
 800825c:	60fa      	str	r2, [r7, #12]
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	4a84      	ldr	r2, [pc, #528]	; (8008474 <UART_SetConfig+0x5c4>)
 8008264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008268:	b29b      	uxth	r3, r3
 800826a:	2200      	movs	r2, #0
 800826c:	603b      	str	r3, [r7, #0]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008274:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008278:	f7f7 ffce 	bl	8000218 <__aeabi_uldivmod>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4610      	mov	r0, r2
 8008282:	4619      	mov	r1, r3
 8008284:	f04f 0200 	mov.w	r2, #0
 8008288:	f04f 0300 	mov.w	r3, #0
 800828c:	020b      	lsls	r3, r1, #8
 800828e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008292:	0202      	lsls	r2, r0, #8
 8008294:	6979      	ldr	r1, [r7, #20]
 8008296:	6849      	ldr	r1, [r1, #4]
 8008298:	0849      	lsrs	r1, r1, #1
 800829a:	2000      	movs	r0, #0
 800829c:	460c      	mov	r4, r1
 800829e:	4605      	mov	r5, r0
 80082a0:	eb12 0804 	adds.w	r8, r2, r4
 80082a4:	eb43 0905 	adc.w	r9, r3, r5
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	469a      	mov	sl, r3
 80082b0:	4693      	mov	fp, r2
 80082b2:	4652      	mov	r2, sl
 80082b4:	465b      	mov	r3, fp
 80082b6:	4640      	mov	r0, r8
 80082b8:	4649      	mov	r1, r9
 80082ba:	f7f7 ffad 	bl	8000218 <__aeabi_uldivmod>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4613      	mov	r3, r2
 80082c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082cc:	d308      	bcc.n	80082e0 <UART_SetConfig+0x430>
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082d4:	d204      	bcs.n	80082e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6a3a      	ldr	r2, [r7, #32]
 80082dc:	60da      	str	r2, [r3, #12]
 80082de:	e0ce      	b.n	800847e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80082e6:	e0ca      	b.n	800847e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082f0:	d166      	bne.n	80083c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80082f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082f6:	2b08      	cmp	r3, #8
 80082f8:	d827      	bhi.n	800834a <UART_SetConfig+0x49a>
 80082fa:	a201      	add	r2, pc, #4	; (adr r2, 8008300 <UART_SetConfig+0x450>)
 80082fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008300:	08008325 	.word	0x08008325
 8008304:	0800832d 	.word	0x0800832d
 8008308:	08008335 	.word	0x08008335
 800830c:	0800834b 	.word	0x0800834b
 8008310:	0800833b 	.word	0x0800833b
 8008314:	0800834b 	.word	0x0800834b
 8008318:	0800834b 	.word	0x0800834b
 800831c:	0800834b 	.word	0x0800834b
 8008320:	08008343 	.word	0x08008343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008324:	f7fe fc26 	bl	8006b74 <HAL_RCC_GetPCLK1Freq>
 8008328:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800832a:	e014      	b.n	8008356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800832c:	f7fe fc38 	bl	8006ba0 <HAL_RCC_GetPCLK2Freq>
 8008330:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008332:	e010      	b.n	8008356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008334:	4b4e      	ldr	r3, [pc, #312]	; (8008470 <UART_SetConfig+0x5c0>)
 8008336:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008338:	e00d      	b.n	8008356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800833a:	f7fe fbad 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 800833e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008340:	e009      	b.n	8008356 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008348:	e005      	b.n	8008356 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008354:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 8090 	beq.w	800847e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	4a44      	ldr	r2, [pc, #272]	; (8008474 <UART_SetConfig+0x5c4>)
 8008364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008368:	461a      	mov	r2, r3
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008370:	005a      	lsls	r2, r3, #1
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	085b      	lsrs	r3, r3, #1
 8008378:	441a      	add	r2, r3
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008382:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	2b0f      	cmp	r3, #15
 8008388:	d916      	bls.n	80083b8 <UART_SetConfig+0x508>
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008390:	d212      	bcs.n	80083b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	b29b      	uxth	r3, r3
 8008396:	f023 030f 	bic.w	r3, r3, #15
 800839a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	085b      	lsrs	r3, r3, #1
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	f003 0307 	and.w	r3, r3, #7
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	8bfb      	ldrh	r3, [r7, #30]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	8bfa      	ldrh	r2, [r7, #30]
 80083b4:	60da      	str	r2, [r3, #12]
 80083b6:	e062      	b.n	800847e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083be:	e05e      	b.n	800847e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083c4:	2b08      	cmp	r3, #8
 80083c6:	d828      	bhi.n	800841a <UART_SetConfig+0x56a>
 80083c8:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <UART_SetConfig+0x520>)
 80083ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ce:	bf00      	nop
 80083d0:	080083f5 	.word	0x080083f5
 80083d4:	080083fd 	.word	0x080083fd
 80083d8:	08008405 	.word	0x08008405
 80083dc:	0800841b 	.word	0x0800841b
 80083e0:	0800840b 	.word	0x0800840b
 80083e4:	0800841b 	.word	0x0800841b
 80083e8:	0800841b 	.word	0x0800841b
 80083ec:	0800841b 	.word	0x0800841b
 80083f0:	08008413 	.word	0x08008413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083f4:	f7fe fbbe 	bl	8006b74 <HAL_RCC_GetPCLK1Freq>
 80083f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083fa:	e014      	b.n	8008426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083fc:	f7fe fbd0 	bl	8006ba0 <HAL_RCC_GetPCLK2Freq>
 8008400:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008402:	e010      	b.n	8008426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008404:	4b1a      	ldr	r3, [pc, #104]	; (8008470 <UART_SetConfig+0x5c0>)
 8008406:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008408:	e00d      	b.n	8008426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800840a:	f7fe fb45 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 800840e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008410:	e009      	b.n	8008426 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008418:	e005      	b.n	8008426 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008424:	bf00      	nop
    }

    if (pclk != 0U)
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	2b00      	cmp	r3, #0
 800842a:	d028      	beq.n	800847e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	4a10      	ldr	r2, [pc, #64]	; (8008474 <UART_SetConfig+0x5c4>)
 8008432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008436:	461a      	mov	r2, r3
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	fbb3 f2f2 	udiv	r2, r3, r2
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	085b      	lsrs	r3, r3, #1
 8008444:	441a      	add	r2, r3
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	fbb2 f3f3 	udiv	r3, r2, r3
 800844e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	2b0f      	cmp	r3, #15
 8008454:	d910      	bls.n	8008478 <UART_SetConfig+0x5c8>
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800845c:	d20c      	bcs.n	8008478 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	b29a      	uxth	r2, r3
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60da      	str	r2, [r3, #12]
 8008468:	e009      	b.n	800847e <UART_SetConfig+0x5ce>
 800846a:	bf00      	nop
 800846c:	40008000 	.word	0x40008000
 8008470:	00f42400 	.word	0x00f42400
 8008474:	08008e64 	.word	0x08008e64
      }
      else
      {
        ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2201      	movs	r2, #1
 8008482:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2201      	movs	r2, #1
 800848a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	2200      	movs	r2, #0
 8008492:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	2200      	movs	r2, #0
 8008498:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800849a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3730      	adds	r7, #48	; 0x30
 80084a2:	46bd      	mov	sp, r7
 80084a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080084a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b4:	f003 0308 	and.w	r3, r3, #8
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	430a      	orrs	r2, r1
 80084d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00a      	beq.n	80084f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	430a      	orrs	r2, r1
 80084f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00a      	beq.n	8008516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851a:	f003 0304 	and.w	r3, r3, #4
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00a      	beq.n	8008538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853c:	f003 0310 	and.w	r3, r3, #16
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00a      	beq.n	800855a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855e:	f003 0320 	and.w	r3, r3, #32
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00a      	beq.n	800857c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	430a      	orrs	r2, r1
 800857a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008584:	2b00      	cmp	r3, #0
 8008586:	d01a      	beq.n	80085be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	430a      	orrs	r2, r1
 800859c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085a6:	d10a      	bne.n	80085be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	430a      	orrs	r2, r1
 80085bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00a      	beq.n	80085e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	605a      	str	r2, [r3, #4]
  }
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b098      	sub	sp, #96	; 0x60
 80085f0:	af02      	add	r7, sp, #8
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085fc:	f7fa fa78 	bl	8002af0 <HAL_GetTick>
 8008600:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0308 	and.w	r3, r3, #8
 800860c:	2b08      	cmp	r3, #8
 800860e:	d12f      	bne.n	8008670 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008618:	2200      	movs	r2, #0
 800861a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f88e 	bl	8008740 <UART_WaitOnFlagUntilTimeout>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d022      	beq.n	8008670 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008632:	e853 3f00 	ldrex	r3, [r3]
 8008636:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800863e:	653b      	str	r3, [r7, #80]	; 0x50
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	461a      	mov	r2, r3
 8008646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008648:	647b      	str	r3, [r7, #68]	; 0x44
 800864a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800864e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008650:	e841 2300 	strex	r3, r2, [r1]
 8008654:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1e6      	bne.n	800862a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2220      	movs	r2, #32
 8008660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e063      	b.n	8008738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0304 	and.w	r3, r3, #4
 800867a:	2b04      	cmp	r3, #4
 800867c:	d149      	bne.n	8008712 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800867e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008686:	2200      	movs	r2, #0
 8008688:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f857 	bl	8008740 <UART_WaitOnFlagUntilTimeout>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d03c      	beq.n	8008712 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	e853 3f00 	ldrex	r3, [r3]
 80086a4:	623b      	str	r3, [r7, #32]
   return(result);
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b6:	633b      	str	r3, [r7, #48]	; 0x30
 80086b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1e6      	bne.n	8008698 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3308      	adds	r3, #8
 80086d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f023 0301 	bic.w	r3, r3, #1
 80086e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3308      	adds	r3, #8
 80086e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086ea:	61fa      	str	r2, [r7, #28]
 80086ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	69b9      	ldr	r1, [r7, #24]
 80086f0:	69fa      	ldr	r2, [r7, #28]
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	617b      	str	r3, [r7, #20]
   return(result);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e5      	bne.n	80086ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2220      	movs	r2, #32
 8008702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e012      	b.n	8008738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2220      	movs	r2, #32
 8008716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2220      	movs	r2, #32
 800871e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3758      	adds	r7, #88	; 0x58
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	603b      	str	r3, [r7, #0]
 800874c:	4613      	mov	r3, r2
 800874e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008750:	e04f      	b.n	80087f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008758:	d04b      	beq.n	80087f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800875a:	f7fa f9c9 	bl	8002af0 <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	429a      	cmp	r2, r3
 8008768:	d302      	bcc.n	8008770 <UART_WaitOnFlagUntilTimeout+0x30>
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e04e      	b.n	8008812 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0304 	and.w	r3, r3, #4
 800877e:	2b00      	cmp	r3, #0
 8008780:	d037      	beq.n	80087f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2b80      	cmp	r3, #128	; 0x80
 8008786:	d034      	beq.n	80087f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2b40      	cmp	r3, #64	; 0x40
 800878c:	d031      	beq.n	80087f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	f003 0308 	and.w	r3, r3, #8
 8008798:	2b08      	cmp	r3, #8
 800879a:	d110      	bne.n	80087be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2208      	movs	r2, #8
 80087a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 f838 	bl	800881a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2208      	movs	r2, #8
 80087ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e029      	b.n	8008812 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	69db      	ldr	r3, [r3, #28]
 80087c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087cc:	d111      	bne.n	80087f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 f81e 	bl	800881a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e00f      	b.n	8008812 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	69da      	ldr	r2, [r3, #28]
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	4013      	ands	r3, r2
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	429a      	cmp	r2, r3
 8008800:	bf0c      	ite	eq
 8008802:	2301      	moveq	r3, #1
 8008804:	2300      	movne	r3, #0
 8008806:	b2db      	uxtb	r3, r3
 8008808:	461a      	mov	r2, r3
 800880a:	79fb      	ldrb	r3, [r7, #7]
 800880c:	429a      	cmp	r2, r3
 800880e:	d0a0      	beq.n	8008752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800881a:	b480      	push	{r7}
 800881c:	b095      	sub	sp, #84	; 0x54
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882a:	e853 3f00 	ldrex	r3, [r3]
 800882e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008832:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	461a      	mov	r2, r3
 800883e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008840:	643b      	str	r3, [r7, #64]	; 0x40
 8008842:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008844:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008848:	e841 2300 	strex	r3, r2, [r1]
 800884c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e6      	bne.n	8008822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3308      	adds	r3, #8
 800885a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	e853 3f00 	ldrex	r3, [r3]
 8008862:	61fb      	str	r3, [r7, #28]
   return(result);
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800886a:	f023 0301 	bic.w	r3, r3, #1
 800886e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3308      	adds	r3, #8
 8008876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008878:	62fa      	str	r2, [r7, #44]	; 0x2c
 800887a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800887e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008880:	e841 2300 	strex	r3, r2, [r1]
 8008884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e3      	bne.n	8008854 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008890:	2b01      	cmp	r3, #1
 8008892:	d118      	bne.n	80088c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	e853 3f00 	ldrex	r3, [r3]
 80088a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f023 0310 	bic.w	r3, r3, #16
 80088a8:	647b      	str	r3, [r7, #68]	; 0x44
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088b2:	61bb      	str	r3, [r7, #24]
 80088b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b6:	6979      	ldr	r1, [r7, #20]
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	e841 2300 	strex	r3, r2, [r1]
 80088be:	613b      	str	r3, [r7, #16]
   return(result);
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e6      	bne.n	8008894 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2220      	movs	r2, #32
 80088ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80088da:	bf00      	nop
 80088dc:	3754      	adds	r7, #84	; 0x54
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b086      	sub	sp, #24
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
 80088f2:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e058      	b.n	80089b0 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008904:	2b00      	cmp	r3, #0
 8008906:	d106      	bne.n	8008916 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f7f9 fd49 	bl	80023a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2224      	movs	r2, #36	; 0x24
 800891a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0201 	bic.w	r2, r2, #1
 800892c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f7ff fdb6 	bl	80084a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f7ff fab7 	bl	8007eb0 <UART_SetConfig>
 8008942:	4603      	mov	r3, r0
 8008944:	2b01      	cmp	r3, #1
 8008946:	d101      	bne.n	800894c <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e031      	b.n	80089b0 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689a      	ldr	r2, [r3, #8]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800895a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	430a      	orrs	r2, r1
 800896e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	055b      	lsls	r3, r3, #21
 8008974:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	041b      	lsls	r3, r3, #16
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	4313      	orrs	r3, r2
 800897e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800898a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	6812      	ldr	r2, [r2, #0]
 8008992:	6979      	ldr	r1, [r7, #20]
 8008994:	430b      	orrs	r3, r1
 8008996:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0201 	orr.w	r2, r2, #1
 80089a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f7ff fe1f 	bl	80085ec <UART_CheckIdleState>
 80089ae:	4603      	mov	r3, r0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d101      	bne.n	80089ce <HAL_UARTEx_DisableFifoMode+0x16>
 80089ca:	2302      	movs	r3, #2
 80089cc:	e027      	b.n	8008a1e <HAL_UARTEx_DisableFifoMode+0x66>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2224      	movs	r2, #36	; 0x24
 80089da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0201 	bic.w	r2, r2, #1
 80089f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d101      	bne.n	8008a42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a3e:	2302      	movs	r3, #2
 8008a40:	e02d      	b.n	8008a9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2224      	movs	r2, #36	; 0x24
 8008a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f022 0201 	bic.w	r2, r2, #1
 8008a68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f850 	bl	8008b24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2220      	movs	r2, #32
 8008a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d101      	bne.n	8008abe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008aba:	2302      	movs	r3, #2
 8008abc:	e02d      	b.n	8008b1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2224      	movs	r2, #36	; 0x24
 8008aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f022 0201 	bic.w	r2, r2, #1
 8008ae4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	430a      	orrs	r2, r1
 8008af8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f812 	bl	8008b24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
	...

08008b24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d108      	bne.n	8008b46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b44:	e031      	b.n	8008baa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b46:	2308      	movs	r3, #8
 8008b48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b4a:	2308      	movs	r3, #8
 8008b4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	0e5b      	lsrs	r3, r3, #25
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	0f5b      	lsrs	r3, r3, #29
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	f003 0307 	and.w	r3, r3, #7
 8008b6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	7b3a      	ldrb	r2, [r7, #12]
 8008b72:	4911      	ldr	r1, [pc, #68]	; (8008bb8 <UARTEx_SetNbDataToProcess+0x94>)
 8008b74:	5c8a      	ldrb	r2, [r1, r2]
 8008b76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b7a:	7b3a      	ldrb	r2, [r7, #12]
 8008b7c:	490f      	ldr	r1, [pc, #60]	; (8008bbc <UARTEx_SetNbDataToProcess+0x98>)
 8008b7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b80:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	7b7a      	ldrb	r2, [r7, #13]
 8008b90:	4909      	ldr	r1, [pc, #36]	; (8008bb8 <UARTEx_SetNbDataToProcess+0x94>)
 8008b92:	5c8a      	ldrb	r2, [r1, r2]
 8008b94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b98:	7b7a      	ldrb	r2, [r7, #13]
 8008b9a:	4908      	ldr	r1, [pc, #32]	; (8008bbc <UARTEx_SetNbDataToProcess+0x98>)
 8008b9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008baa:	bf00      	nop
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	08008e7c 	.word	0x08008e7c
 8008bbc:	08008e84 	.word	0x08008e84

08008bc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008bc8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008bcc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	43db      	mvns	r3, r3
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	4013      	ands	r3, r2
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b085      	sub	sp, #20
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	1d3b      	adds	r3, r7, #4
 8008c00:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <atoi>:
 8008c32:	220a      	movs	r2, #10
 8008c34:	2100      	movs	r1, #0
 8008c36:	f000 b883 	b.w	8008d40 <strtol>
	...

08008c3c <_strtol_l.constprop.0>:
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c42:	d001      	beq.n	8008c48 <_strtol_l.constprop.0+0xc>
 8008c44:	2b24      	cmp	r3, #36	; 0x24
 8008c46:	d906      	bls.n	8008c56 <_strtol_l.constprop.0+0x1a>
 8008c48:	f000 f88c 	bl	8008d64 <__errno>
 8008c4c:	2316      	movs	r3, #22
 8008c4e:	6003      	str	r3, [r0, #0]
 8008c50:	2000      	movs	r0, #0
 8008c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008d3c <_strtol_l.constprop.0+0x100>
 8008c5a:	460d      	mov	r5, r1
 8008c5c:	462e      	mov	r6, r5
 8008c5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c62:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008c66:	f017 0708 	ands.w	r7, r7, #8
 8008c6a:	d1f7      	bne.n	8008c5c <_strtol_l.constprop.0+0x20>
 8008c6c:	2c2d      	cmp	r4, #45	; 0x2d
 8008c6e:	d132      	bne.n	8008cd6 <_strtol_l.constprop.0+0x9a>
 8008c70:	782c      	ldrb	r4, [r5, #0]
 8008c72:	2701      	movs	r7, #1
 8008c74:	1cb5      	adds	r5, r6, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d05b      	beq.n	8008d32 <_strtol_l.constprop.0+0xf6>
 8008c7a:	2b10      	cmp	r3, #16
 8008c7c:	d109      	bne.n	8008c92 <_strtol_l.constprop.0+0x56>
 8008c7e:	2c30      	cmp	r4, #48	; 0x30
 8008c80:	d107      	bne.n	8008c92 <_strtol_l.constprop.0+0x56>
 8008c82:	782c      	ldrb	r4, [r5, #0]
 8008c84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c88:	2c58      	cmp	r4, #88	; 0x58
 8008c8a:	d14d      	bne.n	8008d28 <_strtol_l.constprop.0+0xec>
 8008c8c:	786c      	ldrb	r4, [r5, #1]
 8008c8e:	2310      	movs	r3, #16
 8008c90:	3502      	adds	r5, #2
 8008c92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008c96:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c9a:	f04f 0e00 	mov.w	lr, #0
 8008c9e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008ca2:	4676      	mov	r6, lr
 8008ca4:	fb03 8a19 	mls	sl, r3, r9, r8
 8008ca8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008cac:	f1bc 0f09 	cmp.w	ip, #9
 8008cb0:	d816      	bhi.n	8008ce0 <_strtol_l.constprop.0+0xa4>
 8008cb2:	4664      	mov	r4, ip
 8008cb4:	42a3      	cmp	r3, r4
 8008cb6:	dd24      	ble.n	8008d02 <_strtol_l.constprop.0+0xc6>
 8008cb8:	f1be 3fff 	cmp.w	lr, #4294967295
 8008cbc:	d008      	beq.n	8008cd0 <_strtol_l.constprop.0+0x94>
 8008cbe:	45b1      	cmp	r9, r6
 8008cc0:	d31c      	bcc.n	8008cfc <_strtol_l.constprop.0+0xc0>
 8008cc2:	d101      	bne.n	8008cc8 <_strtol_l.constprop.0+0x8c>
 8008cc4:	45a2      	cmp	sl, r4
 8008cc6:	db19      	blt.n	8008cfc <_strtol_l.constprop.0+0xc0>
 8008cc8:	fb06 4603 	mla	r6, r6, r3, r4
 8008ccc:	f04f 0e01 	mov.w	lr, #1
 8008cd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cd4:	e7e8      	b.n	8008ca8 <_strtol_l.constprop.0+0x6c>
 8008cd6:	2c2b      	cmp	r4, #43	; 0x2b
 8008cd8:	bf04      	itt	eq
 8008cda:	782c      	ldrbeq	r4, [r5, #0]
 8008cdc:	1cb5      	addeq	r5, r6, #2
 8008cde:	e7ca      	b.n	8008c76 <_strtol_l.constprop.0+0x3a>
 8008ce0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008ce4:	f1bc 0f19 	cmp.w	ip, #25
 8008ce8:	d801      	bhi.n	8008cee <_strtol_l.constprop.0+0xb2>
 8008cea:	3c37      	subs	r4, #55	; 0x37
 8008cec:	e7e2      	b.n	8008cb4 <_strtol_l.constprop.0+0x78>
 8008cee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008cf2:	f1bc 0f19 	cmp.w	ip, #25
 8008cf6:	d804      	bhi.n	8008d02 <_strtol_l.constprop.0+0xc6>
 8008cf8:	3c57      	subs	r4, #87	; 0x57
 8008cfa:	e7db      	b.n	8008cb4 <_strtol_l.constprop.0+0x78>
 8008cfc:	f04f 3eff 	mov.w	lr, #4294967295
 8008d00:	e7e6      	b.n	8008cd0 <_strtol_l.constprop.0+0x94>
 8008d02:	f1be 3fff 	cmp.w	lr, #4294967295
 8008d06:	d105      	bne.n	8008d14 <_strtol_l.constprop.0+0xd8>
 8008d08:	2322      	movs	r3, #34	; 0x22
 8008d0a:	6003      	str	r3, [r0, #0]
 8008d0c:	4646      	mov	r6, r8
 8008d0e:	b942      	cbnz	r2, 8008d22 <_strtol_l.constprop.0+0xe6>
 8008d10:	4630      	mov	r0, r6
 8008d12:	e79e      	b.n	8008c52 <_strtol_l.constprop.0+0x16>
 8008d14:	b107      	cbz	r7, 8008d18 <_strtol_l.constprop.0+0xdc>
 8008d16:	4276      	negs	r6, r6
 8008d18:	2a00      	cmp	r2, #0
 8008d1a:	d0f9      	beq.n	8008d10 <_strtol_l.constprop.0+0xd4>
 8008d1c:	f1be 0f00 	cmp.w	lr, #0
 8008d20:	d000      	beq.n	8008d24 <_strtol_l.constprop.0+0xe8>
 8008d22:	1e69      	subs	r1, r5, #1
 8008d24:	6011      	str	r1, [r2, #0]
 8008d26:	e7f3      	b.n	8008d10 <_strtol_l.constprop.0+0xd4>
 8008d28:	2430      	movs	r4, #48	; 0x30
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1b1      	bne.n	8008c92 <_strtol_l.constprop.0+0x56>
 8008d2e:	2308      	movs	r3, #8
 8008d30:	e7af      	b.n	8008c92 <_strtol_l.constprop.0+0x56>
 8008d32:	2c30      	cmp	r4, #48	; 0x30
 8008d34:	d0a5      	beq.n	8008c82 <_strtol_l.constprop.0+0x46>
 8008d36:	230a      	movs	r3, #10
 8008d38:	e7ab      	b.n	8008c92 <_strtol_l.constprop.0+0x56>
 8008d3a:	bf00      	nop
 8008d3c:	08008e8d 	.word	0x08008e8d

08008d40 <strtol>:
 8008d40:	4613      	mov	r3, r2
 8008d42:	460a      	mov	r2, r1
 8008d44:	4601      	mov	r1, r0
 8008d46:	4802      	ldr	r0, [pc, #8]	; (8008d50 <strtol+0x10>)
 8008d48:	6800      	ldr	r0, [r0, #0]
 8008d4a:	f7ff bf77 	b.w	8008c3c <_strtol_l.constprop.0>
 8008d4e:	bf00      	nop
 8008d50:	2000005c 	.word	0x2000005c

08008d54 <memset>:
 8008d54:	4402      	add	r2, r0
 8008d56:	4603      	mov	r3, r0
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d100      	bne.n	8008d5e <memset+0xa>
 8008d5c:	4770      	bx	lr
 8008d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d62:	e7f9      	b.n	8008d58 <memset+0x4>

08008d64 <__errno>:
 8008d64:	4b01      	ldr	r3, [pc, #4]	; (8008d6c <__errno+0x8>)
 8008d66:	6818      	ldr	r0, [r3, #0]
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	2000005c 	.word	0x2000005c

08008d70 <__libc_init_array>:
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	4d0d      	ldr	r5, [pc, #52]	; (8008da8 <__libc_init_array+0x38>)
 8008d74:	4c0d      	ldr	r4, [pc, #52]	; (8008dac <__libc_init_array+0x3c>)
 8008d76:	1b64      	subs	r4, r4, r5
 8008d78:	10a4      	asrs	r4, r4, #2
 8008d7a:	2600      	movs	r6, #0
 8008d7c:	42a6      	cmp	r6, r4
 8008d7e:	d109      	bne.n	8008d94 <__libc_init_array+0x24>
 8008d80:	4d0b      	ldr	r5, [pc, #44]	; (8008db0 <__libc_init_array+0x40>)
 8008d82:	4c0c      	ldr	r4, [pc, #48]	; (8008db4 <__libc_init_array+0x44>)
 8008d84:	f000 f818 	bl	8008db8 <_init>
 8008d88:	1b64      	subs	r4, r4, r5
 8008d8a:	10a4      	asrs	r4, r4, #2
 8008d8c:	2600      	movs	r6, #0
 8008d8e:	42a6      	cmp	r6, r4
 8008d90:	d105      	bne.n	8008d9e <__libc_init_array+0x2e>
 8008d92:	bd70      	pop	{r4, r5, r6, pc}
 8008d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d98:	4798      	blx	r3
 8008d9a:	3601      	adds	r6, #1
 8008d9c:	e7ee      	b.n	8008d7c <__libc_init_array+0xc>
 8008d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008da2:	4798      	blx	r3
 8008da4:	3601      	adds	r6, #1
 8008da6:	e7f2      	b.n	8008d8e <__libc_init_array+0x1e>
 8008da8:	08008f98 	.word	0x08008f98
 8008dac:	08008f98 	.word	0x08008f98
 8008db0:	08008f98 	.word	0x08008f98
 8008db4:	08008f9c 	.word	0x08008f9c

08008db8 <_init>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	bf00      	nop
 8008dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dbe:	bc08      	pop	{r3}
 8008dc0:	469e      	mov	lr, r3
 8008dc2:	4770      	bx	lr

08008dc4 <_fini>:
 8008dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc6:	bf00      	nop
 8008dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dca:	bc08      	pop	{r3}
 8008dcc:	469e      	mov	lr, r3
 8008dce:	4770      	bx	lr
