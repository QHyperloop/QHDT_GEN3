
QUCONTROL_FOLLOWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a78  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005c50  08005c50  00015c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c90  08005c90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c90  08005c90  00015c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c98  08005c98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c98  08005c98  00015c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  2000000c  08005cac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  08005cac  000207d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cc92  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034cd  00000000  00000000  0003cd11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f0  00000000  00000000  000401e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001292  00000000  00000000  000419d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ae7  00000000  00000000  00042c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da72  00000000  00000000  00046749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010dc19  00000000  00000000  000641bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006774  00000000  00000000  00171dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00178548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005c38 	.word	0x08005c38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005c38 	.word	0x08005c38

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 f9af 	bl	800187a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f81f 	bl	800055e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fc3a 	bl	8000d98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fc0e 	bl	8000d44 <MX_DMA_Init>
  MX_ADC1_Init();
 8000528:	f000 f868 	bl	80005fc <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800052c:	f000 f968 	bl	8000800 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000530:	f000 f9ac 	bl	800088c <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 8000534:	f000 f9f0 	bl	8000918 <MX_FDCAN3_Init>
  MX_I2C1_Init();
 8000538:	f000 fa34 	bl	80009a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800053c:	f000 fb5e 	bl	8000bfc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000540:	f000 fbd8 	bl	8000cf4 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 8000544:	f000 fa6e 	bl	8000a24 <MX_I2C2_Init>
  MX_IWDG_Init();
 8000548:	f000 faec 	bl	8000b24 <MX_IWDG_Init>
  MX_ADC5_Init();
 800054c:	f000 f8f2 	bl	8000734 <MX_ADC5_Init>
  MX_I2C3_Init();
 8000550:	f000 faa8 	bl	8000aa4 <MX_I2C3_Init>
  MX_SPI3_Init();
 8000554:	f000 fb90 	bl	8000c78 <MX_SPI3_Init>
  MX_LPUART1_UART_Init();
 8000558:	f000 fb02 	bl	8000b60 <MX_LPUART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x48>

0800055e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b094      	sub	sp, #80	; 0x50
 8000562:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000564:	f107 0318 	add.w	r3, r7, #24
 8000568:	2238      	movs	r2, #56	; 0x38
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f005 fb36 	bl	8005bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000584:	f003 fb8e 	bl	8003ca4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000588:	230a      	movs	r3, #10
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2340      	movs	r3, #64	; 0x40
 8000594:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000596:	2301      	movs	r3, #1
 8000598:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80005a6:	230c      	movs	r3, #12
 80005a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0318 	add.w	r3, r7, #24
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fc26 	bl	8003e0c <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005c6:	f000 fcb7 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ce:	2301      	movs	r3, #1
 80005d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 ff24 	bl	8004430 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ee:	f000 fca3 	bl	8000f38 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	; 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08c      	sub	sp, #48	; 0x30
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2220      	movs	r2, #32
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f005 fae2 	bl	8005bde <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800061a:	4b44      	ldr	r3, [pc, #272]	; (800072c <MX_ADC1_Init+0x130>)
 800061c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000620:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000622:	4b42      	ldr	r3, [pc, #264]	; (800072c <MX_ADC1_Init+0x130>)
 8000624:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062a:	4b40      	ldr	r3, [pc, #256]	; (800072c <MX_ADC1_Init+0x130>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b3e      	ldr	r3, [pc, #248]	; (800072c <MX_ADC1_Init+0x130>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000636:	4b3d      	ldr	r3, [pc, #244]	; (800072c <MX_ADC1_Init+0x130>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800063c:	4b3b      	ldr	r3, [pc, #236]	; (800072c <MX_ADC1_Init+0x130>)
 800063e:	2201      	movs	r2, #1
 8000640:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b3a      	ldr	r3, [pc, #232]	; (800072c <MX_ADC1_Init+0x130>)
 8000644:	2204      	movs	r2, #4
 8000646:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000648:	4b38      	ldr	r3, [pc, #224]	; (800072c <MX_ADC1_Init+0x130>)
 800064a:	2200      	movs	r2, #0
 800064c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800064e:	4b37      	ldr	r3, [pc, #220]	; (800072c <MX_ADC1_Init+0x130>)
 8000650:	2201      	movs	r2, #1
 8000652:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000654:	4b35      	ldr	r3, [pc, #212]	; (800072c <MX_ADC1_Init+0x130>)
 8000656:	2204      	movs	r2, #4
 8000658:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065a:	4b34      	ldr	r3, [pc, #208]	; (800072c <MX_ADC1_Init+0x130>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000662:	4b32      	ldr	r3, [pc, #200]	; (800072c <MX_ADC1_Init+0x130>)
 8000664:	2200      	movs	r2, #0
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000668:	4b30      	ldr	r3, [pc, #192]	; (800072c <MX_ADC1_Init+0x130>)
 800066a:	2200      	movs	r2, #0
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <MX_ADC1_Init+0x130>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <MX_ADC1_Init+0x130>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <MX_ADC1_Init+0x130>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	4829      	ldr	r0, [pc, #164]	; (800072c <MX_ADC1_Init+0x130>)
 8000686:	f001 fb3f 	bl	8001d08 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000690:	f000 fc52 	bl	8000f38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069c:	4619      	mov	r1, r3
 800069e:	4823      	ldr	r0, [pc, #140]	; (800072c <MX_ADC1_Init+0x130>)
 80006a0:	f002 f954 	bl	800294c <HAL_ADCEx_MultiModeConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006aa:	f000 fc45 	bl	8000f38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <MX_ADC1_Init+0x134>)
 80006b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b2:	2306      	movs	r3, #6
 80006b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ba:	237f      	movs	r3, #127	; 0x7f
 80006bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006be:	2304      	movs	r3, #4
 80006c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	4818      	ldr	r0, [pc, #96]	; (800072c <MX_ADC1_Init+0x130>)
 80006cc:	f001 fcd8 	bl	8002080 <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006d6:	f000 fc2f 	bl	8000f38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006da:	230c      	movs	r3, #12
 80006dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4812      	ldr	r0, [pc, #72]	; (800072c <MX_ADC1_Init+0x130>)
 80006e4:	f001 fccc 	bl	8002080 <HAL_ADC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80006ee:	f000 fc23 	bl	8000f38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006f2:	2312      	movs	r3, #18
 80006f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_ADC1_Init+0x130>)
 80006fc:	f001 fcc0 	bl	8002080 <HAL_ADC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 8000706:	f000 fc17 	bl	8000f38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800070a:	2318      	movs	r3, #24
 800070c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_ADC1_Init+0x130>)
 8000714:	f001 fcb4 	bl	8002080 <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800071e:	f000 fc0b 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3730      	adds	r7, #48	; 0x30
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000028 	.word	0x20000028
 8000730:	04300002 	.word	0x04300002

08000734 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2220      	movs	r2, #32
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f005 fa4c 	bl	8005bde <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000746:	4b2b      	ldr	r3, [pc, #172]	; (80007f4 <MX_ADC5_Init+0xc0>)
 8000748:	4a2b      	ldr	r2, [pc, #172]	; (80007f8 <MX_ADC5_Init+0xc4>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800074c:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <MX_ADC5_Init+0xc0>)
 800074e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000752:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000754:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <MX_ADC5_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075a:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <MX_ADC5_Init+0xc0>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <MX_ADC5_Init+0xc0>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_ADC5_Init+0xc0>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076c:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <MX_ADC5_Init+0xc0>)
 800076e:	2204      	movs	r2, #4
 8000770:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_ADC5_Init+0xc0>)
 8000774:	2200      	movs	r2, #0
 8000776:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <MX_ADC5_Init+0xc0>)
 800077a:	2200      	movs	r2, #0
 800077c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_ADC5_Init+0xc0>)
 8000780:	2201      	movs	r2, #1
 8000782:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_ADC5_Init+0xc0>)
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_ADC5_Init+0xc0>)
 800078e:	2200      	movs	r2, #0
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_ADC5_Init+0xc0>)
 8000794:	2200      	movs	r2, #0
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_ADC5_Init+0xc0>)
 800079a:	2200      	movs	r2, #0
 800079c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_ADC5_Init+0xc0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_ADC5_Init+0xc0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80007ae:	4811      	ldr	r0, [pc, #68]	; (80007f4 <MX_ADC5_Init+0xc0>)
 80007b0:	f001 faaa 	bl	8001d08 <HAL_ADC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80007ba:	f000 fbbd 	bl	8000f38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_ADC5_Init+0xc8>)
 80007c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c2:	2306      	movs	r3, #6
 80007c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ca:	237f      	movs	r3, #127	; 0x7f
 80007cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ce:	2304      	movs	r3, #4
 80007d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC5_Init+0xc0>)
 80007dc:	f001 fc50 	bl	8002080 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 80007e6:	f000 fba7 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000094 	.word	0x20000094
 80007f8:	50000600 	.word	0x50000600
 80007fc:	08600004 	.word	0x08600004

08000800 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_FDCAN1_Init+0x84>)
 8000806:	4a20      	ldr	r2, [pc, #128]	; (8000888 <MX_FDCAN1_Init+0x88>)
 8000808:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_FDCAN1_Init+0x84>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_FDCAN1_Init+0x84>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_FDCAN1_Init+0x84>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_FDCAN1_Init+0x84>)
 800081e:	2200      	movs	r2, #0
 8000820:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_FDCAN1_Init+0x84>)
 8000824:	2200      	movs	r2, #0
 8000826:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_FDCAN1_Init+0x84>)
 800082a:	2200      	movs	r2, #0
 800082c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_FDCAN1_Init+0x84>)
 8000830:	2210      	movs	r2, #16
 8000832:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_FDCAN1_Init+0x84>)
 8000836:	2201      	movs	r2, #1
 8000838:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_FDCAN1_Init+0x84>)
 800083c:	2202      	movs	r2, #2
 800083e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_FDCAN1_Init+0x84>)
 8000842:	2202      	movs	r2, #2
 8000844:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_FDCAN1_Init+0x84>)
 8000848:	2201      	movs	r2, #1
 800084a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_FDCAN1_Init+0x84>)
 800084e:	2201      	movs	r2, #1
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_FDCAN1_Init+0x84>)
 8000854:	2201      	movs	r2, #1
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_FDCAN1_Init+0x84>)
 800085a:	2201      	movs	r2, #1
 800085c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_FDCAN1_Init+0x84>)
 8000860:	2200      	movs	r2, #0
 8000862:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_FDCAN1_Init+0x84>)
 8000866:	2200      	movs	r2, #0
 8000868:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_FDCAN1_Init+0x84>)
 800086c:	2200      	movs	r2, #0
 800086e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_FDCAN1_Init+0x84>)
 8000872:	f002 fc3d 	bl	80030f0 <HAL_FDCAN_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800087c:	f000 fb5c 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000160 	.word	0x20000160
 8000888:	40006400 	.word	0x40006400

0800088c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_FDCAN2_Init+0x84>)
 8000892:	4a20      	ldr	r2, [pc, #128]	; (8000914 <MX_FDCAN2_Init+0x88>)
 8000894:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_FDCAN2_Init+0x84>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_FDCAN2_Init+0x84>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008bc:	2210      	movs	r2, #16
 80008be:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008ce:	2202      	movs	r2, #2
 80008d0:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008da:	2201      	movs	r2, #1
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_FDCAN2_Init+0x84>)
 80008fe:	f002 fbf7 	bl	80030f0 <HAL_FDCAN_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000908:	f000 fb16 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200001c4 	.word	0x200001c4
 8000914:	40006800 	.word	0x40006800

08000918 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_FDCAN3_Init+0x84>)
 800091e:	4a20      	ldr	r2, [pc, #128]	; (80009a0 <MX_FDCAN3_Init+0x88>)
 8000920:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_FDCAN3_Init+0x84>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_FDCAN3_Init+0x84>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800092e:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_FDCAN3_Init+0x84>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_FDCAN3_Init+0x84>)
 8000936:	2200      	movs	r2, #0
 8000938:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_FDCAN3_Init+0x84>)
 800093c:	2200      	movs	r2, #0
 800093e:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_FDCAN3_Init+0x84>)
 8000942:	2200      	movs	r2, #0
 8000944:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_FDCAN3_Init+0x84>)
 8000948:	2210      	movs	r2, #16
 800094a:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_FDCAN3_Init+0x84>)
 800094e:	2201      	movs	r2, #1
 8000950:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_FDCAN3_Init+0x84>)
 8000954:	2202      	movs	r2, #2
 8000956:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_FDCAN3_Init+0x84>)
 800095a:	2202      	movs	r2, #2
 800095c:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_FDCAN3_Init+0x84>)
 8000960:	2201      	movs	r2, #1
 8000962:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_FDCAN3_Init+0x84>)
 8000966:	2201      	movs	r2, #1
 8000968:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_FDCAN3_Init+0x84>)
 800096c:	2201      	movs	r2, #1
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_FDCAN3_Init+0x84>)
 8000972:	2201      	movs	r2, #1
 8000974:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_FDCAN3_Init+0x84>)
 8000978:	2200      	movs	r2, #0
 800097a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_FDCAN3_Init+0x84>)
 800097e:	2200      	movs	r2, #0
 8000980:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_FDCAN3_Init+0x84>)
 8000984:	2200      	movs	r2, #0
 8000986:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_FDCAN3_Init+0x84>)
 800098a:	f002 fbb1 	bl	80030f0 <HAL_FDCAN_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 8000994:	f000 fad0 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000228 	.word	0x20000228
 80009a0:	40006c00 	.word	0x40006c00

080009a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009aa:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <MX_I2C1_Init+0x78>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009b0:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <MX_I2C1_Init+0x7c>)
 80009b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009bc:	2201      	movs	r2, #1
 80009be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009de:	480e      	ldr	r0, [pc, #56]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009e0:	f002 fee6 	bl	80037b0 <HAL_I2C_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ea:	f000 faa5 	bl	8000f38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009f2:	f002 ff78 	bl	80038e6 <HAL_I2CEx_ConfigAnalogFilter>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009fc:	f000 fa9c 	bl	8000f38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_I2C1_Init+0x74>)
 8000a04:	f002 ffba 	bl	800397c <HAL_I2CEx_ConfigDigitalFilter>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a0e:	f000 fa93 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000028c 	.word	0x2000028c
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	00303d5b 	.word	0x00303d5b

08000a24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <MX_I2C2_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <MX_I2C2_Init+0x7c>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a5e:	480e      	ldr	r0, [pc, #56]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a60:	f002 fea6 	bl	80037b0 <HAL_I2C_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a6a:	f000 fa65 	bl	8000f38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a72:	f002 ff38 	bl	80038e6 <HAL_I2CEx_ConfigAnalogFilter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a7c:	f000 fa5c 	bl	8000f38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_I2C2_Init+0x74>)
 8000a84:	f002 ff7a 	bl	800397c <HAL_I2CEx_ConfigDigitalFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 fa53 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200002e0 	.word	0x200002e0
 8000a9c:	40005800 	.word	0x40005800
 8000aa0:	00303d5b 	.word	0x00303d5b

08000aa4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <MX_I2C3_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <MX_I2C3_Init+0x7c>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ade:	480e      	ldr	r0, [pc, #56]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000ae0:	f002 fe66 	bl	80037b0 <HAL_I2C_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000aea:	f000 fa25 	bl	8000f38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000af2:	f002 fef8 	bl	80038e6 <HAL_I2CEx_ConfigAnalogFilter>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 fa1c 	bl	8000f38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000b04:	f002 ff3a 	bl	800397c <HAL_I2CEx_ConfigDigitalFilter>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b0e:	f000 fa13 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000334 	.word	0x20000334
 8000b1c:	40007800 	.word	0x40007800
 8000b20:	00303d5b 	.word	0x00303d5b

08000b24 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_IWDG_Init+0x34>)
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <MX_IWDG_Init+0x38>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <MX_IWDG_Init+0x34>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_IWDG_Init+0x34>)
 8000b36:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b3a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_IWDG_Init+0x34>)
 8000b3e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b42:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_IWDG_Init+0x34>)
 8000b46:	f002 ff65 	bl	8003a14 <HAL_IWDG_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000b50:	f000 f9f2 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000388 	.word	0x20000388
 8000b5c:	40003000 	.word	0x40003000

08000b60 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b66:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <MX_LPUART1_UART_Init+0x94>)
 8000b68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b6c:	4a22      	ldr	r2, [pc, #136]	; (8000bf8 <MX_LPUART1_UART_Init+0x98>)
 8000b6e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b84:	220c      	movs	r2, #12
 8000b86:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4812      	ldr	r0, [pc, #72]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000ba8:	f004 fe73 	bl	8005892 <HAL_RS485Ex_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000bb2:	f000 f9c1 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000bba:	f004 ff0c 	bl	80059d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000bc4:	f000 f9b8 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000bcc:	f004 ff41 	bl	8005a52 <HAL_UARTEx_SetRxFifoThreshold>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000bd6:	f000 f9af 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000bdc:	f004 fec2 	bl	8005964 <HAL_UARTEx_DisableFifoMode>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000be6:	f000 f9a7 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000398 	.word	0x20000398
 8000bf4:	40008000 	.word	0x40008000
 8000bf8:	00033324 	.word	0x00033324

08000bfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c02:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <MX_SPI1_Init+0x78>)
 8000c04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c16:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c56:	2208      	movs	r2, #8
 8000c58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c5c:	f004 f852 	bl	8004d04 <HAL_SPI_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c66:	f000 f967 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000042c 	.word	0x2000042c
 8000c74:	40013000 	.word	0x40013000

08000c78 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_SPI3_Init+0x74>)
 8000c7e:	4a1c      	ldr	r2, [pc, #112]	; (8000cf0 <MX_SPI3_Init+0x78>)
 8000c80:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_SPI3_Init+0x74>)
 8000c84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c88:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_SPI3_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_SPI3_Init+0x74>)
 8000c92:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c96:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_SPI3_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_SPI3_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_SPI3_Init+0x74>)
 8000ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000caa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_SPI3_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_SPI3_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_SPI3_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_SPI3_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_SPI3_Init+0x74>)
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_SPI3_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_SPI3_Init+0x74>)
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_SPI3_Init+0x74>)
 8000cd8:	f004 f814 	bl	8004d04 <HAL_SPI_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ce2:	f000 f929 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000490 	.word	0x20000490
 8000cf0:	40003c00 	.word	0x40003c00

08000cf4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_USB_PCD_Init+0x48>)
 8000cfa:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <MX_USB_PCD_Init+0x4c>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_USB_PCD_Init+0x48>)
 8000d00:	2208      	movs	r2, #8
 8000d02:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MX_USB_PCD_Init+0x48>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_USB_PCD_Init+0x48>)
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_USB_PCD_Init+0x48>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USB_PCD_Init+0x48>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_USB_PCD_Init+0x48>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_USB_PCD_Init+0x48>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_USB_PCD_Init+0x48>)
 8000d2a:	f002 fec2 	bl	8003ab2 <HAL_PCD_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000d34:	f000 f900 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200004f4 	.word	0x200004f4
 8000d40:	40005c00 	.word	0x40005c00

08000d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_DMA_Init+0x50>)
 8000d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4e:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <MX_DMA_Init+0x50>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6493      	str	r3, [r2, #72]	; 0x48
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_DMA_Init+0x50>)
 8000d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_DMA_Init+0x50>)
 8000d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <MX_DMA_Init+0x50>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_DMA_Init+0x50>)
 8000d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	200b      	movs	r0, #11
 8000d80:	f001 ffc7 	bl	8002d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d84:	200b      	movs	r0, #11
 8000d86:	f001 ffde 	bl	8002d46 <HAL_NVIC_EnableIRQ>

}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	; 0x30
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dae:	4b5d      	ldr	r3, [pc, #372]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a5c      	ldr	r2, [pc, #368]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000db4:	f043 0310 	orr.w	r3, r3, #16
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0310 	and.w	r3, r3, #16
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b57      	ldr	r3, [pc, #348]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a56      	ldr	r2, [pc, #344]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b54      	ldr	r3, [pc, #336]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dde:	4b51      	ldr	r3, [pc, #324]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a50      	ldr	r2, [pc, #320]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000de4:	f043 0320 	orr.w	r3, r3, #32
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b4e      	ldr	r3, [pc, #312]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0320 	and.w	r3, r3, #32
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b4b      	ldr	r3, [pc, #300]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a4a      	ldr	r2, [pc, #296]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b45      	ldr	r3, [pc, #276]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a44      	ldr	r2, [pc, #272]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b42      	ldr	r3, [pc, #264]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	4b3f      	ldr	r3, [pc, #252]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a3e      	ldr	r2, [pc, #248]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <MX_GPIO_Init+0x18c>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f003 0308 	and.w	r3, r3, #8
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f64e 71c0 	movw	r1, #61376	; 0xefc0
 8000e44:	4838      	ldr	r0, [pc, #224]	; (8000f28 <MX_GPIO_Init+0x190>)
 8000e46:	f002 fc9b 	bl	8003780 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e50:	4836      	ldr	r0, [pc, #216]	; (8000f2c <MX_GPIO_Init+0x194>)
 8000e52:	f002 fc95 	bl	8003780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5c:	4834      	ldr	r0, [pc, #208]	; (8000f30 <MX_GPIO_Init+0x198>)
 8000e5e:	f002 fc8f 	bl	8003780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e62:	2200      	movs	r2, #0
 8000e64:	f64f 711c 	movw	r1, #65308	; 0xff1c
 8000e68:	4832      	ldr	r0, [pc, #200]	; (8000f34 <MX_GPIO_Init+0x19c>)
 8000e6a:	f002 fc89 	bl	8003780 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e6e:	233c      	movs	r3, #60	; 0x3c
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4829      	ldr	r0, [pc, #164]	; (8000f28 <MX_GPIO_Init+0x190>)
 8000e82:	f002 fafb 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9
                           PE10 PE11 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000e86:	f64e 73c0 	movw	r3, #61376	; 0xefc0
 8000e8a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4822      	ldr	r0, [pc, #136]	; (8000f28 <MX_GPIO_Init+0x190>)
 8000ea0:	f002 faec 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	481b      	ldr	r0, [pc, #108]	; (8000f2c <MX_GPIO_Init+0x194>)
 8000ebe:	f002 fadd 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4815      	ldr	r0, [pc, #84]	; (8000f30 <MX_GPIO_Init+0x198>)
 8000edc:	f002 face 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ee0:	f64f 731c 	movw	r3, #65308	; 0xff1c
 8000ee4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480e      	ldr	r0, [pc, #56]	; (8000f34 <MX_GPIO_Init+0x19c>)
 8000efa:	f002 fabf 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f16:	f002 fab1 	bl	800347c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3730      	adds	r7, #48	; 0x30
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48001000 	.word	0x48001000
 8000f2c:	48000800 	.word	0x48000800
 8000f30:	48000400 	.word	0x48000400
 8000f34:	48000c00 	.word	0x48000c00

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <Error_Handler+0x8>
	...

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_MspInit+0x44>)
 8000f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_MspInit+0x44>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6613      	str	r3, [r2, #96]	; 0x60
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_MspInit+0x44>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_MspInit+0x44>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <HAL_MspInit+0x44>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_MspInit+0x44>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f7a:	f002 ff37 	bl	8003dec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0a0      	sub	sp, #128	; 0x80
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	2254      	movs	r2, #84	; 0x54
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 fe16 	bl	8005bde <memset>
  if(hadc->Instance==ADC1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fba:	d160      	bne.n	800107e <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fc2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 fc4b 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000fd8:	f7ff ffae 	bl	8000f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fdc:	4b47      	ldr	r3, [pc, #284]	; (80010fc <HAL_ADC_MspInit+0x170>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe0:	4a46      	ldr	r2, [pc, #280]	; (80010fc <HAL_ADC_MspInit+0x170>)
 8000fe2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe8:	4b44      	ldr	r3, [pc, #272]	; (80010fc <HAL_ADC_MspInit+0x170>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	4b41      	ldr	r3, [pc, #260]	; (80010fc <HAL_ADC_MspInit+0x170>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff8:	4a40      	ldr	r2, [pc, #256]	; (80010fc <HAL_ADC_MspInit+0x170>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001000:	4b3e      	ldr	r3, [pc, #248]	; (80010fc <HAL_ADC_MspInit+0x170>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800100c:	230f      	movs	r3, #15
 800100e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001010:	2303      	movs	r3, #3
 8001012:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800101c:	4619      	mov	r1, r3
 800101e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001022:	f002 fa2b 	bl	800347c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001026:	4b36      	ldr	r3, [pc, #216]	; (8001100 <HAL_ADC_MspInit+0x174>)
 8001028:	4a36      	ldr	r2, [pc, #216]	; (8001104 <HAL_ADC_MspInit+0x178>)
 800102a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800102c:	4b34      	ldr	r3, [pc, #208]	; (8001100 <HAL_ADC_MspInit+0x174>)
 800102e:	2205      	movs	r2, #5
 8001030:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001032:	4b33      	ldr	r3, [pc, #204]	; (8001100 <HAL_ADC_MspInit+0x174>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001038:	4b31      	ldr	r3, [pc, #196]	; (8001100 <HAL_ADC_MspInit+0x174>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800103e:	4b30      	ldr	r3, [pc, #192]	; (8001100 <HAL_ADC_MspInit+0x174>)
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001044:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <HAL_ADC_MspInit+0x174>)
 8001046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800104c:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <HAL_ADC_MspInit+0x174>)
 800104e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001052:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001054:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <HAL_ADC_MspInit+0x174>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800105a:	4b29      	ldr	r3, [pc, #164]	; (8001100 <HAL_ADC_MspInit+0x174>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001060:	4827      	ldr	r0, [pc, #156]	; (8001100 <HAL_ADC_MspInit+0x174>)
 8001062:	f001 fe8b 	bl	8002d7c <HAL_DMA_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800106c:	f7ff ff64 	bl	8000f38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a23      	ldr	r2, [pc, #140]	; (8001100 <HAL_ADC_MspInit+0x174>)
 8001074:	655a      	str	r2, [r3, #84]	; 0x54
 8001076:	4a22      	ldr	r2, [pc, #136]	; (8001100 <HAL_ADC_MspInit+0x174>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 800107c:	e03a      	b.n	80010f4 <HAL_ADC_MspInit+0x168>
  else if(hadc->Instance==ADC5)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a21      	ldr	r2, [pc, #132]	; (8001108 <HAL_ADC_MspInit+0x17c>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d135      	bne.n	80010f4 <HAL_ADC_MspInit+0x168>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800108e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001092:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	4618      	mov	r0, r3
 800109a:	f003 fbe5 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 80010a4:	f7ff ff48 	bl	8000f38 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_ADC_MspInit+0x170>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ac:	4a13      	ldr	r2, [pc, #76]	; (80010fc <HAL_ADC_MspInit+0x170>)
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_ADC_MspInit+0x170>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_ADC_MspInit+0x170>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_ADC_MspInit+0x170>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_ADC_MspInit+0x170>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010de:	2303      	movs	r3, #3
 80010e0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f002 f9c4 	bl	800347c <HAL_GPIO_Init>
}
 80010f4:	bf00      	nop
 80010f6:	3780      	adds	r7, #128	; 0x80
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000
 8001100:	20000100 	.word	0x20000100
 8001104:	40020008 	.word	0x40020008
 8001108:	50000600 	.word	0x50000600

0800110c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0a2      	sub	sp, #136	; 0x88
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	f107 0320 	add.w	r3, r7, #32
 8001128:	2254      	movs	r2, #84	; 0x54
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f004 fd56 	bl	8005bde <memset>
  if(hfdcan->Instance==FDCAN1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a6e      	ldr	r2, [pc, #440]	; (80012f0 <HAL_FDCAN_MspInit+0x1e4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d143      	bne.n	80011c4 <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800113c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001140:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001146:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	4618      	mov	r0, r3
 800114e:	f003 fb8b 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001158:	f7ff feee 	bl	8000f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800115c:	4b65      	ldr	r3, [pc, #404]	; (80012f4 <HAL_FDCAN_MspInit+0x1e8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	4a64      	ldr	r2, [pc, #400]	; (80012f4 <HAL_FDCAN_MspInit+0x1e8>)
 8001164:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001166:	4b63      	ldr	r3, [pc, #396]	; (80012f4 <HAL_FDCAN_MspInit+0x1e8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d10b      	bne.n	8001186 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800116e:	4b62      	ldr	r3, [pc, #392]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	4a61      	ldr	r2, [pc, #388]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 8001174:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001178:	6593      	str	r3, [r2, #88]	; 0x58
 800117a:	4b5f      	ldr	r3, [pc, #380]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	4b5c      	ldr	r3, [pc, #368]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a5b      	ldr	r2, [pc, #364]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b59      	ldr	r3, [pc, #356]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	61bb      	str	r3, [r7, #24]
 800119c:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800119e:	2303      	movs	r3, #3
 80011a0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80011b0:	2309      	movs	r3, #9
 80011b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011ba:	4619      	mov	r1, r3
 80011bc:	484f      	ldr	r0, [pc, #316]	; (80012fc <HAL_FDCAN_MspInit+0x1f0>)
 80011be:	f002 f95d 	bl	800347c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80011c2:	e091      	b.n	80012e8 <HAL_FDCAN_MspInit+0x1dc>
  else if(hfdcan->Instance==FDCAN2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a4d      	ldr	r2, [pc, #308]	; (8001300 <HAL_FDCAN_MspInit+0x1f4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d144      	bne.n	8001258 <HAL_FDCAN_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80011d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011d8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011da:	f107 0320 	add.w	r3, r7, #32
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 fb42 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_FDCAN_MspInit+0xe2>
      Error_Handler();
 80011ea:	f7ff fea5 	bl	8000f38 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <HAL_FDCAN_MspInit+0x1e8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	4a3f      	ldr	r2, [pc, #252]	; (80012f4 <HAL_FDCAN_MspInit+0x1e8>)
 80011f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80011f8:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <HAL_FDCAN_MspInit+0x1e8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d10b      	bne.n	8001218 <HAL_FDCAN_MspInit+0x10c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001200:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 8001202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001204:	4a3c      	ldr	r2, [pc, #240]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 8001206:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800120a:	6593      	str	r3, [r2, #88]	; 0x58
 800120c:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 800120e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001218:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121c:	4a36      	ldr	r2, [pc, #216]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 800121e:	f043 0302 	orr.w	r3, r3, #2
 8001222:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001224:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001230:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001234:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001244:	2309      	movs	r3, #9
 8001246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800124e:	4619      	mov	r1, r3
 8001250:	482c      	ldr	r0, [pc, #176]	; (8001304 <HAL_FDCAN_MspInit+0x1f8>)
 8001252:	f002 f913 	bl	800347c <HAL_GPIO_Init>
}
 8001256:	e047      	b.n	80012e8 <HAL_FDCAN_MspInit+0x1dc>
  else if(hfdcan->Instance==FDCAN3)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a2a      	ldr	r2, [pc, #168]	; (8001308 <HAL_FDCAN_MspInit+0x1fc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d142      	bne.n	80012e8 <HAL_FDCAN_MspInit+0x1dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001266:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800126c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	4618      	mov	r0, r3
 8001274:	f003 faf8 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_FDCAN_MspInit+0x176>
      Error_Handler();
 800127e:	f7ff fe5b 	bl	8000f38 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <HAL_FDCAN_MspInit+0x1e8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <HAL_FDCAN_MspInit+0x1e8>)
 800128a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_FDCAN_MspInit+0x1e8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d10b      	bne.n	80012ac <HAL_FDCAN_MspInit+0x1a0>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 8001296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001298:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 800129a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800129e:	6593      	str	r3, [r2, #88]	; 0x58
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b0:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 80012b2:	f043 0302 	orr.w	r3, r3, #2
 80012b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_FDCAN_MspInit+0x1ec>)
 80012ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80012c4:	2318      	movs	r3, #24
 80012c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 80012d6:	230b      	movs	r3, #11
 80012d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012e0:	4619      	mov	r1, r3
 80012e2:	4808      	ldr	r0, [pc, #32]	; (8001304 <HAL_FDCAN_MspInit+0x1f8>)
 80012e4:	f002 f8ca 	bl	800347c <HAL_GPIO_Init>
}
 80012e8:	bf00      	nop
 80012ea:	3788      	adds	r7, #136	; 0x88
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40006400 	.word	0x40006400
 80012f4:	200007d0 	.word	0x200007d0
 80012f8:	40021000 	.word	0x40021000
 80012fc:	48000c00 	.word	0x48000c00
 8001300:	40006800 	.word	0x40006800
 8001304:	48000400 	.word	0x48000400
 8001308:	40006c00 	.word	0x40006c00

0800130c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0a4      	sub	sp, #144	; 0x90
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001328:	2254      	movs	r2, #84	; 0x54
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fc56 	bl	8005bde <memset>
  if(hi2c->Instance==I2C1)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a83      	ldr	r2, [pc, #524]	; (8001544 <HAL_I2C_MspInit+0x238>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d15c      	bne.n	80013f6 <HAL_I2C_MspInit+0xea>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800133c:	2340      	movs	r3, #64	; 0x40
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001340:	2300      	movs	r3, #0
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001344:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001348:	4618      	mov	r0, r3
 800134a:	f003 fa8d 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001354:	f7ff fdf0 	bl	8000f38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b7b      	ldr	r3, [pc, #492]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135c:	4a7a      	ldr	r2, [pc, #488]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001364:	4b78      	ldr	r3, [pc, #480]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001370:	4b75      	ldr	r3, [pc, #468]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	4a74      	ldr	r2, [pc, #464]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137c:	4b72      	ldr	r3, [pc, #456]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	623b      	str	r3, [r7, #32]
 8001386:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800138c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138e:	2312      	movs	r3, #18
 8001390:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013a0:	2304      	movs	r3, #4
 80013a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f002 f864 	bl	800347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b8:	2312      	movs	r3, #18
 80013ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ca:	2304      	movs	r3, #4
 80013cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013d4:	4619      	mov	r1, r3
 80013d6:	485d      	ldr	r0, [pc, #372]	; (800154c <HAL_I2C_MspInit+0x240>)
 80013d8:	f002 f850 	bl	800347c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013dc:	4b5a      	ldr	r3, [pc, #360]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	4a59      	ldr	r2, [pc, #356]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 80013e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013e6:	6593      	str	r3, [r2, #88]	; 0x58
 80013e8:	4b57      	ldr	r3, [pc, #348]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 80013ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80013f4:	e0a2      	b.n	800153c <HAL_I2C_MspInit+0x230>
  else if(hi2c->Instance==I2C2)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a55      	ldr	r2, [pc, #340]	; (8001550 <HAL_I2C_MspInit+0x244>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d15c      	bne.n	80014ba <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001404:	2300      	movs	r3, #0
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140c:	4618      	mov	r0, r3
 800140e:	f003 fa2b 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_I2C_MspInit+0x110>
      Error_Handler();
 8001418:	f7ff fd8e 	bl	8000f38 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141c:	4b4a      	ldr	r3, [pc, #296]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001420:	4a49      	ldr	r2, [pc, #292]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001428:	4b47      	ldr	r3, [pc, #284]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	4b44      	ldr	r3, [pc, #272]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	4a43      	ldr	r2, [pc, #268]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001440:	4b41      	ldr	r3, [pc, #260]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800144c:	2310      	movs	r3, #16
 800144e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001450:	2312      	movs	r3, #18
 8001452:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001462:	2304      	movs	r3, #4
 8001464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001468:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800146c:	4619      	mov	r1, r3
 800146e:	4839      	ldr	r0, [pc, #228]	; (8001554 <HAL_I2C_MspInit+0x248>)
 8001470:	f002 f804 	bl	800347c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001478:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147a:	2312      	movs	r3, #18
 800147c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800148c:	2304      	movs	r3, #4
 800148e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001496:	4619      	mov	r1, r3
 8001498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149c:	f001 ffee 	bl	800347c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014a0:	4b29      	ldr	r3, [pc, #164]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	4a28      	ldr	r2, [pc, #160]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 80014a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014aa:	6593      	str	r3, [r2, #88]	; 0x58
 80014ac:	4b26      	ldr	r3, [pc, #152]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
}
 80014b8:	e040      	b.n	800153c <HAL_I2C_MspInit+0x230>
  else if(hi2c->Instance==I2C3)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a26      	ldr	r2, [pc, #152]	; (8001558 <HAL_I2C_MspInit+0x24c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d13b      	bne.n	800153c <HAL_I2C_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d2:	4618      	mov	r0, r3
 80014d4:	f003 f9c8 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2C_MspInit+0x1d6>
      Error_Handler();
 80014de:	f7ff fd2b 	bl	8000f38 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a18      	ldr	r2, [pc, #96]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001500:	2312      	movs	r3, #18
 8001502:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001512:	2308      	movs	r3, #8
 8001514:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001518:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	; (8001554 <HAL_I2C_MspInit+0x248>)
 8001520:	f001 ffac 	bl	800347c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 800152a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800152e:	6593      	str	r3, [r2, #88]	; 0x58
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_I2C_MspInit+0x23c>)
 8001532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001534:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
}
 800153c:	bf00      	nop
 800153e:	3790      	adds	r7, #144	; 0x90
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40005400 	.word	0x40005400
 8001548:	40021000 	.word	0x40021000
 800154c:	48000400 	.word	0x48000400
 8001550:	40005800 	.word	0x40005800
 8001554:	48000800 	.word	0x48000800
 8001558:	40007800 	.word	0x40007800

0800155c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b0a0      	sub	sp, #128	; 0x80
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001574:	f107 0318 	add.w	r3, r7, #24
 8001578:	2254      	movs	r2, #84	; 0x54
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fb2e 	bl	8005bde <memset>
  if(huart->Instance==LPUART1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a2c      	ldr	r2, [pc, #176]	; (8001638 <HAL_UART_MspInit+0xdc>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d151      	bne.n	8001630 <HAL_UART_MspInit+0xd4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800158c:	2320      	movs	r3, #32
 800158e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001594:	f107 0318 	add.w	r3, r7, #24
 8001598:	4618      	mov	r0, r3
 800159a:	f003 f965 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015a4:	f7ff fcc8 	bl	8000f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80015a8:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_UART_MspInit+0xe0>)
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	4a23      	ldr	r2, [pc, #140]	; (800163c <HAL_UART_MspInit+0xe0>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80015b4:	4b21      	ldr	r3, [pc, #132]	; (800163c <HAL_UART_MspInit+0xe0>)
 80015b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_UART_MspInit+0xe0>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_UART_MspInit+0xe0>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_UART_MspInit+0xe0>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_UART_MspInit+0xe0>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	4a17      	ldr	r2, [pc, #92]	; (800163c <HAL_UART_MspInit+0xe0>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_UART_MspInit+0xe0>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015f0:	2303      	movs	r3, #3
 80015f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001600:	2308      	movs	r3, #8
 8001602:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001604:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001608:	4619      	mov	r1, r3
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <HAL_UART_MspInit+0xe4>)
 800160c:	f001 ff36 	bl	800347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001610:	2302      	movs	r3, #2
 8001612:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001620:	230c      	movs	r3, #12
 8001622:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <HAL_UART_MspInit+0xe8>)
 800162c:	f001 ff26 	bl	800347c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001630:	bf00      	nop
 8001632:	3780      	adds	r7, #128	; 0x80
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40008000 	.word	0x40008000
 800163c:	40021000 	.word	0x40021000
 8001640:	48000800 	.word	0x48000800
 8001644:	48000400 	.word	0x48000400

08001648 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a2f      	ldr	r2, [pc, #188]	; (8001724 <HAL_SPI_MspInit+0xdc>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d129      	bne.n	80016be <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800166a:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_SPI_MspInit+0xe0>)
 800166c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166e:	4a2e      	ldr	r2, [pc, #184]	; (8001728 <HAL_SPI_MspInit+0xe0>)
 8001670:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001674:	6613      	str	r3, [r2, #96]	; 0x60
 8001676:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <HAL_SPI_MspInit+0xe0>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167e:	61bb      	str	r3, [r7, #24]
 8001680:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	4b29      	ldr	r3, [pc, #164]	; (8001728 <HAL_SPI_MspInit+0xe0>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	4a28      	ldr	r2, [pc, #160]	; (8001728 <HAL_SPI_MspInit+0xe0>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168e:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_SPI_MspInit+0xe0>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800169a:	23e0      	movs	r3, #224	; 0xe0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016aa:	2305      	movs	r3, #5
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b8:	f001 fee0 	bl	800347c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016bc:	e02d      	b.n	800171a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a1a      	ldr	r2, [pc, #104]	; (800172c <HAL_SPI_MspInit+0xe4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d128      	bne.n	800171a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_SPI_MspInit+0xe0>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	4a16      	ldr	r2, [pc, #88]	; (8001728 <HAL_SPI_MspInit+0xe0>)
 80016ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d2:	6593      	str	r3, [r2, #88]	; 0x58
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_SPI_MspInit+0xe0>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_SPI_MspInit+0xe0>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	4a10      	ldr	r2, [pc, #64]	; (8001728 <HAL_SPI_MspInit+0xe0>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_SPI_MspInit+0xe0>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80016f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800170a:	2306      	movs	r3, #6
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	4806      	ldr	r0, [pc, #24]	; (8001730 <HAL_SPI_MspInit+0xe8>)
 8001716:	f001 feb1 	bl	800347c <HAL_GPIO_Init>
}
 800171a:	bf00      	nop
 800171c:	3730      	adds	r7, #48	; 0x30
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40013000 	.word	0x40013000
 8001728:	40021000 	.word	0x40021000
 800172c:	40003c00 	.word	0x40003c00
 8001730:	48000800 	.word	0x48000800

08001734 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b098      	sub	sp, #96	; 0x60
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	2254      	movs	r2, #84	; 0x54
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f004 fa4a 	bl	8005bde <memset>
  if(hpcd->Instance==USB)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a11      	ldr	r2, [pc, #68]	; (8001794 <HAL_PCD_MspInit+0x60>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d11b      	bne.n	800178c <HAL_PCD_MspInit+0x58>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001758:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800175a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800175e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	4618      	mov	r0, r3
 8001766:	f003 f87f 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8001770:	f7ff fbe2 	bl	8000f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_PCD_MspInit+0x64>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_PCD_MspInit+0x64>)
 800177a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800177e:	6593      	str	r3, [r2, #88]	; 0x58
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_PCD_MspInit+0x64>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	3760      	adds	r7, #96	; 0x60
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40005c00 	.word	0x40005c00
 8001798:	40021000 	.word	0x40021000

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a0:	e7fe      	b.n	80017a0 <NMI_Handler+0x4>

080017a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <MemManage_Handler+0x4>

080017ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <UsageFault_Handler+0x4>

080017ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e8:	f000 f89a 	bl	8001920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <DMA1_Channel1_IRQHandler+0x10>)
 80017f6:	f001 fb69 	bl	8002ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000100 	.word	0x20000100

08001804 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <SystemInit+0x20>)
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <SystemInit+0x20>)
 8001810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800182a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800182c:	f7ff ffea 	bl	8001804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <LoopForever+0x6>)
  ldr r1, =_edata
 8001832:	490d      	ldr	r1, [pc, #52]	; (8001868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <LoopForever+0xe>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001848:	4c0a      	ldr	r4, [pc, #40]	; (8001874 <LoopForever+0x16>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001856:	f004 f9cb 	bl	8005bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800185a:	f7fe fe5b 	bl	8000514 <main>

0800185e <LoopForever>:

LoopForever:
    b LoopForever
 800185e:	e7fe      	b.n	800185e <LoopForever>
  ldr   r0, =_estack
 8001860:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800186c:	08005ca0 	.word	0x08005ca0
  ldr r2, =_sbss
 8001870:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001874:	200007d8 	.word	0x200007d8

08001878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC1_2_IRQHandler>

0800187a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001884:	2003      	movs	r0, #3
 8001886:	f001 fa39 	bl	8002cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800188a:	200f      	movs	r0, #15
 800188c:	f000 f80e 	bl	80018ac <HAL_InitTick>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	71fb      	strb	r3, [r7, #7]
 800189a:	e001      	b.n	80018a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800189c:	f7ff fb52 	bl	8000f44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018a0:	79fb      	ldrb	r3, [r7, #7]

}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <HAL_InitTick+0x68>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d022      	beq.n	8001906 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_InitTick+0x6c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <HAL_InitTick+0x68>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f001 fa44 	bl	8002d62 <HAL_SYSTICK_Config>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10f      	bne.n	8001900 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b0f      	cmp	r3, #15
 80018e4:	d809      	bhi.n	80018fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e6:	2200      	movs	r2, #0
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	f04f 30ff 	mov.w	r0, #4294967295
 80018ee:	f001 fa10 	bl	8002d12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <HAL_InitTick+0x70>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	e007      	b.n	800190a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
 80018fe:	e004      	b.n	800190a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e001      	b.n	800190a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000008 	.word	0x20000008
 8001918:	20000000 	.word	0x20000000
 800191c:	20000004 	.word	0x20000004

08001920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_IncTick+0x1c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_IncTick+0x20>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4413      	add	r3, r2
 800192e:	4a03      	ldr	r2, [pc, #12]	; (800193c <HAL_IncTick+0x1c>)
 8001930:	6013      	str	r3, [r2, #0]
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	200007d4 	.word	0x200007d4
 8001940:	20000008 	.word	0x20000008

08001944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return uwTick;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_GetTick+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	200007d4 	.word	0x200007d4

0800195c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	609a      	str	r2, [r3, #8]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	609a      	str	r2, [r3, #8]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3360      	adds	r3, #96	; 0x60
 80019d6:	461a      	mov	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <LL_ADC_SetOffset+0x44>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	4313      	orrs	r3, r2
 80019f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019fc:	bf00      	nop
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	03fff000 	.word	0x03fff000

08001a0c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3360      	adds	r3, #96	; 0x60
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3360      	adds	r3, #96	; 0x60
 8001a48:	461a      	mov	r2, r3
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b087      	sub	sp, #28
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3360      	adds	r3, #96	; 0x60
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a98:	bf00      	nop
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3360      	adds	r3, #96	; 0x60
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ace:	bf00      	nop
 8001ad0:	371c      	adds	r7, #28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	615a      	str	r2, [r3, #20]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3330      	adds	r3, #48	; 0x30
 8001b10:	461a      	mov	r2, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	4413      	add	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	211f      	movs	r1, #31
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	401a      	ands	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	0e9b      	lsrs	r3, r3, #26
 8001b38:	f003 011f 	and.w	r1, r3, #31
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	431a      	orrs	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3314      	adds	r3, #20
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	0e5b      	lsrs	r3, r3, #25
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	4413      	add	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	0d1b      	lsrs	r3, r3, #20
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	2107      	movs	r1, #7
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	0d1b      	lsrs	r3, r3, #20
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ba2:	bf00      	nop
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0318 	and.w	r3, r3, #24
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bd4:	40d9      	lsrs	r1, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	400b      	ands	r3, r1
 8001bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bde:	431a      	orrs	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	0007ffff 	.word	0x0007ffff

08001bf8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6093      	str	r3, [r2, #8]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c30:	d101      	bne.n	8001c36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c80:	d101      	bne.n	8001c86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <LL_ADC_IsEnabled+0x18>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <LL_ADC_IsEnabled+0x1a>
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d101      	bne.n	8001cd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d101      	bne.n	8001cf8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e1a9      	b.n	8002076 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff f92b 	bl	8000f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff67 	bl	8001c1c <LL_ADC_IsDeepPowerDownEnabled>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff4d 	bl	8001bf8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff82 	bl	8001c6c <LL_ADC_IsInternalRegulatorEnabled>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d115      	bne.n	8001d9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff66 	bl	8001c44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d78:	4b9c      	ldr	r3, [pc, #624]	; (8001fec <HAL_ADC_Init+0x2e4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	4a9c      	ldr	r2, [pc, #624]	; (8001ff0 <HAL_ADC_Init+0x2e8>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	3301      	adds	r3, #1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d8c:	e002      	b.n	8001d94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f9      	bne.n	8001d8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff64 	bl	8001c6c <LL_ADC_IsInternalRegulatorEnabled>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10d      	bne.n	8001dc6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dae:	f043 0210 	orr.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff75 	bl	8001cba <LL_ADC_REG_IsConversionOngoing>
 8001dd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 8142 	bne.w	8002064 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 813e 	bne.w	8002064 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001df0:	f043 0202 	orr.w	r2, r3, #2
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff49 	bl	8001c94 <LL_ADC_IsEnabled>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d141      	bne.n	8001e8c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e10:	d004      	beq.n	8001e1c <HAL_ADC_Init+0x114>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a77      	ldr	r2, [pc, #476]	; (8001ff4 <HAL_ADC_Init+0x2ec>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d10f      	bne.n	8001e3c <HAL_ADC_Init+0x134>
 8001e1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e20:	f7ff ff38 	bl	8001c94 <LL_ADC_IsEnabled>
 8001e24:	4604      	mov	r4, r0
 8001e26:	4873      	ldr	r0, [pc, #460]	; (8001ff4 <HAL_ADC_Init+0x2ec>)
 8001e28:	f7ff ff34 	bl	8001c94 <LL_ADC_IsEnabled>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4323      	orrs	r3, r4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e012      	b.n	8001e62 <HAL_ADC_Init+0x15a>
 8001e3c:	486e      	ldr	r0, [pc, #440]	; (8001ff8 <HAL_ADC_Init+0x2f0>)
 8001e3e:	f7ff ff29 	bl	8001c94 <LL_ADC_IsEnabled>
 8001e42:	4604      	mov	r4, r0
 8001e44:	486d      	ldr	r0, [pc, #436]	; (8001ffc <HAL_ADC_Init+0x2f4>)
 8001e46:	f7ff ff25 	bl	8001c94 <LL_ADC_IsEnabled>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	431c      	orrs	r4, r3
 8001e4e:	486c      	ldr	r0, [pc, #432]	; (8002000 <HAL_ADC_Init+0x2f8>)
 8001e50:	f7ff ff20 	bl	8001c94 <LL_ADC_IsEnabled>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4323      	orrs	r3, r4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d012      	beq.n	8001e8c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e6e:	d004      	beq.n	8001e7a <HAL_ADC_Init+0x172>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a5f      	ldr	r2, [pc, #380]	; (8001ff4 <HAL_ADC_Init+0x2ec>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_Init+0x176>
 8001e7a:	4a62      	ldr	r2, [pc, #392]	; (8002004 <HAL_ADC_Init+0x2fc>)
 8001e7c:	e000      	b.n	8001e80 <HAL_ADC_Init+0x178>
 8001e7e:	4a62      	ldr	r2, [pc, #392]	; (8002008 <HAL_ADC_Init+0x300>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4619      	mov	r1, r3
 8001e86:	4610      	mov	r0, r2
 8001e88:	f7ff fd68 	bl	800195c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7f5b      	ldrb	r3, [r3, #29]
 8001e90:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e96:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e9c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ea2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eaa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d106      	bne.n	8001ec8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	045b      	lsls	r3, r3, #17
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	4b48      	ldr	r3, [pc, #288]	; (800200c <HAL_ADC_Init+0x304>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	69b9      	ldr	r1, [r7, #24]
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fee4 	bl	8001ce0 <LL_ADC_INJ_IsConversionOngoing>
 8001f18:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d17f      	bne.n	8002020 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d17c      	bne.n	8002020 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f2a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f32:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f42:	f023 0302 	bic.w	r3, r3, #2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	69b9      	ldr	r1, [r7, #24]
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d017      	beq.n	8001f88 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6911      	ldr	r1, [r2, #16]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001f86:	e013      	b.n	8001fb0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f96:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d12a      	bne.n	8002010 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fc4:	f023 0304 	bic.w	r3, r3, #4
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fd6:	4311      	orrs	r1, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	e019      	b.n	8002020 <HAL_ADC_Init+0x318>
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	053e2d63 	.word	0x053e2d63
 8001ff4:	50000100 	.word	0x50000100
 8001ff8:	50000400 	.word	0x50000400
 8001ffc:	50000500 	.word	0x50000500
 8002000:	50000600 	.word	0x50000600
 8002004:	50000300 	.word	0x50000300
 8002008:	50000700 	.word	0x50000700
 800200c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d10c      	bne.n	8002042 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f023 010f 	bic.w	r1, r3, #15
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	1e5a      	subs	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
 8002040:	e007      	b.n	8002052 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 020f 	bic.w	r2, r2, #15
 8002050:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	f023 0303 	bic.w	r3, r3, #3
 800205a:	f043 0201 	orr.w	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	65da      	str	r2, [r3, #92]	; 0x5c
 8002062:	e007      	b.n	8002074 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	f043 0210 	orr.w	r2, r3, #16
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002074:	7ffb      	ldrb	r3, [r7, #31]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd90      	pop	{r4, r7, pc}
 800207e:	bf00      	nop

08002080 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b0b6      	sub	sp, #216	; 0xd8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x24>
 800209e:	2302      	movs	r3, #2
 80020a0:	f000 bc13 	b.w	80028ca <HAL_ADC_ConfigChannel+0x84a>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fe02 	bl	8001cba <LL_ADC_REG_IsConversionOngoing>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f040 83f3 	bne.w	80028a4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	f7ff fd18 	bl	8001b00 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fdf0 	bl	8001cba <LL_ADC_REG_IsConversionOngoing>
 80020da:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fdfc 	bl	8001ce0 <LL_ADC_INJ_IsConversionOngoing>
 80020e8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 81d9 	bne.w	80024a8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 81d4 	bne.w	80024a8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002108:	d10f      	bne.n	800212a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	4619      	mov	r1, r3
 8002116:	f7ff fd1f 	bl	8001b58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fcd9 	bl	8001ada <LL_ADC_SetSamplingTimeCommonConfig>
 8002128:	e00e      	b.n	8002148 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6819      	ldr	r1, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	461a      	mov	r2, r3
 8002138:	f7ff fd0e 	bl	8001b58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fcc9 	bl	8001ada <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	08db      	lsrs	r3, r3, #3
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b04      	cmp	r3, #4
 8002168:	d022      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6919      	ldr	r1, [r3, #16]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800217a:	f7ff fc23 	bl	80019c4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6919      	ldr	r1, [r3, #16]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	461a      	mov	r2, r3
 800218c:	f7ff fc6f 	bl	8001a6e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800219c:	2b01      	cmp	r3, #1
 800219e:	d102      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x126>
 80021a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a4:	e000      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x128>
 80021a6:	2300      	movs	r3, #0
 80021a8:	461a      	mov	r2, r3
 80021aa:	f7ff fc7b 	bl	8001aa4 <LL_ADC_SetOffsetSaturation>
 80021ae:	e17b      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fc28 	bl	8001a0c <LL_ADC_GetOffsetChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10a      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x15c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fc1d 	bl	8001a0c <LL_ADC_GetOffsetChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	0e9b      	lsrs	r3, r3, #26
 80021d6:	f003 021f 	and.w	r2, r3, #31
 80021da:	e01e      	b.n	800221a <HAL_ADC_ConfigChannel+0x19a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fc12 	bl	8001a0c <LL_ADC_GetOffsetChannel>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002202:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800220a:	2320      	movs	r3, #32
 800220c:	e004      	b.n	8002218 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800220e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x1b2>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0e9b      	lsrs	r3, r3, #26
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	e018      	b.n	8002264 <HAL_ADC_ConfigChannel+0x1e4>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800224a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800224e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002256:	2320      	movs	r3, #32
 8002258:	e004      	b.n	8002264 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800225a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002264:	429a      	cmp	r2, r3
 8002266:	d106      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2200      	movs	r2, #0
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fbe1 	bl	8001a38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2101      	movs	r1, #1
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fbc5 	bl	8001a0c <LL_ADC_GetOffsetChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10a      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x222>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2101      	movs	r1, #1
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fbba 	bl	8001a0c <LL_ADC_GetOffsetChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	0e9b      	lsrs	r3, r3, #26
 800229c:	f003 021f 	and.w	r2, r3, #31
 80022a0:	e01e      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x260>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2101      	movs	r1, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fbaf 	bl	8001a0c <LL_ADC_GetOffsetChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80022d0:	2320      	movs	r3, #32
 80022d2:	e004      	b.n	80022de <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80022d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x278>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0e9b      	lsrs	r3, r3, #26
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	e018      	b.n	800232a <HAL_ADC_ConfigChannel+0x2aa>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800230c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800231c:	2320      	movs	r3, #32
 800231e:	e004      	b.n	800232a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800232a:	429a      	cmp	r2, r3
 800232c:	d106      	bne.n	800233c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2200      	movs	r2, #0
 8002334:	2101      	movs	r1, #1
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fb7e 	bl	8001a38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2102      	movs	r1, #2
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fb62 	bl	8001a0c <LL_ADC_GetOffsetChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10a      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x2e8>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2102      	movs	r1, #2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fb57 	bl	8001a0c <LL_ADC_GetOffsetChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	f003 021f 	and.w	r2, r3, #31
 8002366:	e01e      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x326>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2102      	movs	r1, #2
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fb4c 	bl	8001a0c <LL_ADC_GetOffsetChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002386:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800238a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800238e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002396:	2320      	movs	r3, #32
 8002398:	e004      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800239a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <HAL_ADC_ConfigChannel+0x33e>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	0e9b      	lsrs	r3, r3, #26
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	e016      	b.n	80023ec <HAL_ADC_ConfigChannel+0x36c>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e004      	b.n	80023ec <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80023e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d106      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2200      	movs	r2, #0
 80023f6:	2102      	movs	r1, #2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fb1d 	bl	8001a38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2103      	movs	r1, #3
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fb01 	bl	8001a0c <LL_ADC_GetOffsetChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <HAL_ADC_ConfigChannel+0x3aa>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2103      	movs	r1, #3
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff faf6 	bl	8001a0c <LL_ADC_GetOffsetChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	0e9b      	lsrs	r3, r3, #26
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	e017      	b.n	800245a <HAL_ADC_ConfigChannel+0x3da>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2103      	movs	r1, #3
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff faeb 	bl	8001a0c <LL_ADC_GetOffsetChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002444:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e003      	b.n	8002458 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x3f2>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	e011      	b.n	8002496 <HAL_ADC_ConfigChannel+0x416>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002482:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800248a:	2320      	movs	r3, #32
 800248c:	e003      	b.n	8002496 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800248e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002496:	429a      	cmp	r2, r3
 8002498:	d106      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2200      	movs	r2, #0
 80024a0:	2103      	movs	r1, #3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fac8 	bl	8001a38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fbf1 	bl	8001c94 <LL_ADC_IsEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 813d 	bne.w	8002734 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f7ff fb72 	bl	8001bb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4aa2      	ldr	r2, [pc, #648]	; (800275c <HAL_ADC_ConfigChannel+0x6dc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	f040 812e 	bne.w	8002734 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x480>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0e9b      	lsrs	r3, r3, #26
 80024ee:	3301      	adds	r3, #1
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	2b09      	cmp	r3, #9
 80024f6:	bf94      	ite	ls
 80024f8:	2301      	movls	r3, #1
 80024fa:	2300      	movhi	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	e019      	b.n	8002534 <HAL_ADC_ConfigChannel+0x4b4>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800250e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002510:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002518:	2320      	movs	r3, #32
 800251a:	e003      	b.n	8002524 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800251c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2b09      	cmp	r3, #9
 800252c:	bf94      	ite	ls
 800252e:	2301      	movls	r3, #1
 8002530:	2300      	movhi	r3, #0
 8002532:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002534:	2b00      	cmp	r3, #0
 8002536:	d079      	beq.n	800262c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x4d4>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	3301      	adds	r3, #1
 800254c:	069b      	lsls	r3, r3, #26
 800254e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002552:	e015      	b.n	8002580 <HAL_ADC_ConfigChannel+0x500>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002564:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e003      	b.n	8002578 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3301      	adds	r3, #1
 800257a:	069b      	lsls	r3, r3, #26
 800257c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x520>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	3301      	adds	r3, #1
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	e017      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x550>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e003      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80025bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	ea42 0103 	orr.w	r1, r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x576>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	051b      	lsls	r3, r3, #20
 80025f4:	e018      	b.n	8002628 <HAL_ADC_ConfigChannel+0x5a8>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002606:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800260e:	2320      	movs	r3, #32
 8002610:	e003      	b.n	800261a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	3301      	adds	r3, #1
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002628:	430b      	orrs	r3, r1
 800262a:	e07e      	b.n	800272a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002634:	2b00      	cmp	r3, #0
 8002636:	d107      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x5c8>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0e9b      	lsrs	r3, r3, #26
 800263e:	3301      	adds	r3, #1
 8002640:	069b      	lsls	r3, r3, #26
 8002642:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002646:	e015      	b.n	8002674 <HAL_ADC_ConfigChannel+0x5f4>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002660:	2320      	movs	r3, #32
 8002662:	e003      	b.n	800266c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	069b      	lsls	r3, r3, #26
 8002670:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267c:	2b00      	cmp	r3, #0
 800267e:	d109      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x614>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	3301      	adds	r3, #1
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2101      	movs	r1, #1
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	e017      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x644>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	61fb      	str	r3, [r7, #28]
  return result;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80026ac:	2320      	movs	r3, #32
 80026ae:	e003      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	ea42 0103 	orr.w	r1, r2, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10d      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x670>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0e9b      	lsrs	r3, r3, #26
 80026da:	3301      	adds	r3, #1
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	3b1e      	subs	r3, #30
 80026e8:	051b      	lsls	r3, r3, #20
 80026ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ee:	e01b      	b.n	8002728 <HAL_ADC_ConfigChannel+0x6a8>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	613b      	str	r3, [r7, #16]
  return result;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e003      	b.n	8002714 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3301      	adds	r3, #1
 8002716:	f003 021f 	and.w	r2, r3, #31
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	3b1e      	subs	r3, #30
 8002722:	051b      	lsls	r3, r3, #20
 8002724:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002728:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800272e:	4619      	mov	r1, r3
 8002730:	f7ff fa12 	bl	8001b58 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_ADC_ConfigChannel+0x6e0>)
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80be 	beq.w	80028be <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800274a:	d004      	beq.n	8002756 <HAL_ADC_ConfigChannel+0x6d6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <HAL_ADC_ConfigChannel+0x6e4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10a      	bne.n	800276c <HAL_ADC_ConfigChannel+0x6ec>
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_ADC_ConfigChannel+0x6e8>)
 8002758:	e009      	b.n	800276e <HAL_ADC_ConfigChannel+0x6ee>
 800275a:	bf00      	nop
 800275c:	407f0000 	.word	0x407f0000
 8002760:	80080000 	.word	0x80080000
 8002764:	50000100 	.word	0x50000100
 8002768:	50000300 	.word	0x50000300
 800276c:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <HAL_ADC_ConfigChannel+0x854>)
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f91a 	bl	80019a8 <LL_ADC_GetCommonPathInternalCh>
 8002774:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a56      	ldr	r2, [pc, #344]	; (80028d8 <HAL_ADC_ConfigChannel+0x858>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d004      	beq.n	800278c <HAL_ADC_ConfigChannel+0x70c>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a55      	ldr	r2, [pc, #340]	; (80028dc <HAL_ADC_ConfigChannel+0x85c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d13a      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800278c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002790:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d134      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a0:	d005      	beq.n	80027ae <HAL_ADC_ConfigChannel+0x72e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a4e      	ldr	r2, [pc, #312]	; (80028e0 <HAL_ADC_ConfigChannel+0x860>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	f040 8085 	bne.w	80028b8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b6:	d004      	beq.n	80027c2 <HAL_ADC_ConfigChannel+0x742>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a49      	ldr	r2, [pc, #292]	; (80028e4 <HAL_ADC_ConfigChannel+0x864>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x746>
 80027c2:	4a49      	ldr	r2, [pc, #292]	; (80028e8 <HAL_ADC_ConfigChannel+0x868>)
 80027c4:	e000      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x748>
 80027c6:	4a43      	ldr	r2, [pc, #268]	; (80028d4 <HAL_ADC_ConfigChannel+0x854>)
 80027c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027d0:	4619      	mov	r1, r3
 80027d2:	4610      	mov	r0, r2
 80027d4:	f7ff f8d5 	bl	8001982 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027d8:	4b44      	ldr	r3, [pc, #272]	; (80028ec <HAL_ADC_ConfigChannel+0x86c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	4a44      	ldr	r2, [pc, #272]	; (80028f0 <HAL_ADC_ConfigChannel+0x870>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027f2:	e002      	b.n	80027fa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f9      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002800:	e05a      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a3b      	ldr	r2, [pc, #236]	; (80028f4 <HAL_ADC_ConfigChannel+0x874>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d125      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800280c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11f      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <HAL_ADC_ConfigChannel+0x864>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d104      	bne.n	800282c <HAL_ADC_ConfigChannel+0x7ac>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a34      	ldr	r2, [pc, #208]	; (80028f8 <HAL_ADC_ConfigChannel+0x878>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d047      	beq.n	80028bc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002834:	d004      	beq.n	8002840 <HAL_ADC_ConfigChannel+0x7c0>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <HAL_ADC_ConfigChannel+0x864>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d101      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x7c4>
 8002840:	4a29      	ldr	r2, [pc, #164]	; (80028e8 <HAL_ADC_ConfigChannel+0x868>)
 8002842:	e000      	b.n	8002846 <HAL_ADC_ConfigChannel+0x7c6>
 8002844:	4a23      	ldr	r2, [pc, #140]	; (80028d4 <HAL_ADC_ConfigChannel+0x854>)
 8002846:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800284a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284e:	4619      	mov	r1, r3
 8002850:	4610      	mov	r0, r2
 8002852:	f7ff f896 	bl	8001982 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002856:	e031      	b.n	80028bc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a27      	ldr	r2, [pc, #156]	; (80028fc <HAL_ADC_ConfigChannel+0x87c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d12d      	bne.n	80028be <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002862:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d127      	bne.n	80028be <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_ADC_ConfigChannel+0x864>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d022      	beq.n	80028be <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002880:	d004      	beq.n	800288c <HAL_ADC_ConfigChannel+0x80c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_ADC_ConfigChannel+0x864>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d101      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x810>
 800288c:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <HAL_ADC_ConfigChannel+0x868>)
 800288e:	e000      	b.n	8002892 <HAL_ADC_ConfigChannel+0x812>
 8002890:	4a10      	ldr	r2, [pc, #64]	; (80028d4 <HAL_ADC_ConfigChannel+0x854>)
 8002892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002896:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800289a:	4619      	mov	r1, r3
 800289c:	4610      	mov	r0, r2
 800289e:	f7ff f870 	bl	8001982 <LL_ADC_SetCommonPathInternalCh>
 80028a2:	e00c      	b.n	80028be <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80028b6:	e002      	b.n	80028be <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028b8:	bf00      	nop
 80028ba:	e000      	b.n	80028be <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80028c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	37d8      	adds	r7, #216	; 0xd8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	50000700 	.word	0x50000700
 80028d8:	c3210000 	.word	0xc3210000
 80028dc:	90c00010 	.word	0x90c00010
 80028e0:	50000600 	.word	0x50000600
 80028e4:	50000100 	.word	0x50000100
 80028e8:	50000300 	.word	0x50000300
 80028ec:	20000000 	.word	0x20000000
 80028f0:	053e2d63 	.word	0x053e2d63
 80028f4:	c7520000 	.word	0xc7520000
 80028f8:	50000500 	.word	0x50000500
 80028fc:	cb840000 	.word	0xcb840000

08002900 <LL_ADC_IsEnabled>:
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <LL_ADC_IsEnabled+0x18>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <LL_ADC_IsEnabled+0x1a>
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_ADC_REG_IsConversionOngoing>:
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b04      	cmp	r3, #4
 8002938:	d101      	bne.n	800293e <LL_ADC_REG_IsConversionOngoing+0x18>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b0a1      	sub	sp, #132	; 0x84
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002966:	2302      	movs	r3, #2
 8002968:	e0e7      	b.n	8002b3a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002972:	2300      	movs	r3, #0
 8002974:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002976:	2300      	movs	r3, #0
 8002978:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002982:	d102      	bne.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002984:	4b6f      	ldr	r3, [pc, #444]	; (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	e009      	b.n	800299e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a6e      	ldr	r2, [pc, #440]	; (8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d102      	bne.n	800299a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002994:	4b6d      	ldr	r3, [pc, #436]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	e001      	b.n	800299e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10b      	bne.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0be      	b.n	8002b3a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ffb1 	bl	8002926 <LL_ADC_REG_IsConversionOngoing>
 80029c4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ffab 	bl	8002926 <LL_ADC_REG_IsConversionOngoing>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 80a0 	bne.w	8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80029d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 809c 	bne.w	8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e8:	d004      	beq.n	80029f4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a55      	ldr	r2, [pc, #340]	; (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80029f4:	4b56      	ldr	r3, [pc, #344]	; (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80029f6:	e000      	b.n	80029fa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80029f8:	4b56      	ldr	r3, [pc, #344]	; (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80029fa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d04b      	beq.n	8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a16:	035b      	lsls	r3, r3, #13
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a28:	d004      	beq.n	8002a34 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a45      	ldr	r2, [pc, #276]	; (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d10f      	bne.n	8002a54 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002a34:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a38:	f7ff ff62 	bl	8002900 <LL_ADC_IsEnabled>
 8002a3c:	4604      	mov	r4, r0
 8002a3e:	4841      	ldr	r0, [pc, #260]	; (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a40:	f7ff ff5e 	bl	8002900 <LL_ADC_IsEnabled>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4323      	orrs	r3, r4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	e012      	b.n	8002a7a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002a54:	483c      	ldr	r0, [pc, #240]	; (8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a56:	f7ff ff53 	bl	8002900 <LL_ADC_IsEnabled>
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	483b      	ldr	r0, [pc, #236]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a5e:	f7ff ff4f 	bl	8002900 <LL_ADC_IsEnabled>
 8002a62:	4603      	mov	r3, r0
 8002a64:	431c      	orrs	r4, r3
 8002a66:	483c      	ldr	r0, [pc, #240]	; (8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a68:	f7ff ff4a 	bl	8002900 <LL_ADC_IsEnabled>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4323      	orrs	r3, r4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d056      	beq.n	8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a86:	f023 030f 	bic.w	r3, r3, #15
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	6811      	ldr	r1, [r2, #0]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	6892      	ldr	r2, [r2, #8]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	431a      	orrs	r2, r3
 8002a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a98:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a9a:	e047      	b.n	8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab0:	d004      	beq.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a23      	ldr	r2, [pc, #140]	; (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10f      	bne.n	8002adc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002abc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ac0:	f7ff ff1e 	bl	8002900 <LL_ADC_IsEnabled>
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	481f      	ldr	r0, [pc, #124]	; (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ac8:	f7ff ff1a 	bl	8002900 <LL_ADC_IsEnabled>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4323      	orrs	r3, r4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf0c      	ite	eq
 8002ad4:	2301      	moveq	r3, #1
 8002ad6:	2300      	movne	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	e012      	b.n	8002b02 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002adc:	481a      	ldr	r0, [pc, #104]	; (8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ade:	f7ff ff0f 	bl	8002900 <LL_ADC_IsEnabled>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	4819      	ldr	r0, [pc, #100]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ae6:	f7ff ff0b 	bl	8002900 <LL_ADC_IsEnabled>
 8002aea:	4603      	mov	r3, r0
 8002aec:	431c      	orrs	r4, r3
 8002aee:	481a      	ldr	r0, [pc, #104]	; (8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002af0:	f7ff ff06 	bl	8002900 <LL_ADC_IsEnabled>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4323      	orrs	r3, r4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d012      	beq.n	8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b0e:	f023 030f 	bic.w	r3, r3, #15
 8002b12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b14:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b16:	e009      	b.n	8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b2a:	e000      	b.n	8002b2e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3784      	adds	r7, #132	; 0x84
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd90      	pop	{r4, r7, pc}
 8002b42:	bf00      	nop
 8002b44:	50000100 	.word	0x50000100
 8002b48:	50000400 	.word	0x50000400
 8002b4c:	50000500 	.word	0x50000500
 8002b50:	50000300 	.word	0x50000300
 8002b54:	50000700 	.word	0x50000700
 8002b58:	50000600 	.word	0x50000600

08002b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8e:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	60d3      	str	r3, [r2, #12]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <__NVIC_GetPriorityGrouping+0x18>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	f003 0307 	and.w	r3, r3, #7
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	db0b      	blt.n	8002bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	4907      	ldr	r1, [pc, #28]	; (8002bf8 <__NVIC_EnableIRQ+0x38>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	2001      	movs	r0, #1
 8002be2:	fa00 f202 	lsl.w	r2, r0, r2
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000e100 	.word	0xe000e100

08002bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	6039      	str	r1, [r7, #0]
 8002c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	db0a      	blt.n	8002c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	490c      	ldr	r1, [pc, #48]	; (8002c48 <__NVIC_SetPriority+0x4c>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	0112      	lsls	r2, r2, #4
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c24:	e00a      	b.n	8002c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4908      	ldr	r1, [pc, #32]	; (8002c4c <__NVIC_SetPriority+0x50>)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	3b04      	subs	r3, #4
 8002c34:	0112      	lsls	r2, r2, #4
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	440b      	add	r3, r1
 8002c3a:	761a      	strb	r2, [r3, #24]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000e100 	.word	0xe000e100
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	; 0x24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f1c3 0307 	rsb	r3, r3, #7
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	bf28      	it	cs
 8002c6e:	2304      	movcs	r3, #4
 8002c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d902      	bls.n	8002c80 <NVIC_EncodePriority+0x30>
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3b03      	subs	r3, #3
 8002c7e:	e000      	b.n	8002c82 <NVIC_EncodePriority+0x32>
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	401a      	ands	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c98:	f04f 31ff 	mov.w	r1, #4294967295
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	43d9      	mvns	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	4313      	orrs	r3, r2
         );
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc8:	d301      	bcc.n	8002cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00f      	b.n	8002cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <SysTick_Config+0x40>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd6:	210f      	movs	r1, #15
 8002cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cdc:	f7ff ff8e 	bl	8002bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <SysTick_Config+0x40>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <SysTick_Config+0x40>)
 8002ce8:	2207      	movs	r2, #7
 8002cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	e000e010 	.word	0xe000e010

08002cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ff29 	bl	8002b5c <__NVIC_SetPriorityGrouping>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d20:	f7ff ff40 	bl	8002ba4 <__NVIC_GetPriorityGrouping>
 8002d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	6978      	ldr	r0, [r7, #20]
 8002d2c:	f7ff ff90 	bl	8002c50 <NVIC_EncodePriority>
 8002d30:	4602      	mov	r2, r0
 8002d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff5f 	bl	8002bfc <__NVIC_SetPriority>
}
 8002d3e:	bf00      	nop
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff33 	bl	8002bc0 <__NVIC_EnableIRQ>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff ffa4 	bl	8002cb8 <SysTick_Config>
 8002d70:	4603      	mov	r3, r0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e08d      	b.n	8002eaa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_DMA_Init+0x138>)
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d80f      	bhi.n	8002dba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b45      	ldr	r3, [pc, #276]	; (8002eb8 <HAL_DMA_Init+0x13c>)
 8002da2:	4413      	add	r3, r2
 8002da4:	4a45      	ldr	r2, [pc, #276]	; (8002ebc <HAL_DMA_Init+0x140>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	009a      	lsls	r2, r3, #2
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a42      	ldr	r2, [pc, #264]	; (8002ec0 <HAL_DMA_Init+0x144>)
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40
 8002db8:	e00e      	b.n	8002dd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b40      	ldr	r3, [pc, #256]	; (8002ec4 <HAL_DMA_Init+0x148>)
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4a3d      	ldr	r2, [pc, #244]	; (8002ebc <HAL_DMA_Init+0x140>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	009a      	lsls	r2, r3, #2
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a3c      	ldr	r2, [pc, #240]	; (8002ec8 <HAL_DMA_Init+0x14c>)
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f8fe 	bl	800302c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e38:	d102      	bne.n	8002e40 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e54:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d010      	beq.n	8002e80 <HAL_DMA_Init+0x104>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d80c      	bhi.n	8002e80 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f91e 	bl	80030a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	e008      	b.n	8002e92 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40020407 	.word	0x40020407
 8002eb8:	bffdfff8 	.word	0xbffdfff8
 8002ebc:	cccccccd 	.word	0xcccccccd
 8002ec0:	40020000 	.word	0x40020000
 8002ec4:	bffdfbf8 	.word	0xbffdfbf8
 8002ec8:	40020400 	.word	0x40020400

08002ecc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	2204      	movs	r2, #4
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d026      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x7a>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d021      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d107      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0204 	bic.w	r2, r2, #4
 8002f1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	f003 021f 	and.w	r2, r3, #31
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	2104      	movs	r1, #4
 8002f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f32:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d071      	beq.n	8003020 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f44:	e06c      	b.n	8003020 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	f003 031f 	and.w	r3, r3, #31
 8002f4e:	2202      	movs	r2, #2
 8002f50:	409a      	lsls	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d02e      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d029      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10b      	bne.n	8002f8a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 020a 	bic.w	r2, r2, #10
 8002f80:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f003 021f 	and.w	r2, r3, #31
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2102      	movs	r1, #2
 8002f98:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d038      	beq.n	8003020 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002fb6:	e033      	b.n	8003020 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d02a      	beq.n	8003022 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d025      	beq.n	8003022 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 020e 	bic.w	r2, r2, #14
 8002fe4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f003 021f 	and.w	r2, r3, #31
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003014:	2b00      	cmp	r3, #0
 8003016:	d004      	beq.n	8003022 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003020:	bf00      	nop
 8003022:	bf00      	nop
}
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800303c:	429a      	cmp	r2, r3
 800303e:	d802      	bhi.n	8003046 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003040:	4b15      	ldr	r3, [pc, #84]	; (8003098 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	e001      	b.n	800304a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003048:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	3b08      	subs	r3, #8
 8003056:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003064:	089b      	lsrs	r3, r3, #2
 8003066:	009a      	lsls	r2, r3, #2
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	461a      	mov	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003076:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2201      	movs	r2, #1
 8003080:	409a      	lsls	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40020407 	.word	0x40020407
 8003098:	40020800 	.word	0x40020800
 800309c:	40020820 	.word	0x40020820
 80030a0:	cccccccd 	.word	0xcccccccd
 80030a4:	40020880 	.word	0x40020880

080030a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	461a      	mov	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a08      	ldr	r2, [pc, #32]	; (80030ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80030ca:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	2201      	movs	r2, #1
 80030d6:	409a      	lsls	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	1000823f 	.word	0x1000823f
 80030ec:	40020940 	.word	0x40020940

080030f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e147      	b.n	8003392 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fd fff8 	bl	800110c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0210 	bic.w	r2, r2, #16
 800312a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800312c:	f7fe fc0a 	bl	8001944 <HAL_GetTick>
 8003130:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003132:	e012      	b.n	800315a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003134:	f7fe fc06 	bl	8001944 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b0a      	cmp	r3, #10
 8003140:	d90b      	bls.n	800315a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003146:	f043 0201 	orr.w	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2203      	movs	r2, #3
 8003152:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e11b      	b.n	8003392 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b08      	cmp	r3, #8
 8003166:	d0e5      	beq.n	8003134 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003178:	f7fe fbe4 	bl	8001944 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800317e:	e012      	b.n	80031a6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003180:	f7fe fbe0 	bl	8001944 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b0a      	cmp	r3, #10
 800318c:	d90b      	bls.n	80031a6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003192:	f043 0201 	orr.w	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2203      	movs	r2, #3
 800319e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0f5      	b.n	8003392 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0e5      	beq.n	8003180 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0202 	orr.w	r2, r2, #2
 80031c2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a74      	ldr	r2, [pc, #464]	; (800339c <HAL_FDCAN_Init+0x2ac>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d103      	bne.n	80031d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80031ce:	4a74      	ldr	r2, [pc, #464]	; (80033a0 <HAL_FDCAN_Init+0x2b0>)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	7c1b      	ldrb	r3, [r3, #16]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d108      	bne.n	80031f0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699a      	ldr	r2, [r3, #24]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ec:	619a      	str	r2, [r3, #24]
 80031ee:	e007      	b.n	8003200 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031fe:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7c5b      	ldrb	r3, [r3, #17]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d108      	bne.n	800321a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003216:	619a      	str	r2, [r3, #24]
 8003218:	e007      	b.n	800322a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699a      	ldr	r2, [r3, #24]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003228:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7c9b      	ldrb	r3, [r3, #18]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d108      	bne.n	8003244 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699a      	ldr	r2, [r3, #24]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003240:	619a      	str	r2, [r3, #24]
 8003242:	e007      	b.n	8003254 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003252:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003278:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0210 	bic.w	r2, r2, #16
 8003288:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d108      	bne.n	80032a4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699a      	ldr	r2, [r3, #24]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0204 	orr.w	r2, r2, #4
 80032a0:	619a      	str	r2, [r3, #24]
 80032a2:	e02c      	b.n	80032fe <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d028      	beq.n	80032fe <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d01c      	beq.n	80032ee <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032c2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0210 	orr.w	r2, r2, #16
 80032d2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d110      	bne.n	80032fe <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0220 	orr.w	r2, r2, #32
 80032ea:	619a      	str	r2, [r3, #24]
 80032ec:	e007      	b.n	80032fe <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0220 	orr.w	r2, r2, #32
 80032fc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	3b01      	subs	r3, #1
 8003304:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	3b01      	subs	r3, #1
 800330c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800330e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003316:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	3b01      	subs	r3, #1
 8003320:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003326:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003328:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003332:	d115      	bne.n	8003360 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	3b01      	subs	r3, #1
 8003340:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003342:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	3b01      	subs	r3, #1
 800334a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800334c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	3b01      	subs	r3, #1
 8003356:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800335c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800335e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f814 	bl	80033a4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40006400 	.word	0x40006400
 80033a0:	40006500 	.word	0x40006500

080033a4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80033ac:	4b30      	ldr	r3, [pc, #192]	; (8003470 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80033ae:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a2f      	ldr	r2, [pc, #188]	; (8003474 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d103      	bne.n	80033c2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80033c0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2c      	ldr	r2, [pc, #176]	; (8003478 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d103      	bne.n	80033d4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80033d2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	041a      	lsls	r2, r3, #16
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003408:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	061a      	lsls	r2, r3, #24
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e005      	b.n	8003456 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3304      	adds	r3, #4
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	429a      	cmp	r2, r3
 8003460:	d3f3      	bcc.n	800344a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8003462:	bf00      	nop
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	4000a400 	.word	0x4000a400
 8003474:	40006800 	.word	0x40006800
 8003478:	40006c00 	.word	0x40006c00

0800347c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800348a:	e15a      	b.n	8003742 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	2101      	movs	r1, #1
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	4013      	ands	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 814c 	beq.w	800373c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d005      	beq.n	80034bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d130      	bne.n	800351e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2203      	movs	r2, #3
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034f2:	2201      	movs	r2, #1
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f003 0201 	and.w	r2, r3, #1
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b03      	cmp	r3, #3
 8003528:	d017      	beq.n	800355a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	2203      	movs	r2, #3
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d123      	bne.n	80035ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	08da      	lsrs	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3208      	adds	r2, #8
 800356e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003572:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	220f      	movs	r2, #15
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	08da      	lsrs	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3208      	adds	r2, #8
 80035a8:	6939      	ldr	r1, [r7, #16]
 80035aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	2203      	movs	r2, #3
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 0203 	and.w	r2, r3, #3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 80a6 	beq.w	800373c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f0:	4b5b      	ldr	r3, [pc, #364]	; (8003760 <HAL_GPIO_Init+0x2e4>)
 80035f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f4:	4a5a      	ldr	r2, [pc, #360]	; (8003760 <HAL_GPIO_Init+0x2e4>)
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	6613      	str	r3, [r2, #96]	; 0x60
 80035fc:	4b58      	ldr	r3, [pc, #352]	; (8003760 <HAL_GPIO_Init+0x2e4>)
 80035fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003608:	4a56      	ldr	r2, [pc, #344]	; (8003764 <HAL_GPIO_Init+0x2e8>)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	089b      	lsrs	r3, r3, #2
 800360e:	3302      	adds	r3, #2
 8003610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003614:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	220f      	movs	r2, #15
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003632:	d01f      	beq.n	8003674 <HAL_GPIO_Init+0x1f8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a4c      	ldr	r2, [pc, #304]	; (8003768 <HAL_GPIO_Init+0x2ec>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d019      	beq.n	8003670 <HAL_GPIO_Init+0x1f4>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a4b      	ldr	r2, [pc, #300]	; (800376c <HAL_GPIO_Init+0x2f0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d013      	beq.n	800366c <HAL_GPIO_Init+0x1f0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a4a      	ldr	r2, [pc, #296]	; (8003770 <HAL_GPIO_Init+0x2f4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00d      	beq.n	8003668 <HAL_GPIO_Init+0x1ec>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a49      	ldr	r2, [pc, #292]	; (8003774 <HAL_GPIO_Init+0x2f8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d007      	beq.n	8003664 <HAL_GPIO_Init+0x1e8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a48      	ldr	r2, [pc, #288]	; (8003778 <HAL_GPIO_Init+0x2fc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d101      	bne.n	8003660 <HAL_GPIO_Init+0x1e4>
 800365c:	2305      	movs	r3, #5
 800365e:	e00a      	b.n	8003676 <HAL_GPIO_Init+0x1fa>
 8003660:	2306      	movs	r3, #6
 8003662:	e008      	b.n	8003676 <HAL_GPIO_Init+0x1fa>
 8003664:	2304      	movs	r3, #4
 8003666:	e006      	b.n	8003676 <HAL_GPIO_Init+0x1fa>
 8003668:	2303      	movs	r3, #3
 800366a:	e004      	b.n	8003676 <HAL_GPIO_Init+0x1fa>
 800366c:	2302      	movs	r3, #2
 800366e:	e002      	b.n	8003676 <HAL_GPIO_Init+0x1fa>
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <HAL_GPIO_Init+0x1fa>
 8003674:	2300      	movs	r3, #0
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	f002 0203 	and.w	r2, r2, #3
 800367c:	0092      	lsls	r2, r2, #2
 800367e:	4093      	lsls	r3, r2
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003686:	4937      	ldr	r1, [pc, #220]	; (8003764 <HAL_GPIO_Init+0x2e8>)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	3302      	adds	r3, #2
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003694:	4b39      	ldr	r3, [pc, #228]	; (800377c <HAL_GPIO_Init+0x300>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	43db      	mvns	r3, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036b8:	4a30      	ldr	r2, [pc, #192]	; (800377c <HAL_GPIO_Init+0x300>)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036be:	4b2f      	ldr	r3, [pc, #188]	; (800377c <HAL_GPIO_Init+0x300>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4013      	ands	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036e2:	4a26      	ldr	r2, [pc, #152]	; (800377c <HAL_GPIO_Init+0x300>)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80036e8:	4b24      	ldr	r3, [pc, #144]	; (800377c <HAL_GPIO_Init+0x300>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4013      	ands	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800370c:	4a1b      	ldr	r2, [pc, #108]	; (800377c <HAL_GPIO_Init+0x300>)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003712:	4b1a      	ldr	r3, [pc, #104]	; (800377c <HAL_GPIO_Init+0x300>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	43db      	mvns	r3, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003736:	4a11      	ldr	r2, [pc, #68]	; (800377c <HAL_GPIO_Init+0x300>)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3301      	adds	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	f47f ae9d 	bne.w	800348c <HAL_GPIO_Init+0x10>
  }
}
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	371c      	adds	r7, #28
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	40021000 	.word	0x40021000
 8003764:	40010000 	.word	0x40010000
 8003768:	48000400 	.word	0x48000400
 800376c:	48000800 	.word	0x48000800
 8003770:	48000c00 	.word	0x48000c00
 8003774:	48001000 	.word	0x48001000
 8003778:	48001400 	.word	0x48001400
 800377c:	40010400 	.word	0x40010400

08003780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	807b      	strh	r3, [r7, #2]
 800378c:	4613      	mov	r3, r2
 800378e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003790:	787b      	ldrb	r3, [r7, #1]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003796:	887a      	ldrh	r2, [r7, #2]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800379c:	e002      	b.n	80037a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800379e:	887a      	ldrh	r2, [r7, #2]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e08d      	b.n	80038de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd fd98 	bl	800130c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	; 0x24
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003800:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003810:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d107      	bne.n	800382a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	e006      	b.n	8003838 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003836:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d108      	bne.n	8003852 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800384e:	605a      	str	r2, [r3, #4]
 8003850:	e007      	b.n	8003862 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003860:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003874:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003884:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69d9      	ldr	r1, [r3, #28]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1a      	ldr	r2, [r3, #32]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d138      	bne.n	800396e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003906:	2302      	movs	r3, #2
 8003908:	e032      	b.n	8003970 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2224      	movs	r2, #36	; 0x24
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003938:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6819      	ldr	r1, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800396e:	2302      	movs	r3, #2
  }
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b20      	cmp	r3, #32
 8003990:	d139      	bne.n	8003a06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800399c:	2302      	movs	r3, #2
 800399e:	e033      	b.n	8003a08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	; 0x24
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0201 	bic.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0201 	orr.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e000      	b.n	8003a08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a06:	2302      	movs	r3, #2
  }
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e041      	b.n	8003aaa <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f245 5255 	movw	r2, #21845	; 0x5555
 8003a38:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6852      	ldr	r2, [r2, #4]
 8003a42:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6892      	ldr	r2, [r2, #8]
 8003a4c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003a4e:	f7fd ff79 	bl	8001944 <HAL_GetTick>
 8003a52:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003a54:	e00f      	b.n	8003a76 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003a56:	f7fd ff75 	bl	8001944 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b31      	cmp	r3, #49	; 0x31
 8003a62:	d908      	bls.n	8003a76 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e019      	b.n	8003aaa <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e8      	bne.n	8003a56 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d005      	beq.n	8003a9e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	68d2      	ldr	r2, [r2, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
 8003a9c:	e004      	b.n	8003aa8 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0c0      	b.n	8003c46 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7fd fe2b 	bl	8001734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f002 f83e 	bl	8005b6c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]
 8003af4:	e03e      	b.n	8003b74 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003af6:	7bfa      	ldrb	r2, [r7, #15]
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	440b      	add	r3, r1
 8003b04:	3311      	adds	r3, #17
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	440b      	add	r3, r1
 8003b18:	3310      	adds	r3, #16
 8003b1a:	7bfa      	ldrb	r2, [r7, #15]
 8003b1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b1e:	7bfa      	ldrb	r2, [r7, #15]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	440b      	add	r3, r1
 8003b2c:	3313      	adds	r3, #19
 8003b2e:	2200      	movs	r2, #0
 8003b30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	440b      	add	r3, r1
 8003b40:	3320      	adds	r3, #32
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	440b      	add	r3, r1
 8003b54:	3324      	adds	r3, #36	; 0x24
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	440b      	add	r3, r1
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	3301      	adds	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	791b      	ldrb	r3, [r3, #4]
 8003b78:	7bfa      	ldrb	r2, [r7, #15]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d3bb      	bcc.n	8003af6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
 8003b82:	e044      	b.n	8003c0e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	440b      	add	r3, r1
 8003b92:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003b96:	2200      	movs	r2, #0
 8003b98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003bac:	7bfa      	ldrb	r2, [r7, #15]
 8003bae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	440b      	add	r3, r1
 8003bbe:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bf2:	7bfa      	ldrb	r2, [r7, #15]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	440b      	add	r3, r1
 8003c00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	791b      	ldrb	r3, [r3, #4]
 8003c12:	7bfa      	ldrb	r2, [r7, #15]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d3b5      	bcc.n	8003b84 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003c24:	f001 ffbd 	bl	8005ba2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	7a9b      	ldrb	r3, [r3, #10]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d102      	bne.n	8003c44 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f805 	bl	8003c4e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f043 0302 	orr.w	r3, r3, #2
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d141      	bne.n	8003d36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cb2:	4b4b      	ldr	r3, [pc, #300]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cbe:	d131      	bne.n	8003d24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc0:	4b47      	ldr	r3, [pc, #284]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc6:	4a46      	ldr	r2, [pc, #280]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ccc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd0:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cd8:	4a41      	ldr	r2, [pc, #260]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ce0:	4b40      	ldr	r3, [pc, #256]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2232      	movs	r2, #50	; 0x32
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	4a3f      	ldr	r2, [pc, #252]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	0c9b      	lsrs	r3, r3, #18
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf6:	e002      	b.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cfe:	4b38      	ldr	r3, [pc, #224]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0a:	d102      	bne.n	8003d12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f2      	bne.n	8003cf8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d12:	4b33      	ldr	r3, [pc, #204]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1e:	d158      	bne.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e057      	b.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d24:	4b2e      	ldr	r3, [pc, #184]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2a:	4a2d      	ldr	r2, [pc, #180]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d34:	e04d      	b.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3c:	d141      	bne.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d3e:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4a:	d131      	bne.n	8003db0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d4c:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d52:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d5c:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d64:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2232      	movs	r2, #50	; 0x32
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	0c9b      	lsrs	r3, r3, #18
 8003d7e:	3301      	adds	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d82:	e002      	b.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d8a:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d96:	d102      	bne.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f2      	bne.n	8003d84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d9e:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003daa:	d112      	bne.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e011      	b.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db6:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dc0:	e007      	b.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dca:	4a05      	ldr	r2, [pc, #20]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40007000 	.word	0x40007000
 8003de4:	20000000 	.word	0x20000000
 8003de8:	431bde83 	.word	0x431bde83

08003dec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003df6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dfa:	6093      	str	r3, [r2, #8]
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40007000 	.word	0x40007000

08003e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e2fe      	b.n	800441c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d075      	beq.n	8003f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e2a:	4b97      	ldr	r3, [pc, #604]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e34:	4b94      	ldr	r3, [pc, #592]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b0c      	cmp	r3, #12
 8003e42:	d102      	bne.n	8003e4a <HAL_RCC_OscConfig+0x3e>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d002      	beq.n	8003e50 <HAL_RCC_OscConfig+0x44>
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d10b      	bne.n	8003e68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	4b8d      	ldr	r3, [pc, #564]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d05b      	beq.n	8003f14 <HAL_RCC_OscConfig+0x108>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d157      	bne.n	8003f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e2d9      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e70:	d106      	bne.n	8003e80 <HAL_RCC_OscConfig+0x74>
 8003e72:	4b85      	ldr	r3, [pc, #532]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a84      	ldr	r2, [pc, #528]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e01d      	b.n	8003ebc <HAL_RCC_OscConfig+0xb0>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x98>
 8003e8a:	4b7f      	ldr	r3, [pc, #508]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a7e      	ldr	r2, [pc, #504]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4b7c      	ldr	r3, [pc, #496]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a7b      	ldr	r2, [pc, #492]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e00b      	b.n	8003ebc <HAL_RCC_OscConfig+0xb0>
 8003ea4:	4b78      	ldr	r3, [pc, #480]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a77      	ldr	r2, [pc, #476]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	4b75      	ldr	r3, [pc, #468]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a74      	ldr	r2, [pc, #464]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d013      	beq.n	8003eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fd fd3e 	bl	8001944 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7fd fd3a 	bl	8001944 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	; 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e29e      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ede:	4b6a      	ldr	r3, [pc, #424]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0xc0>
 8003eea:	e014      	b.n	8003f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fd fd2a 	bl	8001944 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef4:	f7fd fd26 	bl	8001944 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	; 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e28a      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f06:	4b60      	ldr	r3, [pc, #384]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xe8>
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d075      	beq.n	800400e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f22:	4b59      	ldr	r3, [pc, #356]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f2c:	4b56      	ldr	r3, [pc, #344]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b0c      	cmp	r3, #12
 8003f3a:	d102      	bne.n	8003f42 <HAL_RCC_OscConfig+0x136>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d002      	beq.n	8003f48 <HAL_RCC_OscConfig+0x13c>
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d11f      	bne.n	8003f88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f48:	4b4f      	ldr	r3, [pc, #316]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_OscConfig+0x154>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e25d      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f60:	4b49      	ldr	r3, [pc, #292]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	4946      	ldr	r1, [pc, #280]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f74:	4b45      	ldr	r3, [pc, #276]	; (800408c <HAL_RCC_OscConfig+0x280>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fd fc97 	bl	80018ac <HAL_InitTick>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d043      	beq.n	800400c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e249      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d023      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f90:	4b3d      	ldr	r3, [pc, #244]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a3c      	ldr	r2, [pc, #240]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fd fcd2 	bl	8001944 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fd fcce 	bl	8001944 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e232      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb6:	4b34      	ldr	r3, [pc, #208]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc2:	4b31      	ldr	r3, [pc, #196]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	061b      	lsls	r3, r3, #24
 8003fd0:	492d      	ldr	r1, [pc, #180]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]
 8003fd6:	e01a      	b.n	800400e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd8:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a2a      	ldr	r2, [pc, #168]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fd fcae 	bl	8001944 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fec:	f7fd fcaa 	bl	8001944 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e20e      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ffe:	4b22      	ldr	r3, [pc, #136]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x1e0>
 800400a:	e000      	b.n	800400e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800400c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d041      	beq.n	800409e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01c      	beq.n	800405c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004022:	4b19      	ldr	r3, [pc, #100]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8004024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004028:	4a17      	ldr	r2, [pc, #92]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004032:	f7fd fc87 	bl	8001944 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403a:	f7fd fc83 	bl	8001944 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e1e7      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 800404e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0ef      	beq.n	800403a <HAL_RCC_OscConfig+0x22e>
 800405a:	e020      	b.n	800409e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 800405e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fd fc6a 	bl	8001944 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004072:	e00d      	b.n	8004090 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004074:	f7fd fc66 	bl	8001944 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d906      	bls.n	8004090 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e1ca      	b.n	800441c <HAL_RCC_OscConfig+0x610>
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004090:	4b8c      	ldr	r3, [pc, #560]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1ea      	bne.n	8004074 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80a6 	beq.w	80041f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ac:	2300      	movs	r3, #0
 80040ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040b0:	4b84      	ldr	r3, [pc, #528]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_OscConfig+0x2b4>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_RCC_OscConfig+0x2b6>
 80040c0:	2300      	movs	r3, #0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	4b7f      	ldr	r3, [pc, #508]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	4a7e      	ldr	r2, [pc, #504]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6593      	str	r3, [r2, #88]	; 0x58
 80040d2:	4b7c      	ldr	r3, [pc, #496]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040de:	2301      	movs	r3, #1
 80040e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e2:	4b79      	ldr	r3, [pc, #484]	; (80042c8 <HAL_RCC_OscConfig+0x4bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d118      	bne.n	8004120 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ee:	4b76      	ldr	r3, [pc, #472]	; (80042c8 <HAL_RCC_OscConfig+0x4bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a75      	ldr	r2, [pc, #468]	; (80042c8 <HAL_RCC_OscConfig+0x4bc>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fa:	f7fd fc23 	bl	8001944 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004102:	f7fd fc1f 	bl	8001944 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e183      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004114:	4b6c      	ldr	r3, [pc, #432]	; (80042c8 <HAL_RCC_OscConfig+0x4bc>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d108      	bne.n	800413a <HAL_RCC_OscConfig+0x32e>
 8004128:	4b66      	ldr	r3, [pc, #408]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	4a65      	ldr	r2, [pc, #404]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004138:	e024      	b.n	8004184 <HAL_RCC_OscConfig+0x378>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b05      	cmp	r3, #5
 8004140:	d110      	bne.n	8004164 <HAL_RCC_OscConfig+0x358>
 8004142:	4b60      	ldr	r3, [pc, #384]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	4a5e      	ldr	r2, [pc, #376]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800414a:	f043 0304 	orr.w	r3, r3, #4
 800414e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004152:	4b5c      	ldr	r3, [pc, #368]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004158:	4a5a      	ldr	r2, [pc, #360]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004162:	e00f      	b.n	8004184 <HAL_RCC_OscConfig+0x378>
 8004164:	4b57      	ldr	r3, [pc, #348]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	4a56      	ldr	r2, [pc, #344]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004174:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	4a52      	ldr	r2, [pc, #328]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800417c:	f023 0304 	bic.w	r3, r3, #4
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d016      	beq.n	80041ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7fd fbda 	bl	8001944 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004192:	e00a      	b.n	80041aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004194:	f7fd fbd6 	bl	8001944 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e138      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041aa:	4b46      	ldr	r3, [pc, #280]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ed      	beq.n	8004194 <HAL_RCC_OscConfig+0x388>
 80041b8:	e015      	b.n	80041e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fd fbc3 	bl	8001944 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fd fbbf 	bl	8001944 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e121      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041d8:	4b3a      	ldr	r3, [pc, #232]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1ed      	bne.n	80041c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041e6:	7ffb      	ldrb	r3, [r7, #31]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d105      	bne.n	80041f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ec:	4b35      	ldr	r3, [pc, #212]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	4a34      	ldr	r2, [pc, #208]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80041f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d03c      	beq.n	800427e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01c      	beq.n	8004246 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800420c:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800420e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004212:	4a2c      	ldr	r2, [pc, #176]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421c:	f7fd fb92 	bl	8001944 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004224:	f7fd fb8e 	bl	8001944 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e0f2      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004236:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004238:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ef      	beq.n	8004224 <HAL_RCC_OscConfig+0x418>
 8004244:	e01b      	b.n	800427e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004246:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004248:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800424c:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004256:	f7fd fb75 	bl	8001944 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800425e:	f7fd fb71 	bl	8001944 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e0d5      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004270:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1ef      	bne.n	800425e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80c9 	beq.w	800441a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004288:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b0c      	cmp	r3, #12
 8004292:	f000 8083 	beq.w	800439c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d15e      	bne.n	800435c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80042a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fd fb4b 	bl	8001944 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b0:	e00c      	b.n	80042cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fd fb47 	bl	8001944 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d905      	bls.n	80042cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e0ab      	b.n	800441c <HAL_RCC_OscConfig+0x610>
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042cc:	4b55      	ldr	r3, [pc, #340]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ec      	bne.n	80042b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042d8:	4b52      	ldr	r3, [pc, #328]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	4b52      	ldr	r3, [pc, #328]	; (8004428 <HAL_RCC_OscConfig+0x61c>)
 80042de:	4013      	ands	r3, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6a11      	ldr	r1, [r2, #32]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042e8:	3a01      	subs	r2, #1
 80042ea:	0112      	lsls	r2, r2, #4
 80042ec:	4311      	orrs	r1, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042f2:	0212      	lsls	r2, r2, #8
 80042f4:	4311      	orrs	r1, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042fa:	0852      	lsrs	r2, r2, #1
 80042fc:	3a01      	subs	r2, #1
 80042fe:	0552      	lsls	r2, r2, #21
 8004300:	4311      	orrs	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004306:	0852      	lsrs	r2, r2, #1
 8004308:	3a01      	subs	r2, #1
 800430a:	0652      	lsls	r2, r2, #25
 800430c:	4311      	orrs	r1, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004312:	06d2      	lsls	r2, r2, #27
 8004314:	430a      	orrs	r2, r1
 8004316:	4943      	ldr	r1, [pc, #268]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 8004318:	4313      	orrs	r3, r2
 800431a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800431c:	4b41      	ldr	r3, [pc, #260]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a40      	ldr	r2, [pc, #256]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004326:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004328:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a3d      	ldr	r2, [pc, #244]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 800432e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004332:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fd fb06 	bl	8001944 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433c:	f7fd fb02 	bl	8001944 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e066      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434e:	4b35      	ldr	r3, [pc, #212]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x530>
 800435a:	e05e      	b.n	800441a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435c:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a30      	ldr	r2, [pc, #192]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 8004362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fd faec 	bl	8001944 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fd fae8 	bl	8001944 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e04c      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004382:	4b28      	ldr	r3, [pc, #160]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800438e:	4b25      	ldr	r3, [pc, #148]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	4924      	ldr	r1, [pc, #144]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 8004394:	4b25      	ldr	r3, [pc, #148]	; (800442c <HAL_RCC_OscConfig+0x620>)
 8004396:	4013      	ands	r3, r2
 8004398:	60cb      	str	r3, [r1, #12]
 800439a:	e03e      	b.n	800441a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e039      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043a8:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 0203 	and.w	r2, r3, #3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d12c      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	3b01      	subs	r3, #1
 80043c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d123      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d11b      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d113      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	3b01      	subs	r3, #1
 80043fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043fe:	429a      	cmp	r2, r3
 8004400:	d109      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	3b01      	subs	r3, #1
 8004410:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	019f800c 	.word	0x019f800c
 800442c:	feeefffc 	.word	0xfeeefffc

08004430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e11e      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b91      	ldr	r3, [pc, #580]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d910      	bls.n	8004478 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b8e      	ldr	r3, [pc, #568]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 020f 	bic.w	r2, r3, #15
 800445e:	498c      	ldr	r1, [pc, #560]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b8a      	ldr	r3, [pc, #552]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e106      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d073      	beq.n	800456c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d129      	bne.n	80044e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448c:	4b81      	ldr	r3, [pc, #516]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0f4      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800449c:	f000 f99e 	bl	80047dc <RCC_GetSysClockFreqFromPLLSource>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4a7c      	ldr	r2, [pc, #496]	; (8004698 <HAL_RCC_ClockConfig+0x268>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d93f      	bls.n	800452a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044aa:	4b7a      	ldr	r3, [pc, #488]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d033      	beq.n	800452a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d12f      	bne.n	800452a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044ca:	4b72      	ldr	r3, [pc, #456]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044d2:	4a70      	ldr	r2, [pc, #448]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e024      	b.n	800452a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e8:	4b6a      	ldr	r3, [pc, #424]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0c6      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f8:	4b66      	ldr	r3, [pc, #408]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0be      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004508:	f000 f8ce 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 800450c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4a61      	ldr	r2, [pc, #388]	; (8004698 <HAL_RCC_ClockConfig+0x268>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d909      	bls.n	800452a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004516:	4b5f      	ldr	r3, [pc, #380]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800451e:	4a5d      	ldr	r2, [pc, #372]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004524:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800452a:	4b5a      	ldr	r3, [pc, #360]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f023 0203 	bic.w	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4957      	ldr	r1, [pc, #348]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004538:	4313      	orrs	r3, r2
 800453a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800453c:	f7fd fa02 	bl	8001944 <HAL_GetTick>
 8004540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	e00a      	b.n	800455a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004544:	f7fd f9fe 	bl	8001944 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e095      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455a:	4b4e      	ldr	r3, [pc, #312]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 020c 	and.w	r2, r3, #12
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	429a      	cmp	r2, r3
 800456a:	d1eb      	bne.n	8004544 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d023      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004584:	4b43      	ldr	r3, [pc, #268]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4a42      	ldr	r2, [pc, #264]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 800458a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800458e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800459c:	4b3d      	ldr	r3, [pc, #244]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045a4:	4a3b      	ldr	r2, [pc, #236]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ac:	4b39      	ldr	r3, [pc, #228]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4936      	ldr	r1, [pc, #216]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
 80045be:	e008      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d105      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045c6:	4b33      	ldr	r3, [pc, #204]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	4a32      	ldr	r2, [pc, #200]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045d2:	4b2f      	ldr	r3, [pc, #188]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d21d      	bcs.n	800461c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e0:	4b2b      	ldr	r3, [pc, #172]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f023 020f 	bic.w	r2, r3, #15
 80045e8:	4929      	ldr	r1, [pc, #164]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045f0:	f7fd f9a8 	bl	8001944 <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	e00a      	b.n	800460e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f8:	f7fd f9a4 	bl	8001944 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e03b      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b20      	ldr	r3, [pc, #128]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d1ed      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004628:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4917      	ldr	r1, [pc, #92]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004646:	4b13      	ldr	r3, [pc, #76]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	490f      	ldr	r1, [pc, #60]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800465a:	f000 f825 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 800465e:	4602      	mov	r2, r0
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	490c      	ldr	r1, [pc, #48]	; (800469c <HAL_RCC_ClockConfig+0x26c>)
 800466c:	5ccb      	ldrb	r3, [r1, r3]
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	fa22 f303 	lsr.w	r3, r2, r3
 8004676:	4a0a      	ldr	r2, [pc, #40]	; (80046a0 <HAL_RCC_ClockConfig+0x270>)
 8004678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800467a:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <HAL_RCC_ClockConfig+0x274>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fd f914 	bl	80018ac <HAL_InitTick>
 8004684:	4603      	mov	r3, r0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40022000 	.word	0x40022000
 8004694:	40021000 	.word	0x40021000
 8004698:	04c4b400 	.word	0x04c4b400
 800469c:	08005c50 	.word	0x08005c50
 80046a0:	20000000 	.word	0x20000000
 80046a4:	20000004 	.word	0x20000004

080046a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046ae:	4b2c      	ldr	r3, [pc, #176]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d102      	bne.n	80046c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ba:	4b2a      	ldr	r3, [pc, #168]	; (8004764 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	e047      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046c0:	4b27      	ldr	r3, [pc, #156]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d102      	bne.n	80046d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046cc:	4b26      	ldr	r3, [pc, #152]	; (8004768 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	e03e      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80046d2:	4b23      	ldr	r3, [pc, #140]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b0c      	cmp	r3, #12
 80046dc:	d136      	bne.n	800474c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046de:	4b20      	ldr	r3, [pc, #128]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e8:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	3301      	adds	r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d10c      	bne.n	8004716 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046fc:	4a1a      	ldr	r2, [pc, #104]	; (8004768 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	4a16      	ldr	r2, [pc, #88]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004706:	68d2      	ldr	r2, [r2, #12]
 8004708:	0a12      	lsrs	r2, r2, #8
 800470a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	617b      	str	r3, [r7, #20]
      break;
 8004714:	e00c      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004716:	4a13      	ldr	r2, [pc, #76]	; (8004764 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	4a10      	ldr	r2, [pc, #64]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004720:	68d2      	ldr	r2, [r2, #12]
 8004722:	0a12      	lsrs	r2, r2, #8
 8004724:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004728:	fb02 f303 	mul.w	r3, r2, r3
 800472c:	617b      	str	r3, [r7, #20]
      break;
 800472e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	0e5b      	lsrs	r3, r3, #25
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	3301      	adds	r3, #1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	e001      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004750:	693b      	ldr	r3, [r7, #16]
}
 8004752:	4618      	mov	r0, r3
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000
 8004764:	00f42400 	.word	0x00f42400
 8004768:	007a1200 	.word	0x007a1200

0800476c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004770:	4b03      	ldr	r3, [pc, #12]	; (8004780 <HAL_RCC_GetHCLKFreq+0x14>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000000 	.word	0x20000000

08004784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004788:	f7ff fff0 	bl	800476c <HAL_RCC_GetHCLKFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4904      	ldr	r1, [pc, #16]	; (80047ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800479a:	5ccb      	ldrb	r3, [r1, r3]
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40021000 	.word	0x40021000
 80047ac:	08005c60 	.word	0x08005c60

080047b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047b4:	f7ff ffda 	bl	800476c <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0adb      	lsrs	r3, r3, #11
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4904      	ldr	r1, [pc, #16]	; (80047d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	08005c60 	.word	0x08005c60

080047dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	3301      	adds	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d10c      	bne.n	800481a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004800:	4a17      	ldr	r2, [pc, #92]	; (8004860 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	4a14      	ldr	r2, [pc, #80]	; (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800480a:	68d2      	ldr	r2, [r2, #12]
 800480c:	0a12      	lsrs	r2, r2, #8
 800480e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	617b      	str	r3, [r7, #20]
    break;
 8004818:	e00c      	b.n	8004834 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800481a:	4a12      	ldr	r2, [pc, #72]	; (8004864 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004822:	4a0e      	ldr	r2, [pc, #56]	; (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004824:	68d2      	ldr	r2, [r2, #12]
 8004826:	0a12      	lsrs	r2, r2, #8
 8004828:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800482c:	fb02 f303 	mul.w	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]
    break;
 8004832:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	0e5b      	lsrs	r3, r3, #25
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	3301      	adds	r3, #1
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	fbb2 f3f3 	udiv	r3, r2, r3
 800484c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800484e:	687b      	ldr	r3, [r7, #4]
}
 8004850:	4618      	mov	r0, r3
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	40021000 	.word	0x40021000
 8004860:	007a1200 	.word	0x007a1200
 8004864:	00f42400 	.word	0x00f42400

08004868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004870:	2300      	movs	r3, #0
 8004872:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004874:	2300      	movs	r3, #0
 8004876:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8098 	beq.w	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004886:	2300      	movs	r3, #0
 8004888:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488a:	4b43      	ldr	r3, [pc, #268]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10d      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004896:	4b40      	ldr	r3, [pc, #256]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489a:	4a3f      	ldr	r2, [pc, #252]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6593      	str	r3, [r2, #88]	; 0x58
 80048a2:	4b3d      	ldr	r3, [pc, #244]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ae:	2301      	movs	r3, #1
 80048b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048b2:	4b3a      	ldr	r3, [pc, #232]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a39      	ldr	r2, [pc, #228]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048be:	f7fd f841 	bl	8001944 <HAL_GetTick>
 80048c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048c4:	e009      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c6:	f7fd f83d 	bl	8001944 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d902      	bls.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	74fb      	strb	r3, [r7, #19]
        break;
 80048d8:	e005      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048da:	4b30      	ldr	r3, [pc, #192]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0ef      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d159      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d01e      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	429a      	cmp	r2, r3
 8004906:	d019      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004908:	4b23      	ldr	r3, [pc, #140]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004912:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004914:	4b20      	ldr	r3, [pc, #128]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491a:	4a1f      	ldr	r2, [pc, #124]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004924:	4b1c      	ldr	r3, [pc, #112]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	4a1b      	ldr	r2, [pc, #108]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800492c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004934:	4a18      	ldr	r2, [pc, #96]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d016      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fc fffd 	bl	8001944 <HAL_GetTick>
 800494a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800494c:	e00b      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494e:	f7fc fff9 	bl	8001944 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	f241 3288 	movw	r2, #5000	; 0x1388
 800495c:	4293      	cmp	r3, r2
 800495e:	d902      	bls.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	74fb      	strb	r3, [r7, #19]
            break;
 8004964:	e006      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004966:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ec      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004974:	7cfb      	ldrb	r3, [r7, #19]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800497a:	4b07      	ldr	r3, [pc, #28]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004988:	4903      	ldr	r1, [pc, #12]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004990:	e008      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004992:	7cfb      	ldrb	r3, [r7, #19]
 8004994:	74bb      	strb	r3, [r7, #18]
 8004996:	e005      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004998:	40021000 	.word	0x40021000
 800499c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a4:	7c7b      	ldrb	r3, [r7, #17]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d105      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049aa:	4ba7      	ldr	r3, [pc, #668]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ae:	4aa6      	ldr	r2, [pc, #664]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049c2:	4ba1      	ldr	r3, [pc, #644]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	f023 0203 	bic.w	r2, r3, #3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	499d      	ldr	r1, [pc, #628]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049e4:	4b98      	ldr	r3, [pc, #608]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ea:	f023 020c 	bic.w	r2, r3, #12
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4995      	ldr	r1, [pc, #596]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a06:	4b90      	ldr	r3, [pc, #576]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	498c      	ldr	r1, [pc, #560]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a28:	4b87      	ldr	r3, [pc, #540]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	4984      	ldr	r1, [pc, #528]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a4a:	4b7f      	ldr	r3, [pc, #508]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	497b      	ldr	r1, [pc, #492]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a6c:	4b76      	ldr	r3, [pc, #472]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	4973      	ldr	r1, [pc, #460]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a8e:	4b6e      	ldr	r3, [pc, #440]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	496a      	ldr	r1, [pc, #424]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ab0:	4b65      	ldr	r3, [pc, #404]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	4962      	ldr	r1, [pc, #392]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ad2:	4b5d      	ldr	r3, [pc, #372]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	4959      	ldr	r1, [pc, #356]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004af4:	4b54      	ldr	r3, [pc, #336]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	4951      	ldr	r1, [pc, #324]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b16:	4b4c      	ldr	r3, [pc, #304]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	4948      	ldr	r1, [pc, #288]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d015      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b38:	4b43      	ldr	r3, [pc, #268]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	4940      	ldr	r1, [pc, #256]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b56:	d105      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b58:	4b3b      	ldr	r3, [pc, #236]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4a3a      	ldr	r2, [pc, #232]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b70:	4b35      	ldr	r3, [pc, #212]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7e:	4932      	ldr	r1, [pc, #200]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b8e:	d105      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b90:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4a2c      	ldr	r2, [pc, #176]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b9a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ba8:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	4924      	ldr	r1, [pc, #144]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bc6:	d105      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc8:	4b1f      	ldr	r3, [pc, #124]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4a1e      	ldr	r2, [pc, #120]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004be0:	4b19      	ldr	r3, [pc, #100]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	4916      	ldr	r1, [pc, #88]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfe:	d105      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c00:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a10      	ldr	r2, [pc, #64]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c0a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d019      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	4908      	ldr	r1, [pc, #32]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c36:	d109      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c38:	4b03      	ldr	r3, [pc, #12]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a02      	ldr	r2, [pc, #8]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c42:	60d3      	str	r3, [r2, #12]
 8004c44:	e002      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c46:	bf00      	nop
 8004c48:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d015      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c58:	4b29      	ldr	r3, [pc, #164]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	4926      	ldr	r1, [pc, #152]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c76:	d105      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c78:	4b21      	ldr	r3, [pc, #132]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4a20      	ldr	r2, [pc, #128]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d015      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c90:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c96:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9e:	4918      	ldr	r1, [pc, #96]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cae:	d105      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cb0:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d015      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd6:	490a      	ldr	r1, [pc, #40]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce6:	d105      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cf2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cf4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40021000 	.word	0x40021000

08004d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e09d      	b.n	8004e52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d108      	bne.n	8004d30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d26:	d009      	beq.n	8004d3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	61da      	str	r2, [r3, #28]
 8004d2e:	e005      	b.n	8004d3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fc fc76 	bl	8001648 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d7c:	d902      	bls.n	8004d84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	e002      	b.n	8004d8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d92:	d007      	beq.n	8004da4 <HAL_SPI_Init+0xa0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d9c:	d002      	beq.n	8004da4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de6:	ea42 0103 	orr.w	r1, r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	0c1b      	lsrs	r3, r3, #16
 8004e00:	f003 0204 	and.w	r2, r3, #4
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e20:	ea42 0103 	orr.w	r1, r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e60:	b08c      	sub	sp, #48	; 0x30
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	431a      	orrs	r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4baa      	ldr	r3, [pc, #680]	; (8005134 <UART_SetConfig+0x2d8>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e94:	430b      	orrs	r3, r1
 8004e96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a9f      	ldr	r2, [pc, #636]	; (8005138 <UART_SetConfig+0x2dc>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ed2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	f023 010f 	bic.w	r1, r3, #15
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a90      	ldr	r2, [pc, #576]	; (800513c <UART_SetConfig+0x2e0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d125      	bne.n	8004f4c <UART_SetConfig+0xf0>
 8004f00:	4b8f      	ldr	r3, [pc, #572]	; (8005140 <UART_SetConfig+0x2e4>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d81a      	bhi.n	8004f44 <UART_SetConfig+0xe8>
 8004f0e:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <UART_SetConfig+0xb8>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f25 	.word	0x08004f25
 8004f18:	08004f35 	.word	0x08004f35
 8004f1c:	08004f2d 	.word	0x08004f2d
 8004f20:	08004f3d 	.word	0x08004f3d
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f2a:	e116      	b.n	800515a <UART_SetConfig+0x2fe>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f32:	e112      	b.n	800515a <UART_SetConfig+0x2fe>
 8004f34:	2304      	movs	r3, #4
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f3a:	e10e      	b.n	800515a <UART_SetConfig+0x2fe>
 8004f3c:	2308      	movs	r3, #8
 8004f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f42:	e10a      	b.n	800515a <UART_SetConfig+0x2fe>
 8004f44:	2310      	movs	r3, #16
 8004f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f4a:	e106      	b.n	800515a <UART_SetConfig+0x2fe>
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a7c      	ldr	r2, [pc, #496]	; (8005144 <UART_SetConfig+0x2e8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d138      	bne.n	8004fc8 <UART_SetConfig+0x16c>
 8004f56:	4b7a      	ldr	r3, [pc, #488]	; (8005140 <UART_SetConfig+0x2e4>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	f003 030c 	and.w	r3, r3, #12
 8004f60:	2b0c      	cmp	r3, #12
 8004f62:	d82d      	bhi.n	8004fc0 <UART_SetConfig+0x164>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <UART_SetConfig+0x110>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004fa1 	.word	0x08004fa1
 8004f70:	08004fc1 	.word	0x08004fc1
 8004f74:	08004fc1 	.word	0x08004fc1
 8004f78:	08004fc1 	.word	0x08004fc1
 8004f7c:	08004fb1 	.word	0x08004fb1
 8004f80:	08004fc1 	.word	0x08004fc1
 8004f84:	08004fc1 	.word	0x08004fc1
 8004f88:	08004fc1 	.word	0x08004fc1
 8004f8c:	08004fa9 	.word	0x08004fa9
 8004f90:	08004fc1 	.word	0x08004fc1
 8004f94:	08004fc1 	.word	0x08004fc1
 8004f98:	08004fc1 	.word	0x08004fc1
 8004f9c:	08004fb9 	.word	0x08004fb9
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fa6:	e0d8      	b.n	800515a <UART_SetConfig+0x2fe>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fae:	e0d4      	b.n	800515a <UART_SetConfig+0x2fe>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fb6:	e0d0      	b.n	800515a <UART_SetConfig+0x2fe>
 8004fb8:	2308      	movs	r3, #8
 8004fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fbe:	e0cc      	b.n	800515a <UART_SetConfig+0x2fe>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fc6:	e0c8      	b.n	800515a <UART_SetConfig+0x2fe>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a5e      	ldr	r2, [pc, #376]	; (8005148 <UART_SetConfig+0x2ec>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d125      	bne.n	800501e <UART_SetConfig+0x1c2>
 8004fd2:	4b5b      	ldr	r3, [pc, #364]	; (8005140 <UART_SetConfig+0x2e4>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fdc:	2b30      	cmp	r3, #48	; 0x30
 8004fde:	d016      	beq.n	800500e <UART_SetConfig+0x1b2>
 8004fe0:	2b30      	cmp	r3, #48	; 0x30
 8004fe2:	d818      	bhi.n	8005016 <UART_SetConfig+0x1ba>
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d00a      	beq.n	8004ffe <UART_SetConfig+0x1a2>
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	d814      	bhi.n	8005016 <UART_SetConfig+0x1ba>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <UART_SetConfig+0x19a>
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d008      	beq.n	8005006 <UART_SetConfig+0x1aa>
 8004ff4:	e00f      	b.n	8005016 <UART_SetConfig+0x1ba>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ffc:	e0ad      	b.n	800515a <UART_SetConfig+0x2fe>
 8004ffe:	2302      	movs	r3, #2
 8005000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005004:	e0a9      	b.n	800515a <UART_SetConfig+0x2fe>
 8005006:	2304      	movs	r3, #4
 8005008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800500c:	e0a5      	b.n	800515a <UART_SetConfig+0x2fe>
 800500e:	2308      	movs	r3, #8
 8005010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005014:	e0a1      	b.n	800515a <UART_SetConfig+0x2fe>
 8005016:	2310      	movs	r3, #16
 8005018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800501c:	e09d      	b.n	800515a <UART_SetConfig+0x2fe>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a4a      	ldr	r2, [pc, #296]	; (800514c <UART_SetConfig+0x2f0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d125      	bne.n	8005074 <UART_SetConfig+0x218>
 8005028:	4b45      	ldr	r3, [pc, #276]	; (8005140 <UART_SetConfig+0x2e4>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005032:	2bc0      	cmp	r3, #192	; 0xc0
 8005034:	d016      	beq.n	8005064 <UART_SetConfig+0x208>
 8005036:	2bc0      	cmp	r3, #192	; 0xc0
 8005038:	d818      	bhi.n	800506c <UART_SetConfig+0x210>
 800503a:	2b80      	cmp	r3, #128	; 0x80
 800503c:	d00a      	beq.n	8005054 <UART_SetConfig+0x1f8>
 800503e:	2b80      	cmp	r3, #128	; 0x80
 8005040:	d814      	bhi.n	800506c <UART_SetConfig+0x210>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <UART_SetConfig+0x1f0>
 8005046:	2b40      	cmp	r3, #64	; 0x40
 8005048:	d008      	beq.n	800505c <UART_SetConfig+0x200>
 800504a:	e00f      	b.n	800506c <UART_SetConfig+0x210>
 800504c:	2300      	movs	r3, #0
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005052:	e082      	b.n	800515a <UART_SetConfig+0x2fe>
 8005054:	2302      	movs	r3, #2
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800505a:	e07e      	b.n	800515a <UART_SetConfig+0x2fe>
 800505c:	2304      	movs	r3, #4
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005062:	e07a      	b.n	800515a <UART_SetConfig+0x2fe>
 8005064:	2308      	movs	r3, #8
 8005066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800506a:	e076      	b.n	800515a <UART_SetConfig+0x2fe>
 800506c:	2310      	movs	r3, #16
 800506e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005072:	e072      	b.n	800515a <UART_SetConfig+0x2fe>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a35      	ldr	r2, [pc, #212]	; (8005150 <UART_SetConfig+0x2f4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d12a      	bne.n	80050d4 <UART_SetConfig+0x278>
 800507e:	4b30      	ldr	r3, [pc, #192]	; (8005140 <UART_SetConfig+0x2e4>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800508c:	d01a      	beq.n	80050c4 <UART_SetConfig+0x268>
 800508e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005092:	d81b      	bhi.n	80050cc <UART_SetConfig+0x270>
 8005094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005098:	d00c      	beq.n	80050b4 <UART_SetConfig+0x258>
 800509a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800509e:	d815      	bhi.n	80050cc <UART_SetConfig+0x270>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <UART_SetConfig+0x250>
 80050a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a8:	d008      	beq.n	80050bc <UART_SetConfig+0x260>
 80050aa:	e00f      	b.n	80050cc <UART_SetConfig+0x270>
 80050ac:	2300      	movs	r3, #0
 80050ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050b2:	e052      	b.n	800515a <UART_SetConfig+0x2fe>
 80050b4:	2302      	movs	r3, #2
 80050b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ba:	e04e      	b.n	800515a <UART_SetConfig+0x2fe>
 80050bc:	2304      	movs	r3, #4
 80050be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050c2:	e04a      	b.n	800515a <UART_SetConfig+0x2fe>
 80050c4:	2308      	movs	r3, #8
 80050c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ca:	e046      	b.n	800515a <UART_SetConfig+0x2fe>
 80050cc:	2310      	movs	r3, #16
 80050ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050d2:	e042      	b.n	800515a <UART_SetConfig+0x2fe>
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a17      	ldr	r2, [pc, #92]	; (8005138 <UART_SetConfig+0x2dc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d13a      	bne.n	8005154 <UART_SetConfig+0x2f8>
 80050de:	4b18      	ldr	r3, [pc, #96]	; (8005140 <UART_SetConfig+0x2e4>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050ec:	d01a      	beq.n	8005124 <UART_SetConfig+0x2c8>
 80050ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050f2:	d81b      	bhi.n	800512c <UART_SetConfig+0x2d0>
 80050f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f8:	d00c      	beq.n	8005114 <UART_SetConfig+0x2b8>
 80050fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050fe:	d815      	bhi.n	800512c <UART_SetConfig+0x2d0>
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <UART_SetConfig+0x2b0>
 8005104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005108:	d008      	beq.n	800511c <UART_SetConfig+0x2c0>
 800510a:	e00f      	b.n	800512c <UART_SetConfig+0x2d0>
 800510c:	2300      	movs	r3, #0
 800510e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005112:	e022      	b.n	800515a <UART_SetConfig+0x2fe>
 8005114:	2302      	movs	r3, #2
 8005116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800511a:	e01e      	b.n	800515a <UART_SetConfig+0x2fe>
 800511c:	2304      	movs	r3, #4
 800511e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005122:	e01a      	b.n	800515a <UART_SetConfig+0x2fe>
 8005124:	2308      	movs	r3, #8
 8005126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512a:	e016      	b.n	800515a <UART_SetConfig+0x2fe>
 800512c:	2310      	movs	r3, #16
 800512e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005132:	e012      	b.n	800515a <UART_SetConfig+0x2fe>
 8005134:	cfff69f3 	.word	0xcfff69f3
 8005138:	40008000 	.word	0x40008000
 800513c:	40013800 	.word	0x40013800
 8005140:	40021000 	.word	0x40021000
 8005144:	40004400 	.word	0x40004400
 8005148:	40004800 	.word	0x40004800
 800514c:	40004c00 	.word	0x40004c00
 8005150:	40005000 	.word	0x40005000
 8005154:	2310      	movs	r3, #16
 8005156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4aae      	ldr	r2, [pc, #696]	; (8005418 <UART_SetConfig+0x5bc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	f040 8097 	bne.w	8005294 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005166:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800516a:	2b08      	cmp	r3, #8
 800516c:	d823      	bhi.n	80051b6 <UART_SetConfig+0x35a>
 800516e:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <UART_SetConfig+0x318>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	08005199 	.word	0x08005199
 8005178:	080051b7 	.word	0x080051b7
 800517c:	080051a1 	.word	0x080051a1
 8005180:	080051b7 	.word	0x080051b7
 8005184:	080051a7 	.word	0x080051a7
 8005188:	080051b7 	.word	0x080051b7
 800518c:	080051b7 	.word	0x080051b7
 8005190:	080051b7 	.word	0x080051b7
 8005194:	080051af 	.word	0x080051af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005198:	f7ff faf4 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 800519c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800519e:	e010      	b.n	80051c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051a0:	4b9e      	ldr	r3, [pc, #632]	; (800541c <UART_SetConfig+0x5c0>)
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051a4:	e00d      	b.n	80051c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051a6:	f7ff fa7f 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 80051aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051ac:	e009      	b.n	80051c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051b4:	e005      	b.n	80051c2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8130 	beq.w	800542a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	4a94      	ldr	r2, [pc, #592]	; (8005420 <UART_SetConfig+0x5c4>)
 80051d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051d4:	461a      	mov	r2, r3
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d305      	bcc.n	80051fa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d903      	bls.n	8005202 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005200:	e113      	b.n	800542a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	2200      	movs	r2, #0
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	60fa      	str	r2, [r7, #12]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	4a84      	ldr	r2, [pc, #528]	; (8005420 <UART_SetConfig+0x5c4>)
 8005210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005214:	b29b      	uxth	r3, r3
 8005216:	2200      	movs	r2, #0
 8005218:	603b      	str	r3, [r7, #0]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005220:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005224:	f7fa fff8 	bl	8000218 <__aeabi_uldivmod>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4610      	mov	r0, r2
 800522e:	4619      	mov	r1, r3
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	020b      	lsls	r3, r1, #8
 800523a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800523e:	0202      	lsls	r2, r0, #8
 8005240:	6979      	ldr	r1, [r7, #20]
 8005242:	6849      	ldr	r1, [r1, #4]
 8005244:	0849      	lsrs	r1, r1, #1
 8005246:	2000      	movs	r0, #0
 8005248:	460c      	mov	r4, r1
 800524a:	4605      	mov	r5, r0
 800524c:	eb12 0804 	adds.w	r8, r2, r4
 8005250:	eb43 0905 	adc.w	r9, r3, r5
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	469a      	mov	sl, r3
 800525c:	4693      	mov	fp, r2
 800525e:	4652      	mov	r2, sl
 8005260:	465b      	mov	r3, fp
 8005262:	4640      	mov	r0, r8
 8005264:	4649      	mov	r1, r9
 8005266:	f7fa ffd7 	bl	8000218 <__aeabi_uldivmod>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4613      	mov	r3, r2
 8005270:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005278:	d308      	bcc.n	800528c <UART_SetConfig+0x430>
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005280:	d204      	bcs.n	800528c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6a3a      	ldr	r2, [r7, #32]
 8005288:	60da      	str	r2, [r3, #12]
 800528a:	e0ce      	b.n	800542a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005292:	e0ca      	b.n	800542a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529c:	d166      	bne.n	800536c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800529e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d827      	bhi.n	80052f6 <UART_SetConfig+0x49a>
 80052a6:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0x450>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	080052f7 	.word	0x080052f7
 80052bc:	080052e7 	.word	0x080052e7
 80052c0:	080052f7 	.word	0x080052f7
 80052c4:	080052f7 	.word	0x080052f7
 80052c8:	080052f7 	.word	0x080052f7
 80052cc:	080052ef 	.word	0x080052ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d0:	f7ff fa58 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 80052d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052d6:	e014      	b.n	8005302 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d8:	f7ff fa6a 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 80052dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052de:	e010      	b.n	8005302 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e0:	4b4e      	ldr	r3, [pc, #312]	; (800541c <UART_SetConfig+0x5c0>)
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052e4:	e00d      	b.n	8005302 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e6:	f7ff f9df 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 80052ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052ec:	e009      	b.n	8005302 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052f4:	e005      	b.n	8005302 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005300:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8090 	beq.w	800542a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	4a44      	ldr	r2, [pc, #272]	; (8005420 <UART_SetConfig+0x5c4>)
 8005310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005314:	461a      	mov	r2, r3
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	fbb3 f3f2 	udiv	r3, r3, r2
 800531c:	005a      	lsls	r2, r3, #1
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	441a      	add	r2, r3
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	fbb2 f3f3 	udiv	r3, r2, r3
 800532e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	2b0f      	cmp	r3, #15
 8005334:	d916      	bls.n	8005364 <UART_SetConfig+0x508>
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533c:	d212      	bcs.n	8005364 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f023 030f 	bic.w	r3, r3, #15
 8005346:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	b29b      	uxth	r3, r3
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	b29a      	uxth	r2, r3
 8005354:	8bfb      	ldrh	r3, [r7, #30]
 8005356:	4313      	orrs	r3, r2
 8005358:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	8bfa      	ldrh	r2, [r7, #30]
 8005360:	60da      	str	r2, [r3, #12]
 8005362:	e062      	b.n	800542a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800536a:	e05e      	b.n	800542a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800536c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005370:	2b08      	cmp	r3, #8
 8005372:	d828      	bhi.n	80053c6 <UART_SetConfig+0x56a>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <UART_SetConfig+0x520>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	080053a1 	.word	0x080053a1
 8005380:	080053a9 	.word	0x080053a9
 8005384:	080053b1 	.word	0x080053b1
 8005388:	080053c7 	.word	0x080053c7
 800538c:	080053b7 	.word	0x080053b7
 8005390:	080053c7 	.word	0x080053c7
 8005394:	080053c7 	.word	0x080053c7
 8005398:	080053c7 	.word	0x080053c7
 800539c:	080053bf 	.word	0x080053bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a0:	f7ff f9f0 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 80053a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053a6:	e014      	b.n	80053d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a8:	f7ff fa02 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 80053ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053ae:	e010      	b.n	80053d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053b0:	4b1a      	ldr	r3, [pc, #104]	; (800541c <UART_SetConfig+0x5c0>)
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053b4:	e00d      	b.n	80053d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b6:	f7ff f977 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 80053ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053bc:	e009      	b.n	80053d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053c4:	e005      	b.n	80053d2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80053d0:	bf00      	nop
    }

    if (pclk != 0U)
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d028      	beq.n	800542a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	4a10      	ldr	r2, [pc, #64]	; (8005420 <UART_SetConfig+0x5c4>)
 80053de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053e2:	461a      	mov	r2, r3
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	085b      	lsrs	r3, r3, #1
 80053f0:	441a      	add	r2, r3
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	2b0f      	cmp	r3, #15
 8005400:	d910      	bls.n	8005424 <UART_SetConfig+0x5c8>
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005408:	d20c      	bcs.n	8005424 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	b29a      	uxth	r2, r3
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60da      	str	r2, [r3, #12]
 8005414:	e009      	b.n	800542a <UART_SetConfig+0x5ce>
 8005416:	bf00      	nop
 8005418:	40008000 	.word	0x40008000
 800541c:	00f42400 	.word	0x00f42400
 8005420:	08005c68 	.word	0x08005c68
      }
      else
      {
        ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2201      	movs	r2, #1
 800542e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2201      	movs	r2, #1
 8005436:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2200      	movs	r2, #0
 800543e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2200      	movs	r2, #0
 8005444:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005446:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800544a:	4618      	mov	r0, r3
 800544c:	3730      	adds	r7, #48	; 0x30
 800544e:	46bd      	mov	sp, r7
 8005450:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01a      	beq.n	800556a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005552:	d10a      	bne.n	800556a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	605a      	str	r2, [r3, #4]
  }
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b098      	sub	sp, #96	; 0x60
 800559c:	af02      	add	r7, sp, #8
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055a8:	f7fc f9cc 	bl	8001944 <HAL_GetTick>
 80055ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d12f      	bne.n	800561c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c4:	2200      	movs	r2, #0
 80055c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f88e 	bl	80056ec <UART_WaitOnFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d022      	beq.n	800561c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ea:	653b      	str	r3, [r7, #80]	; 0x50
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f4:	647b      	str	r3, [r7, #68]	; 0x44
 80055f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e6      	bne.n	80055d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e063      	b.n	80056e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b04      	cmp	r3, #4
 8005628:	d149      	bne.n	80056be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800562a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005632:	2200      	movs	r2, #0
 8005634:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f857 	bl	80056ec <UART_WaitOnFlagUntilTimeout>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d03c      	beq.n	80056be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	623b      	str	r3, [r7, #32]
   return(result);
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005662:	633b      	str	r3, [r7, #48]	; 0x30
 8005664:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e6      	bne.n	8005644 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	60fb      	str	r3, [r7, #12]
   return(result);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	64bb      	str	r3, [r7, #72]	; 0x48
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3308      	adds	r3, #8
 8005694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005696:	61fa      	str	r2, [r7, #28]
 8005698:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	69b9      	ldr	r1, [r7, #24]
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	617b      	str	r3, [r7, #20]
   return(result);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e5      	bne.n	8005676 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e012      	b.n	80056e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3758      	adds	r7, #88	; 0x58
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	603b      	str	r3, [r7, #0]
 80056f8:	4613      	mov	r3, r2
 80056fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056fc:	e04f      	b.n	800579e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d04b      	beq.n	800579e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005706:	f7fc f91d 	bl	8001944 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	429a      	cmp	r2, r3
 8005714:	d302      	bcc.n	800571c <UART_WaitOnFlagUntilTimeout+0x30>
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e04e      	b.n	80057be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0304 	and.w	r3, r3, #4
 800572a:	2b00      	cmp	r3, #0
 800572c:	d037      	beq.n	800579e <UART_WaitOnFlagUntilTimeout+0xb2>
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b80      	cmp	r3, #128	; 0x80
 8005732:	d034      	beq.n	800579e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b40      	cmp	r3, #64	; 0x40
 8005738:	d031      	beq.n	800579e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b08      	cmp	r3, #8
 8005746:	d110      	bne.n	800576a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2208      	movs	r2, #8
 800574e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f838 	bl	80057c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2208      	movs	r2, #8
 800575a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e029      	b.n	80057be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005778:	d111      	bne.n	800579e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 f81e 	bl	80057c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e00f      	b.n	80057be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4013      	ands	r3, r2
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	bf0c      	ite	eq
 80057ae:	2301      	moveq	r3, #1
 80057b0:	2300      	movne	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	461a      	mov	r2, r3
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d0a0      	beq.n	80056fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b095      	sub	sp, #84	; 0x54
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ec:	643b      	str	r3, [r7, #64]	; 0x40
 80057ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e6      	bne.n	80057ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3308      	adds	r3, #8
 8005806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	64bb      	str	r3, [r7, #72]	; 0x48
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3308      	adds	r3, #8
 8005822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005824:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800582a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e3      	bne.n	8005800 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d118      	bne.n	8005872 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	60bb      	str	r3, [r7, #8]
   return(result);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f023 0310 	bic.w	r3, r3, #16
 8005854:	647b      	str	r3, [r7, #68]	; 0x44
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6979      	ldr	r1, [r7, #20]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	613b      	str	r3, [r7, #16]
   return(result);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e6      	bne.n	8005840 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005886:	bf00      	nop
 8005888:	3754      	adds	r7, #84	; 0x54
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b086      	sub	sp, #24
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e058      	b.n	800595c <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7fb fe4d 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2224      	movs	r2, #36	; 0x24
 80058c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0201 	bic.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7ff fdb6 	bl	8005454 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff fab7 	bl	8004e5c <UART_SetConfig>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e031      	b.n	800595c <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005906:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	430a      	orrs	r2, r1
 800591a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	055b      	lsls	r3, r3, #21
 8005920:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	041b      	lsls	r3, r3, #16
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8005936:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	6979      	ldr	r1, [r7, #20]
 8005940:	430b      	orrs	r3, r1
 8005942:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0201 	orr.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff fe1f 	bl	8005598 <UART_CheckIdleState>
 800595a:	4603      	mov	r3, r0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_UARTEx_DisableFifoMode+0x16>
 8005976:	2302      	movs	r3, #2
 8005978:	e027      	b.n	80059ca <HAL_UARTEx_DisableFifoMode+0x66>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2224      	movs	r2, #36	; 0x24
 8005986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0201 	bic.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80059a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e02d      	b.n	8005a4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2224      	movs	r2, #36	; 0x24
 80059fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0201 	bic.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f850 	bl	8005ad0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e02d      	b.n	8005ac6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2224      	movs	r2, #36	; 0x24
 8005a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0201 	bic.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f812 	bl	8005ad0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d108      	bne.n	8005af2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005af0:	e031      	b.n	8005b56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005af2:	2308      	movs	r3, #8
 8005af4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005af6:	2308      	movs	r3, #8
 8005af8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	0e5b      	lsrs	r3, r3, #25
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	0f5b      	lsrs	r3, r3, #29
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	f003 0307 	and.w	r3, r3, #7
 8005b18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b1a:	7bbb      	ldrb	r3, [r7, #14]
 8005b1c:	7b3a      	ldrb	r2, [r7, #12]
 8005b1e:	4911      	ldr	r1, [pc, #68]	; (8005b64 <UARTEx_SetNbDataToProcess+0x94>)
 8005b20:	5c8a      	ldrb	r2, [r1, r2]
 8005b22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b26:	7b3a      	ldrb	r2, [r7, #12]
 8005b28:	490f      	ldr	r1, [pc, #60]	; (8005b68 <UARTEx_SetNbDataToProcess+0x98>)
 8005b2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	7b7a      	ldrb	r2, [r7, #13]
 8005b3c:	4909      	ldr	r1, [pc, #36]	; (8005b64 <UARTEx_SetNbDataToProcess+0x94>)
 8005b3e:	5c8a      	ldrb	r2, [r1, r2]
 8005b40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b44:	7b7a      	ldrb	r2, [r7, #13]
 8005b46:	4908      	ldr	r1, [pc, #32]	; (8005b68 <UARTEx_SetNbDataToProcess+0x98>)
 8005b48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b56:	bf00      	nop
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	08005c80 	.word	0x08005c80
 8005b68:	08005c88 	.word	0x08005c88

08005b6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b74:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005b78:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	43db      	mvns	r3, r3
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	1d3b      	adds	r3, r7, #4
 8005bac:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <memset>:
 8005bde:	4402      	add	r2, r0
 8005be0:	4603      	mov	r3, r0
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d100      	bne.n	8005be8 <memset+0xa>
 8005be6:	4770      	bx	lr
 8005be8:	f803 1b01 	strb.w	r1, [r3], #1
 8005bec:	e7f9      	b.n	8005be2 <memset+0x4>
	...

08005bf0 <__libc_init_array>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	4d0d      	ldr	r5, [pc, #52]	; (8005c28 <__libc_init_array+0x38>)
 8005bf4:	4c0d      	ldr	r4, [pc, #52]	; (8005c2c <__libc_init_array+0x3c>)
 8005bf6:	1b64      	subs	r4, r4, r5
 8005bf8:	10a4      	asrs	r4, r4, #2
 8005bfa:	2600      	movs	r6, #0
 8005bfc:	42a6      	cmp	r6, r4
 8005bfe:	d109      	bne.n	8005c14 <__libc_init_array+0x24>
 8005c00:	4d0b      	ldr	r5, [pc, #44]	; (8005c30 <__libc_init_array+0x40>)
 8005c02:	4c0c      	ldr	r4, [pc, #48]	; (8005c34 <__libc_init_array+0x44>)
 8005c04:	f000 f818 	bl	8005c38 <_init>
 8005c08:	1b64      	subs	r4, r4, r5
 8005c0a:	10a4      	asrs	r4, r4, #2
 8005c0c:	2600      	movs	r6, #0
 8005c0e:	42a6      	cmp	r6, r4
 8005c10:	d105      	bne.n	8005c1e <__libc_init_array+0x2e>
 8005c12:	bd70      	pop	{r4, r5, r6, pc}
 8005c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c18:	4798      	blx	r3
 8005c1a:	3601      	adds	r6, #1
 8005c1c:	e7ee      	b.n	8005bfc <__libc_init_array+0xc>
 8005c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c22:	4798      	blx	r3
 8005c24:	3601      	adds	r6, #1
 8005c26:	e7f2      	b.n	8005c0e <__libc_init_array+0x1e>
 8005c28:	08005c98 	.word	0x08005c98
 8005c2c:	08005c98 	.word	0x08005c98
 8005c30:	08005c98 	.word	0x08005c98
 8005c34:	08005c9c 	.word	0x08005c9c

08005c38 <_init>:
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3a:	bf00      	nop
 8005c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3e:	bc08      	pop	{r3}
 8005c40:	469e      	mov	lr, r3
 8005c42:	4770      	bx	lr

08005c44 <_fini>:
 8005c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c46:	bf00      	nop
 8005c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4a:	bc08      	pop	{r3}
 8005c4c:	469e      	mov	lr, r3
 8005c4e:	4770      	bx	lr
