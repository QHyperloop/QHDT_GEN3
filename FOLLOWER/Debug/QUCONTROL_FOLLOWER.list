
QUCONTROL_FOLLOWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9d0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800cba8  0800cba8  0001cba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1d4  0800d1d4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1d4  0800d1d4  0001d1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1dc  0800d1dc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1dc  0800d1dc  0001d1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1e0  0800d1e0  0001d1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800d1e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be8  20000068  0800d24c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c50  0800d24c  00020c50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a6e3  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b0c  00000000  00000000  0004a7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002380  00000000  00000000  0004f2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bb8  00000000  00000000  00051650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ddb5  00000000  00000000  00053208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b46c  00000000  00000000  00080fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00125c1f  00000000  00000000  000ac429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a16c  00000000  00000000  001d2048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001dc1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cb90 	.word	0x0800cb90

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800cb90 	.word	0x0800cb90

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <acc_init>:
bno055_vec3_t mag = {0, 0, 0};
bno055_vec3_t grv = {0, 0, 0};
bno055_euler_t eul = {0, 0, 0};
bno055_vec4_t qua = {0, 0, 0};

uint8_t acc_init(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	b0ae      	sub	sp, #184	; 0xb8
 8000518:	af02      	add	r7, sp, #8

    bno = (bno055_t){
 800051a:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <acc_init+0x7c>)
 800051c:	4618      	mov	r0, r3
 800051e:	23ac      	movs	r3, #172	; 0xac
 8000520:	461a      	mov	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f00c f91c 	bl	800c760 <memset>
 8000528:	4b19      	ldr	r3, [pc, #100]	; (8000590 <acc_init+0x7c>)
 800052a:	4a1a      	ldr	r2, [pc, #104]	; (8000594 <acc_init+0x80>)
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <acc_init+0x7c>)
 8000530:	2208      	movs	r2, #8
 8000532:	711a      	strb	r2, [r3, #4]
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <acc_init+0x7c>)
 8000536:	2228      	movs	r2, #40	; 0x28
 8000538:	719a      	strb	r2, [r3, #6]
    	.i2c = &hi2c3, .addr = 0x28, .mode = BNO_MODE_IMU, ._temp_unit = 0,
    };

	 if((err = bno055_init(&bno)) == BNO_OK){
 800053a:	4815      	ldr	r0, [pc, #84]	; (8000590 <acc_init+0x7c>)
 800053c:	f000 f832 	bl	80005a4 <bno055_init>
 8000540:	4603      	mov	r3, r0
 8000542:	461a      	mov	r2, r3
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <acc_init+0x84>)
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <acc_init+0x84>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d113      	bne.n	8000578 <acc_init+0x64>
	    printf("[+] BNO055 init success\r\n");
 8000550:	4812      	ldr	r0, [pc, #72]	; (800059c <acc_init+0x88>)
 8000552:	f00c f825 	bl	800c5a0 <puts>
	 }else{
		 return 1;
	    //Error_Handler();
	 }

	 err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
 8000556:	2300      	movs	r3, #0
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	480b      	ldr	r0, [pc, #44]	; (8000590 <acc_init+0x7c>)
 8000562:	f001 fae9 	bl	8001b38 <bno055_set_unit>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <acc_init+0x84>)
 800056c:	701a      	strb	r2, [r3, #0]
	 if(err != BNO_OK) {
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <acc_init+0x84>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d004      	beq.n	8000580 <acc_init+0x6c>
 8000576:	e001      	b.n	800057c <acc_init+0x68>
		 return 1;
 8000578:	2301      	movs	r3, #1
 800057a:	e005      	b.n	8000588 <acc_init+0x74>
		 return 1;
 800057c:	2301      	movs	r3, #1
 800057e:	e003      	b.n	8000588 <acc_init+0x74>
	 }else{
		 printf("[BNO] Unit selection success\r\n");
 8000580:	4807      	ldr	r0, [pc, #28]	; (80005a0 <acc_init+0x8c>)
 8000582:	f00c f80d 	bl	800c5a0 <puts>
	 }
	 return 0;
 8000586:	2300      	movs	r3, #0

}
 8000588:	4618      	mov	r0, r3
 800058a:	37b0      	adds	r7, #176	; 0xb0
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000084 	.word	0x20000084
 8000594:	200004a0 	.word	0x200004a0
 8000598:	20000130 	.word	0x20000130
 800059c:	0800cba8 	.word	0x0800cba8
 80005a0:	0800cbc4 	.word	0x0800cbc4

080005a4 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b0af      	sub	sp, #188	; 0xbc
 80005a8:	af2a      	add	r7, sp, #168	; 0xa8
 80005aa:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	799b      	ldrb	r3, [r3, #6]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 80005bc:	687c      	ldr	r4, [r7, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	9329      	str	r3, [sp, #164]	; 0xa4
 80005c2:	f107 030e 	add.w	r3, r7, #14
 80005c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80005c8:	2300      	movs	r3, #0
 80005ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80005cc:	4668      	mov	r0, sp
 80005ce:	f104 0310 	add.w	r3, r4, #16
 80005d2:	229c      	movs	r2, #156	; 0x9c
 80005d4:	4619      	mov	r1, r3
 80005d6:	f00c f94e 	bl	800c876 <memcpy>
 80005da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005de:	f001 fbb6 	bl	8001d4e <bno055_read_regs>
 80005e2:	4603      	mov	r3, r0
 80005e4:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <bno055_init+0x4c>
        return err;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	e0b6      	b.n	800075e <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	2ba0      	cmp	r3, #160	; 0xa0
 80005f4:	d001      	beq.n	80005fa <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 80005f6:	2306      	movs	r3, #6
 80005f8:	e0b1      	b.n	800075e <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 80005fa:	2100      	movs	r1, #0
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f001 fa74 	bl	8001aea <bno055_set_opmode>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <bno055_init+0x6c>
        return err;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	e0a6      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8000610:	2002      	movs	r0, #2
 8000612:	f003 fd85 	bl	8004120 <HAL_Delay>
    bno055_reset(imu);
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f001 fb53 	bl	8001cc2 <bno055_reset>
    HAL_Delay(5000);
 800061c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000620:	f003 fd7e 	bl	8004120 <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000624:	2100      	movs	r1, #0
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f001 faee 	bl	8001c08 <bno055_set_pwr_mode>
 800062c:	4603      	mov	r3, r0
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <bno055_init+0x96>
        return err;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	e091      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 800063a:	200a      	movs	r0, #10
 800063c:	f003 fd70 	bl	8004120 <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000640:	2100      	movs	r1, #0
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f001 fbe6 	bl	8001e14 <bno055_set_page>
 8000648:	4603      	mov	r3, r0
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <bno055_init+0xb2>
        return err;
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	e083      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8000656:	200c      	movs	r0, #12
 8000658:	f003 fd62 	bl	8004120 <HAL_Delay>
    bno055_on(imu);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f001 fb53 	bl	8001d08 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	4619      	mov	r1, r3
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f001 fa3e 	bl	8001aea <bno055_set_opmode>
 800066e:	4603      	mov	r3, r0
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <bno055_init+0xd8>
        return err;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	e070      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800067c:	2018      	movs	r0, #24
 800067e:	f003 fd4f 	bl	8004120 <HAL_Delay>

    imu->temperature = &bno055_temperature;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a38      	ldr	r2, [pc, #224]	; (8000768 <bno055_init+0x1c4>)
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a38      	ldr	r2, [pc, #224]	; (800076c <bno055_init+0x1c8>)
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a37      	ldr	r2, [pc, #220]	; (8000770 <bno055_init+0x1cc>)
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a37      	ldr	r2, [pc, #220]	; (8000774 <bno055_init+0x1d0>)
 8000698:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a36      	ldr	r2, [pc, #216]	; (8000778 <bno055_init+0x1d4>)
 800069e:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a36      	ldr	r2, [pc, #216]	; (800077c <bno055_init+0x1d8>)
 80006a4:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a35      	ldr	r2, [pc, #212]	; (8000780 <bno055_init+0x1dc>)
 80006aa:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a35      	ldr	r2, [pc, #212]	; (8000784 <bno055_init+0x1e0>)
 80006b0:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <bno055_init+0x1e4>)
 80006b6:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a34      	ldr	r2, [pc, #208]	; (800078c <bno055_init+0x1e8>)
 80006bc:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a33      	ldr	r2, [pc, #204]	; (8000790 <bno055_init+0x1ec>)
 80006c2:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <bno055_init+0x1f0>)
 80006c8:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a32      	ldr	r2, [pc, #200]	; (8000798 <bno055_init+0x1f4>)
 80006ce:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a32      	ldr	r2, [pc, #200]	; (800079c <bno055_init+0x1f8>)
 80006d4:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a31      	ldr	r2, [pc, #196]	; (80007a0 <bno055_init+0x1fc>)
 80006da:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <bno055_init+0x200>)
 80006e0:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a30      	ldr	r2, [pc, #192]	; (80007a8 <bno055_init+0x204>)
 80006e6:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a30      	ldr	r2, [pc, #192]	; (80007ac <bno055_init+0x208>)
 80006ec:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a2f      	ldr	r2, [pc, #188]	; (80007b0 <bno055_init+0x20c>)
 80006f2:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a2f      	ldr	r2, [pc, #188]	; (80007b4 <bno055_init+0x210>)
 80006f8:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a2e      	ldr	r2, [pc, #184]	; (80007b8 <bno055_init+0x214>)
 80006fe:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a2e      	ldr	r2, [pc, #184]	; (80007bc <bno055_init+0x218>)
 8000704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a2d      	ldr	r2, [pc, #180]	; (80007c0 <bno055_init+0x21c>)
 800070c:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a2c      	ldr	r2, [pc, #176]	; (80007c4 <bno055_init+0x220>)
 8000712:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <bno055_init+0x224>)
 8000718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a2b      	ldr	r2, [pc, #172]	; (80007cc <bno055_init+0x228>)
 8000720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <bno055_init+0x22c>)
 8000728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a29      	ldr	r2, [pc, #164]	; (80007d4 <bno055_init+0x230>)
 8000730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a28      	ldr	r2, [pc, #160]	; (80007d8 <bno055_init+0x234>)
 8000738:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a27      	ldr	r2, [pc, #156]	; (80007dc <bno055_init+0x238>)
 8000740:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <bno055_init+0x23c>)
 8000748:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <bno055_init+0x240>)
 8000750:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a24      	ldr	r2, [pc, #144]	; (80007e8 <bno055_init+0x244>)
 8000758:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	bd90      	pop	{r4, r7, pc}
 8000766:	bf00      	nop
 8000768:	080007ed 	.word	0x080007ed
 800076c:	08000855 	.word	0x08000855
 8000770:	080008d5 	.word	0x080008d5
 8000774:	08000955 	.word	0x08000955
 8000778:	080009d5 	.word	0x080009d5
 800077c:	08000aa1 	.word	0x08000aa1
 8000780:	08000b21 	.word	0x08000b21
 8000784:	08000ba1 	.word	0x08000ba1
 8000788:	08000c21 	.word	0x08000c21
 800078c:	08000ced 	.word	0x08000ced
 8000790:	08000d6d 	.word	0x08000d6d
 8000794:	08000ded 	.word	0x08000ded
 8000798:	08000e6d 	.word	0x08000e6d
 800079c:	08000f39 	.word	0x08000f39
 80007a0:	08000fa5 	.word	0x08000fa5
 80007a4:	08001011 	.word	0x08001011
 80007a8:	0800107d 	.word	0x0800107d
 80007ac:	08001131 	.word	0x08001131
 80007b0:	080011b5 	.word	0x080011b5
 80007b4:	08001239 	.word	0x08001239
 80007b8:	080012bd 	.word	0x080012bd
 80007bc:	08001389 	.word	0x08001389
 80007c0:	0800140d 	.word	0x0800140d
 80007c4:	08001491 	.word	0x08001491
 80007c8:	08001515 	.word	0x08001515
 80007cc:	080015e1 	.word	0x080015e1
 80007d0:	08001651 	.word	0x08001651
 80007d4:	080016c1 	.word	0x080016c1
 80007d8:	08001731 	.word	0x08001731
 80007dc:	080017a1 	.word	0x080017a1
 80007e0:	0800187d 	.word	0x0800187d
 80007e4:	0800194d 	.word	0x0800194d
 80007e8:	08001a1b 	.word	0x08001a1b

080007ec <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b0af      	sub	sp, #188	; 0xbc
 80007f0:	af2a      	add	r7, sp, #168	; 0xa8
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 80007fa:	687c      	ldr	r4, [r7, #4]
 80007fc:	2301      	movs	r3, #1
 80007fe:	9329      	str	r3, [sp, #164]	; 0xa4
 8000800:	f107 030e 	add.w	r3, r7, #14
 8000804:	9328      	str	r3, [sp, #160]	; 0xa0
 8000806:	2334      	movs	r3, #52	; 0x34
 8000808:	9327      	str	r3, [sp, #156]	; 0x9c
 800080a:	4668      	mov	r0, sp
 800080c:	f104 0310 	add.w	r3, r4, #16
 8000810:	229c      	movs	r2, #156	; 0x9c
 8000812:	4619      	mov	r1, r3
 8000814:	f00c f82f 	bl	800c876 <memcpy>
 8000818:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800081c:	f001 fa97 	bl	8001d4e <bno055_read_regs>
 8000820:	4603      	mov	r3, r0
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <bno055_temperature+0x42>
        return err;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	e00d      	b.n	800084a <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7bdb      	ldrb	r3, [r3, #15]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d004      	beq.n	8000840 <bno055_temperature+0x54>
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	b25b      	sxtb	r3, r3
 800083e:	e001      	b.n	8000844 <bno055_temperature+0x58>
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	b25b      	sxtb	r3, r3
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bd90      	pop	{r4, r7, pc}
	...

08000854 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b0af      	sub	sp, #188	; 0xbc
 8000858:	af2a      	add	r7, sp, #168	; 0xa8
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 800085e:	687c      	ldr	r4, [r7, #4]
 8000860:	2302      	movs	r3, #2
 8000862:	9329      	str	r3, [sp, #164]	; 0xa4
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	9328      	str	r3, [sp, #160]	; 0xa0
 800086a:	2308      	movs	r3, #8
 800086c:	9327      	str	r3, [sp, #156]	; 0x9c
 800086e:	4668      	mov	r0, sp
 8000870:	f104 0310 	add.w	r3, r4, #16
 8000874:	229c      	movs	r2, #156	; 0x9c
 8000876:	4619      	mov	r1, r3
 8000878:	f00b fffd 	bl	800c876 <memcpy>
 800087c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000880:	f001 fa65 	bl	8001d4e <bno055_read_regs>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <bno055_acc_x+0x3e>
        return err;
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	e019      	b.n	80008c6 <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000892:	7b7b      	ldrb	r3, [r7, #13]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	b21a      	sxth	r2, r3
 8000898:	7b3b      	ldrb	r3, [r7, #12]
 800089a:	b21b      	sxth	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b21b      	sxth	r3, r3
 80008a0:	ee07 3a90 	vmov	s15, r3
 80008a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <bno055_acc_x+0x62>
 80008b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80008d0 <bno055_acc_x+0x7c>
 80008b4:	e001      	b.n	80008ba <bno055_acc_x+0x66>
 80008b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80008ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80008c4:	2300      	movs	r3, #0
};
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	bf00      	nop
 80008d0:	42c80000 	.word	0x42c80000

080008d4 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b0af      	sub	sp, #188	; 0xbc
 80008d8:	af2a      	add	r7, sp, #168	; 0xa8
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80008de:	687c      	ldr	r4, [r7, #4]
 80008e0:	2302      	movs	r3, #2
 80008e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80008ea:	230a      	movs	r3, #10
 80008ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80008ee:	4668      	mov	r0, sp
 80008f0:	f104 0310 	add.w	r3, r4, #16
 80008f4:	229c      	movs	r2, #156	; 0x9c
 80008f6:	4619      	mov	r1, r3
 80008f8:	f00b ffbd 	bl	800c876 <memcpy>
 80008fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000900:	f001 fa25 	bl	8001d4e <bno055_read_regs>
 8000904:	4603      	mov	r3, r0
 8000906:	73fb      	strb	r3, [r7, #15]
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <bno055_acc_y+0x3e>
        return err;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	e019      	b.n	8000946 <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000912:	7b7b      	ldrb	r3, [r7, #13]
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	b21a      	sxth	r2, r3
 8000918:	7b3b      	ldrb	r3, [r7, #12]
 800091a:	b21b      	sxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b21b      	sxth	r3, r3
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <bno055_acc_y+0x62>
 8000930:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000950 <bno055_acc_y+0x7c>
 8000934:	e001      	b.n	800093a <bno055_acc_y+0x66>
 8000936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800093a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000944:	2300      	movs	r3, #0
};
 8000946:	4618      	mov	r0, r3
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	bf00      	nop
 8000950:	42c80000 	.word	0x42c80000

08000954 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b0af      	sub	sp, #188	; 0xbc
 8000958:	af2a      	add	r7, sp, #168	; 0xa8
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800095e:	687c      	ldr	r4, [r7, #4]
 8000960:	2302      	movs	r3, #2
 8000962:	9329      	str	r3, [sp, #164]	; 0xa4
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	9328      	str	r3, [sp, #160]	; 0xa0
 800096a:	230c      	movs	r3, #12
 800096c:	9327      	str	r3, [sp, #156]	; 0x9c
 800096e:	4668      	mov	r0, sp
 8000970:	f104 0310 	add.w	r3, r4, #16
 8000974:	229c      	movs	r2, #156	; 0x9c
 8000976:	4619      	mov	r1, r3
 8000978:	f00b ff7d 	bl	800c876 <memcpy>
 800097c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000980:	f001 f9e5 	bl	8001d4e <bno055_read_regs>
 8000984:	4603      	mov	r3, r0
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <bno055_acc_z+0x3e>
        return err;
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	e019      	b.n	80009c6 <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000992:	7b7b      	ldrb	r3, [r7, #13]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b21a      	sxth	r2, r3
 8000998:	7b3b      	ldrb	r3, [r7, #12]
 800099a:	b21b      	sxth	r3, r3
 800099c:	4313      	orrs	r3, r2
 800099e:	b21b      	sxth	r3, r3
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <bno055_acc_z+0x62>
 80009b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80009d0 <bno055_acc_z+0x7c>
 80009b4:	e001      	b.n	80009ba <bno055_acc_z+0x66>
 80009b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80009ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80009c4:	2300      	movs	r3, #0
};
 80009c6:	4618      	mov	r0, r3
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	bf00      	nop
 80009d0:	42c80000 	.word	0x42c80000

080009d4 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b0b1      	sub	sp, #196	; 0xc4
 80009d8:	af2a      	add	r7, sp, #168	; 0xa8
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 80009de:	687c      	ldr	r4, [r7, #4]
 80009e0:	2306      	movs	r3, #6
 80009e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80009ea:	2308      	movs	r3, #8
 80009ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80009ee:	4668      	mov	r0, sp
 80009f0:	f104 0310 	add.w	r3, r4, #16
 80009f4:	229c      	movs	r2, #156	; 0x9c
 80009f6:	4619      	mov	r1, r3
 80009f8:	f00b ff3d 	bl	800c876 <memcpy>
 80009fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a00:	f001 f9a5 	bl	8001d4e <bno055_read_regs>
 8000a04:	4603      	mov	r3, r0
 8000a06:	75fb      	strb	r3, [r7, #23]
 8000a08:	7dfb      	ldrb	r3, [r7, #23]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <bno055_acc+0x3e>
        return err;
 8000a0e:	7dfb      	ldrb	r3, [r7, #23]
 8000a10:	e03f      	b.n	8000a92 <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <bno055_acc+0x4a>
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <bno055_acc+0xc8>)
 8000a1c:	e001      	b.n	8000a22 <bno055_acc+0x4e>
 8000a1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000a22:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000a24:	7a7b      	ldrb	r3, [r7, #9]
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	7a3b      	ldrb	r3, [r7, #8]
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000a48:	7afb      	ldrb	r3, [r7, #11]
 8000a4a:	021b      	lsls	r3, r3, #8
 8000a4c:	b21a      	sxth	r2, r3
 8000a4e:	7abb      	ldrb	r3, [r7, #10]
 8000a50:	b21b      	sxth	r3, r3
 8000a52:	4313      	orrs	r3, r2
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000a6c:	7b7b      	ldrb	r3, [r7, #13]
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	b21a      	sxth	r2, r3
 8000a72:	7b3b      	ldrb	r3, [r7, #12]
 8000a74:	b21b      	sxth	r3, r3
 8000a76:	4313      	orrs	r3, r2
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	ee07 3a90 	vmov	s15, r3
 8000a7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a82:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000a90:	2300      	movs	r3, #0
};
 8000a92:	4618      	mov	r0, r3
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	42c80000 	.word	0x42c80000

08000aa0 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b0af      	sub	sp, #188	; 0xbc
 8000aa4:	af2a      	add	r7, sp, #168	; 0xa8
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000aaa:	687c      	ldr	r4, [r7, #4]
 8000aac:	2302      	movs	r3, #2
 8000aae:	9329      	str	r3, [sp, #164]	; 0xa4
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	9328      	str	r3, [sp, #160]	; 0xa0
 8000ab6:	2328      	movs	r3, #40	; 0x28
 8000ab8:	9327      	str	r3, [sp, #156]	; 0x9c
 8000aba:	4668      	mov	r0, sp
 8000abc:	f104 0310 	add.w	r3, r4, #16
 8000ac0:	229c      	movs	r2, #156	; 0x9c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f00b fed7 	bl	800c876 <memcpy>
 8000ac8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000acc:	f001 f93f 	bl	8001d4e <bno055_read_regs>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <bno055_linear_acc_x+0x3e>
        return err;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	e019      	b.n	8000b12 <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000ade:	7b7b      	ldrb	r3, [r7, #13]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	7b3b      	ldrb	r3, [r7, #12]
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	ee07 3a90 	vmov	s15, r3
 8000af0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <bno055_linear_acc_x+0x62>
 8000afc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000b1c <bno055_linear_acc_x+0x7c>
 8000b00:	e001      	b.n	8000b06 <bno055_linear_acc_x+0x66>
 8000b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000b10:	2300      	movs	r3, #0
};
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	42c80000 	.word	0x42c80000

08000b20 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b0af      	sub	sp, #188	; 0xbc
 8000b24:	af2a      	add	r7, sp, #168	; 0xa8
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000b2a:	687c      	ldr	r4, [r7, #4]
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	9328      	str	r3, [sp, #160]	; 0xa0
 8000b36:	232a      	movs	r3, #42	; 0x2a
 8000b38:	9327      	str	r3, [sp, #156]	; 0x9c
 8000b3a:	4668      	mov	r0, sp
 8000b3c:	f104 0310 	add.w	r3, r4, #16
 8000b40:	229c      	movs	r2, #156	; 0x9c
 8000b42:	4619      	mov	r1, r3
 8000b44:	f00b fe97 	bl	800c876 <memcpy>
 8000b48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b4c:	f001 f8ff 	bl	8001d4e <bno055_read_regs>
 8000b50:	4603      	mov	r3, r0
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <bno055_linear_acc_y+0x3e>
        return err;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	e019      	b.n	8000b92 <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b5e:	7b7b      	ldrb	r3, [r7, #13]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	7b3b      	ldrb	r3, [r7, #12]
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <bno055_linear_acc_y+0x62>
 8000b7c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000b9c <bno055_linear_acc_y+0x7c>
 8000b80:	e001      	b.n	8000b86 <bno055_linear_acc_y+0x66>
 8000b82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000b90:	2300      	movs	r3, #0
};
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd90      	pop	{r4, r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	42c80000 	.word	0x42c80000

08000ba0 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b0af      	sub	sp, #188	; 0xbc
 8000ba4:	af2a      	add	r7, sp, #168	; 0xa8
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000baa:	687c      	ldr	r4, [r7, #4]
 8000bac:	2302      	movs	r3, #2
 8000bae:	9329      	str	r3, [sp, #164]	; 0xa4
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	9328      	str	r3, [sp, #160]	; 0xa0
 8000bb6:	232c      	movs	r3, #44	; 0x2c
 8000bb8:	9327      	str	r3, [sp, #156]	; 0x9c
 8000bba:	4668      	mov	r0, sp
 8000bbc:	f104 0310 	add.w	r3, r4, #16
 8000bc0:	229c      	movs	r2, #156	; 0x9c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f00b fe57 	bl	800c876 <memcpy>
 8000bc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bcc:	f001 f8bf 	bl	8001d4e <bno055_read_regs>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <bno055_linear_acc_z+0x3e>
        return err;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	e019      	b.n	8000c12 <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000bde:	7b7b      	ldrb	r3, [r7, #13]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	7b3b      	ldrb	r3, [r7, #12]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	ee07 3a90 	vmov	s15, r3
 8000bf0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <bno055_linear_acc_z+0x62>
 8000bfc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000c1c <bno055_linear_acc_z+0x7c>
 8000c00:	e001      	b.n	8000c06 <bno055_linear_acc_z+0x66>
 8000c02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000c10:	2300      	movs	r3, #0
};
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	42c80000 	.word	0x42c80000

08000c20 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b0b1      	sub	sp, #196	; 0xc4
 8000c24:	af2a      	add	r7, sp, #168	; 0xa8
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000c2a:	687c      	ldr	r4, [r7, #4]
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	9328      	str	r3, [sp, #160]	; 0xa0
 8000c36:	2328      	movs	r3, #40	; 0x28
 8000c38:	9327      	str	r3, [sp, #156]	; 0x9c
 8000c3a:	4668      	mov	r0, sp
 8000c3c:	f104 0310 	add.w	r3, r4, #16
 8000c40:	229c      	movs	r2, #156	; 0x9c
 8000c42:	4619      	mov	r1, r3
 8000c44:	f00b fe17 	bl	800c876 <memcpy>
 8000c48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c4c:	f001 f87f 	bl	8001d4e <bno055_read_regs>
 8000c50:	4603      	mov	r3, r0
 8000c52:	75fb      	strb	r3, [r7, #23]
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <bno055_linear_acc+0x3e>
        return err;
 8000c5a:	7dfb      	ldrb	r3, [r7, #23]
 8000c5c:	e03f      	b.n	8000cde <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <bno055_linear_acc+0x4a>
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <bno055_linear_acc+0xc8>)
 8000c68:	e001      	b.n	8000c6e <bno055_linear_acc+0x4e>
 8000c6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000c6e:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000c70:	7a7b      	ldrb	r3, [r7, #9]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	7a3b      	ldrb	r3, [r7, #8]
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c86:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000c94:	7afb      	ldrb	r3, [r7, #11]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	7abb      	ldrb	r3, [r7, #10]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000caa:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000cb8:	7b7b      	ldrb	r3, [r7, #13]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	7b3b      	ldrb	r3, [r7, #12]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	ee07 3a90 	vmov	s15, r3
 8000cca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cce:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000cdc:	2300      	movs	r3, #0
};
 8000cde:	4618      	mov	r0, r3
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	42c80000 	.word	0x42c80000

08000cec <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b0af      	sub	sp, #188	; 0xbc
 8000cf0:	af2a      	add	r7, sp, #168	; 0xa8
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000cf6:	687c      	ldr	r4, [r7, #4]
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	9329      	str	r3, [sp, #164]	; 0xa4
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	9328      	str	r3, [sp, #160]	; 0xa0
 8000d02:	2314      	movs	r3, #20
 8000d04:	9327      	str	r3, [sp, #156]	; 0x9c
 8000d06:	4668      	mov	r0, sp
 8000d08:	f104 0310 	add.w	r3, r4, #16
 8000d0c:	229c      	movs	r2, #156	; 0x9c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f00b fdb1 	bl	800c876 <memcpy>
 8000d14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d18:	f001 f819 	bl	8001d4e <bno055_read_regs>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <bno055_gyro_x+0x3e>
        return err;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	e019      	b.n	8000d5e <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d2a:	7b7b      	ldrb	r3, [r7, #13]
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	7b3b      	ldrb	r3, [r7, #12]
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <bno055_gyro_x+0x62>
 8000d48:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000d4c:	e001      	b.n	8000d52 <bno055_gyro_x+0x66>
 8000d4e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000d68 <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000d5c:	2300      	movs	r3, #0
};
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd90      	pop	{r4, r7, pc}
 8000d66:	bf00      	nop
 8000d68:	44610000 	.word	0x44610000

08000d6c <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b0af      	sub	sp, #188	; 0xbc
 8000d70:	af2a      	add	r7, sp, #168	; 0xa8
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000d76:	687c      	ldr	r4, [r7, #4]
 8000d78:	2302      	movs	r3, #2
 8000d7a:	9329      	str	r3, [sp, #164]	; 0xa4
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	9328      	str	r3, [sp, #160]	; 0xa0
 8000d82:	2316      	movs	r3, #22
 8000d84:	9327      	str	r3, [sp, #156]	; 0x9c
 8000d86:	4668      	mov	r0, sp
 8000d88:	f104 0310 	add.w	r3, r4, #16
 8000d8c:	229c      	movs	r2, #156	; 0x9c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f00b fd71 	bl	800c876 <memcpy>
 8000d94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d98:	f000 ffd9 	bl	8001d4e <bno055_read_regs>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <bno055_gyro_y+0x3e>
        return err;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	e019      	b.n	8000dde <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000daa:	7b7b      	ldrb	r3, [r7, #13]
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	b21a      	sxth	r2, r3
 8000db0:	7b3b      	ldrb	r3, [r7, #12]
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <bno055_gyro_y+0x62>
 8000dc8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000dcc:	e001      	b.n	8000dd2 <bno055_gyro_y+0x66>
 8000dce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000de8 <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000ddc:	2300      	movs	r3, #0
};
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd90      	pop	{r4, r7, pc}
 8000de6:	bf00      	nop
 8000de8:	44610000 	.word	0x44610000

08000dec <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b0af      	sub	sp, #188	; 0xbc
 8000df0:	af2a      	add	r7, sp, #168	; 0xa8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000df6:	687c      	ldr	r4, [r7, #4]
 8000df8:	2302      	movs	r3, #2
 8000dfa:	9329      	str	r3, [sp, #164]	; 0xa4
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	9328      	str	r3, [sp, #160]	; 0xa0
 8000e02:	2318      	movs	r3, #24
 8000e04:	9327      	str	r3, [sp, #156]	; 0x9c
 8000e06:	4668      	mov	r0, sp
 8000e08:	f104 0310 	add.w	r3, r4, #16
 8000e0c:	229c      	movs	r2, #156	; 0x9c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f00b fd31 	bl	800c876 <memcpy>
 8000e14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e18:	f000 ff99 	bl	8001d4e <bno055_read_regs>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <bno055_gyro_z+0x3e>
        return err;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	e019      	b.n	8000e5e <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e2a:	7b7b      	ldrb	r3, [r7, #13]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	7b3b      	ldrb	r3, [r7, #12]
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <bno055_gyro_z+0x62>
 8000e48:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000e4c:	e001      	b.n	8000e52 <bno055_gyro_z+0x66>
 8000e4e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000e68 <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000e5c:	2300      	movs	r3, #0
};
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	bf00      	nop
 8000e68:	44610000 	.word	0x44610000

08000e6c <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b0b1      	sub	sp, #196	; 0xc4
 8000e70:	af2a      	add	r7, sp, #168	; 0xa8
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000e76:	687c      	ldr	r4, [r7, #4]
 8000e78:	2306      	movs	r3, #6
 8000e7a:	9329      	str	r3, [sp, #164]	; 0xa4
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	9328      	str	r3, [sp, #160]	; 0xa0
 8000e82:	2314      	movs	r3, #20
 8000e84:	9327      	str	r3, [sp, #156]	; 0x9c
 8000e86:	4668      	mov	r0, sp
 8000e88:	f104 0310 	add.w	r3, r4, #16
 8000e8c:	229c      	movs	r2, #156	; 0x9c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f00b fcf1 	bl	800c876 <memcpy>
 8000e94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e98:	f000 ff59 	bl	8001d4e <bno055_read_regs>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	75fb      	strb	r3, [r7, #23]
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <bno055_gyro+0x3e>
        return err;
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	e03f      	b.n	8000f2a <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d102      	bne.n	8000eb8 <bno055_gyro+0x4c>
 8000eb2:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8000eb6:	e000      	b.n	8000eba <bno055_gyro+0x4e>
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000eba:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000ebc:	7a7b      	ldrb	r3, [r7, #9]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	7a3b      	ldrb	r3, [r7, #8]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	ee07 3a90 	vmov	s15, r3
 8000ece:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ed2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000ee0:	7afb      	ldrb	r3, [r7, #11]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	7abb      	ldrb	r3, [r7, #10]
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ef6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000f04:	7b7b      	ldrb	r3, [r7, #13]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	7b3b      	ldrb	r3, [r7, #12]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	371c      	adds	r7, #28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	44610000 	.word	0x44610000

08000f38 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b0af      	sub	sp, #188	; 0xbc
 8000f3c:	af2a      	add	r7, sp, #168	; 0xa8
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000f42:	687c      	ldr	r4, [r7, #4]
 8000f44:	2302      	movs	r3, #2
 8000f46:	9329      	str	r3, [sp, #164]	; 0xa4
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	9328      	str	r3, [sp, #160]	; 0xa0
 8000f4e:	230e      	movs	r3, #14
 8000f50:	9327      	str	r3, [sp, #156]	; 0x9c
 8000f52:	4668      	mov	r0, sp
 8000f54:	f104 0310 	add.w	r3, r4, #16
 8000f58:	229c      	movs	r2, #156	; 0x9c
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f00b fc8b 	bl	800c876 <memcpy>
 8000f60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f64:	f000 fef3 	bl	8001d4e <bno055_read_regs>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <bno055_mag_x+0x3e>
        return err;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	e012      	b.n	8000f9c <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8000f76:	7b7b      	ldrb	r3, [r7, #13]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	7b3b      	ldrb	r3, [r7, #12]
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f8c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd90      	pop	{r4, r7, pc}

08000fa4 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b0af      	sub	sp, #188	; 0xbc
 8000fa8:	af2a      	add	r7, sp, #168	; 0xa8
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000fae:	687c      	ldr	r4, [r7, #4]
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	9329      	str	r3, [sp, #164]	; 0xa4
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	9328      	str	r3, [sp, #160]	; 0xa0
 8000fba:	2310      	movs	r3, #16
 8000fbc:	9327      	str	r3, [sp, #156]	; 0x9c
 8000fbe:	4668      	mov	r0, sp
 8000fc0:	f104 0310 	add.w	r3, r4, #16
 8000fc4:	229c      	movs	r2, #156	; 0x9c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f00b fc55 	bl	800c876 <memcpy>
 8000fcc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fd0:	f000 febd 	bl	8001d4e <bno055_read_regs>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <bno055_mag_y+0x3e>
        return err;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	e012      	b.n	8001008 <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	7b3b      	ldrb	r3, [r7, #12]
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000ffc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}

08001010 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b0af      	sub	sp, #188	; 0xbc
 8001014:	af2a      	add	r7, sp, #168	; 0xa8
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800101a:	687c      	ldr	r4, [r7, #4]
 800101c:	2302      	movs	r3, #2
 800101e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	9328      	str	r3, [sp, #160]	; 0xa0
 8001026:	2312      	movs	r3, #18
 8001028:	9327      	str	r3, [sp, #156]	; 0x9c
 800102a:	4668      	mov	r0, sp
 800102c:	f104 0310 	add.w	r3, r4, #16
 8001030:	229c      	movs	r2, #156	; 0x9c
 8001032:	4619      	mov	r1, r3
 8001034:	f00b fc1f 	bl	800c876 <memcpy>
 8001038:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800103c:	f000 fe87 	bl	8001d4e <bno055_read_regs>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <bno055_mag_z+0x3e>
        return err;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	e012      	b.n	8001074 <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21a      	sxth	r2, r3
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21b      	sxth	r3, r3
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	bd90      	pop	{r4, r7, pc}

0800107c <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b0af      	sub	sp, #188	; 0xbc
 8001080:	af2a      	add	r7, sp, #168	; 0xa8
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001086:	687c      	ldr	r4, [r7, #4]
 8001088:	2306      	movs	r3, #6
 800108a:	9329      	str	r3, [sp, #164]	; 0xa4
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	9328      	str	r3, [sp, #160]	; 0xa0
 8001092:	230e      	movs	r3, #14
 8001094:	9327      	str	r3, [sp, #156]	; 0x9c
 8001096:	4668      	mov	r0, sp
 8001098:	f104 0310 	add.w	r3, r4, #16
 800109c:	229c      	movs	r2, #156	; 0x9c
 800109e:	4619      	mov	r1, r3
 80010a0:	f00b fbe9 	bl	800c876 <memcpy>
 80010a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010a8:	f000 fe51 	bl	8001d4e <bno055_read_regs>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <bno055_mag+0x3e>
        return err;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	e036      	b.n	8001128 <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80010ba:	7a7b      	ldrb	r3, [r7, #9]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7a3b      	ldrb	r3, [r7, #8]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7abb      	ldrb	r3, [r7, #10]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001102:	7b7b      	ldrb	r3, [r7, #13]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	7b3b      	ldrb	r3, [r7, #12]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21b      	sxth	r3, r3
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001118:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800111c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001126:	2300      	movs	r3, #0
};
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bd90      	pop	{r4, r7, pc}

08001130 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b0b1      	sub	sp, #196	; 0xc4
 8001134:	af2a      	add	r7, sp, #168	; 0xa8
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 800113a:	687c      	ldr	r4, [r7, #4]
 800113c:	2302      	movs	r3, #2
 800113e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	9328      	str	r3, [sp, #160]	; 0xa0
 8001146:	232e      	movs	r3, #46	; 0x2e
 8001148:	9327      	str	r3, [sp, #156]	; 0x9c
 800114a:	4668      	mov	r0, sp
 800114c:	f104 0310 	add.w	r3, r4, #16
 8001150:	229c      	movs	r2, #156	; 0x9c
 8001152:	4619      	mov	r1, r3
 8001154:	f00b fb8f 	bl	800c876 <memcpy>
 8001158:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800115c:	f000 fdf7 	bl	8001d4e <bno055_read_regs>
 8001160:	4603      	mov	r3, r0
 8001162:	75fb      	strb	r3, [r7, #23]
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <bno055_gravity_x+0x3e>
        return err;
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	e01b      	b.n	80011a6 <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <bno055_gravity_x+0x4a>
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <bno055_gravity_x+0x80>)
 8001178:	e001      	b.n	800117e <bno055_gravity_x+0x4e>
 800117a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800117e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001180:	7b7b      	ldrb	r3, [r7, #13]
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	b21a      	sxth	r2, r3
 8001186:	7b3b      	ldrb	r3, [r7, #12]
 8001188:	b21b      	sxth	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b21b      	sxth	r3, r3
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001196:	ed97 7a04 	vldr	s14, [r7, #16]
 800119a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd90      	pop	{r4, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	42c80000 	.word	0x42c80000

080011b4 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b0b1      	sub	sp, #196	; 0xc4
 80011b8:	af2a      	add	r7, sp, #168	; 0xa8
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80011be:	687c      	ldr	r4, [r7, #4]
 80011c0:	2302      	movs	r3, #2
 80011c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80011ca:	2330      	movs	r3, #48	; 0x30
 80011cc:	9327      	str	r3, [sp, #156]	; 0x9c
 80011ce:	4668      	mov	r0, sp
 80011d0:	f104 0310 	add.w	r3, r4, #16
 80011d4:	229c      	movs	r2, #156	; 0x9c
 80011d6:	4619      	mov	r1, r3
 80011d8:	f00b fb4d 	bl	800c876 <memcpy>
 80011dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011e0:	f000 fdb5 	bl	8001d4e <bno055_read_regs>
 80011e4:	4603      	mov	r3, r0
 80011e6:	75fb      	strb	r3, [r7, #23]
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <bno055_gravity_y+0x3e>
        return err;
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	e01b      	b.n	800122a <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <bno055_gravity_y+0x4a>
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <bno055_gravity_y+0x80>)
 80011fc:	e001      	b.n	8001202 <bno055_gravity_y+0x4e>
 80011fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001202:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001204:	7b7b      	ldrb	r3, [r7, #13]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21a      	sxth	r2, r3
 800120a:	7b3b      	ldrb	r3, [r7, #12]
 800120c:	b21b      	sxth	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b21b      	sxth	r3, r3
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800121a:	ed97 7a04 	vldr	s14, [r7, #16]
 800121e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	bf00      	nop
 8001234:	42c80000 	.word	0x42c80000

08001238 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b0b1      	sub	sp, #196	; 0xc4
 800123c:	af2a      	add	r7, sp, #168	; 0xa8
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001242:	687c      	ldr	r4, [r7, #4]
 8001244:	2302      	movs	r3, #2
 8001246:	9329      	str	r3, [sp, #164]	; 0xa4
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	9328      	str	r3, [sp, #160]	; 0xa0
 800124e:	2332      	movs	r3, #50	; 0x32
 8001250:	9327      	str	r3, [sp, #156]	; 0x9c
 8001252:	4668      	mov	r0, sp
 8001254:	f104 0310 	add.w	r3, r4, #16
 8001258:	229c      	movs	r2, #156	; 0x9c
 800125a:	4619      	mov	r1, r3
 800125c:	f00b fb0b 	bl	800c876 <memcpy>
 8001260:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001264:	f000 fd73 	bl	8001d4e <bno055_read_regs>
 8001268:	4603      	mov	r3, r0
 800126a:	75fb      	strb	r3, [r7, #23]
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <bno055_gravity_z+0x3e>
        return err;
 8001272:	7dfb      	ldrb	r3, [r7, #23]
 8001274:	e01b      	b.n	80012ae <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <bno055_gravity_z+0x4a>
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <bno055_gravity_z+0x80>)
 8001280:	e001      	b.n	8001286 <bno055_gravity_z+0x4e>
 8001282:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001286:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001288:	7b7b      	ldrb	r3, [r7, #13]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	7b3b      	ldrb	r3, [r7, #12]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21b      	sxth	r3, r3
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800129e:	ed97 7a04 	vldr	s14, [r7, #16]
 80012a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd90      	pop	{r4, r7, pc}
 80012b6:	bf00      	nop
 80012b8:	42c80000 	.word	0x42c80000

080012bc <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b0b1      	sub	sp, #196	; 0xc4
 80012c0:	af2a      	add	r7, sp, #168	; 0xa8
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 80012c6:	687c      	ldr	r4, [r7, #4]
 80012c8:	2306      	movs	r3, #6
 80012ca:	9329      	str	r3, [sp, #164]	; 0xa4
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	9328      	str	r3, [sp, #160]	; 0xa0
 80012d2:	232e      	movs	r3, #46	; 0x2e
 80012d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80012d6:	4668      	mov	r0, sp
 80012d8:	f104 0310 	add.w	r3, r4, #16
 80012dc:	229c      	movs	r2, #156	; 0x9c
 80012de:	4619      	mov	r1, r3
 80012e0:	f00b fac9 	bl	800c876 <memcpy>
 80012e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012e8:	f000 fd31 	bl	8001d4e <bno055_read_regs>
 80012ec:	4603      	mov	r3, r0
 80012ee:	75fb      	strb	r3, [r7, #23]
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <bno055_gravity+0x3e>
        return err;
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	e03f      	b.n	800137a <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <bno055_gravity+0x4a>
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <bno055_gravity+0xc8>)
 8001304:	e001      	b.n	800130a <bno055_gravity+0x4e>
 8001306:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800130a:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 800130c:	7a7b      	ldrb	r3, [r7, #9]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	7a3b      	ldrb	r3, [r7, #8]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001322:	ed97 7a04 	vldr	s14, [r7, #16]
 8001326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001330:	7afb      	ldrb	r3, [r7, #11]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	7abb      	ldrb	r3, [r7, #10]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001346:	ed97 7a04 	vldr	s14, [r7, #16]
 800134a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001354:	7b7b      	ldrb	r3, [r7, #13]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	7b3b      	ldrb	r3, [r7, #12]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21b      	sxth	r3, r3
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800136a:	ed97 7a04 	vldr	s14, [r7, #16]
 800136e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	42c80000 	.word	0x42c80000

08001388 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b0b1      	sub	sp, #196	; 0xc4
 800138c:	af2a      	add	r7, sp, #168	; 0xa8
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001392:	687c      	ldr	r4, [r7, #4]
 8001394:	2302      	movs	r3, #2
 8001396:	9329      	str	r3, [sp, #164]	; 0xa4
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	9328      	str	r3, [sp, #160]	; 0xa0
 800139e:	231a      	movs	r3, #26
 80013a0:	9327      	str	r3, [sp, #156]	; 0x9c
 80013a2:	4668      	mov	r0, sp
 80013a4:	f104 0310 	add.w	r3, r4, #16
 80013a8:	229c      	movs	r2, #156	; 0x9c
 80013aa:	4619      	mov	r1, r3
 80013ac:	f00b fa63 	bl	800c876 <memcpy>
 80013b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013b4:	f000 fccb 	bl	8001d4e <bno055_read_regs>
 80013b8:	4603      	mov	r3, r0
 80013ba:	75fb      	strb	r3, [r7, #23]
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	e01b      	b.n	80013fe <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <bno055_euler_yaw+0x4c>
 80013ce:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80013d2:	e000      	b.n	80013d6 <bno055_euler_yaw+0x4e>
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80013d6:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80013d8:	7b7b      	ldrb	r3, [r7, #13]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b21a      	sxth	r2, r3
 80013de:	7b3b      	ldrb	r3, [r7, #12]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80013f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	44610000 	.word	0x44610000

0800140c <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b0b1      	sub	sp, #196	; 0xc4
 8001410:	af2a      	add	r7, sp, #168	; 0xa8
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001416:	687c      	ldr	r4, [r7, #4]
 8001418:	2302      	movs	r3, #2
 800141a:	9329      	str	r3, [sp, #164]	; 0xa4
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	9328      	str	r3, [sp, #160]	; 0xa0
 8001422:	231c      	movs	r3, #28
 8001424:	9327      	str	r3, [sp, #156]	; 0x9c
 8001426:	4668      	mov	r0, sp
 8001428:	f104 0310 	add.w	r3, r4, #16
 800142c:	229c      	movs	r2, #156	; 0x9c
 800142e:	4619      	mov	r1, r3
 8001430:	f00b fa21 	bl	800c876 <memcpy>
 8001434:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001438:	f000 fc89 	bl	8001d4e <bno055_read_regs>
 800143c:	4603      	mov	r3, r0
 800143e:	75fb      	strb	r3, [r7, #23]
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <bno055_euler_roll+0x3e>
        return err;
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	e01b      	b.n	8001482 <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <bno055_euler_roll+0x4c>
 8001452:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001456:	e000      	b.n	800145a <bno055_euler_roll+0x4e>
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800145a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 800145c:	7b7b      	ldrb	r3, [r7, #13]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	7b3b      	ldrb	r3, [r7, #12]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001472:	ed97 7a04 	vldr	s14, [r7, #16]
 8001476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	bf00      	nop
 800148c:	44610000 	.word	0x44610000

08001490 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b0b1      	sub	sp, #196	; 0xc4
 8001494:	af2a      	add	r7, sp, #168	; 0xa8
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 800149a:	687c      	ldr	r4, [r7, #4]
 800149c:	2302      	movs	r3, #2
 800149e:	9329      	str	r3, [sp, #164]	; 0xa4
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	9328      	str	r3, [sp, #160]	; 0xa0
 80014a6:	231e      	movs	r3, #30
 80014a8:	9327      	str	r3, [sp, #156]	; 0x9c
 80014aa:	4668      	mov	r0, sp
 80014ac:	f104 0310 	add.w	r3, r4, #16
 80014b0:	229c      	movs	r2, #156	; 0x9c
 80014b2:	4619      	mov	r1, r3
 80014b4:	f00b f9df 	bl	800c876 <memcpy>
 80014b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014bc:	f000 fc47 	bl	8001d4e <bno055_read_regs>
 80014c0:	4603      	mov	r3, r0
 80014c2:	75fb      	strb	r3, [r7, #23]
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <bno055_euler_pitch+0x3e>
        return err;
 80014ca:	7dfb      	ldrb	r3, [r7, #23]
 80014cc:	e01b      	b.n	8001506 <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <bno055_euler_pitch+0x4c>
 80014d6:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80014da:	e000      	b.n	80014de <bno055_euler_pitch+0x4e>
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80014de:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80014e0:	7b7b      	ldrb	r3, [r7, #13]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	7b3b      	ldrb	r3, [r7, #12]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80014fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	371c      	adds	r7, #28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	bf00      	nop
 8001510:	44610000 	.word	0x44610000

08001514 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b0b1      	sub	sp, #196	; 0xc4
 8001518:	af2a      	add	r7, sp, #168	; 0xa8
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 800151e:	687c      	ldr	r4, [r7, #4]
 8001520:	2306      	movs	r3, #6
 8001522:	9329      	str	r3, [sp, #164]	; 0xa4
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	9328      	str	r3, [sp, #160]	; 0xa0
 800152a:	231a      	movs	r3, #26
 800152c:	9327      	str	r3, [sp, #156]	; 0x9c
 800152e:	4668      	mov	r0, sp
 8001530:	f104 0310 	add.w	r3, r4, #16
 8001534:	229c      	movs	r2, #156	; 0x9c
 8001536:	4619      	mov	r1, r3
 8001538:	f00b f99d 	bl	800c876 <memcpy>
 800153c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001540:	f000 fc05 	bl	8001d4e <bno055_read_regs>
 8001544:	4603      	mov	r3, r0
 8001546:	75fb      	strb	r3, [r7, #23]
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	e03f      	b.n	80015d2 <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <bno055_euler+0x4c>
 800155a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800155e:	e000      	b.n	8001562 <bno055_euler+0x4e>
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001562:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001564:	7a7b      	ldrb	r3, [r7, #9]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	7a3b      	ldrb	r3, [r7, #8]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21b      	sxth	r3, r3
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800157a:	ed97 7a04 	vldr	s14, [r7, #16]
 800157e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	b21a      	sxth	r2, r3
 800158e:	7abb      	ldrb	r3, [r7, #10]
 8001590:	b21b      	sxth	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b21b      	sxth	r3, r3
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800159e:	ed97 7a04 	vldr	s14, [r7, #16]
 80015a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 80015ac:	7b7b      	ldrb	r3, [r7, #13]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	7b3b      	ldrb	r3, [r7, #12]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80015c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}
 80015da:	bf00      	nop
 80015dc:	44610000 	.word	0x44610000

080015e0 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b0af      	sub	sp, #188	; 0xbc
 80015e4:	af2a      	add	r7, sp, #168	; 0xa8
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 80015ea:	687c      	ldr	r4, [r7, #4]
 80015ec:	2302      	movs	r3, #2
 80015ee:	9329      	str	r3, [sp, #164]	; 0xa4
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80015f6:	2320      	movs	r3, #32
 80015f8:	9327      	str	r3, [sp, #156]	; 0x9c
 80015fa:	4668      	mov	r0, sp
 80015fc:	f104 0310 	add.w	r3, r4, #16
 8001600:	229c      	movs	r2, #156	; 0x9c
 8001602:	4619      	mov	r1, r3
 8001604:	f00b f937 	bl	800c876 <memcpy>
 8001608:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800160c:	f000 fb9f 	bl	8001d4e <bno055_read_regs>
 8001610:	4603      	mov	r3, r0
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <bno055_quaternion_w+0x3e>
        return err;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	e012      	b.n	8001644 <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	7b3b      	ldrb	r3, [r7, #12]
 8001626:	b21b      	sxth	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b21b      	sxth	r3, r3
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001634:	eddf 6a05 	vldr	s13, [pc, #20]	; 800164c <bno055_quaternion_w+0x6c>
 8001638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	46800000 	.word	0x46800000

08001650 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b0af      	sub	sp, #188	; 0xbc
 8001654:	af2a      	add	r7, sp, #168	; 0xa8
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 800165a:	687c      	ldr	r4, [r7, #4]
 800165c:	2302      	movs	r3, #2
 800165e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	9328      	str	r3, [sp, #160]	; 0xa0
 8001666:	2322      	movs	r3, #34	; 0x22
 8001668:	9327      	str	r3, [sp, #156]	; 0x9c
 800166a:	4668      	mov	r0, sp
 800166c:	f104 0310 	add.w	r3, r4, #16
 8001670:	229c      	movs	r2, #156	; 0x9c
 8001672:	4619      	mov	r1, r3
 8001674:	f00b f8ff 	bl	800c876 <memcpy>
 8001678:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800167c:	f000 fb67 	bl	8001d4e <bno055_read_regs>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <bno055_quaternion_x+0x3e>
        return err;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	e012      	b.n	80016b4 <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800168e:	7b7b      	ldrb	r3, [r7, #13]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	7b3b      	ldrb	r3, [r7, #12]
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	b21b      	sxth	r3, r3
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a4:	eddf 6a05 	vldr	s13, [pc, #20]	; 80016bc <bno055_quaternion_x+0x6c>
 80016a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	46800000 	.word	0x46800000

080016c0 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b0af      	sub	sp, #188	; 0xbc
 80016c4:	af2a      	add	r7, sp, #168	; 0xa8
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80016ca:	687c      	ldr	r4, [r7, #4]
 80016cc:	2302      	movs	r3, #2
 80016ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	9328      	str	r3, [sp, #160]	; 0xa0
 80016d6:	2324      	movs	r3, #36	; 0x24
 80016d8:	9327      	str	r3, [sp, #156]	; 0x9c
 80016da:	4668      	mov	r0, sp
 80016dc:	f104 0310 	add.w	r3, r4, #16
 80016e0:	229c      	movs	r2, #156	; 0x9c
 80016e2:	4619      	mov	r1, r3
 80016e4:	f00b f8c7 	bl	800c876 <memcpy>
 80016e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016ec:	f000 fb2f 	bl	8001d4e <bno055_read_regs>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <bno055_quaternion_y+0x3e>
        return err;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	e012      	b.n	8001724 <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80016fe:	7b7b      	ldrb	r3, [r7, #13]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b21a      	sxth	r2, r3
 8001704:	7b3b      	ldrb	r3, [r7, #12]
 8001706:	b21b      	sxth	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b21b      	sxth	r3, r3
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001714:	eddf 6a05 	vldr	s13, [pc, #20]	; 800172c <bno055_quaternion_y+0x6c>
 8001718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}
 800172c:	46800000 	.word	0x46800000

08001730 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b0af      	sub	sp, #188	; 0xbc
 8001734:	af2a      	add	r7, sp, #168	; 0xa8
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800173a:	687c      	ldr	r4, [r7, #4]
 800173c:	2302      	movs	r3, #2
 800173e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	9328      	str	r3, [sp, #160]	; 0xa0
 8001746:	2326      	movs	r3, #38	; 0x26
 8001748:	9327      	str	r3, [sp, #156]	; 0x9c
 800174a:	4668      	mov	r0, sp
 800174c:	f104 0310 	add.w	r3, r4, #16
 8001750:	229c      	movs	r2, #156	; 0x9c
 8001752:	4619      	mov	r1, r3
 8001754:	f00b f88f 	bl	800c876 <memcpy>
 8001758:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800175c:	f000 faf7 	bl	8001d4e <bno055_read_regs>
 8001760:	4603      	mov	r3, r0
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <bno055_quaternion_z+0x3e>
        return err;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	e012      	b.n	8001794 <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800176e:	7b7b      	ldrb	r3, [r7, #13]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b21b      	sxth	r3, r3
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001784:	eddf 6a05 	vldr	s13, [pc, #20]	; 800179c <bno055_quaternion_z+0x6c>
 8001788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bd90      	pop	{r4, r7, pc}
 800179c:	46800000 	.word	0x46800000

080017a0 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b0b1      	sub	sp, #196	; 0xc4
 80017a4:	af2a      	add	r7, sp, #168	; 0xa8
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 80017aa:	687c      	ldr	r4, [r7, #4]
 80017ac:	2308      	movs	r3, #8
 80017ae:	9329      	str	r3, [sp, #164]	; 0xa4
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	9328      	str	r3, [sp, #160]	; 0xa0
 80017b6:	2320      	movs	r3, #32
 80017b8:	9327      	str	r3, [sp, #156]	; 0x9c
 80017ba:	4668      	mov	r0, sp
 80017bc:	f104 0310 	add.w	r3, r4, #16
 80017c0:	229c      	movs	r2, #156	; 0x9c
 80017c2:	4619      	mov	r1, r3
 80017c4:	f00b f857 	bl	800c876 <memcpy>
 80017c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017cc:	f000 fabf 	bl	8001d4e <bno055_read_regs>
 80017d0:	4603      	mov	r3, r0
 80017d2:	75fb      	strb	r3, [r7, #23]
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <bno055_quaternion+0x3e>
        return err;
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	e048      	b.n	8001870 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80017de:	7b7b      	ldrb	r3, [r7, #13]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	7b3b      	ldrb	r3, [r7, #12]
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f4:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001878 <bno055_quaternion+0xd8>
 80017f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21a      	sxth	r2, r3
 8001808:	7bbb      	ldrb	r3, [r7, #14]
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21b      	sxth	r3, r3
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001818:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001878 <bno055_quaternion+0xd8>
 800181c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8001826:	7c7b      	ldrb	r3, [r7, #17]
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	b21a      	sxth	r2, r3
 800182c:	7c3b      	ldrb	r3, [r7, #16]
 800182e:	b21b      	sxth	r3, r3
 8001830:	4313      	orrs	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800183c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001878 <bno055_quaternion+0xd8>
 8001840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 800184a:	7cfb      	ldrb	r3, [r7, #19]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	b21a      	sxth	r2, r3
 8001850:	7cbb      	ldrb	r3, [r7, #18]
 8001852:	b21b      	sxth	r3, r3
 8001854:	4313      	orrs	r3, r2
 8001856:	b21b      	sxth	r3, r3
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001860:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001878 <bno055_quaternion+0xd8>
 8001864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	46800000 	.word	0x46800000

0800187c <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b0af      	sub	sp, #188	; 0xbc
 8001880:	af2a      	add	r7, sp, #168	; 0xa8
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4603      	mov	r3, r0
 800188c:	70fb      	strb	r3, [r7, #3]
 800188e:	460b      	mov	r3, r1
 8001890:	70bb      	strb	r3, [r7, #2]
 8001892:	4613      	mov	r3, r2
 8001894:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001896:	2101      	movs	r1, #1
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fabb 	bl	8001e14 <bno055_set_page>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <bno055_acc_conf+0x30>
        return err;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	e04b      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80018ac:	2100      	movs	r1, #0
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f91b 	bl	8001aea <bno055_set_opmode>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <bno055_acc_conf+0x46>
        return err;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	e040      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80018c2:	200c      	movs	r0, #12
 80018c4:	f002 fc2c 	bl	8004120 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	78bb      	ldrb	r3, [r7, #2]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	787b      	ldrb	r3, [r7, #1]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 80018d8:	687c      	ldr	r4, [r7, #4]
 80018da:	2301      	movs	r3, #1
 80018dc:	9329      	str	r3, [sp, #164]	; 0xa4
 80018de:	f107 030e 	add.w	r3, r7, #14
 80018e2:	9328      	str	r3, [sp, #160]	; 0xa0
 80018e4:	2308      	movs	r3, #8
 80018e6:	9327      	str	r3, [sp, #156]	; 0x9c
 80018e8:	4668      	mov	r0, sp
 80018ea:	f104 0310 	add.w	r3, r4, #16
 80018ee:	229c      	movs	r2, #156	; 0x9c
 80018f0:	4619      	mov	r1, r3
 80018f2:	f00a ffc0 	bl	800c876 <memcpy>
 80018f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018fa:	f000 fa5e 	bl	8001dba <bno055_write_regs>
 80018fe:	4603      	mov	r3, r0
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <bno055_acc_conf+0x90>
        return err;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	e01b      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	791b      	ldrb	r3, [r3, #4]
 8001910:	4619      	mov	r1, r3
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f8e9 	bl	8001aea <bno055_set_opmode>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <bno055_acc_conf+0xaa>
        return err;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	e00e      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001926:	2018      	movs	r0, #24
 8001928:	f002 fbfa 	bl	8004120 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800192c:	2100      	movs	r1, #0
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fa70 	bl	8001e14 <bno055_set_page>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <bno055_acc_conf+0xc6>
        return err;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	e000      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}

0800194c <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b0af      	sub	sp, #188	; 0xbc
 8001950:	af2a      	add	r7, sp, #168	; 0xa8
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4603      	mov	r3, r0
 800195c:	70fb      	strb	r3, [r7, #3]
 800195e:	460b      	mov	r3, r1
 8001960:	70bb      	strb	r3, [r7, #2]
 8001962:	4613      	mov	r3, r2
 8001964:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001966:	2101      	movs	r1, #1
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fa53 	bl	8001e14 <bno055_set_page>
 800196e:	4603      	mov	r3, r0
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <bno055_gyr_conf+0x30>
        return err;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	e04a      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800197c:	2100      	movs	r1, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f8b3 	bl	8001aea <bno055_set_opmode>
 8001984:	4603      	mov	r3, r0
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <bno055_gyr_conf+0x46>
        return err;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	e03f      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001992:	200c      	movs	r0, #12
 8001994:	f002 fbc4 	bl	8004120 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	78bb      	ldrb	r3, [r7, #2]
 800199c:	4313      	orrs	r3, r2
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	733b      	strb	r3, [r7, #12]
 80019a2:	787b      	ldrb	r3, [r7, #1]
 80019a4:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 80019a6:	687c      	ldr	r4, [r7, #4]
 80019a8:	2302      	movs	r3, #2
 80019aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80019b2:	230a      	movs	r3, #10
 80019b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80019b6:	4668      	mov	r0, sp
 80019b8:	f104 0310 	add.w	r3, r4, #16
 80019bc:	229c      	movs	r2, #156	; 0x9c
 80019be:	4619      	mov	r1, r3
 80019c0:	f00a ff59 	bl	800c876 <memcpy>
 80019c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019c8:	f000 f9f7 	bl	8001dba <bno055_write_regs>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	e01b      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	791b      	ldrb	r3, [r3, #4]
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f882 	bl	8001aea <bno055_set_opmode>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <bno055_gyr_conf+0xa8>
        return err;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	e00e      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80019f4:	2018      	movs	r0, #24
 80019f6:	f002 fb93 	bl	8004120 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80019fa:	2100      	movs	r1, #0
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 fa09 	bl	8001e14 <bno055_set_page>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <bno055_gyr_conf+0xc4>
        return err;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	e000      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}

08001a1a <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 8001a1a:	b590      	push	{r4, r7, lr}
 8001a1c:	b0af      	sub	sp, #188	; 0xbc
 8001a1e:	af2a      	add	r7, sp, #168	; 0xa8
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	4608      	mov	r0, r1
 8001a24:	4611      	mov	r1, r2
 8001a26:	461a      	mov	r2, r3
 8001a28:	4603      	mov	r3, r0
 8001a2a:	70fb      	strb	r3, [r7, #3]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70bb      	strb	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001a34:	2101      	movs	r1, #1
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f9ec 	bl	8001e14 <bno055_set_page>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <bno055_mag_conf+0x30>
        return err;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	e04b      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f84c 	bl	8001aea <bno055_set_opmode>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <bno055_mag_conf+0x46>
        return err;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	e040      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001a60:	200c      	movs	r0, #12
 8001a62:	f002 fb5d 	bl	8004120 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	78bb      	ldrb	r3, [r7, #2]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	787b      	ldrb	r3, [r7, #1]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 8001a76:	687c      	ldr	r4, [r7, #4]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a7c:	f107 030e 	add.w	r3, r7, #14
 8001a80:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a82:	2309      	movs	r3, #9
 8001a84:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a86:	4668      	mov	r0, sp
 8001a88:	f104 0310 	add.w	r3, r4, #16
 8001a8c:	229c      	movs	r2, #156	; 0x9c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f00a fef1 	bl	800c876 <memcpy>
 8001a94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a98:	f000 f98f 	bl	8001dba <bno055_write_regs>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <bno055_mag_conf+0x90>
        return err;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	e01b      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	791b      	ldrb	r3, [r3, #4]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f81a 	bl	8001aea <bno055_set_opmode>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <bno055_mag_conf+0xaa>
        return err;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	e00e      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001ac4:	2018      	movs	r0, #24
 8001ac6:	f002 fb2b 	bl	8004120 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8001aca:	2100      	movs	r1, #0
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f9a1 	bl	8001e14 <bno055_set_page>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <bno055_mag_conf+0xc6>
        return err;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	e000      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd90      	pop	{r4, r7, pc}

08001aea <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 8001aea:	b590      	push	{r4, r7, lr}
 8001aec:	b0af      	sub	sp, #188	; 0xbc
 8001aee:	af2a      	add	r7, sp, #168	; 0xa8
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 8001af6:	687c      	ldr	r4, [r7, #4]
 8001af8:	2301      	movs	r3, #1
 8001afa:	9329      	str	r3, [sp, #164]	; 0xa4
 8001afc:	1cfb      	adds	r3, r7, #3
 8001afe:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b00:	233d      	movs	r3, #61	; 0x3d
 8001b02:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b04:	4668      	mov	r0, sp
 8001b06:	f104 0310 	add.w	r3, r4, #16
 8001b0a:	229c      	movs	r2, #156	; 0x9c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f00a feb2 	bl	800c876 <memcpy>
 8001b12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b16:	f000 f950 	bl	8001dba <bno055_write_regs>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	e003      	b.n	8001b30 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001b28:	2018      	movs	r0, #24
 8001b2a:	f002 faf9 	bl	8004120 <HAL_Delay>
    return BNO_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd90      	pop	{r4, r7, pc}

08001b38 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b0af      	sub	sp, #188	; 0xbc
 8001b3c:	af2a      	add	r7, sp, #168	; 0xa8
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	4608      	mov	r0, r1
 8001b42:	4611      	mov	r1, r2
 8001b44:	461a      	mov	r2, r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	70fb      	strb	r3, [r7, #3]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	70bb      	strb	r3, [r7, #2]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001b52:	2100      	movs	r1, #0
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ffc8 	bl	8001aea <bno055_set_opmode>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <bno055_set_unit+0x30>
        return err;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	e04b      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8001b68:	2100      	movs	r1, #0
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f952 	bl	8001e14 <bno055_set_page>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <bno055_set_unit+0x46>
        return err;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	e040      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	78bb      	ldrb	r3, [r7, #2]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	787b      	ldrb	r3, [r7, #1]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 8001b96:	687c      	ldr	r4, [r7, #4]
 8001b98:	2301      	movs	r3, #1
 8001b9a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b9c:	f107 030e 	add.w	r3, r7, #14
 8001ba0:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ba2:	233b      	movs	r3, #59	; 0x3b
 8001ba4:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ba6:	4668      	mov	r0, sp
 8001ba8:	f104 0310 	add.w	r3, r4, #16
 8001bac:	229c      	movs	r2, #156	; 0x9c
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f00a fe61 	bl	800c876 <memcpy>
 8001bb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bb8:	f000 f8ff 	bl	8001dba <bno055_write_regs>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <bno055_set_unit+0x92>
        return err;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	e01a      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	78ba      	ldrb	r2, [r7, #2]
 8001bce:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	787a      	ldrb	r2, [r7, #1]
 8001bd4:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bdc:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	791b      	ldrb	r3, [r3, #4]
 8001be8:	4619      	mov	r1, r3
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ff7d 	bl	8001aea <bno055_set_opmode>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <bno055_set_unit+0xc6>
        return err;
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	e000      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b0af      	sub	sp, #188	; 0xbc
 8001c0c:	af2a      	add	r7, sp, #168	; 0xa8
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e04d      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8001c1e:	2100      	movs	r1, #0
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff62 	bl	8001aea <bno055_set_opmode>
 8001c26:	4603      	mov	r3, r0
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <bno055_set_pwr_mode+0x2c>
        return err;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	e042      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001c34:	2100      	movs	r1, #0
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8ec 	bl	8001e14 <bno055_set_page>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <bno055_set_pwr_mode+0x42>
        return err;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	e037      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 8001c4a:	687c      	ldr	r4, [r7, #4]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c50:	1cfb      	adds	r3, r7, #3
 8001c52:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c54:	233e      	movs	r3, #62	; 0x3e
 8001c56:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c58:	4668      	mov	r0, sp
 8001c5a:	f104 0310 	add.w	r3, r4, #16
 8001c5e:	229c      	movs	r2, #156	; 0x9c
 8001c60:	4619      	mov	r1, r3
 8001c62:	f00a fe08 	bl	800c876 <memcpy>
 8001c66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c6a:	f000 f8a6 	bl	8001dba <bno055_write_regs>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	e01e      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001c82:	2100      	movs	r1, #0
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f8c5 	bl	8001e14 <bno055_set_page>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <bno055_set_pwr_mode+0x90>
        return err;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	e010      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	791b      	ldrb	r3, [r3, #4]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff23 	bl	8001aea <bno055_set_opmode>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <bno055_set_pwr_mode+0xaa>
        return err;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	e003      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f002 fa34 	bl	8004120 <HAL_Delay>
    return BNO_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}

08001cc2 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 8001cc2:	b590      	push	{r4, r7, lr}
 8001cc4:	b0af      	sub	sp, #188	; 0xbc
 8001cc6:	af2a      	add	r7, sp, #168	; 0xa8
 8001cc8:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8001cce:	687c      	ldr	r4, [r7, #4]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001cd4:	f107 030f 	add.w	r3, r7, #15
 8001cd8:	9328      	str	r3, [sp, #160]	; 0xa0
 8001cda:	233f      	movs	r3, #63	; 0x3f
 8001cdc:	9327      	str	r3, [sp, #156]	; 0x9c
 8001cde:	4668      	mov	r0, sp
 8001ce0:	f104 0310 	add.w	r3, r4, #16
 8001ce4:	229c      	movs	r2, #156	; 0x9c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f00a fdc5 	bl	800c876 <memcpy>
 8001cec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cf0:	f000 f863 	bl	8001dba <bno055_write_regs>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}

08001d08 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b0af      	sub	sp, #188	; 0xbc
 8001d0c:	af2a      	add	r7, sp, #168	; 0xa8
 8001d0e:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8001d14:	687c      	ldr	r4, [r7, #4]
 8001d16:	2301      	movs	r3, #1
 8001d18:	9329      	str	r3, [sp, #164]	; 0xa4
 8001d1a:	f107 030f 	add.w	r3, r7, #15
 8001d1e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001d20:	233f      	movs	r3, #63	; 0x3f
 8001d22:	9327      	str	r3, [sp, #156]	; 0x9c
 8001d24:	4668      	mov	r0, sp
 8001d26:	f104 0310 	add.w	r3, r4, #16
 8001d2a:	229c      	movs	r2, #156	; 0x9c
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f00a fda2 	bl	800c876 <memcpy>
 8001d32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d36:	f000 f840 	bl	8001dba <bno055_write_regs>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <bno055_on+0x3e>
    }
    return BNO_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd90      	pop	{r4, r7, pc}

08001d4e <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8001d4e:	b084      	sub	sp, #16
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	f107 0c10 	add.w	ip, r7, #16
 8001d5a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8001d5e:	6938      	ldr	r0, [r7, #16]
 8001d60:	7dbb      	ldrb	r3, [r7, #22]
 8001d62:	b299      	uxth	r1, r3
 8001d64:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f004 fee0 	bl	8006b34 <HAL_I2C_Master_Transmit>
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e014      	b.n	8001dac <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 8001d82:	6938      	ldr	r0, [r7, #16]
 8001d84:	7dbb      	ldrb	r3, [r7, #22]
 8001d86:	b299      	uxth	r1, r3
 8001d88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d92:	9200      	str	r2, [sp, #0]
 8001d94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001d98:	f004 ffe4 	bl	8006d64 <HAL_I2C_Master_Receive>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001db6:	b004      	add	sp, #16
 8001db8:	4770      	bx	lr

08001dba <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 8001dba:	b084      	sub	sp, #16
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	f107 0418 	add.w	r4, r7, #24
 8001dc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 8001dca:	69b8      	ldr	r0, [r7, #24]
 8001dcc:	7fbb      	ldrb	r3, [r7, #30]
 8001dce:	b299      	uxth	r1, r3
 8001dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001dda:	b29c      	uxth	r4, r3
 8001ddc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	f04f 35ff 	mov.w	r5, #4294967295
 8001de6:	9502      	str	r5, [sp, #8]
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	4623      	mov	r3, r4
 8001df2:	f005 fab1 	bl	8007358 <HAL_I2C_Mem_Write>
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e10:	b004      	add	sp, #16
 8001e12:	4770      	bx	lr

08001e14 <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b0af      	sub	sp, #188	; 0xbc
 8001e18:	af2a      	add	r7, sp, #168	; 0xa8
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7b5a      	ldrb	r2, [r3, #13]
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <bno055_set_page+0x1a>
        return BNO_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e024      	b.n	8001e78 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d901      	bls.n	8001e38 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8001e34:	2302      	movs	r3, #2
 8001e36:	e01f      	b.n	8001e78 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8001e38:	687c      	ldr	r4, [r7, #4]
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e3e:	1cfb      	adds	r3, r7, #3
 8001e40:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e42:	2307      	movs	r3, #7
 8001e44:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e46:	4668      	mov	r0, sp
 8001e48:	f104 0310 	add.w	r3, r4, #16
 8001e4c:	229c      	movs	r2, #156	; 0x9c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f00a fd11 	bl	800c876 <memcpy>
 8001e54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e58:	f7ff ffaf 	bl	8001dba <bno055_write_regs>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <bno055_set_page+0x56>
        return err;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	e006      	b.n	8001e78 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8001e70:	2002      	movs	r0, #2
 8001e72:	f002 f955 	bl	8004120 <HAL_Delay>
    return BNO_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd90      	pop	{r4, r7, pc}

08001e80 <a_mcp9600_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mcp9600_iic_read(mcp9600_handle_t *handle, uint8_t reg, uint8_t *data, uint16_t len)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	72fb      	strb	r3, [r7, #11]
 8001e90:	4613      	mov	r3, r2
 8001e92:	813b      	strh	r3, [r7, #8]
    uint8_t buf[1];
    
    buf[0] = reg;                                                               /* set reg */
 8001e94:	7afb      	ldrb	r3, [r7, #11]
 8001e96:	753b      	strb	r3, [r7, #20]
    if (handle->iic_write_cmd(handle->iic_addr, (uint8_t *)buf, 1) != 0)        /* write command */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	7e50      	ldrb	r0, [r2, #25]
 8001ea0:	f107 0114 	add.w	r1, r7, #20
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4798      	blx	r3
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <a_mcp9600_iic_read+0x32>
    {   
        return 1;                                                               /* return error */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00c      	b.n	8001ecc <a_mcp9600_iic_read+0x4c>
    }
    if (handle->iic_read_cmd(handle->iic_addr, data, len) != 0)                 /* read data */
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	7e50      	ldrb	r0, [r2, #25]
 8001eba:	893a      	ldrh	r2, [r7, #8]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4798      	blx	r3
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <a_mcp9600_iic_read+0x4a>
    {   
        return 1;                                                               /* return error */
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <a_mcp9600_iic_read+0x4c>
    }
    
    return 0;                                                                   /* success return 0 */
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <a_mcp9600_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mcp9600_iic_write(mcp9600_handle_t *handle, uint8_t reg, uint8_t *data, uint16_t len)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	72fb      	strb	r3, [r7, #11]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	813b      	strh	r3, [r7, #8]
    uint8_t buf[16];
    uint16_t i;
        
    if ((len + 1) > 16)                                                             /* check length */
 8001ee8:	893b      	ldrh	r3, [r7, #8]
 8001eea:	2b0f      	cmp	r3, #15
 8001eec:	d901      	bls.n	8001ef2 <a_mcp9600_iic_write+0x1e>
    {
        return 1;                                                                   /* return error */
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e025      	b.n	8001f3e <a_mcp9600_iic_write+0x6a>
    }
    buf[0] = reg;                                                                   /* set MSB of reg */
 8001ef2:	7afb      	ldrb	r3, [r7, #11]
 8001ef4:	753b      	strb	r3, [r7, #20]
    for (i = 0; i < len; i++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001efa:	e00c      	b.n	8001f16 <a_mcp9600_iic_write+0x42>
    {
        buf[1 + i] = data[i];                                                       /* copy write data */
 8001efc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	441a      	add	r2, r3
 8001f02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f04:	3301      	adds	r3, #1
 8001f06:	7812      	ldrb	r2, [r2, #0]
 8001f08:	3328      	adds	r3, #40	; 0x28
 8001f0a:	443b      	add	r3, r7
 8001f0c:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < len; i++)
 8001f10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f12:	3301      	adds	r3, #1
 8001f14:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001f18:	893b      	ldrh	r3, [r7, #8]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d3ee      	bcc.n	8001efc <a_mcp9600_iic_write+0x28>
    }
    if (handle->iic_write_cmd(handle->iic_addr, (uint8_t *)buf, len + 1) != 0)      /* write iic command */
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	7e50      	ldrb	r0, [r2, #25]
 8001f26:	893a      	ldrh	r2, [r7, #8]
 8001f28:	3201      	adds	r2, #1
 8001f2a:	b292      	uxth	r2, r2
 8001f2c:	f107 0114 	add.w	r1, r7, #20
 8001f30:	4798      	blx	r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <a_mcp9600_iic_write+0x68>
    {   
        return 1;                                                                   /* return error */
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <a_mcp9600_iic_write+0x6a>
    }
    
    return 0;                                                                       /* success return 0 */
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3728      	adds	r7, #40	; 0x28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <mcp9600_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mcp9600_set_addr_pin(mcp9600_handle_t *handle, mcp9600_address_t addr_pin)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <mcp9600_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e003      	b.n	8001f64 <mcp9600_set_addr_pin+0x1e>
    }
    
    handle->iic_addr = (uint8_t)addr_pin;        /* set pin */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	765a      	strb	r2, [r3, #25]
    
    return 0;                                    /* success return 0 */
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <mcp9600_init>:
 *            - 3 linked functions is NULL
 *            - 4 id is invalid
 * @note      none
 */
uint8_t mcp9600_init(mcp9600_handle_t *handle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                             /* check handle */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <mcp9600_init+0x12>
    {
        return 2;                                                                   /* return error */
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e06f      	b.n	8002062 <mcp9600_init+0xf2>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <mcp9600_init+0x1e>
    {
        return 3;                                                                   /* return error */
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e069      	b.n	8002062 <mcp9600_init+0xf2>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <mcp9600_init+0x32>
    {
        handle->debug_print("mcp9600: iic_init is null.\n");                        /* iic_init is null */
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	4834      	ldr	r0, [pc, #208]	; (800206c <mcp9600_init+0xfc>)
 8001f9c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e05f      	b.n	8002062 <mcp9600_init+0xf2>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <mcp9600_init+0x46>
    {
        handle->debug_print("mcp9600: iic_deinit is null.\n");                      /* iic_deinit is null */
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	4830      	ldr	r0, [pc, #192]	; (8002070 <mcp9600_init+0x100>)
 8001fb0:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e055      	b.n	8002062 <mcp9600_init+0xf2>
    }
    if (handle->iic_read_cmd == NULL)                                               /* check iic_read_cmd */
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d105      	bne.n	8001fca <mcp9600_init+0x5a>
    {
        handle->debug_print("mcp9600: iic_read_cmd is null.\n");                    /* iic_read_cmd is null */
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	482c      	ldr	r0, [pc, #176]	; (8002074 <mcp9600_init+0x104>)
 8001fc4:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e04b      	b.n	8002062 <mcp9600_init+0xf2>
    }
    if (handle->iic_write_cmd == NULL)                                              /* check iic_write_cmd */
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d105      	bne.n	8001fde <mcp9600_init+0x6e>
    {
        handle->debug_print("mcp9600: iic_write_cmd is null.\n");                   /* iic_write_cmd is null */
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	4828      	ldr	r0, [pc, #160]	; (8002078 <mcp9600_init+0x108>)
 8001fd8:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e041      	b.n	8002062 <mcp9600_init+0xf2>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d105      	bne.n	8001ff2 <mcp9600_init+0x82>
    {
        handle->debug_print("mcp9600: delay_ms is null.\n");                        /* delay_ms is null */
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4824      	ldr	r0, [pc, #144]	; (800207c <mcp9600_init+0x10c>)
 8001fec:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e037      	b.n	8002062 <mcp9600_init+0xf2>
    }
    
    if (handle->iic_init() != 0)                                                    /* iic init */
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4798      	blx	r3
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <mcp9600_init+0x9a>
    {
        handle->debug_print("mcp9600: iic init failed.\n");                         /* iic init failed */
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	481f      	ldr	r0, [pc, #124]	; (8002080 <mcp9600_init+0x110>)
 8002004:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002006:	2301      	movs	r3, #1
 8002008:	e02b      	b.n	8002062 <mcp9600_init+0xf2>
    }
    memset(buf, 0, sizeof(uint8_t) * 2);                                            /* clear the buffer */
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	2202      	movs	r2, #2
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f00a fba4 	bl	800c760 <memset>
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_ID_REVISON,
 8002018:	f107 020c 	add.w	r2, r7, #12
 800201c:	2302      	movs	r3, #2
 800201e:	2120      	movs	r1, #32
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff2d 	bl	8001e80 <a_mcp9600_iic_read>
 8002026:	4603      	mov	r3, r0
 8002028:	73fb      	strb	r3, [r7, #15]
                            (uint8_t *)buf, 2);                                     /* read device id */
    if (res != 0)                                                                   /* check result */
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <mcp9600_init+0xd2>
    {
        handle->debug_print("mcp9600: read device id failed.\n");                   /* read device id failed */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	4813      	ldr	r0, [pc, #76]	; (8002084 <mcp9600_init+0x114>)
 8002036:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4798      	blx	r3
        
        return 1;                                                                   /* return error */
 800203e:	2301      	movs	r3, #1
 8002040:	e00f      	b.n	8002062 <mcp9600_init+0xf2>
    }
    if (buf[0] != 0x40)                                                             /* check id */
 8002042:	7b3b      	ldrb	r3, [r7, #12]
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	d008      	beq.n	800205a <mcp9600_init+0xea>
    {
        handle->debug_print("mcp9600: id is invalid.\n");                           /* id is invalid */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	480e      	ldr	r0, [pc, #56]	; (8002088 <mcp9600_init+0x118>)
 800204e:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4798      	blx	r3
        
        return 4;                                                                   /* return error */
 8002056:	2304      	movs	r3, #4
 8002058:	e003      	b.n	8002062 <mcp9600_init+0xf2>
    }
    handle->inited = 1;                                                             /* set inited */
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	761a      	strb	r2, [r3, #24]
    
    return 0;                                                                       /* success return 0 */
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	0800cbe4 	.word	0x0800cbe4
 8002070:	0800cc00 	.word	0x0800cc00
 8002074:	0800cc20 	.word	0x0800cc20
 8002078:	0800cc40 	.word	0x0800cc40
 800207c:	0800cc64 	.word	0x0800cc64
 8002080:	0800cc80 	.word	0x0800cc80
 8002084:	0800cc9c 	.word	0x0800cc9c
 8002088:	0800ccc0 	.word	0x0800ccc0

0800208c <mcp9600_deinit>:
 *            - 3 handle is not initialized
 *            - 4 power down failed
 * @note      none
 */
uint8_t mcp9600_deinit(mcp9600_handle_t *handle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <mcp9600_deinit+0x12>
    {
        return 2;                                                                                 /* return error */
 800209a:	2302      	movs	r3, #2
 800209c:	e045      	b.n	800212a <mcp9600_deinit+0x9e>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7e1b      	ldrb	r3, [r3, #24]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d001      	beq.n	80020aa <mcp9600_deinit+0x1e>
    {
        return 3;                                                                                 /* return error */
 80020a6:	2303      	movs	r3, #3
 80020a8:	e03f      	b.n	800212a <mcp9600_deinit+0x9e>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 80020aa:	f107 020e 	add.w	r2, r7, #14
 80020ae:	2301      	movs	r3, #1
 80020b0:	2106      	movs	r1, #6
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fee4 	bl	8001e80 <a_mcp9600_iic_read>
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <mcp9600_deinit+0x42>
    {
        handle->debug_print("mcp9600: power down failed.\n");                                     /* power down failed */
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	481b      	ldr	r0, [pc, #108]	; (8002134 <mcp9600_deinit+0xa8>)
 80020c8:	4798      	blx	r3
       
        return 4;                                                                                 /* return error */
 80020ca:	2304      	movs	r3, #4
 80020cc:	e02d      	b.n	800212a <mcp9600_deinit+0x9e>
    }
    
    reg &= ~(3 << 0);                                                                             /* clear configure */
 80020ce:	7bbb      	ldrb	r3, [r7, #14]
 80020d0:	f023 0303 	bic.w	r3, r3, #3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	73bb      	strb	r3, [r7, #14]
    reg |= 0x1 << 0;                                                                              /* set configure */
 80020d8:	7bbb      	ldrb	r3, [r7, #14]
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 80020e2:	f107 020e 	add.w	r2, r7, #14
 80020e6:	2301      	movs	r3, #1
 80020e8:	2106      	movs	r1, #6
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fef2 	bl	8001ed4 <a_mcp9600_iic_write>
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <mcp9600_deinit+0x7a>
    {
        handle->debug_print("mcp9600: power down failed.\n");                                     /* power down failed */
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	480d      	ldr	r0, [pc, #52]	; (8002134 <mcp9600_deinit+0xa8>)
 8002100:	4798      	blx	r3
       
        return 4;                                                                                 /* return error */
 8002102:	2304      	movs	r3, #4
 8002104:	e011      	b.n	800212a <mcp9600_deinit+0x9e>
    }
    res = handle->iic_deinit();                                                                   /* iic deinit */
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4798      	blx	r3
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <mcp9600_deinit+0x96>
    {
        handle->debug_print("mcp9600: iic deinit failed.\n");                                     /* iic deinit failed */
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	4807      	ldr	r0, [pc, #28]	; (8002138 <mcp9600_deinit+0xac>)
 800211c:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 800211e:	2301      	movs	r3, #1
 8002120:	e003      	b.n	800212a <mcp9600_deinit+0x9e>
    }
    handle->inited = 0;                                                                           /* clear flag */
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	761a      	strb	r2, [r3, #24]
    
    return 0;                                                                                     /* success return 0 */
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	0800ccdc 	.word	0x0800ccdc
 8002138:	0800ccfc 	.word	0x0800ccfc

0800213c <mcp9600_set_cold_junction_resolution>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_cold_junction_resolution(mcp9600_handle_t *handle, mcp9600_cold_junction_resolution_t resolution)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <mcp9600_set_cold_junction_resolution+0x16>
    {
        return 2;                                                                                 /* return error */
 800214e:	2302      	movs	r3, #2
 8002150:	e038      	b.n	80021c4 <mcp9600_set_cold_junction_resolution+0x88>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7e1b      	ldrb	r3, [r3, #24]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d001      	beq.n	800215e <mcp9600_set_cold_junction_resolution+0x22>
    {
        return 3;                                                                                 /* return error */
 800215a:	2303      	movs	r3, #3
 800215c:	e032      	b.n	80021c4 <mcp9600_set_cold_junction_resolution+0x88>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 800215e:	f107 020e 	add.w	r2, r7, #14
 8002162:	2301      	movs	r3, #1
 8002164:	2106      	movs	r1, #6
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fe8a 	bl	8001e80 <a_mcp9600_iic_read>
 800216c:	4603      	mov	r3, r0
 800216e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <mcp9600_set_cold_junction_resolution+0x46>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                      /* read device configuration failed */
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	4814      	ldr	r0, [pc, #80]	; (80021cc <mcp9600_set_cold_junction_resolution+0x90>)
 800217c:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 800217e:	2301      	movs	r3, #1
 8002180:	e020      	b.n	80021c4 <mcp9600_set_cold_junction_resolution+0x88>
    }
    
    reg &= ~(1 << 7);                                                                             /* clear configure */
 8002182:	7bbb      	ldrb	r3, [r7, #14]
 8002184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002188:	b2db      	uxtb	r3, r3
 800218a:	73bb      	strb	r3, [r7, #14]
    reg |= resolution << 7;                                                                       /* set configure */
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	01db      	lsls	r3, r3, #7
 8002190:	b25a      	sxtb	r2, r3
 8002192:	7bbb      	ldrb	r3, [r7, #14]
 8002194:	b25b      	sxtb	r3, r3
 8002196:	4313      	orrs	r3, r2
 8002198:	b25b      	sxtb	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 800219e:	f107 020e 	add.w	r2, r7, #14
 80021a2:	2301      	movs	r3, #1
 80021a4:	2106      	movs	r1, #6
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fe94 	bl	8001ed4 <a_mcp9600_iic_write>
 80021ac:	4603      	mov	r3, r0
 80021ae:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <mcp9600_set_cold_junction_resolution+0x86>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                     /* write device configuration failed */
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <mcp9600_set_cold_junction_resolution+0x94>)
 80021bc:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <mcp9600_set_cold_junction_resolution+0x88>
    }
    
    return 0;                                                                                     /* success return 0 */
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	0800cd1c 	.word	0x0800cd1c
 80021d0:	0800cd48 	.word	0x0800cd48

080021d4 <mcp9600_set_adc_resolution>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_adc_resolution(mcp9600_handle_t *handle, mcp9600_adc_resolution_t resolution)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <mcp9600_set_adc_resolution+0x16>
    {
        return 2;                                                                                 /* return error */
 80021e6:	2302      	movs	r3, #2
 80021e8:	e038      	b.n	800225c <mcp9600_set_adc_resolution+0x88>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7e1b      	ldrb	r3, [r3, #24]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d001      	beq.n	80021f6 <mcp9600_set_adc_resolution+0x22>
    {
        return 3;                                                                                 /* return error */
 80021f2:	2303      	movs	r3, #3
 80021f4:	e032      	b.n	800225c <mcp9600_set_adc_resolution+0x88>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 80021f6:	f107 020e 	add.w	r2, r7, #14
 80021fa:	2301      	movs	r3, #1
 80021fc:	2106      	movs	r1, #6
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff fe3e 	bl	8001e80 <a_mcp9600_iic_read>
 8002204:	4603      	mov	r3, r0
 8002206:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <mcp9600_set_adc_resolution+0x46>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                      /* read device configuration failed */
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	4814      	ldr	r0, [pc, #80]	; (8002264 <mcp9600_set_adc_resolution+0x90>)
 8002214:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002216:	2301      	movs	r3, #1
 8002218:	e020      	b.n	800225c <mcp9600_set_adc_resolution+0x88>
    }
    
    reg &= ~(3 << 5);                                                                             /* clear configure */
 800221a:	7bbb      	ldrb	r3, [r7, #14]
 800221c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002220:	b2db      	uxtb	r3, r3
 8002222:	73bb      	strb	r3, [r7, #14]
    reg |= resolution << 5;                                                                       /* set configure */
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	015b      	lsls	r3, r3, #5
 8002228:	b25a      	sxtb	r2, r3
 800222a:	7bbb      	ldrb	r3, [r7, #14]
 800222c:	b25b      	sxtb	r3, r3
 800222e:	4313      	orrs	r3, r2
 8002230:	b25b      	sxtb	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 8002236:	f107 020e 	add.w	r2, r7, #14
 800223a:	2301      	movs	r3, #1
 800223c:	2106      	movs	r1, #6
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff fe48 	bl	8001ed4 <a_mcp9600_iic_write>
 8002244:	4603      	mov	r3, r0
 8002246:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <mcp9600_set_adc_resolution+0x86>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                     /* write device configuration failed */
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <mcp9600_set_adc_resolution+0x94>)
 8002254:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <mcp9600_set_adc_resolution+0x88>
    }
    
    return 0;                                                                                     /* success return 0 */
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	0800cd1c 	.word	0x0800cd1c
 8002268:	0800cd48 	.word	0x0800cd48

0800226c <mcp9600_set_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_mode(mcp9600_handle_t *handle, mcp9600_mode_t mode)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <mcp9600_set_mode+0x16>
    {
        return 2;                                                                                 /* return error */
 800227e:	2302      	movs	r3, #2
 8002280:	e034      	b.n	80022ec <mcp9600_set_mode+0x80>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7e1b      	ldrb	r3, [r3, #24]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d001      	beq.n	800228e <mcp9600_set_mode+0x22>
    {
        return 3;                                                                                 /* return error */
 800228a:	2303      	movs	r3, #3
 800228c:	e02e      	b.n	80022ec <mcp9600_set_mode+0x80>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 800228e:	f107 020e 	add.w	r2, r7, #14
 8002292:	2301      	movs	r3, #1
 8002294:	2106      	movs	r1, #6
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff fdf2 	bl	8001e80 <a_mcp9600_iic_read>
 800229c:	4603      	mov	r3, r0
 800229e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <mcp9600_set_mode+0x46>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                      /* read device configuration failed */
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	4812      	ldr	r0, [pc, #72]	; (80022f4 <mcp9600_set_mode+0x88>)
 80022ac:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 80022ae:	2301      	movs	r3, #1
 80022b0:	e01c      	b.n	80022ec <mcp9600_set_mode+0x80>
    }
    
    reg &= ~(3 << 0);                                                                             /* clear configure */
 80022b2:	7bbb      	ldrb	r3, [r7, #14]
 80022b4:	f023 0303 	bic.w	r3, r3, #3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	73bb      	strb	r3, [r7, #14]
    reg |= mode << 0;                                                                             /* set configure */
 80022bc:	7bba      	ldrb	r2, [r7, #14]
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 80022c6:	f107 020e 	add.w	r2, r7, #14
 80022ca:	2301      	movs	r3, #1
 80022cc:	2106      	movs	r1, #6
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fe00 	bl	8001ed4 <a_mcp9600_iic_write>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <mcp9600_set_mode+0x7e>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                     /* write device configuration failed */
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <mcp9600_set_mode+0x8c>)
 80022e4:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <mcp9600_set_mode+0x80>
    }
    
    return 0;                                                                                     /* success return 0 */
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	0800cd1c 	.word	0x0800cd1c
 80022f8:	0800cd48 	.word	0x0800cd48

080022fc <mcp9600_set_thermocouple_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_thermocouple_type(mcp9600_handle_t *handle, mcp9600_thermocouple_type_t type)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                                        /* check handle */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <mcp9600_set_thermocouple_type+0x16>
    {
        return 2;                                                                                              /* return error */
 800230e:	2302      	movs	r3, #2
 8002310:	e038      	b.n	8002384 <mcp9600_set_thermocouple_type+0x88>
    }
    if (handle->inited != 1)                                                                                   /* check handle initialization */
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7e1b      	ldrb	r3, [r3, #24]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d001      	beq.n	800231e <mcp9600_set_thermocouple_type+0x22>
    {
        return 3;                                                                                              /* return error */
 800231a:	2303      	movs	r3, #3
 800231c:	e032      	b.n	8002384 <mcp9600_set_thermocouple_type+0x88>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 800231e:	f107 020e 	add.w	r2, r7, #14
 8002322:	2301      	movs	r3, #1
 8002324:	2105      	movs	r1, #5
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff fdaa 	bl	8001e80 <a_mcp9600_iic_read>
 800232c:	4603      	mov	r3, r0
 800232e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <mcp9600_set_thermocouple_type+0x46>
    {
        handle->debug_print("mcp9600: read thermocouple sensor configuration failed.\n");                      /* read thermocouple sensor configuration failed */
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	4814      	ldr	r0, [pc, #80]	; (800238c <mcp9600_set_thermocouple_type+0x90>)
 800233c:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 800233e:	2301      	movs	r3, #1
 8002340:	e020      	b.n	8002384 <mcp9600_set_thermocouple_type+0x88>
    }
    
    reg &= ~(0x7 << 4);                                                                                        /* clear configure */
 8002342:	7bbb      	ldrb	r3, [r7, #14]
 8002344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002348:	b2db      	uxtb	r3, r3
 800234a:	73bb      	strb	r3, [r7, #14]
    reg |= type << 4;                                                                                          /* set configure */
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	b25a      	sxtb	r2, r3
 8002352:	7bbb      	ldrb	r3, [r7, #14]
 8002354:	b25b      	sxtb	r3, r3
 8002356:	4313      	orrs	r3, r2
 8002358:	b25b      	sxtb	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 800235e:	f107 020e 	add.w	r2, r7, #14
 8002362:	2301      	movs	r3, #1
 8002364:	2105      	movs	r1, #5
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fdb4 	bl	8001ed4 <a_mcp9600_iic_write>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <mcp9600_set_thermocouple_type+0x86>
    {
        handle->debug_print("mcp9600: write thermocouple sensor configuration failed.\n");                     /* write thermocouple sensor configuration failed */
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <mcp9600_set_thermocouple_type+0x94>)
 800237c:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <mcp9600_set_thermocouple_type+0x88>
    }
    
    return 0;                                                                                                  /* success return 0 */
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	0800ce8c 	.word	0x0800ce8c
 8002390:	0800cec8 	.word	0x0800cec8

08002394 <mcp9600_set_filter_coefficient>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_filter_coefficient(mcp9600_handle_t *handle, mcp9600_filter_coefficient_t coefficient)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                                        /* check handle */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <mcp9600_set_filter_coefficient+0x16>
    {
        return 2;                                                                                              /* return error */
 80023a6:	2302      	movs	r3, #2
 80023a8:	e034      	b.n	8002414 <mcp9600_set_filter_coefficient+0x80>
    }
    if (handle->inited != 1)                                                                                   /* check handle initialization */
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	7e1b      	ldrb	r3, [r3, #24]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d001      	beq.n	80023b6 <mcp9600_set_filter_coefficient+0x22>
    {
        return 3;                                                                                              /* return error */
 80023b2:	2303      	movs	r3, #3
 80023b4:	e02e      	b.n	8002414 <mcp9600_set_filter_coefficient+0x80>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 80023b6:	f107 020e 	add.w	r2, r7, #14
 80023ba:	2301      	movs	r3, #1
 80023bc:	2105      	movs	r1, #5
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff fd5e 	bl	8001e80 <a_mcp9600_iic_read>
 80023c4:	4603      	mov	r3, r0
 80023c6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <mcp9600_set_filter_coefficient+0x46>
    {
        handle->debug_print("mcp9600: read thermocouple sensor configuration failed.\n");                      /* read thermocouple sensor configuration failed */
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	4812      	ldr	r0, [pc, #72]	; (800241c <mcp9600_set_filter_coefficient+0x88>)
 80023d4:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 80023d6:	2301      	movs	r3, #1
 80023d8:	e01c      	b.n	8002414 <mcp9600_set_filter_coefficient+0x80>
    }
    
    reg &= ~(0x7 << 0);                                                                                        /* clear configure */
 80023da:	7bbb      	ldrb	r3, [r7, #14]
 80023dc:	f023 0307 	bic.w	r3, r3, #7
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	73bb      	strb	r3, [r7, #14]
    reg |= coefficient << 0;                                                                                   /* set configure */
 80023e4:	7bba      	ldrb	r2, [r7, #14]
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 80023ee:	f107 020e 	add.w	r2, r7, #14
 80023f2:	2301      	movs	r3, #1
 80023f4:	2105      	movs	r1, #5
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fd6c 	bl	8001ed4 <a_mcp9600_iic_write>
 80023fc:	4603      	mov	r3, r0
 80023fe:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <mcp9600_set_filter_coefficient+0x7e>
    {
        handle->debug_print("mcp9600: write thermocouple sensor configuration failed.\n");                     /* write thermocouple sensor configuration failed */
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <mcp9600_set_filter_coefficient+0x8c>)
 800240c:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <mcp9600_set_filter_coefficient+0x80>
    }
    
    return 0;                                                                                                  /* success return 0 */
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	0800ce8c 	.word	0x0800ce8c
 8002420:	0800cec8 	.word	0x0800cec8

08002424 <mcp9600_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mcp9600_interface_iic_init(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
    return 0;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <mcp9600_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mcp9600_interface_iic_deinit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
    return 0;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <mcp9600_interface_iic_write_cmd>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mcp9600_interface_iic_write_cmd(uint8_t addr, uint8_t *buf, uint16_t len)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	71fb      	strb	r3, [r7, #7]
 8002450:	4613      	mov	r3, r2
 8002452:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit_DMA(&hi2c1,addr,buf,len);
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	b299      	uxth	r1, r3
 8002458:	88bb      	ldrh	r3, [r7, #4]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	4803      	ldr	r0, [pc, #12]	; (800246c <mcp9600_interface_iic_write_cmd+0x28>)
 800245e:	f004 fd77 	bl	8006f50 <HAL_I2C_Master_Transmit_DMA>
    return 0;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	200003f8 	.word	0x200003f8

08002470 <mcp9600_interface_iic_read_cmd>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mcp9600_interface_iic_read_cmd(uint8_t addr, uint8_t *buf, uint16_t len)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	6039      	str	r1, [r7, #0]
 800247a:	71fb      	strb	r3, [r7, #7]
 800247c:	4613      	mov	r3, r2
 800247e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Receive_DMA(&hi2c1, addr, buf, len);
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	b299      	uxth	r1, r3
 8002484:	88bb      	ldrh	r3, [r7, #4]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	4803      	ldr	r0, [pc, #12]	; (8002498 <mcp9600_interface_iic_read_cmd+0x28>)
 800248a:	f004 fe75 	bl	8007178 <HAL_I2C_Master_Receive_DMA>
    return 0;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	200003f8 	.word	0x200003f8

0800249c <mcp9600_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void mcp9600_interface_delay_ms(uint32_t ms)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f001 fe3b 	bl	8004120 <HAL_Delay>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <mcp9600_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void mcp9600_interface_debug_print(const char *const fmt, ...)
{
 80024b2:	b40f      	push	{r0, r1, r2, r3}
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
	return;
 80024b8:	bf00      	nop
    
}
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	b004      	add	sp, #16
 80024c2:	4770      	bx	lr

080024c4 <Run_State>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t Run_State(enum PodState state) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]

    switch (state) {
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	2b09      	cmp	r3, #9
 80024d6:	d83d      	bhi.n	8002554 <Run_State+0x90>
 80024d8:	a201      	add	r2, pc, #4	; (adr r2, 80024e0 <Run_State+0x1c>)
 80024da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024de:	bf00      	nop
 80024e0:	08002509 	.word	0x08002509
 80024e4:	08002531 	.word	0x08002531
 80024e8:	08002535 	.word	0x08002535
 80024ec:	08002539 	.word	0x08002539
 80024f0:	0800253d 	.word	0x0800253d
 80024f4:	08002541 	.word	0x08002541
 80024f8:	08002545 	.word	0x08002545
 80024fc:	08002549 	.word	0x08002549
 8002500:	0800254d 	.word	0x0800254d
 8002504:	08002551 	.word	0x08002551
        case INIT:
        	status = tempsensor_init();
 8002508:	f001 fcea 	bl	8003ee0 <tempsensor_init>
 800250c:	4603      	mov	r3, r0
 800250e:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <Run_State+0x56>
        		return 1;
 8002516:	2301      	movs	r3, #1
 8002518:	e01d      	b.n	8002556 <Run_State+0x92>
        	}
        	status = acc_init();
 800251a:	f7fd fffb 	bl	8000514 <acc_init>
 800251e:	4603      	mov	r3, r0
 8002520:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <Run_State+0x68>
        		return 1;
 8002528:	2301      	movs	r3, #1
 800252a:	e014      	b.n	8002556 <Run_State+0x92>
        	}
        	return status;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	e012      	b.n	8002556 <Run_State+0x92>
            break;
        case FAULT:

        	return status;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	e010      	b.n	8002556 <Run_State+0x92>
            break;
        case SAFE_TO_APPROACH:

        	return status;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	e00e      	b.n	8002556 <Run_State+0x92>
            break;
        case READY:

        	return status;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	e00c      	b.n	8002556 <Run_State+0x92>
            break;
        case LAUNCH:

        	return status;
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	e00a      	b.n	8002556 <Run_State+0x92>
            break;
        case COAST:

        	return status;
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	e008      	b.n	8002556 <Run_State+0x92>
            break;
        case BRAKE:

        	return status;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	e006      	b.n	8002556 <Run_State+0x92>
            break;
        case CRAWL:

        	return status;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	e004      	b.n	8002556 <Run_State+0x92>
            break;
        case GROUNDWARNING:

        	return status;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	e002      	b.n	8002556 <Run_State+0x92>
            break;
        case STDBY:

        	return status;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	e000      	b.n	8002556 <Run_State+0x92>
            break;
        default:
        	//invalid state
            return 1;
 8002554:	2301      	movs	r3, #1
            break;
    }
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop

08002560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002566:	f001 fd6a 	bl	800403e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800256a:	f000 f82d 	bl	80025c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800256e:	f000 fcc1 	bl	8002ef4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002572:	f000 fc75 	bl	8002e60 <MX_DMA_Init>
  MX_ADC1_Init();
 8002576:	f000 f87d 	bl	8002674 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800257a:	f000 f97d 	bl	8002878 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800257e:	f000 f9c3 	bl	8002908 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 8002582:	f000 fa09 	bl	8002998 <MX_FDCAN3_Init>
  MX_I2C1_Init();
 8002586:	f000 fa4f 	bl	8002a28 <MX_I2C1_Init>
  MX_SPI1_Init();
 800258a:	f000 fb77 	bl	8002c7c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800258e:	f000 fc3f 	bl	8002e10 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 8002592:	f000 fa89 	bl	8002aa8 <MX_I2C2_Init>
  MX_IWDG_Init();
 8002596:	f000 fb07 	bl	8002ba8 <MX_IWDG_Init>
  MX_ADC5_Init();
 800259a:	f000 f907 	bl	80027ac <MX_ADC5_Init>
  MX_I2C3_Init();
 800259e:	f000 fac3 	bl	8002b28 <MX_I2C3_Init>
  MX_SPI3_Init();
 80025a2:	f000 fba9 	bl	8002cf8 <MX_SPI3_Init>
  MX_LPUART1_UART_Init();
 80025a6:	f000 fb1d 	bl	8002be4 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80025aa:	f000 fbe3 	bl	8002d74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  enum PodState Curr_State = INIT;
 80025ae:	2300      	movs	r3, #0
 80025b0:	71fb      	strb	r3, [r7, #7]
  Fault_Flag = Run_State(Curr_State);
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff85 	bl	80024c4 <Run_State>
 80025ba:	4603      	mov	r3, r0
 80025bc:	461a      	mov	r2, r3
 80025be:	4b01      	ldr	r3, [pc, #4]	; (80025c4 <main+0x64>)
 80025c0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025c2:	e7fe      	b.n	80025c2 <main+0x62>
 80025c4:	20000aa8 	.word	0x20000aa8

080025c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b094      	sub	sp, #80	; 0x50
 80025cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ce:	f107 0318 	add.w	r3, r7, #24
 80025d2:	2238      	movs	r2, #56	; 0x38
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f00a f8c2 	bl	800c760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
 80025e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80025ea:	2000      	movs	r0, #0
 80025ec:	f007 f874 	bl	80096d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 80025f0:	232b      	movs	r3, #43	; 0x2b
 80025f2:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002600:	2340      	movs	r3, #64	; 0x40
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002604:	2301      	movs	r3, #1
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002608:	2301      	movs	r3, #1
 800260a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800260c:	2302      	movs	r3, #2
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002610:	2303      	movs	r3, #3
 8002612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002614:	2302      	movs	r3, #2
 8002616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002618:	2355      	movs	r3, #85	; 0x55
 800261a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800261c:	2302      	movs	r3, #2
 800261e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002620:	2302      	movs	r3, #2
 8002622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002624:	2302      	movs	r3, #2
 8002626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002628:	f107 0318 	add.w	r3, r7, #24
 800262c:	4618      	mov	r0, r3
 800262e:	f007 f907 	bl	8009840 <HAL_RCC_OscConfig>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002638:	f000 fd2c 	bl	8003094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800263c:	230f      	movs	r3, #15
 800263e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002640:	2303      	movs	r3, #3
 8002642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800264c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800264e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002652:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	2104      	movs	r1, #4
 8002658:	4618      	mov	r0, r3
 800265a:	f007 fc03 	bl	8009e64 <HAL_RCC_ClockConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002664:	f000 fd16 	bl	8003094 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002668:	f007 fdd2 	bl	800a210 <HAL_RCC_EnableCSS>
}
 800266c:	bf00      	nop
 800266e:	3750      	adds	r7, #80	; 0x50
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	; 0x30
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800267a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	2220      	movs	r2, #32
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f00a f867 	bl	800c760 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002692:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <MX_ADC1_Init+0x130>)
 8002694:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002698:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800269a:	4b42      	ldr	r3, [pc, #264]	; (80027a4 <MX_ADC1_Init+0x130>)
 800269c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80026a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026a2:	4b40      	ldr	r3, [pc, #256]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026a8:	4b3e      	ldr	r3, [pc, #248]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80026ae:	4b3d      	ldr	r3, [pc, #244]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80026b4:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026ba:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026bc:	2204      	movs	r2, #4
 80026be:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80026c0:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80026c6:	4b37      	ldr	r3, [pc, #220]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80026cc:	4b35      	ldr	r3, [pc, #212]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026ce:	2204      	movs	r2, #4
 80026d0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026d2:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026da:	4b32      	ldr	r3, [pc, #200]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026dc:	2200      	movs	r2, #0
 80026de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026e0:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80026e6:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026ee:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80026f4:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026fc:	4829      	ldr	r0, [pc, #164]	; (80027a4 <MX_ADC1_Init+0x130>)
 80026fe:	f001 ff4f 	bl	80045a0 <HAL_ADC_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002708:	f000 fcc4 	bl	8003094 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800270c:	2300      	movs	r3, #0
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002714:	4619      	mov	r1, r3
 8002716:	4823      	ldr	r0, [pc, #140]	; (80027a4 <MX_ADC1_Init+0x130>)
 8002718:	f002 ff76 	bl	8005608 <HAL_ADCEx_MultiModeConfigChannel>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002722:	f000 fcb7 	bl	8003094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <MX_ADC1_Init+0x134>)
 8002728:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800272a:	2306      	movs	r3, #6
 800272c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002732:	237f      	movs	r3, #127	; 0x7f
 8002734:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002736:	2304      	movs	r3, #4
 8002738:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	4619      	mov	r1, r3
 8002742:	4818      	ldr	r0, [pc, #96]	; (80027a4 <MX_ADC1_Init+0x130>)
 8002744:	f002 f9d0 	bl	8004ae8 <HAL_ADC_ConfigChannel>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800274e:	f000 fca1 	bl	8003094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002752:	230c      	movs	r3, #12
 8002754:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4812      	ldr	r0, [pc, #72]	; (80027a4 <MX_ADC1_Init+0x130>)
 800275c:	f002 f9c4 	bl	8004ae8 <HAL_ADC_ConfigChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8002766:	f000 fc95 	bl	8003094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800276a:	2312      	movs	r3, #18
 800276c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	4619      	mov	r1, r3
 8002772:	480c      	ldr	r0, [pc, #48]	; (80027a4 <MX_ADC1_Init+0x130>)
 8002774:	f002 f9b8 	bl	8004ae8 <HAL_ADC_ConfigChannel>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 800277e:	f000 fc89 	bl	8003094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002782:	2318      	movs	r3, #24
 8002784:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	4619      	mov	r1, r3
 800278a:	4806      	ldr	r0, [pc, #24]	; (80027a4 <MX_ADC1_Init+0x130>)
 800278c:	f002 f9ac 	bl	8004ae8 <HAL_ADC_ConfigChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8002796:	f000 fc7d 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800279a:	bf00      	nop
 800279c:	3730      	adds	r7, #48	; 0x30
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000134 	.word	0x20000134
 80027a8:	04300002 	.word	0x04300002

080027ac <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027b2:	463b      	mov	r3, r7
 80027b4:	2220      	movs	r2, #32
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f009 ffd1 	bl	800c760 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80027be:	4b2b      	ldr	r3, [pc, #172]	; (800286c <MX_ADC5_Init+0xc0>)
 80027c0:	4a2b      	ldr	r2, [pc, #172]	; (8002870 <MX_ADC5_Init+0xc4>)
 80027c2:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80027c4:	4b29      	ldr	r3, [pc, #164]	; (800286c <MX_ADC5_Init+0xc0>)
 80027c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80027ca:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80027cc:	4b27      	ldr	r3, [pc, #156]	; (800286c <MX_ADC5_Init+0xc0>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027d2:	4b26      	ldr	r3, [pc, #152]	; (800286c <MX_ADC5_Init+0xc0>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80027d8:	4b24      	ldr	r3, [pc, #144]	; (800286c <MX_ADC5_Init+0xc0>)
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027de:	4b23      	ldr	r3, [pc, #140]	; (800286c <MX_ADC5_Init+0xc0>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027e4:	4b21      	ldr	r3, [pc, #132]	; (800286c <MX_ADC5_Init+0xc0>)
 80027e6:	2204      	movs	r2, #4
 80027e8:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80027ea:	4b20      	ldr	r3, [pc, #128]	; (800286c <MX_ADC5_Init+0xc0>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80027f0:	4b1e      	ldr	r3, [pc, #120]	; (800286c <MX_ADC5_Init+0xc0>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80027f6:	4b1d      	ldr	r3, [pc, #116]	; (800286c <MX_ADC5_Init+0xc0>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <MX_ADC5_Init+0xc0>)
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <MX_ADC5_Init+0xc0>)
 8002806:	2200      	movs	r2, #0
 8002808:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800280a:	4b18      	ldr	r3, [pc, #96]	; (800286c <MX_ADC5_Init+0xc0>)
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <MX_ADC5_Init+0xc0>)
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <MX_ADC5_Init+0xc0>)
 800281a:	2200      	movs	r2, #0
 800281c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800281e:	4b13      	ldr	r3, [pc, #76]	; (800286c <MX_ADC5_Init+0xc0>)
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8002826:	4811      	ldr	r0, [pc, #68]	; (800286c <MX_ADC5_Init+0xc0>)
 8002828:	f001 feba 	bl	80045a0 <HAL_ADC_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8002832:	f000 fc2f 	bl	8003094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <MX_ADC5_Init+0xc8>)
 8002838:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800283a:	2306      	movs	r3, #6
 800283c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002842:	237f      	movs	r3, #127	; 0x7f
 8002844:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002846:	2304      	movs	r3, #4
 8002848:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800284e:	463b      	mov	r3, r7
 8002850:	4619      	mov	r1, r3
 8002852:	4806      	ldr	r0, [pc, #24]	; (800286c <MX_ADC5_Init+0xc0>)
 8002854:	f002 f948 	bl	8004ae8 <HAL_ADC_ConfigChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 800285e:	f000 fc19 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	3720      	adds	r7, #32
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	200001a0 	.word	0x200001a0
 8002870:	50000600 	.word	0x50000600
 8002874:	08600004 	.word	0x08600004

08002878 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800287c:	4b20      	ldr	r3, [pc, #128]	; (8002900 <MX_FDCAN1_Init+0x88>)
 800287e:	4a21      	ldr	r2, [pc, #132]	; (8002904 <MX_FDCAN1_Init+0x8c>)
 8002880:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002882:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <MX_FDCAN1_Init+0x88>)
 8002884:	2200      	movs	r2, #0
 8002886:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <MX_FDCAN1_Init+0x88>)
 800288a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800288e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <MX_FDCAN1_Init+0x88>)
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8002896:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <MX_FDCAN1_Init+0x88>)
 8002898:	2200      	movs	r2, #0
 800289a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <MX_FDCAN1_Init+0x88>)
 800289e:	2200      	movs	r2, #0
 80028a0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80028a2:	4b17      	ldr	r3, [pc, #92]	; (8002900 <MX_FDCAN1_Init+0x88>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <MX_FDCAN1_Init+0x88>)
 80028aa:	2210      	movs	r2, #16
 80028ac:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80028ae:	4b14      	ldr	r3, [pc, #80]	; (8002900 <MX_FDCAN1_Init+0x88>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 167;
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <MX_FDCAN1_Init+0x88>)
 80028b6:	2202      	movs	r2, #2
 80028b8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <MX_FDCAN1_Init+0x88>)
 80028bc:	2202      	movs	r2, #2
 80028be:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 17;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <MX_FDCAN1_Init+0x88>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <MX_FDCAN1_Init+0x88>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <MX_FDCAN1_Init+0x88>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <MX_FDCAN1_Init+0x88>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <MX_FDCAN1_Init+0x88>)
 80028da:	2200      	movs	r2, #0
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <MX_FDCAN1_Init+0x88>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <MX_FDCAN1_Init+0x88>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80028ea:	4805      	ldr	r0, [pc, #20]	; (8002900 <MX_FDCAN1_Init+0x88>)
 80028ec:	f003 fb8c 	bl	8006008 <HAL_FDCAN_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80028f6:	f000 fbcd 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	200002cc 	.word	0x200002cc
 8002904:	40006400 	.word	0x40006400

08002908 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800290c:	4b20      	ldr	r3, [pc, #128]	; (8002990 <MX_FDCAN2_Init+0x88>)
 800290e:	4a21      	ldr	r2, [pc, #132]	; (8002994 <MX_FDCAN2_Init+0x8c>)
 8002910:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002912:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <MX_FDCAN2_Init+0x88>)
 8002914:	2200      	movs	r2, #0
 8002916:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002918:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <MX_FDCAN2_Init+0x88>)
 800291a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800291e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <MX_FDCAN2_Init+0x88>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <MX_FDCAN2_Init+0x88>)
 8002928:	2200      	movs	r2, #0
 800292a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <MX_FDCAN2_Init+0x88>)
 800292e:	2200      	movs	r2, #0
 8002930:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <MX_FDCAN2_Init+0x88>)
 8002934:	2200      	movs	r2, #0
 8002936:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 2;
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <MX_FDCAN2_Init+0x88>)
 800293a:	2210      	movs	r2, #16
 800293c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 2;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <MX_FDCAN2_Init+0x88>)
 8002940:	2201      	movs	r2, #1
 8002942:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 167;
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <MX_FDCAN2_Init+0x88>)
 8002946:	2202      	movs	r2, #2
 8002948:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <MX_FDCAN2_Init+0x88>)
 800294c:	2202      	movs	r2, #2
 800294e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 17;
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <MX_FDCAN2_Init+0x88>)
 8002952:	2201      	movs	r2, #1
 8002954:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <MX_FDCAN2_Init+0x88>)
 8002958:	2201      	movs	r2, #1
 800295a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 5;
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <MX_FDCAN2_Init+0x88>)
 800295e:	2201      	movs	r2, #1
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 4;
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <MX_FDCAN2_Init+0x88>)
 8002964:	2201      	movs	r2, #1
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <MX_FDCAN2_Init+0x88>)
 800296a:	2200      	movs	r2, #0
 800296c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <MX_FDCAN2_Init+0x88>)
 8002970:	2200      	movs	r2, #0
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <MX_FDCAN2_Init+0x88>)
 8002976:	2200      	movs	r2, #0
 8002978:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800297a:	4805      	ldr	r0, [pc, #20]	; (8002990 <MX_FDCAN2_Init+0x88>)
 800297c:	f003 fb44 	bl	8006008 <HAL_FDCAN_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8002986:	f000 fb85 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000330 	.word	0x20000330
 8002994:	40006800 	.word	0x40006800

08002998 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800299c:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 800299e:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <MX_FDCAN3_Init+0x8c>)
 80029a0:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80029a2:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80029a8:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80029ae:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 80029b6:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80029bc:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029be:	2200      	movs	r2, #0
 80029c0:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80029c2:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 2;
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029ca:	2210      	movs	r2, #16
 80029cc:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 2;
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 167;
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029d6:	2202      	movs	r2, #2
 80029d8:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029dc:	2202      	movs	r2, #2
 80029de:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 17;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 4;
 80029e6:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 5;
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 4;
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8002a0a:	4805      	ldr	r0, [pc, #20]	; (8002a20 <MX_FDCAN3_Init+0x88>)
 8002a0c:	f003 fafc 	bl	8006008 <HAL_FDCAN_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_FDCAN3_Init+0x82>
  {
    Error_Handler();
 8002a16:	f000 fb3d 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000394 	.word	0x20000394
 8002a24:	40006c00 	.word	0x40006c00

08002a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <MX_I2C1_Init+0x74>)
 8002a2e:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <MX_I2C1_Init+0x78>)
 8002a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A0A6FB;
 8002a32:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <MX_I2C1_Init+0x74>)
 8002a34:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <MX_I2C1_Init+0x7c>)
 8002a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a38:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <MX_I2C1_Init+0x74>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <MX_I2C1_Init+0x74>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a44:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <MX_I2C1_Init+0x74>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a4a:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <MX_I2C1_Init+0x74>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <MX_I2C1_Init+0x74>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <MX_I2C1_Init+0x74>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <MX_I2C1_Init+0x74>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a62:	480e      	ldr	r0, [pc, #56]	; (8002a9c <MX_I2C1_Init+0x74>)
 8002a64:	f003 ffca 	bl	80069fc <HAL_I2C_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a6e:	f000 fb11 	bl	8003094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a72:	2100      	movs	r1, #0
 8002a74:	4809      	ldr	r0, [pc, #36]	; (8002a9c <MX_I2C1_Init+0x74>)
 8002a76:	f006 fc51 	bl	800931c <HAL_I2CEx_ConfigAnalogFilter>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a80:	f000 fb08 	bl	8003094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a84:	2100      	movs	r1, #0
 8002a86:	4805      	ldr	r0, [pc, #20]	; (8002a9c <MX_I2C1_Init+0x74>)
 8002a88:	f006 fc93 	bl	80093b2 <HAL_I2CEx_ConfigDigitalFilter>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a92:	f000 faff 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200003f8 	.word	0x200003f8
 8002aa0:	40005400 	.word	0x40005400
 8002aa4:	10a0a6fb 	.word	0x10a0a6fb

08002aa8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <MX_I2C2_Init+0x74>)
 8002aae:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <MX_I2C2_Init+0x78>)
 8002ab0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10A0A6FB;
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <MX_I2C2_Init+0x74>)
 8002ab4:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <MX_I2C2_Init+0x7c>)
 8002ab6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002ab8:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <MX_I2C2_Init+0x74>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002abe:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <MX_I2C2_Init+0x74>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ac4:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <MX_I2C2_Init+0x74>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <MX_I2C2_Init+0x74>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ad0:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <MX_I2C2_Init+0x74>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ad6:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <MX_I2C2_Init+0x74>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <MX_I2C2_Init+0x74>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002ae2:	480e      	ldr	r0, [pc, #56]	; (8002b1c <MX_I2C2_Init+0x74>)
 8002ae4:	f003 ff8a 	bl	80069fc <HAL_I2C_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002aee:	f000 fad1 	bl	8003094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002af2:	2100      	movs	r1, #0
 8002af4:	4809      	ldr	r0, [pc, #36]	; (8002b1c <MX_I2C2_Init+0x74>)
 8002af6:	f006 fc11 	bl	800931c <HAL_I2CEx_ConfigAnalogFilter>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002b00:	f000 fac8 	bl	8003094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002b04:	2100      	movs	r1, #0
 8002b06:	4805      	ldr	r0, [pc, #20]	; (8002b1c <MX_I2C2_Init+0x74>)
 8002b08:	f006 fc53 	bl	80093b2 <HAL_I2CEx_ConfigDigitalFilter>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002b12:	f000 fabf 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	2000044c 	.word	0x2000044c
 8002b20:	40005800 	.word	0x40005800
 8002b24:	10a0a6fb 	.word	0x10a0a6fb

08002b28 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <MX_I2C3_Init+0x74>)
 8002b2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ba0 <MX_I2C3_Init+0x78>)
 8002b30:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10A0A6FB;
 8002b32:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <MX_I2C3_Init+0x74>)
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <MX_I2C3_Init+0x7c>)
 8002b36:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <MX_I2C3_Init+0x74>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <MX_I2C3_Init+0x74>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b44:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <MX_I2C3_Init+0x74>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <MX_I2C3_Init+0x74>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <MX_I2C3_Init+0x74>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <MX_I2C3_Init+0x74>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <MX_I2C3_Init+0x74>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002b62:	480e      	ldr	r0, [pc, #56]	; (8002b9c <MX_I2C3_Init+0x74>)
 8002b64:	f003 ff4a 	bl	80069fc <HAL_I2C_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002b6e:	f000 fa91 	bl	8003094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b72:	2100      	movs	r1, #0
 8002b74:	4809      	ldr	r0, [pc, #36]	; (8002b9c <MX_I2C3_Init+0x74>)
 8002b76:	f006 fbd1 	bl	800931c <HAL_I2CEx_ConfigAnalogFilter>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002b80:	f000 fa88 	bl	8003094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002b84:	2100      	movs	r1, #0
 8002b86:	4805      	ldr	r0, [pc, #20]	; (8002b9c <MX_I2C3_Init+0x74>)
 8002b88:	f006 fc13 	bl	80093b2 <HAL_I2CEx_ConfigDigitalFilter>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002b92:	f000 fa7f 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200004a0 	.word	0x200004a0
 8002ba0:	40007800 	.word	0x40007800
 8002ba4:	10a0a6fb 	.word	0x10a0a6fb

08002ba8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <MX_IWDG_Init+0x34>)
 8002bae:	4a0c      	ldr	r2, [pc, #48]	; (8002be0 <MX_IWDG_Init+0x38>)
 8002bb0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <MX_IWDG_Init+0x34>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <MX_IWDG_Init+0x34>)
 8002bba:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002bbe:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <MX_IWDG_Init+0x34>)
 8002bc2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002bc6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002bc8:	4804      	ldr	r0, [pc, #16]	; (8002bdc <MX_IWDG_Init+0x34>)
 8002bca:	f006 fc3e 	bl	800944a <HAL_IWDG_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002bd4:	f000 fa5e 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000614 	.word	0x20000614
 8002be0:	40003000 	.word	0x40003000

08002be4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <MX_LPUART1_UART_Init+0x90>)
 8002bea:	4a23      	ldr	r2, [pc, #140]	; (8002c78 <MX_LPUART1_UART_Init+0x94>)
 8002bec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002bee:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <MX_LPUART1_UART_Init+0x90>)
 8002bf0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bf4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf6:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <MX_LPUART1_UART_Init+0x90>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <MX_LPUART1_UART_Init+0x90>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <MX_LPUART1_UART_Init+0x90>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002c08:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <MX_LPUART1_UART_Init+0x90>)
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c0e:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <MX_LPUART1_UART_Init+0x90>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c14:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <MX_LPUART1_UART_Init+0x90>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <MX_LPUART1_UART_Init+0x90>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c20:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <MX_LPUART1_UART_Init+0x90>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002c26:	2300      	movs	r3, #0
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4811      	ldr	r0, [pc, #68]	; (8002c74 <MX_LPUART1_UART_Init+0x90>)
 8002c2e:	f009 f8be 	bl	800bdae <HAL_RS485Ex_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002c38:	f000 fa2c 	bl	8003094 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	480d      	ldr	r0, [pc, #52]	; (8002c74 <MX_LPUART1_UART_Init+0x90>)
 8002c40:	f009 f957 	bl	800bef2 <HAL_UARTEx_SetTxFifoThreshold>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002c4a:	f000 fa23 	bl	8003094 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4808      	ldr	r0, [pc, #32]	; (8002c74 <MX_LPUART1_UART_Init+0x90>)
 8002c52:	f009 f98c 	bl	800bf6e <HAL_UARTEx_SetRxFifoThreshold>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002c5c:	f000 fa1a 	bl	8003094 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002c60:	4804      	ldr	r0, [pc, #16]	; (8002c74 <MX_LPUART1_UART_Init+0x90>)
 8002c62:	f009 f90d 	bl	800be80 <HAL_UARTEx_DisableFifoMode>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002c6c:	f000 fa12 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000624 	.word	0x20000624
 8002c78:	40008000 	.word	0x40008000

08002c7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002c82:	4a1c      	ldr	r2, [pc, #112]	; (8002cf4 <MX_SPI1_Init+0x78>)
 8002c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002c88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c8e:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002c94:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002c96:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002c9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ca2:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002cca:	2207      	movs	r2, #7
 8002ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cda:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <MX_SPI1_Init+0x74>)
 8002cdc:	f007 fd58 	bl	800a790 <HAL_SPI_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ce6:	f000 f9d5 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200006b8 	.word	0x200006b8
 8002cf4:	40013000 	.word	0x40013000

08002cf8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <MX_SPI3_Init+0x78>)
 8002d00:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002d04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d08:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002d10:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002d12:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002d16:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d1e:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002d46:	2207      	movs	r2, #7
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002d52:	2208      	movs	r2, #8
 8002d54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002d56:	4805      	ldr	r0, [pc, #20]	; (8002d6c <MX_SPI3_Init+0x74>)
 8002d58:	f007 fd1a 	bl	800a790 <HAL_SPI_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002d62:	f000 f997 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	2000071c 	.word	0x2000071c
 8002d70:	40003c00 	.word	0x40003c00

08002d74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d7a:	f107 0310 	add.w	r3, r7, #16
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d88:	1d3b      	adds	r3, r7, #4
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d92:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <MX_TIM2_Init+0x98>)
 8002d94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16999;
 8002d9a:	4b1c      	ldr	r3, [pc, #112]	; (8002e0c <MX_TIM2_Init+0x98>)
 8002d9c:	f244 2267 	movw	r2, #16999	; 0x4267
 8002da0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002da2:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <MX_TIM2_Init+0x98>)
 8002da4:	2210      	movs	r2, #16
 8002da6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002da8:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <MX_TIM2_Init+0x98>)
 8002daa:	f242 7210 	movw	r2, #10000	; 0x2710
 8002dae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <MX_TIM2_Init+0x98>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <MX_TIM2_Init+0x98>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dbc:	4813      	ldr	r0, [pc, #76]	; (8002e0c <MX_TIM2_Init+0x98>)
 8002dbe:	f007 fd92 	bl	800a8e6 <HAL_TIM_Base_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002dc8:	f000 f964 	bl	8003094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dd2:	f107 0310 	add.w	r3, r7, #16
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	480c      	ldr	r0, [pc, #48]	; (8002e0c <MX_TIM2_Init+0x98>)
 8002dda:	f007 ff59 	bl	800ac90 <HAL_TIM_ConfigClockSource>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002de4:	f000 f956 	bl	8003094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de8:	2300      	movs	r3, #0
 8002dea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	4619      	mov	r1, r3
 8002df4:	4805      	ldr	r0, [pc, #20]	; (8002e0c <MX_TIM2_Init+0x98>)
 8002df6:	f008 f9e3 	bl	800b1c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002e00:	f000 f948 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e04:	bf00      	nop
 8002e06:	3720      	adds	r7, #32
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20000780 	.word	0x20000780

08002e10 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002e14:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <MX_USB_PCD_Init+0x48>)
 8002e16:	4a11      	ldr	r2, [pc, #68]	; (8002e5c <MX_USB_PCD_Init+0x4c>)
 8002e18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <MX_USB_PCD_Init+0x48>)
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002e20:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <MX_USB_PCD_Init+0x48>)
 8002e22:	2202      	movs	r2, #2
 8002e24:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <MX_USB_PCD_Init+0x48>)
 8002e28:	2202      	movs	r2, #2
 8002e2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <MX_USB_PCD_Init+0x48>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <MX_USB_PCD_Init+0x48>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002e38:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <MX_USB_PCD_Init+0x48>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <MX_USB_PCD_Init+0x48>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002e44:	4804      	ldr	r0, [pc, #16]	; (8002e58 <MX_USB_PCD_Init+0x48>)
 8002e46:	f006 fb4f 	bl	80094e8 <HAL_PCD_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002e50:	f000 f920 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	200007cc 	.word	0x200007cc
 8002e5c:	40005c00 	.word	0x40005c00

08002e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002e66:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <MX_DMA_Init+0x90>)
 8002e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6a:	4a21      	ldr	r2, [pc, #132]	; (8002ef0 <MX_DMA_Init+0x90>)
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	6493      	str	r3, [r2, #72]	; 0x48
 8002e72:	4b1f      	ldr	r3, [pc, #124]	; (8002ef0 <MX_DMA_Init+0x90>)
 8002e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ef0 <MX_DMA_Init+0x90>)
 8002e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e82:	4a1b      	ldr	r2, [pc, #108]	; (8002ef0 <MX_DMA_Init+0x90>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6493      	str	r3, [r2, #72]	; 0x48
 8002e8a:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <MX_DMA_Init+0x90>)
 8002e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2100      	movs	r1, #0
 8002e9a:	200b      	movs	r0, #11
 8002e9c:	f002 fd97 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ea0:	200b      	movs	r0, #11
 8002ea2:	f002 fdae 	bl	8005a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	200c      	movs	r0, #12
 8002eac:	f002 fd8f 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002eb0:	200c      	movs	r0, #12
 8002eb2:	f002 fda6 	bl	8005a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2100      	movs	r1, #0
 8002eba:	200d      	movs	r0, #13
 8002ebc:	f002 fd87 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002ec0:	200d      	movs	r0, #13
 8002ec2:	f002 fd9e 	bl	8005a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	200e      	movs	r0, #14
 8002ecc:	f002 fd7f 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002ed0:	200e      	movs	r0, #14
 8002ed2:	f002 fd96 	bl	8005a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2100      	movs	r1, #0
 8002eda:	200f      	movs	r0, #15
 8002edc:	f002 fd77 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002ee0:	200f      	movs	r0, #15
 8002ee2:	f002 fd8e 	bl	8005a02 <HAL_NVIC_EnableIRQ>

}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08c      	sub	sp, #48	; 0x30
 8002ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efa:	f107 031c 	add.w	r3, r7, #28
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	605a      	str	r2, [r3, #4]
 8002f04:	609a      	str	r2, [r3, #8]
 8002f06:	60da      	str	r2, [r3, #12]
 8002f08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f0a:	4b5d      	ldr	r3, [pc, #372]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0e:	4a5c      	ldr	r2, [pc, #368]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f10:	f043 0310 	orr.w	r3, r3, #16
 8002f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f16:	4b5a      	ldr	r3, [pc, #360]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	61bb      	str	r3, [r7, #24]
 8002f20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f22:	4b57      	ldr	r3, [pc, #348]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f26:	4a56      	ldr	r2, [pc, #344]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f2e:	4b54      	ldr	r3, [pc, #336]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f3a:	4b51      	ldr	r3, [pc, #324]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3e:	4a50      	ldr	r2, [pc, #320]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f40:	f043 0320 	orr.w	r3, r3, #32
 8002f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f46:	4b4e      	ldr	r3, [pc, #312]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f52:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	4a4a      	ldr	r2, [pc, #296]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f5e:	4b48      	ldr	r3, [pc, #288]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6a:	4b45      	ldr	r3, [pc, #276]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6e:	4a44      	ldr	r2, [pc, #272]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f76:	4b42      	ldr	r3, [pc, #264]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f82:	4b3f      	ldr	r3, [pc, #252]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f86:	4a3e      	ldr	r2, [pc, #248]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f88:	f043 0308 	orr.w	r3, r3, #8
 8002f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f8e:	4b3c      	ldr	r3, [pc, #240]	; (8003080 <MX_GPIO_Init+0x18c>)
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f64e 71c0 	movw	r1, #61376	; 0xefc0
 8002fa0:	4838      	ldr	r0, [pc, #224]	; (8003084 <MX_GPIO_Init+0x190>)
 8002fa2:	f003 fd13 	bl	80069cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fac:	4836      	ldr	r0, [pc, #216]	; (8003088 <MX_GPIO_Init+0x194>)
 8002fae:	f003 fd0d 	bl	80069cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fb8:	4834      	ldr	r0, [pc, #208]	; (800308c <MX_GPIO_Init+0x198>)
 8002fba:	f003 fd07 	bl	80069cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f64f 711c 	movw	r1, #65308	; 0xff1c
 8002fc4:	4832      	ldr	r0, [pc, #200]	; (8003090 <MX_GPIO_Init+0x19c>)
 8002fc6:	f003 fd01 	bl	80069cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002fca:	233c      	movs	r3, #60	; 0x3c
 8002fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fd6:	f107 031c 	add.w	r3, r7, #28
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4829      	ldr	r0, [pc, #164]	; (8003084 <MX_GPIO_Init+0x190>)
 8002fde:	f003 fb73 	bl	80066c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9
                           PE10 PE11 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002fe2:	f64e 73c0 	movw	r3, #61376	; 0xefc0
 8002fe6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ff4:	f107 031c 	add.w	r3, r7, #28
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4822      	ldr	r0, [pc, #136]	; (8003084 <MX_GPIO_Init+0x190>)
 8002ffc:	f003 fb64 	bl	80066c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003000:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003006:	2301      	movs	r3, #1
 8003008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300e:	2300      	movs	r3, #0
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003012:	f107 031c 	add.w	r3, r7, #28
 8003016:	4619      	mov	r1, r3
 8003018:	481b      	ldr	r0, [pc, #108]	; (8003088 <MX_GPIO_Init+0x194>)
 800301a:	f003 fb55 	bl	80066c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800301e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003024:	2301      	movs	r3, #1
 8003026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302c:	2300      	movs	r3, #0
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003030:	f107 031c 	add.w	r3, r7, #28
 8003034:	4619      	mov	r1, r3
 8003036:	4815      	ldr	r0, [pc, #84]	; (800308c <MX_GPIO_Init+0x198>)
 8003038:	f003 fb46 	bl	80066c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800303c:	f64f 731c 	movw	r3, #65308	; 0xff1c
 8003040:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003042:	2301      	movs	r3, #1
 8003044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304a:	2300      	movs	r3, #0
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800304e:	f107 031c 	add.w	r3, r7, #28
 8003052:	4619      	mov	r1, r3
 8003054:	480e      	ldr	r0, [pc, #56]	; (8003090 <MX_GPIO_Init+0x19c>)
 8003056:	f003 fb37 	bl	80066c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800305a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800305e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003060:	2300      	movs	r3, #0
 8003062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003068:	f107 031c 	add.w	r3, r7, #28
 800306c:	4619      	mov	r1, r3
 800306e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003072:	f003 fb29 	bl	80066c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003076:	bf00      	nop
 8003078:	3730      	adds	r7, #48	; 0x30
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
 8003084:	48001000 	.word	0x48001000
 8003088:	48000800 	.word	0x48000800
 800308c:	48000400 	.word	0x48000400
 8003090:	48000c00 	.word	0x48000c00

08003094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003098:	b672      	cpsid	i
}
 800309a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800309c:	e7fe      	b.n	800309c <Error_Handler+0x8>
	...

080030a0 <HV_on>:
	HAL_GPIO_WritePin(GPIOE, RELAY9, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_SET); //RESISTOR ON
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_SET);
	HAL_TIM_Base_Start_IT(&htim2);
}
void HV_on(void){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, RELAY11, GPIO_PIN_SET); //HIGHSIDE ON
 80030a4:	4814      	ldr	r0, [pc, #80]	; (80030f8 <HV_on+0x58>)
 80030a6:	f009 f828 	bl	800c0fa <atoi>
 80030aa:	4603      	mov	r3, r0
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2201      	movs	r2, #1
 80030b0:	4619      	mov	r1, r3
 80030b2:	4812      	ldr	r0, [pc, #72]	; (80030fc <HV_on+0x5c>)
 80030b4:	f003 fc8a 	bl	80069cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY16, GPIO_PIN_SET);
 80030b8:	4811      	ldr	r0, [pc, #68]	; (8003100 <HV_on+0x60>)
 80030ba:	f009 f81e 	bl	800c0fa <atoi>
 80030be:	4603      	mov	r3, r0
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2201      	movs	r2, #1
 80030c4:	4619      	mov	r1, r3
 80030c6:	480d      	ldr	r0, [pc, #52]	; (80030fc <HV_on+0x5c>)
 80030c8:	f003 fc80 	bl	80069cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_RESET); //RESISTOR OFF
 80030cc:	480d      	ldr	r0, [pc, #52]	; (8003104 <HV_on+0x64>)
 80030ce:	f009 f814 	bl	800c0fa <atoi>
 80030d2:	4603      	mov	r3, r0
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2200      	movs	r2, #0
 80030d8:	4619      	mov	r1, r3
 80030da:	4808      	ldr	r0, [pc, #32]	; (80030fc <HV_on+0x5c>)
 80030dc:	f003 fc76 	bl	80069cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_RESET);
 80030e0:	4809      	ldr	r0, [pc, #36]	; (8003108 <HV_on+0x68>)
 80030e2:	f009 f80a 	bl	800c0fa <atoi>
 80030e6:	4603      	mov	r3, r0
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2200      	movs	r2, #0
 80030ec:	4619      	mov	r1, r3
 80030ee:	4803      	ldr	r0, [pc, #12]	; (80030fc <HV_on+0x5c>)
 80030f0:	f003 fc6c 	bl	80069cc <HAL_GPIO_WritePin>

}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	0800d054 	.word	0x0800d054
 80030fc:	48001000 	.word	0x48001000
 8003100:	0800d060 	.word	0x0800d060
 8003104:	0800d03c 	.word	0x0800d03c
 8003108:	0800d048 	.word	0x0800d048

0800310c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003112:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <HAL_MspInit+0x44>)
 8003114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003116:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <HAL_MspInit+0x44>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6613      	str	r3, [r2, #96]	; 0x60
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <HAL_MspInit+0x44>)
 8003120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_MspInit+0x44>)
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <HAL_MspInit+0x44>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	6593      	str	r3, [r2, #88]	; 0x58
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_MspInit+0x44>)
 8003138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003142:	f006 fb6d 	bl	8009820 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000

08003154 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b0a0      	sub	sp, #128	; 0x80
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800316c:	f107 0318 	add.w	r3, r7, #24
 8003170:	2254      	movs	r2, #84	; 0x54
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f009 faf3 	bl	800c760 <memset>
  if(hadc->Instance==ADC1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003182:	d160      	bne.n	8003246 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003184:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003188:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800318a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800318e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003190:	f107 0318 	add.w	r3, r7, #24
 8003194:	4618      	mov	r0, r3
 8003196:	f007 f8ad 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80031a0:	f7ff ff78 	bl	8003094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80031a4:	4b5d      	ldr	r3, [pc, #372]	; (800331c <HAL_ADC_MspInit+0x1c8>)
 80031a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a8:	4a5c      	ldr	r2, [pc, #368]	; (800331c <HAL_ADC_MspInit+0x1c8>)
 80031aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031b0:	4b5a      	ldr	r3, [pc, #360]	; (800331c <HAL_ADC_MspInit+0x1c8>)
 80031b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031bc:	4b57      	ldr	r3, [pc, #348]	; (800331c <HAL_ADC_MspInit+0x1c8>)
 80031be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c0:	4a56      	ldr	r2, [pc, #344]	; (800331c <HAL_ADC_MspInit+0x1c8>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031c8:	4b54      	ldr	r3, [pc, #336]	; (800331c <HAL_ADC_MspInit+0x1c8>)
 80031ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80031d4:	230f      	movs	r3, #15
 80031d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031d8:	2303      	movs	r3, #3
 80031da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031e4:	4619      	mov	r1, r3
 80031e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ea:	f003 fa6d 	bl	80066c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80031ee:	4b4c      	ldr	r3, [pc, #304]	; (8003320 <HAL_ADC_MspInit+0x1cc>)
 80031f0:	4a4c      	ldr	r2, [pc, #304]	; (8003324 <HAL_ADC_MspInit+0x1d0>)
 80031f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80031f4:	4b4a      	ldr	r3, [pc, #296]	; (8003320 <HAL_ADC_MspInit+0x1cc>)
 80031f6:	2205      	movs	r2, #5
 80031f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031fa:	4b49      	ldr	r3, [pc, #292]	; (8003320 <HAL_ADC_MspInit+0x1cc>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003200:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_ADC_MspInit+0x1cc>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003206:	4b46      	ldr	r3, [pc, #280]	; (8003320 <HAL_ADC_MspInit+0x1cc>)
 8003208:	2280      	movs	r2, #128	; 0x80
 800320a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800320c:	4b44      	ldr	r3, [pc, #272]	; (8003320 <HAL_ADC_MspInit+0x1cc>)
 800320e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003212:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003214:	4b42      	ldr	r3, [pc, #264]	; (8003320 <HAL_ADC_MspInit+0x1cc>)
 8003216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800321a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800321c:	4b40      	ldr	r3, [pc, #256]	; (8003320 <HAL_ADC_MspInit+0x1cc>)
 800321e:	2200      	movs	r2, #0
 8003220:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003222:	4b3f      	ldr	r3, [pc, #252]	; (8003320 <HAL_ADC_MspInit+0x1cc>)
 8003224:	2200      	movs	r2, #0
 8003226:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003228:	483d      	ldr	r0, [pc, #244]	; (8003320 <HAL_ADC_MspInit+0x1cc>)
 800322a:	f002 fc05 	bl	8005a38 <HAL_DMA_Init>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003234:	f7ff ff2e 	bl	8003094 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a39      	ldr	r2, [pc, #228]	; (8003320 <HAL_ADC_MspInit+0x1cc>)
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
 800323e:	4a38      	ldr	r2, [pc, #224]	; (8003320 <HAL_ADC_MspInit+0x1cc>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003244:	e065      	b.n	8003312 <HAL_ADC_MspInit+0x1be>
  else if(hadc->Instance==ADC5)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a37      	ldr	r2, [pc, #220]	; (8003328 <HAL_ADC_MspInit+0x1d4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d160      	bne.n	8003312 <HAL_ADC_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003254:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8003256:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800325a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800325c:	f107 0318 	add.w	r3, r7, #24
 8003260:	4618      	mov	r0, r3
 8003262:	f007 f847 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 800326c:	f7ff ff12 	bl	8003094 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8003270:	4b2a      	ldr	r3, [pc, #168]	; (800331c <HAL_ADC_MspInit+0x1c8>)
 8003272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003274:	4a29      	ldr	r2, [pc, #164]	; (800331c <HAL_ADC_MspInit+0x1c8>)
 8003276:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800327a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800327c:	4b27      	ldr	r3, [pc, #156]	; (800331c <HAL_ADC_MspInit+0x1c8>)
 800327e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003288:	4b24      	ldr	r3, [pc, #144]	; (800331c <HAL_ADC_MspInit+0x1c8>)
 800328a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328c:	4a23      	ldr	r2, [pc, #140]	; (800331c <HAL_ADC_MspInit+0x1c8>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003294:	4b21      	ldr	r3, [pc, #132]	; (800331c <HAL_ADC_MspInit+0x1c8>)
 8003296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032a6:	2303      	movs	r3, #3
 80032a8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032b2:	4619      	mov	r1, r3
 80032b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032b8:	f003 fa06 	bl	80066c8 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_ADC_MspInit+0x1d8>)
 80032be:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <HAL_ADC_MspInit+0x1dc>)
 80032c0:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80032c2:	4b1a      	ldr	r3, [pc, #104]	; (800332c <HAL_ADC_MspInit+0x1d8>)
 80032c4:	2227      	movs	r2, #39	; 0x27
 80032c6:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_ADC_MspInit+0x1d8>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ce:	4b17      	ldr	r3, [pc, #92]	; (800332c <HAL_ADC_MspInit+0x1d8>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80032d4:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_ADC_MspInit+0x1d8>)
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_ADC_MspInit+0x1d8>)
 80032dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e0:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032e2:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_ADC_MspInit+0x1d8>)
 80032e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032e8:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_ADC_MspInit+0x1d8>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80032f0:	4b0e      	ldr	r3, [pc, #56]	; (800332c <HAL_ADC_MspInit+0x1d8>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80032f6:	480d      	ldr	r0, [pc, #52]	; (800332c <HAL_ADC_MspInit+0x1d8>)
 80032f8:	f002 fb9e 	bl	8005a38 <HAL_DMA_Init>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8003302:	f7ff fec7 	bl	8003094 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a08      	ldr	r2, [pc, #32]	; (800332c <HAL_ADC_MspInit+0x1d8>)
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
 800330c:	4a07      	ldr	r2, [pc, #28]	; (800332c <HAL_ADC_MspInit+0x1d8>)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003312:	bf00      	nop
 8003314:	3780      	adds	r7, #128	; 0x80
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	2000020c 	.word	0x2000020c
 8003324:	40020008 	.word	0x40020008
 8003328:	50000600 	.word	0x50000600
 800332c:	2000026c 	.word	0x2000026c
 8003330:	40020058 	.word	0x40020058

08003334 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b0a2      	sub	sp, #136	; 0x88
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800334c:	f107 0320 	add.w	r3, r7, #32
 8003350:	2254      	movs	r2, #84	; 0x54
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f009 fa03 	bl	800c760 <memset>
  if(hfdcan->Instance==FDCAN1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6e      	ldr	r2, [pc, #440]	; (8003518 <HAL_FDCAN_MspInit+0x1e4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d143      	bne.n	80033ec <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003368:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800336a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800336e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003370:	f107 0320 	add.w	r3, r7, #32
 8003374:	4618      	mov	r0, r3
 8003376:	f006 ffbd 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003380:	f7ff fe88 	bl	8003094 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003384:	4b65      	ldr	r3, [pc, #404]	; (800351c <HAL_FDCAN_MspInit+0x1e8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3301      	adds	r3, #1
 800338a:	4a64      	ldr	r2, [pc, #400]	; (800351c <HAL_FDCAN_MspInit+0x1e8>)
 800338c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800338e:	4b63      	ldr	r3, [pc, #396]	; (800351c <HAL_FDCAN_MspInit+0x1e8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d10b      	bne.n	80033ae <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003396:	4b62      	ldr	r3, [pc, #392]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 8003398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339a:	4a61      	ldr	r2, [pc, #388]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 800339c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033a0:	6593      	str	r3, [r2, #88]	; 0x58
 80033a2:	4b5f      	ldr	r3, [pc, #380]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ae:	4b5c      	ldr	r3, [pc, #368]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 80033b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b2:	4a5b      	ldr	r2, [pc, #364]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 80033b4:	f043 0308 	orr.w	r3, r3, #8
 80033b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033ba:	4b59      	ldr	r3, [pc, #356]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033c6:	2303      	movs	r3, #3
 80033c8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ca:	2302      	movs	r3, #2
 80033cc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80033d8:	2309      	movs	r3, #9
 80033da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80033e2:	4619      	mov	r1, r3
 80033e4:	484f      	ldr	r0, [pc, #316]	; (8003524 <HAL_FDCAN_MspInit+0x1f0>)
 80033e6:	f003 f96f 	bl	80066c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

 80033ea:	e091      	b.n	8003510 <HAL_FDCAN_MspInit+0x1dc>

 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a4d      	ldr	r2, [pc, #308]	; (8003528 <HAL_FDCAN_MspInit+0x1f4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d144      	bne.n	8003480 <HAL_FDCAN_MspInit+0x14c>

 80033f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033fa:	623b      	str	r3, [r7, #32]
  /** Initializes the peripherals clocks
 80033fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003400:	65bb      	str	r3, [r7, #88]	; 0x58
  */
 8003402:	f107 0320 	add.w	r3, r7, #32
 8003406:	4618      	mov	r0, r3
 8003408:	f006 ff74 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_FDCAN_MspInit+0xe2>
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003412:	f7ff fe3f 	bl	8003094 <Error_Handler>
    }
 8003416:	4b41      	ldr	r3, [pc, #260]	; (800351c <HAL_FDCAN_MspInit+0x1e8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	4a3f      	ldr	r2, [pc, #252]	; (800351c <HAL_FDCAN_MspInit+0x1e8>)
 800341e:	6013      	str	r3, [r2, #0]

 8003420:	4b3e      	ldr	r3, [pc, #248]	; (800351c <HAL_FDCAN_MspInit+0x1e8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d10b      	bne.n	8003440 <HAL_FDCAN_MspInit+0x10c>
    /* Peripheral clock enable */
 8003428:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	4a3c      	ldr	r2, [pc, #240]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 800342e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003432:	6593      	str	r3, [r2, #88]	; 0x58
 8003434:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003440:	4b37      	ldr	r3, [pc, #220]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 8003442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003444:	4a36      	ldr	r2, [pc, #216]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 8003446:	f043 0302 	orr.w	r3, r3, #2
 800344a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800344c:	4b34      	ldr	r3, [pc, #208]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	693b      	ldr	r3, [r7, #16]
    PB12     ------> FDCAN2_RX
 8003458:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800345c:	677b      	str	r3, [r7, #116]	; 0x74
    PB13     ------> FDCAN2_TX
 800345e:	2302      	movs	r3, #2
 8003460:	67bb      	str	r3, [r7, #120]	; 0x78
    */
 8003462:	2300      	movs	r3, #0
 8003464:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003466:	2300      	movs	r3, #0
 8003468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346c:	2309      	movs	r3, #9
 800346e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003476:	4619      	mov	r1, r3
 8003478:	482c      	ldr	r0, [pc, #176]	; (800352c <HAL_FDCAN_MspInit+0x1f8>)
 800347a:	f003 f925 	bl	80066c8 <HAL_GPIO_Init>

 800347e:	e047      	b.n	8003510 <HAL_FDCAN_MspInit+0x1dc>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <HAL_FDCAN_MspInit+0x1fc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d142      	bne.n	8003510 <HAL_FDCAN_MspInit+0x1dc>
  /* USER CODE BEGIN FDCAN3_MspInit 0 */
 800348a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800348e:	623b      	str	r3, [r7, #32]

 8003490:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003494:	65bb      	str	r3, [r7, #88]	; 0x58
  /* USER CODE END FDCAN3_MspInit 0 */
 8003496:	f107 0320 	add.w	r3, r7, #32
 800349a:	4618      	mov	r0, r3
 800349c:	f006 ff2a 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_FDCAN_MspInit+0x176>
  /** Initializes the peripherals clocks
 80034a6:	f7ff fdf5 	bl	8003094 <Error_Handler>
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034aa:	4b1c      	ldr	r3, [pc, #112]	; (800351c <HAL_FDCAN_MspInit+0x1e8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3301      	adds	r3, #1
 80034b0:	4a1a      	ldr	r2, [pc, #104]	; (800351c <HAL_FDCAN_MspInit+0x1e8>)
 80034b2:	6013      	str	r3, [r2, #0]
    {
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_FDCAN_MspInit+0x1e8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d10b      	bne.n	80034d4 <HAL_FDCAN_MspInit+0x1a0>
      Error_Handler();
 80034bc:	4b18      	ldr	r3, [pc, #96]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 80034be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c0:	4a17      	ldr	r2, [pc, #92]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 80034c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034c6:	6593      	str	r3, [r2, #88]	; 0x58
 80034c8:	4b15      	ldr	r3, [pc, #84]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
 80034d4:	4b12      	ldr	r3, [pc, #72]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 80034d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d8:	4a11      	ldr	r2, [pc, #68]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 80034da:	f043 0302 	orr.w	r3, r3, #2
 80034de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <HAL_FDCAN_MspInit+0x1ec>)
 80034e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]

 80034ec:	2318      	movs	r3, #24
 80034ee:	677b      	str	r3, [r7, #116]	; 0x74
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f0:	2302      	movs	r3, #2
 80034f2:	67bb      	str	r3, [r7, #120]	; 0x78
    /**FDCAN3 GPIO Configuration
 80034f4:	2300      	movs	r3, #0
 80034f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    PB3     ------> FDCAN3_RX
 80034f8:	2300      	movs	r3, #0
 80034fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PB4     ------> FDCAN3_TX
 80034fe:	230b      	movs	r3, #11
 8003500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    */
 8003504:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003508:	4619      	mov	r1, r3
 800350a:	4808      	ldr	r0, [pc, #32]	; (800352c <HAL_FDCAN_MspInit+0x1f8>)
 800350c:	f003 f8dc 	bl	80066c8 <HAL_GPIO_Init>

 8003510:	bf00      	nop
 8003512:	3788      	adds	r7, #136	; 0x88
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40006400 	.word	0x40006400
 800351c:	20000aac 	.word	0x20000aac
 8003520:	40021000 	.word	0x40021000
 8003524:	48000c00 	.word	0x48000c00
 8003528:	40006800 	.word	0x40006800
 800352c:	48000400 	.word	0x48000400
 8003530:	40006c00 	.word	0x40006c00

08003534 <HAL_I2C_MspInit>:
    PB4     ------> FDCAN3_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4);

    /* FDCAN3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(FDCAN3_IT1_IRQn);
 8003534:	b580      	push	{r7, lr}
 8003536:	b0a4      	sub	sp, #144	; 0x90
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FDCAN3_MspDeInit 1 */
 800353c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]

 800354c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003550:	2254      	movs	r2, #84	; 0x54
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f009 f903 	bl	800c760 <memset>
  /* USER CODE END FDCAN3_MspDeInit 1 */
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a8a      	ldr	r2, [pc, #552]	; (8003788 <HAL_I2C_MspInit+0x254>)
 8003560:	4293      	cmp	r3, r2
 8003562:	f040 80af 	bne.w	80036c4 <HAL_I2C_MspInit+0x190>
}

/**
* @brief I2C MSP Initialization
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
 8003566:	2340      	movs	r3, #64	; 0x40
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
* @retval None
 800356a:	2300      	movs	r3, #0
 800356c:	647b      	str	r3, [r7, #68]	; 0x44
*/
 800356e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003572:	4618      	mov	r0, r3
 8003574:	f006 febe 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_MspInit+0x4e>
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800357e:	f7ff fd89 	bl	8003094 <Error_Handler>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
  if(hi2c->Instance==I2C1)
 8003582:	4b82      	ldr	r3, [pc, #520]	; (800378c <HAL_I2C_MspInit+0x258>)
 8003584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003586:	4a81      	ldr	r2, [pc, #516]	; (800378c <HAL_I2C_MspInit+0x258>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800358e:	4b7f      	ldr	r3, [pc, #508]	; (800378c <HAL_I2C_MspInit+0x258>)
 8003590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  {
 800359a:	4b7c      	ldr	r3, [pc, #496]	; (800378c <HAL_I2C_MspInit+0x258>)
 800359c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800359e:	4a7b      	ldr	r2, [pc, #492]	; (800378c <HAL_I2C_MspInit+0x258>)
 80035a0:	f043 0302 	orr.w	r3, r3, #2
 80035a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035a6:	4b79      	ldr	r3, [pc, #484]	; (800378c <HAL_I2C_MspInit+0x258>)
 80035a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
 80035b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  */
 80035b8:	2312      	movs	r3, #18
 80035ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80035be:	2300      	movs	r3, #0
 80035c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035ca:	2304      	movs	r3, #4
 80035cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    {
 80035d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035d4:	4619      	mov	r1, r3
 80035d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035da:	f003 f875 	bl	80066c8 <HAL_GPIO_Init>
      Error_Handler();
    }
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	67fb      	str	r3, [r7, #124]	; 0x7c

 80035e2:	2312      	movs	r3, #18
 80035e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e8:	2300      	movs	r3, #0
 80035ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    /**I2C1 GPIO Configuration
 80035f4:	2304      	movs	r3, #4
 80035f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PA15     ------> I2C1_SCL
 80035fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035fe:	4619      	mov	r1, r3
 8003600:	4863      	ldr	r0, [pc, #396]	; (8003790 <HAL_I2C_MspInit+0x25c>)
 8003602:	f003 f861 	bl	80066c8 <HAL_GPIO_Init>
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003606:	4b61      	ldr	r3, [pc, #388]	; (800378c <HAL_I2C_MspInit+0x258>)
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360a:	4a60      	ldr	r2, [pc, #384]	; (800378c <HAL_I2C_MspInit+0x258>)
 800360c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003610:	6593      	str	r3, [r2, #88]	; 0x58
 8003612:	4b5e      	ldr	r3, [pc, #376]	; (800378c <HAL_I2C_MspInit+0x258>)
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800361e:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <HAL_I2C_MspInit+0x260>)
 8003620:	4a5d      	ldr	r2, [pc, #372]	; (8003798 <HAL_I2C_MspInit+0x264>)
 8003622:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003624:	4b5b      	ldr	r3, [pc, #364]	; (8003794 <HAL_I2C_MspInit+0x260>)
 8003626:	2210      	movs	r2, #16
 8003628:	605a      	str	r2, [r3, #4]

 800362a:	4b5a      	ldr	r3, [pc, #360]	; (8003794 <HAL_I2C_MspInit+0x260>)
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003630:	4b58      	ldr	r3, [pc, #352]	; (8003794 <HAL_I2C_MspInit+0x260>)
 8003632:	2200      	movs	r2, #0
 8003634:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003636:	4b57      	ldr	r3, [pc, #348]	; (8003794 <HAL_I2C_MspInit+0x260>)
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	4b55      	ldr	r3, [pc, #340]	; (8003794 <HAL_I2C_MspInit+0x260>)
 800363e:	2200      	movs	r2, #0
 8003640:	615a      	str	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003642:	4b54      	ldr	r3, [pc, #336]	; (8003794 <HAL_I2C_MspInit+0x260>)
 8003644:	2200      	movs	r2, #0
 8003646:	619a      	str	r2, [r3, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003648:	4b52      	ldr	r3, [pc, #328]	; (8003794 <HAL_I2C_MspInit+0x260>)
 800364a:	2200      	movs	r2, #0
 800364c:	61da      	str	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364e:	4b51      	ldr	r3, [pc, #324]	; (8003794 <HAL_I2C_MspInit+0x260>)
 8003650:	2200      	movs	r2, #0
 8003652:	621a      	str	r2, [r3, #32]

 8003654:	484f      	ldr	r0, [pc, #316]	; (8003794 <HAL_I2C_MspInit+0x260>)
 8003656:	f002 f9ef 	bl	8005a38 <HAL_DMA_Init>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_I2C_MspInit+0x130>
    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003660:	f7ff fd18 	bl	8003094 <Error_Handler>

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a4b      	ldr	r2, [pc, #300]	; (8003794 <HAL_I2C_MspInit+0x260>)
 8003668:	63da      	str	r2, [r3, #60]	; 0x3c
 800366a:	4a4a      	ldr	r2, [pc, #296]	; (8003794 <HAL_I2C_MspInit+0x260>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_i2c1_rx.Instance = DMA1_Channel2;
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003670:	4b4a      	ldr	r3, [pc, #296]	; (800379c <HAL_I2C_MspInit+0x268>)
 8003672:	4a4b      	ldr	r2, [pc, #300]	; (80037a0 <HAL_I2C_MspInit+0x26c>)
 8003674:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003676:	4b49      	ldr	r3, [pc, #292]	; (800379c <HAL_I2C_MspInit+0x268>)
 8003678:	2211      	movs	r2, #17
 800367a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800367c:	4b47      	ldr	r3, [pc, #284]	; (800379c <HAL_I2C_MspInit+0x268>)
 800367e:	2210      	movs	r2, #16
 8003680:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003682:	4b46      	ldr	r3, [pc, #280]	; (800379c <HAL_I2C_MspInit+0x268>)
 8003684:	2200      	movs	r2, #0
 8003686:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003688:	4b44      	ldr	r3, [pc, #272]	; (800379c <HAL_I2C_MspInit+0x268>)
 800368a:	2280      	movs	r2, #128	; 0x80
 800368c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800368e:	4b43      	ldr	r3, [pc, #268]	; (800379c <HAL_I2C_MspInit+0x268>)
 8003690:	2200      	movs	r2, #0
 8003692:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003694:	4b41      	ldr	r3, [pc, #260]	; (800379c <HAL_I2C_MspInit+0x268>)
 8003696:	2200      	movs	r2, #0
 8003698:	619a      	str	r2, [r3, #24]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800369a:	4b40      	ldr	r3, [pc, #256]	; (800379c <HAL_I2C_MspInit+0x268>)
 800369c:	2200      	movs	r2, #0
 800369e:	61da      	str	r2, [r3, #28]
    {
 80036a0:	4b3e      	ldr	r3, [pc, #248]	; (800379c <HAL_I2C_MspInit+0x268>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	621a      	str	r2, [r3, #32]
      Error_Handler();
 80036a6:	483d      	ldr	r0, [pc, #244]	; (800379c <HAL_I2C_MspInit+0x268>)
 80036a8:	f002 f9c6 	bl	8005a38 <HAL_DMA_Init>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_MspInit+0x182>
    }

 80036b2:	f7ff fcef 	bl	8003094 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);

    /* I2C1_TX Init */
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a38      	ldr	r2, [pc, #224]	; (800379c <HAL_I2C_MspInit+0x268>)
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
 80036bc:	4a37      	ldr	r2, [pc, #220]	; (800379c <HAL_I2C_MspInit+0x268>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036c2:	e0dd      	b.n	8003880 <HAL_I2C_MspInit+0x34c>
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a36      	ldr	r2, [pc, #216]	; (80037a4 <HAL_I2C_MspInit+0x270>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d16e      	bne.n	80037ac <HAL_I2C_MspInit+0x278>

 80036ce:	2380      	movs	r3, #128	; 0x80
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80036d2:	2300      	movs	r3, #0
 80036d4:	64bb      	str	r3, [r7, #72]	; 0x48

 80036d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036da:	4618      	mov	r0, r3
 80036dc:	f006 fe0a 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_MspInit+0x1b6>

 80036e6:	f7ff fcd5 	bl	8003094 <Error_Handler>
  else if(hi2c->Instance==I2C2)
 80036ea:	4b28      	ldr	r3, [pc, #160]	; (800378c <HAL_I2C_MspInit+0x258>)
 80036ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ee:	4a27      	ldr	r2, [pc, #156]	; (800378c <HAL_I2C_MspInit+0x258>)
 80036f0:	f043 0304 	orr.w	r3, r3, #4
 80036f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036f6:	4b25      	ldr	r3, [pc, #148]	; (800378c <HAL_I2C_MspInit+0x258>)
 80036f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	69bb      	ldr	r3, [r7, #24]
  {
 8003702:	4b22      	ldr	r3, [pc, #136]	; (800378c <HAL_I2C_MspInit+0x258>)
 8003704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003706:	4a21      	ldr	r2, [pc, #132]	; (800378c <HAL_I2C_MspInit+0x258>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800370e:	4b1f      	ldr	r3, [pc, #124]	; (800378c <HAL_I2C_MspInit+0x258>)
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	697b      	ldr	r3, [r7, #20]
  /** Initializes the peripherals clocks
 800371a:	2310      	movs	r3, #16
 800371c:	67fb      	str	r3, [r7, #124]	; 0x7c
  */
 800371e:	2312      	movs	r3, #18
 8003720:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800372a:	2300      	movs	r3, #0
 800372c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003730:	2304      	movs	r3, #4
 8003732:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    {
 8003736:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800373a:	4619      	mov	r1, r3
 800373c:	481a      	ldr	r0, [pc, #104]	; (80037a8 <HAL_I2C_MspInit+0x274>)
 800373e:	f002 ffc3 	bl	80066c8 <HAL_GPIO_Init>
    }
 8003742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003746:	67fb      	str	r3, [r7, #124]	; 0x7c

 8003748:	2312      	movs	r3, #18
 800374a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003754:	2300      	movs	r3, #0
 8003756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    /**I2C2 GPIO Configuration
 800375a:	2304      	movs	r3, #4
 800375c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PC4     ------> I2C2_SCL
 8003760:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003764:	4619      	mov	r1, r3
 8003766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800376a:	f002 ffad 	bl	80066c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <HAL_I2C_MspInit+0x258>)
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	4a06      	ldr	r2, [pc, #24]	; (800378c <HAL_I2C_MspInit+0x258>)
 8003774:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003778:	6593      	str	r3, [r2, #88]	; 0x58
 800377a:	4b04      	ldr	r3, [pc, #16]	; (800378c <HAL_I2C_MspInit+0x258>)
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	693b      	ldr	r3, [r7, #16]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003786:	e07b      	b.n	8003880 <HAL_I2C_MspInit+0x34c>
 8003788:	40005400 	.word	0x40005400
 800378c:	40021000 	.word	0x40021000
 8003790:	48000400 	.word	0x48000400
 8003794:	200004f4 	.word	0x200004f4
 8003798:	4002001c 	.word	0x4002001c
 800379c:	20000554 	.word	0x20000554
 80037a0:	40020030 	.word	0x40020030
 80037a4:	40005800 	.word	0x40005800
 80037a8:	48000800 	.word	0x48000800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a35      	ldr	r2, [pc, #212]	; (8003888 <HAL_I2C_MspInit+0x354>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d164      	bne.n	8003880 <HAL_I2C_MspInit+0x34c>

 80037b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* Peripheral clock enable */
 80037bc:	2300      	movs	r3, #0
 80037be:	64fb      	str	r3, [r7, #76]	; 0x4c
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037c4:	4618      	mov	r0, r3
 80037c6:	f006 fd95 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_MspInit+0x2a0>

 80037d0:	f7ff fc60 	bl	8003094 <Error_Handler>
  else if(hi2c->Instance==I2C3)
 80037d4:	4b2d      	ldr	r3, [pc, #180]	; (800388c <HAL_I2C_MspInit+0x358>)
 80037d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d8:	4a2c      	ldr	r2, [pc, #176]	; (800388c <HAL_I2C_MspInit+0x358>)
 80037da:	f043 0304 	orr.w	r3, r3, #4
 80037de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037e0:	4b2a      	ldr	r3, [pc, #168]	; (800388c <HAL_I2C_MspInit+0x358>)
 80037e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]

 80037ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  /** Initializes the peripherals clocks
 80037f2:	2312      	movs	r3, #18
 80037f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  */
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80037fe:	2300      	movs	r3, #0
 8003800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003804:	2308      	movs	r3, #8
 8003806:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800380a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800380e:	4619      	mov	r1, r3
 8003810:	481f      	ldr	r0, [pc, #124]	; (8003890 <HAL_I2C_MspInit+0x35c>)
 8003812:	f002 ff59 	bl	80066c8 <HAL_GPIO_Init>
    }
 8003816:	4b1d      	ldr	r3, [pc, #116]	; (800388c <HAL_I2C_MspInit+0x358>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	4a1c      	ldr	r2, [pc, #112]	; (800388c <HAL_I2C_MspInit+0x358>)
 800381c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003820:	6593      	str	r3, [r2, #88]	; 0x58
 8003822:	4b1a      	ldr	r3, [pc, #104]	; (800388c <HAL_I2C_MspInit+0x358>)
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003826:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> I2C3_SCL
 800382e:	4b19      	ldr	r3, [pc, #100]	; (8003894 <HAL_I2C_MspInit+0x360>)
 8003830:	4a19      	ldr	r2, [pc, #100]	; (8003898 <HAL_I2C_MspInit+0x364>)
 8003832:	601a      	str	r2, [r3, #0]
    PC9     ------> I2C3_SDA
 8003834:	4b17      	ldr	r3, [pc, #92]	; (8003894 <HAL_I2C_MspInit+0x360>)
 8003836:	2214      	movs	r2, #20
 8003838:	605a      	str	r2, [r3, #4]
    */
 800383a:	4b16      	ldr	r3, [pc, #88]	; (8003894 <HAL_I2C_MspInit+0x360>)
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003840:	4b14      	ldr	r3, [pc, #80]	; (8003894 <HAL_I2C_MspInit+0x360>)
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003846:	4b13      	ldr	r3, [pc, #76]	; (8003894 <HAL_I2C_MspInit+0x360>)
 8003848:	2280      	movs	r2, #128	; 0x80
 800384a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <HAL_I2C_MspInit+0x360>)
 800384e:	2200      	movs	r2, #0
 8003850:	615a      	str	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_I2C_MspInit+0x360>)
 8003854:	2200      	movs	r2, #0
 8003856:	619a      	str	r2, [r3, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8003858:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <HAL_I2C_MspInit+0x360>)
 800385a:	2200      	movs	r2, #0
 800385c:	61da      	str	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <HAL_I2C_MspInit+0x360>)
 8003860:	2200      	movs	r2, #0
 8003862:	621a      	str	r2, [r3, #32]

 8003864:	480b      	ldr	r0, [pc, #44]	; (8003894 <HAL_I2C_MspInit+0x360>)
 8003866:	f002 f8e7 	bl	8005a38 <HAL_DMA_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_I2C_MspInit+0x340>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003870:	f7ff fc10 	bl	8003094 <Error_Handler>
    /* I2C3_RX Init */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a07      	ldr	r2, [pc, #28]	; (8003894 <HAL_I2C_MspInit+0x360>)
 8003878:	63da      	str	r2, [r3, #60]	; 0x3c
 800387a:	4a06      	ldr	r2, [pc, #24]	; (8003894 <HAL_I2C_MspInit+0x360>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003880:	bf00      	nop
 8003882:	3790      	adds	r7, #144	; 0x90
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40007800 	.word	0x40007800
 800388c:	40021000 	.word	0x40021000
 8003890:	48000800 	.word	0x48000800
 8003894:	200005b4 	.word	0x200005b4
 8003898:	40020044 	.word	0x40020044

0800389c <HAL_UART_MspInit>:
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);

    /* I2C3 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800389c:	b580      	push	{r7, lr}
 800389e:	b0a0      	sub	sp, #128	; 0x80
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C3_MspDeInit 1 */
 80038a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	611a      	str	r2, [r3, #16]

 80038b4:	f107 0318 	add.w	r3, r7, #24
 80038b8:	2254      	movs	r2, #84	; 0x54
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f008 ff4f 	bl	800c760 <memset>
  /* USER CODE END I2C3_MspDeInit 1 */
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2d      	ldr	r2, [pc, #180]	; (800397c <HAL_UART_MspInit+0xe0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d152      	bne.n	8003972 <HAL_UART_MspInit+0xd6>
}

/**
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
 80038cc:	2320      	movs	r3, #32
 80038ce:	61bb      	str	r3, [r7, #24]
* @retval None
 80038d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038d4:	633b      	str	r3, [r7, #48]	; 0x30
*/
 80038d6:	f107 0318 	add.w	r3, r7, #24
 80038da:	4618      	mov	r0, r3
 80038dc:	f006 fd0a 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_UART_MspInit+0x4e>
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038e6:	f7ff fbd5 	bl	8003094 <Error_Handler>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
  if(huart->Instance==LPUART1)
  {
 80038ea:	4b25      	ldr	r3, [pc, #148]	; (8003980 <HAL_UART_MspInit+0xe4>)
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	4a24      	ldr	r2, [pc, #144]	; (8003980 <HAL_UART_MspInit+0xe4>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80038f6:	4b22      	ldr	r3, [pc, #136]	; (8003980 <HAL_UART_MspInit+0xe4>)
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN LPUART1_MspInit 0 */

 8003902:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <HAL_UART_MspInit+0xe4>)
 8003904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003906:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <HAL_UART_MspInit+0xe4>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800390e:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <HAL_UART_MspInit+0xe4>)
 8003910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	693b      	ldr	r3, [r7, #16]
  /* USER CODE END LPUART1_MspInit 0 */
 800391a:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_UART_MspInit+0xe4>)
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	4a18      	ldr	r2, [pc, #96]	; (8003980 <HAL_UART_MspInit+0xe4>)
 8003920:	f043 0302 	orr.w	r3, r3, #2
 8003924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003926:	4b16      	ldr	r3, [pc, #88]	; (8003980 <HAL_UART_MspInit+0xe4>)
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003932:	2303      	movs	r3, #3
 8003934:	66fb      	str	r3, [r7, #108]	; 0x6c
    {
 8003936:	2302      	movs	r3, #2
 8003938:	673b      	str	r3, [r7, #112]	; 0x70
      Error_Handler();
 800393a:	2300      	movs	r3, #0
 800393c:	677b      	str	r3, [r7, #116]	; 0x74
    }
 800393e:	2300      	movs	r3, #0
 8003940:	67bb      	str	r3, [r7, #120]	; 0x78

 8003942:	2308      	movs	r3, #8
 8003944:	67fb      	str	r3, [r7, #124]	; 0x7c
    /* Peripheral clock enable */
 8003946:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800394a:	4619      	mov	r1, r3
 800394c:	480d      	ldr	r0, [pc, #52]	; (8003984 <HAL_UART_MspInit+0xe8>)
 800394e:	f002 febb 	bl	80066c8 <HAL_GPIO_Init>
    __HAL_RCC_LPUART1_CLK_ENABLE();

 8003952:	2302      	movs	r3, #2
 8003954:	66fb      	str	r3, [r7, #108]	; 0x6c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003956:	2302      	movs	r3, #2
 8003958:	673b      	str	r3, [r7, #112]	; 0x70
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	677b      	str	r3, [r7, #116]	; 0x74
    /**LPUART1 GPIO Configuration
 800395e:	2300      	movs	r3, #0
 8003960:	67bb      	str	r3, [r7, #120]	; 0x78
    PC0     ------> LPUART1_RX
 8003962:	230c      	movs	r3, #12
 8003964:	67fb      	str	r3, [r7, #124]	; 0x7c
    PC1     ------> LPUART1_TX
 8003966:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800396a:	4619      	mov	r1, r3
 800396c:	4806      	ldr	r0, [pc, #24]	; (8003988 <HAL_UART_MspInit+0xec>)
 800396e:	f002 feab 	bl	80066c8 <HAL_GPIO_Init>
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003972:	bf00      	nop
 8003974:	3780      	adds	r7, #128	; 0x80
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40008000 	.word	0x40008000
 8003980:	40021000 	.word	0x40021000
 8003984:	48000800 	.word	0x48000800
 8003988:	48000400 	.word	0x48000400

0800398c <HAL_SPI_MspInit>:
    PB1     ------> LPUART1_DE
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);

 800398c:	b580      	push	{r7, lr}
 800398e:	b08c      	sub	sp, #48	; 0x30
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */
 8003994:	f107 031c 	add.w	r3, r7, #28
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	60da      	str	r2, [r3, #12]
 80039a2:	611a      	str	r2, [r3, #16]

 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a2f      	ldr	r2, [pc, #188]	; (8003a68 <HAL_SPI_MspInit+0xdc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d129      	bne.n	8003a02 <HAL_SPI_MspInit+0x76>
  /* USER CODE END LPUART1_MspDeInit 1 */
  }

}

/**
 80039ae:	4b2f      	ldr	r3, [pc, #188]	; (8003a6c <HAL_SPI_MspInit+0xe0>)
 80039b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b2:	4a2e      	ldr	r2, [pc, #184]	; (8003a6c <HAL_SPI_MspInit+0xe0>)
 80039b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039b8:	6613      	str	r3, [r2, #96]	; 0x60
 80039ba:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <HAL_SPI_MspInit+0xe0>)
 80039bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	69bb      	ldr	r3, [r7, #24]
* @brief SPI MSP Initialization
* This function configures the hardware resources used in this example
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <HAL_SPI_MspInit+0xe0>)
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	4a28      	ldr	r2, [pc, #160]	; (8003a6c <HAL_SPI_MspInit+0xe0>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039d2:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <HAL_SPI_MspInit+0xe0>)
 80039d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	697b      	ldr	r3, [r7, #20]
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039de:	23e0      	movs	r3, #224	; 0xe0
 80039e0:	61fb      	str	r3, [r7, #28]
  if(hspi->Instance==SPI1)
 80039e2:	2302      	movs	r3, #2
 80039e4:	623b      	str	r3, [r7, #32]
  {
 80039e6:	2300      	movs	r3, #0
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 0 */
 80039ea:	2300      	movs	r3, #0
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28

 80039ee:	2305      	movs	r3, #5
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE END SPI1_MspInit 0 */
 80039f2:	f107 031c 	add.w	r3, r7, #28
 80039f6:	4619      	mov	r1, r3
 80039f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039fc:	f002 fe64 	bl	80066c8 <HAL_GPIO_Init>
    __HAL_RCC_SPI3_CLK_ENABLE();

    __HAL_RCC_GPIOC_CLK_ENABLE();
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
 8003a00:	e02d      	b.n	8003a5e <HAL_SPI_MspInit+0xd2>
    PA5     ------> SPI1_SCK
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <HAL_SPI_MspInit+0xe4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d128      	bne.n	8003a5e <HAL_SPI_MspInit+0xd2>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <HAL_SPI_MspInit+0xe0>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <HAL_SPI_MspInit+0xe0>)
 8003a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a16:	6593      	str	r3, [r2, #88]	; 0x58
 8003a18:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <HAL_SPI_MspInit+0xe0>)
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <HAL_SPI_MspInit+0xe0>)
 8003a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a28:	4a10      	ldr	r2, [pc, #64]	; (8003a6c <HAL_SPI_MspInit+0xe0>)
 8003a2a:	f043 0304 	orr.w	r3, r3, #4
 8003a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <HAL_SPI_MspInit+0xe0>)
 8003a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
  }
 8003a3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003a40:	61fb      	str	r3, [r7, #28]
  else if(hspi->Instance==SPI3)
 8003a42:	2302      	movs	r3, #2
 8003a44:	623b      	str	r3, [r7, #32]
  {
 8003a46:	2300      	movs	r3, #0
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN SPI3_MspInit 0 */
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28

 8003a4e:	2306      	movs	r3, #6
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE END SPI3_MspInit 0 */
 8003a52:	f107 031c 	add.w	r3, r7, #28
 8003a56:	4619      	mov	r1, r3
 8003a58:	4806      	ldr	r0, [pc, #24]	; (8003a74 <HAL_SPI_MspInit+0xe8>)
 8003a5a:	f002 fe35 	bl	80066c8 <HAL_GPIO_Init>
    PC11     ------> SPI3_MISO
 8003a5e:	bf00      	nop
 8003a60:	3730      	adds	r7, #48	; 0x30
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40013000 	.word	0x40013000
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40003c00 	.word	0x40003c00
 8003a74:	48000800 	.word	0x48000800

08003a78 <HAL_TIM_Base_MspInit>:
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);

 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI3_MspDeInit 1 */
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a88:	d113      	bne.n	8003ab2 <HAL_TIM_Base_MspInit+0x3a>

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}

 8003a8a:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <HAL_TIM_Base_MspInit+0x44>)
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8e:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <HAL_TIM_Base_MspInit+0x44>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6593      	str	r3, [r2, #88]	; 0x58
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_TIM_Base_MspInit+0x44>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
/**
* @brief TIM_Base MSP Initialization
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	201c      	movs	r0, #28
 8003aa8:	f001 ff91 	bl	80059ce <HAL_NVIC_SetPriority>
* This function configures the hardware resources used in this example
 8003aac:	201c      	movs	r0, #28
 8003aae:	f001 ffa8 	bl	8005a02 <HAL_NVIC_EnableIRQ>
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000

08003ac0 <HAL_PCD_MspInit>:
  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();

    /* TIM2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b098      	sub	sp, #96	; 0x60
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIM2_MspDeInit 1 */
 8003ac8:	f107 030c 	add.w	r3, r7, #12
 8003acc:	2254      	movs	r2, #84	; 0x54
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f008 fe45 	bl	800c760 <memset>

 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <HAL_PCD_MspInit+0x60>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d11a      	bne.n	8003b16 <HAL_PCD_MspInit+0x56>

}

/**
* @brief PCD MSP Initialization
* This function configures the hardware resources used in this example
 8003ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ae4:	60fb      	str	r3, [r7, #12]
* @param hpcd: PCD handle pointer
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	64bb      	str	r3, [r7, #72]	; 0x48
* @retval None
 8003aea:	f107 030c 	add.w	r3, r7, #12
 8003aee:	4618      	mov	r0, r3
 8003af0:	f006 fc00 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_PCD_MspInit+0x3e>
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
 8003afa:	f7ff facb 	bl	8003094 <Error_Handler>
{
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
  if(hpcd->Instance==USB)
  {
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_PCD_MspInit+0x64>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <HAL_PCD_MspInit+0x64>)
 8003b04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b08:	6593      	str	r3, [r2, #88]	; 0x58
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <HAL_PCD_MspInit+0x64>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
 8003b16:	bf00      	nop
 8003b18:	3760      	adds	r7, #96	; 0x60
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40005c00 	.word	0x40005c00
 8003b24:	40021000 	.word	0x40021000

08003b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003b2c:	f006 fb80 	bl	800a230 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b30:	e7fe      	b.n	8003b30 <NMI_Handler+0x8>

08003b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b36:	e7fe      	b.n	8003b36 <HardFault_Handler+0x4>

08003b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b3c:	e7fe      	b.n	8003b3c <MemManage_Handler+0x4>

08003b3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b42:	e7fe      	b.n	8003b42 <BusFault_Handler+0x4>

08003b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b48:	e7fe      	b.n	8003b48 <UsageFault_Handler+0x4>

08003b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b78:	f000 fab4 	bl	80040e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b84:	4802      	ldr	r0, [pc, #8]	; (8003b90 <DMA1_Channel1_IRQHandler+0x10>)
 8003b86:	f002 f8e1 	bl	8005d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	2000020c 	.word	0x2000020c

08003b94 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003b98:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <DMA1_Channel2_IRQHandler+0x10>)
 8003b9a:	f002 f8d7 	bl	8005d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	200004f4 	.word	0x200004f4

08003ba8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003bac:	4802      	ldr	r0, [pc, #8]	; (8003bb8 <DMA1_Channel3_IRQHandler+0x10>)
 8003bae:	f002 f8cd 	bl	8005d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000554 	.word	0x20000554

08003bbc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003bc0:	4802      	ldr	r0, [pc, #8]	; (8003bcc <DMA1_Channel4_IRQHandler+0x10>)
 8003bc2:	f002 f8c3 	bl	8005d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	200005b4 	.word	0x200005b4

08003bd0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8003bd4:	4802      	ldr	r0, [pc, #8]	; (8003be0 <DMA1_Channel5_IRQHandler+0x10>)
 8003bd6:	f002 f8b9 	bl	8005d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	2000026c 	.word	0x2000026c

08003be4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003be8:	4802      	ldr	r0, [pc, #8]	; (8003bf4 <FDCAN1_IT0_IRQHandler+0x10>)
 8003bea:	f002 fb67 	bl	80062bc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	200002cc 	.word	0x200002cc

08003bf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bfc:	4804      	ldr	r0, [pc, #16]	; (8003c10 <TIM2_IRQHandler+0x18>)
 8003bfe:	f006 fef8 	bl	800a9f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim2);
 8003c02:	4803      	ldr	r0, [pc, #12]	; (8003c10 <TIM2_IRQHandler+0x18>)
 8003c04:	f006 fec6 	bl	800a994 <HAL_TIM_Base_Stop_IT>
  HV_on();
 8003c08:	f7ff fa4a 	bl	80030a0 <HV_on>
  /* USER CODE END TIM2_IRQn 1 */
}
 8003c0c:	bf00      	nop
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000780 	.word	0x20000780

08003c14 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003c18:	4802      	ldr	r0, [pc, #8]	; (8003c24 <FDCAN2_IT0_IRQHandler+0x10>)
 8003c1a:	f002 fb4f 	bl	80062bc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000330 	.word	0x20000330

08003c28 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8003c2c:	4802      	ldr	r0, [pc, #8]	; (8003c38 <FDCAN3_IT1_IRQHandler+0x10>)
 8003c2e:	f002 fb45 	bl	80062bc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000394 	.word	0x20000394

08003c3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	e00a      	b.n	8003c64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c4e:	f3af 8000 	nop.w
 8003c52:	4601      	mov	r1, r0
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	60ba      	str	r2, [r7, #8]
 8003c5a:	b2ca      	uxtb	r2, r1
 8003c5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3301      	adds	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	dbf0      	blt.n	8003c4e <_read+0x12>
  }

  return len;
 8003c6c:	687b      	ldr	r3, [r7, #4]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	e009      	b.n	8003c9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	60ba      	str	r2, [r7, #8]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	dbf1      	blt.n	8003c88 <_write+0x12>
  }
  return len;
 8003ca4:	687b      	ldr	r3, [r7, #4]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <_close>:

int _close(int file)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cd6:	605a      	str	r2, [r3, #4]
  return 0;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <_isatty>:

int _isatty(int file)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cee:	2301      	movs	r3, #1
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d20:	4a14      	ldr	r2, [pc, #80]	; (8003d74 <_sbrk+0x5c>)
 8003d22:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <_sbrk+0x60>)
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d2c:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <_sbrk+0x64>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d34:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <_sbrk+0x64>)
 8003d36:	4a12      	ldr	r2, [pc, #72]	; (8003d80 <_sbrk+0x68>)
 8003d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d3a:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <_sbrk+0x64>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d207      	bcs.n	8003d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d48:	f008 fd68 	bl	800c81c <__errno>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	220c      	movs	r2, #12
 8003d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
 8003d56:	e009      	b.n	8003d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <_sbrk+0x64>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d5e:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <_sbrk+0x64>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	4a05      	ldr	r2, [pc, #20]	; (8003d7c <_sbrk+0x64>)
 8003d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20020000 	.word	0x20020000
 8003d78:	00000400 	.word	0x00000400
 8003d7c:	20000ab0 	.word	0x20000ab0
 8003d80:	20000c50 	.word	0x20000c50

08003d84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <SystemInit+0x20>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8e:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <SystemInit+0x20>)
 8003d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <i2c_temp_init>:
volatile int adc5_convert = 0;
volatile int32_t temps[8] = {0};
volatile int32_t pressure[1] = {0};


uint8_t i2c_temp_init(mcp9600_handle_t *handle, mcp9600_address_t addr_pin, mcp9600_thermocouple_type_t type){
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70fb      	strb	r3, [r7, #3]
 8003db4:	4613      	mov	r3, r2
 8003db6:	70bb      	strb	r3, [r7, #2]
	uint8_t status;

	DRIVER_MCP9600_LINK_INIT(handle, mcp9600_handle_t);
 8003db8:	221c      	movs	r2, #28
 8003dba:	2100      	movs	r1, #0
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f008 fccf 	bl	800c760 <memset>
	DRIVER_MCP9600_LINK_IIC_INIT(handle, mcp9600_interface_iic_init);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a40      	ldr	r2, [pc, #256]	; (8003ec8 <i2c_temp_init+0x120>)
 8003dc6:	601a      	str	r2, [r3, #0]
	DRIVER_MCP9600_LINK_IIC_DEINIT(handle, mcp9600_interface_iic_deinit);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a40      	ldr	r2, [pc, #256]	; (8003ecc <i2c_temp_init+0x124>)
 8003dcc:	605a      	str	r2, [r3, #4]
	DRIVER_MCP9600_LINK_IIC_READ_COMMAND(handle, mcp9600_interface_iic_read_cmd);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a3f      	ldr	r2, [pc, #252]	; (8003ed0 <i2c_temp_init+0x128>)
 8003dd2:	60da      	str	r2, [r3, #12]
	DRIVER_MCP9600_LINK_IIC_WRITE_COMMAND(handle, mcp9600_interface_iic_write_cmd);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a3f      	ldr	r2, [pc, #252]	; (8003ed4 <i2c_temp_init+0x12c>)
 8003dd8:	609a      	str	r2, [r3, #8]
	DRIVER_MCP9600_LINK_IIC_DELAY_MS(handle, mcp9600_interface_delay_ms);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a3e      	ldr	r2, [pc, #248]	; (8003ed8 <i2c_temp_init+0x130>)
 8003dde:	611a      	str	r2, [r3, #16]
	DRIVER_MCP9600_LINK_DEBUG_PRINT(handle, mcp9600_interface_debug_print);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a3e      	ldr	r2, [pc, #248]	; (8003edc <i2c_temp_init+0x134>)
 8003de4:	615a      	str	r2, [r3, #20]

	status = mcp9600_set_addr_pin(handle, addr_pin); //set i2c address
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	4619      	mov	r1, r3
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fe f8ab 	bl	8001f46 <mcp9600_set_addr_pin>
 8003df0:	4603      	mov	r3, r0
 8003df2:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <i2c_temp_init+0x56>
		return 1;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e05f      	b.n	8003ebe <i2c_temp_init+0x116>
	}
	status = mcp9600_init(handle); //chip init
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fe f8b6 	bl	8001f70 <mcp9600_init>
 8003e04:	4603      	mov	r3, r0
 8003e06:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <i2c_temp_init+0x6a>
		return 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e055      	b.n	8003ebe <i2c_temp_init+0x116>
	}
	status = mcp9600_set_mode(handle, MCP9600_MODE_NORMAL); //set normal
 8003e12:	2100      	movs	r1, #0
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fe fa29 	bl	800226c <mcp9600_set_mode>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d004      	beq.n	8003e2e <i2c_temp_init+0x86>
		(void)mcp9600_deinit(handle);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7fe f931 	bl	800208c <mcp9600_deinit>
		return 1;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e047      	b.n	8003ebe <i2c_temp_init+0x116>
	}
	status = mcp9600_set_filter_coefficient(handle, MCP9600_FILTER_COEFFICIENT_0); //set filter
 8003e2e:	2100      	movs	r1, #0
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7fe faaf 	bl	8002394 <mcp9600_set_filter_coefficient>
 8003e36:	4603      	mov	r3, r0
 8003e38:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <i2c_temp_init+0xa2>
		(void)mcp9600_deinit(handle);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7fe f923 	bl	800208c <mcp9600_deinit>
		return 1;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e039      	b.n	8003ebe <i2c_temp_init+0x116>
	}
	status = mcp9600_set_thermocouple_type(handle, type); //thermocouple type
 8003e4a:	78bb      	ldrb	r3, [r7, #2]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fe fa54 	bl	80022fc <mcp9600_set_thermocouple_type>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d004      	beq.n	8003e68 <i2c_temp_init+0xc0>
		(void)mcp9600_deinit(handle);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fe f914 	bl	800208c <mcp9600_deinit>
		return 1;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e02a      	b.n	8003ebe <i2c_temp_init+0x116>
	}
	status = mcp9600_set_cold_junction_resolution(handle,MCP9600_COLD_JUNCTION_RESOLUTION_0P0625);
 8003e68:	2100      	movs	r1, #0
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fe f966 	bl	800213c <mcp9600_set_cold_junction_resolution>
 8003e70:	4603      	mov	r3, r0
 8003e72:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <i2c_temp_init+0xdc>
		(void)mcp9600_deinit(handle);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fe f906 	bl	800208c <mcp9600_deinit>
		return 1;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e01c      	b.n	8003ebe <i2c_temp_init+0x116>
	}
	status = mcp9600_set_adc_resolution(handle,MCP9600_ADC_RESOLUTION_12_BIT);
 8003e84:	2103      	movs	r1, #3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fe f9a4 	bl	80021d4 <mcp9600_set_adc_resolution>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d004      	beq.n	8003ea0 <i2c_temp_init+0xf8>
		(void)mcp9600_deinit(handle);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fe f8f8 	bl	800208c <mcp9600_deinit>
		return 1;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e00e      	b.n	8003ebe <i2c_temp_init+0x116>
	}
	status = mcp9600_set_adc_resolution(handle, MCP9600_BURST_MODE_SAMPLE_4);
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fe f996 	bl	80021d4 <mcp9600_set_adc_resolution>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d004      	beq.n	8003ebc <i2c_temp_init+0x114>
		(void)mcp9600_deinit(handle);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fe f8ea 	bl	800208c <mcp9600_deinit>
		return 1;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <i2c_temp_init+0x116>
	}
	return 0;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	08002425 	.word	0x08002425
 8003ecc:	08002435 	.word	0x08002435
 8003ed0:	08002471 	.word	0x08002471
 8003ed4:	08002445 	.word	0x08002445
 8003ed8:	0800249d 	.word	0x0800249d
 8003edc:	080024b3 	.word	0x080024b3

08003ee0 <tempsensor_init>:
		return 1;
	}
	return 0;
}

uint8_t tempsensor_init(){
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
	uint8_t status;
	status = i2c_temp_init(&MCP_0, MCP9600_ADDRESS_0, MCP9600_THERMOCOUPLE_TYPE_K);
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	21c0      	movs	r1, #192	; 0xc0
 8003eea:	4828      	ldr	r0, [pc, #160]	; (8003f8c <tempsensor_init+0xac>)
 8003eec:	f7ff ff5c 	bl	8003da8 <i2c_temp_init>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	70fb      	strb	r3, [r7, #3]
	if(status !=0){
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <tempsensor_init+0x1e>
		return 1;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e042      	b.n	8003f84 <tempsensor_init+0xa4>
	}
	status = i2c_temp_init(&MCP_1, MCP9600_ADDRESS_1, MCP9600_THERMOCOUPLE_TYPE_K);
 8003efe:	2200      	movs	r2, #0
 8003f00:	21cc      	movs	r1, #204	; 0xcc
 8003f02:	4823      	ldr	r0, [pc, #140]	; (8003f90 <tempsensor_init+0xb0>)
 8003f04:	f7ff ff50 	bl	8003da8 <i2c_temp_init>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	70fb      	strb	r3, [r7, #3]
	if(status !=0){
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <tempsensor_init+0x36>
		return 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e036      	b.n	8003f84 <tempsensor_init+0xa4>
	}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_result_dma,adc1_count);
 8003f16:	2304      	movs	r3, #4
 8003f18:	461a      	mov	r2, r3
 8003f1a:	491e      	ldr	r1, [pc, #120]	; (8003f94 <tempsensor_init+0xb4>)
 8003f1c:	481e      	ldr	r0, [pc, #120]	; (8003f98 <tempsensor_init+0xb8>)
 8003f1e:	f000 fcfb 	bl	8004918 <HAL_ADC_Start_DMA>
	while(adc1_convert == 0){
 8003f22:	bf00      	nop
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <tempsensor_init+0xbc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0fb      	beq.n	8003f24 <tempsensor_init+0x44>
		//will hold until ready used to make sure all temp sensors are connected
	}
	adc1_convert = 0;
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <tempsensor_init+0xbc>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < adc1_count; i++){
 8003f32:	2300      	movs	r3, #0
 8003f34:	607b      	str	r3, [r7, #4]
 8003f36:	e00b      	b.n	8003f50 <tempsensor_init+0x70>
		if(adc1_result_dma[i] <= 0){
 8003f38:	4a16      	ldr	r2, [pc, #88]	; (8003f94 <tempsensor_init+0xb4>)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <tempsensor_init+0x6a>
			return 1;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e01c      	b.n	8003f84 <tempsensor_init+0xa4>
	for(int i = 0; i < adc1_count; i++){
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	2204      	movs	r2, #4
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4293      	cmp	r3, r2
 8003f56:	dbef      	blt.n	8003f38 <tempsensor_init+0x58>
		}
	}
	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_result_dma,adc5_count);
 8003f58:	2301      	movs	r3, #1
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4910      	ldr	r1, [pc, #64]	; (8003fa0 <tempsensor_init+0xc0>)
 8003f5e:	4811      	ldr	r0, [pc, #68]	; (8003fa4 <tempsensor_init+0xc4>)
 8003f60:	f000 fcda 	bl	8004918 <HAL_ADC_Start_DMA>
	while(adc5_convert == 0){
 8003f64:	bf00      	nop
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <tempsensor_init+0xc8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0fb      	beq.n	8003f66 <tempsensor_init+0x86>
			//will hold until ready used to make sure all pressure sensors are connected
	}
	adc5_convert = 0;
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <tempsensor_init+0xc8>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
	if(adc5_result_dma[0] <= 0){
 8003f74:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <tempsensor_init+0xc0>)
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <tempsensor_init+0xa2>
		return 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <tempsensor_init+0xa4>
	}
	return 0;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000ab4 	.word	0x20000ab4
 8003f90:	20000ad0 	.word	0x20000ad0
 8003f94:	20000aec 	.word	0x20000aec
 8003f98:	20000134 	.word	0x20000134
 8003f9c:	20000af8 	.word	0x20000af8
 8003fa0:	20000af4 	.word	0x20000af4
 8003fa4:	200001a0 	.word	0x200001a0
 8003fa8:	20000afc 	.word	0x20000afc

08003fac <HAL_ADC_ConvCpltCallback>:
		return 1; //temp fault
	}
	return 0;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){ // inidcates which adc is done running conversion and raises flag
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fbc:	d102      	bne.n	8003fc4 <HAL_ADC_ConvCpltCallback+0x18>
		adc1_convert = 1;
 8003fbe:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <HAL_ADC_ConvCpltCallback+0x34>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
	}
	if(hadc->Instance == ADC5){
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a06      	ldr	r2, [pc, #24]	; (8003fe4 <HAL_ADC_ConvCpltCallback+0x38>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d102      	bne.n	8003fd4 <HAL_ADC_ConvCpltCallback+0x28>
		adc5_convert = 1;
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
	}

}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	20000af8 	.word	0x20000af8
 8003fe4:	50000600 	.word	0x50000600
 8003fe8:	20000afc 	.word	0x20000afc

08003fec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003fec:	480d      	ldr	r0, [pc, #52]	; (8004024 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003fee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ff0:	f7ff fec8 	bl	8003d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ff4:	480c      	ldr	r0, [pc, #48]	; (8004028 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ff6:	490d      	ldr	r1, [pc, #52]	; (800402c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ff8:	4a0d      	ldr	r2, [pc, #52]	; (8004030 <LoopForever+0xe>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003ffc:	e002      	b.n	8004004 <LoopCopyDataInit>

08003ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004002:	3304      	adds	r3, #4

08004004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004008:	d3f9      	bcc.n	8003ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800400c:	4c0a      	ldr	r4, [pc, #40]	; (8004038 <LoopForever+0x16>)
  movs r3, #0
 800400e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004010:	e001      	b.n	8004016 <LoopFillZerobss>

08004012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004014:	3204      	adds	r2, #4

08004016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004018:	d3fb      	bcc.n	8004012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800401a:	f008 fc05 	bl	800c828 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800401e:	f7fe fa9f 	bl	8002560 <main>

08004022 <LoopForever>:

LoopForever:
    b LoopForever
 8004022:	e7fe      	b.n	8004022 <LoopForever>
  ldr   r0, =_estack
 8004024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800402c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8004030:	0800d1e4 	.word	0x0800d1e4
  ldr r2, =_sbss
 8004034:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8004038:	20000c50 	.word	0x20000c50

0800403c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800403c:	e7fe      	b.n	800403c <ADC1_2_IRQHandler>

0800403e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004048:	2003      	movs	r0, #3
 800404a:	f001 fcb5 	bl	80059b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800404e:	200f      	movs	r0, #15
 8004050:	f000 f80e 	bl	8004070 <HAL_InitTick>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	71fb      	strb	r3, [r7, #7]
 800405e:	e001      	b.n	8004064 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004060:	f7ff f854 	bl	800310c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004064:	79fb      	ldrb	r3, [r7, #7]

}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800407c:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <HAL_InitTick+0x68>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d022      	beq.n	80040ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <HAL_InitTick+0x6c>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <HAL_InitTick+0x68>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004090:	fbb1 f3f3 	udiv	r3, r1, r3
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	4618      	mov	r0, r3
 800409a:	f001 fcc0 	bl	8005a1e <HAL_SYSTICK_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10f      	bne.n	80040c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b0f      	cmp	r3, #15
 80040a8:	d809      	bhi.n	80040be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040aa:	2200      	movs	r2, #0
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	f04f 30ff 	mov.w	r0, #4294967295
 80040b2:	f001 fc8c 	bl	80059ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <HAL_InitTick+0x70>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	e007      	b.n	80040ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
 80040c2:	e004      	b.n	80040ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]
 80040c8:	e001      	b.n	80040ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000008 	.word	0x20000008
 80040dc:	20000000 	.word	0x20000000
 80040e0:	20000004 	.word	0x20000004

080040e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_IncTick+0x1c>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_IncTick+0x20>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4413      	add	r3, r2
 80040f2:	4a03      	ldr	r2, [pc, #12]	; (8004100 <HAL_IncTick+0x1c>)
 80040f4:	6013      	str	r3, [r2, #0]
}
 80040f6:	bf00      	nop
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	20000b00 	.word	0x20000b00
 8004104:	20000008 	.word	0x20000008

08004108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return uwTick;
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <HAL_GetTick+0x14>)
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000b00 	.word	0x20000b00

08004120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004128:	f7ff ffee 	bl	8004108 <HAL_GetTick>
 800412c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d004      	beq.n	8004144 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800413a:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_Delay+0x40>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004144:	bf00      	nop
 8004146:	f7ff ffdf 	bl	8004108 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	429a      	cmp	r2, r3
 8004154:	d8f7      	bhi.n	8004146 <HAL_Delay+0x26>
  {
  }
}
 8004156:	bf00      	nop
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20000008 	.word	0x20000008

08004164 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	609a      	str	r2, [r3, #8]
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3360      	adds	r3, #96	; 0x60
 80041de:	461a      	mov	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b08      	ldr	r3, [pc, #32]	; (8004210 <LL_ADC_SetOffset+0x44>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	03fff000 	.word	0x03fff000

08004214 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3360      	adds	r3, #96	; 0x60
 8004222:	461a      	mov	r2, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3360      	adds	r3, #96	; 0x60
 8004250:	461a      	mov	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	431a      	orrs	r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004276:	b480      	push	{r7}
 8004278:	b087      	sub	sp, #28
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3360      	adds	r3, #96	; 0x60
 8004286:	461a      	mov	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	431a      	orrs	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3360      	adds	r3, #96	; 0x60
 80042bc:	461a      	mov	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	615a      	str	r2, [r3, #20]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800432e:	b480      	push	{r7}
 8004330:	b087      	sub	sp, #28
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3330      	adds	r3, #48	; 0x30
 800433e:	461a      	mov	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	4413      	add	r3, r2
 800434c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	211f      	movs	r1, #31
 800435a:	fa01 f303 	lsl.w	r3, r1, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	401a      	ands	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	0e9b      	lsrs	r3, r3, #26
 8004366:	f003 011f 	and.w	r1, r3, #31
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	fa01 f303 	lsl.w	r3, r1, r3
 8004374:	431a      	orrs	r2, r3
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004386:	b480      	push	{r7}
 8004388:	b087      	sub	sp, #28
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3314      	adds	r3, #20
 8004396:	461a      	mov	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	0e5b      	lsrs	r3, r3, #25
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	4413      	add	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	0d1b      	lsrs	r3, r3, #20
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	2107      	movs	r1, #7
 80043b4:	fa01 f303 	lsl.w	r3, r1, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	401a      	ands	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	0d1b      	lsrs	r3, r3, #20
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	431a      	orrs	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f4:	43db      	mvns	r3, r3
 80043f6:	401a      	ands	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f003 0318 	and.w	r3, r3, #24
 80043fe:	4908      	ldr	r1, [pc, #32]	; (8004420 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004400:	40d9      	lsrs	r1, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	400b      	ands	r3, r1
 8004406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440a:	431a      	orrs	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	0007ffff 	.word	0x0007ffff

08004424 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 031f 	and.w	r3, r3, #31
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6093      	str	r3, [r2, #8]
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004478:	d101      	bne.n	800447e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800449c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044c8:	d101      	bne.n	80044ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044f0:	f043 0201 	orr.w	r2, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <LL_ADC_IsEnabled+0x18>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <LL_ADC_IsEnabled+0x1a>
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800453a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800453e:	f043 0204 	orr.w	r2, r3, #4
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b04      	cmp	r3, #4
 8004564:	d101      	bne.n	800456a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b08      	cmp	r3, #8
 800458a:	d101      	bne.n	8004590 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b089      	sub	sp, #36	; 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e1a9      	b.n	800490e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7fe fdc3 	bl	8003154 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff ff3f 	bl	8004464 <LL_ADC_IsDeepPowerDownEnabled>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff25 	bl	8004440 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff ff5a 	bl	80044b4 <LL_ADC_IsInternalRegulatorEnabled>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d115      	bne.n	8004632 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff ff3e 	bl	800448c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004610:	4b9c      	ldr	r3, [pc, #624]	; (8004884 <HAL_ADC_Init+0x2e4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	099b      	lsrs	r3, r3, #6
 8004616:	4a9c      	ldr	r2, [pc, #624]	; (8004888 <HAL_ADC_Init+0x2e8>)
 8004618:	fba2 2303 	umull	r2, r3, r2, r3
 800461c:	099b      	lsrs	r3, r3, #6
 800461e:	3301      	adds	r3, #1
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004624:	e002      	b.n	800462c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3b01      	subs	r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f9      	bne.n	8004626 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff ff3c 	bl	80044b4 <LL_ADC_IsInternalRegulatorEnabled>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10d      	bne.n	800465e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004646:	f043 0210 	orr.w	r2, r3, #16
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004652:	f043 0201 	orr.w	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff ff75 	bl	8004552 <LL_ADC_REG_IsConversionOngoing>
 8004668:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b00      	cmp	r3, #0
 8004674:	f040 8142 	bne.w	80048fc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	f040 813e 	bne.w	80048fc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004684:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004688:	f043 0202 	orr.w	r2, r3, #2
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff ff35 	bl	8004504 <LL_ADC_IsEnabled>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d141      	bne.n	8004724 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046a8:	d004      	beq.n	80046b4 <HAL_ADC_Init+0x114>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a77      	ldr	r2, [pc, #476]	; (800488c <HAL_ADC_Init+0x2ec>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d10f      	bne.n	80046d4 <HAL_ADC_Init+0x134>
 80046b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80046b8:	f7ff ff24 	bl	8004504 <LL_ADC_IsEnabled>
 80046bc:	4604      	mov	r4, r0
 80046be:	4873      	ldr	r0, [pc, #460]	; (800488c <HAL_ADC_Init+0x2ec>)
 80046c0:	f7ff ff20 	bl	8004504 <LL_ADC_IsEnabled>
 80046c4:	4603      	mov	r3, r0
 80046c6:	4323      	orrs	r3, r4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	e012      	b.n	80046fa <HAL_ADC_Init+0x15a>
 80046d4:	486e      	ldr	r0, [pc, #440]	; (8004890 <HAL_ADC_Init+0x2f0>)
 80046d6:	f7ff ff15 	bl	8004504 <LL_ADC_IsEnabled>
 80046da:	4604      	mov	r4, r0
 80046dc:	486d      	ldr	r0, [pc, #436]	; (8004894 <HAL_ADC_Init+0x2f4>)
 80046de:	f7ff ff11 	bl	8004504 <LL_ADC_IsEnabled>
 80046e2:	4603      	mov	r3, r0
 80046e4:	431c      	orrs	r4, r3
 80046e6:	486c      	ldr	r0, [pc, #432]	; (8004898 <HAL_ADC_Init+0x2f8>)
 80046e8:	f7ff ff0c 	bl	8004504 <LL_ADC_IsEnabled>
 80046ec:	4603      	mov	r3, r0
 80046ee:	4323      	orrs	r3, r4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf0c      	ite	eq
 80046f4:	2301      	moveq	r3, #1
 80046f6:	2300      	movne	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d012      	beq.n	8004724 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004706:	d004      	beq.n	8004712 <HAL_ADC_Init+0x172>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a5f      	ldr	r2, [pc, #380]	; (800488c <HAL_ADC_Init+0x2ec>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d101      	bne.n	8004716 <HAL_ADC_Init+0x176>
 8004712:	4a62      	ldr	r2, [pc, #392]	; (800489c <HAL_ADC_Init+0x2fc>)
 8004714:	e000      	b.n	8004718 <HAL_ADC_Init+0x178>
 8004716:	4a62      	ldr	r2, [pc, #392]	; (80048a0 <HAL_ADC_Init+0x300>)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f7ff fd20 	bl	8004164 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	7f5b      	ldrb	r3, [r3, #29]
 8004728:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800472e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004734:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800473a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004742:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800474e:	2b01      	cmp	r3, #1
 8004750:	d106      	bne.n	8004760 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	3b01      	subs	r3, #1
 8004758:	045b      	lsls	r3, r3, #17
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	4b48      	ldr	r3, [pc, #288]	; (80048a4 <HAL_ADC_Init+0x304>)
 8004784:	4013      	ands	r3, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	69b9      	ldr	r1, [r7, #24]
 800478c:	430b      	orrs	r3, r1
 800478e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fee4 	bl	8004578 <LL_ADC_INJ_IsConversionOngoing>
 80047b0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d17f      	bne.n	80048b8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d17c      	bne.n	80048b8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047c2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047ca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047da:	f023 0302 	bic.w	r3, r3, #2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	69b9      	ldr	r1, [r7, #24]
 80047e4:	430b      	orrs	r3, r1
 80047e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d017      	beq.n	8004820 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80047fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004808:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800480c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6911      	ldr	r1, [r2, #16]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	430b      	orrs	r3, r1
 800481a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800481e:	e013      	b.n	8004848 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800482e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004840:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004844:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800484e:	2b01      	cmp	r3, #1
 8004850:	d12a      	bne.n	80048a8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800485c:	f023 0304 	bic.w	r3, r3, #4
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004868:	4311      	orrs	r1, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800486e:	4311      	orrs	r1, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004874:	430a      	orrs	r2, r1
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0201 	orr.w	r2, r2, #1
 8004880:	611a      	str	r2, [r3, #16]
 8004882:	e019      	b.n	80048b8 <HAL_ADC_Init+0x318>
 8004884:	20000000 	.word	0x20000000
 8004888:	053e2d63 	.word	0x053e2d63
 800488c:	50000100 	.word	0x50000100
 8004890:	50000400 	.word	0x50000400
 8004894:	50000500 	.word	0x50000500
 8004898:	50000600 	.word	0x50000600
 800489c:	50000300 	.word	0x50000300
 80048a0:	50000700 	.word	0x50000700
 80048a4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0201 	bic.w	r2, r2, #1
 80048b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d10c      	bne.n	80048da <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	f023 010f 	bic.w	r1, r3, #15
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	1e5a      	subs	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	631a      	str	r2, [r3, #48]	; 0x30
 80048d8:	e007      	b.n	80048ea <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 020f 	bic.w	r2, r2, #15
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ee:	f023 0303 	bic.w	r3, r3, #3
 80048f2:	f043 0201 	orr.w	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80048fa:	e007      	b.n	800490c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004900:	f043 0210 	orr.w	r2, r3, #16
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800490c:	7ffb      	ldrb	r3, [r7, #31]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3724      	adds	r7, #36	; 0x24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd90      	pop	{r4, r7, pc}
 8004916:	bf00      	nop

08004918 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800492c:	d004      	beq.n	8004938 <HAL_ADC_Start_DMA+0x20>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5a      	ldr	r2, [pc, #360]	; (8004a9c <HAL_ADC_Start_DMA+0x184>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d101      	bne.n	800493c <HAL_ADC_Start_DMA+0x24>
 8004938:	4b59      	ldr	r3, [pc, #356]	; (8004aa0 <HAL_ADC_Start_DMA+0x188>)
 800493a:	e000      	b.n	800493e <HAL_ADC_Start_DMA+0x26>
 800493c:	4b59      	ldr	r3, [pc, #356]	; (8004aa4 <HAL_ADC_Start_DMA+0x18c>)
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff fd70 	bl	8004424 <LL_ADC_GetMultimode>
 8004944:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fe01 	bl	8004552 <LL_ADC_REG_IsConversionOngoing>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 809b 	bne.w	8004a8e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_ADC_Start_DMA+0x4e>
 8004962:	2302      	movs	r3, #2
 8004964:	e096      	b.n	8004a94 <HAL_ADC_Start_DMA+0x17c>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a4d      	ldr	r2, [pc, #308]	; (8004aa8 <HAL_ADC_Start_DMA+0x190>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d008      	beq.n	800498a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b05      	cmp	r3, #5
 8004982:	d002      	beq.n	800498a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b09      	cmp	r3, #9
 8004988:	d17a      	bne.n	8004a80 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fcec 	bl	8005368 <ADC_Enable>
 8004990:	4603      	mov	r3, r0
 8004992:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004994:	7dfb      	ldrb	r3, [r7, #23]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d16d      	bne.n	8004a76 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049a2:	f023 0301 	bic.w	r3, r3, #1
 80049a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a3a      	ldr	r2, [pc, #232]	; (8004a9c <HAL_ADC_Start_DMA+0x184>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d009      	beq.n	80049cc <HAL_ADC_Start_DMA+0xb4>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a3b      	ldr	r2, [pc, #236]	; (8004aac <HAL_ADC_Start_DMA+0x194>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d002      	beq.n	80049c8 <HAL_ADC_Start_DMA+0xb0>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	e003      	b.n	80049d0 <HAL_ADC_Start_DMA+0xb8>
 80049c8:	4b39      	ldr	r3, [pc, #228]	; (8004ab0 <HAL_ADC_Start_DMA+0x198>)
 80049ca:	e001      	b.n	80049d0 <HAL_ADC_Start_DMA+0xb8>
 80049cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d002      	beq.n	80049de <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d105      	bne.n	80049ea <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d006      	beq.n	8004a04 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fa:	f023 0206 	bic.w	r2, r3, #6
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	661a      	str	r2, [r3, #96]	; 0x60
 8004a02:	e002      	b.n	8004a0a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0e:	4a29      	ldr	r2, [pc, #164]	; (8004ab4 <HAL_ADC_Start_DMA+0x19c>)
 8004a10:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a16:	4a28      	ldr	r2, [pc, #160]	; (8004ab8 <HAL_ADC_Start_DMA+0x1a0>)
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1e:	4a27      	ldr	r2, [pc, #156]	; (8004abc <HAL_ADC_Start_DMA+0x1a4>)
 8004a20:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	221c      	movs	r2, #28
 8004a28:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0210 	orr.w	r2, r2, #16
 8004a40:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0201 	orr.w	r2, r2, #1
 8004a50:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3340      	adds	r3, #64	; 0x40
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f001 f891 	bl	8005b88 <HAL_DMA_Start_IT>
 8004a66:	4603      	mov	r3, r0
 8004a68:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff fd5b 	bl	800452a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a74:	e00d      	b.n	8004a92 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004a7e:	e008      	b.n	8004a92 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004a8c:	e001      	b.n	8004a92 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a8e:	2302      	movs	r3, #2
 8004a90:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	50000100 	.word	0x50000100
 8004aa0:	50000300 	.word	0x50000300
 8004aa4:	50000700 	.word	0x50000700
 8004aa8:	50000600 	.word	0x50000600
 8004aac:	50000500 	.word	0x50000500
 8004ab0:	50000400 	.word	0x50000400
 8004ab4:	08005495 	.word	0x08005495
 8004ab8:	0800556d 	.word	0x0800556d
 8004abc:	08005589 	.word	0x08005589

08004ac0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b0b6      	sub	sp, #216	; 0xd8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d102      	bne.n	8004b0c <HAL_ADC_ConfigChannel+0x24>
 8004b06:	2302      	movs	r3, #2
 8004b08:	f000 bc13 	b.w	8005332 <HAL_ADC_ConfigChannel+0x84a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fd1a 	bl	8004552 <LL_ADC_REG_IsConversionOngoing>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f040 83f3 	bne.w	800530c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	f7ff fbfb 	bl	800432e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fd08 	bl	8004552 <LL_ADC_REG_IsConversionOngoing>
 8004b42:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff fd14 	bl	8004578 <LL_ADC_INJ_IsConversionOngoing>
 8004b50:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f040 81d9 	bne.w	8004f10 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f040 81d4 	bne.w	8004f10 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b70:	d10f      	bne.n	8004b92 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f7ff fc02 	bl	8004386 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fba9 	bl	80042e2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004b90:	e00e      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f7ff fbf1 	bl	8004386 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fb99 	bl	80042e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	08db      	lsrs	r3, r3, #3
 8004bbc:	f003 0303 	and.w	r3, r3, #3
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d022      	beq.n	8004c18 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6919      	ldr	r1, [r3, #16]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004be2:	f7ff faf3 	bl	80041cc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6919      	ldr	r1, [r3, #16]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f7ff fb3f 	bl	8004276 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d102      	bne.n	8004c0e <HAL_ADC_ConfigChannel+0x126>
 8004c08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c0c:	e000      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x128>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	461a      	mov	r2, r3
 8004c12:	f7ff fb4b 	bl	80042ac <LL_ADC_SetOffsetSaturation>
 8004c16:	e17b      	b.n	8004f10 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff faf8 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0x15c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2100      	movs	r1, #0
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff faed 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	0e9b      	lsrs	r3, r3, #26
 8004c3e:	f003 021f 	and.w	r2, r3, #31
 8004c42:	e01e      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x19a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2100      	movs	r1, #0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fae2 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c5a:	fa93 f3a3 	rbit	r3, r3
 8004c5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004c72:	2320      	movs	r3, #32
 8004c74:	e004      	b.n	8004c80 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004c76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c7a:	fab3 f383 	clz	r3, r3
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d105      	bne.n	8004c9a <HAL_ADC_ConfigChannel+0x1b2>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	0e9b      	lsrs	r3, r3, #26
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	e018      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x1e4>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ca6:	fa93 f3a3 	rbit	r3, r3
 8004caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004cb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004cbe:	2320      	movs	r3, #32
 8004cc0:	e004      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004cc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cc6:	fab3 f383 	clz	r3, r3
 8004cca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d106      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff fab1 	bl	8004240 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff fa95 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10a      	bne.n	8004d0a <HAL_ADC_ConfigChannel+0x222>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff fa8a 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004d00:	4603      	mov	r3, r0
 8004d02:	0e9b      	lsrs	r3, r3, #26
 8004d04:	f003 021f 	and.w	r2, r3, #31
 8004d08:	e01e      	b.n	8004d48 <HAL_ADC_ConfigChannel+0x260>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2101      	movs	r1, #1
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff fa7f 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d20:	fa93 f3a3 	rbit	r3, r3
 8004d24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004d28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004d38:	2320      	movs	r3, #32
 8004d3a:	e004      	b.n	8004d46 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004d3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d40:	fab3 f383 	clz	r3, r3
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d105      	bne.n	8004d60 <HAL_ADC_ConfigChannel+0x278>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	0e9b      	lsrs	r3, r3, #26
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	e018      	b.n	8004d92 <HAL_ADC_ConfigChannel+0x2aa>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d6c:	fa93 f3a3 	rbit	r3, r3
 8004d70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004d74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004d84:	2320      	movs	r3, #32
 8004d86:	e004      	b.n	8004d92 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004d88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d8c:	fab3 f383 	clz	r3, r3
 8004d90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d106      	bne.n	8004da4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fa4e 	bl	8004240 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2102      	movs	r1, #2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff fa32 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <HAL_ADC_ConfigChannel+0x2e8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2102      	movs	r1, #2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fa27 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	0e9b      	lsrs	r3, r3, #26
 8004dca:	f003 021f 	and.w	r2, r3, #31
 8004dce:	e01e      	b.n	8004e0e <HAL_ADC_ConfigChannel+0x326>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2102      	movs	r1, #2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fa1c 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004de6:	fa93 f3a3 	rbit	r3, r3
 8004dea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004dee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004df6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004dfe:	2320      	movs	r3, #32
 8004e00:	e004      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d105      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x33e>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	0e9b      	lsrs	r3, r3, #26
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	e016      	b.n	8004e54 <HAL_ADC_ConfigChannel+0x36c>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e32:	fa93 f3a3 	rbit	r3, r3
 8004e36:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004e38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004e46:	2320      	movs	r3, #32
 8004e48:	e004      	b.n	8004e54 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e4e:	fab3 f383 	clz	r3, r3
 8004e52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d106      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2102      	movs	r1, #2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff f9ed 	bl	8004240 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2103      	movs	r1, #3
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff f9d1 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10a      	bne.n	8004e92 <HAL_ADC_ConfigChannel+0x3aa>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2103      	movs	r1, #3
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff f9c6 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	0e9b      	lsrs	r3, r3, #26
 8004e8c:	f003 021f 	and.w	r2, r3, #31
 8004e90:	e017      	b.n	8004ec2 <HAL_ADC_ConfigChannel+0x3da>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2103      	movs	r1, #3
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff f9bb 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ea4:	fa93 f3a3 	rbit	r3, r3
 8004ea8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004eae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	e003      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eba:	fab3 f383 	clz	r3, r3
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d105      	bne.n	8004eda <HAL_ADC_ConfigChannel+0x3f2>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	0e9b      	lsrs	r3, r3, #26
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	e011      	b.n	8004efe <HAL_ADC_ConfigChannel+0x416>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee2:	fa93 f3a3 	rbit	r3, r3
 8004ee6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004ef2:	2320      	movs	r3, #32
 8004ef4:	e003      	b.n	8004efe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef8:	fab3 f383 	clz	r3, r3
 8004efc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d106      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2200      	movs	r2, #0
 8004f08:	2103      	movs	r1, #3
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff f998 	bl	8004240 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff faf5 	bl	8004504 <LL_ADC_IsEnabled>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f040 813d 	bne.w	800519c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6819      	ldr	r1, [r3, #0]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f7ff fa54 	bl	80043dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4aa2      	ldr	r2, [pc, #648]	; (80051c4 <HAL_ADC_ConfigChannel+0x6dc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	f040 812e 	bne.w	800519c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <HAL_ADC_ConfigChannel+0x480>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	0e9b      	lsrs	r3, r3, #26
 8004f56:	3301      	adds	r3, #1
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	2b09      	cmp	r3, #9
 8004f5e:	bf94      	ite	ls
 8004f60:	2301      	movls	r3, #1
 8004f62:	2300      	movhi	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	e019      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x4b4>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f70:	fa93 f3a3 	rbit	r3, r3
 8004f74:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f78:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004f80:	2320      	movs	r3, #32
 8004f82:	e003      	b.n	8004f8c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f86:	fab3 f383 	clz	r3, r3
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	f003 031f 	and.w	r3, r3, #31
 8004f92:	2b09      	cmp	r3, #9
 8004f94:	bf94      	ite	ls
 8004f96:	2301      	movls	r3, #1
 8004f98:	2300      	movhi	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d079      	beq.n	8005094 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d107      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x4d4>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	0e9b      	lsrs	r3, r3, #26
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	069b      	lsls	r3, r3, #26
 8004fb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fba:	e015      	b.n	8004fe8 <HAL_ADC_ConfigChannel+0x500>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc4:	fa93 f3a3 	rbit	r3, r3
 8004fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fcc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004fd4:	2320      	movs	r3, #32
 8004fd6:	e003      	b.n	8004fe0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fda:	fab3 f383 	clz	r3, r3
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	069b      	lsls	r3, r3, #26
 8004fe4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <HAL_ADC_ConfigChannel+0x520>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	0e9b      	lsrs	r3, r3, #26
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	f003 031f 	and.w	r3, r3, #31
 8005000:	2101      	movs	r1, #1
 8005002:	fa01 f303 	lsl.w	r3, r1, r3
 8005006:	e017      	b.n	8005038 <HAL_ADC_ConfigChannel+0x550>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005010:	fa93 f3a3 	rbit	r3, r3
 8005014:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005018:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800501a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005020:	2320      	movs	r3, #32
 8005022:	e003      	b.n	800502c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005026:	fab3 f383 	clz	r3, r3
 800502a:	b2db      	uxtb	r3, r3
 800502c:	3301      	adds	r3, #1
 800502e:	f003 031f 	and.w	r3, r3, #31
 8005032:	2101      	movs	r1, #1
 8005034:	fa01 f303 	lsl.w	r3, r1, r3
 8005038:	ea42 0103 	orr.w	r1, r2, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10a      	bne.n	800505e <HAL_ADC_ConfigChannel+0x576>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	0e9b      	lsrs	r3, r3, #26
 800504e:	3301      	adds	r3, #1
 8005050:	f003 021f 	and.w	r2, r3, #31
 8005054:	4613      	mov	r3, r2
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	4413      	add	r3, r2
 800505a:	051b      	lsls	r3, r3, #20
 800505c:	e018      	b.n	8005090 <HAL_ADC_ConfigChannel+0x5a8>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	fa93 f3a3 	rbit	r3, r3
 800506a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800506c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005076:	2320      	movs	r3, #32
 8005078:	e003      	b.n	8005082 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800507a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507c:	fab3 f383 	clz	r3, r3
 8005080:	b2db      	uxtb	r3, r3
 8005082:	3301      	adds	r3, #1
 8005084:	f003 021f 	and.w	r2, r3, #31
 8005088:	4613      	mov	r3, r2
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	4413      	add	r3, r2
 800508e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005090:	430b      	orrs	r3, r1
 8005092:	e07e      	b.n	8005192 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800509c:	2b00      	cmp	r3, #0
 800509e:	d107      	bne.n	80050b0 <HAL_ADC_ConfigChannel+0x5c8>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	0e9b      	lsrs	r3, r3, #26
 80050a6:	3301      	adds	r3, #1
 80050a8:	069b      	lsls	r3, r3, #26
 80050aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050ae:	e015      	b.n	80050dc <HAL_ADC_ConfigChannel+0x5f4>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	fa93 f3a3 	rbit	r3, r3
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80050c8:	2320      	movs	r3, #32
 80050ca:	e003      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	fab3 f383 	clz	r3, r3
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	3301      	adds	r3, #1
 80050d6:	069b      	lsls	r3, r3, #26
 80050d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d109      	bne.n	80050fc <HAL_ADC_ConfigChannel+0x614>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	0e9b      	lsrs	r3, r3, #26
 80050ee:	3301      	adds	r3, #1
 80050f0:	f003 031f 	and.w	r3, r3, #31
 80050f4:	2101      	movs	r1, #1
 80050f6:	fa01 f303 	lsl.w	r3, r1, r3
 80050fa:	e017      	b.n	800512c <HAL_ADC_ConfigChannel+0x644>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	fa93 f3a3 	rbit	r3, r3
 8005108:	61fb      	str	r3, [r7, #28]
  return result;
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005114:	2320      	movs	r3, #32
 8005116:	e003      	b.n	8005120 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	fab3 f383 	clz	r3, r3
 800511e:	b2db      	uxtb	r3, r3
 8005120:	3301      	adds	r3, #1
 8005122:	f003 031f 	and.w	r3, r3, #31
 8005126:	2101      	movs	r1, #1
 8005128:	fa01 f303 	lsl.w	r3, r1, r3
 800512c:	ea42 0103 	orr.w	r1, r2, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10d      	bne.n	8005158 <HAL_ADC_ConfigChannel+0x670>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	0e9b      	lsrs	r3, r3, #26
 8005142:	3301      	adds	r3, #1
 8005144:	f003 021f 	and.w	r2, r3, #31
 8005148:	4613      	mov	r3, r2
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	4413      	add	r3, r2
 800514e:	3b1e      	subs	r3, #30
 8005150:	051b      	lsls	r3, r3, #20
 8005152:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005156:	e01b      	b.n	8005190 <HAL_ADC_ConfigChannel+0x6a8>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	fa93 f3a3 	rbit	r3, r3
 8005164:	613b      	str	r3, [r7, #16]
  return result;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005170:	2320      	movs	r3, #32
 8005172:	e003      	b.n	800517c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	fab3 f383 	clz	r3, r3
 800517a:	b2db      	uxtb	r3, r3
 800517c:	3301      	adds	r3, #1
 800517e:	f003 021f 	and.w	r2, r3, #31
 8005182:	4613      	mov	r3, r2
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	4413      	add	r3, r2
 8005188:	3b1e      	subs	r3, #30
 800518a:	051b      	lsls	r3, r3, #20
 800518c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005190:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005196:	4619      	mov	r1, r3
 8005198:	f7ff f8f5 	bl	8004386 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <HAL_ADC_ConfigChannel+0x6e0>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80be 	beq.w	8005326 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b2:	d004      	beq.n	80051be <HAL_ADC_ConfigChannel+0x6d6>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a04      	ldr	r2, [pc, #16]	; (80051cc <HAL_ADC_ConfigChannel+0x6e4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d10a      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x6ec>
 80051be:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <HAL_ADC_ConfigChannel+0x6e8>)
 80051c0:	e009      	b.n	80051d6 <HAL_ADC_ConfigChannel+0x6ee>
 80051c2:	bf00      	nop
 80051c4:	407f0000 	.word	0x407f0000
 80051c8:	80080000 	.word	0x80080000
 80051cc:	50000100 	.word	0x50000100
 80051d0:	50000300 	.word	0x50000300
 80051d4:	4b59      	ldr	r3, [pc, #356]	; (800533c <HAL_ADC_ConfigChannel+0x854>)
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fe ffea 	bl	80041b0 <LL_ADC_GetCommonPathInternalCh>
 80051dc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a56      	ldr	r2, [pc, #344]	; (8005340 <HAL_ADC_ConfigChannel+0x858>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <HAL_ADC_ConfigChannel+0x70c>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a55      	ldr	r2, [pc, #340]	; (8005344 <HAL_ADC_ConfigChannel+0x85c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d13a      	bne.n	800526a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d134      	bne.n	800526a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005208:	d005      	beq.n	8005216 <HAL_ADC_ConfigChannel+0x72e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a4e      	ldr	r2, [pc, #312]	; (8005348 <HAL_ADC_ConfigChannel+0x860>)
 8005210:	4293      	cmp	r3, r2
 8005212:	f040 8085 	bne.w	8005320 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800521e:	d004      	beq.n	800522a <HAL_ADC_ConfigChannel+0x742>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a49      	ldr	r2, [pc, #292]	; (800534c <HAL_ADC_ConfigChannel+0x864>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d101      	bne.n	800522e <HAL_ADC_ConfigChannel+0x746>
 800522a:	4a49      	ldr	r2, [pc, #292]	; (8005350 <HAL_ADC_ConfigChannel+0x868>)
 800522c:	e000      	b.n	8005230 <HAL_ADC_ConfigChannel+0x748>
 800522e:	4a43      	ldr	r2, [pc, #268]	; (800533c <HAL_ADC_ConfigChannel+0x854>)
 8005230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005234:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f7fe ffa5 	bl	800418a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005240:	4b44      	ldr	r3, [pc, #272]	; (8005354 <HAL_ADC_ConfigChannel+0x86c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	099b      	lsrs	r3, r3, #6
 8005246:	4a44      	ldr	r2, [pc, #272]	; (8005358 <HAL_ADC_ConfigChannel+0x870>)
 8005248:	fba2 2303 	umull	r2, r3, r2, r3
 800524c:	099b      	lsrs	r3, r3, #6
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	4613      	mov	r3, r2
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	4413      	add	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800525a:	e002      	b.n	8005262 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3b01      	subs	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f9      	bne.n	800525c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005268:	e05a      	b.n	8005320 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a3b      	ldr	r2, [pc, #236]	; (800535c <HAL_ADC_ConfigChannel+0x874>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d125      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005274:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d11f      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a31      	ldr	r2, [pc, #196]	; (800534c <HAL_ADC_ConfigChannel+0x864>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d104      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x7ac>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a34      	ldr	r2, [pc, #208]	; (8005360 <HAL_ADC_ConfigChannel+0x878>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d047      	beq.n	8005324 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800529c:	d004      	beq.n	80052a8 <HAL_ADC_ConfigChannel+0x7c0>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a2a      	ldr	r2, [pc, #168]	; (800534c <HAL_ADC_ConfigChannel+0x864>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d101      	bne.n	80052ac <HAL_ADC_ConfigChannel+0x7c4>
 80052a8:	4a29      	ldr	r2, [pc, #164]	; (8005350 <HAL_ADC_ConfigChannel+0x868>)
 80052aa:	e000      	b.n	80052ae <HAL_ADC_ConfigChannel+0x7c6>
 80052ac:	4a23      	ldr	r2, [pc, #140]	; (800533c <HAL_ADC_ConfigChannel+0x854>)
 80052ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b6:	4619      	mov	r1, r3
 80052b8:	4610      	mov	r0, r2
 80052ba:	f7fe ff66 	bl	800418a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052be:	e031      	b.n	8005324 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a27      	ldr	r2, [pc, #156]	; (8005364 <HAL_ADC_ConfigChannel+0x87c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d12d      	bne.n	8005326 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d127      	bne.n	8005326 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1c      	ldr	r2, [pc, #112]	; (800534c <HAL_ADC_ConfigChannel+0x864>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d022      	beq.n	8005326 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052e8:	d004      	beq.n	80052f4 <HAL_ADC_ConfigChannel+0x80c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a17      	ldr	r2, [pc, #92]	; (800534c <HAL_ADC_ConfigChannel+0x864>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d101      	bne.n	80052f8 <HAL_ADC_ConfigChannel+0x810>
 80052f4:	4a16      	ldr	r2, [pc, #88]	; (8005350 <HAL_ADC_ConfigChannel+0x868>)
 80052f6:	e000      	b.n	80052fa <HAL_ADC_ConfigChannel+0x812>
 80052f8:	4a10      	ldr	r2, [pc, #64]	; (800533c <HAL_ADC_ConfigChannel+0x854>)
 80052fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005302:	4619      	mov	r1, r3
 8005304:	4610      	mov	r0, r2
 8005306:	f7fe ff40 	bl	800418a <LL_ADC_SetCommonPathInternalCh>
 800530a:	e00c      	b.n	8005326 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005310:	f043 0220 	orr.w	r2, r3, #32
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800531e:	e002      	b.n	8005326 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005320:	bf00      	nop
 8005322:	e000      	b.n	8005326 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005324:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800532e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005332:	4618      	mov	r0, r3
 8005334:	37d8      	adds	r7, #216	; 0xd8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	50000700 	.word	0x50000700
 8005340:	c3210000 	.word	0xc3210000
 8005344:	90c00010 	.word	0x90c00010
 8005348:	50000600 	.word	0x50000600
 800534c:	50000100 	.word	0x50000100
 8005350:	50000300 	.word	0x50000300
 8005354:	20000000 	.word	0x20000000
 8005358:	053e2d63 	.word	0x053e2d63
 800535c:	c7520000 	.word	0xc7520000
 8005360:	50000500 	.word	0x50000500
 8005364:	cb840000 	.word	0xcb840000

08005368 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005370:	2300      	movs	r3, #0
 8005372:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff f8c3 	bl	8004504 <LL_ADC_IsEnabled>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d176      	bne.n	8005472 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	4b3c      	ldr	r3, [pc, #240]	; (800547c <ADC_Enable+0x114>)
 800538c:	4013      	ands	r3, r2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00d      	beq.n	80053ae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	f043 0210 	orr.w	r2, r3, #16
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a2:	f043 0201 	orr.w	r2, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e062      	b.n	8005474 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff f892 	bl	80044dc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053c0:	d004      	beq.n	80053cc <ADC_Enable+0x64>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a2e      	ldr	r2, [pc, #184]	; (8005480 <ADC_Enable+0x118>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d101      	bne.n	80053d0 <ADC_Enable+0x68>
 80053cc:	4b2d      	ldr	r3, [pc, #180]	; (8005484 <ADC_Enable+0x11c>)
 80053ce:	e000      	b.n	80053d2 <ADC_Enable+0x6a>
 80053d0:	4b2d      	ldr	r3, [pc, #180]	; (8005488 <ADC_Enable+0x120>)
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe feec 	bl	80041b0 <LL_ADC_GetCommonPathInternalCh>
 80053d8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80053da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d013      	beq.n	800540a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053e2:	4b2a      	ldr	r3, [pc, #168]	; (800548c <ADC_Enable+0x124>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	099b      	lsrs	r3, r3, #6
 80053e8:	4a29      	ldr	r2, [pc, #164]	; (8005490 <ADC_Enable+0x128>)
 80053ea:	fba2 2303 	umull	r2, r3, r2, r3
 80053ee:	099b      	lsrs	r3, r3, #6
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	4613      	mov	r3, r2
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053fc:	e002      	b.n	8005404 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	3b01      	subs	r3, #1
 8005402:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f9      	bne.n	80053fe <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800540a:	f7fe fe7d 	bl	8004108 <HAL_GetTick>
 800540e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005410:	e028      	b.n	8005464 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff f874 	bl	8004504 <LL_ADC_IsEnabled>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff f858 	bl	80044dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800542c:	f7fe fe6c 	bl	8004108 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d914      	bls.n	8005464 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b01      	cmp	r3, #1
 8005446:	d00d      	beq.n	8005464 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544c:	f043 0210 	orr.w	r2, r3, #16
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005458:	f043 0201 	orr.w	r2, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e007      	b.n	8005474 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b01      	cmp	r3, #1
 8005470:	d1cf      	bne.n	8005412 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	8000003f 	.word	0x8000003f
 8005480:	50000100 	.word	0x50000100
 8005484:	50000300 	.word	0x50000300
 8005488:	50000700 	.word	0x50000700
 800548c:	20000000 	.word	0x20000000
 8005490:	053e2d63 	.word	0x053e2d63

08005494 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d14b      	bne.n	8005546 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d021      	beq.n	800550c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fe ff1b 	bl	8004308 <LL_ADC_REG_IsTriggerSourceSWStart>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d032      	beq.n	800553e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d12b      	bne.n	800553e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d11f      	bne.n	800553e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005502:	f043 0201 	orr.w	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	65da      	str	r2, [r3, #92]	; 0x5c
 800550a:	e018      	b.n	800553e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d111      	bne.n	800553e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800552a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d105      	bne.n	800553e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005536:	f043 0201 	orr.w	r2, r3, #1
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7fe fd34 	bl	8003fac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005544:	e00e      	b.n	8005564 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554a:	f003 0310 	and.w	r3, r3, #16
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff fabe 	bl	8004ad4 <HAL_ADC_ErrorCallback>
}
 8005558:	e004      	b.n	8005564 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	4798      	blx	r3
}
 8005564:	bf00      	nop
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005578:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f7ff faa0 	bl	8004ac0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005580:	bf00      	nop
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005594:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a6:	f043 0204 	orr.w	r2, r3, #4
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f7ff fa90 	bl	8004ad4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80055b4:	bf00      	nop
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <LL_ADC_IsEnabled>:
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <LL_ADC_IsEnabled+0x18>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <LL_ADC_IsEnabled+0x1a>
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d101      	bne.n	80055fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005608:	b590      	push	{r4, r7, lr}
 800560a:	b0a1      	sub	sp, #132	; 0x84
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005622:	2302      	movs	r3, #2
 8005624:	e0e7      	b.n	80057f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800562e:	2300      	movs	r3, #0
 8005630:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005632:	2300      	movs	r3, #0
 8005634:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800563e:	d102      	bne.n	8005646 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005640:	4b6f      	ldr	r3, [pc, #444]	; (8005800 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005642:	60bb      	str	r3, [r7, #8]
 8005644:	e009      	b.n	800565a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a6e      	ldr	r2, [pc, #440]	; (8005804 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d102      	bne.n	8005656 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005650:	4b6d      	ldr	r3, [pc, #436]	; (8005808 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005652:	60bb      	str	r3, [r7, #8]
 8005654:	e001      	b.n	800565a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10b      	bne.n	8005678 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005664:	f043 0220 	orr.w	r2, r3, #32
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e0be      	b.n	80057f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff ffb1 	bl	80055e2 <LL_ADC_REG_IsConversionOngoing>
 8005680:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff ffab 	bl	80055e2 <LL_ADC_REG_IsConversionOngoing>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	f040 80a0 	bne.w	80057d4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005696:	2b00      	cmp	r3, #0
 8005698:	f040 809c 	bne.w	80057d4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056a4:	d004      	beq.n	80056b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a55      	ldr	r2, [pc, #340]	; (8005800 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d101      	bne.n	80056b4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80056b0:	4b56      	ldr	r3, [pc, #344]	; (800580c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80056b2:	e000      	b.n	80056b6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80056b4:	4b56      	ldr	r3, [pc, #344]	; (8005810 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80056b6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d04b      	beq.n	8005758 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80056c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	6859      	ldr	r1, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056d2:	035b      	lsls	r3, r3, #13
 80056d4:	430b      	orrs	r3, r1
 80056d6:	431a      	orrs	r2, r3
 80056d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056e4:	d004      	beq.n	80056f0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a45      	ldr	r2, [pc, #276]	; (8005800 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d10f      	bne.n	8005710 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80056f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80056f4:	f7ff ff62 	bl	80055bc <LL_ADC_IsEnabled>
 80056f8:	4604      	mov	r4, r0
 80056fa:	4841      	ldr	r0, [pc, #260]	; (8005800 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056fc:	f7ff ff5e 	bl	80055bc <LL_ADC_IsEnabled>
 8005700:	4603      	mov	r3, r0
 8005702:	4323      	orrs	r3, r4
 8005704:	2b00      	cmp	r3, #0
 8005706:	bf0c      	ite	eq
 8005708:	2301      	moveq	r3, #1
 800570a:	2300      	movne	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	e012      	b.n	8005736 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005710:	483c      	ldr	r0, [pc, #240]	; (8005804 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005712:	f7ff ff53 	bl	80055bc <LL_ADC_IsEnabled>
 8005716:	4604      	mov	r4, r0
 8005718:	483b      	ldr	r0, [pc, #236]	; (8005808 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800571a:	f7ff ff4f 	bl	80055bc <LL_ADC_IsEnabled>
 800571e:	4603      	mov	r3, r0
 8005720:	431c      	orrs	r4, r3
 8005722:	483c      	ldr	r0, [pc, #240]	; (8005814 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005724:	f7ff ff4a 	bl	80055bc <LL_ADC_IsEnabled>
 8005728:	4603      	mov	r3, r0
 800572a:	4323      	orrs	r3, r4
 800572c:	2b00      	cmp	r3, #0
 800572e:	bf0c      	ite	eq
 8005730:	2301      	moveq	r3, #1
 8005732:	2300      	movne	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d056      	beq.n	80057e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800573a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005742:	f023 030f 	bic.w	r3, r3, #15
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	6811      	ldr	r1, [r2, #0]
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	6892      	ldr	r2, [r2, #8]
 800574e:	430a      	orrs	r2, r1
 8005750:	431a      	orrs	r2, r3
 8005752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005754:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005756:	e047      	b.n	80057e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005762:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800576c:	d004      	beq.n	8005778 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a23      	ldr	r2, [pc, #140]	; (8005800 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d10f      	bne.n	8005798 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005778:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800577c:	f7ff ff1e 	bl	80055bc <LL_ADC_IsEnabled>
 8005780:	4604      	mov	r4, r0
 8005782:	481f      	ldr	r0, [pc, #124]	; (8005800 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005784:	f7ff ff1a 	bl	80055bc <LL_ADC_IsEnabled>
 8005788:	4603      	mov	r3, r0
 800578a:	4323      	orrs	r3, r4
 800578c:	2b00      	cmp	r3, #0
 800578e:	bf0c      	ite	eq
 8005790:	2301      	moveq	r3, #1
 8005792:	2300      	movne	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	e012      	b.n	80057be <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005798:	481a      	ldr	r0, [pc, #104]	; (8005804 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800579a:	f7ff ff0f 	bl	80055bc <LL_ADC_IsEnabled>
 800579e:	4604      	mov	r4, r0
 80057a0:	4819      	ldr	r0, [pc, #100]	; (8005808 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80057a2:	f7ff ff0b 	bl	80055bc <LL_ADC_IsEnabled>
 80057a6:	4603      	mov	r3, r0
 80057a8:	431c      	orrs	r4, r3
 80057aa:	481a      	ldr	r0, [pc, #104]	; (8005814 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80057ac:	f7ff ff06 	bl	80055bc <LL_ADC_IsEnabled>
 80057b0:	4603      	mov	r3, r0
 80057b2:	4323      	orrs	r3, r4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	bf0c      	ite	eq
 80057b8:	2301      	moveq	r3, #1
 80057ba:	2300      	movne	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d012      	beq.n	80057e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80057c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80057ca:	f023 030f 	bic.w	r3, r3, #15
 80057ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80057d0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80057d2:	e009      	b.n	80057e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d8:	f043 0220 	orr.w	r2, r3, #32
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80057e6:	e000      	b.n	80057ea <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80057e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80057f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3784      	adds	r7, #132	; 0x84
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd90      	pop	{r4, r7, pc}
 80057fe:	bf00      	nop
 8005800:	50000100 	.word	0x50000100
 8005804:	50000400 	.word	0x50000400
 8005808:	50000500 	.word	0x50000500
 800580c:	50000300 	.word	0x50000300
 8005810:	50000700 	.word	0x50000700
 8005814:	50000600 	.word	0x50000600

08005818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <__NVIC_SetPriorityGrouping+0x44>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005834:	4013      	ands	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800584a:	4a04      	ldr	r2, [pc, #16]	; (800585c <__NVIC_SetPriorityGrouping+0x44>)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	60d3      	str	r3, [r2, #12]
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	e000ed00 	.word	0xe000ed00

08005860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005864:	4b04      	ldr	r3, [pc, #16]	; (8005878 <__NVIC_GetPriorityGrouping+0x18>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	0a1b      	lsrs	r3, r3, #8
 800586a:	f003 0307 	and.w	r3, r3, #7
}
 800586e:	4618      	mov	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	e000ed00 	.word	0xe000ed00

0800587c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588a:	2b00      	cmp	r3, #0
 800588c:	db0b      	blt.n	80058a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	f003 021f 	and.w	r2, r3, #31
 8005894:	4907      	ldr	r1, [pc, #28]	; (80058b4 <__NVIC_EnableIRQ+0x38>)
 8005896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	2001      	movs	r0, #1
 800589e:	fa00 f202 	lsl.w	r2, r0, r2
 80058a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	e000e100 	.word	0xe000e100

080058b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	6039      	str	r1, [r7, #0]
 80058c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	db0a      	blt.n	80058e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	490c      	ldr	r1, [pc, #48]	; (8005904 <__NVIC_SetPriority+0x4c>)
 80058d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d6:	0112      	lsls	r2, r2, #4
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	440b      	add	r3, r1
 80058dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058e0:	e00a      	b.n	80058f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	4908      	ldr	r1, [pc, #32]	; (8005908 <__NVIC_SetPriority+0x50>)
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	3b04      	subs	r3, #4
 80058f0:	0112      	lsls	r2, r2, #4
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	440b      	add	r3, r1
 80058f6:	761a      	strb	r2, [r3, #24]
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	e000e100 	.word	0xe000e100
 8005908:	e000ed00 	.word	0xe000ed00

0800590c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800590c:	b480      	push	{r7}
 800590e:	b089      	sub	sp, #36	; 0x24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f1c3 0307 	rsb	r3, r3, #7
 8005926:	2b04      	cmp	r3, #4
 8005928:	bf28      	it	cs
 800592a:	2304      	movcs	r3, #4
 800592c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3304      	adds	r3, #4
 8005932:	2b06      	cmp	r3, #6
 8005934:	d902      	bls.n	800593c <NVIC_EncodePriority+0x30>
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3b03      	subs	r3, #3
 800593a:	e000      	b.n	800593e <NVIC_EncodePriority+0x32>
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005940:	f04f 32ff 	mov.w	r2, #4294967295
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43da      	mvns	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	401a      	ands	r2, r3
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005954:	f04f 31ff 	mov.w	r1, #4294967295
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	43d9      	mvns	r1, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005964:	4313      	orrs	r3, r2
         );
}
 8005966:	4618      	mov	r0, r3
 8005968:	3724      	adds	r7, #36	; 0x24
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3b01      	subs	r3, #1
 8005980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005984:	d301      	bcc.n	800598a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005986:	2301      	movs	r3, #1
 8005988:	e00f      	b.n	80059aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800598a:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <SysTick_Config+0x40>)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3b01      	subs	r3, #1
 8005990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005992:	210f      	movs	r1, #15
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	f7ff ff8e 	bl	80058b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <SysTick_Config+0x40>)
 800599e:	2200      	movs	r2, #0
 80059a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059a2:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <SysTick_Config+0x40>)
 80059a4:	2207      	movs	r2, #7
 80059a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	e000e010 	.word	0xe000e010

080059b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff ff29 	bl	8005818 <__NVIC_SetPriorityGrouping>
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	4603      	mov	r3, r0
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059dc:	f7ff ff40 	bl	8005860 <__NVIC_GetPriorityGrouping>
 80059e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	6978      	ldr	r0, [r7, #20]
 80059e8:	f7ff ff90 	bl	800590c <NVIC_EncodePriority>
 80059ec:	4602      	mov	r2, r0
 80059ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f2:	4611      	mov	r1, r2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff ff5f 	bl	80058b8 <__NVIC_SetPriority>
}
 80059fa:	bf00      	nop
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	4603      	mov	r3, r0
 8005a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff ff33 	bl	800587c <__NVIC_EnableIRQ>
}
 8005a16:	bf00      	nop
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff ffa4 	bl	8005974 <SysTick_Config>
 8005a2c:	4603      	mov	r3, r0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e08d      	b.n	8005b66 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4b47      	ldr	r3, [pc, #284]	; (8005b70 <HAL_DMA_Init+0x138>)
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d80f      	bhi.n	8005a76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4b45      	ldr	r3, [pc, #276]	; (8005b74 <HAL_DMA_Init+0x13c>)
 8005a5e:	4413      	add	r3, r2
 8005a60:	4a45      	ldr	r2, [pc, #276]	; (8005b78 <HAL_DMA_Init+0x140>)
 8005a62:	fba2 2303 	umull	r2, r3, r2, r3
 8005a66:	091b      	lsrs	r3, r3, #4
 8005a68:	009a      	lsls	r2, r3, #2
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a42      	ldr	r2, [pc, #264]	; (8005b7c <HAL_DMA_Init+0x144>)
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40
 8005a74:	e00e      	b.n	8005a94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	4b40      	ldr	r3, [pc, #256]	; (8005b80 <HAL_DMA_Init+0x148>)
 8005a7e:	4413      	add	r3, r2
 8005a80:	4a3d      	ldr	r2, [pc, #244]	; (8005b78 <HAL_DMA_Init+0x140>)
 8005a82:	fba2 2303 	umull	r2, r3, r2, r3
 8005a86:	091b      	lsrs	r3, r3, #4
 8005a88:	009a      	lsls	r2, r3, #2
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a3c      	ldr	r2, [pc, #240]	; (8005b84 <HAL_DMA_Init+0x14c>)
 8005a92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa2c 	bl	8005f44 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005af4:	d102      	bne.n	8005afc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005b10:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d010      	beq.n	8005b3c <HAL_DMA_Init+0x104>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d80c      	bhi.n	8005b3c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fa4c 	bl	8005fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005b38:	605a      	str	r2, [r3, #4]
 8005b3a:	e008      	b.n	8005b4e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40020407 	.word	0x40020407
 8005b74:	bffdfff8 	.word	0xbffdfff8
 8005b78:	cccccccd 	.word	0xcccccccd
 8005b7c:	40020000 	.word	0x40020000
 8005b80:	bffdfbf8 	.word	0xbffdfbf8
 8005b84:	40020400 	.word	0x40020400

08005b88 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_DMA_Start_IT+0x20>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e066      	b.n	8005c76 <HAL_DMA_Start_IT+0xee>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d155      	bne.n	8005c68 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0201 	bic.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	68b9      	ldr	r1, [r7, #8]
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f970 	bl	8005ec6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d008      	beq.n	8005c00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 020e 	orr.w	r2, r2, #14
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e00f      	b.n	8005c20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0204 	bic.w	r2, r2, #4
 8005c0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 020a 	orr.w	r2, r2, #10
 8005c1e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d007      	beq.n	8005c3e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c3c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c54:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0201 	orr.w	r2, r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	e005      	b.n	8005c74 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c70:	2302      	movs	r3, #2
 8005c72:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d00d      	beq.n	8005cb2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	73fb      	strb	r3, [r7, #15]
 8005cb0:	e047      	b.n	8005d42 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 020e 	bic.w	r2, r2, #14
 8005cc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ce0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce6:	f003 021f 	and.w	r2, r3, #31
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	2101      	movs	r1, #1
 8005cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8005cf4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005cfe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00c      	beq.n	8005d22 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d16:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005d20:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
    }
  }
  return status;
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d68:	f003 031f 	and.w	r3, r3, #31
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4013      	ands	r3, r2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d026      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x7a>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0304 	and.w	r3, r3, #4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d021      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d107      	bne.n	8005da0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0204 	bic.w	r2, r2, #4
 8005d9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da4:	f003 021f 	and.w	r2, r3, #31
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	2104      	movs	r1, #4
 8005dae:	fa01 f202 	lsl.w	r2, r1, r2
 8005db2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d071      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005dc4:	e06c      	b.n	8005ea0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dca:	f003 031f 	and.w	r3, r3, #31
 8005dce:	2202      	movs	r2, #2
 8005dd0:	409a      	lsls	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d02e      	beq.n	8005e38 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d029      	beq.n	8005e38 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10b      	bne.n	8005e0a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 020a 	bic.w	r2, r2, #10
 8005e00:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0e:	f003 021f 	and.w	r2, r3, #31
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	2102      	movs	r1, #2
 8005e18:	fa01 f202 	lsl.w	r2, r1, r2
 8005e1c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d038      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005e36:	e033      	b.n	8005ea0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3c:	f003 031f 	and.w	r3, r3, #31
 8005e40:	2208      	movs	r2, #8
 8005e42:	409a      	lsls	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4013      	ands	r3, r2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d02a      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d025      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 020e 	bic.w	r2, r2, #14
 8005e64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6a:	f003 021f 	and.w	r2, r3, #31
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	2101      	movs	r1, #1
 8005e74:	fa01 f202 	lsl.w	r2, r1, r2
 8005e78:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d004      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ea0:	bf00      	nop
 8005ea2:	bf00      	nop
}
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005eb8:	b2db      	uxtb	r3, r3
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005edc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d004      	beq.n	8005ef0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005eee:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef4:	f003 021f 	and.w	r2, r3, #31
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	2101      	movs	r1, #1
 8005efe:	fa01 f202 	lsl.w	r2, r1, r2
 8005f02:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2b10      	cmp	r3, #16
 8005f12:	d108      	bne.n	8005f26 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f24:	e007      	b.n	8005f36 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	60da      	str	r2, [r3, #12]
}
 8005f36:	bf00      	nop
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
	...

08005f44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	4b16      	ldr	r3, [pc, #88]	; (8005fac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d802      	bhi.n	8005f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005f58:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	e001      	b.n	8005f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005f5e:	4b15      	ldr	r3, [pc, #84]	; (8005fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005f60:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	3b08      	subs	r3, #8
 8005f6e:	4a12      	ldr	r2, [pc, #72]	; (8005fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005f70:	fba2 2303 	umull	r2, r3, r2, r3
 8005f74:	091b      	lsrs	r3, r3, #4
 8005f76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7c:	089b      	lsrs	r3, r3, #2
 8005f7e:	009a      	lsls	r2, r3, #2
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4413      	add	r3, r2
 8005f84:	461a      	mov	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a0b      	ldr	r2, [pc, #44]	; (8005fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005f8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	2201      	movs	r2, #1
 8005f98:	409a      	lsls	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	40020407 	.word	0x40020407
 8005fb0:	40020800 	.word	0x40020800
 8005fb4:	40020820 	.word	0x40020820
 8005fb8:	cccccccd 	.word	0xcccccccd
 8005fbc:	40020880 	.word	0x40020880

08005fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	461a      	mov	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a08      	ldr	r2, [pc, #32]	; (8006004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005fe2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	2201      	movs	r2, #1
 8005fee:	409a      	lsls	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005ff4:	bf00      	nop
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	1000823f 	.word	0x1000823f
 8006004:	40020940 	.word	0x40020940

08006008 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e147      	b.n	80062aa <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fd f980 	bl	8003334 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0210 	bic.w	r2, r2, #16
 8006042:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006044:	f7fe f860 	bl	8004108 <HAL_GetTick>
 8006048:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800604a:	e012      	b.n	8006072 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800604c:	f7fe f85c 	bl	8004108 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b0a      	cmp	r3, #10
 8006058:	d90b      	bls.n	8006072 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800605e:	f043 0201 	orr.w	r2, r3, #1
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2203      	movs	r2, #3
 800606a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e11b      	b.n	80062aa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b08      	cmp	r3, #8
 800607e:	d0e5      	beq.n	800604c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006090:	f7fe f83a 	bl	8004108 <HAL_GetTick>
 8006094:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006096:	e012      	b.n	80060be <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006098:	f7fe f836 	bl	8004108 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b0a      	cmp	r3, #10
 80060a4:	d90b      	bls.n	80060be <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060aa:	f043 0201 	orr.w	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2203      	movs	r2, #3
 80060b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e0f5      	b.n	80062aa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0e5      	beq.n	8006098 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0202 	orr.w	r2, r2, #2
 80060da:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a74      	ldr	r2, [pc, #464]	; (80062b4 <HAL_FDCAN_Init+0x2ac>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d103      	bne.n	80060ee <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80060e6:	4a74      	ldr	r2, [pc, #464]	; (80062b8 <HAL_FDCAN_Init+0x2b0>)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	7c1b      	ldrb	r3, [r3, #16]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d108      	bne.n	8006108 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699a      	ldr	r2, [r3, #24]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006104:	619a      	str	r2, [r3, #24]
 8006106:	e007      	b.n	8006118 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006116:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	7c5b      	ldrb	r3, [r3, #17]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d108      	bne.n	8006132 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800612e:	619a      	str	r2, [r3, #24]
 8006130:	e007      	b.n	8006142 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	699a      	ldr	r2, [r3, #24]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006140:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	7c9b      	ldrb	r3, [r3, #18]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d108      	bne.n	800615c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006158:	619a      	str	r2, [r3, #24]
 800615a:	e007      	b.n	800616c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800616a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699a      	ldr	r2, [r3, #24]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006190:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0210 	bic.w	r2, r2, #16
 80061a0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d108      	bne.n	80061bc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699a      	ldr	r2, [r3, #24]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0204 	orr.w	r2, r2, #4
 80061b8:	619a      	str	r2, [r3, #24]
 80061ba:	e02c      	b.n	8006216 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d028      	beq.n	8006216 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d01c      	beq.n	8006206 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061da:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0210 	orr.w	r2, r2, #16
 80061ea:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d110      	bne.n	8006216 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0220 	orr.w	r2, r2, #32
 8006202:	619a      	str	r2, [r3, #24]
 8006204:	e007      	b.n	8006216 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699a      	ldr	r2, [r3, #24]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 0220 	orr.w	r2, r2, #32
 8006214:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	3b01      	subs	r3, #1
 800621c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	3b01      	subs	r3, #1
 8006224:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006226:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800622e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	3b01      	subs	r3, #1
 8006238:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800623e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006240:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800624a:	d115      	bne.n	8006278 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	3b01      	subs	r3, #1
 8006258:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800625a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006260:	3b01      	subs	r3, #1
 8006262:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006264:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	3b01      	subs	r3, #1
 800626e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006274:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006276:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f9ae 	bl	80065f0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	40006400 	.word	0x40006400
 80062b8:	40006500 	.word	0x40006500

080062bc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08c      	sub	sp, #48	; 0x30
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ca:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d8:	4013      	ands	r3, r2
 80062da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062f0:	4013      	ands	r3, r2
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006308:	4013      	ands	r3, r2
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006312:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8006316:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631e:	6a3a      	ldr	r2, [r7, #32]
 8006320:	4013      	ands	r3, r2
 8006322:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800632e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	4013      	ands	r3, r2
 800633a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006342:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d006      	beq.n	800636e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2240      	movs	r2, #64	; 0x40
 8006366:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f921 	bl	80065b0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006374:	2b00      	cmp	r3, #0
 8006376:	d019      	beq.n	80063ac <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637e:	2b00      	cmp	r3, #0
 8006380:	d014      	beq.n	80063ac <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800638a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4013      	ands	r3, r2
 8006398:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063a2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80063a4:	6939      	ldr	r1, [r7, #16]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f8e3 	bl	8006572 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80063ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f8a2 	bl	8006506 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d007      	beq.n	80063d8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ce:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80063d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f8a2 	bl	800651c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d007      	beq.n	80063ee <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80063e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f8a2 	bl	8006532 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00c      	beq.n	8006412 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d007      	beq.n	8006412 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800640a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f89b 	bl	8006548 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006418:	2b00      	cmp	r3, #0
 800641a:	d018      	beq.n	800644e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	2b00      	cmp	r3, #0
 8006424:	d013      	beq.n	800644e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800642e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4013      	ands	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2280      	movs	r2, #128	; 0x80
 8006444:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006446:	68f9      	ldr	r1, [r7, #12]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f887 	bl	800655c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00c      	beq.n	8006472 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800646a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f88b 	bl	8006588 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00c      	beq.n	8006496 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800648e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f883 	bl	800659c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00f      	beq.n	80064c0 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80064ce:	69f9      	ldr	r1, [r7, #28]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f881 	bl	80065d8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d009      	beq.n	80064f0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6a3a      	ldr	r2, [r7, #32]
 80064e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f863 	bl	80065c4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80064fe:	bf00      	nop
 8006500:	3730      	adds	r7, #48	; 0x30
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
	...

080065f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80065f8:	4b30      	ldr	r3, [pc, #192]	; (80066bc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80065fa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a2f      	ldr	r2, [pc, #188]	; (80066c0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d103      	bne.n	800660e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800660c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a2c      	ldr	r2, [pc, #176]	; (80066c4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d103      	bne.n	8006620 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800661e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800662e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006636:	041a      	lsls	r2, r3, #16
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006654:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	061a      	lsls	r2, r3, #24
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e005      	b.n	80066a2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3304      	adds	r3, #4
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d3f3      	bcc.n	8006696 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80066ae:	bf00      	nop
 80066b0:	bf00      	nop
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	4000a400 	.word	0x4000a400
 80066c0:	40006800 	.word	0x40006800
 80066c4:	40006c00 	.word	0x40006c00

080066c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80066d6:	e15a      	b.n	800698e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	2101      	movs	r1, #1
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	fa01 f303 	lsl.w	r3, r1, r3
 80066e4:	4013      	ands	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 814c 	beq.w	8006988 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f003 0303 	and.w	r3, r3, #3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d005      	beq.n	8006708 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006704:	2b02      	cmp	r3, #2
 8006706:	d130      	bne.n	800676a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	2203      	movs	r2, #3
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	43db      	mvns	r3, r3
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4013      	ands	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800673e:	2201      	movs	r2, #1
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	43db      	mvns	r3, r3
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4013      	ands	r3, r2
 800674c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	091b      	lsrs	r3, r3, #4
 8006754:	f003 0201 	and.w	r2, r3, #1
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	2b03      	cmp	r3, #3
 8006774:	d017      	beq.n	80067a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	2203      	movs	r2, #3
 8006782:	fa02 f303 	lsl.w	r3, r2, r3
 8006786:	43db      	mvns	r3, r3
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4013      	ands	r3, r2
 800678c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	fa02 f303 	lsl.w	r3, r2, r3
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d123      	bne.n	80067fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	08da      	lsrs	r2, r3, #3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3208      	adds	r2, #8
 80067ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	220f      	movs	r2, #15
 80067ca:	fa02 f303 	lsl.w	r3, r2, r3
 80067ce:	43db      	mvns	r3, r3
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4013      	ands	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	08da      	lsrs	r2, r3, #3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3208      	adds	r2, #8
 80067f4:	6939      	ldr	r1, [r7, #16]
 80067f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	2203      	movs	r2, #3
 8006806:	fa02 f303 	lsl.w	r3, r2, r3
 800680a:	43db      	mvns	r3, r3
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4013      	ands	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f003 0203 	and.w	r2, r3, #3
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	fa02 f303 	lsl.w	r3, r2, r3
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 80a6 	beq.w	8006988 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800683c:	4b5b      	ldr	r3, [pc, #364]	; (80069ac <HAL_GPIO_Init+0x2e4>)
 800683e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006840:	4a5a      	ldr	r2, [pc, #360]	; (80069ac <HAL_GPIO_Init+0x2e4>)
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	6613      	str	r3, [r2, #96]	; 0x60
 8006848:	4b58      	ldr	r3, [pc, #352]	; (80069ac <HAL_GPIO_Init+0x2e4>)
 800684a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006854:	4a56      	ldr	r2, [pc, #344]	; (80069b0 <HAL_GPIO_Init+0x2e8>)
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	089b      	lsrs	r3, r3, #2
 800685a:	3302      	adds	r3, #2
 800685c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006860:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f003 0303 	and.w	r3, r3, #3
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	220f      	movs	r2, #15
 800686c:	fa02 f303 	lsl.w	r3, r2, r3
 8006870:	43db      	mvns	r3, r3
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4013      	ands	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800687e:	d01f      	beq.n	80068c0 <HAL_GPIO_Init+0x1f8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a4c      	ldr	r2, [pc, #304]	; (80069b4 <HAL_GPIO_Init+0x2ec>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d019      	beq.n	80068bc <HAL_GPIO_Init+0x1f4>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a4b      	ldr	r2, [pc, #300]	; (80069b8 <HAL_GPIO_Init+0x2f0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d013      	beq.n	80068b8 <HAL_GPIO_Init+0x1f0>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a4a      	ldr	r2, [pc, #296]	; (80069bc <HAL_GPIO_Init+0x2f4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00d      	beq.n	80068b4 <HAL_GPIO_Init+0x1ec>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a49      	ldr	r2, [pc, #292]	; (80069c0 <HAL_GPIO_Init+0x2f8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d007      	beq.n	80068b0 <HAL_GPIO_Init+0x1e8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a48      	ldr	r2, [pc, #288]	; (80069c4 <HAL_GPIO_Init+0x2fc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d101      	bne.n	80068ac <HAL_GPIO_Init+0x1e4>
 80068a8:	2305      	movs	r3, #5
 80068aa:	e00a      	b.n	80068c2 <HAL_GPIO_Init+0x1fa>
 80068ac:	2306      	movs	r3, #6
 80068ae:	e008      	b.n	80068c2 <HAL_GPIO_Init+0x1fa>
 80068b0:	2304      	movs	r3, #4
 80068b2:	e006      	b.n	80068c2 <HAL_GPIO_Init+0x1fa>
 80068b4:	2303      	movs	r3, #3
 80068b6:	e004      	b.n	80068c2 <HAL_GPIO_Init+0x1fa>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e002      	b.n	80068c2 <HAL_GPIO_Init+0x1fa>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <HAL_GPIO_Init+0x1fa>
 80068c0:	2300      	movs	r3, #0
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	f002 0203 	and.w	r2, r2, #3
 80068c8:	0092      	lsls	r2, r2, #2
 80068ca:	4093      	lsls	r3, r2
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068d2:	4937      	ldr	r1, [pc, #220]	; (80069b0 <HAL_GPIO_Init+0x2e8>)
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	089b      	lsrs	r3, r3, #2
 80068d8:	3302      	adds	r3, #2
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068e0:	4b39      	ldr	r3, [pc, #228]	; (80069c8 <HAL_GPIO_Init+0x300>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	43db      	mvns	r3, r3
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4013      	ands	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4313      	orrs	r3, r2
 8006902:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006904:	4a30      	ldr	r2, [pc, #192]	; (80069c8 <HAL_GPIO_Init+0x300>)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800690a:	4b2f      	ldr	r3, [pc, #188]	; (80069c8 <HAL_GPIO_Init+0x300>)
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	43db      	mvns	r3, r3
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4013      	ands	r3, r2
 8006918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800692e:	4a26      	ldr	r2, [pc, #152]	; (80069c8 <HAL_GPIO_Init+0x300>)
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006934:	4b24      	ldr	r3, [pc, #144]	; (80069c8 <HAL_GPIO_Init+0x300>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	43db      	mvns	r3, r3
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4013      	ands	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006958:	4a1b      	ldr	r2, [pc, #108]	; (80069c8 <HAL_GPIO_Init+0x300>)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800695e:	4b1a      	ldr	r3, [pc, #104]	; (80069c8 <HAL_GPIO_Init+0x300>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	43db      	mvns	r3, r3
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	4013      	ands	r3, r2
 800696c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006982:	4a11      	ldr	r2, [pc, #68]	; (80069c8 <HAL_GPIO_Init+0x300>)
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	3301      	adds	r3, #1
 800698c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	f47f ae9d 	bne.w	80066d8 <HAL_GPIO_Init+0x10>
  }
}
 800699e:	bf00      	nop
 80069a0:	bf00      	nop
 80069a2:	371c      	adds	r7, #28
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	40021000 	.word	0x40021000
 80069b0:	40010000 	.word	0x40010000
 80069b4:	48000400 	.word	0x48000400
 80069b8:	48000800 	.word	0x48000800
 80069bc:	48000c00 	.word	0x48000c00
 80069c0:	48001000 	.word	0x48001000
 80069c4:	48001400 	.word	0x48001400
 80069c8:	40010400 	.word	0x40010400

080069cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	460b      	mov	r3, r1
 80069d6:	807b      	strh	r3, [r7, #2]
 80069d8:	4613      	mov	r3, r2
 80069da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80069dc:	787b      	ldrb	r3, [r7, #1]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80069e2:	887a      	ldrh	r2, [r7, #2]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80069e8:	e002      	b.n	80069f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80069ea:	887a      	ldrh	r2, [r7, #2]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e08d      	b.n	8006b2a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fc fd86 	bl	8003534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2224      	movs	r2, #36	; 0x24
 8006a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d107      	bne.n	8006a76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a72:	609a      	str	r2, [r3, #8]
 8006a74:	e006      	b.n	8006a84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006a82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d108      	bne.n	8006a9e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a9a:	605a      	str	r2, [r3, #4]
 8006a9c:	e007      	b.n	8006aae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6812      	ldr	r2, [r2, #0]
 8006ab8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ad0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691a      	ldr	r2, [r3, #16]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69d9      	ldr	r1, [r3, #28]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0201 	orr.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af02      	add	r7, sp, #8
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	607a      	str	r2, [r7, #4]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	460b      	mov	r3, r1
 8006b42:	817b      	strh	r3, [r7, #10]
 8006b44:	4613      	mov	r3, r2
 8006b46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	f040 80fd 	bne.w	8006d50 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_I2C_Master_Transmit+0x30>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e0f6      	b.n	8006d52 <HAL_I2C_Master_Transmit+0x21e>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b6c:	f7fd facc 	bl	8004108 <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	2319      	movs	r3, #25
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f002 f868 	bl	8008c54 <I2C_WaitOnFlagUntilTimeout>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e0e1      	b.n	8006d52 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2221      	movs	r2, #33	; 0x21
 8006b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2210      	movs	r2, #16
 8006b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	893a      	ldrh	r2, [r7, #8]
 8006bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2bff      	cmp	r3, #255	; 0xff
 8006bbe:	d906      	bls.n	8006bce <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	22ff      	movs	r2, #255	; 0xff
 8006bc4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006bc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	e007      	b.n	8006bde <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006bd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bdc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d024      	beq.n	8006c30 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	781a      	ldrb	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	8979      	ldrh	r1, [r7, #10]
 8006c22:	4b4e      	ldr	r3, [pc, #312]	; (8006d5c <HAL_I2C_Master_Transmit+0x228>)
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f002 fa63 	bl	80090f4 <I2C_TransferConfig>
 8006c2e:	e066      	b.n	8006cfe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	8979      	ldrh	r1, [r7, #10]
 8006c38:	4b48      	ldr	r3, [pc, #288]	; (8006d5c <HAL_I2C_Master_Transmit+0x228>)
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f002 fa58 	bl	80090f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006c44:	e05b      	b.n	8006cfe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	6a39      	ldr	r1, [r7, #32]
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f002 f85b 	bl	8008d06 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e07b      	b.n	8006d52 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	781a      	ldrb	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d034      	beq.n	8006cfe <HAL_I2C_Master_Transmit+0x1ca>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d130      	bne.n	8006cfe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2180      	movs	r1, #128	; 0x80
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f001 ffd4 	bl	8008c54 <I2C_WaitOnFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e04d      	b.n	8006d52 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2bff      	cmp	r3, #255	; 0xff
 8006cbe:	d90e      	bls.n	8006cde <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	22ff      	movs	r2, #255	; 0xff
 8006cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	8979      	ldrh	r1, [r7, #10]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f002 fa0c 	bl	80090f4 <I2C_TransferConfig>
 8006cdc:	e00f      	b.n	8006cfe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	8979      	ldrh	r1, [r7, #10]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f002 f9fb 	bl	80090f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d19e      	bne.n	8006c46 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	6a39      	ldr	r1, [r7, #32]
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f002 f841 	bl	8008d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e01a      	b.n	8006d52 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2220      	movs	r2, #32
 8006d22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6859      	ldr	r1, [r3, #4]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <HAL_I2C_Master_Transmit+0x22c>)
 8006d30:	400b      	ands	r3, r1
 8006d32:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e000      	b.n	8006d52 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006d50:	2302      	movs	r3, #2
  }
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	80002000 	.word	0x80002000
 8006d60:	fe00e800 	.word	0xfe00e800

08006d64 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	607a      	str	r2, [r7, #4]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	460b      	mov	r3, r1
 8006d72:	817b      	strh	r3, [r7, #10]
 8006d74:	4613      	mov	r3, r2
 8006d76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	f040 80db 	bne.w	8006f3c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_I2C_Master_Receive+0x30>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e0d4      	b.n	8006f3e <HAL_I2C_Master_Receive+0x1da>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d9c:	f7fd f9b4 	bl	8004108 <HAL_GetTick>
 8006da0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	2319      	movs	r3, #25
 8006da8:	2201      	movs	r2, #1
 8006daa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f001 ff50 	bl	8008c54 <I2C_WaitOnFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e0bf      	b.n	8006f3e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2222      	movs	r2, #34	; 0x22
 8006dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2210      	movs	r2, #16
 8006dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	893a      	ldrh	r2, [r7, #8]
 8006dde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2bff      	cmp	r3, #255	; 0xff
 8006dee:	d90e      	bls.n	8006e0e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	22ff      	movs	r2, #255	; 0xff
 8006df4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	8979      	ldrh	r1, [r7, #10]
 8006dfe:	4b52      	ldr	r3, [pc, #328]	; (8006f48 <HAL_I2C_Master_Receive+0x1e4>)
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f002 f974 	bl	80090f4 <I2C_TransferConfig>
 8006e0c:	e06d      	b.n	8006eea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	8979      	ldrh	r1, [r7, #10]
 8006e20:	4b49      	ldr	r3, [pc, #292]	; (8006f48 <HAL_I2C_Master_Receive+0x1e4>)
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f002 f963 	bl	80090f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006e2e:	e05c      	b.n	8006eea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	6a39      	ldr	r1, [r7, #32]
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f001 fff1 	bl	8008e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e07c      	b.n	8006f3e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d034      	beq.n	8006eea <HAL_I2C_Master_Receive+0x186>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d130      	bne.n	8006eea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	6a3b      	ldr	r3, [r7, #32]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f001 fede 	bl	8008c54 <I2C_WaitOnFlagUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e04d      	b.n	8006f3e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2bff      	cmp	r3, #255	; 0xff
 8006eaa:	d90e      	bls.n	8006eca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	22ff      	movs	r2, #255	; 0xff
 8006eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	8979      	ldrh	r1, [r7, #10]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f002 f916 	bl	80090f4 <I2C_TransferConfig>
 8006ec8:	e00f      	b.n	8006eea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	8979      	ldrh	r1, [r7, #10]
 8006edc:	2300      	movs	r3, #0
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f002 f905 	bl	80090f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d19d      	bne.n	8006e30 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	6a39      	ldr	r1, [r7, #32]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f001 ff4b 	bl	8008d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e01a      	b.n	8006f3e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6859      	ldr	r1, [r3, #4]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <HAL_I2C_Master_Receive+0x1e8>)
 8006f1c:	400b      	ands	r3, r1
 8006f1e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	e000      	b.n	8006f3e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006f3c:	2302      	movs	r3, #2
  }
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	80002400 	.word	0x80002400
 8006f4c:	fe00e800 	.word	0xfe00e800

08006f50 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08a      	sub	sp, #40	; 0x28
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	607a      	str	r2, [r7, #4]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	817b      	strh	r3, [r7, #10]
 8006f60:	4613      	mov	r3, r2
 8006f62:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	f040 80ef 	bne.w	8007154 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f84:	d101      	bne.n	8006f8a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8006f86:	2302      	movs	r3, #2
 8006f88:	e0e5      	b.n	8007156 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d101      	bne.n	8006f98 <HAL_I2C_Master_Transmit_DMA+0x48>
 8006f94:	2302      	movs	r3, #2
 8006f96:	e0de      	b.n	8007156 <HAL_I2C_Master_Transmit_DMA+0x206>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2221      	movs	r2, #33	; 0x21
 8006fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2210      	movs	r2, #16
 8006fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	893a      	ldrh	r2, [r7, #8]
 8006fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4a66      	ldr	r2, [pc, #408]	; (8007160 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8006fc6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4a66      	ldr	r2, [pc, #408]	; (8007164 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8006fcc:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	2bff      	cmp	r3, #255	; 0xff
 8006fd6:	d906      	bls.n	8006fe6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	22ff      	movs	r2, #255	; 0xff
 8006fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006fde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fe2:	61fb      	str	r3, [r7, #28]
 8006fe4:	e007      	b.n	8006ff6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006ff0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ff4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d01a      	beq.n	8007034 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007018:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007038:	2b00      	cmp	r3, #0
 800703a:	d074      	beq.n	8007126 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	2b00      	cmp	r3, #0
 8007042:	d022      	beq.n	800708a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007048:	4a47      	ldr	r2, [pc, #284]	; (8007168 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800704a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	4a46      	ldr	r2, [pc, #280]	; (800716c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8007052:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	2200      	movs	r2, #0
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	2200      	movs	r2, #0
 8007062:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007074:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800707a:	f7fe fd85 	bl	8005b88 <HAL_DMA_Start_IT>
 800707e:	4603      	mov	r3, r0
 8007080:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d13a      	bne.n	80070fe <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8007088:	e013      	b.n	80070b2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2220      	movs	r2, #32
 800708e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e051      	b.n	8007156 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	3301      	adds	r3, #1
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	8979      	ldrh	r1, [r7, #10]
 80070be:	4b2c      	ldr	r3, [pc, #176]	; (8007170 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f002 f815 	bl	80090f4 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80070e4:	2110      	movs	r1, #16
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f002 f836 	bl	8009158 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	e028      	b.n	8007150 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2220      	movs	r2, #32
 8007102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007112:	f043 0210 	orr.w	r2, r3, #16
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e017      	b.n	8007156 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4a12      	ldr	r2, [pc, #72]	; (8007174 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800712a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	b2da      	uxtb	r2, r3
 8007130:	8979      	ldrh	r1, [r7, #10]
 8007132:	4b0f      	ldr	r3, [pc, #60]	; (8007170 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f001 ffda 	bl	80090f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007148:	2101      	movs	r1, #1
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f002 f804 	bl	8009158 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	e000      	b.n	8007156 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007154:	2302      	movs	r3, #2
  }
}
 8007156:	4618      	mov	r0, r3
 8007158:	3720      	adds	r7, #32
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	ffff0000 	.word	0xffff0000
 8007164:	08007a91 	.word	0x08007a91
 8007168:	08008abf 	.word	0x08008abf
 800716c:	08008beb 	.word	0x08008beb
 8007170:	80002000 	.word	0x80002000
 8007174:	08007651 	.word	0x08007651

08007178 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af02      	add	r7, sp, #8
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	461a      	mov	r2, r3
 8007184:	460b      	mov	r3, r1
 8007186:	817b      	strh	r3, [r7, #10]
 8007188:	4613      	mov	r3, r2
 800718a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b20      	cmp	r3, #32
 8007196:	f040 80cd 	bne.w	8007334 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a8:	d101      	bne.n	80071ae <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80071aa:	2302      	movs	r3, #2
 80071ac:	e0c3      	b.n	8007336 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_I2C_Master_Receive_DMA+0x44>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e0bc      	b.n	8007336 <HAL_I2C_Master_Receive_DMA+0x1be>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2222      	movs	r2, #34	; 0x22
 80071c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2210      	movs	r2, #16
 80071d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	893a      	ldrh	r2, [r7, #8]
 80071e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	4a55      	ldr	r2, [pc, #340]	; (8007340 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80071ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4a55      	ldr	r2, [pc, #340]	; (8007344 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80071f0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2bff      	cmp	r3, #255	; 0xff
 80071fa:	d906      	bls.n	800720a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	22ff      	movs	r2, #255	; 0xff
 8007200:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007202:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	e007      	b.n	800721a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800720e:	b29a      	uxth	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007214:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007218:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800721e:	2b00      	cmp	r3, #0
 8007220:	d070      	beq.n	8007304 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d020      	beq.n	800726c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722e:	4a46      	ldr	r2, [pc, #280]	; (8007348 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8007230:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007236:	4a45      	ldr	r2, [pc, #276]	; (800734c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8007238:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723e:	2200      	movs	r2, #0
 8007240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007246:	2200      	movs	r2, #0
 8007248:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3324      	adds	r3, #36	; 0x24
 8007254:	4619      	mov	r1, r3
 8007256:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800725c:	f7fe fc94 	bl	8005b88 <HAL_DMA_Start_IT>
 8007260:	4603      	mov	r3, r0
 8007262:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007264:	7cfb      	ldrb	r3, [r7, #19]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d138      	bne.n	80072dc <HAL_I2C_Master_Receive_DMA+0x164>
 800726a:	e013      	b.n	8007294 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2220      	movs	r2, #32
 8007270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007280:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e050      	b.n	8007336 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007298:	b2da      	uxtb	r2, r3
 800729a:	8979      	ldrh	r1, [r7, #10]
 800729c:	4b2c      	ldr	r3, [pc, #176]	; (8007350 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f001 ff26 	bl	80090f4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80072c2:	2110      	movs	r1, #16
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f001 ff47 	bl	8009158 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	e029      	b.n	8007330 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2220      	movs	r2, #32
 80072e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f0:	f043 0210 	orr.w	r2, r3, #16
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e018      	b.n	8007336 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4a13      	ldr	r2, [pc, #76]	; (8007354 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8007308:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800730e:	b2da      	uxtb	r2, r3
 8007310:	8979      	ldrh	r1, [r7, #10]
 8007312:	4b0f      	ldr	r3, [pc, #60]	; (8007350 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f001 feea 	bl	80090f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007328:	2102      	movs	r1, #2
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f001 ff14 	bl	8009158 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	e000      	b.n	8007336 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8007334:	2302      	movs	r3, #2
  }
}
 8007336:	4618      	mov	r0, r3
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	ffff0000 	.word	0xffff0000
 8007344:	08007a91 	.word	0x08007a91
 8007348:	08008b55 	.word	0x08008b55
 800734c:	08008beb 	.word	0x08008beb
 8007350:	80002400 	.word	0x80002400
 8007354:	08007651 	.word	0x08007651

08007358 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af02      	add	r7, sp, #8
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	4608      	mov	r0, r1
 8007362:	4611      	mov	r1, r2
 8007364:	461a      	mov	r2, r3
 8007366:	4603      	mov	r3, r0
 8007368:	817b      	strh	r3, [r7, #10]
 800736a:	460b      	mov	r3, r1
 800736c:	813b      	strh	r3, [r7, #8]
 800736e:	4613      	mov	r3, r2
 8007370:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b20      	cmp	r3, #32
 800737c:	f040 80f9 	bne.w	8007572 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <HAL_I2C_Mem_Write+0x34>
 8007386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007388:	2b00      	cmp	r3, #0
 800738a:	d105      	bne.n	8007398 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007392:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e0ed      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <HAL_I2C_Mem_Write+0x4e>
 80073a2:	2302      	movs	r3, #2
 80073a4:	e0e6      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80073ae:	f7fc feab 	bl	8004108 <HAL_GetTick>
 80073b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	2319      	movs	r3, #25
 80073ba:	2201      	movs	r2, #1
 80073bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f001 fc47 	bl	8008c54 <I2C_WaitOnFlagUntilTimeout>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e0d1      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2221      	movs	r2, #33	; 0x21
 80073d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2240      	movs	r2, #64	; 0x40
 80073dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6a3a      	ldr	r2, [r7, #32]
 80073ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80073f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073f8:	88f8      	ldrh	r0, [r7, #6]
 80073fa:	893a      	ldrh	r2, [r7, #8]
 80073fc:	8979      	ldrh	r1, [r7, #10]
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	4603      	mov	r3, r0
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 fe2b 	bl	8008064 <I2C_RequestMemoryWrite>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d005      	beq.n	8007420 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e0a9      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007424:	b29b      	uxth	r3, r3
 8007426:	2bff      	cmp	r3, #255	; 0xff
 8007428:	d90e      	bls.n	8007448 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	22ff      	movs	r2, #255	; 0xff
 800742e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007434:	b2da      	uxtb	r2, r3
 8007436:	8979      	ldrh	r1, [r7, #10]
 8007438:	2300      	movs	r3, #0
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f001 fe57 	bl	80090f4 <I2C_TransferConfig>
 8007446:	e00f      	b.n	8007468 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007456:	b2da      	uxtb	r2, r3
 8007458:	8979      	ldrh	r1, [r7, #10]
 800745a:	2300      	movs	r3, #0
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f001 fe46 	bl	80090f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f001 fc4a 	bl	8008d06 <I2C_WaitOnTXISFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e07b      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	781a      	ldrb	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007496:	b29b      	uxth	r3, r3
 8007498:	3b01      	subs	r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d034      	beq.n	8007520 <HAL_I2C_Mem_Write+0x1c8>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d130      	bne.n	8007520 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	2200      	movs	r2, #0
 80074c6:	2180      	movs	r1, #128	; 0x80
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f001 fbc3 	bl	8008c54 <I2C_WaitOnFlagUntilTimeout>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e04d      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2bff      	cmp	r3, #255	; 0xff
 80074e0:	d90e      	bls.n	8007500 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	22ff      	movs	r2, #255	; 0xff
 80074e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	8979      	ldrh	r1, [r7, #10]
 80074f0:	2300      	movs	r3, #0
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f001 fdfb 	bl	80090f4 <I2C_TransferConfig>
 80074fe:	e00f      	b.n	8007520 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800750e:	b2da      	uxtb	r2, r3
 8007510:	8979      	ldrh	r1, [r7, #10]
 8007512:	2300      	movs	r3, #0
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f001 fdea 	bl	80090f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d19e      	bne.n	8007468 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f001 fc30 	bl	8008d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e01a      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2220      	movs	r2, #32
 8007544:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6859      	ldr	r1, [r3, #4]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	4b0a      	ldr	r3, [pc, #40]	; (800757c <HAL_I2C_Mem_Write+0x224>)
 8007552:	400b      	ands	r3, r1
 8007554:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	e000      	b.n	8007574 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007572:	2302      	movs	r3, #2
  }
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	fe00e800 	.word	0xfe00e800

08007580 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
 80075dc:	4613      	mov	r3, r2
 80075de:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af02      	add	r7, sp, #8
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <I2C_Master_ISR_IT+0x1e>
 800766a:	2302      	movs	r3, #2
 800766c:	e113      	b.n	8007896 <I2C_Master_ISR_IT+0x246>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f003 0310 	and.w	r3, r3, #16
 800767c:	2b00      	cmp	r3, #0
 800767e:	d012      	beq.n	80076a6 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00d      	beq.n	80076a6 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2210      	movs	r2, #16
 8007690:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	f043 0204 	orr.w	r2, r3, #4
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f001 f9e9 	bl	8008a76 <I2C_Flush_TXDR>
 80076a4:	e0e4      	b.n	8007870 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d022      	beq.n	80076f6 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01d      	beq.n	80076f6 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f023 0304 	bic.w	r3, r3, #4
 80076c0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	b2d2      	uxtb	r2, r2
 80076ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076de:	3b01      	subs	r3, #1
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	3b01      	subs	r3, #1
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076f4:	e0bc      	b.n	8007870 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d128      	bne.n	8007752 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8007706:	2b00      	cmp	r3, #0
 8007708:	d023      	beq.n	8007752 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007710:	2b00      	cmp	r3, #0
 8007712:	d01e      	beq.n	8007752 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 80a8 	beq.w	8007870 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	781a      	ldrb	r2, [r3, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773a:	3b01      	subs	r3, #1
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007746:	b29b      	uxth	r3, r3
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8007750:	e08e      	b.n	8007870 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007758:	2b00      	cmp	r3, #0
 800775a:	d05c      	beq.n	8007816 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007762:	2b00      	cmp	r3, #0
 8007764:	d057      	beq.n	8007816 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776a:	b29b      	uxth	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d040      	beq.n	80077f2 <I2C_Master_ISR_IT+0x1a2>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007774:	2b00      	cmp	r3, #0
 8007776:	d13c      	bne.n	80077f2 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	b29b      	uxth	r3, r3
 8007780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007784:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778a:	b29b      	uxth	r3, r3
 800778c:	2bff      	cmp	r3, #255	; 0xff
 800778e:	d90e      	bls.n	80077ae <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	22ff      	movs	r2, #255	; 0xff
 8007794:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800779a:	b2da      	uxtb	r2, r3
 800779c:	8a79      	ldrh	r1, [r7, #18]
 800779e:	2300      	movs	r3, #0
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f001 fca4 	bl	80090f4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077ac:	e032      	b.n	8007814 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077c0:	d00b      	beq.n	80077da <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c6:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80077cc:	8a79      	ldrh	r1, [r7, #18]
 80077ce:	2000      	movs	r0, #0
 80077d0:	9000      	str	r0, [sp, #0]
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f001 fc8e 	bl	80090f4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077d8:	e01c      	b.n	8007814 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	8a79      	ldrh	r1, [r7, #18]
 80077e2:	2300      	movs	r3, #0
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f001 fc82 	bl	80090f4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077f0:	e010      	b.n	8007814 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007800:	d003      	beq.n	800780a <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 fd06 	bl	8008214 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007808:	e032      	b.n	8007870 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800780a:	2140      	movs	r1, #64	; 0x40
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f001 f81b 	bl	8008848 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007812:	e02d      	b.n	8007870 <I2C_Master_ISR_IT+0x220>
 8007814:	e02c      	b.n	8007870 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781c:	2b00      	cmp	r3, #0
 800781e:	d027      	beq.n	8007870 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007826:	2b00      	cmp	r3, #0
 8007828:	d022      	beq.n	8007870 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d119      	bne.n	8007868 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800783e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007842:	d015      	beq.n	8007870 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800784c:	d108      	bne.n	8007860 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800785c:	605a      	str	r2, [r3, #4]
 800785e:	e007      	b.n	8007870 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 fcd7 	bl	8008214 <I2C_ITMasterSeqCplt>
 8007866:	e003      	b.n	8007870 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007868:	2140      	movs	r1, #64	; 0x40
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 ffec 	bl	8008848 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d008      	beq.n	800788c <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007880:	2b00      	cmp	r3, #0
 8007882:	d003      	beq.n	800788c <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007884:	6979      	ldr	r1, [r7, #20]
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f000 fd5e 	bl	8008348 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b086      	sub	sp, #24
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d101      	bne.n	80078c2 <I2C_Slave_ISR_IT+0x24>
 80078be:	2302      	movs	r3, #2
 80078c0:	e0e2      	b.n	8007a88 <I2C_Slave_ISR_IT+0x1ea>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d009      	beq.n	80078e8 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d004      	beq.n	80078e8 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80078de:	6939      	ldr	r1, [r7, #16]
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fdf9 	bl	80084d8 <I2C_ITSlaveCplt>
 80078e6:	e0ca      	b.n	8007a7e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	f003 0310 	and.w	r3, r3, #16
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d04b      	beq.n	800798a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d046      	beq.n	800798a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d128      	bne.n	8007958 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b28      	cmp	r3, #40	; 0x28
 8007910:	d108      	bne.n	8007924 <I2C_Slave_ISR_IT+0x86>
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007918:	d104      	bne.n	8007924 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800791a:	6939      	ldr	r1, [r7, #16]
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 ff3f 	bl	80087a0 <I2C_ITListenCplt>
 8007922:	e031      	b.n	8007988 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b29      	cmp	r3, #41	; 0x29
 800792e:	d10e      	bne.n	800794e <I2C_Slave_ISR_IT+0xb0>
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007936:	d00a      	beq.n	800794e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2210      	movs	r2, #16
 800793e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f001 f898 	bl	8008a76 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 fca1 	bl	800828e <I2C_ITSlaveSeqCplt>
 800794c:	e01c      	b.n	8007988 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2210      	movs	r2, #16
 8007954:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007956:	e08f      	b.n	8007a78 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2210      	movs	r2, #16
 800795e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007964:	f043 0204 	orr.w	r2, r3, #4
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <I2C_Slave_ISR_IT+0xdc>
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007978:	d17e      	bne.n	8007a78 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797e:	4619      	mov	r1, r3
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 ff61 	bl	8008848 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007986:	e077      	b.n	8007a78 <I2C_Slave_ISR_IT+0x1da>
 8007988:	e076      	b.n	8007a78 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	d02f      	beq.n	80079f4 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800799a:	2b00      	cmp	r3, #0
 800799c:	d02a      	beq.n	80079f4 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d018      	beq.n	80079da <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b01      	subs	r3, #1
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d14b      	bne.n	8007a7c <I2C_Slave_ISR_IT+0x1de>
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079ea:	d047      	beq.n	8007a7c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 fc4e 	bl	800828e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80079f2:	e043      	b.n	8007a7c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f003 0308 	and.w	r3, r3, #8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d009      	beq.n	8007a12 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d004      	beq.n	8007a12 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007a08:	6939      	ldr	r1, [r7, #16]
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 fb7e 	bl	800810c <I2C_ITAddrCplt>
 8007a10:	e035      	b.n	8007a7e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d030      	beq.n	8007a7e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d02b      	beq.n	8007a7e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d018      	beq.n	8007a62 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	781a      	ldrb	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007a60:	e00d      	b.n	8007a7e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a68:	d002      	beq.n	8007a70 <I2C_Slave_ISR_IT+0x1d2>
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d106      	bne.n	8007a7e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fc0c 	bl	800828e <I2C_ITSlaveSeqCplt>
 8007a76:	e002      	b.n	8007a7e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007a78:	bf00      	nop
 8007a7a:	e000      	b.n	8007a7e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007a7c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d101      	bne.n	8007aaa <I2C_Master_ISR_DMA+0x1a>
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e0d9      	b.n	8007c5e <I2C_Master_ISR_DMA+0x1ce>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d016      	beq.n	8007aea <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d011      	beq.n	8007aea <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2210      	movs	r2, #16
 8007acc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad2:	f043 0204 	orr.w	r2, r3, #4
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007ada:	2120      	movs	r1, #32
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f001 fb3b 	bl	8009158 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 ffc7 	bl	8008a76 <I2C_Flush_TXDR>
 8007ae8:	e0b4      	b.n	8007c54 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d071      	beq.n	8007bd8 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d06c      	beq.n	8007bd8 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b0c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d04e      	beq.n	8007bb6 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b24:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2bff      	cmp	r3, #255	; 0xff
 8007b2e:	d906      	bls.n	8007b3e <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	22ff      	movs	r2, #255	; 0xff
 8007b34:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8007b36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	e010      	b.n	8007b60 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b50:	d003      	beq.n	8007b5a <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	e002      	b.n	8007b60 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007b5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b5e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	8a79      	ldrh	r1, [r7, #18]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f001 fac0 	bl	80090f4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b22      	cmp	r3, #34	; 0x22
 8007b90:	d108      	bne.n	8007ba4 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ba0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007ba2:	e057      	b.n	8007c54 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bb2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007bb4:	e04e      	b.n	8007c54 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bc4:	d003      	beq.n	8007bce <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 fb24 	bl	8008214 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007bcc:	e042      	b.n	8007c54 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007bce:	2140      	movs	r1, #64	; 0x40
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 fe39 	bl	8008848 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007bd6:	e03d      	b.n	8007c54 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d028      	beq.n	8007c34 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d023      	beq.n	8007c34 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d119      	bne.n	8007c2a <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c04:	d025      	beq.n	8007c52 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c0e:	d108      	bne.n	8007c22 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c1e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007c20:	e017      	b.n	8007c52 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 faf6 	bl	8008214 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007c28:	e013      	b.n	8007c52 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007c2a:	2140      	movs	r1, #64	; 0x40
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 fe0b 	bl	8008848 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007c32:	e00e      	b.n	8007c52 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d005      	beq.n	8007c54 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007c48:	68b9      	ldr	r1, [r7, #8]
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 fb7c 	bl	8008348 <I2C_ITMasterCplt>
 8007c50:	e000      	b.n	8007c54 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8007c52:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007c74:	4b8d      	ldr	r3, [pc, #564]	; (8007eac <I2C_Mem_ISR_DMA+0x244>)
 8007c76:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <I2C_Mem_ISR_DMA+0x1e>
 8007c82:	2302      	movs	r3, #2
 8007c84:	e10e      	b.n	8007ea4 <I2C_Mem_ISR_DMA+0x23c>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f003 0310 	and.w	r3, r3, #16
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d016      	beq.n	8007cc6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d011      	beq.n	8007cc6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2210      	movs	r2, #16
 8007ca8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cae:	f043 0204 	orr.w	r2, r3, #4
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007cb6:	2120      	movs	r1, #32
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f001 fa4d 	bl	8009158 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 fed9 	bl	8008a76 <I2C_Flush_TXDR>
 8007cc4:	e0e9      	b.n	8007e9a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00e      	beq.n	8007cee <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d009      	beq.n	8007cee <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007ce2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cea:	651a      	str	r2, [r3, #80]	; 0x50
 8007cec:	e0d5      	b.n	8007e9a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d05f      	beq.n	8007db8 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d05a      	beq.n	8007db8 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007d02:	2101      	movs	r1, #1
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f001 faab 	bl	8009260 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007d0a:	2110      	movs	r1, #16
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f001 fa23 	bl	8009158 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d048      	beq.n	8007dae <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2bff      	cmp	r3, #255	; 0xff
 8007d24:	d910      	bls.n	8007d48 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	22ff      	movs	r2, #255	; 0xff
 8007d2a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d30:	b299      	uxth	r1, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	2300      	movs	r3, #0
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f001 f9d7 	bl	80090f4 <I2C_TransferConfig>
 8007d46:	e011      	b.n	8007d6c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d56:	b299      	uxth	r1, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	2300      	movs	r3, #0
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f001 f9c4 	bl	80090f4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b22      	cmp	r3, #34	; 0x22
 8007d88:	d108      	bne.n	8007d9c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d98:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007d9a:	e07e      	b.n	8007e9a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007daa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007dac:	e075      	b.n	8007e9a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007dae:	2140      	movs	r1, #64	; 0x40
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 fd49 	bl	8008848 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007db6:	e070      	b.n	8007e9a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d05d      	beq.n	8007e7e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d058      	beq.n	8007e7e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007dcc:	2101      	movs	r1, #1
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f001 fa46 	bl	8009260 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007dd4:	2110      	movs	r1, #16
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f001 f9be 	bl	8009158 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b22      	cmp	r3, #34	; 0x22
 8007de6:	d101      	bne.n	8007dec <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8007de8:	4b31      	ldr	r3, [pc, #196]	; (8007eb0 <I2C_Mem_ISR_DMA+0x248>)
 8007dea:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2bff      	cmp	r3, #255	; 0xff
 8007df4:	d910      	bls.n	8007e18 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	22ff      	movs	r2, #255	; 0xff
 8007dfa:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e00:	b299      	uxth	r1, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f001 f96f 	bl	80090f4 <I2C_TransferConfig>
 8007e16:	e011      	b.n	8007e3c <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e26:	b299      	uxth	r1, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f001 f95c 	bl	80090f4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b22      	cmp	r3, #34	; 0x22
 8007e58:	d108      	bne.n	8007e6c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e68:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e6a:	e016      	b.n	8007e9a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e7a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e7c:	e00d      	b.n	8007e9a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f003 0320 	and.w	r3, r3, #32
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d008      	beq.n	8007e9a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d003      	beq.n	8007e9a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 fa57 	bl	8008348 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	80002000 	.word	0x80002000
 8007eb0:	80002400 	.word	0x80002400

08007eb4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b088      	sub	sp, #32
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d101      	bne.n	8007ed8 <I2C_Slave_ISR_DMA+0x24>
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	e0c0      	b.n	800805a <I2C_Slave_ISR_DMA+0x1a6>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d009      	beq.n	8007efe <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d004      	beq.n	8007efe <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007ef4:	68b9      	ldr	r1, [r7, #8]
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 faee 	bl	80084d8 <I2C_ITSlaveCplt>
 8007efc:	e0a8      	b.n	8008050 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f003 0310 	and.w	r3, r3, #16
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 8095 	beq.w	8008034 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 808f 	beq.w	8008034 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d104      	bne.n	8007f2a <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d07d      	beq.n	8008026 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00c      	beq.n	8007f4c <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d007      	beq.n	8007f4c <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d101      	bne.n	8007f4c <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00c      	beq.n	8007f6e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d128      	bne.n	8007fc6 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b28      	cmp	r3, #40	; 0x28
 8007f7e:	d108      	bne.n	8007f92 <I2C_Slave_ISR_DMA+0xde>
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f86:	d104      	bne.n	8007f92 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 fc08 	bl	80087a0 <I2C_ITListenCplt>
 8007f90:	e048      	b.n	8008024 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b29      	cmp	r3, #41	; 0x29
 8007f9c:	d10e      	bne.n	8007fbc <I2C_Slave_ISR_DMA+0x108>
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007fa4:	d00a      	beq.n	8007fbc <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2210      	movs	r2, #16
 8007fac:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 fd61 	bl	8008a76 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 f96a 	bl	800828e <I2C_ITSlaveSeqCplt>
 8007fba:	e033      	b.n	8008024 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2210      	movs	r2, #16
 8007fc2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007fc4:	e034      	b.n	8008030 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2210      	movs	r2, #16
 8007fcc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd2:	f043 0204 	orr.w	r2, r3, #4
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fe0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <I2C_Slave_ISR_DMA+0x13c>
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fee:	d11f      	bne.n	8008030 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	2b21      	cmp	r3, #33	; 0x21
 8007ff4:	d002      	beq.n	8007ffc <I2C_Slave_ISR_DMA+0x148>
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	2b29      	cmp	r3, #41	; 0x29
 8007ffa:	d103      	bne.n	8008004 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2221      	movs	r2, #33	; 0x21
 8008000:	631a      	str	r2, [r3, #48]	; 0x30
 8008002:	e008      	b.n	8008016 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008004:	7dfb      	ldrb	r3, [r7, #23]
 8008006:	2b22      	cmp	r3, #34	; 0x22
 8008008:	d002      	beq.n	8008010 <I2C_Slave_ISR_DMA+0x15c>
 800800a:	7dfb      	ldrb	r3, [r7, #23]
 800800c:	2b2a      	cmp	r3, #42	; 0x2a
 800800e:	d102      	bne.n	8008016 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2222      	movs	r2, #34	; 0x22
 8008014:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800801a:	4619      	mov	r1, r3
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 fc13 	bl	8008848 <I2C_ITError>
      if (treatdmanack == 1U)
 8008022:	e005      	b.n	8008030 <I2C_Slave_ISR_DMA+0x17c>
 8008024:	e004      	b.n	8008030 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2210      	movs	r2, #16
 800802c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800802e:	e00f      	b.n	8008050 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8008030:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008032:	e00d      	b.n	8008050 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	2b00      	cmp	r3, #0
 800803c:	d008      	beq.n	8008050 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008044:	2b00      	cmp	r3, #0
 8008046:	d003      	beq.n	8008050 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008048:	68b9      	ldr	r1, [r7, #8]
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 f85e 	bl	800810c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3720      	adds	r7, #32
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
	...

08008064 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af02      	add	r7, sp, #8
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	4608      	mov	r0, r1
 800806e:	4611      	mov	r1, r2
 8008070:	461a      	mov	r2, r3
 8008072:	4603      	mov	r3, r0
 8008074:	817b      	strh	r3, [r7, #10]
 8008076:	460b      	mov	r3, r1
 8008078:	813b      	strh	r3, [r7, #8]
 800807a:	4613      	mov	r3, r2
 800807c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800807e:	88fb      	ldrh	r3, [r7, #6]
 8008080:	b2da      	uxtb	r2, r3
 8008082:	8979      	ldrh	r1, [r7, #10]
 8008084:	4b20      	ldr	r3, [pc, #128]	; (8008108 <I2C_RequestMemoryWrite+0xa4>)
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f001 f831 	bl	80090f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	69b9      	ldr	r1, [r7, #24]
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 fe35 	bl	8008d06 <I2C_WaitOnTXISFlagUntilTimeout>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e02c      	b.n	8008100 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080a6:	88fb      	ldrh	r3, [r7, #6]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d105      	bne.n	80080b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080ac:	893b      	ldrh	r3, [r7, #8]
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	629a      	str	r2, [r3, #40]	; 0x28
 80080b6:	e015      	b.n	80080e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80080b8:	893b      	ldrh	r3, [r7, #8]
 80080ba:	0a1b      	lsrs	r3, r3, #8
 80080bc:	b29b      	uxth	r3, r3
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080c6:	69fa      	ldr	r2, [r7, #28]
 80080c8:	69b9      	ldr	r1, [r7, #24]
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 fe1b 	bl	8008d06 <I2C_WaitOnTXISFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e012      	b.n	8008100 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080da:	893b      	ldrh	r3, [r7, #8]
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	2200      	movs	r2, #0
 80080ec:	2180      	movs	r1, #128	; 0x80
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f000 fdb0 	bl	8008c54 <I2C_WaitOnFlagUntilTimeout>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d001      	beq.n	80080fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	80002000 	.word	0x80002000

0800810c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008122:	2b28      	cmp	r3, #40	; 0x28
 8008124:	d16a      	bne.n	80081fc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	0c1b      	lsrs	r3, r3, #16
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	0c1b      	lsrs	r3, r3, #16
 800813e:	b29b      	uxth	r3, r3
 8008140:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008144:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	b29b      	uxth	r3, r3
 800814e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008152:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	b29b      	uxth	r3, r3
 800815c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008160:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	2b02      	cmp	r3, #2
 8008168:	d138      	bne.n	80081dc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800816a:	897b      	ldrh	r3, [r7, #10]
 800816c:	09db      	lsrs	r3, r3, #7
 800816e:	b29a      	uxth	r2, r3
 8008170:	89bb      	ldrh	r3, [r7, #12]
 8008172:	4053      	eors	r3, r2
 8008174:	b29b      	uxth	r3, r3
 8008176:	f003 0306 	and.w	r3, r3, #6
 800817a:	2b00      	cmp	r3, #0
 800817c:	d11c      	bne.n	80081b8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800817e:	897b      	ldrh	r3, [r7, #10]
 8008180:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008190:	2b02      	cmp	r3, #2
 8008192:	d13b      	bne.n	800820c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2208      	movs	r2, #8
 80081a0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80081aa:	89ba      	ldrh	r2, [r7, #12]
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff fa0d 	bl	80075d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80081b6:	e029      	b.n	800820c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80081b8:	893b      	ldrh	r3, [r7, #8]
 80081ba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80081bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f001 f84d 	bl	8009260 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80081ce:	89ba      	ldrh	r2, [r7, #12]
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff f9fb 	bl	80075d0 <HAL_I2C_AddrCallback>
}
 80081da:	e017      	b.n	800820c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80081dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 f83d 	bl	8009260 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80081ee:	89ba      	ldrh	r2, [r7, #12]
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7ff f9eb 	bl	80075d0 <HAL_I2C_AddrCallback>
}
 80081fa:	e007      	b.n	800820c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2208      	movs	r2, #8
 8008202:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800820c:	bf00      	nop
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b21      	cmp	r3, #33	; 0x21
 800822e:	d115      	bne.n	800825c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2211      	movs	r2, #17
 800823c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008244:	2101      	movs	r1, #1
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 f80a 	bl	8009260 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7ff f993 	bl	8007580 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800825a:	e014      	b.n	8008286 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2220      	movs	r2, #32
 8008260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2212      	movs	r2, #18
 8008268:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008270:	2102      	movs	r1, #2
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fff4 	bl	8009260 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7ff f987 	bl	8007594 <HAL_I2C_MasterRxCpltCallback>
}
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d008      	beq.n	80082c2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	e00c      	b.n	80082dc <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d007      	beq.n	80082dc <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082da:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b29      	cmp	r3, #41	; 0x29
 80082e6:	d112      	bne.n	800830e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2228      	movs	r2, #40	; 0x28
 80082ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2221      	movs	r2, #33	; 0x21
 80082f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80082f6:	2101      	movs	r1, #1
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 ffb1 	bl	8009260 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff f94e 	bl	80075a8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800830c:	e017      	b.n	800833e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b2a      	cmp	r3, #42	; 0x2a
 8008318:	d111      	bne.n	800833e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2228      	movs	r2, #40	; 0x28
 800831e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2222      	movs	r2, #34	; 0x22
 8008326:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008328:	2102      	movs	r1, #2
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 ff98 	bl	8009260 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7ff f93f 	bl	80075bc <HAL_I2C_SlaveRxCpltCallback>
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2220      	movs	r2, #32
 800835c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b21      	cmp	r3, #33	; 0x21
 8008368:	d107      	bne.n	800837a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800836a:	2101      	movs	r1, #1
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 ff77 	bl	8009260 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2211      	movs	r2, #17
 8008376:	631a      	str	r2, [r3, #48]	; 0x30
 8008378:	e00c      	b.n	8008394 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b22      	cmp	r3, #34	; 0x22
 8008384:	d106      	bne.n	8008394 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008386:	2102      	movs	r1, #2
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 ff69 	bl	8009260 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2212      	movs	r2, #18
 8008392:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6859      	ldr	r1, [r3, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	4b4c      	ldr	r3, [pc, #304]	; (80084d0 <I2C_ITMasterCplt+0x188>)
 80083a0:	400b      	ands	r3, r1
 80083a2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a49      	ldr	r2, [pc, #292]	; (80084d4 <I2C_ITMasterCplt+0x18c>)
 80083ae:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f003 0310 	and.w	r3, r3, #16
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d009      	beq.n	80083ce <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2210      	movs	r2, #16
 80083c0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c6:	f043 0204 	orr.w	r2, r3, #4
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b60      	cmp	r3, #96	; 0x60
 80083d8:	d10a      	bne.n	80083f0 <I2C_ITMasterCplt+0xa8>
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d005      	beq.n	80083f0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80083ee:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fb40 	bl	8008a76 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b60      	cmp	r3, #96	; 0x60
 8008406:	d002      	beq.n	800840e <I2C_ITMasterCplt+0xc6>
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d006      	beq.n	800841c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fa17 	bl	8008848 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800841a:	e054      	b.n	80084c6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b21      	cmp	r3, #33	; 0x21
 8008426:	d124      	bne.n	8008472 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b40      	cmp	r3, #64	; 0x40
 8008440:	d10b      	bne.n	800845a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f7ff f8d4 	bl	8007600 <HAL_I2C_MemTxCpltCallback>
}
 8008458:	e035      	b.n	80084c6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff f888 	bl	8007580 <HAL_I2C_MasterTxCpltCallback>
}
 8008470:	e029      	b.n	80084c6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b22      	cmp	r3, #34	; 0x22
 800847c:	d123      	bne.n	80084c6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2220      	movs	r2, #32
 8008482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b40      	cmp	r3, #64	; 0x40
 8008496:	d10b      	bne.n	80084b0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff f8b3 	bl	8007614 <HAL_I2C_MemRxCpltCallback>
}
 80084ae:	e00a      	b.n	80084c6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff f867 	bl	8007594 <HAL_I2C_MasterRxCpltCallback>
}
 80084c6:	bf00      	nop
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	fe00e800 	.word	0xfe00e800
 80084d4:	ffff0000 	.word	0xffff0000

080084d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084fa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2220      	movs	r2, #32
 8008502:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008504:	7afb      	ldrb	r3, [r7, #11]
 8008506:	2b21      	cmp	r3, #33	; 0x21
 8008508:	d002      	beq.n	8008510 <I2C_ITSlaveCplt+0x38>
 800850a:	7afb      	ldrb	r3, [r7, #11]
 800850c:	2b29      	cmp	r3, #41	; 0x29
 800850e:	d108      	bne.n	8008522 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008510:	f248 0101 	movw	r1, #32769	; 0x8001
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fea3 	bl	8009260 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2221      	movs	r2, #33	; 0x21
 800851e:	631a      	str	r2, [r3, #48]	; 0x30
 8008520:	e019      	b.n	8008556 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008522:	7afb      	ldrb	r3, [r7, #11]
 8008524:	2b22      	cmp	r3, #34	; 0x22
 8008526:	d002      	beq.n	800852e <I2C_ITSlaveCplt+0x56>
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	2b2a      	cmp	r3, #42	; 0x2a
 800852c:	d108      	bne.n	8008540 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800852e:	f248 0102 	movw	r1, #32770	; 0x8002
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fe94 	bl	8009260 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2222      	movs	r2, #34	; 0x22
 800853c:	631a      	str	r2, [r3, #48]	; 0x30
 800853e:	e00a      	b.n	8008556 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008540:	7afb      	ldrb	r3, [r7, #11]
 8008542:	2b28      	cmp	r3, #40	; 0x28
 8008544:	d107      	bne.n	8008556 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008546:	f248 0103 	movw	r1, #32771	; 0x8003
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fe88 	bl	8009260 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008564:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	6859      	ldr	r1, [r3, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	4b89      	ldr	r3, [pc, #548]	; (8008798 <I2C_ITSlaveCplt+0x2c0>)
 8008572:	400b      	ands	r3, r1
 8008574:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fa7d 	bl	8008a76 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d013      	beq.n	80085ae <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008594:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859a:	2b00      	cmp	r3, #0
 800859c:	d01f      	beq.n	80085de <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80085ac:	e017      	b.n	80085de <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d012      	beq.n	80085de <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085c6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d006      	beq.n	80085de <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	b29a      	uxth	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d020      	beq.n	800862a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f023 0304 	bic.w	r3, r3, #4
 80085ee:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	b2d2      	uxtb	r2, r2
 80085fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00c      	beq.n	800862a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008614:	3b01      	subs	r3, #1
 8008616:	b29a      	uxth	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008620:	b29b      	uxth	r3, r3
 8008622:	3b01      	subs	r3, #1
 8008624:	b29a      	uxth	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800862e:	b29b      	uxth	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d005      	beq.n	8008640 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008638:	f043 0204 	orr.w	r2, r3, #4
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f003 0310 	and.w	r3, r3, #16
 8008646:	2b00      	cmp	r3, #0
 8008648:	d049      	beq.n	80086de <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008650:	2b00      	cmp	r3, #0
 8008652:	d044      	beq.n	80086de <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008658:	b29b      	uxth	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d128      	bne.n	80086b0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b28      	cmp	r3, #40	; 0x28
 8008668:	d108      	bne.n	800867c <I2C_ITSlaveCplt+0x1a4>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008670:	d104      	bne.n	800867c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008672:	6979      	ldr	r1, [r7, #20]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f893 	bl	80087a0 <I2C_ITListenCplt>
 800867a:	e030      	b.n	80086de <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b29      	cmp	r3, #41	; 0x29
 8008686:	d10e      	bne.n	80086a6 <I2C_ITSlaveCplt+0x1ce>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800868e:	d00a      	beq.n	80086a6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2210      	movs	r2, #16
 8008696:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f9ec 	bl	8008a76 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff fdf5 	bl	800828e <I2C_ITSlaveSeqCplt>
 80086a4:	e01b      	b.n	80086de <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2210      	movs	r2, #16
 80086ac:	61da      	str	r2, [r3, #28]
 80086ae:	e016      	b.n	80086de <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2210      	movs	r2, #16
 80086b6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086bc:	f043 0204 	orr.w	r2, r3, #4
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <I2C_ITSlaveCplt+0x1fa>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086d0:	d105      	bne.n	80086de <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f8b5 	bl	8008848 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d010      	beq.n	8008716 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f8a4 	bl	8008848 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b28      	cmp	r3, #40	; 0x28
 800870a:	d141      	bne.n	8008790 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800870c:	6979      	ldr	r1, [r7, #20]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f846 	bl	80087a0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008714:	e03c      	b.n	8008790 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800871e:	d014      	beq.n	800874a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff fdb4 	bl	800828e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a1c      	ldr	r2, [pc, #112]	; (800879c <I2C_ITSlaveCplt+0x2c4>)
 800872a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2220      	movs	r2, #32
 8008730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7fe ff52 	bl	80075ec <HAL_I2C_ListenCpltCallback>
}
 8008748:	e022      	b.n	8008790 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b22      	cmp	r3, #34	; 0x22
 8008754:	d10e      	bne.n	8008774 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2220      	movs	r2, #32
 800875a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7fe ff25 	bl	80075bc <HAL_I2C_SlaveRxCpltCallback>
}
 8008772:	e00d      	b.n	8008790 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2220      	movs	r2, #32
 8008778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7fe ff0c 	bl	80075a8 <HAL_I2C_SlaveTxCpltCallback>
}
 8008790:	bf00      	nop
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	fe00e800 	.word	0xfe00e800
 800879c:	ffff0000 	.word	0xffff0000

080087a0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a25      	ldr	r2, [pc, #148]	; (8008844 <I2C_ITListenCplt+0xa4>)
 80087ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	f003 0304 	and.w	r3, r3, #4
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d022      	beq.n	800881c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	b2d2      	uxtb	r2, r2
 80087e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d012      	beq.n	800881c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087fa:	3b01      	subs	r3, #1
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008806:	b29b      	uxth	r3, r3
 8008808:	3b01      	subs	r3, #1
 800880a:	b29a      	uxth	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008814:	f043 0204 	orr.w	r2, r3, #4
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800881c:	f248 0103 	movw	r1, #32771	; 0x8003
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fd1d 	bl	8009260 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2210      	movs	r2, #16
 800882c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7fe fed8 	bl	80075ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800883c:	bf00      	nop
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	ffff0000 	.word	0xffff0000

08008848 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008858:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a6d      	ldr	r2, [pc, #436]	; (8008a1c <I2C_ITError+0x1d4>)
 8008866:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	431a      	orrs	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	2b28      	cmp	r3, #40	; 0x28
 800887e:	d005      	beq.n	800888c <I2C_ITError+0x44>
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	2b29      	cmp	r3, #41	; 0x29
 8008884:	d002      	beq.n	800888c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	2b2a      	cmp	r3, #42	; 0x2a
 800888a:	d10b      	bne.n	80088a4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800888c:	2103      	movs	r1, #3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fce6 	bl	8009260 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2228      	movs	r2, #40	; 0x28
 8008898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a60      	ldr	r2, [pc, #384]	; (8008a20 <I2C_ITError+0x1d8>)
 80088a0:	635a      	str	r2, [r3, #52]	; 0x34
 80088a2:	e030      	b.n	8008906 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80088a4:	f248 0103 	movw	r1, #32771	; 0x8003
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fcd9 	bl	8009260 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f8e1 	bl	8008a76 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b60      	cmp	r3, #96	; 0x60
 80088be:	d01f      	beq.n	8008900 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f003 0320 	and.w	r3, r3, #32
 80088d2:	2b20      	cmp	r3, #32
 80088d4:	d114      	bne.n	8008900 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	f003 0310 	and.w	r3, r3, #16
 80088e0:	2b10      	cmp	r3, #16
 80088e2:	d109      	bne.n	80088f8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2210      	movs	r2, #16
 80088ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f0:	f043 0204 	orr.w	r2, r3, #4
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2220      	movs	r2, #32
 80088fe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008910:	2b00      	cmp	r3, #0
 8008912:	d039      	beq.n	8008988 <I2C_ITError+0x140>
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	2b11      	cmp	r3, #17
 8008918:	d002      	beq.n	8008920 <I2C_ITError+0xd8>
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	2b21      	cmp	r3, #33	; 0x21
 800891e:	d133      	bne.n	8008988 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800892a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800892e:	d107      	bne.n	8008940 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800893e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008944:	4618      	mov	r0, r3
 8008946:	f7fd fab0 	bl	8005eaa <HAL_DMA_GetState>
 800894a:	4603      	mov	r3, r0
 800894c:	2b01      	cmp	r3, #1
 800894e:	d017      	beq.n	8008980 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008954:	4a33      	ldr	r2, [pc, #204]	; (8008a24 <I2C_ITError+0x1dc>)
 8008956:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008964:	4618      	mov	r0, r3
 8008966:	f7fd f98a 	bl	8005c7e <HAL_DMA_Abort_IT>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d04d      	beq.n	8008a0c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800897a:	4610      	mov	r0, r2
 800897c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800897e:	e045      	b.n	8008a0c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f851 	bl	8008a28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008986:	e041      	b.n	8008a0c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d039      	beq.n	8008a04 <I2C_ITError+0x1bc>
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2b12      	cmp	r3, #18
 8008994:	d002      	beq.n	800899c <I2C_ITError+0x154>
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b22      	cmp	r3, #34	; 0x22
 800899a:	d133      	bne.n	8008a04 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089aa:	d107      	bne.n	80089bc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fd fa72 	bl	8005eaa <HAL_DMA_GetState>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d017      	beq.n	80089fc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d0:	4a14      	ldr	r2, [pc, #80]	; (8008a24 <I2C_ITError+0x1dc>)
 80089d2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fd f94c 	bl	8005c7e <HAL_DMA_Abort_IT>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d011      	beq.n	8008a10 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80089f6:	4610      	mov	r0, r2
 80089f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80089fa:	e009      	b.n	8008a10 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f813 	bl	8008a28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a02:	e005      	b.n	8008a10 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f80f 	bl	8008a28 <I2C_TreatErrorCallback>
  }
}
 8008a0a:	e002      	b.n	8008a12 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008a0c:	bf00      	nop
 8008a0e:	e000      	b.n	8008a12 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a10:	bf00      	nop
}
 8008a12:	bf00      	nop
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	ffff0000 	.word	0xffff0000
 8008a20:	0800789f 	.word	0x0800789f
 8008a24:	08008c19 	.word	0x08008c19

08008a28 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b60      	cmp	r3, #96	; 0x60
 8008a3a:	d10e      	bne.n	8008a5a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fe fdf2 	bl	800763c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a58:	e009      	b.n	8008a6e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7fe fddd 	bl	8007628 <HAL_I2C_ErrorCallback>
}
 8008a6e:	bf00      	nop
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	f003 0302 	and.w	r3, r3, #2
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d103      	bne.n	8008a94 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2200      	movs	r2, #0
 8008a92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d007      	beq.n	8008ab2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	699a      	ldr	r2, [r3, #24]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f042 0201 	orr.w	r2, r2, #1
 8008ab0:	619a      	str	r2, [r3, #24]
  }
}
 8008ab2:	bf00      	nop
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ada:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d104      	bne.n	8008af0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008ae6:	2120      	movs	r1, #32
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 fb35 	bl	8009158 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008aee:	e02d      	b.n	8008b4c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008af8:	441a      	add	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	2bff      	cmp	r3, #255	; 0xff
 8008b06:	d903      	bls.n	8008b10 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	22ff      	movs	r2, #255	; 0xff
 8008b0c:	851a      	strh	r2, [r3, #40]	; 0x28
 8008b0e:	e004      	b.n	8008b1a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	4619      	mov	r1, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3328      	adds	r3, #40	; 0x28
 8008b2a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008b30:	f7fd f82a 	bl	8005b88 <HAL_DMA_Start_IT>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d004      	beq.n	8008b44 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008b3a:	2110      	movs	r1, #16
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f7ff fe83 	bl	8008848 <I2C_ITError>
}
 8008b42:	e003      	b.n	8008b4c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008b44:	2140      	movs	r1, #64	; 0x40
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 fb06 	bl	8009158 <I2C_Enable_IRQ>
}
 8008b4c:	bf00      	nop
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b60:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b70:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d104      	bne.n	8008b86 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008b7c:	2120      	movs	r1, #32
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 faea 	bl	8009158 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008b84:	e02d      	b.n	8008be2 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008b8e:	441a      	add	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	2bff      	cmp	r3, #255	; 0xff
 8008b9c:	d903      	bls.n	8008ba6 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	22ff      	movs	r2, #255	; 0xff
 8008ba2:	851a      	strh	r2, [r3, #40]	; 0x28
 8008ba4:	e004      	b.n	8008bb0 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3324      	adds	r3, #36	; 0x24
 8008bba:	4619      	mov	r1, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008bc6:	f7fc ffdf 	bl	8005b88 <HAL_DMA_Start_IT>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008bd0:	2110      	movs	r1, #16
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f7ff fe38 	bl	8008848 <I2C_ITError>
}
 8008bd8:	e003      	b.n	8008be2 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008bda:	2140      	movs	r1, #64	; 0x40
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 fabb 	bl	8009158 <I2C_Enable_IRQ>
}
 8008be2:	bf00      	nop
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b084      	sub	sp, #16
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c06:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008c08:	2110      	movs	r1, #16
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f7ff fe1c 	bl	8008848 <I2C_ITError>
}
 8008c10:	bf00      	nop
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c24:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c32:	2200      	movs	r2, #0
 8008c34:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c42:	2200      	movs	r2, #0
 8008c44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f7ff feee 	bl	8008a28 <I2C_TreatErrorCallback>
}
 8008c4c:	bf00      	nop
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	4613      	mov	r3, r2
 8008c62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c64:	e03b      	b.n	8008cde <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c66:	69ba      	ldr	r2, [r7, #24]
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 f962 	bl	8008f34 <I2C_IsErrorOccurred>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e041      	b.n	8008cfe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c80:	d02d      	beq.n	8008cde <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c82:	f7fb fa41 	bl	8004108 <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d302      	bcc.n	8008c98 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d122      	bne.n	8008cde <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	699a      	ldr	r2, [r3, #24]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	bf0c      	ite	eq
 8008ca8:	2301      	moveq	r3, #1
 8008caa:	2300      	movne	r3, #0
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	461a      	mov	r2, r3
 8008cb0:	79fb      	ldrb	r3, [r7, #7]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d113      	bne.n	8008cde <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cba:	f043 0220 	orr.w	r2, r3, #32
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e00f      	b.n	8008cfe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	699a      	ldr	r2, [r3, #24]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	bf0c      	ite	eq
 8008cee:	2301      	moveq	r3, #1
 8008cf0:	2300      	movne	r3, #0
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d0b4      	beq.n	8008c66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	60f8      	str	r0, [r7, #12]
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d12:	e033      	b.n	8008d7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	68b9      	ldr	r1, [r7, #8]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 f90b 	bl	8008f34 <I2C_IsErrorOccurred>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e031      	b.n	8008d8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2e:	d025      	beq.n	8008d7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d30:	f7fb f9ea 	bl	8004108 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d302      	bcc.n	8008d46 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d11a      	bne.n	8008d7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	f003 0302 	and.w	r3, r3, #2
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d013      	beq.n	8008d7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d58:	f043 0220 	orr.w	r2, r3, #32
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e007      	b.n	8008d8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	f003 0302 	and.w	r3, r3, #2
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d1c4      	bne.n	8008d14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008da0:	e02f      	b.n	8008e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	68b9      	ldr	r1, [r7, #8]
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f000 f8c4 	bl	8008f34 <I2C_IsErrorOccurred>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e02d      	b.n	8008e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008db6:	f7fb f9a7 	bl	8004108 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d302      	bcc.n	8008dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d11a      	bne.n	8008e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	f003 0320 	and.w	r3, r3, #32
 8008dd6:	2b20      	cmp	r3, #32
 8008dd8:	d013      	beq.n	8008e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dde:	f043 0220 	orr.w	r2, r3, #32
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2220      	movs	r2, #32
 8008dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e007      	b.n	8008e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	f003 0320 	and.w	r3, r3, #32
 8008e0c:	2b20      	cmp	r3, #32
 8008e0e:	d1c8      	bne.n	8008da2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008e2c:	e071      	b.n	8008f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	68b9      	ldr	r1, [r7, #8]
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f000 f87e 	bl	8008f34 <I2C_IsErrorOccurred>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	f003 0320 	and.w	r3, r3, #32
 8008e4c:	2b20      	cmp	r3, #32
 8008e4e:	d13b      	bne.n	8008ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d138      	bne.n	8008ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	f003 0304 	and.w	r3, r3, #4
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d105      	bne.n	8008e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	f003 0310 	and.w	r3, r3, #16
 8008e7a:	2b10      	cmp	r3, #16
 8008e7c:	d121      	bne.n	8008ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2210      	movs	r2, #16
 8008e84:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2204      	movs	r2, #4
 8008e8a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2220      	movs	r2, #32
 8008e92:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6859      	ldr	r1, [r3, #4]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	4b24      	ldr	r3, [pc, #144]	; (8008f30 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008ea0:	400b      	ands	r3, r1
 8008ea2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2220      	movs	r2, #32
 8008ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	75fb      	strb	r3, [r7, #23]
 8008ec0:	e002      	b.n	8008ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008ec8:	f7fb f91e 	bl	8004108 <HAL_GetTick>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d302      	bcc.n	8008ede <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d119      	bne.n	8008f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008ede:	7dfb      	ldrb	r3, [r7, #23]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d116      	bne.n	8008f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	f003 0304 	and.w	r3, r3, #4
 8008eee:	2b04      	cmp	r3, #4
 8008ef0:	d00f      	beq.n	8008f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef6:	f043 0220 	orr.w	r2, r3, #32
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2220      	movs	r2, #32
 8008f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	f003 0304 	and.w	r3, r3, #4
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	d002      	beq.n	8008f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008f20:	7dfb      	ldrb	r3, [r7, #23]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d083      	beq.n	8008e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3718      	adds	r7, #24
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	fe00e800 	.word	0xfe00e800

08008f34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b08a      	sub	sp, #40	; 0x28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	f003 0310 	and.w	r3, r3, #16
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d068      	beq.n	8009032 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2210      	movs	r2, #16
 8008f66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008f68:	e049      	b.n	8008ffe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f70:	d045      	beq.n	8008ffe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008f72:	f7fb f8c9 	bl	8004108 <HAL_GetTick>
 8008f76:	4602      	mov	r2, r0
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	1ad3      	subs	r3, r2, r3
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d302      	bcc.n	8008f88 <I2C_IsErrorOccurred+0x54>
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d13a      	bne.n	8008ffe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008faa:	d121      	bne.n	8008ff0 <I2C_IsErrorOccurred+0xbc>
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fb2:	d01d      	beq.n	8008ff0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008fb4:	7cfb      	ldrb	r3, [r7, #19]
 8008fb6:	2b20      	cmp	r3, #32
 8008fb8:	d01a      	beq.n	8008ff0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008fca:	f7fb f89d 	bl	8004108 <HAL_GetTick>
 8008fce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fd0:	e00e      	b.n	8008ff0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008fd2:	f7fb f899 	bl	8004108 <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	2b19      	cmp	r3, #25
 8008fde:	d907      	bls.n	8008ff0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008fe0:	6a3b      	ldr	r3, [r7, #32]
 8008fe2:	f043 0320 	orr.w	r3, r3, #32
 8008fe6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008fee:	e006      	b.n	8008ffe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	f003 0320 	and.w	r3, r3, #32
 8008ffa:	2b20      	cmp	r3, #32
 8008ffc:	d1e9      	bne.n	8008fd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	f003 0320 	and.w	r3, r3, #32
 8009008:	2b20      	cmp	r3, #32
 800900a:	d003      	beq.n	8009014 <I2C_IsErrorOccurred+0xe0>
 800900c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009010:	2b00      	cmp	r3, #0
 8009012:	d0aa      	beq.n	8008f6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009018:	2b00      	cmp	r3, #0
 800901a:	d103      	bne.n	8009024 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2220      	movs	r2, #32
 8009022:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009024:	6a3b      	ldr	r3, [r7, #32]
 8009026:	f043 0304 	orr.w	r3, r3, #4
 800902a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00b      	beq.n	800905c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	f043 0301 	orr.w	r3, r3, #1
 800904a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009054:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00b      	beq.n	800907e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009066:	6a3b      	ldr	r3, [r7, #32]
 8009068:	f043 0308 	orr.w	r3, r3, #8
 800906c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009076:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00b      	beq.n	80090a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	f043 0302 	orr.w	r3, r3, #2
 800908e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009098:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80090a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d01c      	beq.n	80090e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f7ff fce4 	bl	8008a76 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6859      	ldr	r1, [r3, #4]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	4b0d      	ldr	r3, [pc, #52]	; (80090f0 <I2C_IsErrorOccurred+0x1bc>)
 80090ba:	400b      	ands	r3, r1
 80090bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090c2:	6a3b      	ldr	r3, [r7, #32]
 80090c4:	431a      	orrs	r2, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2220      	movs	r2, #32
 80090ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80090e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3728      	adds	r7, #40	; 0x28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	fe00e800 	.word	0xfe00e800

080090f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	607b      	str	r3, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	817b      	strh	r3, [r7, #10]
 8009102:	4613      	mov	r3, r2
 8009104:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009106:	897b      	ldrh	r3, [r7, #10]
 8009108:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800910c:	7a7b      	ldrb	r3, [r7, #9]
 800910e:	041b      	lsls	r3, r3, #16
 8009110:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009114:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	4313      	orrs	r3, r2
 800911e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009122:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	0d5b      	lsrs	r3, r3, #21
 800912e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009132:	4b08      	ldr	r3, [pc, #32]	; (8009154 <I2C_TransferConfig+0x60>)
 8009134:	430b      	orrs	r3, r1
 8009136:	43db      	mvns	r3, r3
 8009138:	ea02 0103 	and.w	r1, r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	430a      	orrs	r2, r1
 8009144:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009146:	bf00      	nop
 8009148:	371c      	adds	r7, #28
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	03ff63ff 	.word	0x03ff63ff

08009158 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	460b      	mov	r3, r1
 8009162:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916c:	4a39      	ldr	r2, [pc, #228]	; (8009254 <I2C_Enable_IRQ+0xfc>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d032      	beq.n	80091d8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009176:	4a38      	ldr	r2, [pc, #224]	; (8009258 <I2C_Enable_IRQ+0x100>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d02d      	beq.n	80091d8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009180:	4a36      	ldr	r2, [pc, #216]	; (800925c <I2C_Enable_IRQ+0x104>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d028      	beq.n	80091d8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009186:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800918a:	2b00      	cmp	r3, #0
 800918c:	da03      	bge.n	8009196 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009194:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009196:	887b      	ldrh	r3, [r7, #2]
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80091a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80091a8:	887b      	ldrh	r3, [r7, #2]
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d003      	beq.n	80091ba <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80091b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80091ba:	887b      	ldrh	r3, [r7, #2]
 80091bc:	2b10      	cmp	r3, #16
 80091be:	d103      	bne.n	80091c8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80091c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80091c8:	887b      	ldrh	r3, [r7, #2]
 80091ca:	2b20      	cmp	r3, #32
 80091cc:	d133      	bne.n	8009236 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f043 0320 	orr.w	r3, r3, #32
 80091d4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80091d6:	e02e      	b.n	8009236 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80091d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	da03      	bge.n	80091e8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80091e6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80091e8:	887b      	ldrh	r3, [r7, #2]
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80091f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80091fa:	887b      	ldrh	r3, [r7, #2]
 80091fc:	f003 0302 	and.w	r3, r3, #2
 8009200:	2b00      	cmp	r3, #0
 8009202:	d003      	beq.n	800920c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800920a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800920c:	887b      	ldrh	r3, [r7, #2]
 800920e:	2b10      	cmp	r3, #16
 8009210:	d103      	bne.n	800921a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009218:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800921a:	887b      	ldrh	r3, [r7, #2]
 800921c:	2b20      	cmp	r3, #32
 800921e:	d103      	bne.n	8009228 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009226:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009228:	887b      	ldrh	r3, [r7, #2]
 800922a:	2b40      	cmp	r3, #64	; 0x40
 800922c:	d103      	bne.n	8009236 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009234:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6819      	ldr	r1, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	430a      	orrs	r2, r1
 8009244:	601a      	str	r2, [r3, #0]
}
 8009246:	bf00      	nop
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	08007a91 	.word	0x08007a91
 8009258:	08007eb5 	.word	0x08007eb5
 800925c:	08007c69 	.word	0x08007c69

08009260 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800926c:	2300      	movs	r3, #0
 800926e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009270:	887b      	ldrh	r3, [r7, #2]
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00f      	beq.n	800929a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009280:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009288:	b2db      	uxtb	r3, r3
 800928a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800928e:	2b28      	cmp	r3, #40	; 0x28
 8009290:	d003      	beq.n	800929a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009298:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800929a:	887b      	ldrh	r3, [r7, #2]
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00f      	beq.n	80092c4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80092aa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80092b8:	2b28      	cmp	r3, #40	; 0x28
 80092ba:	d003      	beq.n	80092c4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80092c2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80092c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	da03      	bge.n	80092d4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80092d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80092d4:	887b      	ldrh	r3, [r7, #2]
 80092d6:	2b10      	cmp	r3, #16
 80092d8:	d103      	bne.n	80092e2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80092e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80092e2:	887b      	ldrh	r3, [r7, #2]
 80092e4:	2b20      	cmp	r3, #32
 80092e6:	d103      	bne.n	80092f0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f043 0320 	orr.w	r3, r3, #32
 80092ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80092f0:	887b      	ldrh	r3, [r7, #2]
 80092f2:	2b40      	cmp	r3, #64	; 0x40
 80092f4:	d103      	bne.n	80092fe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092fc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	6819      	ldr	r1, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	43da      	mvns	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	400a      	ands	r2, r1
 800930e:	601a      	str	r2, [r3, #0]
}
 8009310:	bf00      	nop
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b20      	cmp	r3, #32
 8009330:	d138      	bne.n	80093a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009338:	2b01      	cmp	r3, #1
 800933a:	d101      	bne.n	8009340 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800933c:	2302      	movs	r3, #2
 800933e:	e032      	b.n	80093a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2224      	movs	r2, #36	; 0x24
 800934c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f022 0201 	bic.w	r2, r2, #1
 800935e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800936e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	6819      	ldr	r1, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	430a      	orrs	r2, r1
 800937e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f042 0201 	orr.w	r2, r2, #1
 800938e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2220      	movs	r2, #32
 8009394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	e000      	b.n	80093a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80093a4:	2302      	movs	r3, #2
  }
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b085      	sub	sp, #20
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b20      	cmp	r3, #32
 80093c6:	d139      	bne.n	800943c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d101      	bne.n	80093d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80093d2:	2302      	movs	r3, #2
 80093d4:	e033      	b.n	800943e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2224      	movs	r2, #36	; 0x24
 80093e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0201 	bic.w	r2, r2, #1
 80093f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009404:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	4313      	orrs	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f042 0201 	orr.w	r2, r2, #1
 8009426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2220      	movs	r2, #32
 800942c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	e000      	b.n	800943e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800943c:	2302      	movs	r3, #2
  }
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b084      	sub	sp, #16
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d101      	bne.n	800945c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e041      	b.n	80094e0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009464:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f245 5255 	movw	r2, #21845	; 0x5555
 800946e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	6852      	ldr	r2, [r2, #4]
 8009478:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	6892      	ldr	r2, [r2, #8]
 8009482:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009484:	f7fa fe40 	bl	8004108 <HAL_GetTick>
 8009488:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800948a:	e00f      	b.n	80094ac <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800948c:	f7fa fe3c 	bl	8004108 <HAL_GetTick>
 8009490:	4602      	mov	r2, r0
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	2b31      	cmp	r3, #49	; 0x31
 8009498:	d908      	bls.n	80094ac <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f003 0307 	and.w	r3, r3, #7
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e019      	b.n	80094e0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f003 0307 	and.w	r3, r3, #7
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e8      	bne.n	800948c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	691a      	ldr	r2, [r3, #16]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d005      	beq.n	80094d4 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	68d2      	ldr	r2, [r2, #12]
 80094d0:	611a      	str	r2, [r3, #16]
 80094d2:	e004      	b.n	80094de <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80094dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d101      	bne.n	80094fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e0c0      	b.n	800967c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8009500:	b2db      	uxtb	r3, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	d106      	bne.n	8009514 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7fa fad6 	bl	8003ac0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2203      	movs	r2, #3
 8009518:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4618      	mov	r0, r3
 8009522:	f002 fdb1 	bl	800c088 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009526:	2300      	movs	r3, #0
 8009528:	73fb      	strb	r3, [r7, #15]
 800952a:	e03e      	b.n	80095aa <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800952c:	7bfa      	ldrb	r2, [r7, #15]
 800952e:	6879      	ldr	r1, [r7, #4]
 8009530:	4613      	mov	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	440b      	add	r3, r1
 800953a:	3311      	adds	r3, #17
 800953c:	2201      	movs	r2, #1
 800953e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009540:	7bfa      	ldrb	r2, [r7, #15]
 8009542:	6879      	ldr	r1, [r7, #4]
 8009544:	4613      	mov	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	00db      	lsls	r3, r3, #3
 800954c:	440b      	add	r3, r1
 800954e:	3310      	adds	r3, #16
 8009550:	7bfa      	ldrb	r2, [r7, #15]
 8009552:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009554:	7bfa      	ldrb	r2, [r7, #15]
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	4613      	mov	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	00db      	lsls	r3, r3, #3
 8009560:	440b      	add	r3, r1
 8009562:	3313      	adds	r3, #19
 8009564:	2200      	movs	r2, #0
 8009566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009568:	7bfa      	ldrb	r2, [r7, #15]
 800956a:	6879      	ldr	r1, [r7, #4]
 800956c:	4613      	mov	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	00db      	lsls	r3, r3, #3
 8009574:	440b      	add	r3, r1
 8009576:	3320      	adds	r3, #32
 8009578:	2200      	movs	r2, #0
 800957a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800957c:	7bfa      	ldrb	r2, [r7, #15]
 800957e:	6879      	ldr	r1, [r7, #4]
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	440b      	add	r3, r1
 800958a:	3324      	adds	r3, #36	; 0x24
 800958c:	2200      	movs	r2, #0
 800958e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009590:	7bfb      	ldrb	r3, [r7, #15]
 8009592:	6879      	ldr	r1, [r7, #4]
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	4613      	mov	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	00db      	lsls	r3, r3, #3
 800959e:	440b      	add	r3, r1
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	3301      	adds	r3, #1
 80095a8:	73fb      	strb	r3, [r7, #15]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	791b      	ldrb	r3, [r3, #4]
 80095ae:	7bfa      	ldrb	r2, [r7, #15]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d3bb      	bcc.n	800952c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095b4:	2300      	movs	r3, #0
 80095b6:	73fb      	strb	r3, [r7, #15]
 80095b8:	e044      	b.n	8009644 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80095ba:	7bfa      	ldrb	r2, [r7, #15]
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	00db      	lsls	r3, r3, #3
 80095c6:	440b      	add	r3, r1
 80095c8:	f203 1351 	addw	r3, r3, #337	; 0x151
 80095cc:	2200      	movs	r2, #0
 80095ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80095d0:	7bfa      	ldrb	r2, [r7, #15]
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	440b      	add	r3, r1
 80095de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095e2:	7bfa      	ldrb	r2, [r7, #15]
 80095e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80095e6:	7bfa      	ldrb	r2, [r7, #15]
 80095e8:	6879      	ldr	r1, [r7, #4]
 80095ea:	4613      	mov	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	00db      	lsls	r3, r3, #3
 80095f2:	440b      	add	r3, r1
 80095f4:	f203 1353 	addw	r3, r3, #339	; 0x153
 80095f8:	2200      	movs	r2, #0
 80095fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80095fc:	7bfa      	ldrb	r2, [r7, #15]
 80095fe:	6879      	ldr	r1, [r7, #4]
 8009600:	4613      	mov	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	440b      	add	r3, r1
 800960a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800960e:	2200      	movs	r2, #0
 8009610:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009612:	7bfa      	ldrb	r2, [r7, #15]
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	440b      	add	r3, r1
 8009620:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009624:	2200      	movs	r2, #0
 8009626:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009628:	7bfa      	ldrb	r2, [r7, #15]
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	4613      	mov	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	00db      	lsls	r3, r3, #3
 8009634:	440b      	add	r3, r1
 8009636:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800963a:	2200      	movs	r2, #0
 800963c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	3301      	adds	r3, #1
 8009642:	73fb      	strb	r3, [r7, #15]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	791b      	ldrb	r3, [r3, #4]
 8009648:	7bfa      	ldrb	r2, [r7, #15]
 800964a:	429a      	cmp	r2, r3
 800964c:	d3b5      	bcc.n	80095ba <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	3304      	adds	r3, #4
 8009656:	e893 0006 	ldmia.w	r3, {r1, r2}
 800965a:	f002 fd30 	bl	800c0be <USB_DevInit>

  hpcd->USB_Address = 0U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	7a9b      	ldrb	r3, [r3, #10]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d102      	bne.n	800967a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f805 	bl	8009684 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	f043 0301 	orr.w	r3, r3, #1
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80096bc:	b29b      	uxth	r3, r3
 80096be:	f043 0302 	orr.w	r3, r3, #2
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d141      	bne.n	800976a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80096e6:	4b4b      	ldr	r3, [pc, #300]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80096ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096f2:	d131      	bne.n	8009758 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80096f4:	4b47      	ldr	r3, [pc, #284]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80096f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096fa:	4a46      	ldr	r2, [pc, #280]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80096fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009700:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009704:	4b43      	ldr	r3, [pc, #268]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800970c:	4a41      	ldr	r2, [pc, #260]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800970e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009712:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009714:	4b40      	ldr	r3, [pc, #256]	; (8009818 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2232      	movs	r2, #50	; 0x32
 800971a:	fb02 f303 	mul.w	r3, r2, r3
 800971e:	4a3f      	ldr	r2, [pc, #252]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009720:	fba2 2303 	umull	r2, r3, r2, r3
 8009724:	0c9b      	lsrs	r3, r3, #18
 8009726:	3301      	adds	r3, #1
 8009728:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800972a:	e002      	b.n	8009732 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	3b01      	subs	r3, #1
 8009730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009732:	4b38      	ldr	r3, [pc, #224]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800973a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800973e:	d102      	bne.n	8009746 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1f2      	bne.n	800972c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009746:	4b33      	ldr	r3, [pc, #204]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800974e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009752:	d158      	bne.n	8009806 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	e057      	b.n	8009808 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009758:	4b2e      	ldr	r3, [pc, #184]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800975a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800975e:	4a2d      	ldr	r2, [pc, #180]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009764:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009768:	e04d      	b.n	8009806 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009770:	d141      	bne.n	80097f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009772:	4b28      	ldr	r3, [pc, #160]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800977a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800977e:	d131      	bne.n	80097e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009780:	4b24      	ldr	r3, [pc, #144]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009786:	4a23      	ldr	r2, [pc, #140]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800978c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009790:	4b20      	ldr	r3, [pc, #128]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009798:	4a1e      	ldr	r2, [pc, #120]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800979a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800979e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80097a0:	4b1d      	ldr	r3, [pc, #116]	; (8009818 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2232      	movs	r2, #50	; 0x32
 80097a6:	fb02 f303 	mul.w	r3, r2, r3
 80097aa:	4a1c      	ldr	r2, [pc, #112]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80097ac:	fba2 2303 	umull	r2, r3, r2, r3
 80097b0:	0c9b      	lsrs	r3, r3, #18
 80097b2:	3301      	adds	r3, #1
 80097b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097b6:	e002      	b.n	80097be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097be:	4b15      	ldr	r3, [pc, #84]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ca:	d102      	bne.n	80097d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1f2      	bne.n	80097b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80097d2:	4b10      	ldr	r3, [pc, #64]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097de:	d112      	bne.n	8009806 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e011      	b.n	8009808 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80097e4:	4b0b      	ldr	r3, [pc, #44]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097ea:	4a0a      	ldr	r2, [pc, #40]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80097f4:	e007      	b.n	8009806 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80097f6:	4b07      	ldr	r3, [pc, #28]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80097fe:	4a05      	ldr	r2, [pc, #20]	; (8009814 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009800:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009804:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	40007000 	.word	0x40007000
 8009818:	20000000 	.word	0x20000000
 800981c:	431bde83 	.word	0x431bde83

08009820 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009820:	b480      	push	{r7}
 8009822:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009824:	4b05      	ldr	r3, [pc, #20]	; (800983c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	4a04      	ldr	r2, [pc, #16]	; (800983c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800982a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800982e:	6093      	str	r3, [r2, #8]
}
 8009830:	bf00      	nop
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	40007000 	.word	0x40007000

08009840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e2fe      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	2b00      	cmp	r3, #0
 800985c:	d075      	beq.n	800994a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800985e:	4b97      	ldr	r3, [pc, #604]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f003 030c 	and.w	r3, r3, #12
 8009866:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009868:	4b94      	ldr	r3, [pc, #592]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	f003 0303 	and.w	r3, r3, #3
 8009870:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	2b0c      	cmp	r3, #12
 8009876:	d102      	bne.n	800987e <HAL_RCC_OscConfig+0x3e>
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2b03      	cmp	r3, #3
 800987c:	d002      	beq.n	8009884 <HAL_RCC_OscConfig+0x44>
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	2b08      	cmp	r3, #8
 8009882:	d10b      	bne.n	800989c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009884:	4b8d      	ldr	r3, [pc, #564]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d05b      	beq.n	8009948 <HAL_RCC_OscConfig+0x108>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d157      	bne.n	8009948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e2d9      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098a4:	d106      	bne.n	80098b4 <HAL_RCC_OscConfig+0x74>
 80098a6:	4b85      	ldr	r3, [pc, #532]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a84      	ldr	r2, [pc, #528]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80098ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	e01d      	b.n	80098f0 <HAL_RCC_OscConfig+0xb0>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098bc:	d10c      	bne.n	80098d8 <HAL_RCC_OscConfig+0x98>
 80098be:	4b7f      	ldr	r3, [pc, #508]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a7e      	ldr	r2, [pc, #504]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80098c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098c8:	6013      	str	r3, [r2, #0]
 80098ca:	4b7c      	ldr	r3, [pc, #496]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a7b      	ldr	r2, [pc, #492]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80098d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098d4:	6013      	str	r3, [r2, #0]
 80098d6:	e00b      	b.n	80098f0 <HAL_RCC_OscConfig+0xb0>
 80098d8:	4b78      	ldr	r3, [pc, #480]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a77      	ldr	r2, [pc, #476]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80098de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	4b75      	ldr	r3, [pc, #468]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a74      	ldr	r2, [pc, #464]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80098ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d013      	beq.n	8009920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f8:	f7fa fc06 	bl	8004108 <HAL_GetTick>
 80098fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098fe:	e008      	b.n	8009912 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009900:	f7fa fc02 	bl	8004108 <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	2b64      	cmp	r3, #100	; 0x64
 800990c:	d901      	bls.n	8009912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800990e:	2303      	movs	r3, #3
 8009910:	e29e      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009912:	4b6a      	ldr	r3, [pc, #424]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0f0      	beq.n	8009900 <HAL_RCC_OscConfig+0xc0>
 800991e:	e014      	b.n	800994a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009920:	f7fa fbf2 	bl	8004108 <HAL_GetTick>
 8009924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009926:	e008      	b.n	800993a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009928:	f7fa fbee 	bl	8004108 <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	2b64      	cmp	r3, #100	; 0x64
 8009934:	d901      	bls.n	800993a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	e28a      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800993a:	4b60      	ldr	r3, [pc, #384]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1f0      	bne.n	8009928 <HAL_RCC_OscConfig+0xe8>
 8009946:	e000      	b.n	800994a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0302 	and.w	r3, r3, #2
 8009952:	2b00      	cmp	r3, #0
 8009954:	d075      	beq.n	8009a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009956:	4b59      	ldr	r3, [pc, #356]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f003 030c 	and.w	r3, r3, #12
 800995e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009960:	4b56      	ldr	r3, [pc, #344]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	f003 0303 	and.w	r3, r3, #3
 8009968:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	2b0c      	cmp	r3, #12
 800996e:	d102      	bne.n	8009976 <HAL_RCC_OscConfig+0x136>
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	2b02      	cmp	r3, #2
 8009974:	d002      	beq.n	800997c <HAL_RCC_OscConfig+0x13c>
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	2b04      	cmp	r3, #4
 800997a:	d11f      	bne.n	80099bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800997c:	4b4f      	ldr	r3, [pc, #316]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009984:	2b00      	cmp	r3, #0
 8009986:	d005      	beq.n	8009994 <HAL_RCC_OscConfig+0x154>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	e25d      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009994:	4b49      	ldr	r3, [pc, #292]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	061b      	lsls	r3, r3, #24
 80099a2:	4946      	ldr	r1, [pc, #280]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80099a4:	4313      	orrs	r3, r2
 80099a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80099a8:	4b45      	ldr	r3, [pc, #276]	; (8009ac0 <HAL_RCC_OscConfig+0x280>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fa fb5f 	bl	8004070 <HAL_InitTick>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d043      	beq.n	8009a40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e249      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d023      	beq.n	8009a0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099c4:	4b3d      	ldr	r3, [pc, #244]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a3c      	ldr	r2, [pc, #240]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80099ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099d0:	f7fa fb9a 	bl	8004108 <HAL_GetTick>
 80099d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099d6:	e008      	b.n	80099ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099d8:	f7fa fb96 	bl	8004108 <HAL_GetTick>
 80099dc:	4602      	mov	r2, r0
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d901      	bls.n	80099ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80099e6:	2303      	movs	r3, #3
 80099e8:	e232      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099ea:	4b34      	ldr	r3, [pc, #208]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d0f0      	beq.n	80099d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099f6:	4b31      	ldr	r3, [pc, #196]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	061b      	lsls	r3, r3, #24
 8009a04:	492d      	ldr	r1, [pc, #180]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	604b      	str	r3, [r1, #4]
 8009a0a:	e01a      	b.n	8009a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a0c:	4b2b      	ldr	r3, [pc, #172]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a2a      	ldr	r2, [pc, #168]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009a12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a18:	f7fa fb76 	bl	8004108 <HAL_GetTick>
 8009a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009a1e:	e008      	b.n	8009a32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a20:	f7fa fb72 	bl	8004108 <HAL_GetTick>
 8009a24:	4602      	mov	r2, r0
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d901      	bls.n	8009a32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e20e      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009a32:	4b22      	ldr	r3, [pc, #136]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1f0      	bne.n	8009a20 <HAL_RCC_OscConfig+0x1e0>
 8009a3e:	e000      	b.n	8009a42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0308 	and.w	r3, r3, #8
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d041      	beq.n	8009ad2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d01c      	beq.n	8009a90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a56:	4b19      	ldr	r3, [pc, #100]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a5c:	4a17      	ldr	r2, [pc, #92]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009a5e:	f043 0301 	orr.w	r3, r3, #1
 8009a62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a66:	f7fa fb4f 	bl	8004108 <HAL_GetTick>
 8009a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a6c:	e008      	b.n	8009a80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a6e:	f7fa fb4b 	bl	8004108 <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d901      	bls.n	8009a80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e1e7      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a80:	4b0e      	ldr	r3, [pc, #56]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a86:	f003 0302 	and.w	r3, r3, #2
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0ef      	beq.n	8009a6e <HAL_RCC_OscConfig+0x22e>
 8009a8e:	e020      	b.n	8009ad2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a90:	4b0a      	ldr	r3, [pc, #40]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a96:	4a09      	ldr	r2, [pc, #36]	; (8009abc <HAL_RCC_OscConfig+0x27c>)
 8009a98:	f023 0301 	bic.w	r3, r3, #1
 8009a9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009aa0:	f7fa fb32 	bl	8004108 <HAL_GetTick>
 8009aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009aa6:	e00d      	b.n	8009ac4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009aa8:	f7fa fb2e 	bl	8004108 <HAL_GetTick>
 8009aac:	4602      	mov	r2, r0
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d906      	bls.n	8009ac4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e1ca      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
 8009aba:	bf00      	nop
 8009abc:	40021000 	.word	0x40021000
 8009ac0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009ac4:	4b8c      	ldr	r3, [pc, #560]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009aca:	f003 0302 	and.w	r3, r3, #2
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1ea      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 0304 	and.w	r3, r3, #4
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f000 80a6 	beq.w	8009c2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009ae4:	4b84      	ldr	r3, [pc, #528]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d101      	bne.n	8009af4 <HAL_RCC_OscConfig+0x2b4>
 8009af0:	2301      	movs	r3, #1
 8009af2:	e000      	b.n	8009af6 <HAL_RCC_OscConfig+0x2b6>
 8009af4:	2300      	movs	r3, #0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00d      	beq.n	8009b16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009afa:	4b7f      	ldr	r3, [pc, #508]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009afe:	4a7e      	ldr	r2, [pc, #504]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b04:	6593      	str	r3, [r2, #88]	; 0x58
 8009b06:	4b7c      	ldr	r3, [pc, #496]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009b12:	2301      	movs	r3, #1
 8009b14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b16:	4b79      	ldr	r3, [pc, #484]	; (8009cfc <HAL_RCC_OscConfig+0x4bc>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d118      	bne.n	8009b54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b22:	4b76      	ldr	r3, [pc, #472]	; (8009cfc <HAL_RCC_OscConfig+0x4bc>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a75      	ldr	r2, [pc, #468]	; (8009cfc <HAL_RCC_OscConfig+0x4bc>)
 8009b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b2e:	f7fa faeb 	bl	8004108 <HAL_GetTick>
 8009b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b34:	e008      	b.n	8009b48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b36:	f7fa fae7 	bl	8004108 <HAL_GetTick>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d901      	bls.n	8009b48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e183      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b48:	4b6c      	ldr	r3, [pc, #432]	; (8009cfc <HAL_RCC_OscConfig+0x4bc>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d0f0      	beq.n	8009b36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d108      	bne.n	8009b6e <HAL_RCC_OscConfig+0x32e>
 8009b5c:	4b66      	ldr	r3, [pc, #408]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b62:	4a65      	ldr	r2, [pc, #404]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009b64:	f043 0301 	orr.w	r3, r3, #1
 8009b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b6c:	e024      	b.n	8009bb8 <HAL_RCC_OscConfig+0x378>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	2b05      	cmp	r3, #5
 8009b74:	d110      	bne.n	8009b98 <HAL_RCC_OscConfig+0x358>
 8009b76:	4b60      	ldr	r3, [pc, #384]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b7c:	4a5e      	ldr	r2, [pc, #376]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009b7e:	f043 0304 	orr.w	r3, r3, #4
 8009b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b86:	4b5c      	ldr	r3, [pc, #368]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b8c:	4a5a      	ldr	r2, [pc, #360]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009b8e:	f043 0301 	orr.w	r3, r3, #1
 8009b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b96:	e00f      	b.n	8009bb8 <HAL_RCC_OscConfig+0x378>
 8009b98:	4b57      	ldr	r3, [pc, #348]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b9e:	4a56      	ldr	r2, [pc, #344]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009ba0:	f023 0301 	bic.w	r3, r3, #1
 8009ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009ba8:	4b53      	ldr	r3, [pc, #332]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bae:	4a52      	ldr	r2, [pc, #328]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009bb0:	f023 0304 	bic.w	r3, r3, #4
 8009bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d016      	beq.n	8009bee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bc0:	f7fa faa2 	bl	8004108 <HAL_GetTick>
 8009bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bc6:	e00a      	b.n	8009bde <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bc8:	f7fa fa9e 	bl	8004108 <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d901      	bls.n	8009bde <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e138      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bde:	4b46      	ldr	r3, [pc, #280]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d0ed      	beq.n	8009bc8 <HAL_RCC_OscConfig+0x388>
 8009bec:	e015      	b.n	8009c1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bee:	f7fa fa8b 	bl	8004108 <HAL_GetTick>
 8009bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009bf4:	e00a      	b.n	8009c0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bf6:	f7fa fa87 	bl	8004108 <HAL_GetTick>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d901      	bls.n	8009c0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e121      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009c0c:	4b3a      	ldr	r3, [pc, #232]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c12:	f003 0302 	and.w	r3, r3, #2
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1ed      	bne.n	8009bf6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009c1a:	7ffb      	ldrb	r3, [r7, #31]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d105      	bne.n	8009c2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c20:	4b35      	ldr	r3, [pc, #212]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c24:	4a34      	ldr	r2, [pc, #208]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0320 	and.w	r3, r3, #32
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d03c      	beq.n	8009cb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d01c      	beq.n	8009c7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c40:	4b2d      	ldr	r3, [pc, #180]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c46:	4a2c      	ldr	r2, [pc, #176]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009c48:	f043 0301 	orr.w	r3, r3, #1
 8009c4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c50:	f7fa fa5a 	bl	8004108 <HAL_GetTick>
 8009c54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009c56:	e008      	b.n	8009c6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c58:	f7fa fa56 	bl	8004108 <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d901      	bls.n	8009c6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e0f2      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009c6a:	4b23      	ldr	r3, [pc, #140]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c70:	f003 0302 	and.w	r3, r3, #2
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d0ef      	beq.n	8009c58 <HAL_RCC_OscConfig+0x418>
 8009c78:	e01b      	b.n	8009cb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c7a:	4b1f      	ldr	r3, [pc, #124]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c80:	4a1d      	ldr	r2, [pc, #116]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009c82:	f023 0301 	bic.w	r3, r3, #1
 8009c86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c8a:	f7fa fa3d 	bl	8004108 <HAL_GetTick>
 8009c8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009c90:	e008      	b.n	8009ca4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c92:	f7fa fa39 	bl	8004108 <HAL_GetTick>
 8009c96:	4602      	mov	r2, r0
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d901      	bls.n	8009ca4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e0d5      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009ca4:	4b14      	ldr	r3, [pc, #80]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009caa:	f003 0302 	and.w	r3, r3, #2
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1ef      	bne.n	8009c92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	69db      	ldr	r3, [r3, #28]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 80c9 	beq.w	8009e4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009cbc:	4b0e      	ldr	r3, [pc, #56]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f003 030c 	and.w	r3, r3, #12
 8009cc4:	2b0c      	cmp	r3, #12
 8009cc6:	f000 8083 	beq.w	8009dd0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	69db      	ldr	r3, [r3, #28]
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d15e      	bne.n	8009d90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cd2:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a08      	ldr	r2, [pc, #32]	; (8009cf8 <HAL_RCC_OscConfig+0x4b8>)
 8009cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cde:	f7fa fa13 	bl	8004108 <HAL_GetTick>
 8009ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ce4:	e00c      	b.n	8009d00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ce6:	f7fa fa0f 	bl	8004108 <HAL_GetTick>
 8009cea:	4602      	mov	r2, r0
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d905      	bls.n	8009d00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e0ab      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
 8009cf8:	40021000 	.word	0x40021000
 8009cfc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d00:	4b55      	ldr	r3, [pc, #340]	; (8009e58 <HAL_RCC_OscConfig+0x618>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1ec      	bne.n	8009ce6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d0c:	4b52      	ldr	r3, [pc, #328]	; (8009e58 <HAL_RCC_OscConfig+0x618>)
 8009d0e:	68da      	ldr	r2, [r3, #12]
 8009d10:	4b52      	ldr	r3, [pc, #328]	; (8009e5c <HAL_RCC_OscConfig+0x61c>)
 8009d12:	4013      	ands	r3, r2
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	6a11      	ldr	r1, [r2, #32]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d1c:	3a01      	subs	r2, #1
 8009d1e:	0112      	lsls	r2, r2, #4
 8009d20:	4311      	orrs	r1, r2
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009d26:	0212      	lsls	r2, r2, #8
 8009d28:	4311      	orrs	r1, r2
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009d2e:	0852      	lsrs	r2, r2, #1
 8009d30:	3a01      	subs	r2, #1
 8009d32:	0552      	lsls	r2, r2, #21
 8009d34:	4311      	orrs	r1, r2
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009d3a:	0852      	lsrs	r2, r2, #1
 8009d3c:	3a01      	subs	r2, #1
 8009d3e:	0652      	lsls	r2, r2, #25
 8009d40:	4311      	orrs	r1, r2
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d46:	06d2      	lsls	r2, r2, #27
 8009d48:	430a      	orrs	r2, r1
 8009d4a:	4943      	ldr	r1, [pc, #268]	; (8009e58 <HAL_RCC_OscConfig+0x618>)
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d50:	4b41      	ldr	r3, [pc, #260]	; (8009e58 <HAL_RCC_OscConfig+0x618>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a40      	ldr	r2, [pc, #256]	; (8009e58 <HAL_RCC_OscConfig+0x618>)
 8009d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009d5c:	4b3e      	ldr	r3, [pc, #248]	; (8009e58 <HAL_RCC_OscConfig+0x618>)
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	4a3d      	ldr	r2, [pc, #244]	; (8009e58 <HAL_RCC_OscConfig+0x618>)
 8009d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d68:	f7fa f9ce 	bl	8004108 <HAL_GetTick>
 8009d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d6e:	e008      	b.n	8009d82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d70:	f7fa f9ca 	bl	8004108 <HAL_GetTick>
 8009d74:	4602      	mov	r2, r0
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d901      	bls.n	8009d82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e066      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d82:	4b35      	ldr	r3, [pc, #212]	; (8009e58 <HAL_RCC_OscConfig+0x618>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d0f0      	beq.n	8009d70 <HAL_RCC_OscConfig+0x530>
 8009d8e:	e05e      	b.n	8009e4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d90:	4b31      	ldr	r3, [pc, #196]	; (8009e58 <HAL_RCC_OscConfig+0x618>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a30      	ldr	r2, [pc, #192]	; (8009e58 <HAL_RCC_OscConfig+0x618>)
 8009d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d9c:	f7fa f9b4 	bl	8004108 <HAL_GetTick>
 8009da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009da2:	e008      	b.n	8009db6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009da4:	f7fa f9b0 	bl	8004108 <HAL_GetTick>
 8009da8:	4602      	mov	r2, r0
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d901      	bls.n	8009db6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009db2:	2303      	movs	r3, #3
 8009db4:	e04c      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009db6:	4b28      	ldr	r3, [pc, #160]	; (8009e58 <HAL_RCC_OscConfig+0x618>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f0      	bne.n	8009da4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009dc2:	4b25      	ldr	r3, [pc, #148]	; (8009e58 <HAL_RCC_OscConfig+0x618>)
 8009dc4:	68da      	ldr	r2, [r3, #12]
 8009dc6:	4924      	ldr	r1, [pc, #144]	; (8009e58 <HAL_RCC_OscConfig+0x618>)
 8009dc8:	4b25      	ldr	r3, [pc, #148]	; (8009e60 <HAL_RCC_OscConfig+0x620>)
 8009dca:	4013      	ands	r3, r2
 8009dcc:	60cb      	str	r3, [r1, #12]
 8009dce:	e03e      	b.n	8009e4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	69db      	ldr	r3, [r3, #28]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d101      	bne.n	8009ddc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e039      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009ddc:	4b1e      	ldr	r3, [pc, #120]	; (8009e58 <HAL_RCC_OscConfig+0x618>)
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f003 0203 	and.w	r2, r3, #3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a1b      	ldr	r3, [r3, #32]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d12c      	bne.n	8009e4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d123      	bne.n	8009e4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d11b      	bne.n	8009e4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d113      	bne.n	8009e4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e2c:	085b      	lsrs	r3, r3, #1
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d109      	bne.n	8009e4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e40:	085b      	lsrs	r3, r3, #1
 8009e42:	3b01      	subs	r3, #1
 8009e44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d001      	beq.n	8009e4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e000      	b.n	8009e50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3720      	adds	r7, #32
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	40021000 	.word	0x40021000
 8009e5c:	019f800c 	.word	0x019f800c
 8009e60:	feeefffc 	.word	0xfeeefffc

08009e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d101      	bne.n	8009e7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e11e      	b.n	800a0ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009e7c:	4b91      	ldr	r3, [pc, #580]	; (800a0c4 <HAL_RCC_ClockConfig+0x260>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 030f 	and.w	r3, r3, #15
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d910      	bls.n	8009eac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e8a:	4b8e      	ldr	r3, [pc, #568]	; (800a0c4 <HAL_RCC_ClockConfig+0x260>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f023 020f 	bic.w	r2, r3, #15
 8009e92:	498c      	ldr	r1, [pc, #560]	; (800a0c4 <HAL_RCC_ClockConfig+0x260>)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e9a:	4b8a      	ldr	r3, [pc, #552]	; (800a0c4 <HAL_RCC_ClockConfig+0x260>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 030f 	and.w	r3, r3, #15
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d001      	beq.n	8009eac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e106      	b.n	800a0ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d073      	beq.n	8009fa0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	d129      	bne.n	8009f14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ec0:	4b81      	ldr	r3, [pc, #516]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d101      	bne.n	8009ed0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e0f4      	b.n	800a0ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009ed0:	f000 f9ca 	bl	800a268 <RCC_GetSysClockFreqFromPLLSource>
 8009ed4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	4a7c      	ldr	r2, [pc, #496]	; (800a0cc <HAL_RCC_ClockConfig+0x268>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d93f      	bls.n	8009f5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009ede:	4b7a      	ldr	r3, [pc, #488]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d009      	beq.n	8009efe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d033      	beq.n	8009f5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d12f      	bne.n	8009f5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009efe:	4b72      	ldr	r3, [pc, #456]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f06:	4a70      	ldr	r2, [pc, #448]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009f0e:	2380      	movs	r3, #128	; 0x80
 8009f10:	617b      	str	r3, [r7, #20]
 8009f12:	e024      	b.n	8009f5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d107      	bne.n	8009f2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f1c:	4b6a      	ldr	r3, [pc, #424]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d109      	bne.n	8009f3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e0c6      	b.n	800a0ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f2c:	4b66      	ldr	r3, [pc, #408]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e0be      	b.n	800a0ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009f3c:	f000 f8ce 	bl	800a0dc <HAL_RCC_GetSysClockFreq>
 8009f40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	4a61      	ldr	r2, [pc, #388]	; (800a0cc <HAL_RCC_ClockConfig+0x268>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d909      	bls.n	8009f5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009f4a:	4b5f      	ldr	r3, [pc, #380]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f52:	4a5d      	ldr	r2, [pc, #372]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009f5a:	2380      	movs	r3, #128	; 0x80
 8009f5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f5e:	4b5a      	ldr	r3, [pc, #360]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	f023 0203 	bic.w	r2, r3, #3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	4957      	ldr	r1, [pc, #348]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f70:	f7fa f8ca 	bl	8004108 <HAL_GetTick>
 8009f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f76:	e00a      	b.n	8009f8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f78:	f7fa f8c6 	bl	8004108 <HAL_GetTick>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d901      	bls.n	8009f8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	e095      	b.n	800a0ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f8e:	4b4e      	ldr	r3, [pc, #312]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	f003 020c 	and.w	r2, r3, #12
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d1eb      	bne.n	8009f78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 0302 	and.w	r3, r3, #2
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d023      	beq.n	8009ff4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0304 	and.w	r3, r3, #4
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d005      	beq.n	8009fc4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009fb8:	4b43      	ldr	r3, [pc, #268]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	4a42      	ldr	r2, [pc, #264]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009fbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009fc2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 0308 	and.w	r3, r3, #8
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d007      	beq.n	8009fe0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009fd0:	4b3d      	ldr	r3, [pc, #244]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009fd8:	4a3b      	ldr	r2, [pc, #236]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009fda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009fde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fe0:	4b39      	ldr	r3, [pc, #228]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	4936      	ldr	r1, [pc, #216]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	608b      	str	r3, [r1, #8]
 8009ff2:	e008      	b.n	800a006 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	2b80      	cmp	r3, #128	; 0x80
 8009ff8:	d105      	bne.n	800a006 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009ffa:	4b33      	ldr	r3, [pc, #204]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	4a32      	ldr	r2, [pc, #200]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 800a000:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a004:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a006:	4b2f      	ldr	r3, [pc, #188]	; (800a0c4 <HAL_RCC_ClockConfig+0x260>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 030f 	and.w	r3, r3, #15
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	429a      	cmp	r2, r3
 800a012:	d21d      	bcs.n	800a050 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a014:	4b2b      	ldr	r3, [pc, #172]	; (800a0c4 <HAL_RCC_ClockConfig+0x260>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f023 020f 	bic.w	r2, r3, #15
 800a01c:	4929      	ldr	r1, [pc, #164]	; (800a0c4 <HAL_RCC_ClockConfig+0x260>)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	4313      	orrs	r3, r2
 800a022:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a024:	f7fa f870 	bl	8004108 <HAL_GetTick>
 800a028:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a02a:	e00a      	b.n	800a042 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a02c:	f7fa f86c 	bl	8004108 <HAL_GetTick>
 800a030:	4602      	mov	r2, r0
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	f241 3288 	movw	r2, #5000	; 0x1388
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d901      	bls.n	800a042 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e03b      	b.n	800a0ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a042:	4b20      	ldr	r3, [pc, #128]	; (800a0c4 <HAL_RCC_ClockConfig+0x260>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 030f 	and.w	r3, r3, #15
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d1ed      	bne.n	800a02c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 0304 	and.w	r3, r3, #4
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d008      	beq.n	800a06e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a05c:	4b1a      	ldr	r3, [pc, #104]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	4917      	ldr	r1, [pc, #92]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 0308 	and.w	r3, r3, #8
 800a076:	2b00      	cmp	r3, #0
 800a078:	d009      	beq.n	800a08e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a07a:	4b13      	ldr	r3, [pc, #76]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	00db      	lsls	r3, r3, #3
 800a088:	490f      	ldr	r1, [pc, #60]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a08e:	f000 f825 	bl	800a0dc <HAL_RCC_GetSysClockFreq>
 800a092:	4602      	mov	r2, r0
 800a094:	4b0c      	ldr	r3, [pc, #48]	; (800a0c8 <HAL_RCC_ClockConfig+0x264>)
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	091b      	lsrs	r3, r3, #4
 800a09a:	f003 030f 	and.w	r3, r3, #15
 800a09e:	490c      	ldr	r1, [pc, #48]	; (800a0d0 <HAL_RCC_ClockConfig+0x26c>)
 800a0a0:	5ccb      	ldrb	r3, [r1, r3]
 800a0a2:	f003 031f 	and.w	r3, r3, #31
 800a0a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0aa:	4a0a      	ldr	r2, [pc, #40]	; (800a0d4 <HAL_RCC_ClockConfig+0x270>)
 800a0ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a0ae:	4b0a      	ldr	r3, [pc, #40]	; (800a0d8 <HAL_RCC_ClockConfig+0x274>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7f9 ffdc 	bl	8004070 <HAL_InitTick>
 800a0b8:	4603      	mov	r3, r0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	40022000 	.word	0x40022000
 800a0c8:	40021000 	.word	0x40021000
 800a0cc:	04c4b400 	.word	0x04c4b400
 800a0d0:	0800d090 	.word	0x0800d090
 800a0d4:	20000000 	.word	0x20000000
 800a0d8:	20000004 	.word	0x20000004

0800a0dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b087      	sub	sp, #28
 800a0e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a0e2:	4b2c      	ldr	r3, [pc, #176]	; (800a194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	f003 030c 	and.w	r3, r3, #12
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d102      	bne.n	800a0f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a0ee:	4b2a      	ldr	r3, [pc, #168]	; (800a198 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a0f0:	613b      	str	r3, [r7, #16]
 800a0f2:	e047      	b.n	800a184 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a0f4:	4b27      	ldr	r3, [pc, #156]	; (800a194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	f003 030c 	and.w	r3, r3, #12
 800a0fc:	2b08      	cmp	r3, #8
 800a0fe:	d102      	bne.n	800a106 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a100:	4b26      	ldr	r3, [pc, #152]	; (800a19c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a102:	613b      	str	r3, [r7, #16]
 800a104:	e03e      	b.n	800a184 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a106:	4b23      	ldr	r3, [pc, #140]	; (800a194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	f003 030c 	and.w	r3, r3, #12
 800a10e:	2b0c      	cmp	r3, #12
 800a110:	d136      	bne.n	800a180 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a112:	4b20      	ldr	r3, [pc, #128]	; (800a194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	f003 0303 	and.w	r3, r3, #3
 800a11a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a11c:	4b1d      	ldr	r3, [pc, #116]	; (800a194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	091b      	lsrs	r3, r3, #4
 800a122:	f003 030f 	and.w	r3, r3, #15
 800a126:	3301      	adds	r3, #1
 800a128:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	d10c      	bne.n	800a14a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a130:	4a1a      	ldr	r2, [pc, #104]	; (800a19c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	fbb2 f3f3 	udiv	r3, r2, r3
 800a138:	4a16      	ldr	r2, [pc, #88]	; (800a194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a13a:	68d2      	ldr	r2, [r2, #12]
 800a13c:	0a12      	lsrs	r2, r2, #8
 800a13e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a142:	fb02 f303 	mul.w	r3, r2, r3
 800a146:	617b      	str	r3, [r7, #20]
      break;
 800a148:	e00c      	b.n	800a164 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a14a:	4a13      	ldr	r2, [pc, #76]	; (800a198 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a152:	4a10      	ldr	r2, [pc, #64]	; (800a194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a154:	68d2      	ldr	r2, [r2, #12]
 800a156:	0a12      	lsrs	r2, r2, #8
 800a158:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a15c:	fb02 f303 	mul.w	r3, r2, r3
 800a160:	617b      	str	r3, [r7, #20]
      break;
 800a162:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a164:	4b0b      	ldr	r3, [pc, #44]	; (800a194 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	0e5b      	lsrs	r3, r3, #25
 800a16a:	f003 0303 	and.w	r3, r3, #3
 800a16e:	3301      	adds	r3, #1
 800a170:	005b      	lsls	r3, r3, #1
 800a172:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a174:	697a      	ldr	r2, [r7, #20]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	fbb2 f3f3 	udiv	r3, r2, r3
 800a17c:	613b      	str	r3, [r7, #16]
 800a17e:	e001      	b.n	800a184 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a180:	2300      	movs	r3, #0
 800a182:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a184:	693b      	ldr	r3, [r7, #16]
}
 800a186:	4618      	mov	r0, r3
 800a188:	371c      	adds	r7, #28
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	40021000 	.word	0x40021000
 800a198:	00f42400 	.word	0x00f42400
 800a19c:	007a1200 	.word	0x007a1200

0800a1a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1a4:	4b03      	ldr	r3, [pc, #12]	; (800a1b4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	20000000 	.word	0x20000000

0800a1b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a1bc:	f7ff fff0 	bl	800a1a0 <HAL_RCC_GetHCLKFreq>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	4b06      	ldr	r3, [pc, #24]	; (800a1dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	0a1b      	lsrs	r3, r3, #8
 800a1c8:	f003 0307 	and.w	r3, r3, #7
 800a1cc:	4904      	ldr	r1, [pc, #16]	; (800a1e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a1ce:	5ccb      	ldrb	r3, [r1, r3]
 800a1d0:	f003 031f 	and.w	r3, r3, #31
 800a1d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	40021000 	.word	0x40021000
 800a1e0:	0800d0a0 	.word	0x0800d0a0

0800a1e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a1e8:	f7ff ffda 	bl	800a1a0 <HAL_RCC_GetHCLKFreq>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	4b06      	ldr	r3, [pc, #24]	; (800a208 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	0adb      	lsrs	r3, r3, #11
 800a1f4:	f003 0307 	and.w	r3, r3, #7
 800a1f8:	4904      	ldr	r1, [pc, #16]	; (800a20c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a1fa:	5ccb      	ldrb	r3, [r1, r3]
 800a1fc:	f003 031f 	and.w	r3, r3, #31
 800a200:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a204:	4618      	mov	r0, r3
 800a206:	bd80      	pop	{r7, pc}
 800a208:	40021000 	.word	0x40021000
 800a20c:	0800d0a0 	.word	0x0800d0a0

0800a210 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a210:	b480      	push	{r7}
 800a212:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800a214:	4b05      	ldr	r3, [pc, #20]	; (800a22c <HAL_RCC_EnableCSS+0x1c>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a04      	ldr	r2, [pc, #16]	; (800a22c <HAL_RCC_EnableCSS+0x1c>)
 800a21a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a21e:	6013      	str	r3, [r2, #0]
}
 800a220:	bf00      	nop
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	40021000 	.word	0x40021000

0800a230 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a234:	4b07      	ldr	r3, [pc, #28]	; (800a254 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a23c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a240:	d105      	bne.n	800a24e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a242:	f000 f809 	bl	800a258 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a246:	4b03      	ldr	r3, [pc, #12]	; (800a254 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a24c:	621a      	str	r2, [r3, #32]
  }
}
 800a24e:	bf00      	nop
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	40021000 	.word	0x40021000

0800a258 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a258:	b480      	push	{r7}
 800a25a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800a25c:	bf00      	nop
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
	...

0800a268 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a268:	b480      	push	{r7}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a26e:	4b1e      	ldr	r3, [pc, #120]	; (800a2e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	f003 0303 	and.w	r3, r3, #3
 800a276:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a278:	4b1b      	ldr	r3, [pc, #108]	; (800a2e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	091b      	lsrs	r3, r3, #4
 800a27e:	f003 030f 	and.w	r3, r3, #15
 800a282:	3301      	adds	r3, #1
 800a284:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d10c      	bne.n	800a2a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a28c:	4a17      	ldr	r2, [pc, #92]	; (800a2ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	fbb2 f3f3 	udiv	r3, r2, r3
 800a294:	4a14      	ldr	r2, [pc, #80]	; (800a2e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a296:	68d2      	ldr	r2, [r2, #12]
 800a298:	0a12      	lsrs	r2, r2, #8
 800a29a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a29e:	fb02 f303 	mul.w	r3, r2, r3
 800a2a2:	617b      	str	r3, [r7, #20]
    break;
 800a2a4:	e00c      	b.n	800a2c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a2a6:	4a12      	ldr	r2, [pc, #72]	; (800a2f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ae:	4a0e      	ldr	r2, [pc, #56]	; (800a2e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a2b0:	68d2      	ldr	r2, [r2, #12]
 800a2b2:	0a12      	lsrs	r2, r2, #8
 800a2b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a2b8:	fb02 f303 	mul.w	r3, r2, r3
 800a2bc:	617b      	str	r3, [r7, #20]
    break;
 800a2be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a2c0:	4b09      	ldr	r3, [pc, #36]	; (800a2e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	0e5b      	lsrs	r3, r3, #25
 800a2c6:	f003 0303 	and.w	r3, r3, #3
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	005b      	lsls	r3, r3, #1
 800a2ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a2da:	687b      	ldr	r3, [r7, #4]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	371c      	adds	r7, #28
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	40021000 	.word	0x40021000
 800a2ec:	007a1200 	.word	0x007a1200
 800a2f0:	00f42400 	.word	0x00f42400

0800a2f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a300:	2300      	movs	r3, #0
 800a302:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 8098 	beq.w	800a442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a312:	2300      	movs	r3, #0
 800a314:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a316:	4b43      	ldr	r3, [pc, #268]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a31a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10d      	bne.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a322:	4b40      	ldr	r3, [pc, #256]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a326:	4a3f      	ldr	r2, [pc, #252]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a32c:	6593      	str	r3, [r2, #88]	; 0x58
 800a32e:	4b3d      	ldr	r3, [pc, #244]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a336:	60bb      	str	r3, [r7, #8]
 800a338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a33a:	2301      	movs	r3, #1
 800a33c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a33e:	4b3a      	ldr	r3, [pc, #232]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a39      	ldr	r2, [pc, #228]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a348:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a34a:	f7f9 fedd 	bl	8004108 <HAL_GetTick>
 800a34e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a350:	e009      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a352:	f7f9 fed9 	bl	8004108 <HAL_GetTick>
 800a356:	4602      	mov	r2, r0
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d902      	bls.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a360:	2303      	movs	r3, #3
 800a362:	74fb      	strb	r3, [r7, #19]
        break;
 800a364:	e005      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a366:	4b30      	ldr	r3, [pc, #192]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d0ef      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a372:	7cfb      	ldrb	r3, [r7, #19]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d159      	bne.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a378:	4b2a      	ldr	r3, [pc, #168]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a37e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a382:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d01e      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	429a      	cmp	r2, r3
 800a392:	d019      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a394:	4b23      	ldr	r3, [pc, #140]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a39a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a39e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3a0:	4b20      	ldr	r3, [pc, #128]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3a6:	4a1f      	ldr	r2, [pc, #124]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3b0:	4b1c      	ldr	r3, [pc, #112]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3b6:	4a1b      	ldr	r2, [pc, #108]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a3c0:	4a18      	ldr	r2, [pc, #96]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	f003 0301 	and.w	r3, r3, #1
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d016      	beq.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3d2:	f7f9 fe99 	bl	8004108 <HAL_GetTick>
 800a3d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a3d8:	e00b      	b.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3da:	f7f9 fe95 	bl	8004108 <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d902      	bls.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	74fb      	strb	r3, [r7, #19]
            break;
 800a3f0:	e006      	b.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a3f2:	4b0c      	ldr	r3, [pc, #48]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3f8:	f003 0302 	and.w	r3, r3, #2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d0ec      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a400:	7cfb      	ldrb	r3, [r7, #19]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10b      	bne.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a406:	4b07      	ldr	r3, [pc, #28]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a40c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a414:	4903      	ldr	r1, [pc, #12]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a416:	4313      	orrs	r3, r2
 800a418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a41c:	e008      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a41e:	7cfb      	ldrb	r3, [r7, #19]
 800a420:	74bb      	strb	r3, [r7, #18]
 800a422:	e005      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a424:	40021000 	.word	0x40021000
 800a428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a42c:	7cfb      	ldrb	r3, [r7, #19]
 800a42e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a430:	7c7b      	ldrb	r3, [r7, #17]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d105      	bne.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a436:	4ba7      	ldr	r3, [pc, #668]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a43a:	4aa6      	ldr	r2, [pc, #664]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a43c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a440:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a44e:	4ba1      	ldr	r3, [pc, #644]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a454:	f023 0203 	bic.w	r2, r3, #3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	499d      	ldr	r1, [pc, #628]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0302 	and.w	r3, r3, #2
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00a      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a470:	4b98      	ldr	r3, [pc, #608]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a476:	f023 020c 	bic.w	r2, r3, #12
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	4995      	ldr	r1, [pc, #596]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a480:	4313      	orrs	r3, r2
 800a482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0304 	and.w	r3, r3, #4
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a492:	4b90      	ldr	r3, [pc, #576]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a498:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	498c      	ldr	r1, [pc, #560]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 0308 	and.w	r3, r3, #8
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00a      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a4b4:	4b87      	ldr	r3, [pc, #540]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	4984      	ldr	r1, [pc, #528]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 0310 	and.w	r3, r3, #16
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a4d6:	4b7f      	ldr	r3, [pc, #508]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	497b      	ldr	r1, [pc, #492]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0320 	and.w	r3, r3, #32
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00a      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a4f8:	4b76      	ldr	r3, [pc, #472]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	699b      	ldr	r3, [r3, #24]
 800a506:	4973      	ldr	r1, [pc, #460]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00a      	beq.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a51a:	4b6e      	ldr	r3, [pc, #440]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a520:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	69db      	ldr	r3, [r3, #28]
 800a528:	496a      	ldr	r1, [pc, #424]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a52a:	4313      	orrs	r3, r2
 800a52c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00a      	beq.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a53c:	4b65      	ldr	r3, [pc, #404]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a542:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	4962      	ldr	r1, [pc, #392]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a54c:	4313      	orrs	r3, r2
 800a54e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00a      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a55e:	4b5d      	ldr	r3, [pc, #372]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a564:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	4959      	ldr	r1, [pc, #356]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00a      	beq.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a580:	4b54      	ldr	r3, [pc, #336]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a586:	f023 0203 	bic.w	r2, r3, #3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58e:	4951      	ldr	r1, [pc, #324]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a590:	4313      	orrs	r3, r2
 800a592:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00a      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a5a2:	4b4c      	ldr	r3, [pc, #304]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b0:	4948      	ldr	r1, [pc, #288]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d015      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a5c4:	4b43      	ldr	r3, [pc, #268]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d2:	4940      	ldr	r1, [pc, #256]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5e2:	d105      	bne.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a5e4:	4b3b      	ldr	r3, [pc, #236]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	4a3a      	ldr	r2, [pc, #232]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d015      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a5fc:	4b35      	ldr	r3, [pc, #212]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a602:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a60a:	4932      	ldr	r1, [pc, #200]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a60c:	4313      	orrs	r3, r2
 800a60e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a61a:	d105      	bne.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a61c:	4b2d      	ldr	r3, [pc, #180]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	4a2c      	ldr	r2, [pc, #176]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a626:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a630:	2b00      	cmp	r3, #0
 800a632:	d015      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a634:	4b27      	ldr	r3, [pc, #156]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a63a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a642:	4924      	ldr	r1, [pc, #144]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a644:	4313      	orrs	r3, r2
 800a646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a652:	d105      	bne.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a654:	4b1f      	ldr	r3, [pc, #124]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	4a1e      	ldr	r2, [pc, #120]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a65a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a65e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d015      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a66c:	4b19      	ldr	r3, [pc, #100]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a66e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a67a:	4916      	ldr	r1, [pc, #88]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a67c:	4313      	orrs	r3, r2
 800a67e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a68a:	d105      	bne.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a68c:	4b11      	ldr	r3, [pc, #68]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	4a10      	ldr	r2, [pc, #64]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a696:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d019      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a6a4:	4b0b      	ldr	r3, [pc, #44]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b2:	4908      	ldr	r1, [pc, #32]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6c2:	d109      	bne.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6c4:	4b03      	ldr	r3, [pc, #12]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	4a02      	ldr	r2, [pc, #8]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6ce:	60d3      	str	r3, [r2, #12]
 800a6d0:	e002      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a6d2:	bf00      	nop
 800a6d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d015      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a6e4:	4b29      	ldr	r3, [pc, #164]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a6e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6f2:	4926      	ldr	r1, [pc, #152]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a702:	d105      	bne.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a704:	4b21      	ldr	r3, [pc, #132]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	4a20      	ldr	r2, [pc, #128]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a70a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a70e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d015      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a71c:	4b1b      	ldr	r3, [pc, #108]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a722:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a72a:	4918      	ldr	r1, [pc, #96]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a72c:	4313      	orrs	r3, r2
 800a72e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a73a:	d105      	bne.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a73c:	4b13      	ldr	r3, [pc, #76]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	4a12      	ldr	r2, [pc, #72]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a746:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a750:	2b00      	cmp	r3, #0
 800a752:	d015      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a754:	4b0d      	ldr	r3, [pc, #52]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a756:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a75a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a762:	490a      	ldr	r1, [pc, #40]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a764:	4313      	orrs	r3, r2
 800a766:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a76e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a772:	d105      	bne.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a774:	4b05      	ldr	r3, [pc, #20]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	4a04      	ldr	r2, [pc, #16]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a77a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a77e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a780:	7cbb      	ldrb	r3, [r7, #18]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	40021000 	.word	0x40021000

0800a790 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e09d      	b.n	800a8de <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d108      	bne.n	800a7bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7b2:	d009      	beq.n	800a7c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	61da      	str	r2, [r3, #28]
 800a7ba:	e005      	b.n	800a7c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d106      	bne.n	800a7e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7f9 f8d2 	bl	800398c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a808:	d902      	bls.n	800a810 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	e002      	b.n	800a816 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a814:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a81e:	d007      	beq.n	800a830 <HAL_SPI_Init+0xa0>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a828:	d002      	beq.n	800a830 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a840:	431a      	orrs	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	f003 0302 	and.w	r3, r3, #2
 800a84a:	431a      	orrs	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	695b      	ldr	r3, [r3, #20]
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	431a      	orrs	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a85e:	431a      	orrs	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	69db      	ldr	r3, [r3, #28]
 800a864:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a868:	431a      	orrs	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a1b      	ldr	r3, [r3, #32]
 800a86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a872:	ea42 0103 	orr.w	r1, r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	430a      	orrs	r2, r1
 800a884:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	0c1b      	lsrs	r3, r3, #16
 800a88c:	f003 0204 	and.w	r2, r3, #4
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a894:	f003 0310 	and.w	r3, r3, #16
 800a898:	431a      	orrs	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a89e:	f003 0308 	and.w	r3, r3, #8
 800a8a2:	431a      	orrs	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a8ac:	ea42 0103 	orr.w	r1, r2, r3
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	430a      	orrs	r2, r1
 800a8bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	69da      	ldr	r2, [r3, #28]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e049      	b.n	800a98c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d106      	bne.n	800a912 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7f9 f8b3 	bl	8003a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2202      	movs	r2, #2
 800a916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	3304      	adds	r3, #4
 800a922:	4619      	mov	r1, r3
 800a924:	4610      	mov	r0, r2
 800a926:	f000 fafb 	bl	800af20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	68da      	ldr	r2, [r3, #12]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 0201 	bic.w	r2, r2, #1
 800a9aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6a1a      	ldr	r2, [r3, #32]
 800a9b2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10f      	bne.n	800a9dc <HAL_TIM_Base_Stop_IT+0x48>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6a1a      	ldr	r2, [r3, #32]
 800a9c2:	f244 4344 	movw	r3, #17476	; 0x4444
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d107      	bne.n	800a9dc <HAL_TIM_Base_Stop_IT+0x48>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f022 0201 	bic.w	r2, r2, #1
 800a9da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	f003 0302 	and.w	r3, r3, #2
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d020      	beq.n	800aa56 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f003 0302 	and.w	r3, r3, #2
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d01b      	beq.n	800aa56 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f06f 0202 	mvn.w	r2, #2
 800aa26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	699b      	ldr	r3, [r3, #24]
 800aa34:	f003 0303 	and.w	r3, r3, #3
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d003      	beq.n	800aa44 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fa51 	bl	800aee4 <HAL_TIM_IC_CaptureCallback>
 800aa42:	e005      	b.n	800aa50 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 fa43 	bl	800aed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fa54 	bl	800aef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	f003 0304 	and.w	r3, r3, #4
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d020      	beq.n	800aaa2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f003 0304 	and.w	r3, r3, #4
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d01b      	beq.n	800aaa2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f06f 0204 	mvn.w	r2, #4
 800aa72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2202      	movs	r2, #2
 800aa78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d003      	beq.n	800aa90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fa2b 	bl	800aee4 <HAL_TIM_IC_CaptureCallback>
 800aa8e:	e005      	b.n	800aa9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 fa1d 	bl	800aed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fa2e 	bl	800aef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	f003 0308 	and.w	r3, r3, #8
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d020      	beq.n	800aaee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f003 0308 	and.w	r3, r3, #8
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d01b      	beq.n	800aaee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f06f 0208 	mvn.w	r2, #8
 800aabe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2204      	movs	r2, #4
 800aac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	69db      	ldr	r3, [r3, #28]
 800aacc:	f003 0303 	and.w	r3, r3, #3
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d003      	beq.n	800aadc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 fa05 	bl	800aee4 <HAL_TIM_IC_CaptureCallback>
 800aada:	e005      	b.n	800aae8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 f9f7 	bl	800aed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fa08 	bl	800aef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	f003 0310 	and.w	r3, r3, #16
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d020      	beq.n	800ab3a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f003 0310 	and.w	r3, r3, #16
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d01b      	beq.n	800ab3a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f06f 0210 	mvn.w	r2, #16
 800ab0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2208      	movs	r2, #8
 800ab10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	69db      	ldr	r3, [r3, #28]
 800ab18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d003      	beq.n	800ab28 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f9df 	bl	800aee4 <HAL_TIM_IC_CaptureCallback>
 800ab26:	e005      	b.n	800ab34 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f9d1 	bl	800aed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 f9e2 	bl	800aef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f003 0301 	and.w	r3, r3, #1
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00c      	beq.n	800ab5e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d007      	beq.n	800ab5e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f06f 0201 	mvn.w	r2, #1
 800ab56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f9af 	bl	800aebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d104      	bne.n	800ab72 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00c      	beq.n	800ab8c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d007      	beq.n	800ab8c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ab84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fbba 	bl	800b300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00c      	beq.n	800abb0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d007      	beq.n	800abb0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fbb2 	bl	800b314 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00c      	beq.n	800abd4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d007      	beq.n	800abd4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800abcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 f99c 	bl	800af0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	f003 0320 	and.w	r3, r3, #32
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00c      	beq.n	800abf8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f003 0320 	and.w	r3, r3, #32
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d007      	beq.n	800abf8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f06f 0220 	mvn.w	r2, #32
 800abf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fb7a 	bl	800b2ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00c      	beq.n	800ac1c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d007      	beq.n	800ac1c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ac14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fb86 	bl	800b328 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00c      	beq.n	800ac40 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d007      	beq.n	800ac40 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ac38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fb7e 	bl	800b33c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00c      	beq.n	800ac64 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d007      	beq.n	800ac64 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ac5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fb76 	bl	800b350 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00c      	beq.n	800ac88 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d007      	beq.n	800ac88 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ac80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fb6e 	bl	800b364 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac88:	bf00      	nop
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d101      	bne.n	800acac <HAL_TIM_ConfigClockSource+0x1c>
 800aca8:	2302      	movs	r3, #2
 800acaa:	e0f6      	b.n	800ae9a <HAL_TIM_ConfigClockSource+0x20a>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2201      	movs	r2, #1
 800acb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2202      	movs	r2, #2
 800acb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800acca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800acce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a6f      	ldr	r2, [pc, #444]	; (800aea4 <HAL_TIM_ConfigClockSource+0x214>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	f000 80c1 	beq.w	800ae6e <HAL_TIM_ConfigClockSource+0x1de>
 800acec:	4a6d      	ldr	r2, [pc, #436]	; (800aea4 <HAL_TIM_ConfigClockSource+0x214>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	f200 80c6 	bhi.w	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800acf4:	4a6c      	ldr	r2, [pc, #432]	; (800aea8 <HAL_TIM_ConfigClockSource+0x218>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	f000 80b9 	beq.w	800ae6e <HAL_TIM_ConfigClockSource+0x1de>
 800acfc:	4a6a      	ldr	r2, [pc, #424]	; (800aea8 <HAL_TIM_ConfigClockSource+0x218>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	f200 80be 	bhi.w	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad04:	4a69      	ldr	r2, [pc, #420]	; (800aeac <HAL_TIM_ConfigClockSource+0x21c>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	f000 80b1 	beq.w	800ae6e <HAL_TIM_ConfigClockSource+0x1de>
 800ad0c:	4a67      	ldr	r2, [pc, #412]	; (800aeac <HAL_TIM_ConfigClockSource+0x21c>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	f200 80b6 	bhi.w	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad14:	4a66      	ldr	r2, [pc, #408]	; (800aeb0 <HAL_TIM_ConfigClockSource+0x220>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	f000 80a9 	beq.w	800ae6e <HAL_TIM_ConfigClockSource+0x1de>
 800ad1c:	4a64      	ldr	r2, [pc, #400]	; (800aeb0 <HAL_TIM_ConfigClockSource+0x220>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	f200 80ae 	bhi.w	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad24:	4a63      	ldr	r2, [pc, #396]	; (800aeb4 <HAL_TIM_ConfigClockSource+0x224>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	f000 80a1 	beq.w	800ae6e <HAL_TIM_ConfigClockSource+0x1de>
 800ad2c:	4a61      	ldr	r2, [pc, #388]	; (800aeb4 <HAL_TIM_ConfigClockSource+0x224>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	f200 80a6 	bhi.w	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad34:	4a60      	ldr	r2, [pc, #384]	; (800aeb8 <HAL_TIM_ConfigClockSource+0x228>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	f000 8099 	beq.w	800ae6e <HAL_TIM_ConfigClockSource+0x1de>
 800ad3c:	4a5e      	ldr	r2, [pc, #376]	; (800aeb8 <HAL_TIM_ConfigClockSource+0x228>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	f200 809e 	bhi.w	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ad48:	f000 8091 	beq.w	800ae6e <HAL_TIM_ConfigClockSource+0x1de>
 800ad4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ad50:	f200 8096 	bhi.w	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad58:	f000 8089 	beq.w	800ae6e <HAL_TIM_ConfigClockSource+0x1de>
 800ad5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad60:	f200 808e 	bhi.w	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad68:	d03e      	beq.n	800ade8 <HAL_TIM_ConfigClockSource+0x158>
 800ad6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad6e:	f200 8087 	bhi.w	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad76:	f000 8086 	beq.w	800ae86 <HAL_TIM_ConfigClockSource+0x1f6>
 800ad7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad7e:	d87f      	bhi.n	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad80:	2b70      	cmp	r3, #112	; 0x70
 800ad82:	d01a      	beq.n	800adba <HAL_TIM_ConfigClockSource+0x12a>
 800ad84:	2b70      	cmp	r3, #112	; 0x70
 800ad86:	d87b      	bhi.n	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad88:	2b60      	cmp	r3, #96	; 0x60
 800ad8a:	d050      	beq.n	800ae2e <HAL_TIM_ConfigClockSource+0x19e>
 800ad8c:	2b60      	cmp	r3, #96	; 0x60
 800ad8e:	d877      	bhi.n	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad90:	2b50      	cmp	r3, #80	; 0x50
 800ad92:	d03c      	beq.n	800ae0e <HAL_TIM_ConfigClockSource+0x17e>
 800ad94:	2b50      	cmp	r3, #80	; 0x50
 800ad96:	d873      	bhi.n	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad98:	2b40      	cmp	r3, #64	; 0x40
 800ad9a:	d058      	beq.n	800ae4e <HAL_TIM_ConfigClockSource+0x1be>
 800ad9c:	2b40      	cmp	r3, #64	; 0x40
 800ad9e:	d86f      	bhi.n	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ada0:	2b30      	cmp	r3, #48	; 0x30
 800ada2:	d064      	beq.n	800ae6e <HAL_TIM_ConfigClockSource+0x1de>
 800ada4:	2b30      	cmp	r3, #48	; 0x30
 800ada6:	d86b      	bhi.n	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800ada8:	2b20      	cmp	r3, #32
 800adaa:	d060      	beq.n	800ae6e <HAL_TIM_ConfigClockSource+0x1de>
 800adac:	2b20      	cmp	r3, #32
 800adae:	d867      	bhi.n	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d05c      	beq.n	800ae6e <HAL_TIM_ConfigClockSource+0x1de>
 800adb4:	2b10      	cmp	r3, #16
 800adb6:	d05a      	beq.n	800ae6e <HAL_TIM_ConfigClockSource+0x1de>
 800adb8:	e062      	b.n	800ae80 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800adca:	f000 f9d9 	bl	800b180 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800addc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68ba      	ldr	r2, [r7, #8]
 800ade4:	609a      	str	r2, [r3, #8]
      break;
 800ade6:	e04f      	b.n	800ae88 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800adf8:	f000 f9c2 	bl	800b180 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	689a      	ldr	r2, [r3, #8]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae0a:	609a      	str	r2, [r3, #8]
      break;
 800ae0c:	e03c      	b.n	800ae88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	f000 f934 	bl	800b088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2150      	movs	r1, #80	; 0x50
 800ae26:	4618      	mov	r0, r3
 800ae28:	f000 f98d 	bl	800b146 <TIM_ITRx_SetConfig>
      break;
 800ae2c:	e02c      	b.n	800ae88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f000 f953 	bl	800b0e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2160      	movs	r1, #96	; 0x60
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 f97d 	bl	800b146 <TIM_ITRx_SetConfig>
      break;
 800ae4c:	e01c      	b.n	800ae88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	f000 f914 	bl	800b088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2140      	movs	r1, #64	; 0x40
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 f96d 	bl	800b146 <TIM_ITRx_SetConfig>
      break;
 800ae6c:	e00c      	b.n	800ae88 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4619      	mov	r1, r3
 800ae78:	4610      	mov	r0, r2
 800ae7a:	f000 f964 	bl	800b146 <TIM_ITRx_SetConfig>
      break;
 800ae7e:	e003      	b.n	800ae88 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	73fb      	strb	r3, [r7, #15]
      break;
 800ae84:	e000      	b.n	800ae88 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800ae86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	00100070 	.word	0x00100070
 800aea8:	00100060 	.word	0x00100060
 800aeac:	00100050 	.word	0x00100050
 800aeb0:	00100040 	.word	0x00100040
 800aeb4:	00100030 	.word	0x00100030
 800aeb8:	00100020 	.word	0x00100020

0800aebc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aeec:	bf00      	nop
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af00:	bf00      	nop
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a4c      	ldr	r2, [pc, #304]	; (800b064 <TIM_Base_SetConfig+0x144>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d017      	beq.n	800af68 <TIM_Base_SetConfig+0x48>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af3e:	d013      	beq.n	800af68 <TIM_Base_SetConfig+0x48>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a49      	ldr	r2, [pc, #292]	; (800b068 <TIM_Base_SetConfig+0x148>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d00f      	beq.n	800af68 <TIM_Base_SetConfig+0x48>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a48      	ldr	r2, [pc, #288]	; (800b06c <TIM_Base_SetConfig+0x14c>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d00b      	beq.n	800af68 <TIM_Base_SetConfig+0x48>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a47      	ldr	r2, [pc, #284]	; (800b070 <TIM_Base_SetConfig+0x150>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d007      	beq.n	800af68 <TIM_Base_SetConfig+0x48>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a46      	ldr	r2, [pc, #280]	; (800b074 <TIM_Base_SetConfig+0x154>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d003      	beq.n	800af68 <TIM_Base_SetConfig+0x48>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a45      	ldr	r2, [pc, #276]	; (800b078 <TIM_Base_SetConfig+0x158>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d108      	bne.n	800af7a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	4313      	orrs	r3, r2
 800af78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a39      	ldr	r2, [pc, #228]	; (800b064 <TIM_Base_SetConfig+0x144>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d023      	beq.n	800afca <TIM_Base_SetConfig+0xaa>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af88:	d01f      	beq.n	800afca <TIM_Base_SetConfig+0xaa>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a36      	ldr	r2, [pc, #216]	; (800b068 <TIM_Base_SetConfig+0x148>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d01b      	beq.n	800afca <TIM_Base_SetConfig+0xaa>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a35      	ldr	r2, [pc, #212]	; (800b06c <TIM_Base_SetConfig+0x14c>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d017      	beq.n	800afca <TIM_Base_SetConfig+0xaa>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a34      	ldr	r2, [pc, #208]	; (800b070 <TIM_Base_SetConfig+0x150>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d013      	beq.n	800afca <TIM_Base_SetConfig+0xaa>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a33      	ldr	r2, [pc, #204]	; (800b074 <TIM_Base_SetConfig+0x154>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d00f      	beq.n	800afca <TIM_Base_SetConfig+0xaa>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a33      	ldr	r2, [pc, #204]	; (800b07c <TIM_Base_SetConfig+0x15c>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d00b      	beq.n	800afca <TIM_Base_SetConfig+0xaa>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4a32      	ldr	r2, [pc, #200]	; (800b080 <TIM_Base_SetConfig+0x160>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d007      	beq.n	800afca <TIM_Base_SetConfig+0xaa>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a31      	ldr	r2, [pc, #196]	; (800b084 <TIM_Base_SetConfig+0x164>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d003      	beq.n	800afca <TIM_Base_SetConfig+0xaa>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a2c      	ldr	r2, [pc, #176]	; (800b078 <TIM_Base_SetConfig+0x158>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d108      	bne.n	800afdc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	4313      	orrs	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	689a      	ldr	r2, [r3, #8]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a18      	ldr	r2, [pc, #96]	; (800b064 <TIM_Base_SetConfig+0x144>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d013      	beq.n	800b030 <TIM_Base_SetConfig+0x110>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a1a      	ldr	r2, [pc, #104]	; (800b074 <TIM_Base_SetConfig+0x154>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d00f      	beq.n	800b030 <TIM_Base_SetConfig+0x110>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a1a      	ldr	r2, [pc, #104]	; (800b07c <TIM_Base_SetConfig+0x15c>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d00b      	beq.n	800b030 <TIM_Base_SetConfig+0x110>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a19      	ldr	r2, [pc, #100]	; (800b080 <TIM_Base_SetConfig+0x160>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d007      	beq.n	800b030 <TIM_Base_SetConfig+0x110>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a18      	ldr	r2, [pc, #96]	; (800b084 <TIM_Base_SetConfig+0x164>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d003      	beq.n	800b030 <TIM_Base_SetConfig+0x110>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a13      	ldr	r2, [pc, #76]	; (800b078 <TIM_Base_SetConfig+0x158>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d103      	bne.n	800b038 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	691a      	ldr	r2, [r3, #16]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	f003 0301 	and.w	r3, r3, #1
 800b046:	2b01      	cmp	r3, #1
 800b048:	d105      	bne.n	800b056 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	f023 0201 	bic.w	r2, r3, #1
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	611a      	str	r2, [r3, #16]
  }
}
 800b056:	bf00      	nop
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	40012c00 	.word	0x40012c00
 800b068:	40000400 	.word	0x40000400
 800b06c:	40000800 	.word	0x40000800
 800b070:	40000c00 	.word	0x40000c00
 800b074:	40013400 	.word	0x40013400
 800b078:	40015000 	.word	0x40015000
 800b07c:	40014000 	.word	0x40014000
 800b080:	40014400 	.word	0x40014400
 800b084:	40014800 	.word	0x40014800

0800b088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b088:	b480      	push	{r7}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6a1b      	ldr	r3, [r3, #32]
 800b098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6a1b      	ldr	r3, [r3, #32]
 800b09e:	f023 0201 	bic.w	r2, r3, #1
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	011b      	lsls	r3, r3, #4
 800b0b8:	693a      	ldr	r2, [r7, #16]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f023 030a 	bic.w	r3, r3, #10
 800b0c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0c6:	697a      	ldr	r2, [r7, #20]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	693a      	ldr	r2, [r7, #16]
 800b0d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	621a      	str	r2, [r3, #32]
}
 800b0da:	bf00      	nop
 800b0dc:	371c      	adds	r7, #28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b087      	sub	sp, #28
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	60f8      	str	r0, [r7, #12]
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6a1b      	ldr	r3, [r3, #32]
 800b0fc:	f023 0210 	bic.w	r2, r3, #16
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	031b      	lsls	r3, r3, #12
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	4313      	orrs	r3, r2
 800b11a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b122:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	011b      	lsls	r3, r3, #4
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	697a      	ldr	r2, [r7, #20]
 800b138:	621a      	str	r2, [r3, #32]
}
 800b13a:	bf00      	nop
 800b13c:	371c      	adds	r7, #28
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b146:	b480      	push	{r7}
 800b148:	b085      	sub	sp, #20
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b15c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	4313      	orrs	r3, r2
 800b168:	f043 0307 	orr.w	r3, r3, #7
 800b16c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	609a      	str	r2, [r3, #8]
}
 800b174:	bf00      	nop
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b180:	b480      	push	{r7}
 800b182:	b087      	sub	sp, #28
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
 800b18c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b19a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	021a      	lsls	r2, r3, #8
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	697a      	ldr	r2, [r7, #20]
 800b1b2:	609a      	str	r2, [r3, #8]
}
 800b1b4:	bf00      	nop
 800b1b6:	371c      	adds	r7, #28
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d101      	bne.n	800b1d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1d4:	2302      	movs	r3, #2
 800b1d6:	e074      	b.n	800b2c2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a34      	ldr	r2, [pc, #208]	; (800b2d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d009      	beq.n	800b216 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a33      	ldr	r2, [pc, #204]	; (800b2d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d004      	beq.n	800b216 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a31      	ldr	r2, [pc, #196]	; (800b2d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d108      	bne.n	800b228 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b21c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	68fa      	ldr	r2, [r7, #12]
 800b224:	4313      	orrs	r3, r2
 800b226:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b22e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a21      	ldr	r2, [pc, #132]	; (800b2d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d022      	beq.n	800b296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b258:	d01d      	beq.n	800b296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a1f      	ldr	r2, [pc, #124]	; (800b2dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d018      	beq.n	800b296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a1d      	ldr	r2, [pc, #116]	; (800b2e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d013      	beq.n	800b296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a1c      	ldr	r2, [pc, #112]	; (800b2e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d00e      	beq.n	800b296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a15      	ldr	r2, [pc, #84]	; (800b2d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d009      	beq.n	800b296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a18      	ldr	r2, [pc, #96]	; (800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d004      	beq.n	800b296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a11      	ldr	r2, [pc, #68]	; (800b2d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d10c      	bne.n	800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b29c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	40012c00 	.word	0x40012c00
 800b2d4:	40013400 	.word	0x40013400
 800b2d8:	40015000 	.word	0x40015000
 800b2dc:	40000400 	.word	0x40000400
 800b2e0:	40000800 	.word	0x40000800
 800b2e4:	40000c00 	.word	0x40000c00
 800b2e8:	40014000 	.word	0x40014000

0800b2ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2f4:	bf00      	nop
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b358:	bf00      	nop
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b37c:	b08c      	sub	sp, #48	; 0x30
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	689a      	ldr	r2, [r3, #8]
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	431a      	orrs	r2, r3
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	695b      	ldr	r3, [r3, #20]
 800b396:	431a      	orrs	r2, r3
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	69db      	ldr	r3, [r3, #28]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	4baa      	ldr	r3, [pc, #680]	; (800b650 <UART_SetConfig+0x2d8>)
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	697a      	ldr	r2, [r7, #20]
 800b3ac:	6812      	ldr	r2, [r2, #0]
 800b3ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3b0:	430b      	orrs	r3, r1
 800b3b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	68da      	ldr	r2, [r3, #12]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	430a      	orrs	r2, r1
 800b3c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a9f      	ldr	r2, [pc, #636]	; (800b654 <UART_SetConfig+0x2dc>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d004      	beq.n	800b3e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	6a1b      	ldr	r3, [r3, #32]
 800b3de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b3ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	6812      	ldr	r2, [r2, #0]
 800b3f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3f8:	430b      	orrs	r3, r1
 800b3fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b402:	f023 010f 	bic.w	r1, r3, #15
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	430a      	orrs	r2, r1
 800b410:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a90      	ldr	r2, [pc, #576]	; (800b658 <UART_SetConfig+0x2e0>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d125      	bne.n	800b468 <UART_SetConfig+0xf0>
 800b41c:	4b8f      	ldr	r3, [pc, #572]	; (800b65c <UART_SetConfig+0x2e4>)
 800b41e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b422:	f003 0303 	and.w	r3, r3, #3
 800b426:	2b03      	cmp	r3, #3
 800b428:	d81a      	bhi.n	800b460 <UART_SetConfig+0xe8>
 800b42a:	a201      	add	r2, pc, #4	; (adr r2, 800b430 <UART_SetConfig+0xb8>)
 800b42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b430:	0800b441 	.word	0x0800b441
 800b434:	0800b451 	.word	0x0800b451
 800b438:	0800b449 	.word	0x0800b449
 800b43c:	0800b459 	.word	0x0800b459
 800b440:	2301      	movs	r3, #1
 800b442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b446:	e116      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b448:	2302      	movs	r3, #2
 800b44a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b44e:	e112      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b450:	2304      	movs	r3, #4
 800b452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b456:	e10e      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b458:	2308      	movs	r3, #8
 800b45a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b45e:	e10a      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b460:	2310      	movs	r3, #16
 800b462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b466:	e106      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a7c      	ldr	r2, [pc, #496]	; (800b660 <UART_SetConfig+0x2e8>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d138      	bne.n	800b4e4 <UART_SetConfig+0x16c>
 800b472:	4b7a      	ldr	r3, [pc, #488]	; (800b65c <UART_SetConfig+0x2e4>)
 800b474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b478:	f003 030c 	and.w	r3, r3, #12
 800b47c:	2b0c      	cmp	r3, #12
 800b47e:	d82d      	bhi.n	800b4dc <UART_SetConfig+0x164>
 800b480:	a201      	add	r2, pc, #4	; (adr r2, 800b488 <UART_SetConfig+0x110>)
 800b482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b486:	bf00      	nop
 800b488:	0800b4bd 	.word	0x0800b4bd
 800b48c:	0800b4dd 	.word	0x0800b4dd
 800b490:	0800b4dd 	.word	0x0800b4dd
 800b494:	0800b4dd 	.word	0x0800b4dd
 800b498:	0800b4cd 	.word	0x0800b4cd
 800b49c:	0800b4dd 	.word	0x0800b4dd
 800b4a0:	0800b4dd 	.word	0x0800b4dd
 800b4a4:	0800b4dd 	.word	0x0800b4dd
 800b4a8:	0800b4c5 	.word	0x0800b4c5
 800b4ac:	0800b4dd 	.word	0x0800b4dd
 800b4b0:	0800b4dd 	.word	0x0800b4dd
 800b4b4:	0800b4dd 	.word	0x0800b4dd
 800b4b8:	0800b4d5 	.word	0x0800b4d5
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4c2:	e0d8      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ca:	e0d4      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b4cc:	2304      	movs	r3, #4
 800b4ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4d2:	e0d0      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b4d4:	2308      	movs	r3, #8
 800b4d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4da:	e0cc      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b4dc:	2310      	movs	r3, #16
 800b4de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4e2:	e0c8      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a5e      	ldr	r2, [pc, #376]	; (800b664 <UART_SetConfig+0x2ec>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d125      	bne.n	800b53a <UART_SetConfig+0x1c2>
 800b4ee:	4b5b      	ldr	r3, [pc, #364]	; (800b65c <UART_SetConfig+0x2e4>)
 800b4f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b4f8:	2b30      	cmp	r3, #48	; 0x30
 800b4fa:	d016      	beq.n	800b52a <UART_SetConfig+0x1b2>
 800b4fc:	2b30      	cmp	r3, #48	; 0x30
 800b4fe:	d818      	bhi.n	800b532 <UART_SetConfig+0x1ba>
 800b500:	2b20      	cmp	r3, #32
 800b502:	d00a      	beq.n	800b51a <UART_SetConfig+0x1a2>
 800b504:	2b20      	cmp	r3, #32
 800b506:	d814      	bhi.n	800b532 <UART_SetConfig+0x1ba>
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d002      	beq.n	800b512 <UART_SetConfig+0x19a>
 800b50c:	2b10      	cmp	r3, #16
 800b50e:	d008      	beq.n	800b522 <UART_SetConfig+0x1aa>
 800b510:	e00f      	b.n	800b532 <UART_SetConfig+0x1ba>
 800b512:	2300      	movs	r3, #0
 800b514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b518:	e0ad      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b51a:	2302      	movs	r3, #2
 800b51c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b520:	e0a9      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b522:	2304      	movs	r3, #4
 800b524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b528:	e0a5      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b52a:	2308      	movs	r3, #8
 800b52c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b530:	e0a1      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b532:	2310      	movs	r3, #16
 800b534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b538:	e09d      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a4a      	ldr	r2, [pc, #296]	; (800b668 <UART_SetConfig+0x2f0>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d125      	bne.n	800b590 <UART_SetConfig+0x218>
 800b544:	4b45      	ldr	r3, [pc, #276]	; (800b65c <UART_SetConfig+0x2e4>)
 800b546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b54a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b54e:	2bc0      	cmp	r3, #192	; 0xc0
 800b550:	d016      	beq.n	800b580 <UART_SetConfig+0x208>
 800b552:	2bc0      	cmp	r3, #192	; 0xc0
 800b554:	d818      	bhi.n	800b588 <UART_SetConfig+0x210>
 800b556:	2b80      	cmp	r3, #128	; 0x80
 800b558:	d00a      	beq.n	800b570 <UART_SetConfig+0x1f8>
 800b55a:	2b80      	cmp	r3, #128	; 0x80
 800b55c:	d814      	bhi.n	800b588 <UART_SetConfig+0x210>
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d002      	beq.n	800b568 <UART_SetConfig+0x1f0>
 800b562:	2b40      	cmp	r3, #64	; 0x40
 800b564:	d008      	beq.n	800b578 <UART_SetConfig+0x200>
 800b566:	e00f      	b.n	800b588 <UART_SetConfig+0x210>
 800b568:	2300      	movs	r3, #0
 800b56a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b56e:	e082      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b570:	2302      	movs	r3, #2
 800b572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b576:	e07e      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b578:	2304      	movs	r3, #4
 800b57a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b57e:	e07a      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b580:	2308      	movs	r3, #8
 800b582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b586:	e076      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b588:	2310      	movs	r3, #16
 800b58a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b58e:	e072      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a35      	ldr	r2, [pc, #212]	; (800b66c <UART_SetConfig+0x2f4>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d12a      	bne.n	800b5f0 <UART_SetConfig+0x278>
 800b59a:	4b30      	ldr	r3, [pc, #192]	; (800b65c <UART_SetConfig+0x2e4>)
 800b59c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5a8:	d01a      	beq.n	800b5e0 <UART_SetConfig+0x268>
 800b5aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5ae:	d81b      	bhi.n	800b5e8 <UART_SetConfig+0x270>
 800b5b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5b4:	d00c      	beq.n	800b5d0 <UART_SetConfig+0x258>
 800b5b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5ba:	d815      	bhi.n	800b5e8 <UART_SetConfig+0x270>
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d003      	beq.n	800b5c8 <UART_SetConfig+0x250>
 800b5c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5c4:	d008      	beq.n	800b5d8 <UART_SetConfig+0x260>
 800b5c6:	e00f      	b.n	800b5e8 <UART_SetConfig+0x270>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5ce:	e052      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5d6:	e04e      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b5d8:	2304      	movs	r3, #4
 800b5da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5de:	e04a      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b5e0:	2308      	movs	r3, #8
 800b5e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5e6:	e046      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b5e8:	2310      	movs	r3, #16
 800b5ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5ee:	e042      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a17      	ldr	r2, [pc, #92]	; (800b654 <UART_SetConfig+0x2dc>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d13a      	bne.n	800b670 <UART_SetConfig+0x2f8>
 800b5fa:	4b18      	ldr	r3, [pc, #96]	; (800b65c <UART_SetConfig+0x2e4>)
 800b5fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b600:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b608:	d01a      	beq.n	800b640 <UART_SetConfig+0x2c8>
 800b60a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b60e:	d81b      	bhi.n	800b648 <UART_SetConfig+0x2d0>
 800b610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b614:	d00c      	beq.n	800b630 <UART_SetConfig+0x2b8>
 800b616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b61a:	d815      	bhi.n	800b648 <UART_SetConfig+0x2d0>
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d003      	beq.n	800b628 <UART_SetConfig+0x2b0>
 800b620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b624:	d008      	beq.n	800b638 <UART_SetConfig+0x2c0>
 800b626:	e00f      	b.n	800b648 <UART_SetConfig+0x2d0>
 800b628:	2300      	movs	r3, #0
 800b62a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b62e:	e022      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b630:	2302      	movs	r3, #2
 800b632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b636:	e01e      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b638:	2304      	movs	r3, #4
 800b63a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b63e:	e01a      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b640:	2308      	movs	r3, #8
 800b642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b646:	e016      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b648:	2310      	movs	r3, #16
 800b64a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b64e:	e012      	b.n	800b676 <UART_SetConfig+0x2fe>
 800b650:	cfff69f3 	.word	0xcfff69f3
 800b654:	40008000 	.word	0x40008000
 800b658:	40013800 	.word	0x40013800
 800b65c:	40021000 	.word	0x40021000
 800b660:	40004400 	.word	0x40004400
 800b664:	40004800 	.word	0x40004800
 800b668:	40004c00 	.word	0x40004c00
 800b66c:	40005000 	.word	0x40005000
 800b670:	2310      	movs	r3, #16
 800b672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4aae      	ldr	r2, [pc, #696]	; (800b934 <UART_SetConfig+0x5bc>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	f040 8097 	bne.w	800b7b0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b682:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b686:	2b08      	cmp	r3, #8
 800b688:	d823      	bhi.n	800b6d2 <UART_SetConfig+0x35a>
 800b68a:	a201      	add	r2, pc, #4	; (adr r2, 800b690 <UART_SetConfig+0x318>)
 800b68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b690:	0800b6b5 	.word	0x0800b6b5
 800b694:	0800b6d3 	.word	0x0800b6d3
 800b698:	0800b6bd 	.word	0x0800b6bd
 800b69c:	0800b6d3 	.word	0x0800b6d3
 800b6a0:	0800b6c3 	.word	0x0800b6c3
 800b6a4:	0800b6d3 	.word	0x0800b6d3
 800b6a8:	0800b6d3 	.word	0x0800b6d3
 800b6ac:	0800b6d3 	.word	0x0800b6d3
 800b6b0:	0800b6cb 	.word	0x0800b6cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6b4:	f7fe fd80 	bl	800a1b8 <HAL_RCC_GetPCLK1Freq>
 800b6b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6ba:	e010      	b.n	800b6de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6bc:	4b9e      	ldr	r3, [pc, #632]	; (800b938 <UART_SetConfig+0x5c0>)
 800b6be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6c0:	e00d      	b.n	800b6de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6c2:	f7fe fd0b 	bl	800a0dc <HAL_RCC_GetSysClockFreq>
 800b6c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6c8:	e009      	b.n	800b6de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6d0:	e005      	b.n	800b6de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b6dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 8130 	beq.w	800b946 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ea:	4a94      	ldr	r2, [pc, #592]	; (800b93c <UART_SetConfig+0x5c4>)
 800b6ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	4613      	mov	r3, r2
 800b700:	005b      	lsls	r3, r3, #1
 800b702:	4413      	add	r3, r2
 800b704:	69ba      	ldr	r2, [r7, #24]
 800b706:	429a      	cmp	r2, r3
 800b708:	d305      	bcc.n	800b716 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b710:	69ba      	ldr	r2, [r7, #24]
 800b712:	429a      	cmp	r2, r3
 800b714:	d903      	bls.n	800b71e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b71c:	e113      	b.n	800b946 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b720:	2200      	movs	r2, #0
 800b722:	60bb      	str	r3, [r7, #8]
 800b724:	60fa      	str	r2, [r7, #12]
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72a:	4a84      	ldr	r2, [pc, #528]	; (800b93c <UART_SetConfig+0x5c4>)
 800b72c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b730:	b29b      	uxth	r3, r3
 800b732:	2200      	movs	r2, #0
 800b734:	603b      	str	r3, [r7, #0]
 800b736:	607a      	str	r2, [r7, #4]
 800b738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b73c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b740:	f7f4 fd6a 	bl	8000218 <__aeabi_uldivmod>
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	4610      	mov	r0, r2
 800b74a:	4619      	mov	r1, r3
 800b74c:	f04f 0200 	mov.w	r2, #0
 800b750:	f04f 0300 	mov.w	r3, #0
 800b754:	020b      	lsls	r3, r1, #8
 800b756:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b75a:	0202      	lsls	r2, r0, #8
 800b75c:	6979      	ldr	r1, [r7, #20]
 800b75e:	6849      	ldr	r1, [r1, #4]
 800b760:	0849      	lsrs	r1, r1, #1
 800b762:	2000      	movs	r0, #0
 800b764:	460c      	mov	r4, r1
 800b766:	4605      	mov	r5, r0
 800b768:	eb12 0804 	adds.w	r8, r2, r4
 800b76c:	eb43 0905 	adc.w	r9, r3, r5
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	469a      	mov	sl, r3
 800b778:	4693      	mov	fp, r2
 800b77a:	4652      	mov	r2, sl
 800b77c:	465b      	mov	r3, fp
 800b77e:	4640      	mov	r0, r8
 800b780:	4649      	mov	r1, r9
 800b782:	f7f4 fd49 	bl	8000218 <__aeabi_uldivmod>
 800b786:	4602      	mov	r2, r0
 800b788:	460b      	mov	r3, r1
 800b78a:	4613      	mov	r3, r2
 800b78c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b78e:	6a3b      	ldr	r3, [r7, #32]
 800b790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b794:	d308      	bcc.n	800b7a8 <UART_SetConfig+0x430>
 800b796:	6a3b      	ldr	r3, [r7, #32]
 800b798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b79c:	d204      	bcs.n	800b7a8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	6a3a      	ldr	r2, [r7, #32]
 800b7a4:	60da      	str	r2, [r3, #12]
 800b7a6:	e0ce      	b.n	800b946 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b7ae:	e0ca      	b.n	800b946 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	69db      	ldr	r3, [r3, #28]
 800b7b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7b8:	d166      	bne.n	800b888 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b7ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b7be:	2b08      	cmp	r3, #8
 800b7c0:	d827      	bhi.n	800b812 <UART_SetConfig+0x49a>
 800b7c2:	a201      	add	r2, pc, #4	; (adr r2, 800b7c8 <UART_SetConfig+0x450>)
 800b7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c8:	0800b7ed 	.word	0x0800b7ed
 800b7cc:	0800b7f5 	.word	0x0800b7f5
 800b7d0:	0800b7fd 	.word	0x0800b7fd
 800b7d4:	0800b813 	.word	0x0800b813
 800b7d8:	0800b803 	.word	0x0800b803
 800b7dc:	0800b813 	.word	0x0800b813
 800b7e0:	0800b813 	.word	0x0800b813
 800b7e4:	0800b813 	.word	0x0800b813
 800b7e8:	0800b80b 	.word	0x0800b80b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7ec:	f7fe fce4 	bl	800a1b8 <HAL_RCC_GetPCLK1Freq>
 800b7f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7f2:	e014      	b.n	800b81e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7f4:	f7fe fcf6 	bl	800a1e4 <HAL_RCC_GetPCLK2Freq>
 800b7f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7fa:	e010      	b.n	800b81e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7fc:	4b4e      	ldr	r3, [pc, #312]	; (800b938 <UART_SetConfig+0x5c0>)
 800b7fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b800:	e00d      	b.n	800b81e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b802:	f7fe fc6b 	bl	800a0dc <HAL_RCC_GetSysClockFreq>
 800b806:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b808:	e009      	b.n	800b81e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b80a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b80e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b810:	e005      	b.n	800b81e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b812:	2300      	movs	r3, #0
 800b814:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b816:	2301      	movs	r3, #1
 800b818:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b81c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b820:	2b00      	cmp	r3, #0
 800b822:	f000 8090 	beq.w	800b946 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82a:	4a44      	ldr	r2, [pc, #272]	; (800b93c <UART_SetConfig+0x5c4>)
 800b82c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b830:	461a      	mov	r2, r3
 800b832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b834:	fbb3 f3f2 	udiv	r3, r3, r2
 800b838:	005a      	lsls	r2, r3, #1
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	085b      	lsrs	r3, r3, #1
 800b840:	441a      	add	r2, r3
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	fbb2 f3f3 	udiv	r3, r2, r3
 800b84a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b84c:	6a3b      	ldr	r3, [r7, #32]
 800b84e:	2b0f      	cmp	r3, #15
 800b850:	d916      	bls.n	800b880 <UART_SetConfig+0x508>
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b858:	d212      	bcs.n	800b880 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b85a:	6a3b      	ldr	r3, [r7, #32]
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	f023 030f 	bic.w	r3, r3, #15
 800b862:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b864:	6a3b      	ldr	r3, [r7, #32]
 800b866:	085b      	lsrs	r3, r3, #1
 800b868:	b29b      	uxth	r3, r3
 800b86a:	f003 0307 	and.w	r3, r3, #7
 800b86e:	b29a      	uxth	r2, r3
 800b870:	8bfb      	ldrh	r3, [r7, #30]
 800b872:	4313      	orrs	r3, r2
 800b874:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	8bfa      	ldrh	r2, [r7, #30]
 800b87c:	60da      	str	r2, [r3, #12]
 800b87e:	e062      	b.n	800b946 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b886:	e05e      	b.n	800b946 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b888:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b88c:	2b08      	cmp	r3, #8
 800b88e:	d828      	bhi.n	800b8e2 <UART_SetConfig+0x56a>
 800b890:	a201      	add	r2, pc, #4	; (adr r2, 800b898 <UART_SetConfig+0x520>)
 800b892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b896:	bf00      	nop
 800b898:	0800b8bd 	.word	0x0800b8bd
 800b89c:	0800b8c5 	.word	0x0800b8c5
 800b8a0:	0800b8cd 	.word	0x0800b8cd
 800b8a4:	0800b8e3 	.word	0x0800b8e3
 800b8a8:	0800b8d3 	.word	0x0800b8d3
 800b8ac:	0800b8e3 	.word	0x0800b8e3
 800b8b0:	0800b8e3 	.word	0x0800b8e3
 800b8b4:	0800b8e3 	.word	0x0800b8e3
 800b8b8:	0800b8db 	.word	0x0800b8db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8bc:	f7fe fc7c 	bl	800a1b8 <HAL_RCC_GetPCLK1Freq>
 800b8c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8c2:	e014      	b.n	800b8ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8c4:	f7fe fc8e 	bl	800a1e4 <HAL_RCC_GetPCLK2Freq>
 800b8c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8ca:	e010      	b.n	800b8ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8cc:	4b1a      	ldr	r3, [pc, #104]	; (800b938 <UART_SetConfig+0x5c0>)
 800b8ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b8d0:	e00d      	b.n	800b8ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8d2:	f7fe fc03 	bl	800a0dc <HAL_RCC_GetSysClockFreq>
 800b8d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8d8:	e009      	b.n	800b8ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b8e0:	e005      	b.n	800b8ee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b8ec:	bf00      	nop
    }

    if (pclk != 0U)
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d028      	beq.n	800b946 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f8:	4a10      	ldr	r2, [pc, #64]	; (800b93c <UART_SetConfig+0x5c4>)
 800b8fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8fe:	461a      	mov	r2, r3
 800b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b902:	fbb3 f2f2 	udiv	r2, r3, r2
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	085b      	lsrs	r3, r3, #1
 800b90c:	441a      	add	r2, r3
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	fbb2 f3f3 	udiv	r3, r2, r3
 800b916:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	2b0f      	cmp	r3, #15
 800b91c:	d910      	bls.n	800b940 <UART_SetConfig+0x5c8>
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b924:	d20c      	bcs.n	800b940 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b926:	6a3b      	ldr	r3, [r7, #32]
 800b928:	b29a      	uxth	r2, r3
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	60da      	str	r2, [r3, #12]
 800b930:	e009      	b.n	800b946 <UART_SetConfig+0x5ce>
 800b932:	bf00      	nop
 800b934:	40008000 	.word	0x40008000
 800b938:	00f42400 	.word	0x00f42400
 800b93c:	0800d0a8 	.word	0x0800d0a8
      }
      else
      {
        ret = HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2201      	movs	r2, #1
 800b94a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	2201      	movs	r2, #1
 800b952:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	2200      	movs	r2, #0
 800b95a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	2200      	movs	r2, #0
 800b960:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b962:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b966:	4618      	mov	r0, r3
 800b968:	3730      	adds	r7, #48	; 0x30
 800b96a:	46bd      	mov	sp, r7
 800b96c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b97c:	f003 0308 	and.w	r3, r3, #8
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00a      	beq.n	800b99a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	430a      	orrs	r2, r1
 800b998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99e:	f003 0301 	and.w	r3, r3, #1
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00a      	beq.n	800b9bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	430a      	orrs	r2, r1
 800b9ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c0:	f003 0302 	and.w	r3, r3, #2
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d00a      	beq.n	800b9de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	430a      	orrs	r2, r1
 800b9dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e2:	f003 0304 	and.w	r3, r3, #4
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00a      	beq.n	800ba00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	430a      	orrs	r2, r1
 800b9fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba04:	f003 0310 	and.w	r3, r3, #16
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00a      	beq.n	800ba22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	430a      	orrs	r2, r1
 800ba20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba26:	f003 0320 	and.w	r3, r3, #32
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00a      	beq.n	800ba44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	430a      	orrs	r2, r1
 800ba42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d01a      	beq.n	800ba86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	430a      	orrs	r2, r1
 800ba64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba6e:	d10a      	bne.n	800ba86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	430a      	orrs	r2, r1
 800ba84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00a      	beq.n	800baa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	430a      	orrs	r2, r1
 800baa6:	605a      	str	r2, [r3, #4]
  }
}
 800baa8:	bf00      	nop
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b098      	sub	sp, #96	; 0x60
 800bab8:	af02      	add	r7, sp, #8
 800baba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bac4:	f7f8 fb20 	bl	8004108 <HAL_GetTick>
 800bac8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0308 	and.w	r3, r3, #8
 800bad4:	2b08      	cmp	r3, #8
 800bad6:	d12f      	bne.n	800bb38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bae0:	2200      	movs	r2, #0
 800bae2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 f88e 	bl	800bc08 <UART_WaitOnFlagUntilTimeout>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d022      	beq.n	800bb38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafa:	e853 3f00 	ldrex	r3, [r3]
 800bafe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb06:	653b      	str	r3, [r7, #80]	; 0x50
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb10:	647b      	str	r3, [r7, #68]	; 0x44
 800bb12:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb18:	e841 2300 	strex	r3, r2, [r1]
 800bb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1e6      	bne.n	800baf2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2220      	movs	r2, #32
 800bb28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb34:	2303      	movs	r3, #3
 800bb36:	e063      	b.n	800bc00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f003 0304 	and.w	r3, r3, #4
 800bb42:	2b04      	cmp	r3, #4
 800bb44:	d149      	bne.n	800bbda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 f857 	bl	800bc08 <UART_WaitOnFlagUntilTimeout>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d03c      	beq.n	800bbda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb68:	e853 3f00 	ldrex	r3, [r3]
 800bb6c:	623b      	str	r3, [r7, #32]
   return(result);
 800bb6e:	6a3b      	ldr	r3, [r7, #32]
 800bb70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb7e:	633b      	str	r3, [r7, #48]	; 0x30
 800bb80:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb86:	e841 2300 	strex	r3, r2, [r1]
 800bb8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1e6      	bne.n	800bb60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	3308      	adds	r3, #8
 800bb98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	e853 3f00 	ldrex	r3, [r3]
 800bba0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f023 0301 	bic.w	r3, r3, #1
 800bba8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	3308      	adds	r3, #8
 800bbb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbb2:	61fa      	str	r2, [r7, #28]
 800bbb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb6:	69b9      	ldr	r1, [r7, #24]
 800bbb8:	69fa      	ldr	r2, [r7, #28]
 800bbba:	e841 2300 	strex	r3, r2, [r1]
 800bbbe:	617b      	str	r3, [r7, #20]
   return(result);
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1e5      	bne.n	800bb92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2220      	movs	r2, #32
 800bbca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbd6:	2303      	movs	r3, #3
 800bbd8:	e012      	b.n	800bc00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2220      	movs	r2, #32
 800bbde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2220      	movs	r2, #32
 800bbe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3758      	adds	r7, #88	; 0x58
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	603b      	str	r3, [r7, #0]
 800bc14:	4613      	mov	r3, r2
 800bc16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc18:	e04f      	b.n	800bcba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc20:	d04b      	beq.n	800bcba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc22:	f7f8 fa71 	bl	8004108 <HAL_GetTick>
 800bc26:	4602      	mov	r2, r0
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	1ad3      	subs	r3, r2, r3
 800bc2c:	69ba      	ldr	r2, [r7, #24]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d302      	bcc.n	800bc38 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	e04e      	b.n	800bcda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f003 0304 	and.w	r3, r3, #4
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d037      	beq.n	800bcba <UART_WaitOnFlagUntilTimeout+0xb2>
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2b80      	cmp	r3, #128	; 0x80
 800bc4e:	d034      	beq.n	800bcba <UART_WaitOnFlagUntilTimeout+0xb2>
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	2b40      	cmp	r3, #64	; 0x40
 800bc54:	d031      	beq.n	800bcba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	69db      	ldr	r3, [r3, #28]
 800bc5c:	f003 0308 	and.w	r3, r3, #8
 800bc60:	2b08      	cmp	r3, #8
 800bc62:	d110      	bne.n	800bc86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2208      	movs	r2, #8
 800bc6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc6c:	68f8      	ldr	r0, [r7, #12]
 800bc6e:	f000 f838 	bl	800bce2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2208      	movs	r2, #8
 800bc76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	e029      	b.n	800bcda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	69db      	ldr	r3, [r3, #28]
 800bc8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc94:	d111      	bne.n	800bcba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f000 f81e 	bl	800bce2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2220      	movs	r2, #32
 800bcaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e00f      	b.n	800bcda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	69da      	ldr	r2, [r3, #28]
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	4013      	ands	r3, r2
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	bf0c      	ite	eq
 800bcca:	2301      	moveq	r3, #1
 800bccc:	2300      	movne	r3, #0
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	79fb      	ldrb	r3, [r7, #7]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d0a0      	beq.n	800bc1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bce2:	b480      	push	{r7}
 800bce4:	b095      	sub	sp, #84	; 0x54
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf2:	e853 3f00 	ldrex	r3, [r3]
 800bcf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bcfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	461a      	mov	r2, r3
 800bd06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd08:	643b      	str	r3, [r7, #64]	; 0x40
 800bd0a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd10:	e841 2300 	strex	r3, r2, [r1]
 800bd14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1e6      	bne.n	800bcea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	3308      	adds	r3, #8
 800bd22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd24:	6a3b      	ldr	r3, [r7, #32]
 800bd26:	e853 3f00 	ldrex	r3, [r3]
 800bd2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd32:	f023 0301 	bic.w	r3, r3, #1
 800bd36:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	3308      	adds	r3, #8
 800bd3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd40:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd48:	e841 2300 	strex	r3, r2, [r1]
 800bd4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1e3      	bne.n	800bd1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d118      	bne.n	800bd8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	e853 3f00 	ldrex	r3, [r3]
 800bd68:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	f023 0310 	bic.w	r3, r3, #16
 800bd70:	647b      	str	r3, [r7, #68]	; 0x44
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	461a      	mov	r2, r3
 800bd78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd7a:	61bb      	str	r3, [r7, #24]
 800bd7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7e:	6979      	ldr	r1, [r7, #20]
 800bd80:	69ba      	ldr	r2, [r7, #24]
 800bd82:	e841 2300 	strex	r3, r2, [r1]
 800bd86:	613b      	str	r3, [r7, #16]
   return(result);
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d1e6      	bne.n	800bd5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2220      	movs	r2, #32
 800bd92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bda2:	bf00      	nop
 800bda4:	3754      	adds	r7, #84	; 0x54
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr

0800bdae <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b086      	sub	sp, #24
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	60f8      	str	r0, [r7, #12]
 800bdb6:	60b9      	str	r1, [r7, #8]
 800bdb8:	607a      	str	r2, [r7, #4]
 800bdba:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d101      	bne.n	800bdc6 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e058      	b.n	800be78 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d106      	bne.n	800bdde <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800bdd8:	68f8      	ldr	r0, [r7, #12]
 800bdda:	f7f7 fd5f 	bl	800389c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2224      	movs	r2, #36	; 0x24
 800bde2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f022 0201 	bic.w	r2, r2, #1
 800bdf4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d002      	beq.n	800be04 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	f7ff fdb6 	bl	800b970 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f7ff fab7 	bl	800b378 <UART_SetConfig>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d101      	bne.n	800be14 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	e031      	b.n	800be78 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	689a      	ldr	r2, [r3, #8]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be22:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	430a      	orrs	r2, r1
 800be36:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	055b      	lsls	r3, r3, #21
 800be3c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	041b      	lsls	r3, r3, #16
 800be42:	697a      	ldr	r2, [r7, #20]
 800be44:	4313      	orrs	r3, r2
 800be46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800be52:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	6812      	ldr	r2, [r2, #0]
 800be5a:	6979      	ldr	r1, [r7, #20]
 800be5c:	430b      	orrs	r3, r1
 800be5e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f042 0201 	orr.w	r2, r2, #1
 800be6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f7ff fe1f 	bl	800bab4 <UART_CheckIdleState>
 800be76:	4603      	mov	r3, r0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3718      	adds	r7, #24
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d101      	bne.n	800be96 <HAL_UARTEx_DisableFifoMode+0x16>
 800be92:	2302      	movs	r3, #2
 800be94:	e027      	b.n	800bee6 <HAL_UARTEx_DisableFifoMode+0x66>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2224      	movs	r2, #36	; 0x24
 800bea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f022 0201 	bic.w	r2, r2, #1
 800bebc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bec4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	68fa      	ldr	r2, [r7, #12]
 800bed2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2220      	movs	r2, #32
 800bed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3714      	adds	r7, #20
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr

0800bef2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b084      	sub	sp, #16
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
 800befa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d101      	bne.n	800bf0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf06:	2302      	movs	r3, #2
 800bf08:	e02d      	b.n	800bf66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2224      	movs	r2, #36	; 0x24
 800bf16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f022 0201 	bic.w	r2, r2, #1
 800bf30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	683a      	ldr	r2, [r7, #0]
 800bf42:	430a      	orrs	r2, r1
 800bf44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f850 	bl	800bfec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2220      	movs	r2, #32
 800bf58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b084      	sub	sp, #16
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
 800bf76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d101      	bne.n	800bf86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf82:	2302      	movs	r3, #2
 800bf84:	e02d      	b.n	800bfe2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2224      	movs	r2, #36	; 0x24
 800bf92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f022 0201 	bic.w	r2, r2, #1
 800bfac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	683a      	ldr	r2, [r7, #0]
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f812 	bl	800bfec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2220      	movs	r2, #32
 800bfd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
	...

0800bfec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d108      	bne.n	800c00e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2201      	movs	r2, #1
 800c008:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c00c:	e031      	b.n	800c072 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c00e:	2308      	movs	r3, #8
 800c010:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c012:	2308      	movs	r3, #8
 800c014:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	0e5b      	lsrs	r3, r3, #25
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	f003 0307 	and.w	r3, r3, #7
 800c024:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	0f5b      	lsrs	r3, r3, #29
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	f003 0307 	and.w	r3, r3, #7
 800c034:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c036:	7bbb      	ldrb	r3, [r7, #14]
 800c038:	7b3a      	ldrb	r2, [r7, #12]
 800c03a:	4911      	ldr	r1, [pc, #68]	; (800c080 <UARTEx_SetNbDataToProcess+0x94>)
 800c03c:	5c8a      	ldrb	r2, [r1, r2]
 800c03e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c042:	7b3a      	ldrb	r2, [r7, #12]
 800c044:	490f      	ldr	r1, [pc, #60]	; (800c084 <UARTEx_SetNbDataToProcess+0x98>)
 800c046:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c048:	fb93 f3f2 	sdiv	r3, r3, r2
 800c04c:	b29a      	uxth	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c054:	7bfb      	ldrb	r3, [r7, #15]
 800c056:	7b7a      	ldrb	r2, [r7, #13]
 800c058:	4909      	ldr	r1, [pc, #36]	; (800c080 <UARTEx_SetNbDataToProcess+0x94>)
 800c05a:	5c8a      	ldrb	r2, [r1, r2]
 800c05c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c060:	7b7a      	ldrb	r2, [r7, #13]
 800c062:	4908      	ldr	r1, [pc, #32]	; (800c084 <UARTEx_SetNbDataToProcess+0x98>)
 800c064:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c066:	fb93 f3f2 	sdiv	r3, r3, r2
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c072:	bf00      	nop
 800c074:	3714      	adds	r7, #20
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	0800d0c0 	.word	0x0800d0c0
 800c084:	0800d0c8 	.word	0x0800d0c8

0800c088 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c090:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800c094:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	43db      	mvns	r3, r3
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3714      	adds	r7, #20
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr

0800c0be <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c0be:	b480      	push	{r7}
 800c0c0:	b085      	sub	sp, #20
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	60f8      	str	r0, [r7, #12]
 800c0c6:	1d3b      	adds	r3, r7, #4
 800c0c8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3714      	adds	r7, #20
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr

0800c0fa <atoi>:
 800c0fa:	220a      	movs	r2, #10
 800c0fc:	2100      	movs	r1, #0
 800c0fe:	f000 b92f 	b.w	800c360 <strtol>
	...

0800c104 <sbrk_aligned>:
 800c104:	b570      	push	{r4, r5, r6, lr}
 800c106:	4e0e      	ldr	r6, [pc, #56]	; (800c140 <sbrk_aligned+0x3c>)
 800c108:	460c      	mov	r4, r1
 800c10a:	6831      	ldr	r1, [r6, #0]
 800c10c:	4605      	mov	r5, r0
 800c10e:	b911      	cbnz	r1, 800c116 <sbrk_aligned+0x12>
 800c110:	f000 fb62 	bl	800c7d8 <_sbrk_r>
 800c114:	6030      	str	r0, [r6, #0]
 800c116:	4621      	mov	r1, r4
 800c118:	4628      	mov	r0, r5
 800c11a:	f000 fb5d 	bl	800c7d8 <_sbrk_r>
 800c11e:	1c43      	adds	r3, r0, #1
 800c120:	d00a      	beq.n	800c138 <sbrk_aligned+0x34>
 800c122:	1cc4      	adds	r4, r0, #3
 800c124:	f024 0403 	bic.w	r4, r4, #3
 800c128:	42a0      	cmp	r0, r4
 800c12a:	d007      	beq.n	800c13c <sbrk_aligned+0x38>
 800c12c:	1a21      	subs	r1, r4, r0
 800c12e:	4628      	mov	r0, r5
 800c130:	f000 fb52 	bl	800c7d8 <_sbrk_r>
 800c134:	3001      	adds	r0, #1
 800c136:	d101      	bne.n	800c13c <sbrk_aligned+0x38>
 800c138:	f04f 34ff 	mov.w	r4, #4294967295
 800c13c:	4620      	mov	r0, r4
 800c13e:	bd70      	pop	{r4, r5, r6, pc}
 800c140:	20000b08 	.word	0x20000b08

0800c144 <_malloc_r>:
 800c144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c148:	1ccd      	adds	r5, r1, #3
 800c14a:	f025 0503 	bic.w	r5, r5, #3
 800c14e:	3508      	adds	r5, #8
 800c150:	2d0c      	cmp	r5, #12
 800c152:	bf38      	it	cc
 800c154:	250c      	movcc	r5, #12
 800c156:	2d00      	cmp	r5, #0
 800c158:	4607      	mov	r7, r0
 800c15a:	db01      	blt.n	800c160 <_malloc_r+0x1c>
 800c15c:	42a9      	cmp	r1, r5
 800c15e:	d905      	bls.n	800c16c <_malloc_r+0x28>
 800c160:	230c      	movs	r3, #12
 800c162:	603b      	str	r3, [r7, #0]
 800c164:	2600      	movs	r6, #0
 800c166:	4630      	mov	r0, r6
 800c168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c16c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c240 <_malloc_r+0xfc>
 800c170:	f000 f868 	bl	800c244 <__malloc_lock>
 800c174:	f8d8 3000 	ldr.w	r3, [r8]
 800c178:	461c      	mov	r4, r3
 800c17a:	bb5c      	cbnz	r4, 800c1d4 <_malloc_r+0x90>
 800c17c:	4629      	mov	r1, r5
 800c17e:	4638      	mov	r0, r7
 800c180:	f7ff ffc0 	bl	800c104 <sbrk_aligned>
 800c184:	1c43      	adds	r3, r0, #1
 800c186:	4604      	mov	r4, r0
 800c188:	d155      	bne.n	800c236 <_malloc_r+0xf2>
 800c18a:	f8d8 4000 	ldr.w	r4, [r8]
 800c18e:	4626      	mov	r6, r4
 800c190:	2e00      	cmp	r6, #0
 800c192:	d145      	bne.n	800c220 <_malloc_r+0xdc>
 800c194:	2c00      	cmp	r4, #0
 800c196:	d048      	beq.n	800c22a <_malloc_r+0xe6>
 800c198:	6823      	ldr	r3, [r4, #0]
 800c19a:	4631      	mov	r1, r6
 800c19c:	4638      	mov	r0, r7
 800c19e:	eb04 0903 	add.w	r9, r4, r3
 800c1a2:	f000 fb19 	bl	800c7d8 <_sbrk_r>
 800c1a6:	4581      	cmp	r9, r0
 800c1a8:	d13f      	bne.n	800c22a <_malloc_r+0xe6>
 800c1aa:	6821      	ldr	r1, [r4, #0]
 800c1ac:	1a6d      	subs	r5, r5, r1
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	4638      	mov	r0, r7
 800c1b2:	f7ff ffa7 	bl	800c104 <sbrk_aligned>
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	d037      	beq.n	800c22a <_malloc_r+0xe6>
 800c1ba:	6823      	ldr	r3, [r4, #0]
 800c1bc:	442b      	add	r3, r5
 800c1be:	6023      	str	r3, [r4, #0]
 800c1c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d038      	beq.n	800c23a <_malloc_r+0xf6>
 800c1c8:	685a      	ldr	r2, [r3, #4]
 800c1ca:	42a2      	cmp	r2, r4
 800c1cc:	d12b      	bne.n	800c226 <_malloc_r+0xe2>
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	605a      	str	r2, [r3, #4]
 800c1d2:	e00f      	b.n	800c1f4 <_malloc_r+0xb0>
 800c1d4:	6822      	ldr	r2, [r4, #0]
 800c1d6:	1b52      	subs	r2, r2, r5
 800c1d8:	d41f      	bmi.n	800c21a <_malloc_r+0xd6>
 800c1da:	2a0b      	cmp	r2, #11
 800c1dc:	d917      	bls.n	800c20e <_malloc_r+0xca>
 800c1de:	1961      	adds	r1, r4, r5
 800c1e0:	42a3      	cmp	r3, r4
 800c1e2:	6025      	str	r5, [r4, #0]
 800c1e4:	bf18      	it	ne
 800c1e6:	6059      	strne	r1, [r3, #4]
 800c1e8:	6863      	ldr	r3, [r4, #4]
 800c1ea:	bf08      	it	eq
 800c1ec:	f8c8 1000 	streq.w	r1, [r8]
 800c1f0:	5162      	str	r2, [r4, r5]
 800c1f2:	604b      	str	r3, [r1, #4]
 800c1f4:	4638      	mov	r0, r7
 800c1f6:	f104 060b 	add.w	r6, r4, #11
 800c1fa:	f000 f829 	bl	800c250 <__malloc_unlock>
 800c1fe:	f026 0607 	bic.w	r6, r6, #7
 800c202:	1d23      	adds	r3, r4, #4
 800c204:	1af2      	subs	r2, r6, r3
 800c206:	d0ae      	beq.n	800c166 <_malloc_r+0x22>
 800c208:	1b9b      	subs	r3, r3, r6
 800c20a:	50a3      	str	r3, [r4, r2]
 800c20c:	e7ab      	b.n	800c166 <_malloc_r+0x22>
 800c20e:	42a3      	cmp	r3, r4
 800c210:	6862      	ldr	r2, [r4, #4]
 800c212:	d1dd      	bne.n	800c1d0 <_malloc_r+0x8c>
 800c214:	f8c8 2000 	str.w	r2, [r8]
 800c218:	e7ec      	b.n	800c1f4 <_malloc_r+0xb0>
 800c21a:	4623      	mov	r3, r4
 800c21c:	6864      	ldr	r4, [r4, #4]
 800c21e:	e7ac      	b.n	800c17a <_malloc_r+0x36>
 800c220:	4634      	mov	r4, r6
 800c222:	6876      	ldr	r6, [r6, #4]
 800c224:	e7b4      	b.n	800c190 <_malloc_r+0x4c>
 800c226:	4613      	mov	r3, r2
 800c228:	e7cc      	b.n	800c1c4 <_malloc_r+0x80>
 800c22a:	230c      	movs	r3, #12
 800c22c:	603b      	str	r3, [r7, #0]
 800c22e:	4638      	mov	r0, r7
 800c230:	f000 f80e 	bl	800c250 <__malloc_unlock>
 800c234:	e797      	b.n	800c166 <_malloc_r+0x22>
 800c236:	6025      	str	r5, [r4, #0]
 800c238:	e7dc      	b.n	800c1f4 <_malloc_r+0xb0>
 800c23a:	605b      	str	r3, [r3, #4]
 800c23c:	deff      	udf	#255	; 0xff
 800c23e:	bf00      	nop
 800c240:	20000b04 	.word	0x20000b04

0800c244 <__malloc_lock>:
 800c244:	4801      	ldr	r0, [pc, #4]	; (800c24c <__malloc_lock+0x8>)
 800c246:	f000 bb14 	b.w	800c872 <__retarget_lock_acquire_recursive>
 800c24a:	bf00      	nop
 800c24c:	20000c4c 	.word	0x20000c4c

0800c250 <__malloc_unlock>:
 800c250:	4801      	ldr	r0, [pc, #4]	; (800c258 <__malloc_unlock+0x8>)
 800c252:	f000 bb0f 	b.w	800c874 <__retarget_lock_release_recursive>
 800c256:	bf00      	nop
 800c258:	20000c4c 	.word	0x20000c4c

0800c25c <_strtol_l.constprop.0>:
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c262:	d001      	beq.n	800c268 <_strtol_l.constprop.0+0xc>
 800c264:	2b24      	cmp	r3, #36	; 0x24
 800c266:	d906      	bls.n	800c276 <_strtol_l.constprop.0+0x1a>
 800c268:	f000 fad8 	bl	800c81c <__errno>
 800c26c:	2316      	movs	r3, #22
 800c26e:	6003      	str	r3, [r0, #0]
 800c270:	2000      	movs	r0, #0
 800c272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c276:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c35c <_strtol_l.constprop.0+0x100>
 800c27a:	460d      	mov	r5, r1
 800c27c:	462e      	mov	r6, r5
 800c27e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c282:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c286:	f017 0708 	ands.w	r7, r7, #8
 800c28a:	d1f7      	bne.n	800c27c <_strtol_l.constprop.0+0x20>
 800c28c:	2c2d      	cmp	r4, #45	; 0x2d
 800c28e:	d132      	bne.n	800c2f6 <_strtol_l.constprop.0+0x9a>
 800c290:	782c      	ldrb	r4, [r5, #0]
 800c292:	2701      	movs	r7, #1
 800c294:	1cb5      	adds	r5, r6, #2
 800c296:	2b00      	cmp	r3, #0
 800c298:	d05b      	beq.n	800c352 <_strtol_l.constprop.0+0xf6>
 800c29a:	2b10      	cmp	r3, #16
 800c29c:	d109      	bne.n	800c2b2 <_strtol_l.constprop.0+0x56>
 800c29e:	2c30      	cmp	r4, #48	; 0x30
 800c2a0:	d107      	bne.n	800c2b2 <_strtol_l.constprop.0+0x56>
 800c2a2:	782c      	ldrb	r4, [r5, #0]
 800c2a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c2a8:	2c58      	cmp	r4, #88	; 0x58
 800c2aa:	d14d      	bne.n	800c348 <_strtol_l.constprop.0+0xec>
 800c2ac:	786c      	ldrb	r4, [r5, #1]
 800c2ae:	2310      	movs	r3, #16
 800c2b0:	3502      	adds	r5, #2
 800c2b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c2b6:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2ba:	f04f 0e00 	mov.w	lr, #0
 800c2be:	fbb8 f9f3 	udiv	r9, r8, r3
 800c2c2:	4676      	mov	r6, lr
 800c2c4:	fb03 8a19 	mls	sl, r3, r9, r8
 800c2c8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c2cc:	f1bc 0f09 	cmp.w	ip, #9
 800c2d0:	d816      	bhi.n	800c300 <_strtol_l.constprop.0+0xa4>
 800c2d2:	4664      	mov	r4, ip
 800c2d4:	42a3      	cmp	r3, r4
 800c2d6:	dd24      	ble.n	800c322 <_strtol_l.constprop.0+0xc6>
 800c2d8:	f1be 3fff 	cmp.w	lr, #4294967295
 800c2dc:	d008      	beq.n	800c2f0 <_strtol_l.constprop.0+0x94>
 800c2de:	45b1      	cmp	r9, r6
 800c2e0:	d31c      	bcc.n	800c31c <_strtol_l.constprop.0+0xc0>
 800c2e2:	d101      	bne.n	800c2e8 <_strtol_l.constprop.0+0x8c>
 800c2e4:	45a2      	cmp	sl, r4
 800c2e6:	db19      	blt.n	800c31c <_strtol_l.constprop.0+0xc0>
 800c2e8:	fb06 4603 	mla	r6, r6, r3, r4
 800c2ec:	f04f 0e01 	mov.w	lr, #1
 800c2f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2f4:	e7e8      	b.n	800c2c8 <_strtol_l.constprop.0+0x6c>
 800c2f6:	2c2b      	cmp	r4, #43	; 0x2b
 800c2f8:	bf04      	itt	eq
 800c2fa:	782c      	ldrbeq	r4, [r5, #0]
 800c2fc:	1cb5      	addeq	r5, r6, #2
 800c2fe:	e7ca      	b.n	800c296 <_strtol_l.constprop.0+0x3a>
 800c300:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c304:	f1bc 0f19 	cmp.w	ip, #25
 800c308:	d801      	bhi.n	800c30e <_strtol_l.constprop.0+0xb2>
 800c30a:	3c37      	subs	r4, #55	; 0x37
 800c30c:	e7e2      	b.n	800c2d4 <_strtol_l.constprop.0+0x78>
 800c30e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c312:	f1bc 0f19 	cmp.w	ip, #25
 800c316:	d804      	bhi.n	800c322 <_strtol_l.constprop.0+0xc6>
 800c318:	3c57      	subs	r4, #87	; 0x57
 800c31a:	e7db      	b.n	800c2d4 <_strtol_l.constprop.0+0x78>
 800c31c:	f04f 3eff 	mov.w	lr, #4294967295
 800c320:	e7e6      	b.n	800c2f0 <_strtol_l.constprop.0+0x94>
 800c322:	f1be 3fff 	cmp.w	lr, #4294967295
 800c326:	d105      	bne.n	800c334 <_strtol_l.constprop.0+0xd8>
 800c328:	2322      	movs	r3, #34	; 0x22
 800c32a:	6003      	str	r3, [r0, #0]
 800c32c:	4646      	mov	r6, r8
 800c32e:	b942      	cbnz	r2, 800c342 <_strtol_l.constprop.0+0xe6>
 800c330:	4630      	mov	r0, r6
 800c332:	e79e      	b.n	800c272 <_strtol_l.constprop.0+0x16>
 800c334:	b107      	cbz	r7, 800c338 <_strtol_l.constprop.0+0xdc>
 800c336:	4276      	negs	r6, r6
 800c338:	2a00      	cmp	r2, #0
 800c33a:	d0f9      	beq.n	800c330 <_strtol_l.constprop.0+0xd4>
 800c33c:	f1be 0f00 	cmp.w	lr, #0
 800c340:	d000      	beq.n	800c344 <_strtol_l.constprop.0+0xe8>
 800c342:	1e69      	subs	r1, r5, #1
 800c344:	6011      	str	r1, [r2, #0]
 800c346:	e7f3      	b.n	800c330 <_strtol_l.constprop.0+0xd4>
 800c348:	2430      	movs	r4, #48	; 0x30
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1b1      	bne.n	800c2b2 <_strtol_l.constprop.0+0x56>
 800c34e:	2308      	movs	r3, #8
 800c350:	e7af      	b.n	800c2b2 <_strtol_l.constprop.0+0x56>
 800c352:	2c30      	cmp	r4, #48	; 0x30
 800c354:	d0a5      	beq.n	800c2a2 <_strtol_l.constprop.0+0x46>
 800c356:	230a      	movs	r3, #10
 800c358:	e7ab      	b.n	800c2b2 <_strtol_l.constprop.0+0x56>
 800c35a:	bf00      	nop
 800c35c:	0800d0d1 	.word	0x0800d0d1

0800c360 <strtol>:
 800c360:	4613      	mov	r3, r2
 800c362:	460a      	mov	r2, r1
 800c364:	4601      	mov	r1, r0
 800c366:	4802      	ldr	r0, [pc, #8]	; (800c370 <strtol+0x10>)
 800c368:	6800      	ldr	r0, [r0, #0]
 800c36a:	f7ff bf77 	b.w	800c25c <_strtol_l.constprop.0>
 800c36e:	bf00      	nop
 800c370:	20000064 	.word	0x20000064

0800c374 <std>:
 800c374:	2300      	movs	r3, #0
 800c376:	b510      	push	{r4, lr}
 800c378:	4604      	mov	r4, r0
 800c37a:	e9c0 3300 	strd	r3, r3, [r0]
 800c37e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c382:	6083      	str	r3, [r0, #8]
 800c384:	8181      	strh	r1, [r0, #12]
 800c386:	6643      	str	r3, [r0, #100]	; 0x64
 800c388:	81c2      	strh	r2, [r0, #14]
 800c38a:	6183      	str	r3, [r0, #24]
 800c38c:	4619      	mov	r1, r3
 800c38e:	2208      	movs	r2, #8
 800c390:	305c      	adds	r0, #92	; 0x5c
 800c392:	f000 f9e5 	bl	800c760 <memset>
 800c396:	4b0d      	ldr	r3, [pc, #52]	; (800c3cc <std+0x58>)
 800c398:	6263      	str	r3, [r4, #36]	; 0x24
 800c39a:	4b0d      	ldr	r3, [pc, #52]	; (800c3d0 <std+0x5c>)
 800c39c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c39e:	4b0d      	ldr	r3, [pc, #52]	; (800c3d4 <std+0x60>)
 800c3a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3a2:	4b0d      	ldr	r3, [pc, #52]	; (800c3d8 <std+0x64>)
 800c3a4:	6323      	str	r3, [r4, #48]	; 0x30
 800c3a6:	4b0d      	ldr	r3, [pc, #52]	; (800c3dc <std+0x68>)
 800c3a8:	6224      	str	r4, [r4, #32]
 800c3aa:	429c      	cmp	r4, r3
 800c3ac:	d006      	beq.n	800c3bc <std+0x48>
 800c3ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c3b2:	4294      	cmp	r4, r2
 800c3b4:	d002      	beq.n	800c3bc <std+0x48>
 800c3b6:	33d0      	adds	r3, #208	; 0xd0
 800c3b8:	429c      	cmp	r4, r3
 800c3ba:	d105      	bne.n	800c3c8 <std+0x54>
 800c3bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3c4:	f000 ba54 	b.w	800c870 <__retarget_lock_init_recursive>
 800c3c8:	bd10      	pop	{r4, pc}
 800c3ca:	bf00      	nop
 800c3cc:	0800c5b1 	.word	0x0800c5b1
 800c3d0:	0800c5d3 	.word	0x0800c5d3
 800c3d4:	0800c60b 	.word	0x0800c60b
 800c3d8:	0800c62f 	.word	0x0800c62f
 800c3dc:	20000b0c 	.word	0x20000b0c

0800c3e0 <stdio_exit_handler>:
 800c3e0:	4a02      	ldr	r2, [pc, #8]	; (800c3ec <stdio_exit_handler+0xc>)
 800c3e2:	4903      	ldr	r1, [pc, #12]	; (800c3f0 <stdio_exit_handler+0x10>)
 800c3e4:	4803      	ldr	r0, [pc, #12]	; (800c3f4 <stdio_exit_handler+0x14>)
 800c3e6:	f000 b869 	b.w	800c4bc <_fwalk_sglue>
 800c3ea:	bf00      	nop
 800c3ec:	2000000c 	.word	0x2000000c
 800c3f0:	0800ca39 	.word	0x0800ca39
 800c3f4:	20000018 	.word	0x20000018

0800c3f8 <cleanup_stdio>:
 800c3f8:	6841      	ldr	r1, [r0, #4]
 800c3fa:	4b0c      	ldr	r3, [pc, #48]	; (800c42c <cleanup_stdio+0x34>)
 800c3fc:	4299      	cmp	r1, r3
 800c3fe:	b510      	push	{r4, lr}
 800c400:	4604      	mov	r4, r0
 800c402:	d001      	beq.n	800c408 <cleanup_stdio+0x10>
 800c404:	f000 fb18 	bl	800ca38 <_fflush_r>
 800c408:	68a1      	ldr	r1, [r4, #8]
 800c40a:	4b09      	ldr	r3, [pc, #36]	; (800c430 <cleanup_stdio+0x38>)
 800c40c:	4299      	cmp	r1, r3
 800c40e:	d002      	beq.n	800c416 <cleanup_stdio+0x1e>
 800c410:	4620      	mov	r0, r4
 800c412:	f000 fb11 	bl	800ca38 <_fflush_r>
 800c416:	68e1      	ldr	r1, [r4, #12]
 800c418:	4b06      	ldr	r3, [pc, #24]	; (800c434 <cleanup_stdio+0x3c>)
 800c41a:	4299      	cmp	r1, r3
 800c41c:	d004      	beq.n	800c428 <cleanup_stdio+0x30>
 800c41e:	4620      	mov	r0, r4
 800c420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c424:	f000 bb08 	b.w	800ca38 <_fflush_r>
 800c428:	bd10      	pop	{r4, pc}
 800c42a:	bf00      	nop
 800c42c:	20000b0c 	.word	0x20000b0c
 800c430:	20000b74 	.word	0x20000b74
 800c434:	20000bdc 	.word	0x20000bdc

0800c438 <global_stdio_init.part.0>:
 800c438:	b510      	push	{r4, lr}
 800c43a:	4b0b      	ldr	r3, [pc, #44]	; (800c468 <global_stdio_init.part.0+0x30>)
 800c43c:	4c0b      	ldr	r4, [pc, #44]	; (800c46c <global_stdio_init.part.0+0x34>)
 800c43e:	4a0c      	ldr	r2, [pc, #48]	; (800c470 <global_stdio_init.part.0+0x38>)
 800c440:	601a      	str	r2, [r3, #0]
 800c442:	4620      	mov	r0, r4
 800c444:	2200      	movs	r2, #0
 800c446:	2104      	movs	r1, #4
 800c448:	f7ff ff94 	bl	800c374 <std>
 800c44c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c450:	2201      	movs	r2, #1
 800c452:	2109      	movs	r1, #9
 800c454:	f7ff ff8e 	bl	800c374 <std>
 800c458:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c45c:	2202      	movs	r2, #2
 800c45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c462:	2112      	movs	r1, #18
 800c464:	f7ff bf86 	b.w	800c374 <std>
 800c468:	20000c44 	.word	0x20000c44
 800c46c:	20000b0c 	.word	0x20000b0c
 800c470:	0800c3e1 	.word	0x0800c3e1

0800c474 <__sfp_lock_acquire>:
 800c474:	4801      	ldr	r0, [pc, #4]	; (800c47c <__sfp_lock_acquire+0x8>)
 800c476:	f000 b9fc 	b.w	800c872 <__retarget_lock_acquire_recursive>
 800c47a:	bf00      	nop
 800c47c:	20000c4d 	.word	0x20000c4d

0800c480 <__sfp_lock_release>:
 800c480:	4801      	ldr	r0, [pc, #4]	; (800c488 <__sfp_lock_release+0x8>)
 800c482:	f000 b9f7 	b.w	800c874 <__retarget_lock_release_recursive>
 800c486:	bf00      	nop
 800c488:	20000c4d 	.word	0x20000c4d

0800c48c <__sinit>:
 800c48c:	b510      	push	{r4, lr}
 800c48e:	4604      	mov	r4, r0
 800c490:	f7ff fff0 	bl	800c474 <__sfp_lock_acquire>
 800c494:	6a23      	ldr	r3, [r4, #32]
 800c496:	b11b      	cbz	r3, 800c4a0 <__sinit+0x14>
 800c498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c49c:	f7ff bff0 	b.w	800c480 <__sfp_lock_release>
 800c4a0:	4b04      	ldr	r3, [pc, #16]	; (800c4b4 <__sinit+0x28>)
 800c4a2:	6223      	str	r3, [r4, #32]
 800c4a4:	4b04      	ldr	r3, [pc, #16]	; (800c4b8 <__sinit+0x2c>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1f5      	bne.n	800c498 <__sinit+0xc>
 800c4ac:	f7ff ffc4 	bl	800c438 <global_stdio_init.part.0>
 800c4b0:	e7f2      	b.n	800c498 <__sinit+0xc>
 800c4b2:	bf00      	nop
 800c4b4:	0800c3f9 	.word	0x0800c3f9
 800c4b8:	20000c44 	.word	0x20000c44

0800c4bc <_fwalk_sglue>:
 800c4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	4688      	mov	r8, r1
 800c4c4:	4614      	mov	r4, r2
 800c4c6:	2600      	movs	r6, #0
 800c4c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4cc:	f1b9 0901 	subs.w	r9, r9, #1
 800c4d0:	d505      	bpl.n	800c4de <_fwalk_sglue+0x22>
 800c4d2:	6824      	ldr	r4, [r4, #0]
 800c4d4:	2c00      	cmp	r4, #0
 800c4d6:	d1f7      	bne.n	800c4c8 <_fwalk_sglue+0xc>
 800c4d8:	4630      	mov	r0, r6
 800c4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4de:	89ab      	ldrh	r3, [r5, #12]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d907      	bls.n	800c4f4 <_fwalk_sglue+0x38>
 800c4e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	d003      	beq.n	800c4f4 <_fwalk_sglue+0x38>
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	47c0      	blx	r8
 800c4f2:	4306      	orrs	r6, r0
 800c4f4:	3568      	adds	r5, #104	; 0x68
 800c4f6:	e7e9      	b.n	800c4cc <_fwalk_sglue+0x10>

0800c4f8 <_puts_r>:
 800c4f8:	6a03      	ldr	r3, [r0, #32]
 800c4fa:	b570      	push	{r4, r5, r6, lr}
 800c4fc:	6884      	ldr	r4, [r0, #8]
 800c4fe:	4605      	mov	r5, r0
 800c500:	460e      	mov	r6, r1
 800c502:	b90b      	cbnz	r3, 800c508 <_puts_r+0x10>
 800c504:	f7ff ffc2 	bl	800c48c <__sinit>
 800c508:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c50a:	07db      	lsls	r3, r3, #31
 800c50c:	d405      	bmi.n	800c51a <_puts_r+0x22>
 800c50e:	89a3      	ldrh	r3, [r4, #12]
 800c510:	0598      	lsls	r0, r3, #22
 800c512:	d402      	bmi.n	800c51a <_puts_r+0x22>
 800c514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c516:	f000 f9ac 	bl	800c872 <__retarget_lock_acquire_recursive>
 800c51a:	89a3      	ldrh	r3, [r4, #12]
 800c51c:	0719      	lsls	r1, r3, #28
 800c51e:	d513      	bpl.n	800c548 <_puts_r+0x50>
 800c520:	6923      	ldr	r3, [r4, #16]
 800c522:	b18b      	cbz	r3, 800c548 <_puts_r+0x50>
 800c524:	3e01      	subs	r6, #1
 800c526:	68a3      	ldr	r3, [r4, #8]
 800c528:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c52c:	3b01      	subs	r3, #1
 800c52e:	60a3      	str	r3, [r4, #8]
 800c530:	b9e9      	cbnz	r1, 800c56e <_puts_r+0x76>
 800c532:	2b00      	cmp	r3, #0
 800c534:	da2e      	bge.n	800c594 <_puts_r+0x9c>
 800c536:	4622      	mov	r2, r4
 800c538:	210a      	movs	r1, #10
 800c53a:	4628      	mov	r0, r5
 800c53c:	f000 f87b 	bl	800c636 <__swbuf_r>
 800c540:	3001      	adds	r0, #1
 800c542:	d007      	beq.n	800c554 <_puts_r+0x5c>
 800c544:	250a      	movs	r5, #10
 800c546:	e007      	b.n	800c558 <_puts_r+0x60>
 800c548:	4621      	mov	r1, r4
 800c54a:	4628      	mov	r0, r5
 800c54c:	f000 f8b0 	bl	800c6b0 <__swsetup_r>
 800c550:	2800      	cmp	r0, #0
 800c552:	d0e7      	beq.n	800c524 <_puts_r+0x2c>
 800c554:	f04f 35ff 	mov.w	r5, #4294967295
 800c558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c55a:	07da      	lsls	r2, r3, #31
 800c55c:	d405      	bmi.n	800c56a <_puts_r+0x72>
 800c55e:	89a3      	ldrh	r3, [r4, #12]
 800c560:	059b      	lsls	r3, r3, #22
 800c562:	d402      	bmi.n	800c56a <_puts_r+0x72>
 800c564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c566:	f000 f985 	bl	800c874 <__retarget_lock_release_recursive>
 800c56a:	4628      	mov	r0, r5
 800c56c:	bd70      	pop	{r4, r5, r6, pc}
 800c56e:	2b00      	cmp	r3, #0
 800c570:	da04      	bge.n	800c57c <_puts_r+0x84>
 800c572:	69a2      	ldr	r2, [r4, #24]
 800c574:	429a      	cmp	r2, r3
 800c576:	dc06      	bgt.n	800c586 <_puts_r+0x8e>
 800c578:	290a      	cmp	r1, #10
 800c57a:	d004      	beq.n	800c586 <_puts_r+0x8e>
 800c57c:	6823      	ldr	r3, [r4, #0]
 800c57e:	1c5a      	adds	r2, r3, #1
 800c580:	6022      	str	r2, [r4, #0]
 800c582:	7019      	strb	r1, [r3, #0]
 800c584:	e7cf      	b.n	800c526 <_puts_r+0x2e>
 800c586:	4622      	mov	r2, r4
 800c588:	4628      	mov	r0, r5
 800c58a:	f000 f854 	bl	800c636 <__swbuf_r>
 800c58e:	3001      	adds	r0, #1
 800c590:	d1c9      	bne.n	800c526 <_puts_r+0x2e>
 800c592:	e7df      	b.n	800c554 <_puts_r+0x5c>
 800c594:	6823      	ldr	r3, [r4, #0]
 800c596:	250a      	movs	r5, #10
 800c598:	1c5a      	adds	r2, r3, #1
 800c59a:	6022      	str	r2, [r4, #0]
 800c59c:	701d      	strb	r5, [r3, #0]
 800c59e:	e7db      	b.n	800c558 <_puts_r+0x60>

0800c5a0 <puts>:
 800c5a0:	4b02      	ldr	r3, [pc, #8]	; (800c5ac <puts+0xc>)
 800c5a2:	4601      	mov	r1, r0
 800c5a4:	6818      	ldr	r0, [r3, #0]
 800c5a6:	f7ff bfa7 	b.w	800c4f8 <_puts_r>
 800c5aa:	bf00      	nop
 800c5ac:	20000064 	.word	0x20000064

0800c5b0 <__sread>:
 800c5b0:	b510      	push	{r4, lr}
 800c5b2:	460c      	mov	r4, r1
 800c5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5b8:	f000 f8fc 	bl	800c7b4 <_read_r>
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	bfab      	itete	ge
 800c5c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5c2:	89a3      	ldrhlt	r3, [r4, #12]
 800c5c4:	181b      	addge	r3, r3, r0
 800c5c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5ca:	bfac      	ite	ge
 800c5cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5ce:	81a3      	strhlt	r3, [r4, #12]
 800c5d0:	bd10      	pop	{r4, pc}

0800c5d2 <__swrite>:
 800c5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d6:	461f      	mov	r7, r3
 800c5d8:	898b      	ldrh	r3, [r1, #12]
 800c5da:	05db      	lsls	r3, r3, #23
 800c5dc:	4605      	mov	r5, r0
 800c5de:	460c      	mov	r4, r1
 800c5e0:	4616      	mov	r6, r2
 800c5e2:	d505      	bpl.n	800c5f0 <__swrite+0x1e>
 800c5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5e8:	2302      	movs	r3, #2
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f000 f8d0 	bl	800c790 <_lseek_r>
 800c5f0:	89a3      	ldrh	r3, [r4, #12]
 800c5f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5fa:	81a3      	strh	r3, [r4, #12]
 800c5fc:	4632      	mov	r2, r6
 800c5fe:	463b      	mov	r3, r7
 800c600:	4628      	mov	r0, r5
 800c602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c606:	f000 b8f7 	b.w	800c7f8 <_write_r>

0800c60a <__sseek>:
 800c60a:	b510      	push	{r4, lr}
 800c60c:	460c      	mov	r4, r1
 800c60e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c612:	f000 f8bd 	bl	800c790 <_lseek_r>
 800c616:	1c43      	adds	r3, r0, #1
 800c618:	89a3      	ldrh	r3, [r4, #12]
 800c61a:	bf15      	itete	ne
 800c61c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c61e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c622:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c626:	81a3      	strheq	r3, [r4, #12]
 800c628:	bf18      	it	ne
 800c62a:	81a3      	strhne	r3, [r4, #12]
 800c62c:	bd10      	pop	{r4, pc}

0800c62e <__sclose>:
 800c62e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c632:	f000 b89d 	b.w	800c770 <_close_r>

0800c636 <__swbuf_r>:
 800c636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c638:	460e      	mov	r6, r1
 800c63a:	4614      	mov	r4, r2
 800c63c:	4605      	mov	r5, r0
 800c63e:	b118      	cbz	r0, 800c648 <__swbuf_r+0x12>
 800c640:	6a03      	ldr	r3, [r0, #32]
 800c642:	b90b      	cbnz	r3, 800c648 <__swbuf_r+0x12>
 800c644:	f7ff ff22 	bl	800c48c <__sinit>
 800c648:	69a3      	ldr	r3, [r4, #24]
 800c64a:	60a3      	str	r3, [r4, #8]
 800c64c:	89a3      	ldrh	r3, [r4, #12]
 800c64e:	071a      	lsls	r2, r3, #28
 800c650:	d525      	bpl.n	800c69e <__swbuf_r+0x68>
 800c652:	6923      	ldr	r3, [r4, #16]
 800c654:	b31b      	cbz	r3, 800c69e <__swbuf_r+0x68>
 800c656:	6823      	ldr	r3, [r4, #0]
 800c658:	6922      	ldr	r2, [r4, #16]
 800c65a:	1a98      	subs	r0, r3, r2
 800c65c:	6963      	ldr	r3, [r4, #20]
 800c65e:	b2f6      	uxtb	r6, r6
 800c660:	4283      	cmp	r3, r0
 800c662:	4637      	mov	r7, r6
 800c664:	dc04      	bgt.n	800c670 <__swbuf_r+0x3a>
 800c666:	4621      	mov	r1, r4
 800c668:	4628      	mov	r0, r5
 800c66a:	f000 f9e5 	bl	800ca38 <_fflush_r>
 800c66e:	b9e0      	cbnz	r0, 800c6aa <__swbuf_r+0x74>
 800c670:	68a3      	ldr	r3, [r4, #8]
 800c672:	3b01      	subs	r3, #1
 800c674:	60a3      	str	r3, [r4, #8]
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	1c5a      	adds	r2, r3, #1
 800c67a:	6022      	str	r2, [r4, #0]
 800c67c:	701e      	strb	r6, [r3, #0]
 800c67e:	6962      	ldr	r2, [r4, #20]
 800c680:	1c43      	adds	r3, r0, #1
 800c682:	429a      	cmp	r2, r3
 800c684:	d004      	beq.n	800c690 <__swbuf_r+0x5a>
 800c686:	89a3      	ldrh	r3, [r4, #12]
 800c688:	07db      	lsls	r3, r3, #31
 800c68a:	d506      	bpl.n	800c69a <__swbuf_r+0x64>
 800c68c:	2e0a      	cmp	r6, #10
 800c68e:	d104      	bne.n	800c69a <__swbuf_r+0x64>
 800c690:	4621      	mov	r1, r4
 800c692:	4628      	mov	r0, r5
 800c694:	f000 f9d0 	bl	800ca38 <_fflush_r>
 800c698:	b938      	cbnz	r0, 800c6aa <__swbuf_r+0x74>
 800c69a:	4638      	mov	r0, r7
 800c69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c69e:	4621      	mov	r1, r4
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	f000 f805 	bl	800c6b0 <__swsetup_r>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	d0d5      	beq.n	800c656 <__swbuf_r+0x20>
 800c6aa:	f04f 37ff 	mov.w	r7, #4294967295
 800c6ae:	e7f4      	b.n	800c69a <__swbuf_r+0x64>

0800c6b0 <__swsetup_r>:
 800c6b0:	b538      	push	{r3, r4, r5, lr}
 800c6b2:	4b2a      	ldr	r3, [pc, #168]	; (800c75c <__swsetup_r+0xac>)
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	6818      	ldr	r0, [r3, #0]
 800c6b8:	460c      	mov	r4, r1
 800c6ba:	b118      	cbz	r0, 800c6c4 <__swsetup_r+0x14>
 800c6bc:	6a03      	ldr	r3, [r0, #32]
 800c6be:	b90b      	cbnz	r3, 800c6c4 <__swsetup_r+0x14>
 800c6c0:	f7ff fee4 	bl	800c48c <__sinit>
 800c6c4:	89a3      	ldrh	r3, [r4, #12]
 800c6c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6ca:	0718      	lsls	r0, r3, #28
 800c6cc:	d422      	bmi.n	800c714 <__swsetup_r+0x64>
 800c6ce:	06d9      	lsls	r1, r3, #27
 800c6d0:	d407      	bmi.n	800c6e2 <__swsetup_r+0x32>
 800c6d2:	2309      	movs	r3, #9
 800c6d4:	602b      	str	r3, [r5, #0]
 800c6d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6da:	81a3      	strh	r3, [r4, #12]
 800c6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e0:	e034      	b.n	800c74c <__swsetup_r+0x9c>
 800c6e2:	0758      	lsls	r0, r3, #29
 800c6e4:	d512      	bpl.n	800c70c <__swsetup_r+0x5c>
 800c6e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6e8:	b141      	cbz	r1, 800c6fc <__swsetup_r+0x4c>
 800c6ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6ee:	4299      	cmp	r1, r3
 800c6f0:	d002      	beq.n	800c6f8 <__swsetup_r+0x48>
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	f000 f8ce 	bl	800c894 <_free_r>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	6363      	str	r3, [r4, #52]	; 0x34
 800c6fc:	89a3      	ldrh	r3, [r4, #12]
 800c6fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c702:	81a3      	strh	r3, [r4, #12]
 800c704:	2300      	movs	r3, #0
 800c706:	6063      	str	r3, [r4, #4]
 800c708:	6923      	ldr	r3, [r4, #16]
 800c70a:	6023      	str	r3, [r4, #0]
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	f043 0308 	orr.w	r3, r3, #8
 800c712:	81a3      	strh	r3, [r4, #12]
 800c714:	6923      	ldr	r3, [r4, #16]
 800c716:	b94b      	cbnz	r3, 800c72c <__swsetup_r+0x7c>
 800c718:	89a3      	ldrh	r3, [r4, #12]
 800c71a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c71e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c722:	d003      	beq.n	800c72c <__swsetup_r+0x7c>
 800c724:	4621      	mov	r1, r4
 800c726:	4628      	mov	r0, r5
 800c728:	f000 f9d4 	bl	800cad4 <__smakebuf_r>
 800c72c:	89a0      	ldrh	r0, [r4, #12]
 800c72e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c732:	f010 0301 	ands.w	r3, r0, #1
 800c736:	d00a      	beq.n	800c74e <__swsetup_r+0x9e>
 800c738:	2300      	movs	r3, #0
 800c73a:	60a3      	str	r3, [r4, #8]
 800c73c:	6963      	ldr	r3, [r4, #20]
 800c73e:	425b      	negs	r3, r3
 800c740:	61a3      	str	r3, [r4, #24]
 800c742:	6923      	ldr	r3, [r4, #16]
 800c744:	b943      	cbnz	r3, 800c758 <__swsetup_r+0xa8>
 800c746:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c74a:	d1c4      	bne.n	800c6d6 <__swsetup_r+0x26>
 800c74c:	bd38      	pop	{r3, r4, r5, pc}
 800c74e:	0781      	lsls	r1, r0, #30
 800c750:	bf58      	it	pl
 800c752:	6963      	ldrpl	r3, [r4, #20]
 800c754:	60a3      	str	r3, [r4, #8]
 800c756:	e7f4      	b.n	800c742 <__swsetup_r+0x92>
 800c758:	2000      	movs	r0, #0
 800c75a:	e7f7      	b.n	800c74c <__swsetup_r+0x9c>
 800c75c:	20000064 	.word	0x20000064

0800c760 <memset>:
 800c760:	4402      	add	r2, r0
 800c762:	4603      	mov	r3, r0
 800c764:	4293      	cmp	r3, r2
 800c766:	d100      	bne.n	800c76a <memset+0xa>
 800c768:	4770      	bx	lr
 800c76a:	f803 1b01 	strb.w	r1, [r3], #1
 800c76e:	e7f9      	b.n	800c764 <memset+0x4>

0800c770 <_close_r>:
 800c770:	b538      	push	{r3, r4, r5, lr}
 800c772:	4d06      	ldr	r5, [pc, #24]	; (800c78c <_close_r+0x1c>)
 800c774:	2300      	movs	r3, #0
 800c776:	4604      	mov	r4, r0
 800c778:	4608      	mov	r0, r1
 800c77a:	602b      	str	r3, [r5, #0]
 800c77c:	f7f7 fa97 	bl	8003cae <_close>
 800c780:	1c43      	adds	r3, r0, #1
 800c782:	d102      	bne.n	800c78a <_close_r+0x1a>
 800c784:	682b      	ldr	r3, [r5, #0]
 800c786:	b103      	cbz	r3, 800c78a <_close_r+0x1a>
 800c788:	6023      	str	r3, [r4, #0]
 800c78a:	bd38      	pop	{r3, r4, r5, pc}
 800c78c:	20000c48 	.word	0x20000c48

0800c790 <_lseek_r>:
 800c790:	b538      	push	{r3, r4, r5, lr}
 800c792:	4d07      	ldr	r5, [pc, #28]	; (800c7b0 <_lseek_r+0x20>)
 800c794:	4604      	mov	r4, r0
 800c796:	4608      	mov	r0, r1
 800c798:	4611      	mov	r1, r2
 800c79a:	2200      	movs	r2, #0
 800c79c:	602a      	str	r2, [r5, #0]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	f7f7 faac 	bl	8003cfc <_lseek>
 800c7a4:	1c43      	adds	r3, r0, #1
 800c7a6:	d102      	bne.n	800c7ae <_lseek_r+0x1e>
 800c7a8:	682b      	ldr	r3, [r5, #0]
 800c7aa:	b103      	cbz	r3, 800c7ae <_lseek_r+0x1e>
 800c7ac:	6023      	str	r3, [r4, #0]
 800c7ae:	bd38      	pop	{r3, r4, r5, pc}
 800c7b0:	20000c48 	.word	0x20000c48

0800c7b4 <_read_r>:
 800c7b4:	b538      	push	{r3, r4, r5, lr}
 800c7b6:	4d07      	ldr	r5, [pc, #28]	; (800c7d4 <_read_r+0x20>)
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	4608      	mov	r0, r1
 800c7bc:	4611      	mov	r1, r2
 800c7be:	2200      	movs	r2, #0
 800c7c0:	602a      	str	r2, [r5, #0]
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	f7f7 fa3a 	bl	8003c3c <_read>
 800c7c8:	1c43      	adds	r3, r0, #1
 800c7ca:	d102      	bne.n	800c7d2 <_read_r+0x1e>
 800c7cc:	682b      	ldr	r3, [r5, #0]
 800c7ce:	b103      	cbz	r3, 800c7d2 <_read_r+0x1e>
 800c7d0:	6023      	str	r3, [r4, #0]
 800c7d2:	bd38      	pop	{r3, r4, r5, pc}
 800c7d4:	20000c48 	.word	0x20000c48

0800c7d8 <_sbrk_r>:
 800c7d8:	b538      	push	{r3, r4, r5, lr}
 800c7da:	4d06      	ldr	r5, [pc, #24]	; (800c7f4 <_sbrk_r+0x1c>)
 800c7dc:	2300      	movs	r3, #0
 800c7de:	4604      	mov	r4, r0
 800c7e0:	4608      	mov	r0, r1
 800c7e2:	602b      	str	r3, [r5, #0]
 800c7e4:	f7f7 fa98 	bl	8003d18 <_sbrk>
 800c7e8:	1c43      	adds	r3, r0, #1
 800c7ea:	d102      	bne.n	800c7f2 <_sbrk_r+0x1a>
 800c7ec:	682b      	ldr	r3, [r5, #0]
 800c7ee:	b103      	cbz	r3, 800c7f2 <_sbrk_r+0x1a>
 800c7f0:	6023      	str	r3, [r4, #0]
 800c7f2:	bd38      	pop	{r3, r4, r5, pc}
 800c7f4:	20000c48 	.word	0x20000c48

0800c7f8 <_write_r>:
 800c7f8:	b538      	push	{r3, r4, r5, lr}
 800c7fa:	4d07      	ldr	r5, [pc, #28]	; (800c818 <_write_r+0x20>)
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	4608      	mov	r0, r1
 800c800:	4611      	mov	r1, r2
 800c802:	2200      	movs	r2, #0
 800c804:	602a      	str	r2, [r5, #0]
 800c806:	461a      	mov	r2, r3
 800c808:	f7f7 fa35 	bl	8003c76 <_write>
 800c80c:	1c43      	adds	r3, r0, #1
 800c80e:	d102      	bne.n	800c816 <_write_r+0x1e>
 800c810:	682b      	ldr	r3, [r5, #0]
 800c812:	b103      	cbz	r3, 800c816 <_write_r+0x1e>
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	bd38      	pop	{r3, r4, r5, pc}
 800c818:	20000c48 	.word	0x20000c48

0800c81c <__errno>:
 800c81c:	4b01      	ldr	r3, [pc, #4]	; (800c824 <__errno+0x8>)
 800c81e:	6818      	ldr	r0, [r3, #0]
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	20000064 	.word	0x20000064

0800c828 <__libc_init_array>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	4d0d      	ldr	r5, [pc, #52]	; (800c860 <__libc_init_array+0x38>)
 800c82c:	4c0d      	ldr	r4, [pc, #52]	; (800c864 <__libc_init_array+0x3c>)
 800c82e:	1b64      	subs	r4, r4, r5
 800c830:	10a4      	asrs	r4, r4, #2
 800c832:	2600      	movs	r6, #0
 800c834:	42a6      	cmp	r6, r4
 800c836:	d109      	bne.n	800c84c <__libc_init_array+0x24>
 800c838:	4d0b      	ldr	r5, [pc, #44]	; (800c868 <__libc_init_array+0x40>)
 800c83a:	4c0c      	ldr	r4, [pc, #48]	; (800c86c <__libc_init_array+0x44>)
 800c83c:	f000 f9a8 	bl	800cb90 <_init>
 800c840:	1b64      	subs	r4, r4, r5
 800c842:	10a4      	asrs	r4, r4, #2
 800c844:	2600      	movs	r6, #0
 800c846:	42a6      	cmp	r6, r4
 800c848:	d105      	bne.n	800c856 <__libc_init_array+0x2e>
 800c84a:	bd70      	pop	{r4, r5, r6, pc}
 800c84c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c850:	4798      	blx	r3
 800c852:	3601      	adds	r6, #1
 800c854:	e7ee      	b.n	800c834 <__libc_init_array+0xc>
 800c856:	f855 3b04 	ldr.w	r3, [r5], #4
 800c85a:	4798      	blx	r3
 800c85c:	3601      	adds	r6, #1
 800c85e:	e7f2      	b.n	800c846 <__libc_init_array+0x1e>
 800c860:	0800d1dc 	.word	0x0800d1dc
 800c864:	0800d1dc 	.word	0x0800d1dc
 800c868:	0800d1dc 	.word	0x0800d1dc
 800c86c:	0800d1e0 	.word	0x0800d1e0

0800c870 <__retarget_lock_init_recursive>:
 800c870:	4770      	bx	lr

0800c872 <__retarget_lock_acquire_recursive>:
 800c872:	4770      	bx	lr

0800c874 <__retarget_lock_release_recursive>:
 800c874:	4770      	bx	lr

0800c876 <memcpy>:
 800c876:	440a      	add	r2, r1
 800c878:	4291      	cmp	r1, r2
 800c87a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c87e:	d100      	bne.n	800c882 <memcpy+0xc>
 800c880:	4770      	bx	lr
 800c882:	b510      	push	{r4, lr}
 800c884:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c888:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c88c:	4291      	cmp	r1, r2
 800c88e:	d1f9      	bne.n	800c884 <memcpy+0xe>
 800c890:	bd10      	pop	{r4, pc}
	...

0800c894 <_free_r>:
 800c894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c896:	2900      	cmp	r1, #0
 800c898:	d044      	beq.n	800c924 <_free_r+0x90>
 800c89a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c89e:	9001      	str	r0, [sp, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f1a1 0404 	sub.w	r4, r1, #4
 800c8a6:	bfb8      	it	lt
 800c8a8:	18e4      	addlt	r4, r4, r3
 800c8aa:	f7ff fccb 	bl	800c244 <__malloc_lock>
 800c8ae:	4a1e      	ldr	r2, [pc, #120]	; (800c928 <_free_r+0x94>)
 800c8b0:	9801      	ldr	r0, [sp, #4]
 800c8b2:	6813      	ldr	r3, [r2, #0]
 800c8b4:	b933      	cbnz	r3, 800c8c4 <_free_r+0x30>
 800c8b6:	6063      	str	r3, [r4, #4]
 800c8b8:	6014      	str	r4, [r2, #0]
 800c8ba:	b003      	add	sp, #12
 800c8bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8c0:	f7ff bcc6 	b.w	800c250 <__malloc_unlock>
 800c8c4:	42a3      	cmp	r3, r4
 800c8c6:	d908      	bls.n	800c8da <_free_r+0x46>
 800c8c8:	6825      	ldr	r5, [r4, #0]
 800c8ca:	1961      	adds	r1, r4, r5
 800c8cc:	428b      	cmp	r3, r1
 800c8ce:	bf01      	itttt	eq
 800c8d0:	6819      	ldreq	r1, [r3, #0]
 800c8d2:	685b      	ldreq	r3, [r3, #4]
 800c8d4:	1949      	addeq	r1, r1, r5
 800c8d6:	6021      	streq	r1, [r4, #0]
 800c8d8:	e7ed      	b.n	800c8b6 <_free_r+0x22>
 800c8da:	461a      	mov	r2, r3
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	b10b      	cbz	r3, 800c8e4 <_free_r+0x50>
 800c8e0:	42a3      	cmp	r3, r4
 800c8e2:	d9fa      	bls.n	800c8da <_free_r+0x46>
 800c8e4:	6811      	ldr	r1, [r2, #0]
 800c8e6:	1855      	adds	r5, r2, r1
 800c8e8:	42a5      	cmp	r5, r4
 800c8ea:	d10b      	bne.n	800c904 <_free_r+0x70>
 800c8ec:	6824      	ldr	r4, [r4, #0]
 800c8ee:	4421      	add	r1, r4
 800c8f0:	1854      	adds	r4, r2, r1
 800c8f2:	42a3      	cmp	r3, r4
 800c8f4:	6011      	str	r1, [r2, #0]
 800c8f6:	d1e0      	bne.n	800c8ba <_free_r+0x26>
 800c8f8:	681c      	ldr	r4, [r3, #0]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	6053      	str	r3, [r2, #4]
 800c8fe:	440c      	add	r4, r1
 800c900:	6014      	str	r4, [r2, #0]
 800c902:	e7da      	b.n	800c8ba <_free_r+0x26>
 800c904:	d902      	bls.n	800c90c <_free_r+0x78>
 800c906:	230c      	movs	r3, #12
 800c908:	6003      	str	r3, [r0, #0]
 800c90a:	e7d6      	b.n	800c8ba <_free_r+0x26>
 800c90c:	6825      	ldr	r5, [r4, #0]
 800c90e:	1961      	adds	r1, r4, r5
 800c910:	428b      	cmp	r3, r1
 800c912:	bf04      	itt	eq
 800c914:	6819      	ldreq	r1, [r3, #0]
 800c916:	685b      	ldreq	r3, [r3, #4]
 800c918:	6063      	str	r3, [r4, #4]
 800c91a:	bf04      	itt	eq
 800c91c:	1949      	addeq	r1, r1, r5
 800c91e:	6021      	streq	r1, [r4, #0]
 800c920:	6054      	str	r4, [r2, #4]
 800c922:	e7ca      	b.n	800c8ba <_free_r+0x26>
 800c924:	b003      	add	sp, #12
 800c926:	bd30      	pop	{r4, r5, pc}
 800c928:	20000b04 	.word	0x20000b04

0800c92c <__sflush_r>:
 800c92c:	898a      	ldrh	r2, [r1, #12]
 800c92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c932:	4605      	mov	r5, r0
 800c934:	0710      	lsls	r0, r2, #28
 800c936:	460c      	mov	r4, r1
 800c938:	d458      	bmi.n	800c9ec <__sflush_r+0xc0>
 800c93a:	684b      	ldr	r3, [r1, #4]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	dc05      	bgt.n	800c94c <__sflush_r+0x20>
 800c940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c942:	2b00      	cmp	r3, #0
 800c944:	dc02      	bgt.n	800c94c <__sflush_r+0x20>
 800c946:	2000      	movs	r0, #0
 800c948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c94c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c94e:	2e00      	cmp	r6, #0
 800c950:	d0f9      	beq.n	800c946 <__sflush_r+0x1a>
 800c952:	2300      	movs	r3, #0
 800c954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c958:	682f      	ldr	r7, [r5, #0]
 800c95a:	6a21      	ldr	r1, [r4, #32]
 800c95c:	602b      	str	r3, [r5, #0]
 800c95e:	d032      	beq.n	800c9c6 <__sflush_r+0x9a>
 800c960:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c962:	89a3      	ldrh	r3, [r4, #12]
 800c964:	075a      	lsls	r2, r3, #29
 800c966:	d505      	bpl.n	800c974 <__sflush_r+0x48>
 800c968:	6863      	ldr	r3, [r4, #4]
 800c96a:	1ac0      	subs	r0, r0, r3
 800c96c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c96e:	b10b      	cbz	r3, 800c974 <__sflush_r+0x48>
 800c970:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c972:	1ac0      	subs	r0, r0, r3
 800c974:	2300      	movs	r3, #0
 800c976:	4602      	mov	r2, r0
 800c978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c97a:	6a21      	ldr	r1, [r4, #32]
 800c97c:	4628      	mov	r0, r5
 800c97e:	47b0      	blx	r6
 800c980:	1c43      	adds	r3, r0, #1
 800c982:	89a3      	ldrh	r3, [r4, #12]
 800c984:	d106      	bne.n	800c994 <__sflush_r+0x68>
 800c986:	6829      	ldr	r1, [r5, #0]
 800c988:	291d      	cmp	r1, #29
 800c98a:	d82b      	bhi.n	800c9e4 <__sflush_r+0xb8>
 800c98c:	4a29      	ldr	r2, [pc, #164]	; (800ca34 <__sflush_r+0x108>)
 800c98e:	410a      	asrs	r2, r1
 800c990:	07d6      	lsls	r6, r2, #31
 800c992:	d427      	bmi.n	800c9e4 <__sflush_r+0xb8>
 800c994:	2200      	movs	r2, #0
 800c996:	6062      	str	r2, [r4, #4]
 800c998:	04d9      	lsls	r1, r3, #19
 800c99a:	6922      	ldr	r2, [r4, #16]
 800c99c:	6022      	str	r2, [r4, #0]
 800c99e:	d504      	bpl.n	800c9aa <__sflush_r+0x7e>
 800c9a0:	1c42      	adds	r2, r0, #1
 800c9a2:	d101      	bne.n	800c9a8 <__sflush_r+0x7c>
 800c9a4:	682b      	ldr	r3, [r5, #0]
 800c9a6:	b903      	cbnz	r3, 800c9aa <__sflush_r+0x7e>
 800c9a8:	6560      	str	r0, [r4, #84]	; 0x54
 800c9aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9ac:	602f      	str	r7, [r5, #0]
 800c9ae:	2900      	cmp	r1, #0
 800c9b0:	d0c9      	beq.n	800c946 <__sflush_r+0x1a>
 800c9b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9b6:	4299      	cmp	r1, r3
 800c9b8:	d002      	beq.n	800c9c0 <__sflush_r+0x94>
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	f7ff ff6a 	bl	800c894 <_free_r>
 800c9c0:	2000      	movs	r0, #0
 800c9c2:	6360      	str	r0, [r4, #52]	; 0x34
 800c9c4:	e7c0      	b.n	800c948 <__sflush_r+0x1c>
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	47b0      	blx	r6
 800c9cc:	1c41      	adds	r1, r0, #1
 800c9ce:	d1c8      	bne.n	800c962 <__sflush_r+0x36>
 800c9d0:	682b      	ldr	r3, [r5, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d0c5      	beq.n	800c962 <__sflush_r+0x36>
 800c9d6:	2b1d      	cmp	r3, #29
 800c9d8:	d001      	beq.n	800c9de <__sflush_r+0xb2>
 800c9da:	2b16      	cmp	r3, #22
 800c9dc:	d101      	bne.n	800c9e2 <__sflush_r+0xb6>
 800c9de:	602f      	str	r7, [r5, #0]
 800c9e0:	e7b1      	b.n	800c946 <__sflush_r+0x1a>
 800c9e2:	89a3      	ldrh	r3, [r4, #12]
 800c9e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9e8:	81a3      	strh	r3, [r4, #12]
 800c9ea:	e7ad      	b.n	800c948 <__sflush_r+0x1c>
 800c9ec:	690f      	ldr	r7, [r1, #16]
 800c9ee:	2f00      	cmp	r7, #0
 800c9f0:	d0a9      	beq.n	800c946 <__sflush_r+0x1a>
 800c9f2:	0793      	lsls	r3, r2, #30
 800c9f4:	680e      	ldr	r6, [r1, #0]
 800c9f6:	bf08      	it	eq
 800c9f8:	694b      	ldreq	r3, [r1, #20]
 800c9fa:	600f      	str	r7, [r1, #0]
 800c9fc:	bf18      	it	ne
 800c9fe:	2300      	movne	r3, #0
 800ca00:	eba6 0807 	sub.w	r8, r6, r7
 800ca04:	608b      	str	r3, [r1, #8]
 800ca06:	f1b8 0f00 	cmp.w	r8, #0
 800ca0a:	dd9c      	ble.n	800c946 <__sflush_r+0x1a>
 800ca0c:	6a21      	ldr	r1, [r4, #32]
 800ca0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca10:	4643      	mov	r3, r8
 800ca12:	463a      	mov	r2, r7
 800ca14:	4628      	mov	r0, r5
 800ca16:	47b0      	blx	r6
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	dc06      	bgt.n	800ca2a <__sflush_r+0xfe>
 800ca1c:	89a3      	ldrh	r3, [r4, #12]
 800ca1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca22:	81a3      	strh	r3, [r4, #12]
 800ca24:	f04f 30ff 	mov.w	r0, #4294967295
 800ca28:	e78e      	b.n	800c948 <__sflush_r+0x1c>
 800ca2a:	4407      	add	r7, r0
 800ca2c:	eba8 0800 	sub.w	r8, r8, r0
 800ca30:	e7e9      	b.n	800ca06 <__sflush_r+0xda>
 800ca32:	bf00      	nop
 800ca34:	dfbffffe 	.word	0xdfbffffe

0800ca38 <_fflush_r>:
 800ca38:	b538      	push	{r3, r4, r5, lr}
 800ca3a:	690b      	ldr	r3, [r1, #16]
 800ca3c:	4605      	mov	r5, r0
 800ca3e:	460c      	mov	r4, r1
 800ca40:	b913      	cbnz	r3, 800ca48 <_fflush_r+0x10>
 800ca42:	2500      	movs	r5, #0
 800ca44:	4628      	mov	r0, r5
 800ca46:	bd38      	pop	{r3, r4, r5, pc}
 800ca48:	b118      	cbz	r0, 800ca52 <_fflush_r+0x1a>
 800ca4a:	6a03      	ldr	r3, [r0, #32]
 800ca4c:	b90b      	cbnz	r3, 800ca52 <_fflush_r+0x1a>
 800ca4e:	f7ff fd1d 	bl	800c48c <__sinit>
 800ca52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d0f3      	beq.n	800ca42 <_fflush_r+0xa>
 800ca5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca5c:	07d0      	lsls	r0, r2, #31
 800ca5e:	d404      	bmi.n	800ca6a <_fflush_r+0x32>
 800ca60:	0599      	lsls	r1, r3, #22
 800ca62:	d402      	bmi.n	800ca6a <_fflush_r+0x32>
 800ca64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca66:	f7ff ff04 	bl	800c872 <__retarget_lock_acquire_recursive>
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	f7ff ff5d 	bl	800c92c <__sflush_r>
 800ca72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca74:	07da      	lsls	r2, r3, #31
 800ca76:	4605      	mov	r5, r0
 800ca78:	d4e4      	bmi.n	800ca44 <_fflush_r+0xc>
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	059b      	lsls	r3, r3, #22
 800ca7e:	d4e1      	bmi.n	800ca44 <_fflush_r+0xc>
 800ca80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca82:	f7ff fef7 	bl	800c874 <__retarget_lock_release_recursive>
 800ca86:	e7dd      	b.n	800ca44 <_fflush_r+0xc>

0800ca88 <__swhatbuf_r>:
 800ca88:	b570      	push	{r4, r5, r6, lr}
 800ca8a:	460c      	mov	r4, r1
 800ca8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca90:	2900      	cmp	r1, #0
 800ca92:	b096      	sub	sp, #88	; 0x58
 800ca94:	4615      	mov	r5, r2
 800ca96:	461e      	mov	r6, r3
 800ca98:	da0d      	bge.n	800cab6 <__swhatbuf_r+0x2e>
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800caa0:	f04f 0100 	mov.w	r1, #0
 800caa4:	bf0c      	ite	eq
 800caa6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800caaa:	2340      	movne	r3, #64	; 0x40
 800caac:	2000      	movs	r0, #0
 800caae:	6031      	str	r1, [r6, #0]
 800cab0:	602b      	str	r3, [r5, #0]
 800cab2:	b016      	add	sp, #88	; 0x58
 800cab4:	bd70      	pop	{r4, r5, r6, pc}
 800cab6:	466a      	mov	r2, sp
 800cab8:	f000 f848 	bl	800cb4c <_fstat_r>
 800cabc:	2800      	cmp	r0, #0
 800cabe:	dbec      	blt.n	800ca9a <__swhatbuf_r+0x12>
 800cac0:	9901      	ldr	r1, [sp, #4]
 800cac2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cac6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800caca:	4259      	negs	r1, r3
 800cacc:	4159      	adcs	r1, r3
 800cace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cad2:	e7eb      	b.n	800caac <__swhatbuf_r+0x24>

0800cad4 <__smakebuf_r>:
 800cad4:	898b      	ldrh	r3, [r1, #12]
 800cad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cad8:	079d      	lsls	r5, r3, #30
 800cada:	4606      	mov	r6, r0
 800cadc:	460c      	mov	r4, r1
 800cade:	d507      	bpl.n	800caf0 <__smakebuf_r+0x1c>
 800cae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cae4:	6023      	str	r3, [r4, #0]
 800cae6:	6123      	str	r3, [r4, #16]
 800cae8:	2301      	movs	r3, #1
 800caea:	6163      	str	r3, [r4, #20]
 800caec:	b002      	add	sp, #8
 800caee:	bd70      	pop	{r4, r5, r6, pc}
 800caf0:	ab01      	add	r3, sp, #4
 800caf2:	466a      	mov	r2, sp
 800caf4:	f7ff ffc8 	bl	800ca88 <__swhatbuf_r>
 800caf8:	9900      	ldr	r1, [sp, #0]
 800cafa:	4605      	mov	r5, r0
 800cafc:	4630      	mov	r0, r6
 800cafe:	f7ff fb21 	bl	800c144 <_malloc_r>
 800cb02:	b948      	cbnz	r0, 800cb18 <__smakebuf_r+0x44>
 800cb04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb08:	059a      	lsls	r2, r3, #22
 800cb0a:	d4ef      	bmi.n	800caec <__smakebuf_r+0x18>
 800cb0c:	f023 0303 	bic.w	r3, r3, #3
 800cb10:	f043 0302 	orr.w	r3, r3, #2
 800cb14:	81a3      	strh	r3, [r4, #12]
 800cb16:	e7e3      	b.n	800cae0 <__smakebuf_r+0xc>
 800cb18:	89a3      	ldrh	r3, [r4, #12]
 800cb1a:	6020      	str	r0, [r4, #0]
 800cb1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb20:	81a3      	strh	r3, [r4, #12]
 800cb22:	9b00      	ldr	r3, [sp, #0]
 800cb24:	6163      	str	r3, [r4, #20]
 800cb26:	9b01      	ldr	r3, [sp, #4]
 800cb28:	6120      	str	r0, [r4, #16]
 800cb2a:	b15b      	cbz	r3, 800cb44 <__smakebuf_r+0x70>
 800cb2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb30:	4630      	mov	r0, r6
 800cb32:	f000 f81d 	bl	800cb70 <_isatty_r>
 800cb36:	b128      	cbz	r0, 800cb44 <__smakebuf_r+0x70>
 800cb38:	89a3      	ldrh	r3, [r4, #12]
 800cb3a:	f023 0303 	bic.w	r3, r3, #3
 800cb3e:	f043 0301 	orr.w	r3, r3, #1
 800cb42:	81a3      	strh	r3, [r4, #12]
 800cb44:	89a3      	ldrh	r3, [r4, #12]
 800cb46:	431d      	orrs	r5, r3
 800cb48:	81a5      	strh	r5, [r4, #12]
 800cb4a:	e7cf      	b.n	800caec <__smakebuf_r+0x18>

0800cb4c <_fstat_r>:
 800cb4c:	b538      	push	{r3, r4, r5, lr}
 800cb4e:	4d07      	ldr	r5, [pc, #28]	; (800cb6c <_fstat_r+0x20>)
 800cb50:	2300      	movs	r3, #0
 800cb52:	4604      	mov	r4, r0
 800cb54:	4608      	mov	r0, r1
 800cb56:	4611      	mov	r1, r2
 800cb58:	602b      	str	r3, [r5, #0]
 800cb5a:	f7f7 f8b4 	bl	8003cc6 <_fstat>
 800cb5e:	1c43      	adds	r3, r0, #1
 800cb60:	d102      	bne.n	800cb68 <_fstat_r+0x1c>
 800cb62:	682b      	ldr	r3, [r5, #0]
 800cb64:	b103      	cbz	r3, 800cb68 <_fstat_r+0x1c>
 800cb66:	6023      	str	r3, [r4, #0]
 800cb68:	bd38      	pop	{r3, r4, r5, pc}
 800cb6a:	bf00      	nop
 800cb6c:	20000c48 	.word	0x20000c48

0800cb70 <_isatty_r>:
 800cb70:	b538      	push	{r3, r4, r5, lr}
 800cb72:	4d06      	ldr	r5, [pc, #24]	; (800cb8c <_isatty_r+0x1c>)
 800cb74:	2300      	movs	r3, #0
 800cb76:	4604      	mov	r4, r0
 800cb78:	4608      	mov	r0, r1
 800cb7a:	602b      	str	r3, [r5, #0]
 800cb7c:	f7f7 f8b3 	bl	8003ce6 <_isatty>
 800cb80:	1c43      	adds	r3, r0, #1
 800cb82:	d102      	bne.n	800cb8a <_isatty_r+0x1a>
 800cb84:	682b      	ldr	r3, [r5, #0]
 800cb86:	b103      	cbz	r3, 800cb8a <_isatty_r+0x1a>
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	bd38      	pop	{r3, r4, r5, pc}
 800cb8c:	20000c48 	.word	0x20000c48

0800cb90 <_init>:
 800cb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb92:	bf00      	nop
 800cb94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb96:	bc08      	pop	{r3}
 800cb98:	469e      	mov	lr, r3
 800cb9a:	4770      	bx	lr

0800cb9c <_fini>:
 800cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9e:	bf00      	nop
 800cba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cba2:	bc08      	pop	{r3}
 800cba4:	469e      	mov	lr, r3
 800cba6:	4770      	bx	lr
