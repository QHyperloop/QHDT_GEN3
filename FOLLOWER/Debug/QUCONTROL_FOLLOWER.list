
QUCONTROL_FOLLOWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8c8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800caa0  0800caa0  0001caa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0dc  0800d0dc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0dc  0800d0dc  0001d0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0e4  0800d0e4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0e4  0800d0e4  0001d0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0e8  0800d0e8  0001d0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800d0ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc4  20000068  0800d154  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e2c  0800d154  00020e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b83e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ecd  00000000  00000000  0004b919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002418  00000000  00000000  000507e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c2c  00000000  00000000  00052c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e7b0  00000000  00000000  0005482c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d08f  00000000  00000000  00082fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00125fa8  00000000  00000000  000b006b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a374  00000000  00000000  001d6014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001e0388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ca88 	.word	0x0800ca88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800ca88 	.word	0x0800ca88

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <acc_init>:
bno055_vec3_t mag = {0, 0, 0};
bno055_vec3_t grv = {0, 0, 0};
bno055_euler_t eul = {0, 0, 0};
bno055_vec4_t qua = {0, 0, 0};

error_handler acc_init(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	b0ae      	sub	sp, #184	; 0xb8
 8000518:	af02      	add	r7, sp, #8
	error_handler err;
	err = ACC_INIT_OK;
 800051a:	2306      	movs	r3, #6
 800051c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

    bno = (bno055_t){
 8000520:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <acc_init+0x80>)
 8000522:	4618      	mov	r0, r3
 8000524:	23ac      	movs	r3, #172	; 0xac
 8000526:	461a      	mov	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f00b ffe9 	bl	800c500 <memset>
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <acc_init+0x80>)
 8000530:	4a19      	ldr	r2, [pc, #100]	; (8000598 <acc_init+0x84>)
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	4b17      	ldr	r3, [pc, #92]	; (8000594 <acc_init+0x80>)
 8000536:	2208      	movs	r2, #8
 8000538:	711a      	strb	r2, [r3, #4]
 800053a:	4b16      	ldr	r3, [pc, #88]	; (8000594 <acc_init+0x80>)
 800053c:	2228      	movs	r2, #40	; 0x28
 800053e:	719a      	strb	r2, [r3, #6]
    	.i2c = &hi2c3, .addr = IMU_ID, .mode = BNO_MODE_IMU, ._temp_unit = 0,
    };

	 if(bno055_init(&bno) == BNO_OK){
 8000540:	4814      	ldr	r0, [pc, #80]	; (8000594 <acc_init+0x80>)
 8000542:	f000 f82f 	bl	80005a4 <bno055_init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d10e      	bne.n	800056a <acc_init+0x56>
	    printf("[+] BNO055 init success\r\n");
 800054c:	4813      	ldr	r0, [pc, #76]	; (800059c <acc_init+0x88>)
 800054e:	f00b fef7 	bl	800c340 <puts>
		err = ACC_INIT_ERR;
	    return err;
	 }


	 if(bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG) != BNO_OK) {
 8000552:	2300      	movs	r3, #0
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2300      	movs	r3, #0
 8000558:	2200      	movs	r2, #0
 800055a:	2100      	movs	r1, #0
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <acc_init+0x80>)
 800055e:	f001 faeb 	bl	8001b38 <bno055_set_unit>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00c      	beq.n	8000582 <acc_init+0x6e>
 8000568:	e005      	b.n	8000576 <acc_init+0x62>
		err = ACC_INIT_ERR;
 800056a:	2307      	movs	r3, #7
 800056c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	    return err;
 8000570:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000574:	e00a      	b.n	800058c <acc_init+0x78>
		 err = ACC_UNIT_ERR;
 8000576:	2308      	movs	r3, #8
 8000578:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		 return err;
 800057c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000580:	e004      	b.n	800058c <acc_init+0x78>
	 }else{
		 printf("[BNO] Unit selection success\r\n");
 8000582:	4807      	ldr	r0, [pc, #28]	; (80005a0 <acc_init+0x8c>)
 8000584:	f00b fedc 	bl	800c340 <puts>
	 }
	 return err;
 8000588:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf

}
 800058c:	4618      	mov	r0, r3
 800058e:	37b0      	adds	r7, #176	; 0xb0
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000084 	.word	0x20000084
 8000598:	2000060c 	.word	0x2000060c
 800059c:	0800caa0 	.word	0x0800caa0
 80005a0:	0800cabc 	.word	0x0800cabc

080005a4 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b0af      	sub	sp, #188	; 0xbc
 80005a8:	af2a      	add	r7, sp, #168	; 0xa8
 80005aa:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	799b      	ldrb	r3, [r3, #6]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 80005bc:	687c      	ldr	r4, [r7, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	9329      	str	r3, [sp, #164]	; 0xa4
 80005c2:	f107 030e 	add.w	r3, r7, #14
 80005c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80005c8:	2300      	movs	r3, #0
 80005ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80005cc:	4668      	mov	r0, sp
 80005ce:	f104 0310 	add.w	r3, r4, #16
 80005d2:	229c      	movs	r2, #156	; 0x9c
 80005d4:	4619      	mov	r1, r3
 80005d6:	f00c f80e 	bl	800c5f6 <memcpy>
 80005da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005de:	f001 fbb6 	bl	8001d4e <bno055_read_regs>
 80005e2:	4603      	mov	r3, r0
 80005e4:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <bno055_init+0x4c>
        return err;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	e0b6      	b.n	800075e <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	2ba0      	cmp	r3, #160	; 0xa0
 80005f4:	d001      	beq.n	80005fa <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 80005f6:	2306      	movs	r3, #6
 80005f8:	e0b1      	b.n	800075e <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 80005fa:	2100      	movs	r1, #0
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f001 fa74 	bl	8001aea <bno055_set_opmode>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <bno055_init+0x6c>
        return err;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	e0a6      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8000610:	2002      	movs	r0, #2
 8000612:	f004 fe2b 	bl	800526c <HAL_Delay>
    bno055_reset(imu);
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f001 fb53 	bl	8001cc2 <bno055_reset>
    HAL_Delay(5000);
 800061c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000620:	f004 fe24 	bl	800526c <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000624:	2100      	movs	r1, #0
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f001 faee 	bl	8001c08 <bno055_set_pwr_mode>
 800062c:	4603      	mov	r3, r0
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <bno055_init+0x96>
        return err;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	e091      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 800063a:	200a      	movs	r0, #10
 800063c:	f004 fe16 	bl	800526c <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000640:	2100      	movs	r1, #0
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f001 fbe6 	bl	8001e14 <bno055_set_page>
 8000648:	4603      	mov	r3, r0
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <bno055_init+0xb2>
        return err;
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	e083      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8000656:	200c      	movs	r0, #12
 8000658:	f004 fe08 	bl	800526c <HAL_Delay>
    bno055_on(imu);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f001 fb53 	bl	8001d08 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	4619      	mov	r1, r3
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f001 fa3e 	bl	8001aea <bno055_set_opmode>
 800066e:	4603      	mov	r3, r0
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <bno055_init+0xd8>
        return err;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	e070      	b.n	800075e <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800067c:	2018      	movs	r0, #24
 800067e:	f004 fdf5 	bl	800526c <HAL_Delay>

    imu->temperature = &bno055_temperature;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a38      	ldr	r2, [pc, #224]	; (8000768 <bno055_init+0x1c4>)
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a38      	ldr	r2, [pc, #224]	; (800076c <bno055_init+0x1c8>)
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a37      	ldr	r2, [pc, #220]	; (8000770 <bno055_init+0x1cc>)
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a37      	ldr	r2, [pc, #220]	; (8000774 <bno055_init+0x1d0>)
 8000698:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a36      	ldr	r2, [pc, #216]	; (8000778 <bno055_init+0x1d4>)
 800069e:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a36      	ldr	r2, [pc, #216]	; (800077c <bno055_init+0x1d8>)
 80006a4:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a35      	ldr	r2, [pc, #212]	; (8000780 <bno055_init+0x1dc>)
 80006aa:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a35      	ldr	r2, [pc, #212]	; (8000784 <bno055_init+0x1e0>)
 80006b0:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <bno055_init+0x1e4>)
 80006b6:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a34      	ldr	r2, [pc, #208]	; (800078c <bno055_init+0x1e8>)
 80006bc:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a33      	ldr	r2, [pc, #204]	; (8000790 <bno055_init+0x1ec>)
 80006c2:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <bno055_init+0x1f0>)
 80006c8:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a32      	ldr	r2, [pc, #200]	; (8000798 <bno055_init+0x1f4>)
 80006ce:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a32      	ldr	r2, [pc, #200]	; (800079c <bno055_init+0x1f8>)
 80006d4:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a31      	ldr	r2, [pc, #196]	; (80007a0 <bno055_init+0x1fc>)
 80006da:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <bno055_init+0x200>)
 80006e0:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a30      	ldr	r2, [pc, #192]	; (80007a8 <bno055_init+0x204>)
 80006e6:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a30      	ldr	r2, [pc, #192]	; (80007ac <bno055_init+0x208>)
 80006ec:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a2f      	ldr	r2, [pc, #188]	; (80007b0 <bno055_init+0x20c>)
 80006f2:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a2f      	ldr	r2, [pc, #188]	; (80007b4 <bno055_init+0x210>)
 80006f8:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a2e      	ldr	r2, [pc, #184]	; (80007b8 <bno055_init+0x214>)
 80006fe:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a2e      	ldr	r2, [pc, #184]	; (80007bc <bno055_init+0x218>)
 8000704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a2d      	ldr	r2, [pc, #180]	; (80007c0 <bno055_init+0x21c>)
 800070c:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a2c      	ldr	r2, [pc, #176]	; (80007c4 <bno055_init+0x220>)
 8000712:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <bno055_init+0x224>)
 8000718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a2b      	ldr	r2, [pc, #172]	; (80007cc <bno055_init+0x228>)
 8000720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <bno055_init+0x22c>)
 8000728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a29      	ldr	r2, [pc, #164]	; (80007d4 <bno055_init+0x230>)
 8000730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a28      	ldr	r2, [pc, #160]	; (80007d8 <bno055_init+0x234>)
 8000738:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a27      	ldr	r2, [pc, #156]	; (80007dc <bno055_init+0x238>)
 8000740:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <bno055_init+0x23c>)
 8000748:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <bno055_init+0x240>)
 8000750:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a24      	ldr	r2, [pc, #144]	; (80007e8 <bno055_init+0x244>)
 8000758:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	bd90      	pop	{r4, r7, pc}
 8000766:	bf00      	nop
 8000768:	080007ed 	.word	0x080007ed
 800076c:	08000855 	.word	0x08000855
 8000770:	080008d5 	.word	0x080008d5
 8000774:	08000955 	.word	0x08000955
 8000778:	080009d5 	.word	0x080009d5
 800077c:	08000aa1 	.word	0x08000aa1
 8000780:	08000b21 	.word	0x08000b21
 8000784:	08000ba1 	.word	0x08000ba1
 8000788:	08000c21 	.word	0x08000c21
 800078c:	08000ced 	.word	0x08000ced
 8000790:	08000d6d 	.word	0x08000d6d
 8000794:	08000ded 	.word	0x08000ded
 8000798:	08000e6d 	.word	0x08000e6d
 800079c:	08000f39 	.word	0x08000f39
 80007a0:	08000fa5 	.word	0x08000fa5
 80007a4:	08001011 	.word	0x08001011
 80007a8:	0800107d 	.word	0x0800107d
 80007ac:	08001131 	.word	0x08001131
 80007b0:	080011b5 	.word	0x080011b5
 80007b4:	08001239 	.word	0x08001239
 80007b8:	080012bd 	.word	0x080012bd
 80007bc:	08001389 	.word	0x08001389
 80007c0:	0800140d 	.word	0x0800140d
 80007c4:	08001491 	.word	0x08001491
 80007c8:	08001515 	.word	0x08001515
 80007cc:	080015e1 	.word	0x080015e1
 80007d0:	08001651 	.word	0x08001651
 80007d4:	080016c1 	.word	0x080016c1
 80007d8:	08001731 	.word	0x08001731
 80007dc:	080017a1 	.word	0x080017a1
 80007e0:	0800187d 	.word	0x0800187d
 80007e4:	0800194d 	.word	0x0800194d
 80007e8:	08001a1b 	.word	0x08001a1b

080007ec <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b0af      	sub	sp, #188	; 0xbc
 80007f0:	af2a      	add	r7, sp, #168	; 0xa8
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 80007fa:	687c      	ldr	r4, [r7, #4]
 80007fc:	2301      	movs	r3, #1
 80007fe:	9329      	str	r3, [sp, #164]	; 0xa4
 8000800:	f107 030e 	add.w	r3, r7, #14
 8000804:	9328      	str	r3, [sp, #160]	; 0xa0
 8000806:	2334      	movs	r3, #52	; 0x34
 8000808:	9327      	str	r3, [sp, #156]	; 0x9c
 800080a:	4668      	mov	r0, sp
 800080c:	f104 0310 	add.w	r3, r4, #16
 8000810:	229c      	movs	r2, #156	; 0x9c
 8000812:	4619      	mov	r1, r3
 8000814:	f00b feef 	bl	800c5f6 <memcpy>
 8000818:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800081c:	f001 fa97 	bl	8001d4e <bno055_read_regs>
 8000820:	4603      	mov	r3, r0
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <bno055_temperature+0x42>
        return err;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	e00d      	b.n	800084a <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7bdb      	ldrb	r3, [r3, #15]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d004      	beq.n	8000840 <bno055_temperature+0x54>
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	b25b      	sxtb	r3, r3
 800083e:	e001      	b.n	8000844 <bno055_temperature+0x58>
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	b25b      	sxtb	r3, r3
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bd90      	pop	{r4, r7, pc}
	...

08000854 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b0af      	sub	sp, #188	; 0xbc
 8000858:	af2a      	add	r7, sp, #168	; 0xa8
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 800085e:	687c      	ldr	r4, [r7, #4]
 8000860:	2302      	movs	r3, #2
 8000862:	9329      	str	r3, [sp, #164]	; 0xa4
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	9328      	str	r3, [sp, #160]	; 0xa0
 800086a:	2308      	movs	r3, #8
 800086c:	9327      	str	r3, [sp, #156]	; 0x9c
 800086e:	4668      	mov	r0, sp
 8000870:	f104 0310 	add.w	r3, r4, #16
 8000874:	229c      	movs	r2, #156	; 0x9c
 8000876:	4619      	mov	r1, r3
 8000878:	f00b febd 	bl	800c5f6 <memcpy>
 800087c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000880:	f001 fa65 	bl	8001d4e <bno055_read_regs>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <bno055_acc_x+0x3e>
        return err;
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	e019      	b.n	80008c6 <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000892:	7b7b      	ldrb	r3, [r7, #13]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	b21a      	sxth	r2, r3
 8000898:	7b3b      	ldrb	r3, [r7, #12]
 800089a:	b21b      	sxth	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b21b      	sxth	r3, r3
 80008a0:	ee07 3a90 	vmov	s15, r3
 80008a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <bno055_acc_x+0x62>
 80008b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80008d0 <bno055_acc_x+0x7c>
 80008b4:	e001      	b.n	80008ba <bno055_acc_x+0x66>
 80008b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80008ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80008c4:	2300      	movs	r3, #0
};
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	bf00      	nop
 80008d0:	42c80000 	.word	0x42c80000

080008d4 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b0af      	sub	sp, #188	; 0xbc
 80008d8:	af2a      	add	r7, sp, #168	; 0xa8
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80008de:	687c      	ldr	r4, [r7, #4]
 80008e0:	2302      	movs	r3, #2
 80008e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80008ea:	230a      	movs	r3, #10
 80008ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80008ee:	4668      	mov	r0, sp
 80008f0:	f104 0310 	add.w	r3, r4, #16
 80008f4:	229c      	movs	r2, #156	; 0x9c
 80008f6:	4619      	mov	r1, r3
 80008f8:	f00b fe7d 	bl	800c5f6 <memcpy>
 80008fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000900:	f001 fa25 	bl	8001d4e <bno055_read_regs>
 8000904:	4603      	mov	r3, r0
 8000906:	73fb      	strb	r3, [r7, #15]
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <bno055_acc_y+0x3e>
        return err;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	e019      	b.n	8000946 <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000912:	7b7b      	ldrb	r3, [r7, #13]
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	b21a      	sxth	r2, r3
 8000918:	7b3b      	ldrb	r3, [r7, #12]
 800091a:	b21b      	sxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b21b      	sxth	r3, r3
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <bno055_acc_y+0x62>
 8000930:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000950 <bno055_acc_y+0x7c>
 8000934:	e001      	b.n	800093a <bno055_acc_y+0x66>
 8000936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800093a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000944:	2300      	movs	r3, #0
};
 8000946:	4618      	mov	r0, r3
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	bf00      	nop
 8000950:	42c80000 	.word	0x42c80000

08000954 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b0af      	sub	sp, #188	; 0xbc
 8000958:	af2a      	add	r7, sp, #168	; 0xa8
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800095e:	687c      	ldr	r4, [r7, #4]
 8000960:	2302      	movs	r3, #2
 8000962:	9329      	str	r3, [sp, #164]	; 0xa4
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	9328      	str	r3, [sp, #160]	; 0xa0
 800096a:	230c      	movs	r3, #12
 800096c:	9327      	str	r3, [sp, #156]	; 0x9c
 800096e:	4668      	mov	r0, sp
 8000970:	f104 0310 	add.w	r3, r4, #16
 8000974:	229c      	movs	r2, #156	; 0x9c
 8000976:	4619      	mov	r1, r3
 8000978:	f00b fe3d 	bl	800c5f6 <memcpy>
 800097c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000980:	f001 f9e5 	bl	8001d4e <bno055_read_regs>
 8000984:	4603      	mov	r3, r0
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <bno055_acc_z+0x3e>
        return err;
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	e019      	b.n	80009c6 <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000992:	7b7b      	ldrb	r3, [r7, #13]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b21a      	sxth	r2, r3
 8000998:	7b3b      	ldrb	r3, [r7, #12]
 800099a:	b21b      	sxth	r3, r3
 800099c:	4313      	orrs	r3, r2
 800099e:	b21b      	sxth	r3, r3
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <bno055_acc_z+0x62>
 80009b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80009d0 <bno055_acc_z+0x7c>
 80009b4:	e001      	b.n	80009ba <bno055_acc_z+0x66>
 80009b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80009ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80009c4:	2300      	movs	r3, #0
};
 80009c6:	4618      	mov	r0, r3
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	bf00      	nop
 80009d0:	42c80000 	.word	0x42c80000

080009d4 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b0b1      	sub	sp, #196	; 0xc4
 80009d8:	af2a      	add	r7, sp, #168	; 0xa8
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 80009de:	687c      	ldr	r4, [r7, #4]
 80009e0:	2306      	movs	r3, #6
 80009e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80009ea:	2308      	movs	r3, #8
 80009ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80009ee:	4668      	mov	r0, sp
 80009f0:	f104 0310 	add.w	r3, r4, #16
 80009f4:	229c      	movs	r2, #156	; 0x9c
 80009f6:	4619      	mov	r1, r3
 80009f8:	f00b fdfd 	bl	800c5f6 <memcpy>
 80009fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a00:	f001 f9a5 	bl	8001d4e <bno055_read_regs>
 8000a04:	4603      	mov	r3, r0
 8000a06:	75fb      	strb	r3, [r7, #23]
 8000a08:	7dfb      	ldrb	r3, [r7, #23]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <bno055_acc+0x3e>
        return err;
 8000a0e:	7dfb      	ldrb	r3, [r7, #23]
 8000a10:	e03f      	b.n	8000a92 <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <bno055_acc+0x4a>
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <bno055_acc+0xc8>)
 8000a1c:	e001      	b.n	8000a22 <bno055_acc+0x4e>
 8000a1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000a22:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000a24:	7a7b      	ldrb	r3, [r7, #9]
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	7a3b      	ldrb	r3, [r7, #8]
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000a48:	7afb      	ldrb	r3, [r7, #11]
 8000a4a:	021b      	lsls	r3, r3, #8
 8000a4c:	b21a      	sxth	r2, r3
 8000a4e:	7abb      	ldrb	r3, [r7, #10]
 8000a50:	b21b      	sxth	r3, r3
 8000a52:	4313      	orrs	r3, r2
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000a6c:	7b7b      	ldrb	r3, [r7, #13]
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	b21a      	sxth	r2, r3
 8000a72:	7b3b      	ldrb	r3, [r7, #12]
 8000a74:	b21b      	sxth	r3, r3
 8000a76:	4313      	orrs	r3, r2
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	ee07 3a90 	vmov	s15, r3
 8000a7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a82:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000a90:	2300      	movs	r3, #0
};
 8000a92:	4618      	mov	r0, r3
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	42c80000 	.word	0x42c80000

08000aa0 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b0af      	sub	sp, #188	; 0xbc
 8000aa4:	af2a      	add	r7, sp, #168	; 0xa8
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000aaa:	687c      	ldr	r4, [r7, #4]
 8000aac:	2302      	movs	r3, #2
 8000aae:	9329      	str	r3, [sp, #164]	; 0xa4
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	9328      	str	r3, [sp, #160]	; 0xa0
 8000ab6:	2328      	movs	r3, #40	; 0x28
 8000ab8:	9327      	str	r3, [sp, #156]	; 0x9c
 8000aba:	4668      	mov	r0, sp
 8000abc:	f104 0310 	add.w	r3, r4, #16
 8000ac0:	229c      	movs	r2, #156	; 0x9c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f00b fd97 	bl	800c5f6 <memcpy>
 8000ac8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000acc:	f001 f93f 	bl	8001d4e <bno055_read_regs>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <bno055_linear_acc_x+0x3e>
        return err;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	e019      	b.n	8000b12 <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000ade:	7b7b      	ldrb	r3, [r7, #13]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	7b3b      	ldrb	r3, [r7, #12]
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	ee07 3a90 	vmov	s15, r3
 8000af0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <bno055_linear_acc_x+0x62>
 8000afc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000b1c <bno055_linear_acc_x+0x7c>
 8000b00:	e001      	b.n	8000b06 <bno055_linear_acc_x+0x66>
 8000b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000b10:	2300      	movs	r3, #0
};
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	42c80000 	.word	0x42c80000

08000b20 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b0af      	sub	sp, #188	; 0xbc
 8000b24:	af2a      	add	r7, sp, #168	; 0xa8
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000b2a:	687c      	ldr	r4, [r7, #4]
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	9328      	str	r3, [sp, #160]	; 0xa0
 8000b36:	232a      	movs	r3, #42	; 0x2a
 8000b38:	9327      	str	r3, [sp, #156]	; 0x9c
 8000b3a:	4668      	mov	r0, sp
 8000b3c:	f104 0310 	add.w	r3, r4, #16
 8000b40:	229c      	movs	r2, #156	; 0x9c
 8000b42:	4619      	mov	r1, r3
 8000b44:	f00b fd57 	bl	800c5f6 <memcpy>
 8000b48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b4c:	f001 f8ff 	bl	8001d4e <bno055_read_regs>
 8000b50:	4603      	mov	r3, r0
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <bno055_linear_acc_y+0x3e>
        return err;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	e019      	b.n	8000b92 <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b5e:	7b7b      	ldrb	r3, [r7, #13]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	7b3b      	ldrb	r3, [r7, #12]
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <bno055_linear_acc_y+0x62>
 8000b7c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000b9c <bno055_linear_acc_y+0x7c>
 8000b80:	e001      	b.n	8000b86 <bno055_linear_acc_y+0x66>
 8000b82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000b90:	2300      	movs	r3, #0
};
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd90      	pop	{r4, r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	42c80000 	.word	0x42c80000

08000ba0 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b0af      	sub	sp, #188	; 0xbc
 8000ba4:	af2a      	add	r7, sp, #168	; 0xa8
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000baa:	687c      	ldr	r4, [r7, #4]
 8000bac:	2302      	movs	r3, #2
 8000bae:	9329      	str	r3, [sp, #164]	; 0xa4
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	9328      	str	r3, [sp, #160]	; 0xa0
 8000bb6:	232c      	movs	r3, #44	; 0x2c
 8000bb8:	9327      	str	r3, [sp, #156]	; 0x9c
 8000bba:	4668      	mov	r0, sp
 8000bbc:	f104 0310 	add.w	r3, r4, #16
 8000bc0:	229c      	movs	r2, #156	; 0x9c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f00b fd17 	bl	800c5f6 <memcpy>
 8000bc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bcc:	f001 f8bf 	bl	8001d4e <bno055_read_regs>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <bno055_linear_acc_z+0x3e>
        return err;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	e019      	b.n	8000c12 <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000bde:	7b7b      	ldrb	r3, [r7, #13]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	7b3b      	ldrb	r3, [r7, #12]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	ee07 3a90 	vmov	s15, r3
 8000bf0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <bno055_linear_acc_z+0x62>
 8000bfc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000c1c <bno055_linear_acc_z+0x7c>
 8000c00:	e001      	b.n	8000c06 <bno055_linear_acc_z+0x66>
 8000c02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000c10:	2300      	movs	r3, #0
};
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	42c80000 	.word	0x42c80000

08000c20 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b0b1      	sub	sp, #196	; 0xc4
 8000c24:	af2a      	add	r7, sp, #168	; 0xa8
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000c2a:	687c      	ldr	r4, [r7, #4]
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	9328      	str	r3, [sp, #160]	; 0xa0
 8000c36:	2328      	movs	r3, #40	; 0x28
 8000c38:	9327      	str	r3, [sp, #156]	; 0x9c
 8000c3a:	4668      	mov	r0, sp
 8000c3c:	f104 0310 	add.w	r3, r4, #16
 8000c40:	229c      	movs	r2, #156	; 0x9c
 8000c42:	4619      	mov	r1, r3
 8000c44:	f00b fcd7 	bl	800c5f6 <memcpy>
 8000c48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c4c:	f001 f87f 	bl	8001d4e <bno055_read_regs>
 8000c50:	4603      	mov	r3, r0
 8000c52:	75fb      	strb	r3, [r7, #23]
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <bno055_linear_acc+0x3e>
        return err;
 8000c5a:	7dfb      	ldrb	r3, [r7, #23]
 8000c5c:	e03f      	b.n	8000cde <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <bno055_linear_acc+0x4a>
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <bno055_linear_acc+0xc8>)
 8000c68:	e001      	b.n	8000c6e <bno055_linear_acc+0x4e>
 8000c6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000c6e:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000c70:	7a7b      	ldrb	r3, [r7, #9]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	7a3b      	ldrb	r3, [r7, #8]
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c86:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000c94:	7afb      	ldrb	r3, [r7, #11]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	7abb      	ldrb	r3, [r7, #10]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000caa:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000cb8:	7b7b      	ldrb	r3, [r7, #13]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	7b3b      	ldrb	r3, [r7, #12]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	ee07 3a90 	vmov	s15, r3
 8000cca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cce:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000cdc:	2300      	movs	r3, #0
};
 8000cde:	4618      	mov	r0, r3
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	42c80000 	.word	0x42c80000

08000cec <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b0af      	sub	sp, #188	; 0xbc
 8000cf0:	af2a      	add	r7, sp, #168	; 0xa8
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000cf6:	687c      	ldr	r4, [r7, #4]
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	9329      	str	r3, [sp, #164]	; 0xa4
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	9328      	str	r3, [sp, #160]	; 0xa0
 8000d02:	2314      	movs	r3, #20
 8000d04:	9327      	str	r3, [sp, #156]	; 0x9c
 8000d06:	4668      	mov	r0, sp
 8000d08:	f104 0310 	add.w	r3, r4, #16
 8000d0c:	229c      	movs	r2, #156	; 0x9c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f00b fc71 	bl	800c5f6 <memcpy>
 8000d14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d18:	f001 f819 	bl	8001d4e <bno055_read_regs>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <bno055_gyro_x+0x3e>
        return err;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	e019      	b.n	8000d5e <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d2a:	7b7b      	ldrb	r3, [r7, #13]
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	7b3b      	ldrb	r3, [r7, #12]
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <bno055_gyro_x+0x62>
 8000d48:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000d4c:	e001      	b.n	8000d52 <bno055_gyro_x+0x66>
 8000d4e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000d68 <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000d5c:	2300      	movs	r3, #0
};
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd90      	pop	{r4, r7, pc}
 8000d66:	bf00      	nop
 8000d68:	44610000 	.word	0x44610000

08000d6c <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b0af      	sub	sp, #188	; 0xbc
 8000d70:	af2a      	add	r7, sp, #168	; 0xa8
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000d76:	687c      	ldr	r4, [r7, #4]
 8000d78:	2302      	movs	r3, #2
 8000d7a:	9329      	str	r3, [sp, #164]	; 0xa4
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	9328      	str	r3, [sp, #160]	; 0xa0
 8000d82:	2316      	movs	r3, #22
 8000d84:	9327      	str	r3, [sp, #156]	; 0x9c
 8000d86:	4668      	mov	r0, sp
 8000d88:	f104 0310 	add.w	r3, r4, #16
 8000d8c:	229c      	movs	r2, #156	; 0x9c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f00b fc31 	bl	800c5f6 <memcpy>
 8000d94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d98:	f000 ffd9 	bl	8001d4e <bno055_read_regs>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <bno055_gyro_y+0x3e>
        return err;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	e019      	b.n	8000dde <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000daa:	7b7b      	ldrb	r3, [r7, #13]
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	b21a      	sxth	r2, r3
 8000db0:	7b3b      	ldrb	r3, [r7, #12]
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <bno055_gyro_y+0x62>
 8000dc8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000dcc:	e001      	b.n	8000dd2 <bno055_gyro_y+0x66>
 8000dce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000de8 <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000ddc:	2300      	movs	r3, #0
};
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd90      	pop	{r4, r7, pc}
 8000de6:	bf00      	nop
 8000de8:	44610000 	.word	0x44610000

08000dec <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b0af      	sub	sp, #188	; 0xbc
 8000df0:	af2a      	add	r7, sp, #168	; 0xa8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000df6:	687c      	ldr	r4, [r7, #4]
 8000df8:	2302      	movs	r3, #2
 8000dfa:	9329      	str	r3, [sp, #164]	; 0xa4
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	9328      	str	r3, [sp, #160]	; 0xa0
 8000e02:	2318      	movs	r3, #24
 8000e04:	9327      	str	r3, [sp, #156]	; 0x9c
 8000e06:	4668      	mov	r0, sp
 8000e08:	f104 0310 	add.w	r3, r4, #16
 8000e0c:	229c      	movs	r2, #156	; 0x9c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f00b fbf1 	bl	800c5f6 <memcpy>
 8000e14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e18:	f000 ff99 	bl	8001d4e <bno055_read_regs>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <bno055_gyro_z+0x3e>
        return err;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	e019      	b.n	8000e5e <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e2a:	7b7b      	ldrb	r3, [r7, #13]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	7b3b      	ldrb	r3, [r7, #12]
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <bno055_gyro_z+0x62>
 8000e48:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000e4c:	e001      	b.n	8000e52 <bno055_gyro_z+0x66>
 8000e4e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000e68 <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000e5c:	2300      	movs	r3, #0
};
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	bf00      	nop
 8000e68:	44610000 	.word	0x44610000

08000e6c <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b0b1      	sub	sp, #196	; 0xc4
 8000e70:	af2a      	add	r7, sp, #168	; 0xa8
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000e76:	687c      	ldr	r4, [r7, #4]
 8000e78:	2306      	movs	r3, #6
 8000e7a:	9329      	str	r3, [sp, #164]	; 0xa4
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	9328      	str	r3, [sp, #160]	; 0xa0
 8000e82:	2314      	movs	r3, #20
 8000e84:	9327      	str	r3, [sp, #156]	; 0x9c
 8000e86:	4668      	mov	r0, sp
 8000e88:	f104 0310 	add.w	r3, r4, #16
 8000e8c:	229c      	movs	r2, #156	; 0x9c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f00b fbb1 	bl	800c5f6 <memcpy>
 8000e94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e98:	f000 ff59 	bl	8001d4e <bno055_read_regs>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	75fb      	strb	r3, [r7, #23]
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <bno055_gyro+0x3e>
        return err;
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	e03f      	b.n	8000f2a <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d102      	bne.n	8000eb8 <bno055_gyro+0x4c>
 8000eb2:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8000eb6:	e000      	b.n	8000eba <bno055_gyro+0x4e>
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000eba:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000ebc:	7a7b      	ldrb	r3, [r7, #9]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	7a3b      	ldrb	r3, [r7, #8]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	ee07 3a90 	vmov	s15, r3
 8000ece:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ed2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000ee0:	7afb      	ldrb	r3, [r7, #11]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	7abb      	ldrb	r3, [r7, #10]
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ef6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000f04:	7b7b      	ldrb	r3, [r7, #13]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	7b3b      	ldrb	r3, [r7, #12]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	371c      	adds	r7, #28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	44610000 	.word	0x44610000

08000f38 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b0af      	sub	sp, #188	; 0xbc
 8000f3c:	af2a      	add	r7, sp, #168	; 0xa8
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000f42:	687c      	ldr	r4, [r7, #4]
 8000f44:	2302      	movs	r3, #2
 8000f46:	9329      	str	r3, [sp, #164]	; 0xa4
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	9328      	str	r3, [sp, #160]	; 0xa0
 8000f4e:	230e      	movs	r3, #14
 8000f50:	9327      	str	r3, [sp, #156]	; 0x9c
 8000f52:	4668      	mov	r0, sp
 8000f54:	f104 0310 	add.w	r3, r4, #16
 8000f58:	229c      	movs	r2, #156	; 0x9c
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f00b fb4b 	bl	800c5f6 <memcpy>
 8000f60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f64:	f000 fef3 	bl	8001d4e <bno055_read_regs>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <bno055_mag_x+0x3e>
        return err;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	e012      	b.n	8000f9c <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8000f76:	7b7b      	ldrb	r3, [r7, #13]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	7b3b      	ldrb	r3, [r7, #12]
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f8c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd90      	pop	{r4, r7, pc}

08000fa4 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b0af      	sub	sp, #188	; 0xbc
 8000fa8:	af2a      	add	r7, sp, #168	; 0xa8
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000fae:	687c      	ldr	r4, [r7, #4]
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	9329      	str	r3, [sp, #164]	; 0xa4
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	9328      	str	r3, [sp, #160]	; 0xa0
 8000fba:	2310      	movs	r3, #16
 8000fbc:	9327      	str	r3, [sp, #156]	; 0x9c
 8000fbe:	4668      	mov	r0, sp
 8000fc0:	f104 0310 	add.w	r3, r4, #16
 8000fc4:	229c      	movs	r2, #156	; 0x9c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f00b fb15 	bl	800c5f6 <memcpy>
 8000fcc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fd0:	f000 febd 	bl	8001d4e <bno055_read_regs>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <bno055_mag_y+0x3e>
        return err;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	e012      	b.n	8001008 <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	7b3b      	ldrb	r3, [r7, #12]
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000ffc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}

08001010 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b0af      	sub	sp, #188	; 0xbc
 8001014:	af2a      	add	r7, sp, #168	; 0xa8
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800101a:	687c      	ldr	r4, [r7, #4]
 800101c:	2302      	movs	r3, #2
 800101e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	9328      	str	r3, [sp, #160]	; 0xa0
 8001026:	2312      	movs	r3, #18
 8001028:	9327      	str	r3, [sp, #156]	; 0x9c
 800102a:	4668      	mov	r0, sp
 800102c:	f104 0310 	add.w	r3, r4, #16
 8001030:	229c      	movs	r2, #156	; 0x9c
 8001032:	4619      	mov	r1, r3
 8001034:	f00b fadf 	bl	800c5f6 <memcpy>
 8001038:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800103c:	f000 fe87 	bl	8001d4e <bno055_read_regs>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <bno055_mag_z+0x3e>
        return err;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	e012      	b.n	8001074 <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21a      	sxth	r2, r3
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21b      	sxth	r3, r3
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	bd90      	pop	{r4, r7, pc}

0800107c <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b0af      	sub	sp, #188	; 0xbc
 8001080:	af2a      	add	r7, sp, #168	; 0xa8
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001086:	687c      	ldr	r4, [r7, #4]
 8001088:	2306      	movs	r3, #6
 800108a:	9329      	str	r3, [sp, #164]	; 0xa4
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	9328      	str	r3, [sp, #160]	; 0xa0
 8001092:	230e      	movs	r3, #14
 8001094:	9327      	str	r3, [sp, #156]	; 0x9c
 8001096:	4668      	mov	r0, sp
 8001098:	f104 0310 	add.w	r3, r4, #16
 800109c:	229c      	movs	r2, #156	; 0x9c
 800109e:	4619      	mov	r1, r3
 80010a0:	f00b faa9 	bl	800c5f6 <memcpy>
 80010a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010a8:	f000 fe51 	bl	8001d4e <bno055_read_regs>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <bno055_mag+0x3e>
        return err;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	e036      	b.n	8001128 <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80010ba:	7a7b      	ldrb	r3, [r7, #9]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7a3b      	ldrb	r3, [r7, #8]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7abb      	ldrb	r3, [r7, #10]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001102:	7b7b      	ldrb	r3, [r7, #13]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	7b3b      	ldrb	r3, [r7, #12]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21b      	sxth	r3, r3
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001118:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800111c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001126:	2300      	movs	r3, #0
};
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bd90      	pop	{r4, r7, pc}

08001130 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b0b1      	sub	sp, #196	; 0xc4
 8001134:	af2a      	add	r7, sp, #168	; 0xa8
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 800113a:	687c      	ldr	r4, [r7, #4]
 800113c:	2302      	movs	r3, #2
 800113e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	9328      	str	r3, [sp, #160]	; 0xa0
 8001146:	232e      	movs	r3, #46	; 0x2e
 8001148:	9327      	str	r3, [sp, #156]	; 0x9c
 800114a:	4668      	mov	r0, sp
 800114c:	f104 0310 	add.w	r3, r4, #16
 8001150:	229c      	movs	r2, #156	; 0x9c
 8001152:	4619      	mov	r1, r3
 8001154:	f00b fa4f 	bl	800c5f6 <memcpy>
 8001158:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800115c:	f000 fdf7 	bl	8001d4e <bno055_read_regs>
 8001160:	4603      	mov	r3, r0
 8001162:	75fb      	strb	r3, [r7, #23]
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <bno055_gravity_x+0x3e>
        return err;
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	e01b      	b.n	80011a6 <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <bno055_gravity_x+0x4a>
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <bno055_gravity_x+0x80>)
 8001178:	e001      	b.n	800117e <bno055_gravity_x+0x4e>
 800117a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800117e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001180:	7b7b      	ldrb	r3, [r7, #13]
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	b21a      	sxth	r2, r3
 8001186:	7b3b      	ldrb	r3, [r7, #12]
 8001188:	b21b      	sxth	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b21b      	sxth	r3, r3
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001196:	ed97 7a04 	vldr	s14, [r7, #16]
 800119a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd90      	pop	{r4, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	42c80000 	.word	0x42c80000

080011b4 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b0b1      	sub	sp, #196	; 0xc4
 80011b8:	af2a      	add	r7, sp, #168	; 0xa8
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80011be:	687c      	ldr	r4, [r7, #4]
 80011c0:	2302      	movs	r3, #2
 80011c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80011ca:	2330      	movs	r3, #48	; 0x30
 80011cc:	9327      	str	r3, [sp, #156]	; 0x9c
 80011ce:	4668      	mov	r0, sp
 80011d0:	f104 0310 	add.w	r3, r4, #16
 80011d4:	229c      	movs	r2, #156	; 0x9c
 80011d6:	4619      	mov	r1, r3
 80011d8:	f00b fa0d 	bl	800c5f6 <memcpy>
 80011dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011e0:	f000 fdb5 	bl	8001d4e <bno055_read_regs>
 80011e4:	4603      	mov	r3, r0
 80011e6:	75fb      	strb	r3, [r7, #23]
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <bno055_gravity_y+0x3e>
        return err;
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	e01b      	b.n	800122a <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <bno055_gravity_y+0x4a>
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <bno055_gravity_y+0x80>)
 80011fc:	e001      	b.n	8001202 <bno055_gravity_y+0x4e>
 80011fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001202:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001204:	7b7b      	ldrb	r3, [r7, #13]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21a      	sxth	r2, r3
 800120a:	7b3b      	ldrb	r3, [r7, #12]
 800120c:	b21b      	sxth	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b21b      	sxth	r3, r3
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800121a:	ed97 7a04 	vldr	s14, [r7, #16]
 800121e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	bf00      	nop
 8001234:	42c80000 	.word	0x42c80000

08001238 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b0b1      	sub	sp, #196	; 0xc4
 800123c:	af2a      	add	r7, sp, #168	; 0xa8
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001242:	687c      	ldr	r4, [r7, #4]
 8001244:	2302      	movs	r3, #2
 8001246:	9329      	str	r3, [sp, #164]	; 0xa4
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	9328      	str	r3, [sp, #160]	; 0xa0
 800124e:	2332      	movs	r3, #50	; 0x32
 8001250:	9327      	str	r3, [sp, #156]	; 0x9c
 8001252:	4668      	mov	r0, sp
 8001254:	f104 0310 	add.w	r3, r4, #16
 8001258:	229c      	movs	r2, #156	; 0x9c
 800125a:	4619      	mov	r1, r3
 800125c:	f00b f9cb 	bl	800c5f6 <memcpy>
 8001260:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001264:	f000 fd73 	bl	8001d4e <bno055_read_regs>
 8001268:	4603      	mov	r3, r0
 800126a:	75fb      	strb	r3, [r7, #23]
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <bno055_gravity_z+0x3e>
        return err;
 8001272:	7dfb      	ldrb	r3, [r7, #23]
 8001274:	e01b      	b.n	80012ae <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <bno055_gravity_z+0x4a>
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <bno055_gravity_z+0x80>)
 8001280:	e001      	b.n	8001286 <bno055_gravity_z+0x4e>
 8001282:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001286:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001288:	7b7b      	ldrb	r3, [r7, #13]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	7b3b      	ldrb	r3, [r7, #12]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21b      	sxth	r3, r3
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800129e:	ed97 7a04 	vldr	s14, [r7, #16]
 80012a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd90      	pop	{r4, r7, pc}
 80012b6:	bf00      	nop
 80012b8:	42c80000 	.word	0x42c80000

080012bc <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b0b1      	sub	sp, #196	; 0xc4
 80012c0:	af2a      	add	r7, sp, #168	; 0xa8
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 80012c6:	687c      	ldr	r4, [r7, #4]
 80012c8:	2306      	movs	r3, #6
 80012ca:	9329      	str	r3, [sp, #164]	; 0xa4
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	9328      	str	r3, [sp, #160]	; 0xa0
 80012d2:	232e      	movs	r3, #46	; 0x2e
 80012d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80012d6:	4668      	mov	r0, sp
 80012d8:	f104 0310 	add.w	r3, r4, #16
 80012dc:	229c      	movs	r2, #156	; 0x9c
 80012de:	4619      	mov	r1, r3
 80012e0:	f00b f989 	bl	800c5f6 <memcpy>
 80012e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012e8:	f000 fd31 	bl	8001d4e <bno055_read_regs>
 80012ec:	4603      	mov	r3, r0
 80012ee:	75fb      	strb	r3, [r7, #23]
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <bno055_gravity+0x3e>
        return err;
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	e03f      	b.n	800137a <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <bno055_gravity+0x4a>
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <bno055_gravity+0xc8>)
 8001304:	e001      	b.n	800130a <bno055_gravity+0x4e>
 8001306:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800130a:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 800130c:	7a7b      	ldrb	r3, [r7, #9]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	7a3b      	ldrb	r3, [r7, #8]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001322:	ed97 7a04 	vldr	s14, [r7, #16]
 8001326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001330:	7afb      	ldrb	r3, [r7, #11]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	7abb      	ldrb	r3, [r7, #10]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001346:	ed97 7a04 	vldr	s14, [r7, #16]
 800134a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001354:	7b7b      	ldrb	r3, [r7, #13]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	7b3b      	ldrb	r3, [r7, #12]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21b      	sxth	r3, r3
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800136a:	ed97 7a04 	vldr	s14, [r7, #16]
 800136e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	42c80000 	.word	0x42c80000

08001388 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b0b1      	sub	sp, #196	; 0xc4
 800138c:	af2a      	add	r7, sp, #168	; 0xa8
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001392:	687c      	ldr	r4, [r7, #4]
 8001394:	2302      	movs	r3, #2
 8001396:	9329      	str	r3, [sp, #164]	; 0xa4
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	9328      	str	r3, [sp, #160]	; 0xa0
 800139e:	231a      	movs	r3, #26
 80013a0:	9327      	str	r3, [sp, #156]	; 0x9c
 80013a2:	4668      	mov	r0, sp
 80013a4:	f104 0310 	add.w	r3, r4, #16
 80013a8:	229c      	movs	r2, #156	; 0x9c
 80013aa:	4619      	mov	r1, r3
 80013ac:	f00b f923 	bl	800c5f6 <memcpy>
 80013b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013b4:	f000 fccb 	bl	8001d4e <bno055_read_regs>
 80013b8:	4603      	mov	r3, r0
 80013ba:	75fb      	strb	r3, [r7, #23]
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	e01b      	b.n	80013fe <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <bno055_euler_yaw+0x4c>
 80013ce:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80013d2:	e000      	b.n	80013d6 <bno055_euler_yaw+0x4e>
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80013d6:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80013d8:	7b7b      	ldrb	r3, [r7, #13]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b21a      	sxth	r2, r3
 80013de:	7b3b      	ldrb	r3, [r7, #12]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80013f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	44610000 	.word	0x44610000

0800140c <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b0b1      	sub	sp, #196	; 0xc4
 8001410:	af2a      	add	r7, sp, #168	; 0xa8
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001416:	687c      	ldr	r4, [r7, #4]
 8001418:	2302      	movs	r3, #2
 800141a:	9329      	str	r3, [sp, #164]	; 0xa4
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	9328      	str	r3, [sp, #160]	; 0xa0
 8001422:	231c      	movs	r3, #28
 8001424:	9327      	str	r3, [sp, #156]	; 0x9c
 8001426:	4668      	mov	r0, sp
 8001428:	f104 0310 	add.w	r3, r4, #16
 800142c:	229c      	movs	r2, #156	; 0x9c
 800142e:	4619      	mov	r1, r3
 8001430:	f00b f8e1 	bl	800c5f6 <memcpy>
 8001434:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001438:	f000 fc89 	bl	8001d4e <bno055_read_regs>
 800143c:	4603      	mov	r3, r0
 800143e:	75fb      	strb	r3, [r7, #23]
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <bno055_euler_roll+0x3e>
        return err;
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	e01b      	b.n	8001482 <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <bno055_euler_roll+0x4c>
 8001452:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001456:	e000      	b.n	800145a <bno055_euler_roll+0x4e>
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800145a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 800145c:	7b7b      	ldrb	r3, [r7, #13]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	7b3b      	ldrb	r3, [r7, #12]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001472:	ed97 7a04 	vldr	s14, [r7, #16]
 8001476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	bf00      	nop
 800148c:	44610000 	.word	0x44610000

08001490 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b0b1      	sub	sp, #196	; 0xc4
 8001494:	af2a      	add	r7, sp, #168	; 0xa8
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 800149a:	687c      	ldr	r4, [r7, #4]
 800149c:	2302      	movs	r3, #2
 800149e:	9329      	str	r3, [sp, #164]	; 0xa4
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	9328      	str	r3, [sp, #160]	; 0xa0
 80014a6:	231e      	movs	r3, #30
 80014a8:	9327      	str	r3, [sp, #156]	; 0x9c
 80014aa:	4668      	mov	r0, sp
 80014ac:	f104 0310 	add.w	r3, r4, #16
 80014b0:	229c      	movs	r2, #156	; 0x9c
 80014b2:	4619      	mov	r1, r3
 80014b4:	f00b f89f 	bl	800c5f6 <memcpy>
 80014b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014bc:	f000 fc47 	bl	8001d4e <bno055_read_regs>
 80014c0:	4603      	mov	r3, r0
 80014c2:	75fb      	strb	r3, [r7, #23]
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <bno055_euler_pitch+0x3e>
        return err;
 80014ca:	7dfb      	ldrb	r3, [r7, #23]
 80014cc:	e01b      	b.n	8001506 <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <bno055_euler_pitch+0x4c>
 80014d6:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80014da:	e000      	b.n	80014de <bno055_euler_pitch+0x4e>
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80014de:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80014e0:	7b7b      	ldrb	r3, [r7, #13]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	7b3b      	ldrb	r3, [r7, #12]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80014fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	371c      	adds	r7, #28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	bf00      	nop
 8001510:	44610000 	.word	0x44610000

08001514 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b0b1      	sub	sp, #196	; 0xc4
 8001518:	af2a      	add	r7, sp, #168	; 0xa8
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 800151e:	687c      	ldr	r4, [r7, #4]
 8001520:	2306      	movs	r3, #6
 8001522:	9329      	str	r3, [sp, #164]	; 0xa4
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	9328      	str	r3, [sp, #160]	; 0xa0
 800152a:	231a      	movs	r3, #26
 800152c:	9327      	str	r3, [sp, #156]	; 0x9c
 800152e:	4668      	mov	r0, sp
 8001530:	f104 0310 	add.w	r3, r4, #16
 8001534:	229c      	movs	r2, #156	; 0x9c
 8001536:	4619      	mov	r1, r3
 8001538:	f00b f85d 	bl	800c5f6 <memcpy>
 800153c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001540:	f000 fc05 	bl	8001d4e <bno055_read_regs>
 8001544:	4603      	mov	r3, r0
 8001546:	75fb      	strb	r3, [r7, #23]
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	e03f      	b.n	80015d2 <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <bno055_euler+0x4c>
 800155a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800155e:	e000      	b.n	8001562 <bno055_euler+0x4e>
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001562:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001564:	7a7b      	ldrb	r3, [r7, #9]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	7a3b      	ldrb	r3, [r7, #8]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21b      	sxth	r3, r3
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800157a:	ed97 7a04 	vldr	s14, [r7, #16]
 800157e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	b21a      	sxth	r2, r3
 800158e:	7abb      	ldrb	r3, [r7, #10]
 8001590:	b21b      	sxth	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b21b      	sxth	r3, r3
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800159e:	ed97 7a04 	vldr	s14, [r7, #16]
 80015a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 80015ac:	7b7b      	ldrb	r3, [r7, #13]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	7b3b      	ldrb	r3, [r7, #12]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80015c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}
 80015da:	bf00      	nop
 80015dc:	44610000 	.word	0x44610000

080015e0 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b0af      	sub	sp, #188	; 0xbc
 80015e4:	af2a      	add	r7, sp, #168	; 0xa8
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 80015ea:	687c      	ldr	r4, [r7, #4]
 80015ec:	2302      	movs	r3, #2
 80015ee:	9329      	str	r3, [sp, #164]	; 0xa4
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80015f6:	2320      	movs	r3, #32
 80015f8:	9327      	str	r3, [sp, #156]	; 0x9c
 80015fa:	4668      	mov	r0, sp
 80015fc:	f104 0310 	add.w	r3, r4, #16
 8001600:	229c      	movs	r2, #156	; 0x9c
 8001602:	4619      	mov	r1, r3
 8001604:	f00a fff7 	bl	800c5f6 <memcpy>
 8001608:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800160c:	f000 fb9f 	bl	8001d4e <bno055_read_regs>
 8001610:	4603      	mov	r3, r0
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <bno055_quaternion_w+0x3e>
        return err;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	e012      	b.n	8001644 <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	7b3b      	ldrb	r3, [r7, #12]
 8001626:	b21b      	sxth	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b21b      	sxth	r3, r3
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001634:	eddf 6a05 	vldr	s13, [pc, #20]	; 800164c <bno055_quaternion_w+0x6c>
 8001638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	46800000 	.word	0x46800000

08001650 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b0af      	sub	sp, #188	; 0xbc
 8001654:	af2a      	add	r7, sp, #168	; 0xa8
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 800165a:	687c      	ldr	r4, [r7, #4]
 800165c:	2302      	movs	r3, #2
 800165e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	9328      	str	r3, [sp, #160]	; 0xa0
 8001666:	2322      	movs	r3, #34	; 0x22
 8001668:	9327      	str	r3, [sp, #156]	; 0x9c
 800166a:	4668      	mov	r0, sp
 800166c:	f104 0310 	add.w	r3, r4, #16
 8001670:	229c      	movs	r2, #156	; 0x9c
 8001672:	4619      	mov	r1, r3
 8001674:	f00a ffbf 	bl	800c5f6 <memcpy>
 8001678:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800167c:	f000 fb67 	bl	8001d4e <bno055_read_regs>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <bno055_quaternion_x+0x3e>
        return err;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	e012      	b.n	80016b4 <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800168e:	7b7b      	ldrb	r3, [r7, #13]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	7b3b      	ldrb	r3, [r7, #12]
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	b21b      	sxth	r3, r3
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a4:	eddf 6a05 	vldr	s13, [pc, #20]	; 80016bc <bno055_quaternion_x+0x6c>
 80016a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	46800000 	.word	0x46800000

080016c0 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b0af      	sub	sp, #188	; 0xbc
 80016c4:	af2a      	add	r7, sp, #168	; 0xa8
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80016ca:	687c      	ldr	r4, [r7, #4]
 80016cc:	2302      	movs	r3, #2
 80016ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	9328      	str	r3, [sp, #160]	; 0xa0
 80016d6:	2324      	movs	r3, #36	; 0x24
 80016d8:	9327      	str	r3, [sp, #156]	; 0x9c
 80016da:	4668      	mov	r0, sp
 80016dc:	f104 0310 	add.w	r3, r4, #16
 80016e0:	229c      	movs	r2, #156	; 0x9c
 80016e2:	4619      	mov	r1, r3
 80016e4:	f00a ff87 	bl	800c5f6 <memcpy>
 80016e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016ec:	f000 fb2f 	bl	8001d4e <bno055_read_regs>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <bno055_quaternion_y+0x3e>
        return err;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	e012      	b.n	8001724 <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80016fe:	7b7b      	ldrb	r3, [r7, #13]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b21a      	sxth	r2, r3
 8001704:	7b3b      	ldrb	r3, [r7, #12]
 8001706:	b21b      	sxth	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b21b      	sxth	r3, r3
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001714:	eddf 6a05 	vldr	s13, [pc, #20]	; 800172c <bno055_quaternion_y+0x6c>
 8001718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bd90      	pop	{r4, r7, pc}
 800172c:	46800000 	.word	0x46800000

08001730 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b0af      	sub	sp, #188	; 0xbc
 8001734:	af2a      	add	r7, sp, #168	; 0xa8
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800173a:	687c      	ldr	r4, [r7, #4]
 800173c:	2302      	movs	r3, #2
 800173e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	9328      	str	r3, [sp, #160]	; 0xa0
 8001746:	2326      	movs	r3, #38	; 0x26
 8001748:	9327      	str	r3, [sp, #156]	; 0x9c
 800174a:	4668      	mov	r0, sp
 800174c:	f104 0310 	add.w	r3, r4, #16
 8001750:	229c      	movs	r2, #156	; 0x9c
 8001752:	4619      	mov	r1, r3
 8001754:	f00a ff4f 	bl	800c5f6 <memcpy>
 8001758:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800175c:	f000 faf7 	bl	8001d4e <bno055_read_regs>
 8001760:	4603      	mov	r3, r0
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <bno055_quaternion_z+0x3e>
        return err;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	e012      	b.n	8001794 <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800176e:	7b7b      	ldrb	r3, [r7, #13]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b21b      	sxth	r3, r3
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001784:	eddf 6a05 	vldr	s13, [pc, #20]	; 800179c <bno055_quaternion_z+0x6c>
 8001788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bd90      	pop	{r4, r7, pc}
 800179c:	46800000 	.word	0x46800000

080017a0 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b0b1      	sub	sp, #196	; 0xc4
 80017a4:	af2a      	add	r7, sp, #168	; 0xa8
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 80017aa:	687c      	ldr	r4, [r7, #4]
 80017ac:	2308      	movs	r3, #8
 80017ae:	9329      	str	r3, [sp, #164]	; 0xa4
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	9328      	str	r3, [sp, #160]	; 0xa0
 80017b6:	2320      	movs	r3, #32
 80017b8:	9327      	str	r3, [sp, #156]	; 0x9c
 80017ba:	4668      	mov	r0, sp
 80017bc:	f104 0310 	add.w	r3, r4, #16
 80017c0:	229c      	movs	r2, #156	; 0x9c
 80017c2:	4619      	mov	r1, r3
 80017c4:	f00a ff17 	bl	800c5f6 <memcpy>
 80017c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017cc:	f000 fabf 	bl	8001d4e <bno055_read_regs>
 80017d0:	4603      	mov	r3, r0
 80017d2:	75fb      	strb	r3, [r7, #23]
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <bno055_quaternion+0x3e>
        return err;
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	e048      	b.n	8001870 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80017de:	7b7b      	ldrb	r3, [r7, #13]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	7b3b      	ldrb	r3, [r7, #12]
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f4:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001878 <bno055_quaternion+0xd8>
 80017f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21a      	sxth	r2, r3
 8001808:	7bbb      	ldrb	r3, [r7, #14]
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21b      	sxth	r3, r3
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001818:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001878 <bno055_quaternion+0xd8>
 800181c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8001826:	7c7b      	ldrb	r3, [r7, #17]
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	b21a      	sxth	r2, r3
 800182c:	7c3b      	ldrb	r3, [r7, #16]
 800182e:	b21b      	sxth	r3, r3
 8001830:	4313      	orrs	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800183c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001878 <bno055_quaternion+0xd8>
 8001840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 800184a:	7cfb      	ldrb	r3, [r7, #19]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	b21a      	sxth	r2, r3
 8001850:	7cbb      	ldrb	r3, [r7, #18]
 8001852:	b21b      	sxth	r3, r3
 8001854:	4313      	orrs	r3, r2
 8001856:	b21b      	sxth	r3, r3
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001860:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001878 <bno055_quaternion+0xd8>
 8001864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	46800000 	.word	0x46800000

0800187c <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b0af      	sub	sp, #188	; 0xbc
 8001880:	af2a      	add	r7, sp, #168	; 0xa8
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4603      	mov	r3, r0
 800188c:	70fb      	strb	r3, [r7, #3]
 800188e:	460b      	mov	r3, r1
 8001890:	70bb      	strb	r3, [r7, #2]
 8001892:	4613      	mov	r3, r2
 8001894:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001896:	2101      	movs	r1, #1
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fabb 	bl	8001e14 <bno055_set_page>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <bno055_acc_conf+0x30>
        return err;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	e04b      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80018ac:	2100      	movs	r1, #0
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f91b 	bl	8001aea <bno055_set_opmode>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <bno055_acc_conf+0x46>
        return err;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	e040      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80018c2:	200c      	movs	r0, #12
 80018c4:	f003 fcd2 	bl	800526c <HAL_Delay>
    u8 config = range | bandwidth | mode;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	78bb      	ldrb	r3, [r7, #2]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	787b      	ldrb	r3, [r7, #1]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 80018d8:	687c      	ldr	r4, [r7, #4]
 80018da:	2301      	movs	r3, #1
 80018dc:	9329      	str	r3, [sp, #164]	; 0xa4
 80018de:	f107 030e 	add.w	r3, r7, #14
 80018e2:	9328      	str	r3, [sp, #160]	; 0xa0
 80018e4:	2308      	movs	r3, #8
 80018e6:	9327      	str	r3, [sp, #156]	; 0x9c
 80018e8:	4668      	mov	r0, sp
 80018ea:	f104 0310 	add.w	r3, r4, #16
 80018ee:	229c      	movs	r2, #156	; 0x9c
 80018f0:	4619      	mov	r1, r3
 80018f2:	f00a fe80 	bl	800c5f6 <memcpy>
 80018f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018fa:	f000 fa5e 	bl	8001dba <bno055_write_regs>
 80018fe:	4603      	mov	r3, r0
 8001900:	73fb      	strb	r3, [r7, #15]
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <bno055_acc_conf+0x90>
        return err;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	e01b      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	791b      	ldrb	r3, [r3, #4]
 8001910:	4619      	mov	r1, r3
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f8e9 	bl	8001aea <bno055_set_opmode>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <bno055_acc_conf+0xaa>
        return err;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	e00e      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001926:	2018      	movs	r0, #24
 8001928:	f003 fca0 	bl	800526c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800192c:	2100      	movs	r1, #0
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fa70 	bl	8001e14 <bno055_set_page>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <bno055_acc_conf+0xc6>
        return err;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	e000      	b.n	8001944 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}

0800194c <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b0af      	sub	sp, #188	; 0xbc
 8001950:	af2a      	add	r7, sp, #168	; 0xa8
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4603      	mov	r3, r0
 800195c:	70fb      	strb	r3, [r7, #3]
 800195e:	460b      	mov	r3, r1
 8001960:	70bb      	strb	r3, [r7, #2]
 8001962:	4613      	mov	r3, r2
 8001964:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001966:	2101      	movs	r1, #1
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fa53 	bl	8001e14 <bno055_set_page>
 800196e:	4603      	mov	r3, r0
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <bno055_gyr_conf+0x30>
        return err;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	e04a      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800197c:	2100      	movs	r1, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f8b3 	bl	8001aea <bno055_set_opmode>
 8001984:	4603      	mov	r3, r0
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <bno055_gyr_conf+0x46>
        return err;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	e03f      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001992:	200c      	movs	r0, #12
 8001994:	f003 fc6a 	bl	800526c <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	78bb      	ldrb	r3, [r7, #2]
 800199c:	4313      	orrs	r3, r2
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	733b      	strb	r3, [r7, #12]
 80019a2:	787b      	ldrb	r3, [r7, #1]
 80019a4:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 80019a6:	687c      	ldr	r4, [r7, #4]
 80019a8:	2302      	movs	r3, #2
 80019aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80019b2:	230a      	movs	r3, #10
 80019b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80019b6:	4668      	mov	r0, sp
 80019b8:	f104 0310 	add.w	r3, r4, #16
 80019bc:	229c      	movs	r2, #156	; 0x9c
 80019be:	4619      	mov	r1, r3
 80019c0:	f00a fe19 	bl	800c5f6 <memcpy>
 80019c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019c8:	f000 f9f7 	bl	8001dba <bno055_write_regs>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	e01b      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	791b      	ldrb	r3, [r3, #4]
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f882 	bl	8001aea <bno055_set_opmode>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <bno055_gyr_conf+0xa8>
        return err;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	e00e      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80019f4:	2018      	movs	r0, #24
 80019f6:	f003 fc39 	bl	800526c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80019fa:	2100      	movs	r1, #0
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 fa09 	bl	8001e14 <bno055_set_page>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <bno055_gyr_conf+0xc4>
        return err;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	e000      	b.n	8001a12 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}

08001a1a <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 8001a1a:	b590      	push	{r4, r7, lr}
 8001a1c:	b0af      	sub	sp, #188	; 0xbc
 8001a1e:	af2a      	add	r7, sp, #168	; 0xa8
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	4608      	mov	r0, r1
 8001a24:	4611      	mov	r1, r2
 8001a26:	461a      	mov	r2, r3
 8001a28:	4603      	mov	r3, r0
 8001a2a:	70fb      	strb	r3, [r7, #3]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70bb      	strb	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001a34:	2101      	movs	r1, #1
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f9ec 	bl	8001e14 <bno055_set_page>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <bno055_mag_conf+0x30>
        return err;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	e04b      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f84c 	bl	8001aea <bno055_set_opmode>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <bno055_mag_conf+0x46>
        return err;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	e040      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001a60:	200c      	movs	r0, #12
 8001a62:	f003 fc03 	bl	800526c <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	78bb      	ldrb	r3, [r7, #2]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	787b      	ldrb	r3, [r7, #1]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 8001a76:	687c      	ldr	r4, [r7, #4]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a7c:	f107 030e 	add.w	r3, r7, #14
 8001a80:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a82:	2309      	movs	r3, #9
 8001a84:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a86:	4668      	mov	r0, sp
 8001a88:	f104 0310 	add.w	r3, r4, #16
 8001a8c:	229c      	movs	r2, #156	; 0x9c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f00a fdb1 	bl	800c5f6 <memcpy>
 8001a94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a98:	f000 f98f 	bl	8001dba <bno055_write_regs>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <bno055_mag_conf+0x90>
        return err;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	e01b      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	791b      	ldrb	r3, [r3, #4]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f81a 	bl	8001aea <bno055_set_opmode>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <bno055_mag_conf+0xaa>
        return err;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	e00e      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001ac4:	2018      	movs	r0, #24
 8001ac6:	f003 fbd1 	bl	800526c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8001aca:	2100      	movs	r1, #0
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f9a1 	bl	8001e14 <bno055_set_page>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <bno055_mag_conf+0xc6>
        return err;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	e000      	b.n	8001ae2 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd90      	pop	{r4, r7, pc}

08001aea <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 8001aea:	b590      	push	{r4, r7, lr}
 8001aec:	b0af      	sub	sp, #188	; 0xbc
 8001aee:	af2a      	add	r7, sp, #168	; 0xa8
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 8001af6:	687c      	ldr	r4, [r7, #4]
 8001af8:	2301      	movs	r3, #1
 8001afa:	9329      	str	r3, [sp, #164]	; 0xa4
 8001afc:	1cfb      	adds	r3, r7, #3
 8001afe:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b00:	233d      	movs	r3, #61	; 0x3d
 8001b02:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b04:	4668      	mov	r0, sp
 8001b06:	f104 0310 	add.w	r3, r4, #16
 8001b0a:	229c      	movs	r2, #156	; 0x9c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f00a fd72 	bl	800c5f6 <memcpy>
 8001b12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b16:	f000 f950 	bl	8001dba <bno055_write_regs>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	e003      	b.n	8001b30 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001b28:	2018      	movs	r0, #24
 8001b2a:	f003 fb9f 	bl	800526c <HAL_Delay>
    return BNO_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd90      	pop	{r4, r7, pc}

08001b38 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b0af      	sub	sp, #188	; 0xbc
 8001b3c:	af2a      	add	r7, sp, #168	; 0xa8
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	4608      	mov	r0, r1
 8001b42:	4611      	mov	r1, r2
 8001b44:	461a      	mov	r2, r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	70fb      	strb	r3, [r7, #3]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	70bb      	strb	r3, [r7, #2]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001b52:	2100      	movs	r1, #0
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ffc8 	bl	8001aea <bno055_set_opmode>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <bno055_set_unit+0x30>
        return err;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	e04b      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8001b68:	2100      	movs	r1, #0
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f952 	bl	8001e14 <bno055_set_page>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <bno055_set_unit+0x46>
        return err;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	e040      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	78bb      	ldrb	r3, [r7, #2]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	787b      	ldrb	r3, [r7, #1]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 8001b96:	687c      	ldr	r4, [r7, #4]
 8001b98:	2301      	movs	r3, #1
 8001b9a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b9c:	f107 030e 	add.w	r3, r7, #14
 8001ba0:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ba2:	233b      	movs	r3, #59	; 0x3b
 8001ba4:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ba6:	4668      	mov	r0, sp
 8001ba8:	f104 0310 	add.w	r3, r4, #16
 8001bac:	229c      	movs	r2, #156	; 0x9c
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f00a fd21 	bl	800c5f6 <memcpy>
 8001bb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bb8:	f000 f8ff 	bl	8001dba <bno055_write_regs>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <bno055_set_unit+0x92>
        return err;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	e01a      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	78ba      	ldrb	r2, [r7, #2]
 8001bce:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	787a      	ldrb	r2, [r7, #1]
 8001bd4:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bdc:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	791b      	ldrb	r3, [r3, #4]
 8001be8:	4619      	mov	r1, r3
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ff7d 	bl	8001aea <bno055_set_opmode>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <bno055_set_unit+0xc6>
        return err;
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	e000      	b.n	8001c00 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b0af      	sub	sp, #188	; 0xbc
 8001c0c:	af2a      	add	r7, sp, #168	; 0xa8
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e04d      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8001c1e:	2100      	movs	r1, #0
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff62 	bl	8001aea <bno055_set_opmode>
 8001c26:	4603      	mov	r3, r0
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <bno055_set_pwr_mode+0x2c>
        return err;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	e042      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001c34:	2100      	movs	r1, #0
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8ec 	bl	8001e14 <bno055_set_page>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <bno055_set_pwr_mode+0x42>
        return err;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	e037      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 8001c4a:	687c      	ldr	r4, [r7, #4]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c50:	1cfb      	adds	r3, r7, #3
 8001c52:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c54:	233e      	movs	r3, #62	; 0x3e
 8001c56:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c58:	4668      	mov	r0, sp
 8001c5a:	f104 0310 	add.w	r3, r4, #16
 8001c5e:	229c      	movs	r2, #156	; 0x9c
 8001c60:	4619      	mov	r1, r3
 8001c62:	f00a fcc8 	bl	800c5f6 <memcpy>
 8001c66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c6a:	f000 f8a6 	bl	8001dba <bno055_write_regs>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	e01e      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001c82:	2100      	movs	r1, #0
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f8c5 	bl	8001e14 <bno055_set_page>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <bno055_set_pwr_mode+0x90>
        return err;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	e010      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	791b      	ldrb	r3, [r3, #4]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff23 	bl	8001aea <bno055_set_opmode>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <bno055_set_pwr_mode+0xaa>
        return err;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	e003      	b.n	8001cba <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f003 fada 	bl	800526c <HAL_Delay>
    return BNO_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}

08001cc2 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 8001cc2:	b590      	push	{r4, r7, lr}
 8001cc4:	b0af      	sub	sp, #188	; 0xbc
 8001cc6:	af2a      	add	r7, sp, #168	; 0xa8
 8001cc8:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8001cce:	687c      	ldr	r4, [r7, #4]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001cd4:	f107 030f 	add.w	r3, r7, #15
 8001cd8:	9328      	str	r3, [sp, #160]	; 0xa0
 8001cda:	233f      	movs	r3, #63	; 0x3f
 8001cdc:	9327      	str	r3, [sp, #156]	; 0x9c
 8001cde:	4668      	mov	r0, sp
 8001ce0:	f104 0310 	add.w	r3, r4, #16
 8001ce4:	229c      	movs	r2, #156	; 0x9c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f00a fc85 	bl	800c5f6 <memcpy>
 8001cec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cf0:	f000 f863 	bl	8001dba <bno055_write_regs>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}

08001d08 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b0af      	sub	sp, #188	; 0xbc
 8001d0c:	af2a      	add	r7, sp, #168	; 0xa8
 8001d0e:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8001d14:	687c      	ldr	r4, [r7, #4]
 8001d16:	2301      	movs	r3, #1
 8001d18:	9329      	str	r3, [sp, #164]	; 0xa4
 8001d1a:	f107 030f 	add.w	r3, r7, #15
 8001d1e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001d20:	233f      	movs	r3, #63	; 0x3f
 8001d22:	9327      	str	r3, [sp, #156]	; 0x9c
 8001d24:	4668      	mov	r0, sp
 8001d26:	f104 0310 	add.w	r3, r4, #16
 8001d2a:	229c      	movs	r2, #156	; 0x9c
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f00a fc62 	bl	800c5f6 <memcpy>
 8001d32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d36:	f000 f840 	bl	8001dba <bno055_write_regs>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <bno055_on+0x3e>
    }
    return BNO_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd90      	pop	{r4, r7, pc}

08001d4e <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8001d4e:	b084      	sub	sp, #16
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	f107 0c10 	add.w	ip, r7, #16
 8001d5a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8001d5e:	6938      	ldr	r0, [r7, #16]
 8001d60:	7dbb      	ldrb	r3, [r7, #22]
 8001d62:	b299      	uxth	r1, r3
 8001d64:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f006 fa2a 	bl	80081c8 <HAL_I2C_Master_Transmit>
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e014      	b.n	8001dac <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 8001d82:	6938      	ldr	r0, [r7, #16]
 8001d84:	7dbb      	ldrb	r3, [r7, #22]
 8001d86:	b299      	uxth	r1, r3
 8001d88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d92:	9200      	str	r2, [sp, #0]
 8001d94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001d98:	f006 fb2e 	bl	80083f8 <HAL_I2C_Master_Receive>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001db6:	b004      	add	sp, #16
 8001db8:	4770      	bx	lr

08001dba <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 8001dba:	b084      	sub	sp, #16
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	f107 0418 	add.w	r4, r7, #24
 8001dc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 8001dca:	69b8      	ldr	r0, [r7, #24]
 8001dcc:	7fbb      	ldrb	r3, [r7, #30]
 8001dce:	b299      	uxth	r1, r3
 8001dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001dda:	b29c      	uxth	r4, r3
 8001ddc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	f04f 35ff 	mov.w	r5, #4294967295
 8001de6:	9502      	str	r5, [sp, #8]
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	4623      	mov	r3, r4
 8001df2:	f006 fbf7 	bl	80085e4 <HAL_I2C_Mem_Write>
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e10:	b004      	add	sp, #16
 8001e12:	4770      	bx	lr

08001e14 <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b0af      	sub	sp, #188	; 0xbc
 8001e18:	af2a      	add	r7, sp, #168	; 0xa8
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7b5a      	ldrb	r2, [r3, #13]
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <bno055_set_page+0x1a>
        return BNO_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e024      	b.n	8001e78 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d901      	bls.n	8001e38 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8001e34:	2302      	movs	r3, #2
 8001e36:	e01f      	b.n	8001e78 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8001e38:	687c      	ldr	r4, [r7, #4]
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e3e:	1cfb      	adds	r3, r7, #3
 8001e40:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e42:	2307      	movs	r3, #7
 8001e44:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e46:	4668      	mov	r0, sp
 8001e48:	f104 0310 	add.w	r3, r4, #16
 8001e4c:	229c      	movs	r2, #156	; 0x9c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f00a fbd1 	bl	800c5f6 <memcpy>
 8001e54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e58:	f7ff ffaf 	bl	8001dba <bno055_write_regs>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <bno055_set_page+0x56>
        return err;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	e006      	b.n	8001e78 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8001e70:	2002      	movs	r0, #2
 8001e72:	f003 f9fb 	bl	800526c <HAL_Delay>
    return BNO_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd90      	pop	{r4, r7, pc}

08001e80 <CAN_INIT>:
uint8_t RxData_Master[64];




error_handler CAN_INIT(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
	error_handler err;
	TxHeader_Master_State.Identifier = 0x10000000;
 8001e86:	4b7b      	ldr	r3, [pc, #492]	; (8002074 <CAN_INIT+0x1f4>)
 8001e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e8c:	601a      	str	r2, [r3, #0]
	TxHeader_Master_State.IdType = FDCAN_EXTENDED_ID;
 8001e8e:	4b79      	ldr	r3, [pc, #484]	; (8002074 <CAN_INIT+0x1f4>)
 8001e90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e94:	605a      	str	r2, [r3, #4]
	TxHeader_Master_State.TxFrameType = FDCAN_DATA_FRAME;
 8001e96:	4b77      	ldr	r3, [pc, #476]	; (8002074 <CAN_INIT+0x1f4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
	TxHeader_Master_State.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001e9c:	4b75      	ldr	r3, [pc, #468]	; (8002074 <CAN_INIT+0x1f4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
	TxHeader_Master_State.DataLength = FDCAN_DLC_BYTES_1;
 8001ea2:	4b74      	ldr	r3, [pc, #464]	; (8002074 <CAN_INIT+0x1f4>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	60da      	str	r2, [r3, #12]
	TxHeader_Master_State.BitRateSwitch = FDCAN_BRS_ON;
 8001ea8:	4b72      	ldr	r3, [pc, #456]	; (8002074 <CAN_INIT+0x1f4>)
 8001eaa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eae:	615a      	str	r2, [r3, #20]
	TxHeader_Master_State.FDFormat = FDCAN_FD_CAN;
 8001eb0:	4b70      	ldr	r3, [pc, #448]	; (8002074 <CAN_INIT+0x1f4>)
 8001eb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001eb6:	619a      	str	r2, [r3, #24]


	TxHeader_Master_Data.Identifier = 0x10000000;
 8001eb8:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <CAN_INIT+0x1f8>)
 8001eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ebe:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.IdType = FDCAN_EXTENDED_ID;
 8001ec0:	4b6d      	ldr	r3, [pc, #436]	; (8002078 <CAN_INIT+0x1f8>)
 8001ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ec6:	605a      	str	r2, [r3, #4]
	TxHeader_Master_Data.TxFrameType = FDCAN_DATA_FRAME;
 8001ec8:	4b6b      	ldr	r3, [pc, #428]	; (8002078 <CAN_INIT+0x1f8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
	TxHeader_Master_Data.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001ece:	4b6a      	ldr	r3, [pc, #424]	; (8002078 <CAN_INIT+0x1f8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_1;
 8001ed4:	4b68      	ldr	r3, [pc, #416]	; (8002078 <CAN_INIT+0x1f8>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	60da      	str	r2, [r3, #12]
	TxHeader_Master_Data.BitRateSwitch = FDCAN_BRS_ON;
 8001eda:	4b67      	ldr	r3, [pc, #412]	; (8002078 <CAN_INIT+0x1f8>)
 8001edc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ee0:	615a      	str	r2, [r3, #20]
	TxHeader_Master_Data.FDFormat = FDCAN_FD_CAN;
 8001ee2:	4b65      	ldr	r3, [pc, #404]	; (8002078 <CAN_INIT+0x1f8>)
 8001ee4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ee8:	619a      	str	r2, [r3, #24]

	TxHeader_Pod.Identifier = 0x10000000;
 8001eea:	4b64      	ldr	r3, [pc, #400]	; (800207c <CAN_INIT+0x1fc>)
 8001eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ef0:	601a      	str	r2, [r3, #0]
	TxHeader_Pod.IdType = FDCAN_EXTENDED_ID;
 8001ef2:	4b62      	ldr	r3, [pc, #392]	; (800207c <CAN_INIT+0x1fc>)
 8001ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef8:	605a      	str	r2, [r3, #4]
	TxHeader_Pod.TxFrameType = FDCAN_DATA_FRAME;
 8001efa:	4b60      	ldr	r3, [pc, #384]	; (800207c <CAN_INIT+0x1fc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
	TxHeader_Pod.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001f00:	4b5e      	ldr	r3, [pc, #376]	; (800207c <CAN_INIT+0x1fc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
	TxHeader_Pod.DataLength = FDCAN_DLC_BYTES_8;
 8001f06:	4b5d      	ldr	r3, [pc, #372]	; (800207c <CAN_INIT+0x1fc>)
 8001f08:	2208      	movs	r2, #8
 8001f0a:	60da      	str	r2, [r3, #12]
	TxHeader_Pod.BitRateSwitch = FDCAN_BRS_OFF;
 8001f0c:	4b5b      	ldr	r3, [pc, #364]	; (800207c <CAN_INIT+0x1fc>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
	TxHeader_Pod.FDFormat = FDCAN_CLASSIC_CAN;
 8001f12:	4b5a      	ldr	r3, [pc, #360]	; (800207c <CAN_INIT+0x1fc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]

	Filter_ESC.IdType = FDCAN_EXTENDED_ID;
 8001f18:	4b59      	ldr	r3, [pc, #356]	; (8002080 <CAN_INIT+0x200>)
 8001f1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f1e:	601a      	str	r2, [r3, #0]
	Filter_ESC.FilterIndex = 0;
 8001f20:	4b57      	ldr	r3, [pc, #348]	; (8002080 <CAN_INIT+0x200>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
	Filter_ESC.FilterType = FDCAN_FILTER_MASK;
 8001f26:	4b56      	ldr	r3, [pc, #344]	; (8002080 <CAN_INIT+0x200>)
 8001f28:	2202      	movs	r2, #2
 8001f2a:	609a      	str	r2, [r3, #8]
	Filter_ESC.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8001f2c:	4b54      	ldr	r3, [pc, #336]	; (8002080 <CAN_INIT+0x200>)
 8001f2e:	2202      	movs	r2, #2
 8001f30:	60da      	str	r2, [r3, #12]
	Filter_ESC.FilterID1 = 0x000000FF;
 8001f32:	4b53      	ldr	r3, [pc, #332]	; (8002080 <CAN_INIT+0x200>)
 8001f34:	22ff      	movs	r2, #255	; 0xff
 8001f36:	611a      	str	r2, [r3, #16]
	Filter_ESC.FilterID2 = ESC_ID;
 8001f38:	4b51      	ldr	r3, [pc, #324]	; (8002080 <CAN_INIT+0x200>)
 8001f3a:	2265      	movs	r2, #101	; 0x65
 8001f3c:	615a      	str	r2, [r3, #20]

	Filter_BATT.IdType = FDCAN_EXTENDED_ID;
 8001f3e:	4b51      	ldr	r3, [pc, #324]	; (8002084 <CAN_INIT+0x204>)
 8001f40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f44:	601a      	str	r2, [r3, #0]
	Filter_BATT.FilterIndex = 1;
 8001f46:	4b4f      	ldr	r3, [pc, #316]	; (8002084 <CAN_INIT+0x204>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	605a      	str	r2, [r3, #4]
	Filter_BATT.FilterType = FDCAN_FILTER_DUAL;
 8001f4c:	4b4d      	ldr	r3, [pc, #308]	; (8002084 <CAN_INIT+0x204>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	609a      	str	r2, [r3, #8]
	Filter_BATT.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8001f52:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <CAN_INIT+0x204>)
 8001f54:	2202      	movs	r2, #2
 8001f56:	60da      	str	r2, [r3, #12]
	Filter_BATT.FilterID1 = IMD_ID;
 8001f58:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <CAN_INIT+0x204>)
 8001f5a:	4a4b      	ldr	r2, [pc, #300]	; (8002088 <CAN_INIT+0x208>)
 8001f5c:	611a      	str	r2, [r3, #16]
	Filter_BATT.FilterID2 = BMS_ID;
 8001f5e:	4b49      	ldr	r3, [pc, #292]	; (8002084 <CAN_INIT+0x204>)
 8001f60:	2299      	movs	r2, #153	; 0x99
 8001f62:	615a      	str	r2, [r3, #20]

	Filter_STATE.IdType = FDCAN_EXTENDED_ID;
 8001f64:	4b49      	ldr	r3, [pc, #292]	; (800208c <CAN_INIT+0x20c>)
 8001f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f6a:	601a      	str	r2, [r3, #0]
	Filter_STATE.FilterIndex = 2;
 8001f6c:	4b47      	ldr	r3, [pc, #284]	; (800208c <CAN_INIT+0x20c>)
 8001f6e:	2202      	movs	r2, #2
 8001f70:	605a      	str	r2, [r3, #4]
	Filter_STATE.FilterType = FDCAN_FILTER_MASK;
 8001f72:	4b46      	ldr	r3, [pc, #280]	; (800208c <CAN_INIT+0x20c>)
 8001f74:	2202      	movs	r2, #2
 8001f76:	609a      	str	r2, [r3, #8]
	Filter_STATE.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001f78:	4b44      	ldr	r3, [pc, #272]	; (800208c <CAN_INIT+0x20c>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	60da      	str	r2, [r3, #12]
	Filter_STATE.FilterID1 = 0x000000FF;
 8001f7e:	4b43      	ldr	r3, [pc, #268]	; (800208c <CAN_INIT+0x20c>)
 8001f80:	22ff      	movs	r2, #255	; 0xff
 8001f82:	611a      	str	r2, [r3, #16]
	Filter_STATE.FilterID2 = 0x00;
 8001f84:	4b41      	ldr	r3, [pc, #260]	; (800208c <CAN_INIT+0x20c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	615a      	str	r2, [r3, #20]

	Filter_DATA.IdType = FDCAN_EXTENDED_ID;
 8001f8a:	4b41      	ldr	r3, [pc, #260]	; (8002090 <CAN_INIT+0x210>)
 8001f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f90:	601a      	str	r2, [r3, #0]
	Filter_DATA.FilterIndex = 3;
 8001f92:	4b3f      	ldr	r3, [pc, #252]	; (8002090 <CAN_INIT+0x210>)
 8001f94:	2203      	movs	r2, #3
 8001f96:	605a      	str	r2, [r3, #4]
	Filter_DATA.FilterType = FDCAN_FILTER_MASK;
 8001f98:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <CAN_INIT+0x210>)
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	609a      	str	r2, [r3, #8]
	Filter_DATA.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001f9e:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <CAN_INIT+0x210>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	60da      	str	r2, [r3, #12]
	Filter_DATA.FilterID1 = 0x000000FF;
 8001fa4:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <CAN_INIT+0x210>)
 8001fa6:	22ff      	movs	r2, #255	; 0xff
 8001fa8:	611a      	str	r2, [r3, #16]
	Filter_DATA.FilterID2 = FOLLOWER_ID;
 8001faa:	4b39      	ldr	r3, [pc, #228]	; (8002090 <CAN_INIT+0x210>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	615a      	str	r2, [r3, #20]

	err = CAN_INIT_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	71fb      	strb	r3, [r7, #7]
	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){
 8001fb4:	4837      	ldr	r0, [pc, #220]	; (8002094 <CAN_INIT+0x214>)
 8001fb6:	f005 fa0b 	bl	80073d0 <HAL_FDCAN_Start>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <CAN_INIT+0x144>
		err = CAN_INIT_ERR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	4832      	ldr	r0, [pc, #200]	; (8002094 <CAN_INIT+0x214>)
 8001fca:	f005 fb75 	bl	80076b8 <HAL_FDCAN_ActivateNotification>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <CAN_INIT+0x158>
		err = CAN_INIT_ERR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK){
 8001fd8:	482f      	ldr	r0, [pc, #188]	; (8002098 <CAN_INIT+0x218>)
 8001fda:	f005 f9f9 	bl	80073d0 <HAL_FDCAN_Start>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <CAN_INIT+0x168>
		err = CAN_INIT_ERR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2101      	movs	r1, #1
 8001fec:	482a      	ldr	r0, [pc, #168]	; (8002098 <CAN_INIT+0x218>)
 8001fee:	f005 fb63 	bl	80076b8 <HAL_FDCAN_ActivateNotification>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <CAN_INIT+0x17c>
		err = CAN_INIT_ERR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_FDCAN_Start(&hfdcan3)!= HAL_OK){
 8001ffc:	4827      	ldr	r0, [pc, #156]	; (800209c <CAN_INIT+0x21c>)
 8001ffe:	f005 f9e7 	bl	80073d0 <HAL_FDCAN_Start>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <CAN_INIT+0x18c>
		err = CAN_INIT_ERR;
 8002008:	2301      	movs	r3, #1
 800200a:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &Filter_STATE) != HAL_OK){
 800200c:	491f      	ldr	r1, [pc, #124]	; (800208c <CAN_INIT+0x20c>)
 800200e:	4821      	ldr	r0, [pc, #132]	; (8002094 <CAN_INIT+0x214>)
 8002010:	f005 f984 	bl	800731c <HAL_FDCAN_ConfigFilter>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <CAN_INIT+0x19e>
		err = CAN_INIT_ERR;
 800201a:	2301      	movs	r3, #1
 800201c:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &Filter_DATA) != HAL_OK){
 800201e:	491c      	ldr	r1, [pc, #112]	; (8002090 <CAN_INIT+0x210>)
 8002020:	481d      	ldr	r0, [pc, #116]	; (8002098 <CAN_INIT+0x218>)
 8002022:	f005 f97b 	bl	800731c <HAL_FDCAN_ConfigFilter>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <CAN_INIT+0x1b0>
		err = CAN_INIT_ERR;
 800202c:	2301      	movs	r3, #1
 800202e:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &Filter_BATT) != HAL_OK){
 8002030:	4914      	ldr	r1, [pc, #80]	; (8002084 <CAN_INIT+0x204>)
 8002032:	481a      	ldr	r0, [pc, #104]	; (800209c <CAN_INIT+0x21c>)
 8002034:	f005 f972 	bl	800731c <HAL_FDCAN_ConfigFilter>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <CAN_INIT+0x1c2>
		err = CAN_INIT_ERR;
 800203e:	2301      	movs	r3, #1
 8002040:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &Filter_ESC) != HAL_OK){
 8002042:	490f      	ldr	r1, [pc, #60]	; (8002080 <CAN_INIT+0x200>)
 8002044:	4815      	ldr	r0, [pc, #84]	; (800209c <CAN_INIT+0x21c>)
 8002046:	f005 f969 	bl	800731c <HAL_FDCAN_ConfigFilter>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <CAN_INIT+0x1d4>
		err = CAN_INIT_ERR;
 8002050:	2301      	movs	r3, #1
 8002052:	71fb      	strb	r3, [r7, #7]
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK){
 8002054:	2200      	movs	r2, #0
 8002056:	2108      	movs	r1, #8
 8002058:	4810      	ldr	r0, [pc, #64]	; (800209c <CAN_INIT+0x21c>)
 800205a:	f005 fb2d 	bl	80076b8 <HAL_FDCAN_ActivateNotification>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <CAN_INIT+0x1e8>
		err = CAN_INIT_ERR;
 8002064:	2301      	movs	r3, #1
 8002066:	71fb      	strb	r3, [r7, #7]
	}
	return err;
 8002068:	79fb      	ldrb	r3, [r7, #7]

}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000130 	.word	0x20000130
 8002078:	20000154 	.word	0x20000154
 800207c:	20000178 	.word	0x20000178
 8002080:	200001ec 	.word	0x200001ec
 8002084:	20000204 	.word	0x20000204
 8002088:	0a100101 	.word	0x0a100101
 800208c:	2000021c 	.word	0x2000021c
 8002090:	20000234 	.word	0x20000234
 8002094:	20000438 	.word	0x20000438
 8002098:	2000049c 	.word	0x2000049c
 800209c:	20000500 	.word	0x20000500

080020a0 <IMD_Req_Isolation>:
		err = CAN3_MSG_ERR;
	}
	return err;
}

error_handler IMD_Req_Isolation(){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
	error_handler err;
	err = CAN_OK;
 80020a6:	2305      	movs	r3, #5
 80020a8:	71fb      	strb	r3, [r7, #7]
	TxHeader_Pod.Identifier = IMD_ID;
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <IMD_Req_Isolation+0x3c>)
 80020ac:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <IMD_Req_Isolation+0x40>)
 80020ae:	601a      	str	r2, [r3, #0]
	TxHeader_Pod.DataLength = FDCAN_DLC_BYTES_1;
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <IMD_Req_Isolation+0x3c>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	60da      	str	r2, [r3, #12]
	uint8_t temp_data[] = {0xE0};
 80020b6:	23e0      	movs	r3, #224	; 0xe0
 80020b8:	713b      	strb	r3, [r7, #4]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader_Pod, temp_data)!= HAL_OK){
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	461a      	mov	r2, r3
 80020be:	4907      	ldr	r1, [pc, #28]	; (80020dc <IMD_Req_Isolation+0x3c>)
 80020c0:	4808      	ldr	r0, [pc, #32]	; (80020e4 <IMD_Req_Isolation+0x44>)
 80020c2:	f005 f9ad 	bl	8007420 <HAL_FDCAN_AddMessageToTxFifoQ>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <IMD_Req_Isolation+0x30>
		err = CAN3_MSG_ERR;
 80020cc:	2302      	movs	r3, #2
 80020ce:	71fb      	strb	r3, [r7, #7]
	}
	return err;
 80020d0:	79fb      	ldrb	r3, [r7, #7]

}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000178 	.word	0x20000178
 80020e0:	0a100101 	.word	0x0a100101
 80020e4:	20000500 	.word	0x20000500

080020e8 <Sensor_Data>:
	return err;


}

error_handler Sensor_Data(){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
	error_handler err;
	err = CAN_OK;
 80020ee:	2305      	movs	r3, #5
 80020f0:	71fb      	strb	r3, [r7, #7]
	TxHeader_Master_Data.Identifier = 0x01000100 | FOLLOWER_ID;
 80020f2:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <Sensor_Data+0xbc>)
 80020f4:	4a2c      	ldr	r2, [pc, #176]	; (80021a8 <Sensor_Data+0xc0>)
 80020f6:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.TxFrameType = FDCAN_DATA_FRAME;
 80020f8:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <Sensor_Data+0xbc>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_16;
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <Sensor_Data+0xbc>)
 8002100:	220a      	movs	r2, #10
 8002102:	60da      	str	r2, [r3, #12]
	uint8_t Temperature_Data[] = {};
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, Temperature_Data)!= HAL_OK){
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	461a      	mov	r2, r3
 8002108:	4926      	ldr	r1, [pc, #152]	; (80021a4 <Sensor_Data+0xbc>)
 800210a:	4828      	ldr	r0, [pc, #160]	; (80021ac <Sensor_Data+0xc4>)
 800210c:	f005 f988 	bl	8007420 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <Sensor_Data+0x32>
		err = CAN1_MSG_ERR;
 8002116:	2304      	movs	r3, #4
 8002118:	71fb      	strb	r3, [r7, #7]
	}


	TxHeader_Master_Data.Identifier = 0x01000200 | FOLLOWER_ID;
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <Sensor_Data+0xbc>)
 800211c:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <Sensor_Data+0xc8>)
 800211e:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_16;
 8002120:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <Sensor_Data+0xbc>)
 8002122:	220a      	movs	r2, #10
 8002124:	60da      	str	r2, [r3, #12]
	uint8_t ESC_Data[] = {};
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, ESC_Data)!= HAL_OK){
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	461a      	mov	r2, r3
 800212a:	491e      	ldr	r1, [pc, #120]	; (80021a4 <Sensor_Data+0xbc>)
 800212c:	481f      	ldr	r0, [pc, #124]	; (80021ac <Sensor_Data+0xc4>)
 800212e:	f005 f977 	bl	8007420 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <Sensor_Data+0x54>
		err = CAN2_MSG_ERR;
 8002138:	2303      	movs	r3, #3
 800213a:	71fb      	strb	r3, [r7, #7]
	}


	TxHeader_Master_Data.Identifier = 0x01000300 | FOLLOWER_ID;
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <Sensor_Data+0xbc>)
 800213e:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <Sensor_Data+0xcc>)
 8002140:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_2;
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <Sensor_Data+0xbc>)
 8002144:	2202      	movs	r2, #2
 8002146:	60da      	str	r2, [r3, #12]
	uint8_t Relay_Data[] = {0x00,0x00};
 8002148:	2300      	movs	r3, #0
 800214a:	803b      	strh	r3, [r7, #0]
	Relay_Data[0] = (RelayStates & 0xFF00) >> 8;
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <Sensor_Data+0xd0>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	b29b      	uxth	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	703b      	strb	r3, [r7, #0]
	Relay_Data[1] = (RelayStates & 0x00FF);
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <Sensor_Data+0xd0>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	707b      	strb	r3, [r7, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, Relay_Data)!= HAL_OK){
 8002160:	463b      	mov	r3, r7
 8002162:	461a      	mov	r2, r3
 8002164:	490f      	ldr	r1, [pc, #60]	; (80021a4 <Sensor_Data+0xbc>)
 8002166:	4811      	ldr	r0, [pc, #68]	; (80021ac <Sensor_Data+0xc4>)
 8002168:	f005 f95a 	bl	8007420 <HAL_FDCAN_AddMessageToTxFifoQ>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <Sensor_Data+0x8e>
		err = CAN2_MSG_ERR;
 8002172:	2303      	movs	r3, #3
 8002174:	71fb      	strb	r3, [r7, #7]
	}


	TxHeader_Master_Data.Identifier = 0x01000400 | FOLLOWER_ID;
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <Sensor_Data+0xbc>)
 8002178:	4a10      	ldr	r2, [pc, #64]	; (80021bc <Sensor_Data+0xd4>)
 800217a:	601a      	str	r2, [r3, #0]
	TxHeader_Master_Data.DataLength = FDCAN_DLC_BYTES_16;
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <Sensor_Data+0xbc>)
 800217e:	220a      	movs	r2, #10
 8002180:	60da      	str	r2, [r3, #12]
	uint8_t Batt_Data[] = {};
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Master_Data, Batt_Data)!= HAL_OK){
 8002182:	463b      	mov	r3, r7
 8002184:	461a      	mov	r2, r3
 8002186:	4907      	ldr	r1, [pc, #28]	; (80021a4 <Sensor_Data+0xbc>)
 8002188:	4808      	ldr	r0, [pc, #32]	; (80021ac <Sensor_Data+0xc4>)
 800218a:	f005 f949 	bl	8007420 <HAL_FDCAN_AddMessageToTxFifoQ>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <Sensor_Data+0xb0>
		err = CAN2_MSG_ERR;
 8002194:	2303      	movs	r3, #3
 8002196:	71fb      	strb	r3, [r7, #7]
	}
	return err;
 8002198:	79fb      	ldrb	r3, [r7, #7]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000154 	.word	0x20000154
 80021a8:	01000101 	.word	0x01000101
 80021ac:	2000049c 	.word	0x2000049c
 80021b0:	01000201 	.word	0x01000201
 80021b4:	01000301 	.word	0x01000301
 80021b8:	20000c64 	.word	0x20000c64
 80021bc:	01000401 	.word	0x01000401

080021c0 <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Master, RxData_Master) != HAL_OK){
 80021ca:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 80021cc:	4a35      	ldr	r2, [pc, #212]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80021ce:	2140      	movs	r1, #64	; 0x40
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f005 f969 	bl	80074a8 <HAL_FDCAN_GetRxMessage>
		//Error_Handler();
	}
	if((RxHeader_Master.Identifier & 0x000000FF) == 0x00){
 80021d6:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d147      	bne.n	8002270 <HAL_FDCAN_RxFifo0Callback+0xb0>
		if(RxHeader_Master.Identifier == 0x00001000){
 80021e0:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e8:	d102      	bne.n	80021f0 <HAL_FDCAN_RxFifo0Callback+0x30>
			//init
			Curr_State = INIT;
 80021ea:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001100){
 80021f0:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 80021f8:	d102      	bne.n	8002200 <HAL_FDCAN_RxFifo0Callback+0x40>
			//Fault
			Curr_State = FAULT;
 80021fa:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001200){
 8002200:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8002208:	d102      	bne.n	8002210 <HAL_FDCAN_RxFifo0Callback+0x50>
			//safe to approach
			Curr_State = SAFE_TO_APPROACH;
 800220a:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800220c:	2202      	movs	r2, #2
 800220e:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001300){
 8002210:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 8002218:	d102      	bne.n	8002220 <HAL_FDCAN_RxFifo0Callback+0x60>
			//coast
			Curr_State = COAST;
 800221a:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800221c:	2205      	movs	r2, #5
 800221e:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001400){
 8002220:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002228:	d102      	bne.n	8002230 <HAL_FDCAN_RxFifo0Callback+0x70>
			//brake
			Curr_State = BRAKE;
 800222a:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800222c:	2206      	movs	r2, #6
 800222e:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001500){
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f5b3 5fa8 	cmp.w	r3, #5376	; 0x1500
 8002238:	d102      	bne.n	8002240 <HAL_FDCAN_RxFifo0Callback+0x80>
			//crawl
			Curr_State = CRAWL;
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800223c:	2207      	movs	r2, #7
 800223e:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001600){
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8002248:	d102      	bne.n	8002250 <HAL_FDCAN_RxFifo0Callback+0x90>
			//track
			Curr_State = TRACK;
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800224c:	2208      	movs	r2, #8
 800224e:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x0000FF00){
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8002258:	d102      	bne.n	8002260 <HAL_FDCAN_RxFifo0Callback+0xa0>
			//launch
			Curr_State = LAUNCH;
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800225c:	2204      	movs	r2, #4
 800225e:	701a      	strb	r2, [r3, #0]
		}
		if(RxHeader_Master.Identifier == 0x00001700){
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f5b3 5fb8 	cmp.w	r3, #5888	; 0x1700
 8002268:	d102      	bne.n	8002270 <HAL_FDCAN_RxFifo0Callback+0xb0>
			//ready to launch
			Curr_State = READY;
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800226c:	2203      	movs	r2, #3
 800226e:	701a      	strb	r2, [r3, #0]
		}
	}
	if((RxHeader_Master.Identifier & 0x0000FFFF) == (0x0000FF00 | FOLLOWER_ID)){
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	f64f 7201 	movw	r2, #65281	; 0xff01
 800227a:	4293      	cmp	r3, r2
 800227c:	d101      	bne.n	8002282 <HAL_FDCAN_RxFifo0Callback+0xc2>
		Sensor_Data();
 800227e:	f7ff ff33 	bl	80020e8 <Sensor_Data>

	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8002282:	2200      	movs	r2, #0
 8002284:	2101      	movs	r1, #1
 8002286:	4809      	ldr	r0, [pc, #36]	; (80022ac <HAL_FDCAN_RxFifo0Callback+0xec>)
 8002288:	f005 fa16 	bl	80076b8 <HAL_FDCAN_ActivateNotification>
			//fault
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 800228c:	2200      	movs	r2, #0
 800228e:	2101      	movs	r1, #1
 8002290:	4807      	ldr	r0, [pc, #28]	; (80022b0 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8002292:	f005 fa11 	bl	80076b8 <HAL_FDCAN_ActivateNotification>
			//fault
	}


}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000254 	.word	0x20000254
 80022a4:	2000019c 	.word	0x2000019c
 80022a8:	20000c62 	.word	0x20000c62
 80022ac:	20000438 	.word	0x20000438
 80022b0:	2000049c 	.word	0x2000049c

080022b4 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader_Pod, RxData_Pod) != HAL_OK){
 80022be:	4b45      	ldr	r3, [pc, #276]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022c0:	4a45      	ldr	r2, [pc, #276]	; (80023d8 <HAL_FDCAN_RxFifo1Callback+0x124>)
 80022c2:	2141      	movs	r1, #65	; 0x41
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f005 f8ef 	bl	80074a8 <HAL_FDCAN_GetRxMessage>
		//Error_Handler();
	}
// HE NE HU - HV LV IS1 ISO
	if(RxHeader_Pod.Identifier == IMD_ID){
 80022ca:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <HAL_FDCAN_RxFifo1Callback+0x124>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a43      	ldr	r2, [pc, #268]	; (80023dc <HAL_FDCAN_RxFifo1Callback+0x128>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d121      	bne.n	8002318 <HAL_FDCAN_RxFifo1Callback+0x64>
		if((RxData_Pod[1] & 0x40) == 0x40){
 80022d4:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022d6:	785b      	ldrb	r3, [r3, #1]
 80022d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <HAL_FDCAN_RxFifo1Callback+0x64>
			if((RxData_Pod[1] & 0x03) == 0b10){
 80022e0:	4b3c      	ldr	r3, [pc, #240]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022e2:	785b      	ldrb	r3, [r3, #1]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d105      	bne.n	80022f8 <HAL_FDCAN_RxFifo1Callback+0x44>
				ISO_STATE = 0xF0; //Warning set LED to yellow
 80022ec:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 80022ee:	22f0      	movs	r2, #240	; 0xf0
 80022f0:	701a      	strb	r2, [r3, #0]
				IMD_Req_Isolation();
 80022f2:	f7ff fed5 	bl	80020a0 <IMD_Req_Isolation>
 80022f6:	e00f      	b.n	8002318 <HAL_FDCAN_RxFifo1Callback+0x64>
			}else if((RxData_Pod[1] & 0x03) == 0b11){
 80022f8:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80022fa:	785b      	ldrb	r3, [r3, #1]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b03      	cmp	r3, #3
 8002302:	d106      	bne.n	8002312 <HAL_FDCAN_RxFifo1Callback+0x5e>
				ISO_STATE = 0xFF; //fault set LED to Red and full estop
 8002304:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 8002306:	22ff      	movs	r2, #255	; 0xff
 8002308:	701a      	strb	r2, [r3, #0]
				Curr_State = FAULT;
 800230a:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_FDCAN_RxFifo1Callback+0x130>)
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	e002      	b.n	8002318 <HAL_FDCAN_RxFifo1Callback+0x64>
			}else{
				ISO_STATE = 0x00; //all good
 8002312:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <HAL_FDCAN_RxFifo1Callback+0x12c>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
			}
		}
	}else{
		//fault
	}
	if((RxHeader_Pod.Identifier & 0x000000FF) == BMS_ID){
 8002318:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <HAL_FDCAN_RxFifo1Callback+0x124>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b99      	cmp	r3, #153	; 0x99
 8002320:	d14e      	bne.n	80023c0 <HAL_FDCAN_RxFifo1Callback+0x10c>
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x0900){
 8002322:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <HAL_FDCAN_RxFifo1Callback+0x124>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800232a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800232e:	d11c      	bne.n	800236a <HAL_FDCAN_RxFifo1Callback+0xb6>
			//status 1
			M_RPM = (RxData_Pod[7]<<24) | (RxData_Pod[6]<<16) | (RxData_Pod[5]<<8) | (RxData_Pod[4]);
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002332:	79db      	ldrb	r3, [r3, #7]
 8002334:	061a      	lsls	r2, r3, #24
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002338:	799b      	ldrb	r3, [r3, #6]
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	431a      	orrs	r2, r3
 800233e:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002340:	795b      	ldrb	r3, [r3, #5]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	4313      	orrs	r3, r2
 8002346:	4a23      	ldr	r2, [pc, #140]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002348:	7912      	ldrb	r2, [r2, #4]
 800234a:	4313      	orrs	r3, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_FDCAN_RxFifo1Callback+0x134>)
 8002350:	601a      	str	r2, [r3, #0]
			M_Current = (RxData_Pod[3]<<8) | (RxData_Pod[2]);
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002354:	78db      	ldrb	r3, [r3, #3]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	b21a      	sxth	r2, r3
 800235a:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800235c:	789b      	ldrb	r3, [r3, #2]
 800235e:	b21b      	sxth	r3, r3
 8002360:	4313      	orrs	r3, r2
 8002362:	b21b      	sxth	r3, r3
 8002364:	b29a      	uxth	r2, r3
 8002366:	4b21      	ldr	r3, [pc, #132]	; (80023ec <HAL_FDCAN_RxFifo1Callback+0x138>)
 8002368:	801a      	strh	r2, [r3, #0]
			//status 2
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x0F00){
			//status 3
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x1000){
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_FDCAN_RxFifo1Callback+0x124>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002376:	d123      	bne.n	80023c0 <HAL_FDCAN_RxFifo1Callback+0x10c>
			//status 4
			M_Temp_fet = (RxData_Pod[7]<<8) | (RxData_Pod[6]);
 8002378:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800237a:	79db      	ldrb	r3, [r3, #7]
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	b21a      	sxth	r2, r3
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002382:	799b      	ldrb	r3, [r3, #6]
 8002384:	b21b      	sxth	r3, r3
 8002386:	4313      	orrs	r3, r2
 8002388:	b21b      	sxth	r3, r3
 800238a:	b29a      	uxth	r2, r3
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_FDCAN_RxFifo1Callback+0x13c>)
 800238e:	801a      	strh	r2, [r3, #0]
			M_Temp_motor = (RxData_Pod[5]<<8) | (RxData_Pod[4]);
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 8002392:	795b      	ldrb	r3, [r3, #5]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	b21a      	sxth	r2, r3
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 800239a:	791b      	ldrb	r3, [r3, #4]
 800239c:	b21b      	sxth	r3, r3
 800239e:	4313      	orrs	r3, r2
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_FDCAN_RxFifo1Callback+0x140>)
 80023a6:	801a      	strh	r2, [r3, #0]
			M_Current_in = (RxData_Pod[3]<<8) | (RxData_Pod[2]);
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80023aa:	78db      	ldrb	r3, [r3, #3]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	b21a      	sxth	r2, r3
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_FDCAN_RxFifo1Callback+0x120>)
 80023b2:	789b      	ldrb	r3, [r3, #2]
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_FDCAN_RxFifo1Callback+0x144>)
 80023be:	801a      	strh	r2, [r3, #0]
		}
		if((RxHeader_Pod.Identifier & 0x0000FF00) == 0x1B00){
			//status 5
		}
	}
	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK){
 80023c0:	2200      	movs	r2, #0
 80023c2:	2108      	movs	r1, #8
 80023c4:	480d      	ldr	r0, [pc, #52]	; (80023fc <HAL_FDCAN_RxFifo1Callback+0x148>)
 80023c6:	f005 f977 	bl	80076b8 <HAL_FDCAN_ActivateNotification>
		//fault
	}

}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2000024c 	.word	0x2000024c
 80023d8:	200001c4 	.word	0x200001c4
 80023dc:	0a100101 	.word	0x0a100101
 80023e0:	20000c61 	.word	0x20000c61
 80023e4:	20000c62 	.word	0x20000c62
 80023e8:	20000294 	.word	0x20000294
 80023ec:	20000298 	.word	0x20000298
 80023f0:	2000029a 	.word	0x2000029a
 80023f4:	2000029c 	.word	0x2000029c
 80023f8:	2000029e 	.word	0x2000029e
 80023fc:	20000500 	.word	0x20000500

08002400 <a_mcp9600_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mcp9600_iic_read(mcp9600_handle_t *handle, uint8_t reg, uint8_t *data, uint16_t len)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	461a      	mov	r2, r3
 800240c:	460b      	mov	r3, r1
 800240e:	72fb      	strb	r3, [r7, #11]
 8002410:	4613      	mov	r3, r2
 8002412:	813b      	strh	r3, [r7, #8]
    uint8_t buf[1];
    
    buf[0] = reg;                                                               /* set reg */
 8002414:	7afb      	ldrb	r3, [r7, #11]
 8002416:	753b      	strb	r3, [r7, #20]
    if (handle->iic_read_cmd(handle->iic_addr, (uint8_t *)buf, 1, data, len) != 0)                 /* read data */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	68dc      	ldr	r4, [r3, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	7e58      	ldrb	r0, [r3, #25]
 8002420:	f107 0114 	add.w	r1, r7, #20
 8002424:	893b      	ldrh	r3, [r7, #8]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	47a0      	blx	r4
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <a_mcp9600_iic_read+0x38>
    {   
        return 1;                                                               /* return error */
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <a_mcp9600_iic_read+0x3a>
    }
    
    return 0;                                                                   /* success return 0 */
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	371c      	adds	r7, #28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd90      	pop	{r4, r7, pc}

08002442 <a_mcp9600_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mcp9600_iic_write(mcp9600_handle_t *handle, uint8_t reg, uint8_t *data, uint16_t len)
{
 8002442:	b590      	push	{r4, r7, lr}
 8002444:	b08b      	sub	sp, #44	; 0x2c
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	461a      	mov	r2, r3
 800244e:	460b      	mov	r3, r1
 8002450:	72fb      	strb	r3, [r7, #11]
 8002452:	4613      	mov	r3, r2
 8002454:	813b      	strh	r3, [r7, #8]
    uint8_t buf[16];
    uint16_t i;
        
    if ((len + 1) > 16)                                                             /* check length */
 8002456:	893b      	ldrh	r3, [r7, #8]
 8002458:	2b0f      	cmp	r3, #15
 800245a:	d901      	bls.n	8002460 <a_mcp9600_iic_write+0x1e>
    {
        return 1;                                                                   /* return error */
 800245c:	2301      	movs	r3, #1
 800245e:	e023      	b.n	80024a8 <a_mcp9600_iic_write+0x66>
    }
                                                                 /* set MSB of reg */
    for (i = 0; i < len; i++)
 8002460:	2300      	movs	r3, #0
 8002462:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002464:	e00b      	b.n	800247e <a_mcp9600_iic_write+0x3c>
    {
        buf[i] = data[i];                                                       /* copy write data */
 8002466:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	441a      	add	r2, r3
 800246c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800246e:	7812      	ldrb	r2, [r2, #0]
 8002470:	3328      	adds	r3, #40	; 0x28
 8002472:	443b      	add	r3, r7
 8002474:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < len; i++)
 8002478:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800247a:	3301      	adds	r3, #1
 800247c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800247e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002480:	893b      	ldrh	r3, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d3ef      	bcc.n	8002466 <a_mcp9600_iic_write+0x24>
    }
    if (handle->iic_write_cmd(handle->iic_addr, (uint8_t *)buf,reg, len + 1) != 0)      /* write iic command */
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689c      	ldr	r4, [r3, #8]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	7e58      	ldrb	r0, [r3, #25]
 800248e:	893b      	ldrh	r3, [r7, #8]
 8002490:	3301      	adds	r3, #1
 8002492:	b29b      	uxth	r3, r3
 8002494:	7afa      	ldrb	r2, [r7, #11]
 8002496:	f107 0114 	add.w	r1, r7, #20
 800249a:	47a0      	blx	r4
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <a_mcp9600_iic_write+0x64>
    {   
        return 1;                                                                   /* return error */
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <a_mcp9600_iic_write+0x66>
    }
    
    return 0;                                                                       /* success return 0 */
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	372c      	adds	r7, #44	; 0x2c
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd90      	pop	{r4, r7, pc}

080024b0 <mcp9600_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mcp9600_set_addr_pin(mcp9600_handle_t *handle, mcp9600_address_t addr_pin)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <mcp9600_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 80024c2:	2302      	movs	r3, #2
 80024c4:	e003      	b.n	80024ce <mcp9600_set_addr_pin+0x1e>
    }
    
    handle->iic_addr = (uint8_t)addr_pin;        /* set pin */
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	765a      	strb	r2, [r3, #25]
    
    return 0;                                    /* success return 0 */
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <mcp9600_init>:
 *            - 3 linked functions is NULL
 *            - 4 id is invalid
 * @note      none
 */
uint8_t mcp9600_init(mcp9600_handle_t *handle)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                             /* check handle */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <mcp9600_init+0x12>
    {
        return 2;                                                                   /* return error */
 80024ea:	2302      	movs	r3, #2
 80024ec:	e06f      	b.n	80025ce <mcp9600_init+0xf2>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <mcp9600_init+0x1e>
    {
        return 3;                                                                   /* return error */
 80024f6:	2303      	movs	r3, #3
 80024f8:	e069      	b.n	80025ce <mcp9600_init+0xf2>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d105      	bne.n	800250e <mcp9600_init+0x32>
    {
        handle->debug_print("mcp9600: iic_init is null.\n");                        /* iic_init is null */
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	4834      	ldr	r0, [pc, #208]	; (80025d8 <mcp9600_init+0xfc>)
 8002508:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800250a:	2303      	movs	r3, #3
 800250c:	e05f      	b.n	80025ce <mcp9600_init+0xf2>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <mcp9600_init+0x46>
    {
        handle->debug_print("mcp9600: iic_deinit is null.\n");                      /* iic_deinit is null */
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	4830      	ldr	r0, [pc, #192]	; (80025dc <mcp9600_init+0x100>)
 800251c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800251e:	2303      	movs	r3, #3
 8002520:	e055      	b.n	80025ce <mcp9600_init+0xf2>
    }
    if (handle->iic_read_cmd == NULL)                                               /* check iic_read_cmd */
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <mcp9600_init+0x5a>
    {
        handle->debug_print("mcp9600: iic_read_cmd is null.\n");                    /* iic_read_cmd is null */
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	482c      	ldr	r0, [pc, #176]	; (80025e0 <mcp9600_init+0x104>)
 8002530:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8002532:	2303      	movs	r3, #3
 8002534:	e04b      	b.n	80025ce <mcp9600_init+0xf2>
    }
    if (handle->iic_write_cmd == NULL)                                              /* check iic_write_cmd */
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d105      	bne.n	800254a <mcp9600_init+0x6e>
    {
        handle->debug_print("mcp9600: iic_write_cmd is null.\n");                   /* iic_write_cmd is null */
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	4828      	ldr	r0, [pc, #160]	; (80025e4 <mcp9600_init+0x108>)
 8002544:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8002546:	2303      	movs	r3, #3
 8002548:	e041      	b.n	80025ce <mcp9600_init+0xf2>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d105      	bne.n	800255e <mcp9600_init+0x82>
    {
        handle->debug_print("mcp9600: delay_ms is null.\n");                        /* delay_ms is null */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4824      	ldr	r0, [pc, #144]	; (80025e8 <mcp9600_init+0x10c>)
 8002558:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800255a:	2303      	movs	r3, #3
 800255c:	e037      	b.n	80025ce <mcp9600_init+0xf2>
    }
    
    if (handle->iic_init() != 0)                                                    /* iic init */
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4798      	blx	r3
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <mcp9600_init+0x9a>
    {
        handle->debug_print("mcp9600: iic init failed.\n");                         /* iic init failed */
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	481f      	ldr	r0, [pc, #124]	; (80025ec <mcp9600_init+0x110>)
 8002570:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8002572:	2301      	movs	r3, #1
 8002574:	e02b      	b.n	80025ce <mcp9600_init+0xf2>
    }
    memset(buf, 0, sizeof(uint8_t) * 2);                                            /* clear the buffer */
 8002576:	f107 030c 	add.w	r3, r7, #12
 800257a:	2202      	movs	r2, #2
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f009 ffbe 	bl	800c500 <memset>
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_ID_REVISON,
 8002584:	f107 020c 	add.w	r2, r7, #12
 8002588:	2302      	movs	r3, #2
 800258a:	2120      	movs	r1, #32
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff37 	bl	8002400 <a_mcp9600_iic_read>
 8002592:	4603      	mov	r3, r0
 8002594:	73fb      	strb	r3, [r7, #15]
                            (uint8_t *)buf, 2);                                     /* read device id */
    if (res != 0)                                                                   /* check result */
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <mcp9600_init+0xd2>
    {
        handle->debug_print("mcp9600: read device id failed.\n");                   /* read device id failed */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	4813      	ldr	r0, [pc, #76]	; (80025f0 <mcp9600_init+0x114>)
 80025a2:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4798      	blx	r3
        
        return 1;                                                                   /* return error */
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00f      	b.n	80025ce <mcp9600_init+0xf2>
    }
    if (buf[0] != 0x40)                                                             /* check id */
 80025ae:	7b3b      	ldrb	r3, [r7, #12]
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d008      	beq.n	80025c6 <mcp9600_init+0xea>
    {
        handle->debug_print("mcp9600: id is invalid.\n");                           /* id is invalid */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	480e      	ldr	r0, [pc, #56]	; (80025f4 <mcp9600_init+0x118>)
 80025ba:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4798      	blx	r3
        
        return 4;                                                                   /* return error */
 80025c2:	2304      	movs	r3, #4
 80025c4:	e003      	b.n	80025ce <mcp9600_init+0xf2>
    }
    handle->inited = 1;                                                             /* set inited */
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	761a      	strb	r2, [r3, #24]
    
    return 0;                                                                       /* success return 0 */
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	0800cadc 	.word	0x0800cadc
 80025dc:	0800caf8 	.word	0x0800caf8
 80025e0:	0800cb18 	.word	0x0800cb18
 80025e4:	0800cb38 	.word	0x0800cb38
 80025e8:	0800cb5c 	.word	0x0800cb5c
 80025ec:	0800cb78 	.word	0x0800cb78
 80025f0:	0800cb94 	.word	0x0800cb94
 80025f4:	0800cbb8 	.word	0x0800cbb8

080025f8 <mcp9600_deinit>:
 *            - 3 handle is not initialized
 *            - 4 power down failed
 * @note      none
 */
uint8_t mcp9600_deinit(mcp9600_handle_t *handle)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <mcp9600_deinit+0x12>
    {
        return 2;                                                                                 /* return error */
 8002606:	2302      	movs	r3, #2
 8002608:	e045      	b.n	8002696 <mcp9600_deinit+0x9e>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7e1b      	ldrb	r3, [r3, #24]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d001      	beq.n	8002616 <mcp9600_deinit+0x1e>
    {
        return 3;                                                                                 /* return error */
 8002612:	2303      	movs	r3, #3
 8002614:	e03f      	b.n	8002696 <mcp9600_deinit+0x9e>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 8002616:	f107 020e 	add.w	r2, r7, #14
 800261a:	2301      	movs	r3, #1
 800261c:	2106      	movs	r1, #6
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff feee 	bl	8002400 <a_mcp9600_iic_read>
 8002624:	4603      	mov	r3, r0
 8002626:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <mcp9600_deinit+0x42>
    {
        handle->debug_print("mcp9600: power down failed.\n");                                     /* power down failed */
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	481b      	ldr	r0, [pc, #108]	; (80026a0 <mcp9600_deinit+0xa8>)
 8002634:	4798      	blx	r3
       
        return 4;                                                                                 /* return error */
 8002636:	2304      	movs	r3, #4
 8002638:	e02d      	b.n	8002696 <mcp9600_deinit+0x9e>
    }
    
    reg &= ~(3 << 0);                                                                             /* clear configure */
 800263a:	7bbb      	ldrb	r3, [r7, #14]
 800263c:	f023 0303 	bic.w	r3, r3, #3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	73bb      	strb	r3, [r7, #14]
    reg |= 0x1 << 0;                                                                              /* set configure */
 8002644:	7bbb      	ldrb	r3, [r7, #14]
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 800264e:	f107 020e 	add.w	r2, r7, #14
 8002652:	2301      	movs	r3, #1
 8002654:	2106      	movs	r1, #6
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fef3 	bl	8002442 <a_mcp9600_iic_write>
 800265c:	4603      	mov	r3, r0
 800265e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <mcp9600_deinit+0x7a>
    {
        handle->debug_print("mcp9600: power down failed.\n");                                     /* power down failed */
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	480d      	ldr	r0, [pc, #52]	; (80026a0 <mcp9600_deinit+0xa8>)
 800266c:	4798      	blx	r3
       
        return 4;                                                                                 /* return error */
 800266e:	2304      	movs	r3, #4
 8002670:	e011      	b.n	8002696 <mcp9600_deinit+0x9e>
    }
    res = handle->iic_deinit();                                                                   /* iic deinit */
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4798      	blx	r3
 8002678:	4603      	mov	r3, r0
 800267a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <mcp9600_deinit+0x96>
    {
        handle->debug_print("mcp9600: iic deinit failed.\n");                                     /* iic deinit failed */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	4807      	ldr	r0, [pc, #28]	; (80026a4 <mcp9600_deinit+0xac>)
 8002688:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 800268a:	2301      	movs	r3, #1
 800268c:	e003      	b.n	8002696 <mcp9600_deinit+0x9e>
    }
    handle->inited = 0;                                                                           /* clear flag */
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	761a      	strb	r2, [r3, #24]
    
    return 0;                                                                                     /* success return 0 */
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	0800cbd4 	.word	0x0800cbd4
 80026a4:	0800cbf4 	.word	0x0800cbf4

080026a8 <mcp9600_single_read>:
 *             - 4 read timeout
 * @note       none
 */
uint8_t mcp9600_single_read(mcp9600_handle_t *handle, int16_t *hot_raw, float *hot_s,
                            int16_t *delta_raw, float *delta_s, int16_t *cold_raw, float *cold_s)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t reg;
    uint16_t timeout;
    uint8_t buf[2];
    
    if (handle == NULL)                                                                                 /* check handle */
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <mcp9600_single_read+0x18>
    {
        return 2;                                                                                       /* return error */
 80026bc:	2302      	movs	r3, #2
 80026be:	e135      	b.n	800292c <mcp9600_single_read+0x284>
    }
    if (handle->inited != 1)                                                                            /* check handle initialization */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	7e1b      	ldrb	r3, [r3, #24]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d001      	beq.n	80026cc <mcp9600_single_read+0x24>
    {
        return 3;                                                                                       /* return error */
 80026c8:	2303      	movs	r3, #3
 80026ca:	e12f      	b.n	800292c <mcp9600_single_read+0x284>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_STATUS, (uint8_t *)&reg, 1);                           /* read config */
 80026cc:	f107 0214 	add.w	r2, r7, #20
 80026d0:	2301      	movs	r3, #1
 80026d2:	2104      	movs	r1, #4
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f7ff fe93 	bl	8002400 <a_mcp9600_iic_read>
 80026da:	4603      	mov	r3, r0
 80026dc:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 80026de:	7d7b      	ldrb	r3, [r7, #21]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <mcp9600_single_read+0x48>
    {
        handle->debug_print("mcp9600: read status failed.\n");                                          /* read status failed */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	4892      	ldr	r0, [pc, #584]	; (8002934 <mcp9600_single_read+0x28c>)
 80026ea:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 80026ec:	2301      	movs	r3, #1
 80026ee:	e11d      	b.n	800292c <mcp9600_single_read+0x284>
    }
    reg &= ~(1 << 7);                                                                                   /* clear flag */
 80026f0:	7d3b      	ldrb	r3, [r7, #20]
 80026f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	753b      	strb	r3, [r7, #20]
    reg &= ~(1 << 6);                                                                                   /* clear flag */
 80026fa:	7d3b      	ldrb	r3, [r7, #20]
 80026fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002700:	b2db      	uxtb	r3, r3
 8002702:	753b      	strb	r3, [r7, #20]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_STATUS, (uint8_t *)&reg, 1);                          /* write config */
 8002704:	f107 0214 	add.w	r2, r7, #20
 8002708:	2301      	movs	r3, #1
 800270a:	2104      	movs	r1, #4
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f7ff fe98 	bl	8002442 <a_mcp9600_iic_write>
 8002712:	4603      	mov	r3, r0
 8002714:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 8002716:	7d7b      	ldrb	r3, [r7, #21]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <mcp9600_single_read+0x80>
    {
        handle->debug_print("mcp9600: write status failed.\n");                                         /* write status failed */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	4885      	ldr	r0, [pc, #532]	; (8002938 <mcp9600_single_read+0x290>)
 8002722:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 8002724:	2301      	movs	r3, #1
 8002726:	e101      	b.n	800292c <mcp9600_single_read+0x284>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);             /* read config */
 8002728:	f107 0214 	add.w	r2, r7, #20
 800272c:	2301      	movs	r3, #1
 800272e:	2106      	movs	r1, #6
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff fe65 	bl	8002400 <a_mcp9600_iic_read>
 8002736:	4603      	mov	r3, r0
 8002738:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 800273a:	7d7b      	ldrb	r3, [r7, #21]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <mcp9600_single_read+0xa4>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                            /* read device configuration failed */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	487d      	ldr	r0, [pc, #500]	; (800293c <mcp9600_single_read+0x294>)
 8002746:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 8002748:	2301      	movs	r3, #1
 800274a:	e0ef      	b.n	800292c <mcp9600_single_read+0x284>
    }
    reg &= ~(3 << 0);                                                                                   /* clear configure */
 800274c:	7d3b      	ldrb	r3, [r7, #20]
 800274e:	f023 0303 	bic.w	r3, r3, #3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	753b      	strb	r3, [r7, #20]
    reg |= 0x02 << 0;                                                                                   /* set configure */
 8002756:	7d3b      	ldrb	r3, [r7, #20]
 8002758:	f043 0302 	orr.w	r3, r3, #2
 800275c:	b2db      	uxtb	r3, r3
 800275e:	753b      	strb	r3, [r7, #20]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);            /* write config */
 8002760:	f107 0214 	add.w	r2, r7, #20
 8002764:	2301      	movs	r3, #1
 8002766:	2106      	movs	r1, #6
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f7ff fe6a 	bl	8002442 <a_mcp9600_iic_write>
 800276e:	4603      	mov	r3, r0
 8002770:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 8002772:	7d7b      	ldrb	r3, [r7, #21]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <mcp9600_single_read+0xdc>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                           /* write device configuration failed */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	4870      	ldr	r0, [pc, #448]	; (8002940 <mcp9600_single_read+0x298>)
 800277e:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 8002780:	2301      	movs	r3, #1
 8002782:	e0d3      	b.n	800292c <mcp9600_single_read+0x284>
    }
    timeout = 10000;                                                                                    /* set timeout 10000 ms */
 8002784:	f242 7310 	movw	r3, #10000	; 0x2710
 8002788:	82fb      	strh	r3, [r7, #22]
    while (timeout != 0)                                                                                /* wait timeout */
 800278a:	e01d      	b.n	80027c8 <mcp9600_single_read+0x120>
    {
        res = a_mcp9600_iic_read(handle, MCP9600_REG_STATUS, (uint8_t *)&reg, 1);                       /* read config */
 800278c:	f107 0214 	add.w	r2, r7, #20
 8002790:	2301      	movs	r3, #1
 8002792:	2104      	movs	r1, #4
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7ff fe33 	bl	8002400 <a_mcp9600_iic_read>
 800279a:	4603      	mov	r3, r0
 800279c:	757b      	strb	r3, [r7, #21]
        if (res != 0)                                                                                   /* check result */
 800279e:	7d7b      	ldrb	r3, [r7, #21]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <mcp9600_single_read+0x108>
        {
            handle->debug_print("mcp9600: read status failed.\n");                                      /* read status failed */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	4862      	ldr	r0, [pc, #392]	; (8002934 <mcp9600_single_read+0x28c>)
 80027aa:	4798      	blx	r3
           
            return 1;                                                                                   /* return error */
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0bd      	b.n	800292c <mcp9600_single_read+0x284>
        }
        if ((reg & 0xC0) == 0xC0)                                                                       /* check flag */
 80027b0:	7d3b      	ldrb	r3, [r7, #20]
 80027b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80027b6:	2bc0      	cmp	r3, #192	; 0xc0
 80027b8:	d00a      	beq.n	80027d0 <mcp9600_single_read+0x128>
        {
            break;                                                                                      /* break */
        }
        handle->delay_ms(1);                                                                            /* delay 1 ms */
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2001      	movs	r0, #1
 80027c0:	4798      	blx	r3
        timeout--;                                                                                      /* timeout-- */
 80027c2:	8afb      	ldrh	r3, [r7, #22]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	82fb      	strh	r3, [r7, #22]
    while (timeout != 0)                                                                                /* wait timeout */
 80027c8:	8afb      	ldrh	r3, [r7, #22]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1de      	bne.n	800278c <mcp9600_single_read+0xe4>
 80027ce:	e000      	b.n	80027d2 <mcp9600_single_read+0x12a>
            break;                                                                                      /* break */
 80027d0:	bf00      	nop
    }
    if (timeout == 0)                                                                                   /* check timeout */
 80027d2:	8afb      	ldrh	r3, [r7, #22]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d105      	bne.n	80027e4 <mcp9600_single_read+0x13c>
    {
        handle->debug_print("mcp9600: read timeout.\n");                                                /* read timeout failed */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	4859      	ldr	r0, [pc, #356]	; (8002944 <mcp9600_single_read+0x29c>)
 80027de:	4798      	blx	r3
       
        return 4;                                                                                       /* return error */
 80027e0:	2304      	movs	r3, #4
 80027e2:	e0a3      	b.n	800292c <mcp9600_single_read+0x284>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_THERMOCOUPLE_HOT_JUNCTION, (uint8_t *)buf, 2);         /* read config */
 80027e4:	f107 0210 	add.w	r2, r7, #16
 80027e8:	2302      	movs	r3, #2
 80027ea:	2100      	movs	r1, #0
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7ff fe07 	bl	8002400 <a_mcp9600_iic_read>
 80027f2:	4603      	mov	r3, r0
 80027f4:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 80027f6:	7d7b      	ldrb	r3, [r7, #21]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <mcp9600_single_read+0x160>
    {
        handle->debug_print("mcp9600: read hot junction temperature failed.\n");                        /* read hot junction temperature failed */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	4851      	ldr	r0, [pc, #324]	; (8002948 <mcp9600_single_read+0x2a0>)
 8002802:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 8002804:	2301      	movs	r3, #1
 8002806:	e091      	b.n	800292c <mcp9600_single_read+0x284>
    }
    *hot_raw = (int16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                             /* get raw data */
 8002808:	7c3b      	ldrb	r3, [r7, #16]
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	b21a      	sxth	r2, r3
 800280e:	7c7b      	ldrb	r3, [r7, #17]
 8002810:	b21b      	sxth	r3, r3
 8002812:	4313      	orrs	r3, r2
 8002814:	b21a      	sxth	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	801a      	strh	r2, [r3, #0]
    *hot_s = (float)(*hot_raw) / 16.0f;                                                                 /* convert the data */
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002828:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800282c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	edc3 7a00 	vstr	s15, [r3]
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_JUNCTIONS_TEMPERATURE_DELTA, (uint8_t *)buf, 2);       /* read config */
 8002836:	f107 0210 	add.w	r2, r7, #16
 800283a:	2302      	movs	r3, #2
 800283c:	2101      	movs	r1, #1
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff fdde 	bl	8002400 <a_mcp9600_iic_read>
 8002844:	4603      	mov	r3, r0
 8002846:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 8002848:	7d7b      	ldrb	r3, [r7, #21]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <mcp9600_single_read+0x1b2>
    {
        handle->debug_print("mcp9600: read junction thermocouple delta failed.\n");                     /* junction thermocouple delta failed */
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	483e      	ldr	r0, [pc, #248]	; (800294c <mcp9600_single_read+0x2a4>)
 8002854:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 8002856:	2301      	movs	r3, #1
 8002858:	e068      	b.n	800292c <mcp9600_single_read+0x284>
    }
    *delta_raw = (int16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                           /* get raw data */
 800285a:	7c3b      	ldrb	r3, [r7, #16]
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	b21a      	sxth	r2, r3
 8002860:	7c7b      	ldrb	r3, [r7, #17]
 8002862:	b21b      	sxth	r3, r3
 8002864:	4313      	orrs	r3, r2
 8002866:	b21a      	sxth	r2, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	801a      	strh	r2, [r3, #0]
    *delta_s = (float)(*delta_raw) / 16.0f;                                                             /* convert the data */
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800287a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800287e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	edc3 7a00 	vstr	s15, [r3]
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);             /* read config */
 8002888:	f107 0214 	add.w	r2, r7, #20
 800288c:	2301      	movs	r3, #1
 800288e:	2106      	movs	r1, #6
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f7ff fdb5 	bl	8002400 <a_mcp9600_iic_read>
 8002896:	4603      	mov	r3, r0
 8002898:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 800289a:	7d7b      	ldrb	r3, [r7, #21]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <mcp9600_single_read+0x204>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                            /* read device configuration failed */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	4825      	ldr	r0, [pc, #148]	; (800293c <mcp9600_single_read+0x294>)
 80028a6:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 80028a8:	2301      	movs	r3, #1
 80028aa:	e03f      	b.n	800292c <mcp9600_single_read+0x284>
    }
    res = a_mcp9600_iic_read(handle, MCP9600_REG_COLD_JUNCTION_TEMPERATURE, (uint8_t *)buf, 2);         /* read config */
 80028ac:	f107 0210 	add.w	r2, r7, #16
 80028b0:	2302      	movs	r3, #2
 80028b2:	2102      	movs	r1, #2
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff fda3 	bl	8002400 <a_mcp9600_iic_read>
 80028ba:	4603      	mov	r3, r0
 80028bc:	757b      	strb	r3, [r7, #21]
    if (res != 0)                                                                                       /* check result */
 80028be:	7d7b      	ldrb	r3, [r7, #21]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <mcp9600_single_read+0x228>
    {
        handle->debug_print("mcp9600: read cold junction temperature failed.\n");                       /* read cold junction temperature failed */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	4821      	ldr	r0, [pc, #132]	; (8002950 <mcp9600_single_read+0x2a8>)
 80028ca:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 80028cc:	2301      	movs	r3, #1
 80028ce:	e02d      	b.n	800292c <mcp9600_single_read+0x284>
    }
    *cold_raw = (int16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                            /* get raw data */
 80028d0:	7c3b      	ldrb	r3, [r7, #16]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	b21a      	sxth	r2, r3
 80028d6:	7c7b      	ldrb	r3, [r7, #17]
 80028d8:	b21b      	sxth	r3, r3
 80028da:	4313      	orrs	r3, r2
 80028dc:	b21a      	sxth	r2, r3
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	801a      	strh	r2, [r3, #0]
    if (((reg >> 7) & 0x01) != 0)                                                                       /* check the config */
 80028e2:	7d3b      	ldrb	r3, [r7, #20]
 80028e4:	09db      	lsrs	r3, r3, #7
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00e      	beq.n	800290e <mcp9600_single_read+0x266>
    {
        *cold_s = (float)(*cold_raw) / 16.0f;                                                           /* convert the data */
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f6:	ee07 3a90 	vmov	s15, r3
 80028fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028fe:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002902:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	edc3 7a00 	vstr	s15, [r3]
 800290c:	e00d      	b.n	800292a <mcp9600_single_read+0x282>
    }
    else
    {
        *cold_s = (float)(*cold_raw) / 4.0f;                                                            /* convert the data */
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800291c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002920:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	edc3 7a00 	vstr	s15, [r3]
    }
    
    return 0;                                                                                           /* success return 0 */
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	0800cd08 	.word	0x0800cd08
 8002938:	0800cd28 	.word	0x0800cd28
 800293c:	0800cc14 	.word	0x0800cc14
 8002940:	0800cc40 	.word	0x0800cc40
 8002944:	0800cd48 	.word	0x0800cd48
 8002948:	0800cc70 	.word	0x0800cc70
 800294c:	0800cca0 	.word	0x0800cca0
 8002950:	0800ccd4 	.word	0x0800ccd4

08002954 <mcp9600_set_cold_junction_resolution>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_cold_junction_resolution(mcp9600_handle_t *handle, mcp9600_cold_junction_resolution_t resolution)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <mcp9600_set_cold_junction_resolution+0x16>
    {
        return 2;                                                                                 /* return error */
 8002966:	2302      	movs	r3, #2
 8002968:	e038      	b.n	80029dc <mcp9600_set_cold_junction_resolution+0x88>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7e1b      	ldrb	r3, [r3, #24]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d001      	beq.n	8002976 <mcp9600_set_cold_junction_resolution+0x22>
    {
        return 3;                                                                                 /* return error */
 8002972:	2303      	movs	r3, #3
 8002974:	e032      	b.n	80029dc <mcp9600_set_cold_junction_resolution+0x88>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 8002976:	f107 020e 	add.w	r2, r7, #14
 800297a:	2301      	movs	r3, #1
 800297c:	2106      	movs	r1, #6
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fd3e 	bl	8002400 <a_mcp9600_iic_read>
 8002984:	4603      	mov	r3, r0
 8002986:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <mcp9600_set_cold_junction_resolution+0x46>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                      /* read device configuration failed */
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	4814      	ldr	r0, [pc, #80]	; (80029e4 <mcp9600_set_cold_junction_resolution+0x90>)
 8002994:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002996:	2301      	movs	r3, #1
 8002998:	e020      	b.n	80029dc <mcp9600_set_cold_junction_resolution+0x88>
    }
    
    reg &= ~(1 << 7);                                                                             /* clear configure */
 800299a:	7bbb      	ldrb	r3, [r7, #14]
 800299c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	73bb      	strb	r3, [r7, #14]
    reg |= resolution << 7;                                                                       /* set configure */
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	01db      	lsls	r3, r3, #7
 80029a8:	b25a      	sxtb	r2, r3
 80029aa:	7bbb      	ldrb	r3, [r7, #14]
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	b25b      	sxtb	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 80029b6:	f107 020e 	add.w	r2, r7, #14
 80029ba:	2301      	movs	r3, #1
 80029bc:	2106      	movs	r1, #6
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff fd3f 	bl	8002442 <a_mcp9600_iic_write>
 80029c4:	4603      	mov	r3, r0
 80029c6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <mcp9600_set_cold_junction_resolution+0x86>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                     /* write device configuration failed */
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	4805      	ldr	r0, [pc, #20]	; (80029e8 <mcp9600_set_cold_junction_resolution+0x94>)
 80029d4:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <mcp9600_set_cold_junction_resolution+0x88>
    }
    
    return 0;                                                                                     /* success return 0 */
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	0800cc14 	.word	0x0800cc14
 80029e8:	0800cc40 	.word	0x0800cc40

080029ec <mcp9600_set_adc_resolution>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_adc_resolution(mcp9600_handle_t *handle, mcp9600_adc_resolution_t resolution)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <mcp9600_set_adc_resolution+0x16>
    {
        return 2;                                                                                 /* return error */
 80029fe:	2302      	movs	r3, #2
 8002a00:	e038      	b.n	8002a74 <mcp9600_set_adc_resolution+0x88>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7e1b      	ldrb	r3, [r3, #24]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d001      	beq.n	8002a0e <mcp9600_set_adc_resolution+0x22>
    {
        return 3;                                                                                 /* return error */
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e032      	b.n	8002a74 <mcp9600_set_adc_resolution+0x88>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 8002a0e:	f107 020e 	add.w	r2, r7, #14
 8002a12:	2301      	movs	r3, #1
 8002a14:	2106      	movs	r1, #6
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fcf2 	bl	8002400 <a_mcp9600_iic_read>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <mcp9600_set_adc_resolution+0x46>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                      /* read device configuration failed */
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	4814      	ldr	r0, [pc, #80]	; (8002a7c <mcp9600_set_adc_resolution+0x90>)
 8002a2c:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e020      	b.n	8002a74 <mcp9600_set_adc_resolution+0x88>
    }
    
    reg &= ~(3 << 5);                                                                             /* clear configure */
 8002a32:	7bbb      	ldrb	r3, [r7, #14]
 8002a34:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	73bb      	strb	r3, [r7, #14]
    reg |= resolution << 5;                                                                       /* set configure */
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	015b      	lsls	r3, r3, #5
 8002a40:	b25a      	sxtb	r2, r3
 8002a42:	7bbb      	ldrb	r3, [r7, #14]
 8002a44:	b25b      	sxtb	r3, r3
 8002a46:	4313      	orrs	r3, r2
 8002a48:	b25b      	sxtb	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 8002a4e:	f107 020e 	add.w	r2, r7, #14
 8002a52:	2301      	movs	r3, #1
 8002a54:	2106      	movs	r1, #6
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff fcf3 	bl	8002442 <a_mcp9600_iic_write>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <mcp9600_set_adc_resolution+0x86>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                     /* write device configuration failed */
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4805      	ldr	r0, [pc, #20]	; (8002a80 <mcp9600_set_adc_resolution+0x94>)
 8002a6c:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <mcp9600_set_adc_resolution+0x88>
    }
    
    return 0;                                                                                     /* success return 0 */
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	0800cc14 	.word	0x0800cc14
 8002a80:	0800cc40 	.word	0x0800cc40

08002a84 <mcp9600_set_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_mode(mcp9600_handle_t *handle, mcp9600_mode_t mode)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                           /* check handle */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <mcp9600_set_mode+0x16>
    {
        return 2;                                                                                 /* return error */
 8002a96:	2302      	movs	r3, #2
 8002a98:	e034      	b.n	8002b04 <mcp9600_set_mode+0x80>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7e1b      	ldrb	r3, [r3, #24]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d001      	beq.n	8002aa6 <mcp9600_set_mode+0x22>
    {
        return 3;                                                                                 /* return error */
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e02e      	b.n	8002b04 <mcp9600_set_mode+0x80>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 8002aa6:	f107 020e 	add.w	r2, r7, #14
 8002aaa:	2301      	movs	r3, #1
 8002aac:	2106      	movs	r1, #6
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff fca6 	bl	8002400 <a_mcp9600_iic_read>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <mcp9600_set_mode+0x46>
    {
        handle->debug_print("mcp9600: read device configuration failed.\n");                      /* read device configuration failed */
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4812      	ldr	r0, [pc, #72]	; (8002b0c <mcp9600_set_mode+0x88>)
 8002ac4:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e01c      	b.n	8002b04 <mcp9600_set_mode+0x80>
    }
    
    reg &= ~(3 << 0);                                                                             /* clear configure */
 8002aca:	7bbb      	ldrb	r3, [r7, #14]
 8002acc:	f023 0303 	bic.w	r3, r3, #3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	73bb      	strb	r3, [r7, #14]
    reg |= mode << 0;                                                                             /* set configure */
 8002ad4:	7bba      	ldrb	r2, [r7, #14]
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_DEVICE_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 8002ade:	f107 020e 	add.w	r2, r7, #14
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	2106      	movs	r1, #6
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff fcab 	bl	8002442 <a_mcp9600_iic_write>
 8002aec:	4603      	mov	r3, r0
 8002aee:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                 /* check result */
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <mcp9600_set_mode+0x7e>
    {
        handle->debug_print("mcp9600: write device configuration failed.\n");                     /* write device configuration failed */
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	4805      	ldr	r0, [pc, #20]	; (8002b10 <mcp9600_set_mode+0x8c>)
 8002afc:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <mcp9600_set_mode+0x80>
    }
    
    return 0;                                                                                     /* success return 0 */
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	0800cc14 	.word	0x0800cc14
 8002b10:	0800cc40 	.word	0x0800cc40

08002b14 <mcp9600_set_thermocouple_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_thermocouple_type(mcp9600_handle_t *handle, mcp9600_thermocouple_type_t type)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                                        /* check handle */
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <mcp9600_set_thermocouple_type+0x16>
    {
        return 2;                                                                                              /* return error */
 8002b26:	2302      	movs	r3, #2
 8002b28:	e038      	b.n	8002b9c <mcp9600_set_thermocouple_type+0x88>
    }
    if (handle->inited != 1)                                                                                   /* check handle initialization */
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	7e1b      	ldrb	r3, [r3, #24]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d001      	beq.n	8002b36 <mcp9600_set_thermocouple_type+0x22>
    {
        return 3;                                                                                              /* return error */
 8002b32:	2303      	movs	r3, #3
 8002b34:	e032      	b.n	8002b9c <mcp9600_set_thermocouple_type+0x88>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 8002b36:	f107 020e 	add.w	r2, r7, #14
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	2105      	movs	r1, #5
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff fc5e 	bl	8002400 <a_mcp9600_iic_read>
 8002b44:	4603      	mov	r3, r0
 8002b46:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <mcp9600_set_thermocouple_type+0x46>
    {
        handle->debug_print("mcp9600: read thermocouple sensor configuration failed.\n");                      /* read thermocouple sensor configuration failed */
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	4814      	ldr	r0, [pc, #80]	; (8002ba4 <mcp9600_set_thermocouple_type+0x90>)
 8002b54:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 8002b56:	2301      	movs	r3, #1
 8002b58:	e020      	b.n	8002b9c <mcp9600_set_thermocouple_type+0x88>
    }
    
    reg &= ~(0x7 << 4);                                                                                        /* clear configure */
 8002b5a:	7bbb      	ldrb	r3, [r7, #14]
 8002b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	73bb      	strb	r3, [r7, #14]
    reg |= type << 4;                                                                                          /* set configure */
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	b25a      	sxtb	r2, r3
 8002b6a:	7bbb      	ldrb	r3, [r7, #14]
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	b25b      	sxtb	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 8002b76:	f107 020e 	add.w	r2, r7, #14
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	2105      	movs	r1, #5
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff fc5f 	bl	8002442 <a_mcp9600_iic_write>
 8002b84:	4603      	mov	r3, r0
 8002b86:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <mcp9600_set_thermocouple_type+0x86>
    {
        handle->debug_print("mcp9600: write thermocouple sensor configuration failed.\n");                     /* write thermocouple sensor configuration failed */
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <mcp9600_set_thermocouple_type+0x94>)
 8002b94:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <mcp9600_set_thermocouple_type+0x88>
    }
    
    return 0;                                                                                                  /* success return 0 */
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	0800cd84 	.word	0x0800cd84
 8002ba8:	0800cdc0 	.word	0x0800cdc0

08002bac <mcp9600_set_filter_coefficient>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp9600_set_filter_coefficient(mcp9600_handle_t *handle, mcp9600_filter_coefficient_t coefficient)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t reg;
    
    if (handle == NULL)                                                                                        /* check handle */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <mcp9600_set_filter_coefficient+0x16>
    {
        return 2;                                                                                              /* return error */
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e034      	b.n	8002c2c <mcp9600_set_filter_coefficient+0x80>
    }
    if (handle->inited != 1)                                                                                   /* check handle initialization */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7e1b      	ldrb	r3, [r3, #24]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d001      	beq.n	8002bce <mcp9600_set_filter_coefficient+0x22>
    {
        return 3;                                                                                              /* return error */
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e02e      	b.n	8002c2c <mcp9600_set_filter_coefficient+0x80>
    }
    
    res = a_mcp9600_iic_read(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);       /* read config */
 8002bce:	f107 020e 	add.w	r2, r7, #14
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	2105      	movs	r1, #5
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff fc12 	bl	8002400 <a_mcp9600_iic_read>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <mcp9600_set_filter_coefficient+0x46>
    {
        handle->debug_print("mcp9600: read thermocouple sensor configuration failed.\n");                      /* read thermocouple sensor configuration failed */
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	4812      	ldr	r0, [pc, #72]	; (8002c34 <mcp9600_set_filter_coefficient+0x88>)
 8002bec:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e01c      	b.n	8002c2c <mcp9600_set_filter_coefficient+0x80>
    }
    
    reg &= ~(0x7 << 0);                                                                                        /* clear configure */
 8002bf2:	7bbb      	ldrb	r3, [r7, #14]
 8002bf4:	f023 0307 	bic.w	r3, r3, #7
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	73bb      	strb	r3, [r7, #14]
    reg |= coefficient << 0;                                                                                   /* set configure */
 8002bfc:	7bba      	ldrb	r2, [r7, #14]
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	73bb      	strb	r3, [r7, #14]
    res = a_mcp9600_iic_write(handle, MCP9600_REG_THERMOCOUPLE_SENSOR_CONFIGURATION, (uint8_t *)&reg, 1);      /* write config */
 8002c06:	f107 020e 	add.w	r2, r7, #14
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	2105      	movs	r1, #5
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff fc17 	bl	8002442 <a_mcp9600_iic_write>
 8002c14:	4603      	mov	r3, r0
 8002c16:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                              /* check result */
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <mcp9600_set_filter_coefficient+0x7e>
    {
        handle->debug_print("mcp9600: write thermocouple sensor configuration failed.\n");                     /* write thermocouple sensor configuration failed */
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	4805      	ldr	r0, [pc, #20]	; (8002c38 <mcp9600_set_filter_coefficient+0x8c>)
 8002c24:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <mcp9600_set_filter_coefficient+0x80>
    }
    
    return 0;                                                                                                  /* success return 0 */
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	0800cd84 	.word	0x0800cd84
 8002c38:	0800cdc0 	.word	0x0800cdc0

08002c3c <mcp9600_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mcp9600_interface_iic_init(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
    return 0;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <mcp9600_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mcp9600_interface_iic_deinit(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
    return 0;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <mcp9600_interface_iic_write_cmd>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mcp9600_interface_iic_write_cmd(uint8_t addr, uint8_t *buf, uint8_t reg, uint16_t len)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af04      	add	r7, sp, #16
 8002c62:	6039      	str	r1, [r7, #0]
 8002c64:	4611      	mov	r1, r2
 8002c66:	461a      	mov	r2, r3
 8002c68:	4603      	mov	r3, r0
 8002c6a:	71fb      	strb	r3, [r7, #7]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	71bb      	strb	r3, [r7, #6]
 8002c70:	4613      	mov	r3, r2
 8002c72:	80bb      	strh	r3, [r7, #4]

	if(HAL_I2C_Mem_Write(&hi2c1,addr, reg, 1, buf ,len,20) != HAL_OK){
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	b299      	uxth	r1, r3
 8002c78:	79bb      	ldrb	r3, [r7, #6]
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	2314      	movs	r3, #20
 8002c7e:	9302      	str	r3, [sp, #8]
 8002c80:	88bb      	ldrh	r3, [r7, #4]
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2301      	movs	r3, #1
 8002c8a:	4806      	ldr	r0, [pc, #24]	; (8002ca4 <mcp9600_interface_iic_write_cmd+0x48>)
 8002c8c:	f005 fcaa 	bl	80085e4 <HAL_I2C_Mem_Write>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <mcp9600_interface_iic_write_cmd+0x3e>
		return 1;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <mcp9600_interface_iic_write_cmd+0x40>
	}
	 return 0;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000564 	.word	0x20000564

08002ca8 <mcp9600_interface_iic_read_cmd>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mcp9600_interface_iic_read_cmd(uint8_t addr, uint8_t *buf, uint16_t len1, uint8_t *data, uint16_t len_d)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af04      	add	r7, sp, #16
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	81bb      	strh	r3, [r7, #12]

	if(HAL_I2C_Mem_Read(&hi2c1,addr, *buf, len1, data ,len_d,20) != HAL_OK){
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	b299      	uxth	r1, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	89b8      	ldrh	r0, [r7, #12]
 8002cc6:	2314      	movs	r3, #20
 8002cc8:	9302      	str	r3, [sp, #8]
 8002cca:	8b3b      	ldrh	r3, [r7, #24]
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4806      	ldr	r0, [pc, #24]	; (8002cf0 <mcp9600_interface_iic_read_cmd+0x48>)
 8002cd6:	f005 fd99 	bl	800880c <HAL_I2C_Mem_Read>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <mcp9600_interface_iic_read_cmd+0x3c>
		return 1;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <mcp9600_interface_iic_read_cmd+0x3e>
	}
    return 0;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000564 	.word	0x20000564

08002cf4 <mcp9600_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void mcp9600_interface_delay_ms(uint32_t ms)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f002 fab5 	bl	800526c <HAL_Delay>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <mcp9600_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void mcp9600_interface_debug_print(const char *const fmt, ...)
{
 8002d0a:	b40f      	push	{r0, r1, r2, r3}
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
	return;
 8002d10:	bf00      	nop
    
}
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	b004      	add	sp, #16
 8002d1a:	4770      	bx	lr

08002d1c <Run_State>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t Run_State(PodState state) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	73fb      	strb	r3, [r7, #15]

    switch (state) {
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	f200 80aa 	bhi.w	8002e86 <Run_State+0x16a>
 8002d32:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <Run_State+0x1c>)
 8002d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d38:	08002d5d 	.word	0x08002d5d
 8002d3c:	08002dcd 	.word	0x08002dcd
 8002d40:	08002df3 	.word	0x08002df3
 8002d44:	08002e0d 	.word	0x08002e0d
 8002d48:	08002e21 	.word	0x08002e21
 8002d4c:	08002e31 	.word	0x08002e31
 8002d50:	08002e41 	.word	0x08002e41
 8002d54:	08002e57 	.word	0x08002e57
 8002d58:	08002e6d 	.word	0x08002e6d
        case INIT:
        	status = tempsensor_init();
 8002d5c:	f001 ffec 	bl	8004d38 <tempsensor_init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <Run_State+0x52>
        		return 1;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e08f      	b.n	8002e8e <Run_State+0x172>
        	}
        	status = acc_init();
 8002d6e:	f7fd fbd1 	bl	8000514 <acc_init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <Run_State+0x64>
        		return 1;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e086      	b.n	8002e8e <Run_State+0x172>
        	}
        	status = CAN_INIT();
 8002d80:	f7ff f87e 	bl	8001e80 <CAN_INIT>
 8002d84:	4603      	mov	r3, r0
 8002d86:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <Run_State+0x76>
        		return 1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e07d      	b.n	8002e8e <Run_State+0x172>
        	}
        	status = tempsensor_init();
 8002d92:	f001 ffd1 	bl	8004d38 <tempsensor_init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <Run_State+0x88>
        		return 1;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e074      	b.n	8002e8e <Run_State+0x172>
        	}
        	status = acc_init();
 8002da4:	f7fd fbb6 	bl	8000514 <acc_init>
 8002da8:	4603      	mov	r3, r0
 8002daa:	73fb      	strb	r3, [r7, #15]
        	if(status != 0){
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <Run_State+0x9a>
        		return 1;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e06b      	b.n	8002e8e <Run_State+0x172>
        	}
        	pump_control(1);
 8002db6:	2001      	movs	r0, #1
 8002db8:	f001 f81c 	bl	8003df4 <pump_control>
        	HAL_TIM_Base_Start_IT(&htim5);
 8002dbc:	4836      	ldr	r0, [pc, #216]	; (8002e98 <Run_State+0x17c>)
 8002dbe:	f007 fcc9 	bl	800a754 <HAL_TIM_Base_Start_IT>
        	Curr_State = SAFE_TO_APPROACH;
 8002dc2:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <Run_State+0x180>)
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	701a      	strb	r2, [r3, #0]
        	return status;
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	e060      	b.n	8002e8e <Run_State+0x172>
            break;
        case FAULT:
        	HV_off();
 8002dcc:	f000 fef8 	bl	8003bc0 <HV_off>
        	yellowstatus(0);
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f000 ff6d 	bl	8003cb0 <yellowstatus>
        	greenstatus(0);
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f000 ffa0 	bl	8003d1c <greenstatus>
        	redstatus(1);
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f000 ff2f 	bl	8003c40 <redstatus>
        	pump_control(0);
 8002de2:	2000      	movs	r0, #0
 8002de4:	f001 f806 	bl	8003df4 <pump_control>
        	brake_state(0);
 8002de8:	2000      	movs	r0, #0
 8002dea:	f000 ffcd 	bl	8003d88 <brake_state>

        	return status;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	e04d      	b.n	8002e8e <Run_State+0x172>
            break;
        case SAFE_TO_APPROACH:
        	HV_off();
 8002df2:	f000 fee5 	bl	8003bc0 <HV_off>
        	yellowstatus(0);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f000 ff5a 	bl	8003cb0 <yellowstatus>
        	greenstatus(0);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f000 ff8d 	bl	8003d1c <greenstatus>
        	brake_state(1);
 8002e02:	2001      	movs	r0, #1
 8002e04:	f000 ffc0 	bl	8003d88 <brake_state>

        	return status;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	e040      	b.n	8002e8e <Run_State+0x172>
            break;
        case READY:
        	precharge();
 8002e0c:	f000 fe4e 	bl	8003aac <precharge>
        	yellowstatus(1);
 8002e10:	2001      	movs	r0, #1
 8002e12:	f000 ff4d 	bl	8003cb0 <yellowstatus>
        	brake_state(0);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f000 ffb6 	bl	8003d88 <brake_state>
        	return status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	e036      	b.n	8002e8e <Run_State+0x172>
            break;
        case LAUNCH:
        	yellowstatus(0);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f000 ff45 	bl	8003cb0 <yellowstatus>
        	greenstatus(1);
 8002e26:	2001      	movs	r0, #1
 8002e28:	f000 ff78 	bl	8003d1c <greenstatus>

        	return status;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	e02e      	b.n	8002e8e <Run_State+0x172>
            break;
        case COAST:
        	yellowstatus(0);
 8002e30:	2000      	movs	r0, #0
 8002e32:	f000 ff3d 	bl	8003cb0 <yellowstatus>
        	greenstatus(1);
 8002e36:	2001      	movs	r0, #1
 8002e38:	f000 ff70 	bl	8003d1c <greenstatus>

        	return status;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	e026      	b.n	8002e8e <Run_State+0x172>
            break;
        case BRAKE:
        	yellowstatus(0);
 8002e40:	2000      	movs	r0, #0
 8002e42:	f000 ff35 	bl	8003cb0 <yellowstatus>
        	greenstatus(1);
 8002e46:	2001      	movs	r0, #1
 8002e48:	f000 ff68 	bl	8003d1c <greenstatus>
        	brake_state(1);
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f000 ff9b 	bl	8003d88 <brake_state>

        	return status;
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	e01b      	b.n	8002e8e <Run_State+0x172>
            break;
        case CRAWL:
        	yellowstatus(0);
 8002e56:	2000      	movs	r0, #0
 8002e58:	f000 ff2a 	bl	8003cb0 <yellowstatus>
        	greenstatus(1);
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f000 ff5d 	bl	8003d1c <greenstatus>
        	brake_state(0);
 8002e62:	2000      	movs	r0, #0
 8002e64:	f000 ff90 	bl	8003d88 <brake_state>

        	return status;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	e010      	b.n	8002e8e <Run_State+0x172>
            break;
        case TRACK:
        	HV_off();
 8002e6c:	f000 fea8 	bl	8003bc0 <HV_off>
        	yellowstatus(0);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f000 ff1d 	bl	8003cb0 <yellowstatus>
        	greenstatus(0);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f000 ff50 	bl	8003d1c <greenstatus>
        	brake_state(0);
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f000 ff83 	bl	8003d88 <brake_state>

        	return status;
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	e003      	b.n	8002e8e <Run_State+0x172>
            break;
        default:
        	Curr_State = FAULT;
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <Run_State+0x180>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
        	//invalid state
            return 1;
 8002e8c:	2301      	movs	r3, #1
            break;
    }
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000938 	.word	0x20000938
 8002e9c:	20000c62 	.word	0x20000c62

08002ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ea4:	f002 f971 	bl	800518a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ea8:	f000 f842 	bl	8002f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002eac:	f000 fd28 	bl	8003900 <MX_GPIO_Init>
  MX_DMA_Init();
 8002eb0:	f000 fcdc 	bl	800386c <MX_DMA_Init>
  MX_ADC1_Init();
 8002eb4:	f000 f892 	bl	8002fdc <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8002eb8:	f000 f992 	bl	80031e0 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8002ebc:	f000 f9d8 	bl	8003270 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 8002ec0:	f000 fa1e 	bl	8003300 <MX_FDCAN3_Init>
  MX_I2C1_Init();
 8002ec4:	f000 fa64 	bl	8003390 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002ec8:	f000 fb8c 	bl	80035e4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8002ecc:	f000 fca6 	bl	800381c <MX_USB_PCD_Init>
  MX_I2C2_Init();
 8002ed0:	f000 fa9e 	bl	8003410 <MX_I2C2_Init>
  MX_IWDG_Init();
 8002ed4:	f000 fb1c 	bl	8003510 <MX_IWDG_Init>
  MX_ADC5_Init();
 8002ed8:	f000 f91c 	bl	8003114 <MX_ADC5_Init>
  MX_I2C3_Init();
 8002edc:	f000 fad8 	bl	8003490 <MX_I2C3_Init>
  MX_SPI3_Init();
 8002ee0:	f000 fbbe 	bl	8003660 <MX_SPI3_Init>
  MX_LPUART1_UART_Init();
 8002ee4:	f000 fb32 	bl	800354c <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8002ee8:	f000 fbf8 	bl	80036dc <MX_TIM2_Init>
  MX_TIM5_Init();
 8002eec:	f000 fc46 	bl	800377c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */


  Fault_Flag = Run_State(Curr_State);
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <main+0x88>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff11 	bl	8002d1c <Run_State>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <main+0x8c>)
 8002f00:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Fault_Flag = Run_State(Curr_State);
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <main+0x88>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff08 	bl	8002d1c <Run_State>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <main+0x8c>)
 8002f12:	701a      	strb	r2, [r3, #0]
	  if(Fault_Flag != 0){
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <main+0x8c>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f1      	beq.n	8002f02 <main+0x62>
		  Curr_State = FAULT;
 8002f1e:	4b02      	ldr	r3, [pc, #8]	; (8002f28 <main+0x88>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]
	  Fault_Flag = Run_State(Curr_State);
 8002f24:	e7ed      	b.n	8002f02 <main+0x62>
 8002f26:	bf00      	nop
 8002f28:	20000c62 	.word	0x20000c62
 8002f2c:	20000c60 	.word	0x20000c60

08002f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b094      	sub	sp, #80	; 0x50
 8002f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f36:	f107 0318 	add.w	r3, r7, #24
 8002f3a:	2238      	movs	r2, #56	; 0x38
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f009 fade 	bl	800c500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	60da      	str	r2, [r3, #12]
 8002f50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f006 faa0 	bl	8009498 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8002f58:	232b      	movs	r3, #43	; 0x2b
 8002f5a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f60:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f68:	2340      	movs	r3, #64	; 0x40
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002f70:	2301      	movs	r3, #1
 8002f72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f74:	2302      	movs	r3, #2
 8002f76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002f80:	2355      	movs	r3, #85	; 0x55
 8002f82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f84:	2302      	movs	r3, #2
 8002f86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f90:	f107 0318 	add.w	r3, r7, #24
 8002f94:	4618      	mov	r0, r3
 8002f96:	f006 fb33 	bl	8009600 <HAL_RCC_OscConfig>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002fa0:	f000 fd7e 	bl	8003aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fa4:	230f      	movs	r3, #15
 8002fa6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	2104      	movs	r1, #4
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f006 fe2f 	bl	8009c24 <HAL_RCC_ClockConfig>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002fcc:	f000 fd68 	bl	8003aa0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002fd0:	f006 fffe 	bl	8009fd0 <HAL_RCC_EnableCSS>
}
 8002fd4:	bf00      	nop
 8002fd6:	3750      	adds	r7, #80	; 0x50
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08c      	sub	sp, #48	; 0x30
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f009 fa83 	bl	800c500 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002ffa:	4b44      	ldr	r3, [pc, #272]	; (800310c <MX_ADC1_Init+0x130>)
 8002ffc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003000:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003002:	4b42      	ldr	r3, [pc, #264]	; (800310c <MX_ADC1_Init+0x130>)
 8003004:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003008:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800300a:	4b40      	ldr	r3, [pc, #256]	; (800310c <MX_ADC1_Init+0x130>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003010:	4b3e      	ldr	r3, [pc, #248]	; (800310c <MX_ADC1_Init+0x130>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003016:	4b3d      	ldr	r3, [pc, #244]	; (800310c <MX_ADC1_Init+0x130>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800301c:	4b3b      	ldr	r3, [pc, #236]	; (800310c <MX_ADC1_Init+0x130>)
 800301e:	2201      	movs	r2, #1
 8003020:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003022:	4b3a      	ldr	r3, [pc, #232]	; (800310c <MX_ADC1_Init+0x130>)
 8003024:	2204      	movs	r2, #4
 8003026:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003028:	4b38      	ldr	r3, [pc, #224]	; (800310c <MX_ADC1_Init+0x130>)
 800302a:	2200      	movs	r2, #0
 800302c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <MX_ADC1_Init+0x130>)
 8003030:	2201      	movs	r2, #1
 8003032:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8003034:	4b35      	ldr	r3, [pc, #212]	; (800310c <MX_ADC1_Init+0x130>)
 8003036:	2204      	movs	r2, #4
 8003038:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800303a:	4b34      	ldr	r3, [pc, #208]	; (800310c <MX_ADC1_Init+0x130>)
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003042:	4b32      	ldr	r3, [pc, #200]	; (800310c <MX_ADC1_Init+0x130>)
 8003044:	2200      	movs	r2, #0
 8003046:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003048:	4b30      	ldr	r3, [pc, #192]	; (800310c <MX_ADC1_Init+0x130>)
 800304a:	2200      	movs	r2, #0
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800304e:	4b2f      	ldr	r3, [pc, #188]	; (800310c <MX_ADC1_Init+0x130>)
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003056:	4b2d      	ldr	r3, [pc, #180]	; (800310c <MX_ADC1_Init+0x130>)
 8003058:	2200      	movs	r2, #0
 800305a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800305c:	4b2b      	ldr	r3, [pc, #172]	; (800310c <MX_ADC1_Init+0x130>)
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003064:	4829      	ldr	r0, [pc, #164]	; (800310c <MX_ADC1_Init+0x130>)
 8003066:	f002 fb41 	bl	80056ec <HAL_ADC_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003070:	f000 fd16 	bl	8003aa0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003074:	2300      	movs	r3, #0
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800307c:	4619      	mov	r1, r3
 800307e:	4823      	ldr	r0, [pc, #140]	; (800310c <MX_ADC1_Init+0x130>)
 8003080:	f003 fb68 	bl	8006754 <HAL_ADCEx_MultiModeConfigChannel>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800308a:	f000 fd09 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <MX_ADC1_Init+0x134>)
 8003090:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003092:	2306      	movs	r3, #6
 8003094:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800309a:	237f      	movs	r3, #127	; 0x7f
 800309c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800309e:	2304      	movs	r3, #4
 80030a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030a6:	1d3b      	adds	r3, r7, #4
 80030a8:	4619      	mov	r1, r3
 80030aa:	4818      	ldr	r0, [pc, #96]	; (800310c <MX_ADC1_Init+0x130>)
 80030ac:	f002 fdc2 	bl	8005c34 <HAL_ADC_ConfigChannel>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80030b6:	f000 fcf3 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80030ba:	230c      	movs	r3, #12
 80030bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030be:	1d3b      	adds	r3, r7, #4
 80030c0:	4619      	mov	r1, r3
 80030c2:	4812      	ldr	r0, [pc, #72]	; (800310c <MX_ADC1_Init+0x130>)
 80030c4:	f002 fdb6 	bl	8005c34 <HAL_ADC_ConfigChannel>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80030ce:	f000 fce7 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80030d2:	2312      	movs	r3, #18
 80030d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	4619      	mov	r1, r3
 80030da:	480c      	ldr	r0, [pc, #48]	; (800310c <MX_ADC1_Init+0x130>)
 80030dc:	f002 fdaa 	bl	8005c34 <HAL_ADC_ConfigChannel>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 80030e6:	f000 fcdb 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80030ea:	2318      	movs	r3, #24
 80030ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	4619      	mov	r1, r3
 80030f2:	4806      	ldr	r0, [pc, #24]	; (800310c <MX_ADC1_Init+0x130>)
 80030f4:	f002 fd9e 	bl	8005c34 <HAL_ADC_ConfigChannel>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80030fe:	f000 fccf 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003102:	bf00      	nop
 8003104:	3730      	adds	r7, #48	; 0x30
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200002a0 	.word	0x200002a0
 8003110:	04300002 	.word	0x04300002

08003114 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800311a:	463b      	mov	r3, r7
 800311c:	2220      	movs	r2, #32
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f009 f9ed 	bl	800c500 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8003126:	4b2b      	ldr	r3, [pc, #172]	; (80031d4 <MX_ADC5_Init+0xc0>)
 8003128:	4a2b      	ldr	r2, [pc, #172]	; (80031d8 <MX_ADC5_Init+0xc4>)
 800312a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800312c:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <MX_ADC5_Init+0xc0>)
 800312e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003132:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8003134:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <MX_ADC5_Init+0xc0>)
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800313a:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <MX_ADC5_Init+0xc0>)
 800313c:	2200      	movs	r2, #0
 800313e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8003140:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <MX_ADC5_Init+0xc0>)
 8003142:	2200      	movs	r2, #0
 8003144:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003146:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <MX_ADC5_Init+0xc0>)
 8003148:	2200      	movs	r2, #0
 800314a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800314c:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <MX_ADC5_Init+0xc0>)
 800314e:	2204      	movs	r2, #4
 8003150:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8003152:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <MX_ADC5_Init+0xc0>)
 8003154:	2200      	movs	r2, #0
 8003156:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8003158:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <MX_ADC5_Init+0xc0>)
 800315a:	2200      	movs	r2, #0
 800315c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <MX_ADC5_Init+0xc0>)
 8003160:	2201      	movs	r2, #1
 8003162:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <MX_ADC5_Init+0xc0>)
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <MX_ADC5_Init+0xc0>)
 800316e:	2200      	movs	r2, #0
 8003170:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003172:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <MX_ADC5_Init+0xc0>)
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8003178:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <MX_ADC5_Init+0xc0>)
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003180:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <MX_ADC5_Init+0xc0>)
 8003182:	2200      	movs	r2, #0
 8003184:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <MX_ADC5_Init+0xc0>)
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800318e:	4811      	ldr	r0, [pc, #68]	; (80031d4 <MX_ADC5_Init+0xc0>)
 8003190:	f002 faac 	bl	80056ec <HAL_ADC_Init>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 800319a:	f000 fc81 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <MX_ADC5_Init+0xc8>)
 80031a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031a2:	2306      	movs	r3, #6
 80031a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80031aa:	237f      	movs	r3, #127	; 0x7f
 80031ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80031ae:	2304      	movs	r3, #4
 80031b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80031b6:	463b      	mov	r3, r7
 80031b8:	4619      	mov	r1, r3
 80031ba:	4806      	ldr	r0, [pc, #24]	; (80031d4 <MX_ADC5_Init+0xc0>)
 80031bc:	f002 fd3a 	bl	8005c34 <HAL_ADC_ConfigChannel>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 80031c6:	f000 fc6b 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80031ca:	bf00      	nop
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	2000030c 	.word	0x2000030c
 80031d8:	50000600 	.word	0x50000600
 80031dc:	08600004 	.word	0x08600004

080031e0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80031e4:	4b20      	ldr	r3, [pc, #128]	; (8003268 <MX_FDCAN1_Init+0x88>)
 80031e6:	4a21      	ldr	r2, [pc, #132]	; (800326c <MX_FDCAN1_Init+0x8c>)
 80031e8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80031ea:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <MX_FDCAN1_Init+0x88>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <MX_FDCAN1_Init+0x88>)
 80031f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80031f6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <MX_FDCAN1_Init+0x88>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80031fe:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <MX_FDCAN1_Init+0x88>)
 8003200:	2201      	movs	r2, #1
 8003202:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003204:	4b18      	ldr	r3, [pc, #96]	; (8003268 <MX_FDCAN1_Init+0x88>)
 8003206:	2200      	movs	r2, #0
 8003208:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800320a:	4b17      	ldr	r3, [pc, #92]	; (8003268 <MX_FDCAN1_Init+0x88>)
 800320c:	2200      	movs	r2, #0
 800320e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8003210:	4b15      	ldr	r3, [pc, #84]	; (8003268 <MX_FDCAN1_Init+0x88>)
 8003212:	2202      	movs	r2, #2
 8003214:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <MX_FDCAN1_Init+0x88>)
 8003218:	2202      	movs	r2, #2
 800321a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 167;
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <MX_FDCAN1_Init+0x88>)
 800321e:	22a7      	movs	r2, #167	; 0xa7
 8003220:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <MX_FDCAN1_Init+0x88>)
 8003224:	2202      	movs	r2, #2
 8003226:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 17;
 8003228:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <MX_FDCAN1_Init+0x88>)
 800322a:	2211      	movs	r2, #17
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <MX_FDCAN1_Init+0x88>)
 8003230:	2204      	movs	r2, #4
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <MX_FDCAN1_Init+0x88>)
 8003236:	2205      	movs	r2, #5
 8003238:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <MX_FDCAN1_Init+0x88>)
 800323c:	2204      	movs	r2, #4
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <MX_FDCAN1_Init+0x88>)
 8003242:	2200      	movs	r2, #0
 8003244:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <MX_FDCAN1_Init+0x88>)
 8003248:	2200      	movs	r2, #0
 800324a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <MX_FDCAN1_Init+0x88>)
 800324e:	2200      	movs	r2, #0
 8003250:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003252:	4805      	ldr	r0, [pc, #20]	; (8003268 <MX_FDCAN1_Init+0x88>)
 8003254:	f003 ff08 	bl	8007068 <HAL_FDCAN_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800325e:	f000 fc1f 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000438 	.word	0x20000438
 800326c:	40006400 	.word	0x40006400

08003270 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003274:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 8003276:	4a21      	ldr	r2, [pc, #132]	; (80032fc <MX_FDCAN2_Init+0x8c>)
 8003278:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800327a:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 800327c:	2200      	movs	r2, #0
 800327e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 8003282:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003286:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 800328a:	2200      	movs	r2, #0
 800328c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 800328e:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 8003290:	2201      	movs	r2, #1
 8003292:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003294:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 8003296:	2200      	movs	r2, #0
 8003298:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800329a:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 800329c:	2200      	movs	r2, #0
 800329e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 2;
 80032a0:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 80032a2:	2202      	movs	r2, #2
 80032a4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 2;
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 80032a8:	2202      	movs	r2, #2
 80032aa:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 167;
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 80032ae:	22a7      	movs	r2, #167	; 0xa7
 80032b0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 80032b4:	2202      	movs	r2, #2
 80032b6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 17;
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 80032ba:	2211      	movs	r2, #17
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 80032c0:	2204      	movs	r2, #4
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 5;
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 80032c6:	2205      	movs	r2, #5
 80032c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 4;
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 80032cc:	2204      	movs	r2, #4
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 80032d8:	2200      	movs	r2, #0
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 80032de:	2200      	movs	r2, #0
 80032e0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80032e2:	4805      	ldr	r0, [pc, #20]	; (80032f8 <MX_FDCAN2_Init+0x88>)
 80032e4:	f003 fec0 	bl	8007068 <HAL_FDCAN_Init>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 80032ee:	f000 fbd7 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	2000049c 	.word	0x2000049c
 80032fc:	40006800 	.word	0x40006800

08003300 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <MX_FDCAN3_Init+0x88>)
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <MX_FDCAN3_Init+0x8c>)
 8003308:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800330a:	4b1f      	ldr	r3, [pc, #124]	; (8003388 <MX_FDCAN3_Init+0x88>)
 800330c:	2200      	movs	r2, #0
 800330e:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003310:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <MX_FDCAN3_Init+0x88>)
 8003312:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003316:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <MX_FDCAN3_Init+0x88>)
 800331a:	2200      	movs	r2, #0
 800331c:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 800331e:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <MX_FDCAN3_Init+0x88>)
 8003320:	2201      	movs	r2, #1
 8003322:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8003324:	4b18      	ldr	r3, [pc, #96]	; (8003388 <MX_FDCAN3_Init+0x88>)
 8003326:	2200      	movs	r2, #0
 8003328:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800332a:	4b17      	ldr	r3, [pc, #92]	; (8003388 <MX_FDCAN3_Init+0x88>)
 800332c:	2200      	movs	r2, #0
 800332e:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 2;
 8003330:	4b15      	ldr	r3, [pc, #84]	; (8003388 <MX_FDCAN3_Init+0x88>)
 8003332:	2202      	movs	r2, #2
 8003334:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 2;
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <MX_FDCAN3_Init+0x88>)
 8003338:	2202      	movs	r2, #2
 800333a:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 167;
 800333c:	4b12      	ldr	r3, [pc, #72]	; (8003388 <MX_FDCAN3_Init+0x88>)
 800333e:	22a7      	movs	r2, #167	; 0xa7
 8003340:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <MX_FDCAN3_Init+0x88>)
 8003344:	2202      	movs	r2, #2
 8003346:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 17;
 8003348:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <MX_FDCAN3_Init+0x88>)
 800334a:	2211      	movs	r2, #17
 800334c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 4;
 800334e:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <MX_FDCAN3_Init+0x88>)
 8003350:	2204      	movs	r2, #4
 8003352:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 5;
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <MX_FDCAN3_Init+0x88>)
 8003356:	2205      	movs	r2, #5
 8003358:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 4;
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <MX_FDCAN3_Init+0x88>)
 800335c:	2204      	movs	r2, #4
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 8003360:	4b09      	ldr	r3, [pc, #36]	; (8003388 <MX_FDCAN3_Init+0x88>)
 8003362:	2200      	movs	r2, #0
 8003364:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8003366:	4b08      	ldr	r3, [pc, #32]	; (8003388 <MX_FDCAN3_Init+0x88>)
 8003368:	2200      	movs	r2, #0
 800336a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <MX_FDCAN3_Init+0x88>)
 800336e:	2200      	movs	r2, #0
 8003370:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8003372:	4805      	ldr	r0, [pc, #20]	; (8003388 <MX_FDCAN3_Init+0x88>)
 8003374:	f003 fe78 	bl	8007068 <HAL_FDCAN_Init>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_FDCAN3_Init+0x82>
  {
    Error_Handler();
 800337e:	f000 fb8f 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000500 	.word	0x20000500
 800338c:	40006c00 	.word	0x40006c00

08003390 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003394:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <MX_I2C1_Init+0x74>)
 8003396:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <MX_I2C1_Init+0x78>)
 8003398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A0A6FB;
 800339a:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <MX_I2C1_Init+0x74>)
 800339c:	4a1b      	ldr	r2, [pc, #108]	; (800340c <MX_I2C1_Init+0x7c>)
 800339e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033a0:	4b18      	ldr	r3, [pc, #96]	; (8003404 <MX_I2C1_Init+0x74>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033a6:	4b17      	ldr	r3, [pc, #92]	; (8003404 <MX_I2C1_Init+0x74>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033ac:	4b15      	ldr	r3, [pc, #84]	; (8003404 <MX_I2C1_Init+0x74>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <MX_I2C1_Init+0x74>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <MX_I2C1_Init+0x74>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033be:	4b11      	ldr	r3, [pc, #68]	; (8003404 <MX_I2C1_Init+0x74>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033c4:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <MX_I2C1_Init+0x74>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033ca:	480e      	ldr	r0, [pc, #56]	; (8003404 <MX_I2C1_Init+0x74>)
 80033cc:	f004 fe60 	bl	8008090 <HAL_I2C_Init>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033d6:	f000 fb63 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033da:	2100      	movs	r1, #0
 80033dc:	4809      	ldr	r0, [pc, #36]	; (8003404 <MX_I2C1_Init+0x74>)
 80033de:	f005 fe7d 	bl	80090dc <HAL_I2CEx_ConfigAnalogFilter>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80033e8:	f000 fb5a 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033ec:	2100      	movs	r1, #0
 80033ee:	4805      	ldr	r0, [pc, #20]	; (8003404 <MX_I2C1_Init+0x74>)
 80033f0:	f005 febf 	bl	8009172 <HAL_I2CEx_ConfigDigitalFilter>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80033fa:	f000 fb51 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000564 	.word	0x20000564
 8003408:	40005400 	.word	0x40005400
 800340c:	10a0a6fb 	.word	0x10a0a6fb

08003410 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <MX_I2C2_Init+0x74>)
 8003416:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <MX_I2C2_Init+0x78>)
 8003418:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10A0A6FB;
 800341a:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <MX_I2C2_Init+0x74>)
 800341c:	4a1b      	ldr	r2, [pc, #108]	; (800348c <MX_I2C2_Init+0x7c>)
 800341e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003420:	4b18      	ldr	r3, [pc, #96]	; (8003484 <MX_I2C2_Init+0x74>)
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <MX_I2C2_Init+0x74>)
 8003428:	2201      	movs	r2, #1
 800342a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800342c:	4b15      	ldr	r3, [pc, #84]	; (8003484 <MX_I2C2_Init+0x74>)
 800342e:	2200      	movs	r2, #0
 8003430:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <MX_I2C2_Init+0x74>)
 8003434:	2200      	movs	r2, #0
 8003436:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <MX_I2C2_Init+0x74>)
 800343a:	2200      	movs	r2, #0
 800343c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <MX_I2C2_Init+0x74>)
 8003440:	2200      	movs	r2, #0
 8003442:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <MX_I2C2_Init+0x74>)
 8003446:	2200      	movs	r2, #0
 8003448:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800344a:	480e      	ldr	r0, [pc, #56]	; (8003484 <MX_I2C2_Init+0x74>)
 800344c:	f004 fe20 	bl	8008090 <HAL_I2C_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003456:	f000 fb23 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800345a:	2100      	movs	r1, #0
 800345c:	4809      	ldr	r0, [pc, #36]	; (8003484 <MX_I2C2_Init+0x74>)
 800345e:	f005 fe3d 	bl	80090dc <HAL_I2CEx_ConfigAnalogFilter>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003468:	f000 fb1a 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800346c:	2100      	movs	r1, #0
 800346e:	4805      	ldr	r0, [pc, #20]	; (8003484 <MX_I2C2_Init+0x74>)
 8003470:	f005 fe7f 	bl	8009172 <HAL_I2CEx_ConfigDigitalFilter>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800347a:	f000 fb11 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200005b8 	.word	0x200005b8
 8003488:	40005800 	.word	0x40005800
 800348c:	10a0a6fb 	.word	0x10a0a6fb

08003490 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <MX_I2C3_Init+0x74>)
 8003496:	4a1c      	ldr	r2, [pc, #112]	; (8003508 <MX_I2C3_Init+0x78>)
 8003498:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10A0A6FB;
 800349a:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <MX_I2C3_Init+0x74>)
 800349c:	4a1b      	ldr	r2, [pc, #108]	; (800350c <MX_I2C3_Init+0x7c>)
 800349e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80034a0:	4b18      	ldr	r3, [pc, #96]	; (8003504 <MX_I2C3_Init+0x74>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034a6:	4b17      	ldr	r3, [pc, #92]	; (8003504 <MX_I2C3_Init+0x74>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034ac:	4b15      	ldr	r3, [pc, #84]	; (8003504 <MX_I2C3_Init+0x74>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80034b2:	4b14      	ldr	r3, [pc, #80]	; (8003504 <MX_I2C3_Init+0x74>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <MX_I2C3_Init+0x74>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <MX_I2C3_Init+0x74>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <MX_I2C3_Init+0x74>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80034ca:	480e      	ldr	r0, [pc, #56]	; (8003504 <MX_I2C3_Init+0x74>)
 80034cc:	f004 fde0 	bl	8008090 <HAL_I2C_Init>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80034d6:	f000 fae3 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034da:	2100      	movs	r1, #0
 80034dc:	4809      	ldr	r0, [pc, #36]	; (8003504 <MX_I2C3_Init+0x74>)
 80034de:	f005 fdfd 	bl	80090dc <HAL_I2CEx_ConfigAnalogFilter>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80034e8:	f000 fada 	bl	8003aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80034ec:	2100      	movs	r1, #0
 80034ee:	4805      	ldr	r0, [pc, #20]	; (8003504 <MX_I2C3_Init+0x74>)
 80034f0:	f005 fe3f 	bl	8009172 <HAL_I2CEx_ConfigDigitalFilter>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80034fa:	f000 fad1 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	2000060c 	.word	0x2000060c
 8003508:	40007800 	.word	0x40007800
 800350c:	10a0a6fb 	.word	0x10a0a6fb

08003510 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <MX_IWDG_Init+0x34>)
 8003516:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <MX_IWDG_Init+0x38>)
 8003518:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <MX_IWDG_Init+0x34>)
 800351c:	2200      	movs	r2, #0
 800351e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <MX_IWDG_Init+0x34>)
 8003522:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003526:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <MX_IWDG_Init+0x34>)
 800352a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800352e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003530:	4804      	ldr	r0, [pc, #16]	; (8003544 <MX_IWDG_Init+0x34>)
 8003532:	f005 fe6a 	bl	800920a <HAL_IWDG_Init>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800353c:	f000 fab0 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003540:	bf00      	nop
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000780 	.word	0x20000780
 8003548:	40003000 	.word	0x40003000

0800354c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003550:	4b22      	ldr	r3, [pc, #136]	; (80035dc <MX_LPUART1_UART_Init+0x90>)
 8003552:	4a23      	ldr	r2, [pc, #140]	; (80035e0 <MX_LPUART1_UART_Init+0x94>)
 8003554:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8003556:	4b21      	ldr	r3, [pc, #132]	; (80035dc <MX_LPUART1_UART_Init+0x90>)
 8003558:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800355c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800355e:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <MX_LPUART1_UART_Init+0x90>)
 8003560:	2200      	movs	r2, #0
 8003562:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003564:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <MX_LPUART1_UART_Init+0x90>)
 8003566:	2200      	movs	r2, #0
 8003568:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800356a:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <MX_LPUART1_UART_Init+0x90>)
 800356c:	2200      	movs	r2, #0
 800356e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <MX_LPUART1_UART_Init+0x90>)
 8003572:	220c      	movs	r2, #12
 8003574:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003576:	4b19      	ldr	r3, [pc, #100]	; (80035dc <MX_LPUART1_UART_Init+0x90>)
 8003578:	2200      	movs	r2, #0
 800357a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800357c:	4b17      	ldr	r3, [pc, #92]	; (80035dc <MX_LPUART1_UART_Init+0x90>)
 800357e:	2200      	movs	r2, #0
 8003580:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003582:	4b16      	ldr	r3, [pc, #88]	; (80035dc <MX_LPUART1_UART_Init+0x90>)
 8003584:	2200      	movs	r2, #0
 8003586:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003588:	4b14      	ldr	r3, [pc, #80]	; (80035dc <MX_LPUART1_UART_Init+0x90>)
 800358a:	2200      	movs	r2, #0
 800358c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800358e:	2300      	movs	r3, #0
 8003590:	2200      	movs	r2, #0
 8003592:	2100      	movs	r1, #0
 8003594:	4811      	ldr	r0, [pc, #68]	; (80035dc <MX_LPUART1_UART_Init+0x90>)
 8003596:	f008 fb62 	bl	800bc5e <HAL_RS485Ex_Init>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80035a0:	f000 fa7e 	bl	8003aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035a4:	2100      	movs	r1, #0
 80035a6:	480d      	ldr	r0, [pc, #52]	; (80035dc <MX_LPUART1_UART_Init+0x90>)
 80035a8:	f008 fbfb 	bl	800bda2 <HAL_UARTEx_SetTxFifoThreshold>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80035b2:	f000 fa75 	bl	8003aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035b6:	2100      	movs	r1, #0
 80035b8:	4808      	ldr	r0, [pc, #32]	; (80035dc <MX_LPUART1_UART_Init+0x90>)
 80035ba:	f008 fc30 	bl	800be1e <HAL_UARTEx_SetRxFifoThreshold>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80035c4:	f000 fa6c 	bl	8003aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80035c8:	4804      	ldr	r0, [pc, #16]	; (80035dc <MX_LPUART1_UART_Init+0x90>)
 80035ca:	f008 fbb1 	bl	800bd30 <HAL_UARTEx_DisableFifoMode>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80035d4:	f000 fa64 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80035d8:	bf00      	nop
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000790 	.word	0x20000790
 80035e0:	40008000 	.word	0x40008000

080035e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035e8:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <MX_SPI1_Init+0x74>)
 80035ea:	4a1c      	ldr	r2, [pc, #112]	; (800365c <MX_SPI1_Init+0x78>)
 80035ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035ee:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <MX_SPI1_Init+0x74>)
 80035f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035f6:	4b18      	ldr	r3, [pc, #96]	; (8003658 <MX_SPI1_Init+0x74>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80035fc:	4b16      	ldr	r3, [pc, #88]	; (8003658 <MX_SPI1_Init+0x74>)
 80035fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003602:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003604:	4b14      	ldr	r3, [pc, #80]	; (8003658 <MX_SPI1_Init+0x74>)
 8003606:	2200      	movs	r2, #0
 8003608:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <MX_SPI1_Init+0x74>)
 800360c:	2200      	movs	r2, #0
 800360e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <MX_SPI1_Init+0x74>)
 8003612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003616:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <MX_SPI1_Init+0x74>)
 800361a:	2200      	movs	r2, #0
 800361c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <MX_SPI1_Init+0x74>)
 8003620:	2200      	movs	r2, #0
 8003622:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <MX_SPI1_Init+0x74>)
 8003626:	2200      	movs	r2, #0
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800362a:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <MX_SPI1_Init+0x74>)
 800362c:	2200      	movs	r2, #0
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <MX_SPI1_Init+0x74>)
 8003632:	2207      	movs	r2, #7
 8003634:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <MX_SPI1_Init+0x74>)
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <MX_SPI1_Init+0x74>)
 800363e:	2208      	movs	r2, #8
 8003640:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003642:	4805      	ldr	r0, [pc, #20]	; (8003658 <MX_SPI1_Init+0x74>)
 8003644:	f006 ff84 	bl	800a550 <HAL_SPI_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800364e:	f000 fa27 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000824 	.word	0x20000824
 800365c:	40013000 	.word	0x40013000

08003660 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <MX_SPI3_Init+0x74>)
 8003666:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <MX_SPI3_Init+0x78>)
 8003668:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <MX_SPI3_Init+0x74>)
 800366c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003670:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003672:	4b18      	ldr	r3, [pc, #96]	; (80036d4 <MX_SPI3_Init+0x74>)
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <MX_SPI3_Init+0x74>)
 800367a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800367e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003680:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <MX_SPI3_Init+0x74>)
 8003682:	2200      	movs	r2, #0
 8003684:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003686:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <MX_SPI3_Init+0x74>)
 8003688:	2200      	movs	r2, #0
 800368a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <MX_SPI3_Init+0x74>)
 800368e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003692:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003694:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <MX_SPI3_Init+0x74>)
 8003696:	2200      	movs	r2, #0
 8003698:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <MX_SPI3_Init+0x74>)
 800369c:	2200      	movs	r2, #0
 800369e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <MX_SPI3_Init+0x74>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <MX_SPI3_Init+0x74>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <MX_SPI3_Init+0x74>)
 80036ae:	2207      	movs	r2, #7
 80036b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <MX_SPI3_Init+0x74>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <MX_SPI3_Init+0x74>)
 80036ba:	2208      	movs	r2, #8
 80036bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80036be:	4805      	ldr	r0, [pc, #20]	; (80036d4 <MX_SPI3_Init+0x74>)
 80036c0:	f006 ff46 	bl	800a550 <HAL_SPI_Init>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80036ca:	f000 f9e9 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000888 	.word	0x20000888
 80036d8:	40003c00 	.word	0x40003c00

080036dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036e2:	f107 0310 	add.w	r3, r7, #16
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	609a      	str	r2, [r3, #8]
 80036ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f0:	1d3b      	adds	r3, r7, #4
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036fa:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <MX_TIM2_Init+0x98>)
 80036fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003700:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1699;
 8003702:	4b1c      	ldr	r3, [pc, #112]	; (8003774 <MX_TIM2_Init+0x98>)
 8003704:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8003708:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800370a:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <MX_TIM2_Init+0x98>)
 800370c:	2210      	movs	r2, #16
 800370e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000000;
 8003710:	4b18      	ldr	r3, [pc, #96]	; (8003774 <MX_TIM2_Init+0x98>)
 8003712:	4a19      	ldr	r2, [pc, #100]	; (8003778 <MX_TIM2_Init+0x9c>)
 8003714:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003716:	4b17      	ldr	r3, [pc, #92]	; (8003774 <MX_TIM2_Init+0x98>)
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800371c:	4b15      	ldr	r3, [pc, #84]	; (8003774 <MX_TIM2_Init+0x98>)
 800371e:	2200      	movs	r2, #0
 8003720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003722:	4814      	ldr	r0, [pc, #80]	; (8003774 <MX_TIM2_Init+0x98>)
 8003724:	f006 ffbf 	bl	800a6a6 <HAL_TIM_Base_Init>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800372e:	f000 f9b7 	bl	8003aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003736:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003738:	f107 0310 	add.w	r3, r7, #16
 800373c:	4619      	mov	r1, r3
 800373e:	480d      	ldr	r0, [pc, #52]	; (8003774 <MX_TIM2_Init+0x98>)
 8003740:	f007 f9fe 	bl	800ab40 <HAL_TIM_ConfigClockSource>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800374a:	f000 f9a9 	bl	8003aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800374e:	2300      	movs	r3, #0
 8003750:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003756:	1d3b      	adds	r3, r7, #4
 8003758:	4619      	mov	r1, r3
 800375a:	4806      	ldr	r0, [pc, #24]	; (8003774 <MX_TIM2_Init+0x98>)
 800375c:	f007 fc88 	bl	800b070 <HAL_TIMEx_MasterConfigSynchronization>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003766:	f000 f99b 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800376a:	bf00      	nop
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	200008ec 	.word	0x200008ec
 8003778:	004c4b40 	.word	0x004c4b40

0800377c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003782:	f107 0310 	add.w	r3, r7, #16
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	609a      	str	r2, [r3, #8]
 800378e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003790:	1d3b      	adds	r3, r7, #4
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800379a:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <MX_TIM5_Init+0x94>)
 800379c:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <MX_TIM5_Init+0x98>)
 800379e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1699;
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <MX_TIM5_Init+0x94>)
 80037a2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80037a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80037a8:	4b19      	ldr	r3, [pc, #100]	; (8003810 <MX_TIM5_Init+0x94>)
 80037aa:	2210      	movs	r2, #16
 80037ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1.5E7;
 80037ae:	4b18      	ldr	r3, [pc, #96]	; (8003810 <MX_TIM5_Init+0x94>)
 80037b0:	4a19      	ldr	r2, [pc, #100]	; (8003818 <MX_TIM5_Init+0x9c>)
 80037b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037b4:	4b16      	ldr	r3, [pc, #88]	; (8003810 <MX_TIM5_Init+0x94>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ba:	4b15      	ldr	r3, [pc, #84]	; (8003810 <MX_TIM5_Init+0x94>)
 80037bc:	2200      	movs	r2, #0
 80037be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80037c0:	4813      	ldr	r0, [pc, #76]	; (8003810 <MX_TIM5_Init+0x94>)
 80037c2:	f006 ff70 	bl	800a6a6 <HAL_TIM_Base_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80037cc:	f000 f968 	bl	8003aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80037d6:	f107 0310 	add.w	r3, r7, #16
 80037da:	4619      	mov	r1, r3
 80037dc:	480c      	ldr	r0, [pc, #48]	; (8003810 <MX_TIM5_Init+0x94>)
 80037de:	f007 f9af 	bl	800ab40 <HAL_TIM_ConfigClockSource>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80037e8:	f000 f95a 	bl	8003aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037ec:	2300      	movs	r3, #0
 80037ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80037f4:	1d3b      	adds	r3, r7, #4
 80037f6:	4619      	mov	r1, r3
 80037f8:	4805      	ldr	r0, [pc, #20]	; (8003810 <MX_TIM5_Init+0x94>)
 80037fa:	f007 fc39 	bl	800b070 <HAL_TIMEx_MasterConfigSynchronization>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003804:	f000 f94c 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003808:	bf00      	nop
 800380a:	3720      	adds	r7, #32
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000938 	.word	0x20000938
 8003814:	40000c00 	.word	0x40000c00
 8003818:	00e4e1c0 	.word	0x00e4e1c0

0800381c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003820:	4b10      	ldr	r3, [pc, #64]	; (8003864 <MX_USB_PCD_Init+0x48>)
 8003822:	4a11      	ldr	r2, [pc, #68]	; (8003868 <MX_USB_PCD_Init+0x4c>)
 8003824:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003826:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <MX_USB_PCD_Init+0x48>)
 8003828:	2208      	movs	r2, #8
 800382a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800382c:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <MX_USB_PCD_Init+0x48>)
 800382e:	2202      	movs	r2, #2
 8003830:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003832:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <MX_USB_PCD_Init+0x48>)
 8003834:	2202      	movs	r2, #2
 8003836:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <MX_USB_PCD_Init+0x48>)
 800383a:	2200      	movs	r2, #0
 800383c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <MX_USB_PCD_Init+0x48>)
 8003840:	2200      	movs	r2, #0
 8003842:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <MX_USB_PCD_Init+0x48>)
 8003846:	2200      	movs	r2, #0
 8003848:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <MX_USB_PCD_Init+0x48>)
 800384c:	2200      	movs	r2, #0
 800384e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003850:	4804      	ldr	r0, [pc, #16]	; (8003864 <MX_USB_PCD_Init+0x48>)
 8003852:	f005 fd29 	bl	80092a8 <HAL_PCD_Init>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800385c:	f000 f920 	bl	8003aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000984 	.word	0x20000984
 8003868:	40005c00 	.word	0x40005c00

0800386c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <MX_DMA_Init+0x90>)
 8003874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003876:	4a21      	ldr	r2, [pc, #132]	; (80038fc <MX_DMA_Init+0x90>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	6493      	str	r3, [r2, #72]	; 0x48
 800387e:	4b1f      	ldr	r3, [pc, #124]	; (80038fc <MX_DMA_Init+0x90>)
 8003880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	607b      	str	r3, [r7, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800388a:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <MX_DMA_Init+0x90>)
 800388c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388e:	4a1b      	ldr	r2, [pc, #108]	; (80038fc <MX_DMA_Init+0x90>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6493      	str	r3, [r2, #72]	; 0x48
 8003896:	4b19      	ldr	r3, [pc, #100]	; (80038fc <MX_DMA_Init+0x90>)
 8003898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80038a2:	2200      	movs	r2, #0
 80038a4:	2100      	movs	r1, #0
 80038a6:	200b      	movs	r0, #11
 80038a8:	f003 f937 	bl	8006b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80038ac:	200b      	movs	r0, #11
 80038ae:	f003 f94e 	bl	8006b4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80038b2:	2200      	movs	r2, #0
 80038b4:	2100      	movs	r1, #0
 80038b6:	200c      	movs	r0, #12
 80038b8:	f003 f92f 	bl	8006b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80038bc:	200c      	movs	r0, #12
 80038be:	f003 f946 	bl	8006b4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80038c2:	2200      	movs	r2, #0
 80038c4:	2100      	movs	r1, #0
 80038c6:	200d      	movs	r0, #13
 80038c8:	f003 f927 	bl	8006b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80038cc:	200d      	movs	r0, #13
 80038ce:	f003 f93e 	bl	8006b4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80038d2:	2200      	movs	r2, #0
 80038d4:	2100      	movs	r1, #0
 80038d6:	200e      	movs	r0, #14
 80038d8:	f003 f91f 	bl	8006b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80038dc:	200e      	movs	r0, #14
 80038de:	f003 f936 	bl	8006b4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80038e2:	2200      	movs	r2, #0
 80038e4:	2100      	movs	r1, #0
 80038e6:	200f      	movs	r0, #15
 80038e8:	f003 f917 	bl	8006b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80038ec:	200f      	movs	r0, #15
 80038ee:	f003 f92e 	bl	8006b4e <HAL_NVIC_EnableIRQ>

}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000

08003900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08c      	sub	sp, #48	; 0x30
 8003904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003906:	f107 031c 	add.w	r3, r7, #28
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	60da      	str	r2, [r3, #12]
 8003914:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003916:	4b5d      	ldr	r3, [pc, #372]	; (8003a8c <MX_GPIO_Init+0x18c>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	4a5c      	ldr	r2, [pc, #368]	; (8003a8c <MX_GPIO_Init+0x18c>)
 800391c:	f043 0310 	orr.w	r3, r3, #16
 8003920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003922:	4b5a      	ldr	r3, [pc, #360]	; (8003a8c <MX_GPIO_Init+0x18c>)
 8003924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800392e:	4b57      	ldr	r3, [pc, #348]	; (8003a8c <MX_GPIO_Init+0x18c>)
 8003930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003932:	4a56      	ldr	r2, [pc, #344]	; (8003a8c <MX_GPIO_Init+0x18c>)
 8003934:	f043 0304 	orr.w	r3, r3, #4
 8003938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800393a:	4b54      	ldr	r3, [pc, #336]	; (8003a8c <MX_GPIO_Init+0x18c>)
 800393c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003946:	4b51      	ldr	r3, [pc, #324]	; (8003a8c <MX_GPIO_Init+0x18c>)
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	4a50      	ldr	r2, [pc, #320]	; (8003a8c <MX_GPIO_Init+0x18c>)
 800394c:	f043 0320 	orr.w	r3, r3, #32
 8003950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003952:	4b4e      	ldr	r3, [pc, #312]	; (8003a8c <MX_GPIO_Init+0x18c>)
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800395e:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <MX_GPIO_Init+0x18c>)
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	4a4a      	ldr	r2, [pc, #296]	; (8003a8c <MX_GPIO_Init+0x18c>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800396a:	4b48      	ldr	r3, [pc, #288]	; (8003a8c <MX_GPIO_Init+0x18c>)
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003976:	4b45      	ldr	r3, [pc, #276]	; (8003a8c <MX_GPIO_Init+0x18c>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397a:	4a44      	ldr	r2, [pc, #272]	; (8003a8c <MX_GPIO_Init+0x18c>)
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003982:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <MX_GPIO_Init+0x18c>)
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800398e:	4b3f      	ldr	r3, [pc, #252]	; (8003a8c <MX_GPIO_Init+0x18c>)
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	4a3e      	ldr	r2, [pc, #248]	; (8003a8c <MX_GPIO_Init+0x18c>)
 8003994:	f043 0308 	orr.w	r3, r3, #8
 8003998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800399a:	4b3c      	ldr	r3, [pc, #240]	; (8003a8c <MX_GPIO_Init+0x18c>)
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80039a6:	2200      	movs	r2, #0
 80039a8:	f64e 71c0 	movw	r1, #61376	; 0xefc0
 80039ac:	4838      	ldr	r0, [pc, #224]	; (8003a90 <MX_GPIO_Init+0x190>)
 80039ae:	f004 fb57 	bl	8008060 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80039b2:	2200      	movs	r2, #0
 80039b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039b8:	4836      	ldr	r0, [pc, #216]	; (8003a94 <MX_GPIO_Init+0x194>)
 80039ba:	f004 fb51 	bl	8008060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80039be:	2200      	movs	r2, #0
 80039c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039c4:	4834      	ldr	r0, [pc, #208]	; (8003a98 <MX_GPIO_Init+0x198>)
 80039c6:	f004 fb4b 	bl	8008060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80039ca:	2200      	movs	r2, #0
 80039cc:	f64f 711c 	movw	r1, #65308	; 0xff1c
 80039d0:	4832      	ldr	r0, [pc, #200]	; (8003a9c <MX_GPIO_Init+0x19c>)
 80039d2:	f004 fb45 	bl	8008060 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80039d6:	233c      	movs	r3, #60	; 0x3c
 80039d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039da:	2300      	movs	r3, #0
 80039dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039e2:	f107 031c 	add.w	r3, r7, #28
 80039e6:	4619      	mov	r1, r3
 80039e8:	4829      	ldr	r0, [pc, #164]	; (8003a90 <MX_GPIO_Init+0x190>)
 80039ea:	f004 f9b7 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9
                           PE10 PE11 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80039ee:	f64e 73c0 	movw	r3, #61376	; 0xefc0
 80039f2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f4:	2301      	movs	r3, #1
 80039f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fc:	2300      	movs	r3, #0
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a00:	f107 031c 	add.w	r3, r7, #28
 8003a04:	4619      	mov	r1, r3
 8003a06:	4822      	ldr	r0, [pc, #136]	; (8003a90 <MX_GPIO_Init+0x190>)
 8003a08:	f004 f9a8 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a12:	2301      	movs	r3, #1
 8003a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a1e:	f107 031c 	add.w	r3, r7, #28
 8003a22:	4619      	mov	r1, r3
 8003a24:	481b      	ldr	r0, [pc, #108]	; (8003a94 <MX_GPIO_Init+0x194>)
 8003a26:	f004 f999 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a30:	2301      	movs	r3, #1
 8003a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a3c:	f107 031c 	add.w	r3, r7, #28
 8003a40:	4619      	mov	r1, r3
 8003a42:	4815      	ldr	r0, [pc, #84]	; (8003a98 <MX_GPIO_Init+0x198>)
 8003a44:	f004 f98a 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003a48:	f64f 731c 	movw	r3, #65308	; 0xff1c
 8003a4c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a56:	2300      	movs	r3, #0
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a5a:	f107 031c 	add.w	r3, r7, #28
 8003a5e:	4619      	mov	r1, r3
 8003a60:	480e      	ldr	r0, [pc, #56]	; (8003a9c <MX_GPIO_Init+0x19c>)
 8003a62:	f004 f97b 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a74:	f107 031c 	add.w	r3, r7, #28
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a7e:	f004 f96d 	bl	8007d5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a82:	bf00      	nop
 8003a84:	3730      	adds	r7, #48	; 0x30
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	48001000 	.word	0x48001000
 8003a94:	48000800 	.word	0x48000800
 8003a98:	48000400 	.word	0x48000400
 8003a9c:	48000c00 	.word	0x48000c00

08003aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003aa4:	b672      	cpsid	i
}
 8003aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003aa8:	e7fe      	b.n	8003aa8 <Error_Handler+0x8>
	...

08003aac <precharge>:
extern TIM_HandleTypeDef htim2;
uint16_t RelayStates = 0x0000;

//PORT MATCHES LETTER

void precharge(void){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
 //high side on, low side precharge resitor on wait 500ms then low side main on, resistor off
	HAL_GPIO_WritePin(GPIOE, RELAY14, GPIO_PIN_SET); //LOW SIDE ON
 8003ab0:	4819      	ldr	r0, [pc, #100]	; (8003b18 <precharge+0x6c>)
 8003ab2:	f008 fa9f 	bl	800bff4 <atoi>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2201      	movs	r2, #1
 8003abc:	4619      	mov	r1, r3
 8003abe:	4817      	ldr	r0, [pc, #92]	; (8003b1c <precharge+0x70>)
 8003ac0:	f004 face 	bl	8008060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY9, GPIO_PIN_SET);
 8003ac4:	4816      	ldr	r0, [pc, #88]	; (8003b20 <precharge+0x74>)
 8003ac6:	f008 fa95 	bl	800bff4 <atoi>
 8003aca:	4603      	mov	r3, r0
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4812      	ldr	r0, [pc, #72]	; (8003b1c <precharge+0x70>)
 8003ad4:	f004 fac4 	bl	8008060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_SET); //RESISTOR ON
 8003ad8:	4812      	ldr	r0, [pc, #72]	; (8003b24 <precharge+0x78>)
 8003ada:	f008 fa8b 	bl	800bff4 <atoi>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	480d      	ldr	r0, [pc, #52]	; (8003b1c <precharge+0x70>)
 8003ae8:	f004 faba 	bl	8008060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_SET);
 8003aec:	480e      	ldr	r0, [pc, #56]	; (8003b28 <precharge+0x7c>)
 8003aee:	f008 fa81 	bl	800bff4 <atoi>
 8003af2:	4603      	mov	r3, r0
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2201      	movs	r2, #1
 8003af8:	4619      	mov	r1, r3
 8003afa:	4808      	ldr	r0, [pc, #32]	; (8003b1c <precharge+0x70>)
 8003afc:	f004 fab0 	bl	8008060 <HAL_GPIO_WritePin>
	RelayStates = RelayStates | 0x00C6;
 8003b00:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <precharge+0x80>)
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	f043 03c6 	orr.w	r3, r3, #198	; 0xc6
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <precharge+0x80>)
 8003b0c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8003b0e:	4808      	ldr	r0, [pc, #32]	; (8003b30 <precharge+0x84>)
 8003b10:	f006 fe20 	bl	800a754 <HAL_TIM_Base_Start_IT>
}
 8003b14:	bf00      	nop
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	0800cf1c 	.word	0x0800cf1c
 8003b1c:	48001000 	.word	0x48001000
 8003b20:	0800cf28 	.word	0x0800cf28
 8003b24:	0800cf34 	.word	0x0800cf34
 8003b28:	0800cf40 	.word	0x0800cf40
 8003b2c:	20000c64 	.word	0x20000c64
 8003b30:	200008ec 	.word	0x200008ec

08003b34 <HV_on>:
void HV_on(void){
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, RELAY11, GPIO_PIN_SET); //HIGHSIDE ON
 8003b38:	481b      	ldr	r0, [pc, #108]	; (8003ba8 <HV_on+0x74>)
 8003b3a:	f008 fa5b 	bl	800bff4 <atoi>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2201      	movs	r2, #1
 8003b44:	4619      	mov	r1, r3
 8003b46:	4819      	ldr	r0, [pc, #100]	; (8003bac <HV_on+0x78>)
 8003b48:	f004 fa8a 	bl	8008060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY16, GPIO_PIN_SET);
 8003b4c:	4818      	ldr	r0, [pc, #96]	; (8003bb0 <HV_on+0x7c>)
 8003b4e:	f008 fa51 	bl	800bff4 <atoi>
 8003b52:	4603      	mov	r3, r0
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2201      	movs	r2, #1
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4814      	ldr	r0, [pc, #80]	; (8003bac <HV_on+0x78>)
 8003b5c:	f004 fa80 	bl	8008060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY15, GPIO_PIN_RESET); //RESISTOR OFF
 8003b60:	4814      	ldr	r0, [pc, #80]	; (8003bb4 <HV_on+0x80>)
 8003b62:	f008 fa47 	bl	800bff4 <atoi>
 8003b66:	4603      	mov	r3, r0
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	480f      	ldr	r0, [pc, #60]	; (8003bac <HV_on+0x78>)
 8003b70:	f004 fa76 	bl	8008060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY10, GPIO_PIN_RESET);
 8003b74:	4810      	ldr	r0, [pc, #64]	; (8003bb8 <HV_on+0x84>)
 8003b76:	f008 fa3d 	bl	800bff4 <atoi>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2200      	movs	r2, #0
 8003b80:	4619      	mov	r1, r3
 8003b82:	480a      	ldr	r0, [pc, #40]	; (8003bac <HV_on+0x78>)
 8003b84:	f004 fa6c 	bl	8008060 <HAL_GPIO_WritePin>
	RelayStates = RelayStates | 0x0021;
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <HV_on+0x88>)
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <HV_on+0x88>)
 8003b94:	801a      	strh	r2, [r3, #0]
	RelayStates = RelayStates & 0xFFBD;
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HV_on+0x88>)
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	f023 0342 	bic.w	r3, r3, #66	; 0x42
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <HV_on+0x88>)
 8003ba2:	801a      	strh	r2, [r3, #0]

}
 8003ba4:	bf00      	nop
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	0800cf4c 	.word	0x0800cf4c
 8003bac:	48001000 	.word	0x48001000
 8003bb0:	0800cf58 	.word	0x0800cf58
 8003bb4:	0800cf34 	.word	0x0800cf34
 8003bb8:	0800cf40 	.word	0x0800cf40
 8003bbc:	20000c64 	.word	0x20000c64

08003bc0 <HV_off>:

void HV_off(void){
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, RELAY11, GPIO_PIN_RESET); //HIGHSIDE OFF
 8003bc4:	4818      	ldr	r0, [pc, #96]	; (8003c28 <HV_off+0x68>)
 8003bc6:	f008 fa15 	bl	800bff4 <atoi>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2200      	movs	r2, #0
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4816      	ldr	r0, [pc, #88]	; (8003c2c <HV_off+0x6c>)
 8003bd4:	f004 fa44 	bl	8008060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY16, GPIO_PIN_RESET);
 8003bd8:	4815      	ldr	r0, [pc, #84]	; (8003c30 <HV_off+0x70>)
 8003bda:	f008 fa0b 	bl	800bff4 <atoi>
 8003bde:	4603      	mov	r3, r0
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2200      	movs	r2, #0
 8003be4:	4619      	mov	r1, r3
 8003be6:	4811      	ldr	r0, [pc, #68]	; (8003c2c <HV_off+0x6c>)
 8003be8:	f004 fa3a 	bl	8008060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY14, GPIO_PIN_RESET); //LOW SIDE OFF
 8003bec:	4811      	ldr	r0, [pc, #68]	; (8003c34 <HV_off+0x74>)
 8003bee:	f008 fa01 	bl	800bff4 <atoi>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	480c      	ldr	r0, [pc, #48]	; (8003c2c <HV_off+0x6c>)
 8003bfc:	f004 fa30 	bl	8008060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, RELAY9, GPIO_PIN_RESET);
 8003c00:	480d      	ldr	r0, [pc, #52]	; (8003c38 <HV_off+0x78>)
 8003c02:	f008 f9f7 	bl	800bff4 <atoi>
 8003c06:	4603      	mov	r3, r0
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4807      	ldr	r0, [pc, #28]	; (8003c2c <HV_off+0x6c>)
 8003c10:	f004 fa26 	bl	8008060 <HAL_GPIO_WritePin>
	RelayStates = RelayStates & 0xFF5A;
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <HV_off+0x7c>)
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	f023 03a5 	bic.w	r3, r3, #165	; 0xa5
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <HV_off+0x7c>)
 8003c20:	801a      	strh	r2, [r3, #0]
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	0800cf4c 	.word	0x0800cf4c
 8003c2c:	48001000 	.word	0x48001000
 8003c30:	0800cf58 	.word	0x0800cf58
 8003c34:	0800cf1c 	.word	0x0800cf1c
 8003c38:	0800cf28 	.word	0x0800cf28
 8003c3c:	20000c64 	.word	0x20000c64

08003c40 <redstatus>:

void redstatus(uint8_t state){
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d113      	bne.n	8003c78 <redstatus+0x38>
		HAL_GPIO_WritePin(GPIOD, RELAY1, GPIO_PIN_SET);
 8003c50:	4814      	ldr	r0, [pc, #80]	; (8003ca4 <redstatus+0x64>)
 8003c52:	f008 f9cf 	bl	800bff4 <atoi>
 8003c56:	4603      	mov	r3, r0
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4812      	ldr	r0, [pc, #72]	; (8003ca8 <redstatus+0x68>)
 8003c60:	f004 f9fe 	bl	8008060 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x8000;
 8003c64:	4b11      	ldr	r3, [pc, #68]	; (8003cac <redstatus+0x6c>)
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <redstatus+0x6c>)
 8003c74:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY1, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0x7FFF;
	}

}
 8003c76:	e010      	b.n	8003c9a <redstatus+0x5a>
		HAL_GPIO_WritePin(GPIOD, RELAY1, GPIO_PIN_RESET);
 8003c78:	480a      	ldr	r0, [pc, #40]	; (8003ca4 <redstatus+0x64>)
 8003c7a:	f008 f9bb 	bl	800bff4 <atoi>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2200      	movs	r2, #0
 8003c84:	4619      	mov	r1, r3
 8003c86:	4808      	ldr	r0, [pc, #32]	; (8003ca8 <redstatus+0x68>)
 8003c88:	f004 f9ea 	bl	8008060 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0x7FFF;
 8003c8c:	4b07      	ldr	r3, [pc, #28]	; (8003cac <redstatus+0x6c>)
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <redstatus+0x6c>)
 8003c98:	801a      	strh	r2, [r3, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	0800cf58 	.word	0x0800cf58
 8003ca8:	48000c00 	.word	0x48000c00
 8003cac:	20000c64 	.word	0x20000c64

08003cb0 <yellowstatus>:

void yellowstatus(uint8_t state){
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d111      	bne.n	8003ce4 <yellowstatus+0x34>
		HAL_GPIO_WritePin(GPIOD, RELAY2, GPIO_PIN_SET);
 8003cc0:	4813      	ldr	r0, [pc, #76]	; (8003d10 <yellowstatus+0x60>)
 8003cc2:	f008 f997 	bl	800bff4 <atoi>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4811      	ldr	r0, [pc, #68]	; (8003d14 <yellowstatus+0x64>)
 8003cd0:	f004 f9c6 	bl	8008060 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x4000;
 8003cd4:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <yellowstatus+0x68>)
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <yellowstatus+0x68>)
 8003ce0:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY2, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xBFFF;
	}
}
 8003ce2:	e010      	b.n	8003d06 <yellowstatus+0x56>
		HAL_GPIO_WritePin(GPIOD, RELAY2, GPIO_PIN_RESET);
 8003ce4:	480a      	ldr	r0, [pc, #40]	; (8003d10 <yellowstatus+0x60>)
 8003ce6:	f008 f985 	bl	800bff4 <atoi>
 8003cea:	4603      	mov	r3, r0
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2200      	movs	r2, #0
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4808      	ldr	r0, [pc, #32]	; (8003d14 <yellowstatus+0x64>)
 8003cf4:	f004 f9b4 	bl	8008060 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xBFFF;
 8003cf8:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <yellowstatus+0x68>)
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <yellowstatus+0x68>)
 8003d04:	801a      	strh	r2, [r3, #0]
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	0800cf34 	.word	0x0800cf34
 8003d14:	48000c00 	.word	0x48000c00
 8003d18:	20000c64 	.word	0x20000c64

08003d1c <greenstatus>:

void greenstatus(uint8_t state){
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d111      	bne.n	8003d50 <greenstatus+0x34>
		HAL_GPIO_WritePin(GPIOD, RELAY3, GPIO_PIN_SET);
 8003d2c:	4813      	ldr	r0, [pc, #76]	; (8003d7c <greenstatus+0x60>)
 8003d2e:	f008 f961 	bl	800bff4 <atoi>
 8003d32:	4603      	mov	r3, r0
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2201      	movs	r2, #1
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4811      	ldr	r0, [pc, #68]	; (8003d80 <greenstatus+0x64>)
 8003d3c:	f004 f990 	bl	8008060 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x2000;
 8003d40:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <greenstatus+0x68>)
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <greenstatus+0x68>)
 8003d4c:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY3, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xDFFF;
	}
}
 8003d4e:	e010      	b.n	8003d72 <greenstatus+0x56>
		HAL_GPIO_WritePin(GPIOD, RELAY3, GPIO_PIN_RESET);
 8003d50:	480a      	ldr	r0, [pc, #40]	; (8003d7c <greenstatus+0x60>)
 8003d52:	f008 f94f 	bl	800bff4 <atoi>
 8003d56:	4603      	mov	r3, r0
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4808      	ldr	r0, [pc, #32]	; (8003d80 <greenstatus+0x64>)
 8003d60:	f004 f97e 	bl	8008060 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xDFFF;
 8003d64:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <greenstatus+0x68>)
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <greenstatus+0x68>)
 8003d70:	801a      	strh	r2, [r3, #0]
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	0800cf1c 	.word	0x0800cf1c
 8003d80:	48000c00 	.word	0x48000c00
 8003d84:	20000c64 	.word	0x20000c64

08003d88 <brake_state>:

void brake_state(uint8_t state){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d111      	bne.n	8003dbc <brake_state+0x34>
		HAL_GPIO_WritePin(GPIOD, RELAY4, GPIO_PIN_SET);
 8003d98:	4813      	ldr	r0, [pc, #76]	; (8003de8 <brake_state+0x60>)
 8003d9a:	f008 f92b 	bl	800bff4 <atoi>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2201      	movs	r2, #1
 8003da4:	4619      	mov	r1, r3
 8003da6:	4811      	ldr	r0, [pc, #68]	; (8003dec <brake_state+0x64>)
 8003da8:	f004 f95a 	bl	8008060 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x1000;
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <brake_state+0x68>)
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <brake_state+0x68>)
 8003db8:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY4, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xEFFF;
	}
}
 8003dba:	e010      	b.n	8003dde <brake_state+0x56>
		HAL_GPIO_WritePin(GPIOD, RELAY4, GPIO_PIN_RESET);
 8003dbc:	480a      	ldr	r0, [pc, #40]	; (8003de8 <brake_state+0x60>)
 8003dbe:	f008 f919 	bl	800bff4 <atoi>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4808      	ldr	r0, [pc, #32]	; (8003dec <brake_state+0x64>)
 8003dcc:	f004 f948 	bl	8008060 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xEFFF;
 8003dd0:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <brake_state+0x68>)
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <brake_state+0x68>)
 8003ddc:	801a      	strh	r2, [r3, #0]
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	0800cf64 	.word	0x0800cf64
 8003dec:	48000c00 	.word	0x48000c00
 8003df0:	20000c64 	.word	0x20000c64

08003df4 <pump_control>:

void pump_control(uint8_t state){
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
	if(state == 1){
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d11b      	bne.n	8003e3c <pump_control+0x48>
		HAL_GPIO_WritePin(GPIOD, RELAY5, GPIO_PIN_SET);
 8003e04:	481d      	ldr	r0, [pc, #116]	; (8003e7c <pump_control+0x88>)
 8003e06:	f008 f8f5 	bl	800bff4 <atoi>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4619      	mov	r1, r3
 8003e12:	481b      	ldr	r0, [pc, #108]	; (8003e80 <pump_control+0x8c>)
 8003e14:	f004 f924 	bl	8008060 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, RELAY6, GPIO_PIN_RESET);
 8003e18:	481a      	ldr	r0, [pc, #104]	; (8003e84 <pump_control+0x90>)
 8003e1a:	f008 f8eb 	bl	800bff4 <atoi>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2200      	movs	r2, #0
 8003e24:	4619      	mov	r1, r3
 8003e26:	4816      	ldr	r0, [pc, #88]	; (8003e80 <pump_control+0x8c>)
 8003e28:	f004 f91a 	bl	8008060 <HAL_GPIO_WritePin>
		RelayStates = RelayStates | 0x0C00;
 8003e2c:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <pump_control+0x94>)
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <pump_control+0x94>)
 8003e38:	801a      	strh	r2, [r3, #0]
	}else{
		HAL_GPIO_WritePin(GPIOD, RELAY5, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD, RELAY6, GPIO_PIN_RESET);
		RelayStates = RelayStates & 0xF7FF;
	}
}
 8003e3a:	e01a      	b.n	8003e72 <pump_control+0x7e>
		HAL_GPIO_WritePin(GPIOD, RELAY5, GPIO_PIN_SET);
 8003e3c:	480f      	ldr	r0, [pc, #60]	; (8003e7c <pump_control+0x88>)
 8003e3e:	f008 f8d9 	bl	800bff4 <atoi>
 8003e42:	4603      	mov	r3, r0
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2201      	movs	r2, #1
 8003e48:	4619      	mov	r1, r3
 8003e4a:	480d      	ldr	r0, [pc, #52]	; (8003e80 <pump_control+0x8c>)
 8003e4c:	f004 f908 	bl	8008060 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, RELAY6, GPIO_PIN_RESET);
 8003e50:	480c      	ldr	r0, [pc, #48]	; (8003e84 <pump_control+0x90>)
 8003e52:	f008 f8cf 	bl	800bff4 <atoi>
 8003e56:	4603      	mov	r3, r0
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4808      	ldr	r0, [pc, #32]	; (8003e80 <pump_control+0x8c>)
 8003e60:	f004 f8fe 	bl	8008060 <HAL_GPIO_WritePin>
		RelayStates = RelayStates & 0xF7FF;
 8003e64:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <pump_control+0x94>)
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <pump_control+0x94>)
 8003e70:	801a      	strh	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	0800cf70 	.word	0x0800cf70
 8003e80:	48000c00 	.word	0x48000c00
 8003e84:	0800cf7c 	.word	0x0800cf7c
 8003e88:	20000c64 	.word	0x20000c64

08003e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e92:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <HAL_MspInit+0x44>)
 8003e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e96:	4a0e      	ldr	r2, [pc, #56]	; (8003ed0 <HAL_MspInit+0x44>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6613      	str	r3, [r2, #96]	; 0x60
 8003e9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <HAL_MspInit+0x44>)
 8003ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	607b      	str	r3, [r7, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_MspInit+0x44>)
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <HAL_MspInit+0x44>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_MspInit+0x44>)
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003ec2:	f005 fb8d 	bl	80095e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000

08003ed4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b0a0      	sub	sp, #128	; 0x80
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003edc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003eec:	f107 0318 	add.w	r3, r7, #24
 8003ef0:	2254      	movs	r2, #84	; 0x54
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f008 fb03 	bl	800c500 <memset>
  if(hadc->Instance==ADC1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f02:	d160      	bne.n	8003fc6 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f08:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003f0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f10:	f107 0318 	add.w	r3, r7, #24
 8003f14:	4618      	mov	r0, r3
 8003f16:	f006 f8cd 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003f20:	f7ff fdbe 	bl	8003aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003f24:	4b5d      	ldr	r3, [pc, #372]	; (800409c <HAL_ADC_MspInit+0x1c8>)
 8003f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f28:	4a5c      	ldr	r2, [pc, #368]	; (800409c <HAL_ADC_MspInit+0x1c8>)
 8003f2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f30:	4b5a      	ldr	r3, [pc, #360]	; (800409c <HAL_ADC_MspInit+0x1c8>)
 8003f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3c:	4b57      	ldr	r3, [pc, #348]	; (800409c <HAL_ADC_MspInit+0x1c8>)
 8003f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f40:	4a56      	ldr	r2, [pc, #344]	; (800409c <HAL_ADC_MspInit+0x1c8>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f48:	4b54      	ldr	r3, [pc, #336]	; (800409c <HAL_ADC_MspInit+0x1c8>)
 8003f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003f54:	230f      	movs	r3, #15
 8003f56:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f60:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f64:	4619      	mov	r1, r3
 8003f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f6a:	f003 fef7 	bl	8007d5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003f6e:	4b4c      	ldr	r3, [pc, #304]	; (80040a0 <HAL_ADC_MspInit+0x1cc>)
 8003f70:	4a4c      	ldr	r2, [pc, #304]	; (80040a4 <HAL_ADC_MspInit+0x1d0>)
 8003f72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003f74:	4b4a      	ldr	r3, [pc, #296]	; (80040a0 <HAL_ADC_MspInit+0x1cc>)
 8003f76:	2205      	movs	r2, #5
 8003f78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f7a:	4b49      	ldr	r3, [pc, #292]	; (80040a0 <HAL_ADC_MspInit+0x1cc>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f80:	4b47      	ldr	r3, [pc, #284]	; (80040a0 <HAL_ADC_MspInit+0x1cc>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003f86:	4b46      	ldr	r3, [pc, #280]	; (80040a0 <HAL_ADC_MspInit+0x1cc>)
 8003f88:	2280      	movs	r2, #128	; 0x80
 8003f8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f8c:	4b44      	ldr	r3, [pc, #272]	; (80040a0 <HAL_ADC_MspInit+0x1cc>)
 8003f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f94:	4b42      	ldr	r3, [pc, #264]	; (80040a0 <HAL_ADC_MspInit+0x1cc>)
 8003f96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003f9c:	4b40      	ldr	r3, [pc, #256]	; (80040a0 <HAL_ADC_MspInit+0x1cc>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003fa2:	4b3f      	ldr	r3, [pc, #252]	; (80040a0 <HAL_ADC_MspInit+0x1cc>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003fa8:	483d      	ldr	r0, [pc, #244]	; (80040a0 <HAL_ADC_MspInit+0x1cc>)
 8003faa:	f002 fdeb 	bl	8006b84 <HAL_DMA_Init>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003fb4:	f7ff fd74 	bl	8003aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a39      	ldr	r2, [pc, #228]	; (80040a0 <HAL_ADC_MspInit+0x1cc>)
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
 8003fbe:	4a38      	ldr	r2, [pc, #224]	; (80040a0 <HAL_ADC_MspInit+0x1cc>)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003fc4:	e065      	b.n	8004092 <HAL_ADC_MspInit+0x1be>
  else if(hadc->Instance==ADC5)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a37      	ldr	r2, [pc, #220]	; (80040a8 <HAL_ADC_MspInit+0x1d4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d160      	bne.n	8004092 <HAL_ADC_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003fd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8003fd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003fda:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fdc:	f107 0318 	add.w	r3, r7, #24
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f006 f867 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 8003fec:	f7ff fd58 	bl	8003aa0 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8003ff0:	4b2a      	ldr	r3, [pc, #168]	; (800409c <HAL_ADC_MspInit+0x1c8>)
 8003ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff4:	4a29      	ldr	r2, [pc, #164]	; (800409c <HAL_ADC_MspInit+0x1c8>)
 8003ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ffc:	4b27      	ldr	r3, [pc, #156]	; (800409c <HAL_ADC_MspInit+0x1c8>)
 8003ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004008:	4b24      	ldr	r3, [pc, #144]	; (800409c <HAL_ADC_MspInit+0x1c8>)
 800400a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400c:	4a23      	ldr	r2, [pc, #140]	; (800409c <HAL_ADC_MspInit+0x1c8>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004014:	4b21      	ldr	r3, [pc, #132]	; (800409c <HAL_ADC_MspInit+0x1c8>)
 8004016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004024:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004026:	2303      	movs	r3, #3
 8004028:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004032:	4619      	mov	r1, r3
 8004034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004038:	f003 fe90 	bl	8007d5c <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <HAL_ADC_MspInit+0x1d8>)
 800403e:	4a1c      	ldr	r2, [pc, #112]	; (80040b0 <HAL_ADC_MspInit+0x1dc>)
 8004040:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_ADC_MspInit+0x1d8>)
 8004044:	2227      	movs	r2, #39	; 0x27
 8004046:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004048:	4b18      	ldr	r3, [pc, #96]	; (80040ac <HAL_ADC_MspInit+0x1d8>)
 800404a:	2200      	movs	r2, #0
 800404c:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800404e:	4b17      	ldr	r3, [pc, #92]	; (80040ac <HAL_ADC_MspInit+0x1d8>)
 8004050:	2200      	movs	r2, #0
 8004052:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8004054:	4b15      	ldr	r3, [pc, #84]	; (80040ac <HAL_ADC_MspInit+0x1d8>)
 8004056:	2280      	movs	r2, #128	; 0x80
 8004058:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800405a:	4b14      	ldr	r3, [pc, #80]	; (80040ac <HAL_ADC_MspInit+0x1d8>)
 800405c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004060:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004062:	4b12      	ldr	r3, [pc, #72]	; (80040ac <HAL_ADC_MspInit+0x1d8>)
 8004064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004068:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_NORMAL;
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <HAL_ADC_MspInit+0x1d8>)
 800406c:	2200      	movs	r2, #0
 800406e:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8004070:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <HAL_ADC_MspInit+0x1d8>)
 8004072:	2200      	movs	r2, #0
 8004074:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8004076:	480d      	ldr	r0, [pc, #52]	; (80040ac <HAL_ADC_MspInit+0x1d8>)
 8004078:	f002 fd84 	bl	8006b84 <HAL_DMA_Init>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8004082:	f7ff fd0d 	bl	8003aa0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a08      	ldr	r2, [pc, #32]	; (80040ac <HAL_ADC_MspInit+0x1d8>)
 800408a:	655a      	str	r2, [r3, #84]	; 0x54
 800408c:	4a07      	ldr	r2, [pc, #28]	; (80040ac <HAL_ADC_MspInit+0x1d8>)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004092:	bf00      	nop
 8004094:	3780      	adds	r7, #128	; 0x80
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40021000 	.word	0x40021000
 80040a0:	20000378 	.word	0x20000378
 80040a4:	40020008 	.word	0x40020008
 80040a8:	50000600 	.word	0x50000600
 80040ac:	200003d8 	.word	0x200003d8
 80040b0:	40020058 	.word	0x40020058

080040b4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b0a2      	sub	sp, #136	; 0x88
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040cc:	f107 0320 	add.w	r3, r7, #32
 80040d0:	2254      	movs	r2, #84	; 0x54
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f008 fa13 	bl	800c500 <memset>
  if(hfdcan->Instance==FDCAN1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a7a      	ldr	r2, [pc, #488]	; (80042c8 <HAL_FDCAN_MspInit+0x214>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d14b      	bne.n	800417c <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80040e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040e8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80040ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040ee:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040f0:	f107 0320 	add.w	r3, r7, #32
 80040f4:	4618      	mov	r0, r3
 80040f6:	f005 ffdd 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004100:	f7ff fcce 	bl	8003aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8004104:	4b71      	ldr	r3, [pc, #452]	; (80042cc <HAL_FDCAN_MspInit+0x218>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3301      	adds	r3, #1
 800410a:	4a70      	ldr	r2, [pc, #448]	; (80042cc <HAL_FDCAN_MspInit+0x218>)
 800410c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800410e:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <HAL_FDCAN_MspInit+0x218>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d10b      	bne.n	800412e <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8004116:	4b6e      	ldr	r3, [pc, #440]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411a:	4a6d      	ldr	r2, [pc, #436]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 800411c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004120:	6593      	str	r3, [r2, #88]	; 0x58
 8004122:	4b6b      	ldr	r3, [pc, #428]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	61fb      	str	r3, [r7, #28]
 800412c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800412e:	4b68      	ldr	r3, [pc, #416]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 8004130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004132:	4a67      	ldr	r2, [pc, #412]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 8004134:	f043 0308 	orr.w	r3, r3, #8
 8004138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800413a:	4b65      	ldr	r3, [pc, #404]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004146:	2303      	movs	r3, #3
 8004148:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414a:	2302      	movs	r3, #2
 800414c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414e:	2300      	movs	r3, #0
 8004150:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004152:	2300      	movs	r3, #0
 8004154:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004158:	2309      	movs	r3, #9
 800415a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800415e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004162:	4619      	mov	r1, r3
 8004164:	485b      	ldr	r0, [pc, #364]	; (80042d4 <HAL_FDCAN_MspInit+0x220>)
 8004166:	f003 fdf9 	bl	8007d5c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800416a:	2200      	movs	r2, #0
 800416c:	2100      	movs	r1, #0
 800416e:	2015      	movs	r0, #21
 8004170:	f002 fcd3 	bl	8006b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004174:	2015      	movs	r0, #21
 8004176:	f002 fcea 	bl	8006b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800417a:	e0a1      	b.n	80042c0 <HAL_FDCAN_MspInit+0x20c>
  else if(hfdcan->Instance==FDCAN2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a55      	ldr	r2, [pc, #340]	; (80042d8 <HAL_FDCAN_MspInit+0x224>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d14c      	bne.n	8004220 <HAL_FDCAN_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800418a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800418c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004190:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004192:	f107 0320 	add.w	r3, r7, #32
 8004196:	4618      	mov	r0, r3
 8004198:	f005 ff8c 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 80041a2:	f7ff fc7d 	bl	8003aa0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80041a6:	4b49      	ldr	r3, [pc, #292]	; (80042cc <HAL_FDCAN_MspInit+0x218>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3301      	adds	r3, #1
 80041ac:	4a47      	ldr	r2, [pc, #284]	; (80042cc <HAL_FDCAN_MspInit+0x218>)
 80041ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80041b0:	4b46      	ldr	r3, [pc, #280]	; (80042cc <HAL_FDCAN_MspInit+0x218>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10b      	bne.n	80041d0 <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80041b8:	4b45      	ldr	r3, [pc, #276]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	4a44      	ldr	r2, [pc, #272]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 80041be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041c2:	6593      	str	r3, [r2, #88]	; 0x58
 80041c4:	4b42      	ldr	r3, [pc, #264]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041d0:	4b3f      	ldr	r3, [pc, #252]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 80041d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d4:	4a3e      	ldr	r2, [pc, #248]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 80041d6:	f043 0302 	orr.w	r3, r3, #2
 80041da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041dc:	4b3c      	ldr	r3, [pc, #240]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 80041de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80041e8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80041ec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ee:	2302      	movs	r3, #2
 80041f0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80041fc:	2309      	movs	r3, #9
 80041fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004202:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004206:	4619      	mov	r1, r3
 8004208:	4834      	ldr	r0, [pc, #208]	; (80042dc <HAL_FDCAN_MspInit+0x228>)
 800420a:	f003 fda7 	bl	8007d5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 800420e:	2200      	movs	r2, #0
 8004210:	2100      	movs	r1, #0
 8004212:	2056      	movs	r0, #86	; 0x56
 8004214:	f002 fc81 	bl	8006b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8004218:	2056      	movs	r0, #86	; 0x56
 800421a:	f002 fc98 	bl	8006b4e <HAL_NVIC_EnableIRQ>
}
 800421e:	e04f      	b.n	80042c0 <HAL_FDCAN_MspInit+0x20c>
  else if(hfdcan->Instance==FDCAN3)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2e      	ldr	r2, [pc, #184]	; (80042e0 <HAL_FDCAN_MspInit+0x22c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d14a      	bne.n	80042c0 <HAL_FDCAN_MspInit+0x20c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800422a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800422e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004234:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004236:	f107 0320 	add.w	r3, r7, #32
 800423a:	4618      	mov	r0, r3
 800423c:	f005 ff3a 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_FDCAN_MspInit+0x196>
      Error_Handler();
 8004246:	f7ff fc2b 	bl	8003aa0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800424a:	4b20      	ldr	r3, [pc, #128]	; (80042cc <HAL_FDCAN_MspInit+0x218>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3301      	adds	r3, #1
 8004250:	4a1e      	ldr	r2, [pc, #120]	; (80042cc <HAL_FDCAN_MspInit+0x218>)
 8004252:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8004254:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <HAL_FDCAN_MspInit+0x218>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d10b      	bne.n	8004274 <HAL_FDCAN_MspInit+0x1c0>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800425c:	4b1c      	ldr	r3, [pc, #112]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	4a1b      	ldr	r2, [pc, #108]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 8004262:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004266:	6593      	str	r3, [r2, #88]	; 0x58
 8004268:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 800426a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004274:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 8004276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004278:	4a15      	ldr	r2, [pc, #84]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 800427a:	f043 0302 	orr.w	r3, r3, #2
 800427e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004280:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <HAL_FDCAN_MspInit+0x21c>)
 8004282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800428c:	2318      	movs	r3, #24
 800428e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004290:	2302      	movs	r3, #2
 8004292:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	2300      	movs	r3, #0
 8004296:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004298:	2300      	movs	r3, #0
 800429a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 800429e:	230b      	movs	r3, #11
 80042a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80042a8:	4619      	mov	r1, r3
 80042aa:	480c      	ldr	r0, [pc, #48]	; (80042dc <HAL_FDCAN_MspInit+0x228>)
 80042ac:	f003 fd56 	bl	8007d5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 80042b0:	2200      	movs	r2, #0
 80042b2:	2100      	movs	r1, #0
 80042b4:	2059      	movs	r0, #89	; 0x59
 80042b6:	f002 fc30 	bl	8006b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 80042ba:	2059      	movs	r0, #89	; 0x59
 80042bc:	f002 fc47 	bl	8006b4e <HAL_NVIC_EnableIRQ>
}
 80042c0:	bf00      	nop
 80042c2:	3788      	adds	r7, #136	; 0x88
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40006400 	.word	0x40006400
 80042cc:	20000c68 	.word	0x20000c68
 80042d0:	40021000 	.word	0x40021000
 80042d4:	48000c00 	.word	0x48000c00
 80042d8:	40006800 	.word	0x40006800
 80042dc:	48000400 	.word	0x48000400
 80042e0:	40006c00 	.word	0x40006c00

080042e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b0a4      	sub	sp, #144	; 0x90
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004300:	2254      	movs	r2, #84	; 0x54
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f008 f8fb 	bl	800c500 <memset>
  if(hi2c->Instance==I2C1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a8a      	ldr	r2, [pc, #552]	; (8004538 <HAL_I2C_MspInit+0x254>)
 8004310:	4293      	cmp	r3, r2
 8004312:	f040 80af 	bne.w	8004474 <HAL_I2C_MspInit+0x190>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004316:	2340      	movs	r3, #64	; 0x40
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800431a:	2300      	movs	r3, #0
 800431c:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800431e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004322:	4618      	mov	r0, r3
 8004324:	f005 fec6 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800432e:	f7ff fbb7 	bl	8003aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004332:	4b82      	ldr	r3, [pc, #520]	; (800453c <HAL_I2C_MspInit+0x258>)
 8004334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004336:	4a81      	ldr	r2, [pc, #516]	; (800453c <HAL_I2C_MspInit+0x258>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800433e:	4b7f      	ldr	r3, [pc, #508]	; (800453c <HAL_I2C_MspInit+0x258>)
 8004340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800434a:	4b7c      	ldr	r3, [pc, #496]	; (800453c <HAL_I2C_MspInit+0x258>)
 800434c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434e:	4a7b      	ldr	r2, [pc, #492]	; (800453c <HAL_I2C_MspInit+0x258>)
 8004350:	f043 0302 	orr.w	r3, r3, #2
 8004354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004356:	4b79      	ldr	r3, [pc, #484]	; (800453c <HAL_I2C_MspInit+0x258>)
 8004358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	623b      	str	r3, [r7, #32]
 8004360:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004366:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004368:	2312      	movs	r3, #18
 800436a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436e:	2300      	movs	r3, #0
 8004370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004374:	2300      	movs	r3, #0
 8004376:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800437a:	2304      	movs	r3, #4
 800437c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004380:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004384:	4619      	mov	r1, r3
 8004386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800438a:	f003 fce7 	bl	8007d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004392:	2312      	movs	r3, #18
 8004394:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439e:	2300      	movs	r3, #0
 80043a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80043a4:	2304      	movs	r3, #4
 80043a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80043ae:	4619      	mov	r1, r3
 80043b0:	4863      	ldr	r0, [pc, #396]	; (8004540 <HAL_I2C_MspInit+0x25c>)
 80043b2:	f003 fcd3 	bl	8007d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80043b6:	4b61      	ldr	r3, [pc, #388]	; (800453c <HAL_I2C_MspInit+0x258>)
 80043b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ba:	4a60      	ldr	r2, [pc, #384]	; (800453c <HAL_I2C_MspInit+0x258>)
 80043bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043c0:	6593      	str	r3, [r2, #88]	; 0x58
 80043c2:	4b5e      	ldr	r3, [pc, #376]	; (800453c <HAL_I2C_MspInit+0x258>)
 80043c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 80043ce:	4b5d      	ldr	r3, [pc, #372]	; (8004544 <HAL_I2C_MspInit+0x260>)
 80043d0:	4a5d      	ldr	r2, [pc, #372]	; (8004548 <HAL_I2C_MspInit+0x264>)
 80043d2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80043d4:	4b5b      	ldr	r3, [pc, #364]	; (8004544 <HAL_I2C_MspInit+0x260>)
 80043d6:	2210      	movs	r2, #16
 80043d8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043da:	4b5a      	ldr	r3, [pc, #360]	; (8004544 <HAL_I2C_MspInit+0x260>)
 80043dc:	2200      	movs	r2, #0
 80043de:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043e0:	4b58      	ldr	r3, [pc, #352]	; (8004544 <HAL_I2C_MspInit+0x260>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043e6:	4b57      	ldr	r3, [pc, #348]	; (8004544 <HAL_I2C_MspInit+0x260>)
 80043e8:	2280      	movs	r2, #128	; 0x80
 80043ea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043ec:	4b55      	ldr	r3, [pc, #340]	; (8004544 <HAL_I2C_MspInit+0x260>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043f2:	4b54      	ldr	r3, [pc, #336]	; (8004544 <HAL_I2C_MspInit+0x260>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80043f8:	4b52      	ldr	r3, [pc, #328]	; (8004544 <HAL_I2C_MspInit+0x260>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043fe:	4b51      	ldr	r3, [pc, #324]	; (8004544 <HAL_I2C_MspInit+0x260>)
 8004400:	2200      	movs	r2, #0
 8004402:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004404:	484f      	ldr	r0, [pc, #316]	; (8004544 <HAL_I2C_MspInit+0x260>)
 8004406:	f002 fbbd 	bl	8006b84 <HAL_DMA_Init>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_I2C_MspInit+0x130>
    {
      Error_Handler();
 8004410:	f7ff fb46 	bl	8003aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a4b      	ldr	r2, [pc, #300]	; (8004544 <HAL_I2C_MspInit+0x260>)
 8004418:	63da      	str	r2, [r3, #60]	; 0x3c
 800441a:	4a4a      	ldr	r2, [pc, #296]	; (8004544 <HAL_I2C_MspInit+0x260>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 8004420:	4b4a      	ldr	r3, [pc, #296]	; (800454c <HAL_I2C_MspInit+0x268>)
 8004422:	4a4b      	ldr	r2, [pc, #300]	; (8004550 <HAL_I2C_MspInit+0x26c>)
 8004424:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8004426:	4b49      	ldr	r3, [pc, #292]	; (800454c <HAL_I2C_MspInit+0x268>)
 8004428:	2211      	movs	r2, #17
 800442a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800442c:	4b47      	ldr	r3, [pc, #284]	; (800454c <HAL_I2C_MspInit+0x268>)
 800442e:	2210      	movs	r2, #16
 8004430:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004432:	4b46      	ldr	r3, [pc, #280]	; (800454c <HAL_I2C_MspInit+0x268>)
 8004434:	2200      	movs	r2, #0
 8004436:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004438:	4b44      	ldr	r3, [pc, #272]	; (800454c <HAL_I2C_MspInit+0x268>)
 800443a:	2280      	movs	r2, #128	; 0x80
 800443c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800443e:	4b43      	ldr	r3, [pc, #268]	; (800454c <HAL_I2C_MspInit+0x268>)
 8004440:	2200      	movs	r2, #0
 8004442:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004444:	4b41      	ldr	r3, [pc, #260]	; (800454c <HAL_I2C_MspInit+0x268>)
 8004446:	2200      	movs	r2, #0
 8004448:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800444a:	4b40      	ldr	r3, [pc, #256]	; (800454c <HAL_I2C_MspInit+0x268>)
 800444c:	2200      	movs	r2, #0
 800444e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004450:	4b3e      	ldr	r3, [pc, #248]	; (800454c <HAL_I2C_MspInit+0x268>)
 8004452:	2200      	movs	r2, #0
 8004454:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004456:	483d      	ldr	r0, [pc, #244]	; (800454c <HAL_I2C_MspInit+0x268>)
 8004458:	f002 fb94 	bl	8006b84 <HAL_DMA_Init>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_I2C_MspInit+0x182>
    {
      Error_Handler();
 8004462:	f7ff fb1d 	bl	8003aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a38      	ldr	r2, [pc, #224]	; (800454c <HAL_I2C_MspInit+0x268>)
 800446a:	639a      	str	r2, [r3, #56]	; 0x38
 800446c:	4a37      	ldr	r2, [pc, #220]	; (800454c <HAL_I2C_MspInit+0x268>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004472:	e0dd      	b.n	8004630 <HAL_I2C_MspInit+0x34c>
  else if(hi2c->Instance==I2C2)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a36      	ldr	r2, [pc, #216]	; (8004554 <HAL_I2C_MspInit+0x270>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d16e      	bne.n	800455c <HAL_I2C_MspInit+0x278>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004482:	2300      	movs	r3, #0
 8004484:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800448a:	4618      	mov	r0, r3
 800448c:	f005 fe12 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 8004496:	f7ff fb03 	bl	8003aa0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800449a:	4b28      	ldr	r3, [pc, #160]	; (800453c <HAL_I2C_MspInit+0x258>)
 800449c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449e:	4a27      	ldr	r2, [pc, #156]	; (800453c <HAL_I2C_MspInit+0x258>)
 80044a0:	f043 0304 	orr.w	r3, r3, #4
 80044a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044a6:	4b25      	ldr	r3, [pc, #148]	; (800453c <HAL_I2C_MspInit+0x258>)
 80044a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	61bb      	str	r3, [r7, #24]
 80044b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b2:	4b22      	ldr	r3, [pc, #136]	; (800453c <HAL_I2C_MspInit+0x258>)
 80044b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b6:	4a21      	ldr	r2, [pc, #132]	; (800453c <HAL_I2C_MspInit+0x258>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044be:	4b1f      	ldr	r3, [pc, #124]	; (800453c <HAL_I2C_MspInit+0x258>)
 80044c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80044ca:	2310      	movs	r3, #16
 80044cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044ce:	2312      	movs	r3, #18
 80044d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044da:	2300      	movs	r3, #0
 80044dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80044e0:	2304      	movs	r3, #4
 80044e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80044ea:	4619      	mov	r1, r3
 80044ec:	481a      	ldr	r0, [pc, #104]	; (8004558 <HAL_I2C_MspInit+0x274>)
 80044ee:	f003 fc35 	bl	8007d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80044f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044f8:	2312      	movs	r3, #18
 80044fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004504:	2300      	movs	r3, #0
 8004506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800450a:	2304      	movs	r3, #4
 800450c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004510:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004514:	4619      	mov	r1, r3
 8004516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800451a:	f003 fc1f 	bl	8007d5c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800451e:	4b07      	ldr	r3, [pc, #28]	; (800453c <HAL_I2C_MspInit+0x258>)
 8004520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004522:	4a06      	ldr	r2, [pc, #24]	; (800453c <HAL_I2C_MspInit+0x258>)
 8004524:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004528:	6593      	str	r3, [r2, #88]	; 0x58
 800452a:	4b04      	ldr	r3, [pc, #16]	; (800453c <HAL_I2C_MspInit+0x258>)
 800452c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	693b      	ldr	r3, [r7, #16]
}
 8004536:	e07b      	b.n	8004630 <HAL_I2C_MspInit+0x34c>
 8004538:	40005400 	.word	0x40005400
 800453c:	40021000 	.word	0x40021000
 8004540:	48000400 	.word	0x48000400
 8004544:	20000660 	.word	0x20000660
 8004548:	4002001c 	.word	0x4002001c
 800454c:	200006c0 	.word	0x200006c0
 8004550:	40020030 	.word	0x40020030
 8004554:	40005800 	.word	0x40005800
 8004558:	48000800 	.word	0x48000800
  else if(hi2c->Instance==I2C3)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a35      	ldr	r2, [pc, #212]	; (8004638 <HAL_I2C_MspInit+0x354>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d164      	bne.n	8004630 <HAL_I2C_MspInit+0x34c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800456c:	2300      	movs	r3, #0
 800456e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004574:	4618      	mov	r0, r3
 8004576:	f005 fd9d 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_I2C_MspInit+0x2a0>
      Error_Handler();
 8004580:	f7ff fa8e 	bl	8003aa0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004584:	4b2d      	ldr	r3, [pc, #180]	; (800463c <HAL_I2C_MspInit+0x358>)
 8004586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004588:	4a2c      	ldr	r2, [pc, #176]	; (800463c <HAL_I2C_MspInit+0x358>)
 800458a:	f043 0304 	orr.w	r3, r3, #4
 800458e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004590:	4b2a      	ldr	r3, [pc, #168]	; (800463c <HAL_I2C_MspInit+0x358>)
 8004592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800459c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045a2:	2312      	movs	r3, #18
 80045a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80045b4:	2308      	movs	r3, #8
 80045b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80045be:	4619      	mov	r1, r3
 80045c0:	481f      	ldr	r0, [pc, #124]	; (8004640 <HAL_I2C_MspInit+0x35c>)
 80045c2:	f003 fbcb 	bl	8007d5c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80045c6:	4b1d      	ldr	r3, [pc, #116]	; (800463c <HAL_I2C_MspInit+0x358>)
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	4a1c      	ldr	r2, [pc, #112]	; (800463c <HAL_I2C_MspInit+0x358>)
 80045cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045d0:	6593      	str	r3, [r2, #88]	; 0x58
 80045d2:	4b1a      	ldr	r3, [pc, #104]	; (800463c <HAL_I2C_MspInit+0x358>)
 80045d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045da:	60bb      	str	r3, [r7, #8]
 80045dc:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Channel4;
 80045de:	4b19      	ldr	r3, [pc, #100]	; (8004644 <HAL_I2C_MspInit+0x360>)
 80045e0:	4a19      	ldr	r2, [pc, #100]	; (8004648 <HAL_I2C_MspInit+0x364>)
 80045e2:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 80045e4:	4b17      	ldr	r3, [pc, #92]	; (8004644 <HAL_I2C_MspInit+0x360>)
 80045e6:	2214      	movs	r2, #20
 80045e8:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045ea:	4b16      	ldr	r3, [pc, #88]	; (8004644 <HAL_I2C_MspInit+0x360>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045f0:	4b14      	ldr	r3, [pc, #80]	; (8004644 <HAL_I2C_MspInit+0x360>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045f6:	4b13      	ldr	r3, [pc, #76]	; (8004644 <HAL_I2C_MspInit+0x360>)
 80045f8:	2280      	movs	r2, #128	; 0x80
 80045fa:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <HAL_I2C_MspInit+0x360>)
 80045fe:	2200      	movs	r2, #0
 8004600:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004602:	4b10      	ldr	r3, [pc, #64]	; (8004644 <HAL_I2C_MspInit+0x360>)
 8004604:	2200      	movs	r2, #0
 8004606:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <HAL_I2C_MspInit+0x360>)
 800460a:	2200      	movs	r2, #0
 800460c:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800460e:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <HAL_I2C_MspInit+0x360>)
 8004610:	2200      	movs	r2, #0
 8004612:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8004614:	480b      	ldr	r0, [pc, #44]	; (8004644 <HAL_I2C_MspInit+0x360>)
 8004616:	f002 fab5 	bl	8006b84 <HAL_DMA_Init>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_I2C_MspInit+0x340>
      Error_Handler();
 8004620:	f7ff fa3e 	bl	8003aa0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a07      	ldr	r2, [pc, #28]	; (8004644 <HAL_I2C_MspInit+0x360>)
 8004628:	63da      	str	r2, [r3, #60]	; 0x3c
 800462a:	4a06      	ldr	r2, [pc, #24]	; (8004644 <HAL_I2C_MspInit+0x360>)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004630:	bf00      	nop
 8004632:	3790      	adds	r7, #144	; 0x90
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40007800 	.word	0x40007800
 800463c:	40021000 	.word	0x40021000
 8004640:	48000800 	.word	0x48000800
 8004644:	20000720 	.word	0x20000720
 8004648:	40020044 	.word	0x40020044

0800464c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b0a0      	sub	sp, #128	; 0x80
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004654:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004664:	f107 0318 	add.w	r3, r7, #24
 8004668:	2254      	movs	r2, #84	; 0x54
 800466a:	2100      	movs	r1, #0
 800466c:	4618      	mov	r0, r3
 800466e:	f007 ff47 	bl	800c500 <memset>
  if(huart->Instance==LPUART1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a2d      	ldr	r2, [pc, #180]	; (800472c <HAL_UART_MspInit+0xe0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d152      	bne.n	8004722 <HAL_UART_MspInit+0xd6>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800467c:	2320      	movs	r3, #32
 800467e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8004680:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004684:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004686:	f107 0318 	add.w	r3, r7, #24
 800468a:	4618      	mov	r0, r3
 800468c:	f005 fd12 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004696:	f7ff fa03 	bl	8003aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800469a:	4b25      	ldr	r3, [pc, #148]	; (8004730 <HAL_UART_MspInit+0xe4>)
 800469c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469e:	4a24      	ldr	r2, [pc, #144]	; (8004730 <HAL_UART_MspInit+0xe4>)
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80046a6:	4b22      	ldr	r3, [pc, #136]	; (8004730 <HAL_UART_MspInit+0xe4>)
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046b2:	4b1f      	ldr	r3, [pc, #124]	; (8004730 <HAL_UART_MspInit+0xe4>)
 80046b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b6:	4a1e      	ldr	r2, [pc, #120]	; (8004730 <HAL_UART_MspInit+0xe4>)
 80046b8:	f043 0304 	orr.w	r3, r3, #4
 80046bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046be:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <HAL_UART_MspInit+0xe4>)
 80046c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ca:	4b19      	ldr	r3, [pc, #100]	; (8004730 <HAL_UART_MspInit+0xe4>)
 80046cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ce:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_UART_MspInit+0xe4>)
 80046d0:	f043 0302 	orr.w	r3, r3, #2
 80046d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046d6:	4b16      	ldr	r3, [pc, #88]	; (8004730 <HAL_UART_MspInit+0xe4>)
 80046d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80046e2:	2303      	movs	r3, #3
 80046e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e6:	2302      	movs	r3, #2
 80046e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ee:	2300      	movs	r3, #0
 80046f0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80046f2:	2308      	movs	r3, #8
 80046f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80046fa:	4619      	mov	r1, r3
 80046fc:	480d      	ldr	r0, [pc, #52]	; (8004734 <HAL_UART_MspInit+0xe8>)
 80046fe:	f003 fb2d 	bl	8007d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004702:	2302      	movs	r3, #2
 8004704:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004706:	2302      	movs	r3, #2
 8004708:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470a:	2300      	movs	r3, #0
 800470c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800470e:	2300      	movs	r3, #0
 8004710:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8004712:	230c      	movs	r3, #12
 8004714:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004716:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800471a:	4619      	mov	r1, r3
 800471c:	4806      	ldr	r0, [pc, #24]	; (8004738 <HAL_UART_MspInit+0xec>)
 800471e:	f003 fb1d 	bl	8007d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8004722:	bf00      	nop
 8004724:	3780      	adds	r7, #128	; 0x80
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40008000 	.word	0x40008000
 8004730:	40021000 	.word	0x40021000
 8004734:	48000800 	.word	0x48000800
 8004738:	48000400 	.word	0x48000400

0800473c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08c      	sub	sp, #48	; 0x30
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004744:	f107 031c 	add.w	r3, r7, #28
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	605a      	str	r2, [r3, #4]
 800474e:	609a      	str	r2, [r3, #8]
 8004750:	60da      	str	r2, [r3, #12]
 8004752:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a2f      	ldr	r2, [pc, #188]	; (8004818 <HAL_SPI_MspInit+0xdc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d129      	bne.n	80047b2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800475e:	4b2f      	ldr	r3, [pc, #188]	; (800481c <HAL_SPI_MspInit+0xe0>)
 8004760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004762:	4a2e      	ldr	r2, [pc, #184]	; (800481c <HAL_SPI_MspInit+0xe0>)
 8004764:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004768:	6613      	str	r3, [r2, #96]	; 0x60
 800476a:	4b2c      	ldr	r3, [pc, #176]	; (800481c <HAL_SPI_MspInit+0xe0>)
 800476c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004776:	4b29      	ldr	r3, [pc, #164]	; (800481c <HAL_SPI_MspInit+0xe0>)
 8004778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477a:	4a28      	ldr	r2, [pc, #160]	; (800481c <HAL_SPI_MspInit+0xe0>)
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004782:	4b26      	ldr	r3, [pc, #152]	; (800481c <HAL_SPI_MspInit+0xe0>)
 8004784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800478e:	23e0      	movs	r3, #224	; 0xe0
 8004790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004792:	2302      	movs	r3, #2
 8004794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004796:	2300      	movs	r3, #0
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479a:	2300      	movs	r3, #0
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800479e:	2305      	movs	r3, #5
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a2:	f107 031c 	add.w	r3, r7, #28
 80047a6:	4619      	mov	r1, r3
 80047a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047ac:	f003 fad6 	bl	8007d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80047b0:	e02d      	b.n	800480e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1a      	ldr	r2, [pc, #104]	; (8004820 <HAL_SPI_MspInit+0xe4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d128      	bne.n	800480e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80047bc:	4b17      	ldr	r3, [pc, #92]	; (800481c <HAL_SPI_MspInit+0xe0>)
 80047be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c0:	4a16      	ldr	r2, [pc, #88]	; (800481c <HAL_SPI_MspInit+0xe0>)
 80047c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c6:	6593      	str	r3, [r2, #88]	; 0x58
 80047c8:	4b14      	ldr	r3, [pc, #80]	; (800481c <HAL_SPI_MspInit+0xe0>)
 80047ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047d4:	4b11      	ldr	r3, [pc, #68]	; (800481c <HAL_SPI_MspInit+0xe0>)
 80047d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d8:	4a10      	ldr	r2, [pc, #64]	; (800481c <HAL_SPI_MspInit+0xe0>)
 80047da:	f043 0304 	orr.w	r3, r3, #4
 80047de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047e0:	4b0e      	ldr	r3, [pc, #56]	; (800481c <HAL_SPI_MspInit+0xe0>)
 80047e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80047ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80047f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f2:	2302      	movs	r3, #2
 80047f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047fa:	2300      	movs	r3, #0
 80047fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80047fe:	2306      	movs	r3, #6
 8004800:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004802:	f107 031c 	add.w	r3, r7, #28
 8004806:	4619      	mov	r1, r3
 8004808:	4806      	ldr	r0, [pc, #24]	; (8004824 <HAL_SPI_MspInit+0xe8>)
 800480a:	f003 faa7 	bl	8007d5c <HAL_GPIO_Init>
}
 800480e:	bf00      	nop
 8004810:	3730      	adds	r7, #48	; 0x30
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40013000 	.word	0x40013000
 800481c:	40021000 	.word	0x40021000
 8004820:	40003c00 	.word	0x40003c00
 8004824:	48000800 	.word	0x48000800

08004828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004838:	d114      	bne.n	8004864 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800483a:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <HAL_TIM_Base_MspInit+0x78>)
 800483c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483e:	4a18      	ldr	r2, [pc, #96]	; (80048a0 <HAL_TIM_Base_MspInit+0x78>)
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	6593      	str	r3, [r2, #88]	; 0x58
 8004846:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <HAL_TIM_Base_MspInit+0x78>)
 8004848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004852:	2200      	movs	r2, #0
 8004854:	2100      	movs	r1, #0
 8004856:	201c      	movs	r0, #28
 8004858:	f002 f95f 	bl	8006b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800485c:	201c      	movs	r0, #28
 800485e:	f002 f976 	bl	8006b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004862:	e018      	b.n	8004896 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM5)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a0e      	ldr	r2, [pc, #56]	; (80048a4 <HAL_TIM_Base_MspInit+0x7c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d113      	bne.n	8004896 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <HAL_TIM_Base_MspInit+0x78>)
 8004870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004872:	4a0b      	ldr	r2, [pc, #44]	; (80048a0 <HAL_TIM_Base_MspInit+0x78>)
 8004874:	f043 0308 	orr.w	r3, r3, #8
 8004878:	6593      	str	r3, [r2, #88]	; 0x58
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <HAL_TIM_Base_MspInit+0x78>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	60bb      	str	r3, [r7, #8]
 8004884:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004886:	2200      	movs	r2, #0
 8004888:	2100      	movs	r1, #0
 800488a:	2032      	movs	r0, #50	; 0x32
 800488c:	f002 f945 	bl	8006b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004890:	2032      	movs	r0, #50	; 0x32
 8004892:	f002 f95c 	bl	8006b4e <HAL_NVIC_EnableIRQ>
}
 8004896:	bf00      	nop
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40000c00 	.word	0x40000c00

080048a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b098      	sub	sp, #96	; 0x60
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048b0:	f107 030c 	add.w	r3, r7, #12
 80048b4:	2254      	movs	r2, #84	; 0x54
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f007 fe21 	bl	800c500 <memset>
  if(hpcd->Instance==USB)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a11      	ldr	r2, [pc, #68]	; (8004908 <HAL_PCD_MspInit+0x60>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d11a      	bne.n	80048fe <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80048c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048cc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80048ce:	2300      	movs	r3, #0
 80048d0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048d2:	f107 030c 	add.w	r3, r7, #12
 80048d6:	4618      	mov	r0, r3
 80048d8:	f005 fbec 	bl	800a0b4 <HAL_RCCEx_PeriphCLKConfig>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80048e2:	f7ff f8dd 	bl	8003aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_PCD_MspInit+0x64>)
 80048e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ea:	4a08      	ldr	r2, [pc, #32]	; (800490c <HAL_PCD_MspInit+0x64>)
 80048ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048f0:	6593      	str	r3, [r2, #88]	; 0x58
 80048f2:	4b06      	ldr	r3, [pc, #24]	; (800490c <HAL_PCD_MspInit+0x64>)
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80048fe:	bf00      	nop
 8004900:	3760      	adds	r7, #96	; 0x60
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40005c00 	.word	0x40005c00
 800490c:	40021000 	.word	0x40021000

08004910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004914:	f005 fb6c 	bl	8009ff0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004918:	e7fe      	b.n	8004918 <NMI_Handler+0x8>

0800491a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800491a:	b480      	push	{r7}
 800491c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800491e:	e7fe      	b.n	800491e <HardFault_Handler+0x4>

08004920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004924:	e7fe      	b.n	8004924 <MemManage_Handler+0x4>

08004926 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004926:	b480      	push	{r7}
 8004928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800492a:	e7fe      	b.n	800492a <BusFault_Handler+0x4>

0800492c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004930:	e7fe      	b.n	8004930 <UsageFault_Handler+0x4>

08004932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004932:	b480      	push	{r7}
 8004934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004936:	bf00      	nop
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800494e:	b480      	push	{r7}
 8004950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004952:	bf00      	nop
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004960:	f000 fc66 	bl	8005230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004964:	bf00      	nop
 8004966:	bd80      	pop	{r7, pc}

08004968 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800496c:	4802      	ldr	r0, [pc, #8]	; (8004978 <DMA1_Channel1_IRQHandler+0x10>)
 800496e:	f002 fa2c 	bl	8006dca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004972:	bf00      	nop
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000378 	.word	0x20000378

0800497c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004980:	4802      	ldr	r0, [pc, #8]	; (800498c <DMA1_Channel2_IRQHandler+0x10>)
 8004982:	f002 fa22 	bl	8006dca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000660 	.word	0x20000660

08004990 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004994:	4802      	ldr	r0, [pc, #8]	; (80049a0 <DMA1_Channel3_IRQHandler+0x10>)
 8004996:	f002 fa18 	bl	8006dca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800499a:	bf00      	nop
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	200006c0 	.word	0x200006c0

080049a4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80049a8:	4802      	ldr	r0, [pc, #8]	; (80049b4 <DMA1_Channel4_IRQHandler+0x10>)
 80049aa:	f002 fa0e 	bl	8006dca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80049ae:	bf00      	nop
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000720 	.word	0x20000720

080049b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80049bc:	4802      	ldr	r0, [pc, #8]	; (80049c8 <DMA1_Channel5_IRQHandler+0x10>)
 80049be:	f002 fa04 	bl	8006dca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	200003d8 	.word	0x200003d8

080049cc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80049d0:	4802      	ldr	r0, [pc, #8]	; (80049dc <FDCAN1_IT0_IRQHandler+0x10>)
 80049d2:	f002 ff57 	bl	8007884 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80049d6:	bf00      	nop
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000438 	.word	0x20000438

080049e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// T_out = ((ARR+1)(PSC+1))/F_clk

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80049e4:	4804      	ldr	r0, [pc, #16]	; (80049f8 <TIM2_IRQHandler+0x18>)
 80049e6:	f005 ff5c 	bl	800a8a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim2);
 80049ea:	4803      	ldr	r0, [pc, #12]	; (80049f8 <TIM2_IRQHandler+0x18>)
 80049ec:	f005 ff2a 	bl	800a844 <HAL_TIM_Base_Stop_IT>
  HV_on();
 80049f0:	f7ff f8a0 	bl	8003b34 <HV_on>
  /* USER CODE END TIM2_IRQn 1 */
}
 80049f4:	bf00      	nop
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	200008ec 	.word	0x200008ec

080049fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a00:	4808      	ldr	r0, [pc, #32]	; (8004a24 <TIM5_IRQHandler+0x28>)
 8004a02:	f005 ff4e 	bl	800a8a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  Fault_Flag = Update_Temp();
 8004a06:	f000 f9fd 	bl	8004e04 <Update_Temp>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <TIM5_IRQHandler+0x2c>)
 8004a10:	701a      	strb	r2, [r3, #0]
  Fault_Flag = IMD_Req_Isolation();
 8004a12:	f7fd fb45 	bl	80020a0 <IMD_Req_Isolation>
 8004a16:	4603      	mov	r3, r0
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <TIM5_IRQHandler+0x2c>)
 8004a1c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000938 	.word	0x20000938
 8004a28:	20000c60 	.word	0x20000c60

08004a2c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004a30:	4802      	ldr	r0, [pc, #8]	; (8004a3c <FDCAN2_IT0_IRQHandler+0x10>)
 8004a32:	f002 ff27 	bl	8007884 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8004a36:	bf00      	nop
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	2000049c 	.word	0x2000049c

08004a40 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8004a44:	4802      	ldr	r0, [pc, #8]	; (8004a50 <FDCAN3_IT1_IRQHandler+0x10>)
 8004a46:	f002 ff1d 	bl	8007884 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000500 	.word	0x20000500

08004a54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	e00a      	b.n	8004a7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a66:	f3af 8000 	nop.w
 8004a6a:	4601      	mov	r1, r0
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	60ba      	str	r2, [r7, #8]
 8004a72:	b2ca      	uxtb	r2, r1
 8004a74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	dbf0      	blt.n	8004a66 <_read+0x12>
  }

  return len;
 8004a84:	687b      	ldr	r3, [r7, #4]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	e009      	b.n	8004ab4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	60ba      	str	r2, [r7, #8]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	dbf1      	blt.n	8004aa0 <_write+0x12>
  }
  return len;
 8004abc:	687b      	ldr	r3, [r7, #4]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <_close>:

int _close(int file)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004aee:	605a      	str	r2, [r3, #4]
  return 0;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <_isatty>:

int _isatty(int file)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b06:	2301      	movs	r3, #1
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b38:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <_sbrk+0x5c>)
 8004b3a:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <_sbrk+0x60>)
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b44:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <_sbrk+0x64>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b4c:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <_sbrk+0x64>)
 8004b4e:	4a12      	ldr	r2, [pc, #72]	; (8004b98 <_sbrk+0x68>)
 8004b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <_sbrk+0x64>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4413      	add	r3, r2
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d207      	bcs.n	8004b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b60:	f007 fd1c 	bl	800c59c <__errno>
 8004b64:	4603      	mov	r3, r0
 8004b66:	220c      	movs	r2, #12
 8004b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6e:	e009      	b.n	8004b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <_sbrk+0x64>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b76:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <_sbrk+0x64>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <_sbrk+0x64>)
 8004b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b82:	68fb      	ldr	r3, [r7, #12]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20020000 	.word	0x20020000
 8004b90:	00000400 	.word	0x00000400
 8004b94:	20000c6c 	.word	0x20000c6c
 8004b98:	20000e30 	.word	0x20000e30

08004b9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004ba0:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <SystemInit+0x20>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	4a05      	ldr	r2, [pc, #20]	; (8004bbc <SystemInit+0x20>)
 8004ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004bb0:	bf00      	nop
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	e000ed00 	.word	0xe000ed00

08004bc0 <i2c_temp_init>:
volatile int adc5_convert = 0;
volatile int32_t temps[8] = {0};
volatile int32_t pressure[1] = {0};


uint8_t i2c_temp_init(mcp9600_handle_t *handle, mcp9600_address_t addr_pin, mcp9600_thermocouple_type_t type){
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	70fb      	strb	r3, [r7, #3]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	70bb      	strb	r3, [r7, #2]
	uint8_t status;

	DRIVER_MCP9600_LINK_INIT(handle, mcp9600_handle_t);
 8004bd0:	221c      	movs	r2, #28
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f007 fc93 	bl	800c500 <memset>
	DRIVER_MCP9600_LINK_IIC_INIT(handle, mcp9600_interface_iic_init);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a40      	ldr	r2, [pc, #256]	; (8004ce0 <i2c_temp_init+0x120>)
 8004bde:	601a      	str	r2, [r3, #0]
	DRIVER_MCP9600_LINK_IIC_DEINIT(handle, mcp9600_interface_iic_deinit);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a40      	ldr	r2, [pc, #256]	; (8004ce4 <i2c_temp_init+0x124>)
 8004be4:	605a      	str	r2, [r3, #4]
	DRIVER_MCP9600_LINK_IIC_READ_COMMAND(handle, mcp9600_interface_iic_read_cmd);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a3f      	ldr	r2, [pc, #252]	; (8004ce8 <i2c_temp_init+0x128>)
 8004bea:	60da      	str	r2, [r3, #12]
	DRIVER_MCP9600_LINK_IIC_WRITE_COMMAND(handle, mcp9600_interface_iic_write_cmd);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a3f      	ldr	r2, [pc, #252]	; (8004cec <i2c_temp_init+0x12c>)
 8004bf0:	609a      	str	r2, [r3, #8]
	DRIVER_MCP9600_LINK_IIC_DELAY_MS(handle, mcp9600_interface_delay_ms);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a3e      	ldr	r2, [pc, #248]	; (8004cf0 <i2c_temp_init+0x130>)
 8004bf6:	611a      	str	r2, [r3, #16]
	DRIVER_MCP9600_LINK_DEBUG_PRINT(handle, mcp9600_interface_debug_print);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a3e      	ldr	r2, [pc, #248]	; (8004cf4 <i2c_temp_init+0x134>)
 8004bfc:	615a      	str	r2, [r3, #20]

	status = mcp9600_set_addr_pin(handle, addr_pin); //set i2c address
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	4619      	mov	r1, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fd fc54 	bl	80024b0 <mcp9600_set_addr_pin>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <i2c_temp_init+0x56>
		return 1;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e05f      	b.n	8004cd6 <i2c_temp_init+0x116>
	}
	status = mcp9600_init(handle); //chip init
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fd fc60 	bl	80024dc <mcp9600_init>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <i2c_temp_init+0x6a>
		return 1;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e055      	b.n	8004cd6 <i2c_temp_init+0x116>
	}
	status = mcp9600_set_mode(handle, MCP9600_MODE_NORMAL); //set normal
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fd ff29 	bl	8002a84 <mcp9600_set_mode>
 8004c32:	4603      	mov	r3, r0
 8004c34:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d004      	beq.n	8004c46 <i2c_temp_init+0x86>
		(void)mcp9600_deinit(handle);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7fd fcdb 	bl	80025f8 <mcp9600_deinit>
		return 1;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e047      	b.n	8004cd6 <i2c_temp_init+0x116>
	}
	status = mcp9600_set_filter_coefficient(handle, MCP9600_FILTER_COEFFICIENT_0); //set filter
 8004c46:	2100      	movs	r1, #0
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7fd ffaf 	bl	8002bac <mcp9600_set_filter_coefficient>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d004      	beq.n	8004c62 <i2c_temp_init+0xa2>
		(void)mcp9600_deinit(handle);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7fd fccd 	bl	80025f8 <mcp9600_deinit>
		return 1;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e039      	b.n	8004cd6 <i2c_temp_init+0x116>
	}
	status = mcp9600_set_thermocouple_type(handle, type); //thermocouple type
 8004c62:	78bb      	ldrb	r3, [r7, #2]
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fd ff54 	bl	8002b14 <mcp9600_set_thermocouple_type>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d004      	beq.n	8004c80 <i2c_temp_init+0xc0>
		(void)mcp9600_deinit(handle);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fd fcbe 	bl	80025f8 <mcp9600_deinit>
		return 1;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e02a      	b.n	8004cd6 <i2c_temp_init+0x116>
	}
	status = mcp9600_set_cold_junction_resolution(handle,MCP9600_COLD_JUNCTION_RESOLUTION_0P0625);
 8004c80:	2100      	movs	r1, #0
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fd fe66 	bl	8002954 <mcp9600_set_cold_junction_resolution>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d004      	beq.n	8004c9c <i2c_temp_init+0xdc>
		(void)mcp9600_deinit(handle);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fd fcb0 	bl	80025f8 <mcp9600_deinit>
		return 1;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e01c      	b.n	8004cd6 <i2c_temp_init+0x116>
	}
	status = mcp9600_set_adc_resolution(handle,MCP9600_ADC_RESOLUTION_12_BIT);
 8004c9c:	2103      	movs	r1, #3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fd fea4 	bl	80029ec <mcp9600_set_adc_resolution>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <i2c_temp_init+0xf8>
		(void)mcp9600_deinit(handle);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fd fca2 	bl	80025f8 <mcp9600_deinit>
		return 1;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e00e      	b.n	8004cd6 <i2c_temp_init+0x116>
	}
	status = mcp9600_set_adc_resolution(handle, MCP9600_BURST_MODE_SAMPLE_4);
 8004cb8:	2102      	movs	r1, #2
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fd fe96 	bl	80029ec <mcp9600_set_adc_resolution>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	73fb      	strb	r3, [r7, #15]
	if(status !=0){
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d004      	beq.n	8004cd4 <i2c_temp_init+0x114>
		(void)mcp9600_deinit(handle);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fd fc94 	bl	80025f8 <mcp9600_deinit>
		return 1;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <i2c_temp_init+0x116>
	}
	return 0;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	08002c3d 	.word	0x08002c3d
 8004ce4:	08002c4d 	.word	0x08002c4d
 8004ce8:	08002ca9 	.word	0x08002ca9
 8004cec:	08002c5d 	.word	0x08002c5d
 8004cf0:	08002cf5 	.word	0x08002cf5
 8004cf4:	08002d0b 	.word	0x08002d0b

08004cf8 <mcp9600_read>:
uint8_t mcp9600_read(mcp9600_handle_t *handle, int16_t *hot_raw, float *hot_s,int16_t *delta_raw, float *delta_s, int16_t *cold_raw, float *cold_s){
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08a      	sub	sp, #40	; 0x28
 8004cfc:	af04      	add	r7, sp, #16
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
	uint8_t status;
	status = mcp9600_single_read(handle, hot_raw, hot_s, delta_raw, delta_s, cold_raw, cold_s);
 8004d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d08:	9302      	str	r3, [sp, #8]
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7fd fcc5 	bl	80026a8 <mcp9600_single_read>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	75fb      	strb	r3, [r7, #23]
	if(status !=0){
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <mcp9600_read+0x34>
		return 1;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <mcp9600_read+0x36>
	}
	return 0;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <tempsensor_init>:

uint8_t tempsensor_init(){
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
	uint8_t status;
	status = i2c_temp_init(&MCP_0, MCP9600_ADDRESS_0, MCP9600_THERMOCOUPLE_TYPE_K);
 8004d3e:	2200      	movs	r2, #0
 8004d40:	21c0      	movs	r1, #192	; 0xc0
 8004d42:	4828      	ldr	r0, [pc, #160]	; (8004de4 <tempsensor_init+0xac>)
 8004d44:	f7ff ff3c 	bl	8004bc0 <i2c_temp_init>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	70fb      	strb	r3, [r7, #3]
	if(status !=0){
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <tempsensor_init+0x1e>
		return 1;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e042      	b.n	8004ddc <tempsensor_init+0xa4>
	}
	status = i2c_temp_init(&MCP_1, MCP9600_ADDRESS_1, MCP9600_THERMOCOUPLE_TYPE_K);
 8004d56:	2200      	movs	r2, #0
 8004d58:	21cc      	movs	r1, #204	; 0xcc
 8004d5a:	4823      	ldr	r0, [pc, #140]	; (8004de8 <tempsensor_init+0xb0>)
 8004d5c:	f7ff ff30 	bl	8004bc0 <i2c_temp_init>
 8004d60:	4603      	mov	r3, r0
 8004d62:	70fb      	strb	r3, [r7, #3]
	if(status !=0){
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <tempsensor_init+0x36>
		return 1;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e036      	b.n	8004ddc <tempsensor_init+0xa4>
	}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_result_dma,adc1_count);
 8004d6e:	2304      	movs	r3, #4
 8004d70:	461a      	mov	r2, r3
 8004d72:	491e      	ldr	r1, [pc, #120]	; (8004dec <tempsensor_init+0xb4>)
 8004d74:	481e      	ldr	r0, [pc, #120]	; (8004df0 <tempsensor_init+0xb8>)
 8004d76:	f000 fe75 	bl	8005a64 <HAL_ADC_Start_DMA>
	while(adc1_convert == 0){
 8004d7a:	bf00      	nop
 8004d7c:	4b1d      	ldr	r3, [pc, #116]	; (8004df4 <tempsensor_init+0xbc>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0fb      	beq.n	8004d7c <tempsensor_init+0x44>
		//will hold until ready used to make sure all temp sensors are connected
	}
	adc1_convert = 0;
 8004d84:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <tempsensor_init+0xbc>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < adc1_count; i++){
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	607b      	str	r3, [r7, #4]
 8004d8e:	e00b      	b.n	8004da8 <tempsensor_init+0x70>
		if(adc1_result_dma[i] <= 0){
 8004d90:	4a16      	ldr	r2, [pc, #88]	; (8004dec <tempsensor_init+0xb4>)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <tempsensor_init+0x6a>
			return 1;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e01c      	b.n	8004ddc <tempsensor_init+0xa4>
	for(int i = 0; i < adc1_count; i++){
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3301      	adds	r3, #1
 8004da6:	607b      	str	r3, [r7, #4]
 8004da8:	2204      	movs	r2, #4
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4293      	cmp	r3, r2
 8004dae:	dbef      	blt.n	8004d90 <tempsensor_init+0x58>
		}
	}
	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_result_dma,adc5_count);
 8004db0:	2301      	movs	r3, #1
 8004db2:	461a      	mov	r2, r3
 8004db4:	4910      	ldr	r1, [pc, #64]	; (8004df8 <tempsensor_init+0xc0>)
 8004db6:	4811      	ldr	r0, [pc, #68]	; (8004dfc <tempsensor_init+0xc4>)
 8004db8:	f000 fe54 	bl	8005a64 <HAL_ADC_Start_DMA>
	while(adc5_convert == 0){
 8004dbc:	bf00      	nop
 8004dbe:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <tempsensor_init+0xc8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0fb      	beq.n	8004dbe <tempsensor_init+0x86>
			//will hold until ready used to make sure all pressure sensors are connected
	}
	adc5_convert = 0;
 8004dc6:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <tempsensor_init+0xc8>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
	if(adc5_result_dma[0] <= 0){
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <tempsensor_init+0xc0>)
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <tempsensor_init+0xa2>
		return 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <tempsensor_init+0xa4>
	}
	return 0;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000c70 	.word	0x20000c70
 8004de8:	20000c8c 	.word	0x20000c8c
 8004dec:	20000ca8 	.word	0x20000ca8
 8004df0:	200002a0 	.word	0x200002a0
 8004df4:	20000cb4 	.word	0x20000cb4
 8004df8:	20000cb0 	.word	0x20000cb0
 8004dfc:	2000030c 	.word	0x2000030c
 8004e00:	20000cb8 	.word	0x20000cb8

08004e04 <Update_Temp>:

uint8_t Update_Temp(){
 8004e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e08:	b094      	sub	sp, #80	; 0x50
 8004e0a:	af04      	add	r7, sp, #16
	int16_t delta_raw;
	float delta_s;
	int16_t cold_raw;
	float cold_s;

	if(adc1_convert == 1){ //when adc is done convert value to degree C and add to global temp variable
 8004e0c:	4baf      	ldr	r3, [pc, #700]	; (80050cc <Update_Temp+0x2c8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d17f      	bne.n	8004f14 <Update_Temp+0x110>
		for(int i = 0; i < adc1_count; i++){
 8004e14:	2300      	movs	r3, #0
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e18:	e074      	b.n	8004f04 <Update_Temp+0x100>
			int32_t raw = adc1_result_dma[i];
 8004e1a:	4aad      	ldr	r2, [pc, #692]	; (80050d0 <Update_Temp+0x2cc>)
 8004e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	63bb      	str	r3, [r7, #56]	; 0x38
			int32_t pow2 = raw*raw;
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	fb03 f303 	mul.w	r3, r3, r3
 8004e2c:	637b      	str	r3, [r7, #52]	; 0x34
			temps[i] = (((int32_t)((((int64_t)pow2*raw>>16)*76633531) >> 16)+(int32_t)(((int64_t)pow2*-4493757)>>16)+(raw*208775)+ -126577781)>>16);
 8004e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e30:	17da      	asrs	r2, r3, #31
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	617a      	str	r2, [r7, #20]
 8004e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e38:	17da      	asrs	r2, r3, #31
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	60fa      	str	r2, [r7, #12]
 8004e3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e42:	460b      	mov	r3, r1
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	fb02 f203 	mul.w	r2, r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004e50:	4601      	mov	r1, r0
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	fba2 4501 	umull	r4, r5, r2, r1
 8004e60:	442b      	add	r3, r5
 8004e62:	461d      	mov	r5, r3
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	0c22      	lsrs	r2, r4, #16
 8004e6e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8004e72:	142b      	asrs	r3, r5, #16
 8004e74:	4997      	ldr	r1, [pc, #604]	; (80050d4 <Update_Temp+0x2d0>)
 8004e76:	fb01 f003 	mul.w	r0, r1, r3
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	fb02 f101 	mul.w	r1, r2, r1
 8004e80:	4408      	add	r0, r1
 8004e82:	4994      	ldr	r1, [pc, #592]	; (80050d4 <Update_Temp+0x2d0>)
 8004e84:	fba2 8901 	umull	r8, r9, r2, r1
 8004e88:	eb00 0309 	add.w	r3, r0, r9
 8004e8c:	4699      	mov	r9, r3
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8004e9a:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8004e9e:	ea4f 4329 	mov.w	r3, r9, asr #16
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea6:	17da      	asrs	r2, r3, #31
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	4b8a      	ldr	r3, [pc, #552]	; (80050d8 <Update_Temp+0x2d4>)
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	fb03 f202 	mul.w	r2, r3, r2
 8004eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb8:	6838      	ldr	r0, [r7, #0]
 8004eba:	fb00 f303 	mul.w	r3, r0, r3
 8004ebe:	441a      	add	r2, r3
 8004ec0:	4b85      	ldr	r3, [pc, #532]	; (80050d8 <Update_Temp+0x2d4>)
 8004ec2:	6838      	ldr	r0, [r7, #0]
 8004ec4:	fba0 ab03 	umull	sl, fp, r0, r3
 8004ec8:	eb02 030b 	add.w	r3, r2, fp
 8004ecc:	469b      	mov	fp, r3
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	ea4f 421a 	mov.w	r2, sl, lsr #16
 8004eda:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8004ede:	ea4f 432b 	mov.w	r3, fp, asr #16
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	4419      	add	r1, r3
 8004ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ee8:	4b7c      	ldr	r3, [pc, #496]	; (80050dc <Update_Temp+0x2d8>)
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	18ca      	adds	r2, r1, r3
 8004ef0:	4b7b      	ldr	r3, [pc, #492]	; (80050e0 <Update_Temp+0x2dc>)
 8004ef2:	4413      	add	r3, r2
 8004ef4:	141a      	asrs	r2, r3, #16
 8004ef6:	497b      	ldr	r1, [pc, #492]	; (80050e4 <Update_Temp+0x2e0>)
 8004ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < adc1_count; i++){
 8004efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f00:	3301      	adds	r3, #1
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f04:	2204      	movs	r2, #4
 8004f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	db86      	blt.n	8004e1a <Update_Temp+0x16>
			//t=c3*adc^3+c2*adc^2+c1*adc+b  c3 = 2.72257E-07 c2 = -0.001046284 c1 = 3.185654692 b = -1931.423651
		}
		adc1_convert = 0;
 8004f0c:	4b6f      	ldr	r3, [pc, #444]	; (80050cc <Update_Temp+0x2c8>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e00c      	b.n	8004f2e <Update_Temp+0x12a>
	}else if(adc1_convert == 0){
 8004f14:	4b6d      	ldr	r3, [pc, #436]	; (80050cc <Update_Temp+0x2c8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d108      	bne.n	8004f2e <Update_Temp+0x12a>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_result_dma,adc1_count); //starts adc conversion sets convert to 2, indicates running prevents restarting while running.
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	461a      	mov	r2, r3
 8004f20:	496b      	ldr	r1, [pc, #428]	; (80050d0 <Update_Temp+0x2cc>)
 8004f22:	4871      	ldr	r0, [pc, #452]	; (80050e8 <Update_Temp+0x2e4>)
 8004f24:	f000 fd9e 	bl	8005a64 <HAL_ADC_Start_DMA>
		adc1_convert = 2;
 8004f28:	4b68      	ldr	r3, [pc, #416]	; (80050cc <Update_Temp+0x2c8>)
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	601a      	str	r2, [r3, #0]
	}
	status = mcp9600_read(&MCP_0,(int16_t *)&hot_raw, (float *)&hot_s, (int16_t *)&delta_raw, (float *)&delta_s, (int16_t *)&cold_raw, (float *)&cold_s);
 8004f2e:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 8004f32:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004f36:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004f3a:	f107 031c 	add.w	r3, r7, #28
 8004f3e:	9302      	str	r3, [sp, #8]
 8004f40:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4867      	ldr	r0, [pc, #412]	; (80050ec <Update_Temp+0x2e8>)
 8004f50:	f7ff fed2 	bl	8004cf8 <mcp9600_read>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	temps[4] = (int32_t)roundf(hot_s*10.0f);
 8004f5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004f5e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f66:	eeb0 0a67 	vmov.f32	s0, s15
 8004f6a:	f007 f81f 	bl	800bfac <roundf>
 8004f6e:	eef0 7a40 	vmov.f32	s15, s0
 8004f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f76:	ee17 2a90 	vmov	r2, s15
 8004f7a:	4b5a      	ldr	r3, [pc, #360]	; (80050e4 <Update_Temp+0x2e0>)
 8004f7c:	611a      	str	r2, [r3, #16]
	if(status !=0){
 8004f7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <Update_Temp+0x186>
		return 1; //read fail
 8004f86:	2301      	movs	r3, #1
 8004f88:	e09a      	b.n	80050c0 <Update_Temp+0x2bc>
	}

	status = mcp9600_read(&MCP_1,(int16_t *)&hot_raw, (float *)&hot_s, (int16_t *)&delta_raw, (float *)&delta_s, (int16_t *)&cold_raw, (float *)&cold_s);
 8004f8a:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 8004f8e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004f92:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004f96:	f107 031c 	add.w	r3, r7, #28
 8004f9a:	9302      	str	r3, [sp, #8]
 8004f9c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	4603      	mov	r3, r0
 8004faa:	4851      	ldr	r0, [pc, #324]	; (80050f0 <Update_Temp+0x2ec>)
 8004fac:	f7ff fea4 	bl	8004cf8 <mcp9600_read>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	temps[5] = (int32_t)roundf(hot_s*10.0f);
 8004fb6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004fba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fc6:	f006 fff1 	bl	800bfac <roundf>
 8004fca:	eef0 7a40 	vmov.f32	s15, s0
 8004fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fd2:	ee17 2a90 	vmov	r2, s15
 8004fd6:	4b43      	ldr	r3, [pc, #268]	; (80050e4 <Update_Temp+0x2e0>)
 8004fd8:	615a      	str	r2, [r3, #20]
	if(status !=0){
 8004fda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <Update_Temp+0x1e2>
		return 1; //read fail
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e06c      	b.n	80050c0 <Update_Temp+0x2bc>
	}

	if(temps[0] > ADC1_1_MAX_TEMP || temps[0] < ADC1_1_MIN_TEMP ){
 8004fe6:	4b3f      	ldr	r3, [pc, #252]	; (80050e4 <Update_Temp+0x2e0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2bfa      	cmp	r3, #250	; 0xfa
 8004fec:	dc03      	bgt.n	8004ff6 <Update_Temp+0x1f2>
 8004fee:	4b3d      	ldr	r3, [pc, #244]	; (80050e4 <Update_Temp+0x2e0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	da01      	bge.n	8004ffa <Update_Temp+0x1f6>
		return 1; //temp fault
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e062      	b.n	80050c0 <Update_Temp+0x2bc>
	}
	if(temps[1] > ADC1_2_MAX_TEMP || temps[1] < ADC1_2_MIN_TEMP ){
 8004ffa:	4b3a      	ldr	r3, [pc, #232]	; (80050e4 <Update_Temp+0x2e0>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2bfa      	cmp	r3, #250	; 0xfa
 8005000:	dc03      	bgt.n	800500a <Update_Temp+0x206>
 8005002:	4b38      	ldr	r3, [pc, #224]	; (80050e4 <Update_Temp+0x2e0>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	da01      	bge.n	800500e <Update_Temp+0x20a>
		return 1; //temp fault
 800500a:	2301      	movs	r3, #1
 800500c:	e058      	b.n	80050c0 <Update_Temp+0x2bc>
	}
	if(temps[2] > ADC1_3_MAX_TEMP || temps[2] < ADC1_3_MIN_TEMP ){
 800500e:	4b35      	ldr	r3, [pc, #212]	; (80050e4 <Update_Temp+0x2e0>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2bfa      	cmp	r3, #250	; 0xfa
 8005014:	dc03      	bgt.n	800501e <Update_Temp+0x21a>
 8005016:	4b33      	ldr	r3, [pc, #204]	; (80050e4 <Update_Temp+0x2e0>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	da01      	bge.n	8005022 <Update_Temp+0x21e>
		return 1; //temp fault
 800501e:	2301      	movs	r3, #1
 8005020:	e04e      	b.n	80050c0 <Update_Temp+0x2bc>
	}
	if(temps[3] > ADC1_4_MAX_TEMP || temps[3] < ADC1_4_MIN_TEMP ){
 8005022:	4b30      	ldr	r3, [pc, #192]	; (80050e4 <Update_Temp+0x2e0>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2bfa      	cmp	r3, #250	; 0xfa
 8005028:	dc03      	bgt.n	8005032 <Update_Temp+0x22e>
 800502a:	4b2e      	ldr	r3, [pc, #184]	; (80050e4 <Update_Temp+0x2e0>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	da01      	bge.n	8005036 <Update_Temp+0x232>
		return 1; //temp fault
 8005032:	2301      	movs	r3, #1
 8005034:	e044      	b.n	80050c0 <Update_Temp+0x2bc>
	}
	if((float)(temps[4]/16.0f) > MCP_0_MAX_TEMP || (float)(temps[4]/16.0f) < MCP_0_MIN_TEMP ){
 8005036:	4b2b      	ldr	r3, [pc, #172]	; (80050e4 <Update_Temp+0x2e0>)
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005042:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8005046:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800504a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80050f4 <Update_Temp+0x2f0>
 800504e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005056:	dc0e      	bgt.n	8005076 <Update_Temp+0x272>
 8005058:	4b22      	ldr	r3, [pc, #136]	; (80050e4 <Update_Temp+0x2e0>)
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	ee07 3a90 	vmov	s15, r3
 8005060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005064:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8005068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800506c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005074:	d501      	bpl.n	800507a <Update_Temp+0x276>
		return 1; //temp fault
 8005076:	2301      	movs	r3, #1
 8005078:	e022      	b.n	80050c0 <Update_Temp+0x2bc>
	}
	if((float)(temps[5]/16.0f) > MCP_1_MAX_TEMP || (float)(temps[5]/16.0f) < MCP_1_MIN_TEMP ){
 800507a:	4b1a      	ldr	r3, [pc, #104]	; (80050e4 <Update_Temp+0x2e0>)
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005086:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800508a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800508e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80050f4 <Update_Temp+0x2f0>
 8005092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509a:	dc0e      	bgt.n	80050ba <Update_Temp+0x2b6>
 800509c:	4b11      	ldr	r3, [pc, #68]	; (80050e4 <Update_Temp+0x2e0>)
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	ee07 3a90 	vmov	s15, r3
 80050a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050a8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80050ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	d501      	bpl.n	80050be <Update_Temp+0x2ba>
		return 1; //temp fault
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <Update_Temp+0x2bc>
	}
	return 0;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3740      	adds	r7, #64	; 0x40
 80050c4:	46bd      	mov	sp, r7
 80050c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ca:	bf00      	nop
 80050cc:	20000cb4 	.word	0x20000cb4
 80050d0:	20000ca8 	.word	0x20000ca8
 80050d4:	049155bb 	.word	0x049155bb
 80050d8:	ffbb6e43 	.word	0xffbb6e43
 80050dc:	00032f87 	.word	0x00032f87
 80050e0:	f874938b 	.word	0xf874938b
 80050e4:	20000cbc 	.word	0x20000cbc
 80050e8:	200002a0 	.word	0x200002a0
 80050ec:	20000c70 	.word	0x20000c70
 80050f0:	20000c8c 	.word	0x20000c8c
 80050f4:	437a0000 	.word	0x437a0000

080050f8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){ // inidcates which adc is done running conversion and raises flag
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005108:	d102      	bne.n	8005110 <HAL_ADC_ConvCpltCallback+0x18>
		adc1_convert = 1;
 800510a:	4b08      	ldr	r3, [pc, #32]	; (800512c <HAL_ADC_ConvCpltCallback+0x34>)
 800510c:	2201      	movs	r2, #1
 800510e:	601a      	str	r2, [r3, #0]
	}
	if(hadc->Instance == ADC5){
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a06      	ldr	r2, [pc, #24]	; (8005130 <HAL_ADC_ConvCpltCallback+0x38>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d102      	bne.n	8005120 <HAL_ADC_ConvCpltCallback+0x28>
		adc5_convert = 1;
 800511a:	4b06      	ldr	r3, [pc, #24]	; (8005134 <HAL_ADC_ConvCpltCallback+0x3c>)
 800511c:	2201      	movs	r2, #1
 800511e:	601a      	str	r2, [r3, #0]
	}

}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	20000cb4 	.word	0x20000cb4
 8005130:	50000600 	.word	0x50000600
 8005134:	20000cb8 	.word	0x20000cb8

08005138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005138:	480d      	ldr	r0, [pc, #52]	; (8005170 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800513a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800513c:	f7ff fd2e 	bl	8004b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005140:	480c      	ldr	r0, [pc, #48]	; (8005174 <LoopForever+0x6>)
  ldr r1, =_edata
 8005142:	490d      	ldr	r1, [pc, #52]	; (8005178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005144:	4a0d      	ldr	r2, [pc, #52]	; (800517c <LoopForever+0xe>)
  movs r3, #0
 8005146:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005148:	e002      	b.n	8005150 <LoopCopyDataInit>

0800514a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800514a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800514c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800514e:	3304      	adds	r3, #4

08005150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005154:	d3f9      	bcc.n	800514a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005156:	4a0a      	ldr	r2, [pc, #40]	; (8005180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005158:	4c0a      	ldr	r4, [pc, #40]	; (8005184 <LoopForever+0x16>)
  movs r3, #0
 800515a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800515c:	e001      	b.n	8005162 <LoopFillZerobss>

0800515e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800515e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005160:	3204      	adds	r2, #4

08005162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005164:	d3fb      	bcc.n	800515e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005166:	f007 fa1f 	bl	800c5a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800516a:	f7fd fe99 	bl	8002ea0 <main>

0800516e <LoopForever>:

LoopForever:
    b LoopForever
 800516e:	e7fe      	b.n	800516e <LoopForever>
  ldr   r0, =_estack
 8005170:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005178:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800517c:	0800d0ec 	.word	0x0800d0ec
  ldr r2, =_sbss
 8005180:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8005184:	20000e2c 	.word	0x20000e2c

08005188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005188:	e7fe      	b.n	8005188 <ADC1_2_IRQHandler>

0800518a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005194:	2003      	movs	r0, #3
 8005196:	f001 fcb5 	bl	8006b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800519a:	200f      	movs	r0, #15
 800519c:	f000 f80e 	bl	80051bc <HAL_InitTick>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	71fb      	strb	r3, [r7, #7]
 80051aa:	e001      	b.n	80051b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80051ac:	f7fe fe6e 	bl	8003e8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80051b0:	79fb      	ldrb	r3, [r7, #7]

}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80051c8:	4b16      	ldr	r3, [pc, #88]	; (8005224 <HAL_InitTick+0x68>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d022      	beq.n	8005216 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80051d0:	4b15      	ldr	r3, [pc, #84]	; (8005228 <HAL_InitTick+0x6c>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4b13      	ldr	r3, [pc, #76]	; (8005224 <HAL_InitTick+0x68>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80051dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	4618      	mov	r0, r3
 80051e6:	f001 fcc0 	bl	8006b6a <HAL_SYSTICK_Config>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10f      	bne.n	8005210 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b0f      	cmp	r3, #15
 80051f4:	d809      	bhi.n	800520a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051f6:	2200      	movs	r2, #0
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	f04f 30ff 	mov.w	r0, #4294967295
 80051fe:	f001 fc8c 	bl	8006b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005202:	4a0a      	ldr	r2, [pc, #40]	; (800522c <HAL_InitTick+0x70>)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	e007      	b.n	800521a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	73fb      	strb	r3, [r7, #15]
 800520e:	e004      	b.n	800521a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	73fb      	strb	r3, [r7, #15]
 8005214:	e001      	b.n	800521a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800521a:	7bfb      	ldrb	r3, [r7, #15]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20000008 	.word	0x20000008
 8005228:	20000000 	.word	0x20000000
 800522c:	20000004 	.word	0x20000004

08005230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005234:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_IncTick+0x1c>)
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <HAL_IncTick+0x20>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4413      	add	r3, r2
 800523e:	4a03      	ldr	r2, [pc, #12]	; (800524c <HAL_IncTick+0x1c>)
 8005240:	6013      	str	r3, [r2, #0]
}
 8005242:	bf00      	nop
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	20000cdc 	.word	0x20000cdc
 8005250:	20000008 	.word	0x20000008

08005254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  return uwTick;
 8005258:	4b03      	ldr	r3, [pc, #12]	; (8005268 <HAL_GetTick+0x14>)
 800525a:	681b      	ldr	r3, [r3, #0]
}
 800525c:	4618      	mov	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000cdc 	.word	0x20000cdc

0800526c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005274:	f7ff ffee 	bl	8005254 <HAL_GetTick>
 8005278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d004      	beq.n	8005290 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_Delay+0x40>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005290:	bf00      	nop
 8005292:	f7ff ffdf 	bl	8005254 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d8f7      	bhi.n	8005292 <HAL_Delay+0x26>
  {
  }
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000008 	.word	0x20000008

080052b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	609a      	str	r2, [r3, #8]
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	609a      	str	r2, [r3, #8]
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3360      	adds	r3, #96	; 0x60
 800532a:	461a      	mov	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	4b08      	ldr	r3, [pc, #32]	; (800535c <LL_ADC_SetOffset+0x44>)
 800533a:	4013      	ands	r3, r2
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	4313      	orrs	r3, r2
 8005348:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	03fff000 	.word	0x03fff000

08005360 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3360      	adds	r3, #96	; 0x60
 800536e:	461a      	mov	r2, r3
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3360      	adds	r3, #96	; 0x60
 800539c:	461a      	mov	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b087      	sub	sp, #28
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3360      	adds	r3, #96	; 0x60
 80053d2:	461a      	mov	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80053ec:	bf00      	nop
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3360      	adds	r3, #96	; 0x60
 8005408:	461a      	mov	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	431a      	orrs	r2, r3
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	615a      	str	r2, [r3, #20]
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005468:	2301      	movs	r3, #1
 800546a:	e000      	b.n	800546e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800547a:	b480      	push	{r7}
 800547c:	b087      	sub	sp, #28
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3330      	adds	r3, #48	; 0x30
 800548a:	461a      	mov	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	0a1b      	lsrs	r3, r3, #8
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	f003 030c 	and.w	r3, r3, #12
 8005496:	4413      	add	r3, r2
 8005498:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f003 031f 	and.w	r3, r3, #31
 80054a4:	211f      	movs	r1, #31
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	43db      	mvns	r3, r3
 80054ac:	401a      	ands	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	0e9b      	lsrs	r3, r3, #26
 80054b2:	f003 011f 	and.w	r1, r3, #31
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	fa01 f303 	lsl.w	r3, r1, r3
 80054c0:	431a      	orrs	r2, r3
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b087      	sub	sp, #28
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3314      	adds	r3, #20
 80054e2:	461a      	mov	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	0e5b      	lsrs	r3, r3, #25
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	4413      	add	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	0d1b      	lsrs	r3, r3, #20
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	2107      	movs	r1, #7
 8005500:	fa01 f303 	lsl.w	r3, r1, r3
 8005504:	43db      	mvns	r3, r3
 8005506:	401a      	ands	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	0d1b      	lsrs	r3, r3, #20
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	fa01 f303 	lsl.w	r3, r1, r3
 8005516:	431a      	orrs	r2, r3
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005540:	43db      	mvns	r3, r3
 8005542:	401a      	ands	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f003 0318 	and.w	r3, r3, #24
 800554a:	4908      	ldr	r1, [pc, #32]	; (800556c <LL_ADC_SetChannelSingleDiff+0x44>)
 800554c:	40d9      	lsrs	r1, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	400b      	ands	r3, r1
 8005552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005556:	431a      	orrs	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800555e:	bf00      	nop
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	0007ffff 	.word	0x0007ffff

08005570 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 031f 	and.w	r3, r3, #31
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800559c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6093      	str	r3, [r2, #8]
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c4:	d101      	bne.n	80055ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80055e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005614:	d101      	bne.n	800561a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800563c:	f043 0201 	orr.w	r2, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <LL_ADC_IsEnabled+0x18>
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <LL_ADC_IsEnabled+0x1a>
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005686:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800568a:	f043 0204 	orr.w	r2, r3, #4
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d101      	bne.n	80056b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 0308 	and.w	r3, r3, #8
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d101      	bne.n	80056dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80056ec:	b590      	push	{r4, r7, lr}
 80056ee:	b089      	sub	sp, #36	; 0x24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e1a9      	b.n	8005a5a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7fe fbdd 	bl	8003ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff ff3f 	bl	80055b0 <LL_ADC_IsDeepPowerDownEnabled>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff ff25 	bl	800558c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff ff5a 	bl	8005600 <LL_ADC_IsInternalRegulatorEnabled>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d115      	bne.n	800577e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff ff3e 	bl	80055d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800575c:	4b9c      	ldr	r3, [pc, #624]	; (80059d0 <HAL_ADC_Init+0x2e4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	099b      	lsrs	r3, r3, #6
 8005762:	4a9c      	ldr	r2, [pc, #624]	; (80059d4 <HAL_ADC_Init+0x2e8>)
 8005764:	fba2 2303 	umull	r2, r3, r2, r3
 8005768:	099b      	lsrs	r3, r3, #6
 800576a:	3301      	adds	r3, #1
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005770:	e002      	b.n	8005778 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3b01      	subs	r3, #1
 8005776:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f9      	bne.n	8005772 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff ff3c 	bl	8005600 <LL_ADC_IsInternalRegulatorEnabled>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10d      	bne.n	80057aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005792:	f043 0210 	orr.w	r2, r3, #16
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579e:	f043 0201 	orr.w	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff ff75 	bl	800569e <LL_ADC_REG_IsConversionOngoing>
 80057b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f040 8142 	bne.w	8005a48 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f040 813e 	bne.w	8005a48 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80057d4:	f043 0202 	orr.w	r2, r3, #2
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff ff35 	bl	8005650 <LL_ADC_IsEnabled>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d141      	bne.n	8005870 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057f4:	d004      	beq.n	8005800 <HAL_ADC_Init+0x114>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a77      	ldr	r2, [pc, #476]	; (80059d8 <HAL_ADC_Init+0x2ec>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d10f      	bne.n	8005820 <HAL_ADC_Init+0x134>
 8005800:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005804:	f7ff ff24 	bl	8005650 <LL_ADC_IsEnabled>
 8005808:	4604      	mov	r4, r0
 800580a:	4873      	ldr	r0, [pc, #460]	; (80059d8 <HAL_ADC_Init+0x2ec>)
 800580c:	f7ff ff20 	bl	8005650 <LL_ADC_IsEnabled>
 8005810:	4603      	mov	r3, r0
 8005812:	4323      	orrs	r3, r4
 8005814:	2b00      	cmp	r3, #0
 8005816:	bf0c      	ite	eq
 8005818:	2301      	moveq	r3, #1
 800581a:	2300      	movne	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	e012      	b.n	8005846 <HAL_ADC_Init+0x15a>
 8005820:	486e      	ldr	r0, [pc, #440]	; (80059dc <HAL_ADC_Init+0x2f0>)
 8005822:	f7ff ff15 	bl	8005650 <LL_ADC_IsEnabled>
 8005826:	4604      	mov	r4, r0
 8005828:	486d      	ldr	r0, [pc, #436]	; (80059e0 <HAL_ADC_Init+0x2f4>)
 800582a:	f7ff ff11 	bl	8005650 <LL_ADC_IsEnabled>
 800582e:	4603      	mov	r3, r0
 8005830:	431c      	orrs	r4, r3
 8005832:	486c      	ldr	r0, [pc, #432]	; (80059e4 <HAL_ADC_Init+0x2f8>)
 8005834:	f7ff ff0c 	bl	8005650 <LL_ADC_IsEnabled>
 8005838:	4603      	mov	r3, r0
 800583a:	4323      	orrs	r3, r4
 800583c:	2b00      	cmp	r3, #0
 800583e:	bf0c      	ite	eq
 8005840:	2301      	moveq	r3, #1
 8005842:	2300      	movne	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d012      	beq.n	8005870 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005852:	d004      	beq.n	800585e <HAL_ADC_Init+0x172>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a5f      	ldr	r2, [pc, #380]	; (80059d8 <HAL_ADC_Init+0x2ec>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d101      	bne.n	8005862 <HAL_ADC_Init+0x176>
 800585e:	4a62      	ldr	r2, [pc, #392]	; (80059e8 <HAL_ADC_Init+0x2fc>)
 8005860:	e000      	b.n	8005864 <HAL_ADC_Init+0x178>
 8005862:	4a62      	ldr	r2, [pc, #392]	; (80059ec <HAL_ADC_Init+0x300>)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	4619      	mov	r1, r3
 800586a:	4610      	mov	r0, r2
 800586c:	f7ff fd20 	bl	80052b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	7f5b      	ldrb	r3, [r3, #29]
 8005874:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800587a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005880:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005886:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800588e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005890:	4313      	orrs	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800589a:	2b01      	cmp	r3, #1
 800589c:	d106      	bne.n	80058ac <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a2:	3b01      	subs	r3, #1
 80058a4:	045b      	lsls	r3, r3, #17
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	4b48      	ldr	r3, [pc, #288]	; (80059f0 <HAL_ADC_Init+0x304>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	69b9      	ldr	r1, [r7, #24]
 80058d8:	430b      	orrs	r3, r1
 80058da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff fee4 	bl	80056c4 <LL_ADC_INJ_IsConversionOngoing>
 80058fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d17f      	bne.n	8005a04 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d17c      	bne.n	8005a04 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800590e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005916:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005918:	4313      	orrs	r3, r2
 800591a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005926:	f023 0302 	bic.w	r3, r3, #2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	69b9      	ldr	r1, [r7, #24]
 8005930:	430b      	orrs	r3, r1
 8005932:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d017      	beq.n	800596c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800594a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005954:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005958:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6911      	ldr	r1, [r2, #16]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	430b      	orrs	r3, r1
 8005966:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800596a:	e013      	b.n	8005994 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691a      	ldr	r2, [r3, #16]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800597a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6812      	ldr	r2, [r2, #0]
 8005988:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800598c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005990:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800599a:	2b01      	cmp	r3, #1
 800599c:	d12a      	bne.n	80059f4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80059a8:	f023 0304 	bic.w	r3, r3, #4
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059b4:	4311      	orrs	r1, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80059ba:	4311      	orrs	r1, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059c0:	430a      	orrs	r2, r1
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0201 	orr.w	r2, r2, #1
 80059cc:	611a      	str	r2, [r3, #16]
 80059ce:	e019      	b.n	8005a04 <HAL_ADC_Init+0x318>
 80059d0:	20000000 	.word	0x20000000
 80059d4:	053e2d63 	.word	0x053e2d63
 80059d8:	50000100 	.word	0x50000100
 80059dc:	50000400 	.word	0x50000400
 80059e0:	50000500 	.word	0x50000500
 80059e4:	50000600 	.word	0x50000600
 80059e8:	50000300 	.word	0x50000300
 80059ec:	50000700 	.word	0x50000700
 80059f0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0201 	bic.w	r2, r2, #1
 8005a02:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d10c      	bne.n	8005a26 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	f023 010f 	bic.w	r1, r3, #15
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	1e5a      	subs	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	631a      	str	r2, [r3, #48]	; 0x30
 8005a24:	e007      	b.n	8005a36 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 020f 	bic.w	r2, r2, #15
 8005a34:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3a:	f023 0303 	bic.w	r3, r3, #3
 8005a3e:	f043 0201 	orr.w	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a46:	e007      	b.n	8005a58 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4c:	f043 0210 	orr.w	r2, r3, #16
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a58:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3724      	adds	r7, #36	; 0x24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd90      	pop	{r4, r7, pc}
 8005a62:	bf00      	nop

08005a64 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a78:	d004      	beq.n	8005a84 <HAL_ADC_Start_DMA+0x20>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a5a      	ldr	r2, [pc, #360]	; (8005be8 <HAL_ADC_Start_DMA+0x184>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d101      	bne.n	8005a88 <HAL_ADC_Start_DMA+0x24>
 8005a84:	4b59      	ldr	r3, [pc, #356]	; (8005bec <HAL_ADC_Start_DMA+0x188>)
 8005a86:	e000      	b.n	8005a8a <HAL_ADC_Start_DMA+0x26>
 8005a88:	4b59      	ldr	r3, [pc, #356]	; (8005bf0 <HAL_ADC_Start_DMA+0x18c>)
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff fd70 	bl	8005570 <LL_ADC_GetMultimode>
 8005a90:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7ff fe01 	bl	800569e <LL_ADC_REG_IsConversionOngoing>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f040 809b 	bne.w	8005bda <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_ADC_Start_DMA+0x4e>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e096      	b.n	8005be0 <HAL_ADC_Start_DMA+0x17c>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a4d      	ldr	r2, [pc, #308]	; (8005bf4 <HAL_ADC_Start_DMA+0x190>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d008      	beq.n	8005ad6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b05      	cmp	r3, #5
 8005ace:	d002      	beq.n	8005ad6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2b09      	cmp	r3, #9
 8005ad4:	d17a      	bne.n	8005bcc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 fcec 	bl	80064b4 <ADC_Enable>
 8005adc:	4603      	mov	r3, r0
 8005ade:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d16d      	bne.n	8005bc2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005aee:	f023 0301 	bic.w	r3, r3, #1
 8005af2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a3a      	ldr	r2, [pc, #232]	; (8005be8 <HAL_ADC_Start_DMA+0x184>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d009      	beq.n	8005b18 <HAL_ADC_Start_DMA+0xb4>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a3b      	ldr	r2, [pc, #236]	; (8005bf8 <HAL_ADC_Start_DMA+0x194>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d002      	beq.n	8005b14 <HAL_ADC_Start_DMA+0xb0>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	e003      	b.n	8005b1c <HAL_ADC_Start_DMA+0xb8>
 8005b14:	4b39      	ldr	r3, [pc, #228]	; (8005bfc <HAL_ADC_Start_DMA+0x198>)
 8005b16:	e001      	b.n	8005b1c <HAL_ADC_Start_DMA+0xb8>
 8005b18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d002      	beq.n	8005b2a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d105      	bne.n	8005b36 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d006      	beq.n	8005b50 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b46:	f023 0206 	bic.w	r2, r3, #6
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	661a      	str	r2, [r3, #96]	; 0x60
 8005b4e:	e002      	b.n	8005b56 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5a:	4a29      	ldr	r2, [pc, #164]	; (8005c00 <HAL_ADC_Start_DMA+0x19c>)
 8005b5c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b62:	4a28      	ldr	r2, [pc, #160]	; (8005c04 <HAL_ADC_Start_DMA+0x1a0>)
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6a:	4a27      	ldr	r2, [pc, #156]	; (8005c08 <HAL_ADC_Start_DMA+0x1a4>)
 8005b6c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	221c      	movs	r2, #28
 8005b74:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0210 	orr.w	r2, r2, #16
 8005b8c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3340      	adds	r3, #64	; 0x40
 8005ba8:	4619      	mov	r1, r3
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f001 f891 	bl	8006cd4 <HAL_DMA_Start_IT>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fd5b 	bl	8005676 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005bc0:	e00d      	b.n	8005bde <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005bca:	e008      	b.n	8005bde <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005bd8:	e001      	b.n	8005bde <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005bda:	2302      	movs	r3, #2
 8005bdc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	50000100 	.word	0x50000100
 8005bec:	50000300 	.word	0x50000300
 8005bf0:	50000700 	.word	0x50000700
 8005bf4:	50000600 	.word	0x50000600
 8005bf8:	50000500 	.word	0x50000500
 8005bfc:	50000400 	.word	0x50000400
 8005c00:	080065e1 	.word	0x080065e1
 8005c04:	080066b9 	.word	0x080066b9
 8005c08:	080066d5 	.word	0x080066d5

08005c0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b0b6      	sub	sp, #216	; 0xd8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d102      	bne.n	8005c58 <HAL_ADC_ConfigChannel+0x24>
 8005c52:	2302      	movs	r3, #2
 8005c54:	f000 bc13 	b.w	800647e <HAL_ADC_ConfigChannel+0x84a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff fd1a 	bl	800569e <LL_ADC_REG_IsConversionOngoing>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f040 83f3 	bne.w	8006458 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6859      	ldr	r1, [r3, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f7ff fbfb 	bl	800547a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff fd08 	bl	800569e <LL_ADC_REG_IsConversionOngoing>
 8005c8e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff fd14 	bl	80056c4 <LL_ADC_INJ_IsConversionOngoing>
 8005c9c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ca0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f040 81d9 	bne.w	800605c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005caa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f040 81d4 	bne.w	800605c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cbc:	d10f      	bne.n	8005cde <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	4619      	mov	r1, r3
 8005cca:	f7ff fc02 	bl	80054d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff fba9 	bl	800542e <LL_ADC_SetSamplingTimeCommonConfig>
 8005cdc:	e00e      	b.n	8005cfc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	6819      	ldr	r1, [r3, #0]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	461a      	mov	r2, r3
 8005cec:	f7ff fbf1 	bl	80054d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fb99 	bl	800542e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695a      	ldr	r2, [r3, #20]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	08db      	lsrs	r3, r3, #3
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d022      	beq.n	8005d64 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6818      	ldr	r0, [r3, #0]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	6919      	ldr	r1, [r3, #16]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d2e:	f7ff faf3 	bl	8005318 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6919      	ldr	r1, [r3, #16]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f7ff fb3f 	bl	80053c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d102      	bne.n	8005d5a <HAL_ADC_ConfigChannel+0x126>
 8005d54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d58:	e000      	b.n	8005d5c <HAL_ADC_ConfigChannel+0x128>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	f7ff fb4b 	bl	80053f8 <LL_ADC_SetOffsetSaturation>
 8005d62:	e17b      	b.n	800605c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff faf8 	bl	8005360 <LL_ADC_GetOffsetChannel>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10a      	bne.n	8005d90 <HAL_ADC_ConfigChannel+0x15c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff faed 	bl	8005360 <LL_ADC_GetOffsetChannel>
 8005d86:	4603      	mov	r3, r0
 8005d88:	0e9b      	lsrs	r3, r3, #26
 8005d8a:	f003 021f 	and.w	r2, r3, #31
 8005d8e:	e01e      	b.n	8005dce <HAL_ADC_ConfigChannel+0x19a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2100      	movs	r1, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fae2 	bl	8005360 <LL_ADC_GetOffsetChannel>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005da6:	fa93 f3a3 	rbit	r3, r3
 8005daa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005dae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005db2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005db6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005dbe:	2320      	movs	r3, #32
 8005dc0:	e004      	b.n	8005dcc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005dc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dc6:	fab3 f383 	clz	r3, r3
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d105      	bne.n	8005de6 <HAL_ADC_ConfigChannel+0x1b2>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	0e9b      	lsrs	r3, r3, #26
 8005de0:	f003 031f 	and.w	r3, r3, #31
 8005de4:	e018      	b.n	8005e18 <HAL_ADC_ConfigChannel+0x1e4>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005df2:	fa93 f3a3 	rbit	r3, r3
 8005df6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005e02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005e0a:	2320      	movs	r3, #32
 8005e0c:	e004      	b.n	8005e18 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005e0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e12:	fab3 f383 	clz	r3, r3
 8005e16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d106      	bne.n	8005e2a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2200      	movs	r2, #0
 8005e22:	2100      	movs	r1, #0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fab1 	bl	800538c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2101      	movs	r1, #1
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fa95 	bl	8005360 <LL_ADC_GetOffsetChannel>
 8005e36:	4603      	mov	r3, r0
 8005e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10a      	bne.n	8005e56 <HAL_ADC_ConfigChannel+0x222>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2101      	movs	r1, #1
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fa8a 	bl	8005360 <LL_ADC_GetOffsetChannel>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	0e9b      	lsrs	r3, r3, #26
 8005e50:	f003 021f 	and.w	r2, r3, #31
 8005e54:	e01e      	b.n	8005e94 <HAL_ADC_ConfigChannel+0x260>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff fa7f 	bl	8005360 <LL_ADC_GetOffsetChannel>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e6c:	fa93 f3a3 	rbit	r3, r3
 8005e70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005e74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005e7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005e84:	2320      	movs	r3, #32
 8005e86:	e004      	b.n	8005e92 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005e88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e8c:	fab3 f383 	clz	r3, r3
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d105      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x278>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	0e9b      	lsrs	r3, r3, #26
 8005ea6:	f003 031f 	and.w	r3, r3, #31
 8005eaa:	e018      	b.n	8005ede <HAL_ADC_ConfigChannel+0x2aa>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005eb8:	fa93 f3a3 	rbit	r3, r3
 8005ebc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005ec0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005ed0:	2320      	movs	r3, #32
 8005ed2:	e004      	b.n	8005ede <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ed8:	fab3 f383 	clz	r3, r3
 8005edc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d106      	bne.n	8005ef0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2101      	movs	r1, #1
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fa4e 	bl	800538c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff fa32 	bl	8005360 <LL_ADC_GetOffsetChannel>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <HAL_ADC_ConfigChannel+0x2e8>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2102      	movs	r1, #2
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff fa27 	bl	8005360 <LL_ADC_GetOffsetChannel>
 8005f12:	4603      	mov	r3, r0
 8005f14:	0e9b      	lsrs	r3, r3, #26
 8005f16:	f003 021f 	and.w	r2, r3, #31
 8005f1a:	e01e      	b.n	8005f5a <HAL_ADC_ConfigChannel+0x326>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2102      	movs	r1, #2
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff fa1c 	bl	8005360 <LL_ADC_GetOffsetChannel>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f32:	fa93 f3a3 	rbit	r3, r3
 8005f36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005f3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005f42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005f4a:	2320      	movs	r3, #32
 8005f4c:	e004      	b.n	8005f58 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005f4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f52:	fab3 f383 	clz	r3, r3
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d105      	bne.n	8005f72 <HAL_ADC_ConfigChannel+0x33e>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	0e9b      	lsrs	r3, r3, #26
 8005f6c:	f003 031f 	and.w	r3, r3, #31
 8005f70:	e016      	b.n	8005fa0 <HAL_ADC_ConfigChannel+0x36c>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f7e:	fa93 f3a3 	rbit	r3, r3
 8005f82:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005f84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005f92:	2320      	movs	r3, #32
 8005f94:	e004      	b.n	8005fa0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f9a:	fab3 f383 	clz	r3, r3
 8005f9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d106      	bne.n	8005fb2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2102      	movs	r1, #2
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff f9ed 	bl	800538c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2103      	movs	r1, #3
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff f9d1 	bl	8005360 <LL_ADC_GetOffsetChannel>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10a      	bne.n	8005fde <HAL_ADC_ConfigChannel+0x3aa>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2103      	movs	r1, #3
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff f9c6 	bl	8005360 <LL_ADC_GetOffsetChannel>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	0e9b      	lsrs	r3, r3, #26
 8005fd8:	f003 021f 	and.w	r2, r3, #31
 8005fdc:	e017      	b.n	800600e <HAL_ADC_ConfigChannel+0x3da>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2103      	movs	r1, #3
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7ff f9bb 	bl	8005360 <LL_ADC_GetOffsetChannel>
 8005fea:	4603      	mov	r3, r0
 8005fec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ff0:	fa93 f3a3 	rbit	r3, r3
 8005ff4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ff8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006000:	2320      	movs	r3, #32
 8006002:	e003      	b.n	800600c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006006:	fab3 f383 	clz	r3, r3
 800600a:	b2db      	uxtb	r3, r3
 800600c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006016:	2b00      	cmp	r3, #0
 8006018:	d105      	bne.n	8006026 <HAL_ADC_ConfigChannel+0x3f2>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	0e9b      	lsrs	r3, r3, #26
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	e011      	b.n	800604a <HAL_ADC_ConfigChannel+0x416>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800602e:	fa93 f3a3 	rbit	r3, r3
 8006032:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006036:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800603e:	2320      	movs	r3, #32
 8006040:	e003      	b.n	800604a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006044:	fab3 f383 	clz	r3, r3
 8006048:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800604a:	429a      	cmp	r2, r3
 800604c:	d106      	bne.n	800605c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2200      	movs	r2, #0
 8006054:	2103      	movs	r1, #3
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff f998 	bl	800538c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff faf5 	bl	8005650 <LL_ADC_IsEnabled>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	f040 813d 	bne.w	80062e8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6818      	ldr	r0, [r3, #0]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	6819      	ldr	r1, [r3, #0]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	461a      	mov	r2, r3
 800607c:	f7ff fa54 	bl	8005528 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	4aa2      	ldr	r2, [pc, #648]	; (8006310 <HAL_ADC_ConfigChannel+0x6dc>)
 8006086:	4293      	cmp	r3, r2
 8006088:	f040 812e 	bne.w	80062e8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10b      	bne.n	80060b4 <HAL_ADC_ConfigChannel+0x480>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	0e9b      	lsrs	r3, r3, #26
 80060a2:	3301      	adds	r3, #1
 80060a4:	f003 031f 	and.w	r3, r3, #31
 80060a8:	2b09      	cmp	r3, #9
 80060aa:	bf94      	ite	ls
 80060ac:	2301      	movls	r3, #1
 80060ae:	2300      	movhi	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	e019      	b.n	80060e8 <HAL_ADC_ConfigChannel+0x4b4>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060bc:	fa93 f3a3 	rbit	r3, r3
 80060c0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80060c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80060c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80060cc:	2320      	movs	r3, #32
 80060ce:	e003      	b.n	80060d8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80060d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060d2:	fab3 f383 	clz	r3, r3
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	3301      	adds	r3, #1
 80060da:	f003 031f 	and.w	r3, r3, #31
 80060de:	2b09      	cmp	r3, #9
 80060e0:	bf94      	ite	ls
 80060e2:	2301      	movls	r3, #1
 80060e4:	2300      	movhi	r3, #0
 80060e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d079      	beq.n	80061e0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d107      	bne.n	8006108 <HAL_ADC_ConfigChannel+0x4d4>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	0e9b      	lsrs	r3, r3, #26
 80060fe:	3301      	adds	r3, #1
 8006100:	069b      	lsls	r3, r3, #26
 8006102:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006106:	e015      	b.n	8006134 <HAL_ADC_ConfigChannel+0x500>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800610e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006110:	fa93 f3a3 	rbit	r3, r3
 8006114:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006118:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800611a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006120:	2320      	movs	r3, #32
 8006122:	e003      	b.n	800612c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006126:	fab3 f383 	clz	r3, r3
 800612a:	b2db      	uxtb	r3, r3
 800612c:	3301      	adds	r3, #1
 800612e:	069b      	lsls	r3, r3, #26
 8006130:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800613c:	2b00      	cmp	r3, #0
 800613e:	d109      	bne.n	8006154 <HAL_ADC_ConfigChannel+0x520>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	0e9b      	lsrs	r3, r3, #26
 8006146:	3301      	adds	r3, #1
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	2101      	movs	r1, #1
 800614e:	fa01 f303 	lsl.w	r3, r1, r3
 8006152:	e017      	b.n	8006184 <HAL_ADC_ConfigChannel+0x550>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615c:	fa93 f3a3 	rbit	r3, r3
 8006160:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006164:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800616c:	2320      	movs	r3, #32
 800616e:	e003      	b.n	8006178 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006172:	fab3 f383 	clz	r3, r3
 8006176:	b2db      	uxtb	r3, r3
 8006178:	3301      	adds	r3, #1
 800617a:	f003 031f 	and.w	r3, r3, #31
 800617e:	2101      	movs	r1, #1
 8006180:	fa01 f303 	lsl.w	r3, r1, r3
 8006184:	ea42 0103 	orr.w	r1, r2, r3
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <HAL_ADC_ConfigChannel+0x576>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	0e9b      	lsrs	r3, r3, #26
 800619a:	3301      	adds	r3, #1
 800619c:	f003 021f 	and.w	r2, r3, #31
 80061a0:	4613      	mov	r3, r2
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	4413      	add	r3, r2
 80061a6:	051b      	lsls	r3, r3, #20
 80061a8:	e018      	b.n	80061dc <HAL_ADC_ConfigChannel+0x5a8>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	fa93 f3a3 	rbit	r3, r3
 80061b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80061b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80061bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80061c2:	2320      	movs	r3, #32
 80061c4:	e003      	b.n	80061ce <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80061c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c8:	fab3 f383 	clz	r3, r3
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	3301      	adds	r3, #1
 80061d0:	f003 021f 	and.w	r2, r3, #31
 80061d4:	4613      	mov	r3, r2
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	4413      	add	r3, r2
 80061da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061dc:	430b      	orrs	r3, r1
 80061de:	e07e      	b.n	80062de <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d107      	bne.n	80061fc <HAL_ADC_ConfigChannel+0x5c8>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	0e9b      	lsrs	r3, r3, #26
 80061f2:	3301      	adds	r3, #1
 80061f4:	069b      	lsls	r3, r3, #26
 80061f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061fa:	e015      	b.n	8006228 <HAL_ADC_ConfigChannel+0x5f4>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006204:	fa93 f3a3 	rbit	r3, r3
 8006208:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006214:	2320      	movs	r3, #32
 8006216:	e003      	b.n	8006220 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	fab3 f383 	clz	r3, r3
 800621e:	b2db      	uxtb	r3, r3
 8006220:	3301      	adds	r3, #1
 8006222:	069b      	lsls	r3, r3, #26
 8006224:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006230:	2b00      	cmp	r3, #0
 8006232:	d109      	bne.n	8006248 <HAL_ADC_ConfigChannel+0x614>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	0e9b      	lsrs	r3, r3, #26
 800623a:	3301      	adds	r3, #1
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	2101      	movs	r1, #1
 8006242:	fa01 f303 	lsl.w	r3, r1, r3
 8006246:	e017      	b.n	8006278 <HAL_ADC_ConfigChannel+0x644>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	fa93 f3a3 	rbit	r3, r3
 8006254:	61fb      	str	r3, [r7, #28]
  return result;
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006260:	2320      	movs	r3, #32
 8006262:	e003      	b.n	800626c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	fab3 f383 	clz	r3, r3
 800626a:	b2db      	uxtb	r3, r3
 800626c:	3301      	adds	r3, #1
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	2101      	movs	r1, #1
 8006274:	fa01 f303 	lsl.w	r3, r1, r3
 8006278:	ea42 0103 	orr.w	r1, r2, r3
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10d      	bne.n	80062a4 <HAL_ADC_ConfigChannel+0x670>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	0e9b      	lsrs	r3, r3, #26
 800628e:	3301      	adds	r3, #1
 8006290:	f003 021f 	and.w	r2, r3, #31
 8006294:	4613      	mov	r3, r2
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	4413      	add	r3, r2
 800629a:	3b1e      	subs	r3, #30
 800629c:	051b      	lsls	r3, r3, #20
 800629e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80062a2:	e01b      	b.n	80062dc <HAL_ADC_ConfigChannel+0x6a8>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	fa93 f3a3 	rbit	r3, r3
 80062b0:	613b      	str	r3, [r7, #16]
  return result;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80062bc:	2320      	movs	r3, #32
 80062be:	e003      	b.n	80062c8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	fab3 f383 	clz	r3, r3
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	3301      	adds	r3, #1
 80062ca:	f003 021f 	and.w	r2, r3, #31
 80062ce:	4613      	mov	r3, r2
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	4413      	add	r3, r2
 80062d4:	3b1e      	subs	r3, #30
 80062d6:	051b      	lsls	r3, r3, #20
 80062d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062e2:	4619      	mov	r1, r3
 80062e4:	f7ff f8f5 	bl	80054d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	4b09      	ldr	r3, [pc, #36]	; (8006314 <HAL_ADC_ConfigChannel+0x6e0>)
 80062ee:	4013      	ands	r3, r2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80be 	beq.w	8006472 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062fe:	d004      	beq.n	800630a <HAL_ADC_ConfigChannel+0x6d6>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a04      	ldr	r2, [pc, #16]	; (8006318 <HAL_ADC_ConfigChannel+0x6e4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d10a      	bne.n	8006320 <HAL_ADC_ConfigChannel+0x6ec>
 800630a:	4b04      	ldr	r3, [pc, #16]	; (800631c <HAL_ADC_ConfigChannel+0x6e8>)
 800630c:	e009      	b.n	8006322 <HAL_ADC_ConfigChannel+0x6ee>
 800630e:	bf00      	nop
 8006310:	407f0000 	.word	0x407f0000
 8006314:	80080000 	.word	0x80080000
 8006318:	50000100 	.word	0x50000100
 800631c:	50000300 	.word	0x50000300
 8006320:	4b59      	ldr	r3, [pc, #356]	; (8006488 <HAL_ADC_ConfigChannel+0x854>)
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe ffea 	bl	80052fc <LL_ADC_GetCommonPathInternalCh>
 8006328:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a56      	ldr	r2, [pc, #344]	; (800648c <HAL_ADC_ConfigChannel+0x858>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d004      	beq.n	8006340 <HAL_ADC_ConfigChannel+0x70c>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a55      	ldr	r2, [pc, #340]	; (8006490 <HAL_ADC_ConfigChannel+0x85c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d13a      	bne.n	80063b6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006340:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006344:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d134      	bne.n	80063b6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006354:	d005      	beq.n	8006362 <HAL_ADC_ConfigChannel+0x72e>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a4e      	ldr	r2, [pc, #312]	; (8006494 <HAL_ADC_ConfigChannel+0x860>)
 800635c:	4293      	cmp	r3, r2
 800635e:	f040 8085 	bne.w	800646c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800636a:	d004      	beq.n	8006376 <HAL_ADC_ConfigChannel+0x742>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a49      	ldr	r2, [pc, #292]	; (8006498 <HAL_ADC_ConfigChannel+0x864>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d101      	bne.n	800637a <HAL_ADC_ConfigChannel+0x746>
 8006376:	4a49      	ldr	r2, [pc, #292]	; (800649c <HAL_ADC_ConfigChannel+0x868>)
 8006378:	e000      	b.n	800637c <HAL_ADC_ConfigChannel+0x748>
 800637a:	4a43      	ldr	r2, [pc, #268]	; (8006488 <HAL_ADC_ConfigChannel+0x854>)
 800637c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006380:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f7fe ffa5 	bl	80052d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800638c:	4b44      	ldr	r3, [pc, #272]	; (80064a0 <HAL_ADC_ConfigChannel+0x86c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	099b      	lsrs	r3, r3, #6
 8006392:	4a44      	ldr	r2, [pc, #272]	; (80064a4 <HAL_ADC_ConfigChannel+0x870>)
 8006394:	fba2 2303 	umull	r2, r3, r2, r3
 8006398:	099b      	lsrs	r3, r3, #6
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	4613      	mov	r3, r2
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80063a6:	e002      	b.n	80063ae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f9      	bne.n	80063a8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80063b4:	e05a      	b.n	800646c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a3b      	ldr	r2, [pc, #236]	; (80064a8 <HAL_ADC_ConfigChannel+0x874>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d125      	bne.n	800640c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80063c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d11f      	bne.n	800640c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a31      	ldr	r2, [pc, #196]	; (8006498 <HAL_ADC_ConfigChannel+0x864>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d104      	bne.n	80063e0 <HAL_ADC_ConfigChannel+0x7ac>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a34      	ldr	r2, [pc, #208]	; (80064ac <HAL_ADC_ConfigChannel+0x878>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d047      	beq.n	8006470 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063e8:	d004      	beq.n	80063f4 <HAL_ADC_ConfigChannel+0x7c0>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a2a      	ldr	r2, [pc, #168]	; (8006498 <HAL_ADC_ConfigChannel+0x864>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d101      	bne.n	80063f8 <HAL_ADC_ConfigChannel+0x7c4>
 80063f4:	4a29      	ldr	r2, [pc, #164]	; (800649c <HAL_ADC_ConfigChannel+0x868>)
 80063f6:	e000      	b.n	80063fa <HAL_ADC_ConfigChannel+0x7c6>
 80063f8:	4a23      	ldr	r2, [pc, #140]	; (8006488 <HAL_ADC_ConfigChannel+0x854>)
 80063fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006402:	4619      	mov	r1, r3
 8006404:	4610      	mov	r0, r2
 8006406:	f7fe ff66 	bl	80052d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800640a:	e031      	b.n	8006470 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a27      	ldr	r2, [pc, #156]	; (80064b0 <HAL_ADC_ConfigChannel+0x87c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d12d      	bne.n	8006472 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006416:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800641a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d127      	bne.n	8006472 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a1c      	ldr	r2, [pc, #112]	; (8006498 <HAL_ADC_ConfigChannel+0x864>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d022      	beq.n	8006472 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006434:	d004      	beq.n	8006440 <HAL_ADC_ConfigChannel+0x80c>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a17      	ldr	r2, [pc, #92]	; (8006498 <HAL_ADC_ConfigChannel+0x864>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d101      	bne.n	8006444 <HAL_ADC_ConfigChannel+0x810>
 8006440:	4a16      	ldr	r2, [pc, #88]	; (800649c <HAL_ADC_ConfigChannel+0x868>)
 8006442:	e000      	b.n	8006446 <HAL_ADC_ConfigChannel+0x812>
 8006444:	4a10      	ldr	r2, [pc, #64]	; (8006488 <HAL_ADC_ConfigChannel+0x854>)
 8006446:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800644a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800644e:	4619      	mov	r1, r3
 8006450:	4610      	mov	r0, r2
 8006452:	f7fe ff40 	bl	80052d6 <LL_ADC_SetCommonPathInternalCh>
 8006456:	e00c      	b.n	8006472 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645c:	f043 0220 	orr.w	r2, r3, #32
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800646a:	e002      	b.n	8006472 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800646c:	bf00      	nop
 800646e:	e000      	b.n	8006472 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006470:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800647a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800647e:	4618      	mov	r0, r3
 8006480:	37d8      	adds	r7, #216	; 0xd8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	50000700 	.word	0x50000700
 800648c:	c3210000 	.word	0xc3210000
 8006490:	90c00010 	.word	0x90c00010
 8006494:	50000600 	.word	0x50000600
 8006498:	50000100 	.word	0x50000100
 800649c:	50000300 	.word	0x50000300
 80064a0:	20000000 	.word	0x20000000
 80064a4:	053e2d63 	.word	0x053e2d63
 80064a8:	c7520000 	.word	0xc7520000
 80064ac:	50000500 	.word	0x50000500
 80064b0:	cb840000 	.word	0xcb840000

080064b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80064bc:	2300      	movs	r3, #0
 80064be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff f8c3 	bl	8005650 <LL_ADC_IsEnabled>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d176      	bne.n	80065be <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	4b3c      	ldr	r3, [pc, #240]	; (80065c8 <ADC_Enable+0x114>)
 80064d8:	4013      	ands	r3, r2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00d      	beq.n	80064fa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e2:	f043 0210 	orr.w	r2, r3, #16
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ee:	f043 0201 	orr.w	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e062      	b.n	80065c0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff f892 	bl	8005628 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800650c:	d004      	beq.n	8006518 <ADC_Enable+0x64>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a2e      	ldr	r2, [pc, #184]	; (80065cc <ADC_Enable+0x118>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d101      	bne.n	800651c <ADC_Enable+0x68>
 8006518:	4b2d      	ldr	r3, [pc, #180]	; (80065d0 <ADC_Enable+0x11c>)
 800651a:	e000      	b.n	800651e <ADC_Enable+0x6a>
 800651c:	4b2d      	ldr	r3, [pc, #180]	; (80065d4 <ADC_Enable+0x120>)
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe feec 	bl	80052fc <LL_ADC_GetCommonPathInternalCh>
 8006524:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800652a:	2b00      	cmp	r3, #0
 800652c:	d013      	beq.n	8006556 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800652e:	4b2a      	ldr	r3, [pc, #168]	; (80065d8 <ADC_Enable+0x124>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	099b      	lsrs	r3, r3, #6
 8006534:	4a29      	ldr	r2, [pc, #164]	; (80065dc <ADC_Enable+0x128>)
 8006536:	fba2 2303 	umull	r2, r3, r2, r3
 800653a:	099b      	lsrs	r3, r3, #6
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	4613      	mov	r3, r2
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006548:	e002      	b.n	8006550 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	3b01      	subs	r3, #1
 800654e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1f9      	bne.n	800654a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006556:	f7fe fe7d 	bl	8005254 <HAL_GetTick>
 800655a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800655c:	e028      	b.n	80065b0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff f874 	bl	8005650 <LL_ADC_IsEnabled>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d104      	bne.n	8006578 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f7ff f858 	bl	8005628 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006578:	f7fe fe6c 	bl	8005254 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d914      	bls.n	80065b0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b01      	cmp	r3, #1
 8006592:	d00d      	beq.n	80065b0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006598:	f043 0210 	orr.w	r2, r3, #16
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a4:	f043 0201 	orr.w	r2, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e007      	b.n	80065c0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d1cf      	bne.n	800655e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	8000003f 	.word	0x8000003f
 80065cc:	50000100 	.word	0x50000100
 80065d0:	50000300 	.word	0x50000300
 80065d4:	50000700 	.word	0x50000700
 80065d8:	20000000 	.word	0x20000000
 80065dc:	053e2d63 	.word	0x053e2d63

080065e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d14b      	bne.n	8006692 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0308 	and.w	r3, r3, #8
 8006610:	2b00      	cmp	r3, #0
 8006612:	d021      	beq.n	8006658 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f7fe ff1b 	bl	8005454 <LL_ADC_REG_IsTriggerSourceSWStart>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d032      	beq.n	800668a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d12b      	bne.n	800668a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d11f      	bne.n	800668a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664e:	f043 0201 	orr.w	r2, r3, #1
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	65da      	str	r2, [r3, #92]	; 0x5c
 8006656:	e018      	b.n	800668a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d111      	bne.n	800668a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d105      	bne.n	800668a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006682:	f043 0201 	orr.w	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7fe fd34 	bl	80050f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006690:	e00e      	b.n	80066b0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7ff fabe 	bl	8005c20 <HAL_ADC_ErrorCallback>
}
 80066a4:	e004      	b.n	80066b0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
}
 80066b0:	bf00      	nop
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f7ff faa0 	bl	8005c0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066cc:	bf00      	nop
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f2:	f043 0204 	orr.w	r2, r3, #4
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7ff fa90 	bl	8005c20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006700:	bf00      	nop
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <LL_ADC_IsEnabled>:
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <LL_ADC_IsEnabled+0x18>
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <LL_ADC_IsEnabled+0x1a>
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <LL_ADC_REG_IsConversionOngoing>:
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b04      	cmp	r3, #4
 8006740:	d101      	bne.n	8006746 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006754:	b590      	push	{r4, r7, lr}
 8006756:	b0a1      	sub	sp, #132	; 0x84
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800676e:	2302      	movs	r3, #2
 8006770:	e0e7      	b.n	8006942 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800677a:	2300      	movs	r3, #0
 800677c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800677e:	2300      	movs	r3, #0
 8006780:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800678a:	d102      	bne.n	8006792 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800678c:	4b6f      	ldr	r3, [pc, #444]	; (800694c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800678e:	60bb      	str	r3, [r7, #8]
 8006790:	e009      	b.n	80067a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a6e      	ldr	r2, [pc, #440]	; (8006950 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d102      	bne.n	80067a2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800679c:	4b6d      	ldr	r3, [pc, #436]	; (8006954 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	e001      	b.n	80067a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80067a2:	2300      	movs	r3, #0
 80067a4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10b      	bne.n	80067c4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b0:	f043 0220 	orr.w	r2, r3, #32
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0be      	b.n	8006942 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff ffb1 	bl	800672e <LL_ADC_REG_IsConversionOngoing>
 80067cc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff ffab 	bl	800672e <LL_ADC_REG_IsConversionOngoing>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f040 80a0 	bne.w	8006920 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80067e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f040 809c 	bne.w	8006920 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067f0:	d004      	beq.n	80067fc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a55      	ldr	r2, [pc, #340]	; (800694c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d101      	bne.n	8006800 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80067fc:	4b56      	ldr	r3, [pc, #344]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80067fe:	e000      	b.n	8006802 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006800:	4b56      	ldr	r3, [pc, #344]	; (800695c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006802:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d04b      	beq.n	80068a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800680c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	6859      	ldr	r1, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800681e:	035b      	lsls	r3, r3, #13
 8006820:	430b      	orrs	r3, r1
 8006822:	431a      	orrs	r2, r3
 8006824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006826:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006830:	d004      	beq.n	800683c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a45      	ldr	r2, [pc, #276]	; (800694c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d10f      	bne.n	800685c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800683c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006840:	f7ff ff62 	bl	8006708 <LL_ADC_IsEnabled>
 8006844:	4604      	mov	r4, r0
 8006846:	4841      	ldr	r0, [pc, #260]	; (800694c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006848:	f7ff ff5e 	bl	8006708 <LL_ADC_IsEnabled>
 800684c:	4603      	mov	r3, r0
 800684e:	4323      	orrs	r3, r4
 8006850:	2b00      	cmp	r3, #0
 8006852:	bf0c      	ite	eq
 8006854:	2301      	moveq	r3, #1
 8006856:	2300      	movne	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	e012      	b.n	8006882 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800685c:	483c      	ldr	r0, [pc, #240]	; (8006950 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800685e:	f7ff ff53 	bl	8006708 <LL_ADC_IsEnabled>
 8006862:	4604      	mov	r4, r0
 8006864:	483b      	ldr	r0, [pc, #236]	; (8006954 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006866:	f7ff ff4f 	bl	8006708 <LL_ADC_IsEnabled>
 800686a:	4603      	mov	r3, r0
 800686c:	431c      	orrs	r4, r3
 800686e:	483c      	ldr	r0, [pc, #240]	; (8006960 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006870:	f7ff ff4a 	bl	8006708 <LL_ADC_IsEnabled>
 8006874:	4603      	mov	r3, r0
 8006876:	4323      	orrs	r3, r4
 8006878:	2b00      	cmp	r3, #0
 800687a:	bf0c      	ite	eq
 800687c:	2301      	moveq	r3, #1
 800687e:	2300      	movne	r3, #0
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d056      	beq.n	8006934 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800688e:	f023 030f 	bic.w	r3, r3, #15
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	6811      	ldr	r1, [r2, #0]
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	6892      	ldr	r2, [r2, #8]
 800689a:	430a      	orrs	r2, r1
 800689c:	431a      	orrs	r2, r3
 800689e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068a0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80068a2:	e047      	b.n	8006934 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80068a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068b8:	d004      	beq.n	80068c4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a23      	ldr	r2, [pc, #140]	; (800694c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d10f      	bne.n	80068e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80068c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80068c8:	f7ff ff1e 	bl	8006708 <LL_ADC_IsEnabled>
 80068cc:	4604      	mov	r4, r0
 80068ce:	481f      	ldr	r0, [pc, #124]	; (800694c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80068d0:	f7ff ff1a 	bl	8006708 <LL_ADC_IsEnabled>
 80068d4:	4603      	mov	r3, r0
 80068d6:	4323      	orrs	r3, r4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bf0c      	ite	eq
 80068dc:	2301      	moveq	r3, #1
 80068de:	2300      	movne	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	e012      	b.n	800690a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80068e4:	481a      	ldr	r0, [pc, #104]	; (8006950 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80068e6:	f7ff ff0f 	bl	8006708 <LL_ADC_IsEnabled>
 80068ea:	4604      	mov	r4, r0
 80068ec:	4819      	ldr	r0, [pc, #100]	; (8006954 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80068ee:	f7ff ff0b 	bl	8006708 <LL_ADC_IsEnabled>
 80068f2:	4603      	mov	r3, r0
 80068f4:	431c      	orrs	r4, r3
 80068f6:	481a      	ldr	r0, [pc, #104]	; (8006960 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80068f8:	f7ff ff06 	bl	8006708 <LL_ADC_IsEnabled>
 80068fc:	4603      	mov	r3, r0
 80068fe:	4323      	orrs	r3, r4
 8006900:	2b00      	cmp	r3, #0
 8006902:	bf0c      	ite	eq
 8006904:	2301      	moveq	r3, #1
 8006906:	2300      	movne	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d012      	beq.n	8006934 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800690e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006916:	f023 030f 	bic.w	r3, r3, #15
 800691a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800691c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800691e:	e009      	b.n	8006934 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006924:	f043 0220 	orr.w	r2, r3, #32
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006932:	e000      	b.n	8006936 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006934:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800693e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006942:	4618      	mov	r0, r3
 8006944:	3784      	adds	r7, #132	; 0x84
 8006946:	46bd      	mov	sp, r7
 8006948:	bd90      	pop	{r4, r7, pc}
 800694a:	bf00      	nop
 800694c:	50000100 	.word	0x50000100
 8006950:	50000400 	.word	0x50000400
 8006954:	50000500 	.word	0x50000500
 8006958:	50000300 	.word	0x50000300
 800695c:	50000700 	.word	0x50000700
 8006960:	50000600 	.word	0x50000600

08006964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006974:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <__NVIC_SetPriorityGrouping+0x44>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006980:	4013      	ands	r3, r2
 8006982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800698c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006996:	4a04      	ldr	r2, [pc, #16]	; (80069a8 <__NVIC_SetPriorityGrouping+0x44>)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	60d3      	str	r3, [r2, #12]
}
 800699c:	bf00      	nop
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	e000ed00 	.word	0xe000ed00

080069ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069b0:	4b04      	ldr	r3, [pc, #16]	; (80069c4 <__NVIC_GetPriorityGrouping+0x18>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	0a1b      	lsrs	r3, r3, #8
 80069b6:	f003 0307 	and.w	r3, r3, #7
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	e000ed00 	.word	0xe000ed00

080069c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4603      	mov	r3, r0
 80069d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	db0b      	blt.n	80069f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	f003 021f 	and.w	r2, r3, #31
 80069e0:	4907      	ldr	r1, [pc, #28]	; (8006a00 <__NVIC_EnableIRQ+0x38>)
 80069e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	2001      	movs	r0, #1
 80069ea:	fa00 f202 	lsl.w	r2, r0, r2
 80069ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	e000e100 	.word	0xe000e100

08006a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	6039      	str	r1, [r7, #0]
 8006a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	db0a      	blt.n	8006a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	490c      	ldr	r1, [pc, #48]	; (8006a50 <__NVIC_SetPriority+0x4c>)
 8006a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a22:	0112      	lsls	r2, r2, #4
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	440b      	add	r3, r1
 8006a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a2c:	e00a      	b.n	8006a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	4908      	ldr	r1, [pc, #32]	; (8006a54 <__NVIC_SetPriority+0x50>)
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	3b04      	subs	r3, #4
 8006a3c:	0112      	lsls	r2, r2, #4
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	440b      	add	r3, r1
 8006a42:	761a      	strb	r2, [r3, #24]
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	e000e100 	.word	0xe000e100
 8006a54:	e000ed00 	.word	0xe000ed00

08006a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b089      	sub	sp, #36	; 0x24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f1c3 0307 	rsb	r3, r3, #7
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	bf28      	it	cs
 8006a76:	2304      	movcs	r3, #4
 8006a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	2b06      	cmp	r3, #6
 8006a80:	d902      	bls.n	8006a88 <NVIC_EncodePriority+0x30>
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	3b03      	subs	r3, #3
 8006a86:	e000      	b.n	8006a8a <NVIC_EncodePriority+0x32>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	43da      	mvns	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	401a      	ands	r2, r3
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aaa:	43d9      	mvns	r1, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ab0:	4313      	orrs	r3, r2
         );
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3724      	adds	r7, #36	; 0x24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
	...

08006ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ad0:	d301      	bcc.n	8006ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e00f      	b.n	8006af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ad6:	4a0a      	ldr	r2, [pc, #40]	; (8006b00 <SysTick_Config+0x40>)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ade:	210f      	movs	r1, #15
 8006ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae4:	f7ff ff8e 	bl	8006a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <SysTick_Config+0x40>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <SysTick_Config+0x40>)
 8006af0:	2207      	movs	r2, #7
 8006af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	e000e010 	.word	0xe000e010

08006b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff ff29 	bl	8006964 <__NVIC_SetPriorityGrouping>
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b086      	sub	sp, #24
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	4603      	mov	r3, r0
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b28:	f7ff ff40 	bl	80069ac <__NVIC_GetPriorityGrouping>
 8006b2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	6978      	ldr	r0, [r7, #20]
 8006b34:	f7ff ff90 	bl	8006a58 <NVIC_EncodePriority>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b3e:	4611      	mov	r1, r2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff ff5f 	bl	8006a04 <__NVIC_SetPriority>
}
 8006b46:	bf00      	nop
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	4603      	mov	r3, r0
 8006b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7ff ff33 	bl	80069c8 <__NVIC_EnableIRQ>
}
 8006b62:	bf00      	nop
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff ffa4 	bl	8006ac0 <SysTick_Config>
 8006b78:	4603      	mov	r3, r0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
	...

08006b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e08d      	b.n	8006cb2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	4b47      	ldr	r3, [pc, #284]	; (8006cbc <HAL_DMA_Init+0x138>)
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d80f      	bhi.n	8006bc2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	4b45      	ldr	r3, [pc, #276]	; (8006cc0 <HAL_DMA_Init+0x13c>)
 8006baa:	4413      	add	r3, r2
 8006bac:	4a45      	ldr	r2, [pc, #276]	; (8006cc4 <HAL_DMA_Init+0x140>)
 8006bae:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb2:	091b      	lsrs	r3, r3, #4
 8006bb4:	009a      	lsls	r2, r3, #2
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a42      	ldr	r2, [pc, #264]	; (8006cc8 <HAL_DMA_Init+0x144>)
 8006bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8006bc0:	e00e      	b.n	8006be0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	4b40      	ldr	r3, [pc, #256]	; (8006ccc <HAL_DMA_Init+0x148>)
 8006bca:	4413      	add	r3, r2
 8006bcc:	4a3d      	ldr	r2, [pc, #244]	; (8006cc4 <HAL_DMA_Init+0x140>)
 8006bce:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd2:	091b      	lsrs	r3, r3, #4
 8006bd4:	009a      	lsls	r2, r3, #2
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a3c      	ldr	r2, [pc, #240]	; (8006cd0 <HAL_DMA_Init+0x14c>)
 8006bde:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f9b6 	bl	8006fa4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c40:	d102      	bne.n	8006c48 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006c5c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d010      	beq.n	8006c88 <HAL_DMA_Init+0x104>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	d80c      	bhi.n	8006c88 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f9d6 	bl	8007020 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006c84:	605a      	str	r2, [r3, #4]
 8006c86:	e008      	b.n	8006c9a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	40020407 	.word	0x40020407
 8006cc0:	bffdfff8 	.word	0xbffdfff8
 8006cc4:	cccccccd 	.word	0xcccccccd
 8006cc8:	40020000 	.word	0x40020000
 8006ccc:	bffdfbf8 	.word	0xbffdfbf8
 8006cd0:	40020400 	.word	0x40020400

08006cd4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_DMA_Start_IT+0x20>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e066      	b.n	8006dc2 <HAL_DMA_Start_IT+0xee>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d155      	bne.n	8006db4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0201 	bic.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	68b9      	ldr	r1, [r7, #8]
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f8fb 	bl	8006f28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d008      	beq.n	8006d4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 020e 	orr.w	r2, r2, #14
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	e00f      	b.n	8006d6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0204 	bic.w	r2, r2, #4
 8006d5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 020a 	orr.w	r2, r2, #10
 8006d6a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d007      	beq.n	8006d8a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d88:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006da0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f042 0201 	orr.w	r2, r2, #1
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	e005      	b.n	8006dc0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de6:	f003 031f 	and.w	r3, r3, #31
 8006dea:	2204      	movs	r2, #4
 8006dec:	409a      	lsls	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4013      	ands	r3, r2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d026      	beq.n	8006e44 <HAL_DMA_IRQHandler+0x7a>
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d021      	beq.n	8006e44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d107      	bne.n	8006e1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 0204 	bic.w	r2, r2, #4
 8006e1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e22:	f003 021f 	and.w	r2, r3, #31
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2a:	2104      	movs	r1, #4
 8006e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8006e30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d071      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006e42:	e06c      	b.n	8006f1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e48:	f003 031f 	and.w	r3, r3, #31
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	409a      	lsls	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4013      	ands	r3, r2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d02e      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d029      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10b      	bne.n	8006e88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 020a 	bic.w	r2, r2, #10
 8006e7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8c:	f003 021f 	and.w	r2, r3, #31
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	2102      	movs	r1, #2
 8006e96:	fa01 f202 	lsl.w	r2, r1, r2
 8006e9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d038      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006eb4:	e033      	b.n	8006f1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	2208      	movs	r2, #8
 8006ec0:	409a      	lsls	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d02a      	beq.n	8006f20 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f003 0308 	and.w	r3, r3, #8
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d025      	beq.n	8006f20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 020e 	bic.w	r2, r2, #14
 8006ee2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee8:	f003 021f 	and.w	r2, r3, #31
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8006ef6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d004      	beq.n	8006f20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006f1e:	bf00      	nop
 8006f20:	bf00      	nop
}
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006f3e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d004      	beq.n	8006f52 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006f50:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f56:	f003 021f 	and.w	r2, r3, #31
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	2101      	movs	r1, #1
 8006f60:	fa01 f202 	lsl.w	r2, r1, r2
 8006f64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	2b10      	cmp	r3, #16
 8006f74:	d108      	bne.n	8006f88 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006f86:	e007      	b.n	8006f98 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	60da      	str	r2, [r3, #12]
}
 8006f98:	bf00      	nop
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4b16      	ldr	r3, [pc, #88]	; (800700c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d802      	bhi.n	8006fbe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006fb8:	4b15      	ldr	r3, [pc, #84]	; (8007010 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	e001      	b.n	8006fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006fbe:	4b15      	ldr	r3, [pc, #84]	; (8007014 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006fc0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	3b08      	subs	r3, #8
 8006fce:	4a12      	ldr	r2, [pc, #72]	; (8007018 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd4:	091b      	lsrs	r3, r3, #4
 8006fd6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fdc:	089b      	lsrs	r3, r3, #2
 8006fde:	009a      	lsls	r2, r3, #2
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a0b      	ldr	r2, [pc, #44]	; (800701c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006fee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f003 031f 	and.w	r3, r3, #31
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	409a      	lsls	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006ffe:	bf00      	nop
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40020407 	.word	0x40020407
 8007010:	40020800 	.word	0x40020800
 8007014:	40020820 	.word	0x40020820
 8007018:	cccccccd 	.word	0xcccccccd
 800701c:	40020880 	.word	0x40020880

08007020 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4b0b      	ldr	r3, [pc, #44]	; (8007060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	461a      	mov	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a08      	ldr	r2, [pc, #32]	; (8007064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007042:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	3b01      	subs	r3, #1
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	2201      	movs	r2, #1
 800704e:	409a      	lsls	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007054:	bf00      	nop
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	1000823f 	.word	0x1000823f
 8007064:	40020940 	.word	0x40020940

08007068 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e147      	b.n	800730a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fd f810 	bl	80040b4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	699a      	ldr	r2, [r3, #24]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0210 	bic.w	r2, r2, #16
 80070a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070a4:	f7fe f8d6 	bl	8005254 <HAL_GetTick>
 80070a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80070aa:	e012      	b.n	80070d2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80070ac:	f7fe f8d2 	bl	8005254 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b0a      	cmp	r3, #10
 80070b8:	d90b      	bls.n	80070d2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070be:	f043 0201 	orr.w	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2203      	movs	r2, #3
 80070ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e11b      	b.n	800730a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b08      	cmp	r3, #8
 80070de:	d0e5      	beq.n	80070ac <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070f0:	f7fe f8b0 	bl	8005254 <HAL_GetTick>
 80070f4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80070f6:	e012      	b.n	800711e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80070f8:	f7fe f8ac 	bl	8005254 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b0a      	cmp	r3, #10
 8007104:	d90b      	bls.n	800711e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710a:	f043 0201 	orr.w	r2, r3, #1
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2203      	movs	r2, #3
 8007116:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e0f5      	b.n	800730a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0e5      	beq.n	80070f8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699a      	ldr	r2, [r3, #24]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0202 	orr.w	r2, r2, #2
 800713a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a74      	ldr	r2, [pc, #464]	; (8007314 <HAL_FDCAN_Init+0x2ac>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d103      	bne.n	800714e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007146:	4a74      	ldr	r2, [pc, #464]	; (8007318 <HAL_FDCAN_Init+0x2b0>)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	7c1b      	ldrb	r3, [r3, #16]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d108      	bne.n	8007168 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699a      	ldr	r2, [r3, #24]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007164:	619a      	str	r2, [r3, #24]
 8007166:	e007      	b.n	8007178 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007176:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	7c5b      	ldrb	r3, [r3, #17]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d108      	bne.n	8007192 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699a      	ldr	r2, [r3, #24]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800718e:	619a      	str	r2, [r3, #24]
 8007190:	e007      	b.n	80071a2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	699a      	ldr	r2, [r3, #24]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	7c9b      	ldrb	r3, [r3, #18]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d108      	bne.n	80071bc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	699a      	ldr	r2, [r3, #24]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071b8:	619a      	str	r2, [r3, #24]
 80071ba:	e007      	b.n	80071cc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071ca:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	430a      	orrs	r2, r1
 80071e0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	699a      	ldr	r2, [r3, #24]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80071f0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	691a      	ldr	r2, [r3, #16]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0210 	bic.w	r2, r2, #16
 8007200:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d108      	bne.n	800721c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f042 0204 	orr.w	r2, r2, #4
 8007218:	619a      	str	r2, [r3, #24]
 800721a:	e02c      	b.n	8007276 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d028      	beq.n	8007276 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	2b02      	cmp	r3, #2
 800722a:	d01c      	beq.n	8007266 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699a      	ldr	r2, [r3, #24]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800723a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691a      	ldr	r2, [r3, #16]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0210 	orr.w	r2, r2, #16
 800724a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	2b03      	cmp	r3, #3
 8007252:	d110      	bne.n	8007276 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0220 	orr.w	r2, r2, #32
 8007262:	619a      	str	r2, [r3, #24]
 8007264:	e007      	b.n	8007276 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	699a      	ldr	r2, [r3, #24]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f042 0220 	orr.w	r2, r2, #32
 8007274:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	3b01      	subs	r3, #1
 800727c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	3b01      	subs	r3, #1
 8007284:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007286:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800728e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	3b01      	subs	r3, #1
 8007298:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800729e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80072a0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072aa:	d115      	bne.n	80072d8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b6:	3b01      	subs	r3, #1
 80072b8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80072ba:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c0:	3b01      	subs	r3, #1
 80072c2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80072c4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	3b01      	subs	r3, #1
 80072ce:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80072d4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80072d6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fc4c 	bl	8007b8c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	40006400 	.word	0x40006400
 8007318:	40006500 	.word	0x40006500

0800731c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800732c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d002      	beq.n	800733a <HAL_FDCAN_ConfigFilter+0x1e>
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d13d      	bne.n	80073b6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d119      	bne.n	8007376 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800734e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007356:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800735c:	4313      	orrs	r3, r2
 800735e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	e01d      	b.n	80073b2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	075a      	lsls	r2, r3, #29
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	079a      	lsls	r2, r3, #30
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	4413      	add	r3, r2
 800739e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	3304      	adds	r3, #4
 80073aa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	e006      	b.n	80073c4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ba:	f043 0202 	orr.w	r2, r3, #2
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
  }
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	371c      	adds	r7, #28
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d110      	bne.n	8007406 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699a      	ldr	r2, [r3, #24]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0201 	bic.w	r2, r2, #1
 80073fa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	e006      	b.n	8007414 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800740a:	f043 0204 	orr.w	r2, r3, #4
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
  }
}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d12c      	bne.n	8007492 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d007      	beq.n	8007458 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800744c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e023      	b.n	80074a0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007460:	0c1b      	lsrs	r3, r3, #16
 8007462:	f003 0303 	and.w	r3, r3, #3
 8007466:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 fbf8 	bl	8007c64 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2101      	movs	r1, #1
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	fa01 f202 	lsl.w	r2, r1, r2
 8007480:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007484:	2201      	movs	r2, #1
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	409a      	lsls	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	e006      	b.n	80074a0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007496:	f043 0208 	orr.w	r2, r3, #8
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
  }
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b08b      	sub	sp, #44	; 0x2c
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074c0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80074c2:	7efb      	ldrb	r3, [r7, #27]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	f040 80e8 	bne.w	800769a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2b40      	cmp	r3, #64	; 0x40
 80074ce:	d137      	bne.n	8007540 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d8:	f003 030f 	and.w	r3, r3, #15
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d107      	bne.n	80074f0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e0db      	b.n	80076a8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f8:	0e1b      	lsrs	r3, r3, #24
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d10a      	bne.n	8007518 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800750a:	0a5b      	lsrs	r3, r3, #9
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b01      	cmp	r3, #1
 8007512:	d101      	bne.n	8007518 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007514:	2301      	movs	r3, #1
 8007516:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007520:	0a1b      	lsrs	r3, r3, #8
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	69fa      	ldr	r2, [r7, #28]
 8007528:	4413      	add	r3, r2
 800752a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	4613      	mov	r3, r2
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	4413      	add	r3, r2
 8007538:	00db      	lsls	r3, r3, #3
 800753a:	440b      	add	r3, r1
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
 800753e:	e036      	b.n	80075ae <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007548:	f003 030f 	and.w	r3, r3, #15
 800754c:	2b00      	cmp	r3, #0
 800754e:	d107      	bne.n	8007560 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007554:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e0a3      	b.n	80076a8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007568:	0e1b      	lsrs	r3, r3, #24
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b01      	cmp	r3, #1
 8007570:	d10a      	bne.n	8007588 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800757a:	0a1b      	lsrs	r3, r3, #8
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007584:	2301      	movs	r3, #1
 8007586:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007590:	0a1b      	lsrs	r3, r3, #8
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	69fa      	ldr	r2, [r7, #28]
 8007598:	4413      	add	r3, r2
 800759a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80075a0:	69fa      	ldr	r2, [r7, #28]
 80075a2:	4613      	mov	r3, r2
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	4413      	add	r3, r2
 80075a8:	00db      	lsls	r3, r3, #3
 80075aa:	440b      	add	r3, r1
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d107      	bne.n	80075d2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80075c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	0c9b      	lsrs	r3, r3, #18
 80075c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	e005      	b.n	80075de <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	3304      	adds	r3, #4
 80075fa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	b29a      	uxth	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	0c1b      	lsrs	r3, r3, #16
 800760c:	f003 020f 	and.w	r2, r3, #15
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	0e1b      	lsrs	r3, r3, #24
 8007632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	0fda      	lsrs	r2, r3, #31
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	3304      	adds	r3, #4
 8007648:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800764e:	2300      	movs	r3, #0
 8007650:	623b      	str	r3, [r7, #32]
 8007652:	e00a      	b.n	800766a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	441a      	add	r2, r3
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	440b      	add	r3, r1
 8007660:	7812      	ldrb	r2, [r2, #0]
 8007662:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	3301      	adds	r3, #1
 8007668:	623b      	str	r3, [r7, #32]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	4a11      	ldr	r2, [pc, #68]	; (80076b4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8007670:	5cd3      	ldrb	r3, [r2, r3]
 8007672:	461a      	mov	r2, r3
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	4293      	cmp	r3, r2
 8007678:	d3ec      	bcc.n	8007654 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d105      	bne.n	800768c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800768a:	e004      	b.n	8007696 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	e006      	b.n	80076a8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769e:	f043 0208 	orr.w	r2, r3, #8
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
  }
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	372c      	adds	r7, #44	; 0x2c
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	0800cfa0 	.word	0x0800cfa0

080076b8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076ca:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d003      	beq.n	80076da <HAL_FDCAN_ActivateNotification+0x22>
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	f040 80c8 	bne.w	800786a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d004      	beq.n	80076f6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d03b      	beq.n	800776e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d031      	beq.n	800776e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007710:	2b00      	cmp	r3, #0
 8007712:	d004      	beq.n	800771e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b00      	cmp	r3, #0
 800771c:	d027      	beq.n	800776e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007724:	2b00      	cmp	r3, #0
 8007726:	d004      	beq.n	8007732 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f003 0308 	and.w	r3, r3, #8
 800772e:	2b00      	cmp	r3, #0
 8007730:	d01d      	beq.n	800776e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007738:	2b00      	cmp	r3, #0
 800773a:	d004      	beq.n	8007746 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	f003 0310 	and.w	r3, r3, #16
 8007742:	2b00      	cmp	r3, #0
 8007744:	d013      	beq.n	800776e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800774c:	2b00      	cmp	r3, #0
 800774e:	d004      	beq.n	800775a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b00      	cmp	r3, #0
 8007758:	d009      	beq.n	800776e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00c      	beq.n	800777e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d107      	bne.n	800777e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f042 0201 	orr.w	r2, r2, #1
 800777c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f003 0307 	and.w	r3, r3, #7
 8007784:	2b00      	cmp	r3, #0
 8007786:	d004      	beq.n	8007792 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d13b      	bne.n	800780a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007798:	2b00      	cmp	r3, #0
 800779a:	d004      	beq.n	80077a6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d131      	bne.n	800780a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d004      	beq.n	80077ba <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d127      	bne.n	800780a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d004      	beq.n	80077ce <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d11d      	bne.n	800780a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d004      	beq.n	80077e2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f003 0310 	and.w	r3, r3, #16
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d113      	bne.n	800780a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d004      	beq.n	80077f6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f003 0320 	and.w	r3, r3, #32
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d109      	bne.n	800780a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00c      	beq.n	800781a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0202 	orr.w	r2, r2, #2
 8007818:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007820:	2b00      	cmp	r3, #0
 8007822:	d009      	beq.n	8007838 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	430a      	orrs	r2, r1
 8007834:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783e:	2b00      	cmp	r3, #0
 8007840:	d009      	beq.n	8007856 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	430a      	orrs	r2, r1
 8007852:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	430a      	orrs	r2, r1
 8007864:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	e006      	b.n	8007878 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800786e:	f043 0202 	orr.w	r2, r3, #2
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
  }
}
 8007878:	4618      	mov	r0, r3
 800787a:	371c      	adds	r7, #28
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b08c      	sub	sp, #48	; 0x30
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007892:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007896:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078a0:	4013      	ands	r3, r2
 80078a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078b8:	4013      	ands	r3, r2
 80078ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d0:	4013      	ands	r3, r2
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078da:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80078de:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e6:	6a3a      	ldr	r2, [r7, #32]
 80078e8:	4013      	ands	r3, r2
 80078ea:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80078f6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fe:	69fa      	ldr	r2, [r7, #28]
 8007900:	4013      	ands	r3, r2
 8007902:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007912:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00b      	beq.n	8007936 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	d006      	beq.n	8007936 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2240      	movs	r2, #64	; 0x40
 800792e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f90b 	bl	8007b4c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800793c:	2b00      	cmp	r3, #0
 800793e:	d019      	beq.n	8007974 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007946:	2b00      	cmp	r3, #0
 8007948:	d014      	beq.n	8007974 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007952:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	4013      	ands	r3, r2
 8007960:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800796a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800796c:	6939      	ldr	r1, [r7, #16]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f8cd 	bl	8007b0e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d007      	beq.n	800798a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007980:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f8a2 	bl	8007ace <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	2b00      	cmp	r3, #0
 800798e:	d007      	beq.n	80079a0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007996:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7fa fc10 	bl	80021c0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d007      	beq.n	80079b6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ac:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80079ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7fa fc7f 	bl	80022b4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00c      	beq.n	80079da <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d007      	beq.n	80079da <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079d2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f885 	bl	8007ae4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d018      	beq.n	8007a16 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d013      	beq.n	8007a16 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80079f6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	4013      	ands	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2280      	movs	r2, #128	; 0x80
 8007a0c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007a0e:	68f9      	ldr	r1, [r7, #12]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f871 	bl	8007af8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00c      	beq.n	8007a3a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d007      	beq.n	8007a3a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a32:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f875 	bl	8007b24 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00c      	beq.n	8007a5e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d007      	beq.n	8007a5e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007a56:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f86d 	bl	8007b38 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00f      	beq.n	8007a88 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d007      	beq.n	8007a9e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69fa      	ldr	r2, [r7, #28]
 8007a94:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007a96:	69f9      	ldr	r1, [r7, #28]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f86b 	bl	8007b74 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d009      	beq.n	8007ab8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6a3a      	ldr	r2, [r7, #32]
 8007aaa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f84d 	bl	8007b60 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007ac6:	bf00      	nop
 8007ac8:	3730      	adds	r7, #48	; 0x30
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007b7e:	bf00      	nop
 8007b80:	370c      	adds	r7, #12
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
	...

08007b8c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007b94:	4b30      	ldr	r3, [pc, #192]	; (8007c58 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8007b96:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a2f      	ldr	r2, [pc, #188]	; (8007c5c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d103      	bne.n	8007baa <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ba8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a2c      	ldr	r2, [pc, #176]	; (8007c60 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d103      	bne.n	8007bbc <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8007bba:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bca:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd2:	041a      	lsls	r2, r3, #16
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bf0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf8:	061a      	lsls	r2, r3, #24
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	e005      	b.n	8007c3e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d3f3      	bcc.n	8007c32 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8007c4a:	bf00      	nop
 8007c4c:	bf00      	nop
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	4000a400 	.word	0x4000a400
 8007c5c:	40006800 	.word	0x40006800
 8007c60:	40006c00 	.word	0x40006c00

08007c64 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b089      	sub	sp, #36	; 0x24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10a      	bne.n	8007c90 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007c82:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	61fb      	str	r3, [r7, #28]
 8007c8e:	e00a      	b.n	8007ca6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007c98:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8007c9e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007ca0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ca4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007cb0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007cb6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007cbc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	00db      	lsls	r3, r3, #3
 8007cd2:	4413      	add	r3, r2
 8007cd4:	00db      	lsls	r3, r3, #3
 8007cd6:	440b      	add	r3, r1
 8007cd8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	69fa      	ldr	r2, [r7, #28]
 8007cde:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	3304      	adds	r3, #4
 8007cf0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	617b      	str	r3, [r7, #20]
 8007cf6:	e020      	b.n	8007d3a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	3303      	adds	r3, #3
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	4413      	add	r3, r2
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	3302      	adds	r3, #2
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	440b      	add	r3, r1
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007d10:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	3301      	adds	r3, #1
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	440b      	add	r3, r1
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007d1e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	440a      	add	r2, r1
 8007d26:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007d28:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	3304      	adds	r3, #4
 8007d32:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	3304      	adds	r3, #4
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	4a06      	ldr	r2, [pc, #24]	; (8007d58 <FDCAN_CopyMessageToRAM+0xf4>)
 8007d40:	5cd3      	ldrb	r3, [r2, r3]
 8007d42:	461a      	mov	r2, r3
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d3d6      	bcc.n	8007cf8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	bf00      	nop
 8007d4e:	3724      	adds	r7, #36	; 0x24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	0800cfa0 	.word	0x0800cfa0

08007d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007d6a:	e15a      	b.n	8008022 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	2101      	movs	r1, #1
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	fa01 f303 	lsl.w	r3, r1, r3
 8007d78:	4013      	ands	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 814c 	beq.w	800801c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d005      	beq.n	8007d9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d130      	bne.n	8007dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	2203      	movs	r2, #3
 8007da8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dac:	43db      	mvns	r3, r3
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	4013      	ands	r3, r2
 8007db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	68da      	ldr	r2, [r3, #12]
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dda:	43db      	mvns	r3, r3
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4013      	ands	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	091b      	lsrs	r3, r3, #4
 8007de8:	f003 0201 	and.w	r2, r3, #1
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	fa02 f303 	lsl.w	r3, r2, r3
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d017      	beq.n	8007e3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	2203      	movs	r2, #3
 8007e16:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1a:	43db      	mvns	r3, r3
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	689a      	ldr	r2, [r3, #8]
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d123      	bne.n	8007e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	08da      	lsrs	r2, r3, #3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3208      	adds	r2, #8
 8007e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	220f      	movs	r2, #15
 8007e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e62:	43db      	mvns	r3, r3
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4013      	ands	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	691a      	ldr	r2, [r3, #16]
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f003 0307 	and.w	r3, r3, #7
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	08da      	lsrs	r2, r3, #3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3208      	adds	r2, #8
 8007e88:	6939      	ldr	r1, [r7, #16]
 8007e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	005b      	lsls	r3, r3, #1
 8007e98:	2203      	movs	r2, #3
 8007e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9e:	43db      	mvns	r3, r3
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f003 0203 	and.w	r2, r3, #3
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 80a6 	beq.w	800801c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ed0:	4b5b      	ldr	r3, [pc, #364]	; (8008040 <HAL_GPIO_Init+0x2e4>)
 8007ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed4:	4a5a      	ldr	r2, [pc, #360]	; (8008040 <HAL_GPIO_Init+0x2e4>)
 8007ed6:	f043 0301 	orr.w	r3, r3, #1
 8007eda:	6613      	str	r3, [r2, #96]	; 0x60
 8007edc:	4b58      	ldr	r3, [pc, #352]	; (8008040 <HAL_GPIO_Init+0x2e4>)
 8007ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	60bb      	str	r3, [r7, #8]
 8007ee6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ee8:	4a56      	ldr	r2, [pc, #344]	; (8008044 <HAL_GPIO_Init+0x2e8>)
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	089b      	lsrs	r3, r3, #2
 8007eee:	3302      	adds	r3, #2
 8007ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f003 0303 	and.w	r3, r3, #3
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	220f      	movs	r2, #15
 8007f00:	fa02 f303 	lsl.w	r3, r2, r3
 8007f04:	43db      	mvns	r3, r3
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007f12:	d01f      	beq.n	8007f54 <HAL_GPIO_Init+0x1f8>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a4c      	ldr	r2, [pc, #304]	; (8008048 <HAL_GPIO_Init+0x2ec>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d019      	beq.n	8007f50 <HAL_GPIO_Init+0x1f4>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a4b      	ldr	r2, [pc, #300]	; (800804c <HAL_GPIO_Init+0x2f0>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d013      	beq.n	8007f4c <HAL_GPIO_Init+0x1f0>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a4a      	ldr	r2, [pc, #296]	; (8008050 <HAL_GPIO_Init+0x2f4>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00d      	beq.n	8007f48 <HAL_GPIO_Init+0x1ec>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a49      	ldr	r2, [pc, #292]	; (8008054 <HAL_GPIO_Init+0x2f8>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d007      	beq.n	8007f44 <HAL_GPIO_Init+0x1e8>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a48      	ldr	r2, [pc, #288]	; (8008058 <HAL_GPIO_Init+0x2fc>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d101      	bne.n	8007f40 <HAL_GPIO_Init+0x1e4>
 8007f3c:	2305      	movs	r3, #5
 8007f3e:	e00a      	b.n	8007f56 <HAL_GPIO_Init+0x1fa>
 8007f40:	2306      	movs	r3, #6
 8007f42:	e008      	b.n	8007f56 <HAL_GPIO_Init+0x1fa>
 8007f44:	2304      	movs	r3, #4
 8007f46:	e006      	b.n	8007f56 <HAL_GPIO_Init+0x1fa>
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e004      	b.n	8007f56 <HAL_GPIO_Init+0x1fa>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e002      	b.n	8007f56 <HAL_GPIO_Init+0x1fa>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e000      	b.n	8007f56 <HAL_GPIO_Init+0x1fa>
 8007f54:	2300      	movs	r3, #0
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	f002 0203 	and.w	r2, r2, #3
 8007f5c:	0092      	lsls	r2, r2, #2
 8007f5e:	4093      	lsls	r3, r2
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f66:	4937      	ldr	r1, [pc, #220]	; (8008044 <HAL_GPIO_Init+0x2e8>)
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	089b      	lsrs	r3, r3, #2
 8007f6c:	3302      	adds	r3, #2
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f74:	4b39      	ldr	r3, [pc, #228]	; (800805c <HAL_GPIO_Init+0x300>)
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	43db      	mvns	r3, r3
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	4013      	ands	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007f98:	4a30      	ldr	r2, [pc, #192]	; (800805c <HAL_GPIO_Init+0x300>)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007f9e:	4b2f      	ldr	r3, [pc, #188]	; (800805c <HAL_GPIO_Init+0x300>)
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	43db      	mvns	r3, r3
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4013      	ands	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007fc2:	4a26      	ldr	r2, [pc, #152]	; (800805c <HAL_GPIO_Init+0x300>)
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007fc8:	4b24      	ldr	r3, [pc, #144]	; (800805c <HAL_GPIO_Init+0x300>)
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	43db      	mvns	r3, r3
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007fec:	4a1b      	ldr	r2, [pc, #108]	; (800805c <HAL_GPIO_Init+0x300>)
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007ff2:	4b1a      	ldr	r3, [pc, #104]	; (800805c <HAL_GPIO_Init+0x300>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	43db      	mvns	r3, r3
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	4013      	ands	r3, r2
 8008000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	4313      	orrs	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008016:	4a11      	ldr	r2, [pc, #68]	; (800805c <HAL_GPIO_Init+0x300>)
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	3301      	adds	r3, #1
 8008020:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	fa22 f303 	lsr.w	r3, r2, r3
 800802c:	2b00      	cmp	r3, #0
 800802e:	f47f ae9d 	bne.w	8007d6c <HAL_GPIO_Init+0x10>
  }
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	371c      	adds	r7, #28
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	40021000 	.word	0x40021000
 8008044:	40010000 	.word	0x40010000
 8008048:	48000400 	.word	0x48000400
 800804c:	48000800 	.word	0x48000800
 8008050:	48000c00 	.word	0x48000c00
 8008054:	48001000 	.word	0x48001000
 8008058:	48001400 	.word	0x48001400
 800805c:	40010400 	.word	0x40010400

08008060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	807b      	strh	r3, [r7, #2]
 800806c:	4613      	mov	r3, r2
 800806e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008070:	787b      	ldrb	r3, [r7, #1]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008076:	887a      	ldrh	r2, [r7, #2]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800807c:	e002      	b.n	8008084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800807e:	887a      	ldrh	r2, [r7, #2]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e08d      	b.n	80081be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d106      	bne.n	80080bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7fc f914 	bl	80042e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2224      	movs	r2, #36	; 0x24
 80080c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0201 	bic.w	r2, r2, #1
 80080d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80080e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689a      	ldr	r2, [r3, #8]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d107      	bne.n	800810a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689a      	ldr	r2, [r3, #8]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008106:	609a      	str	r2, [r3, #8]
 8008108:	e006      	b.n	8008118 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	689a      	ldr	r2, [r3, #8]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008116:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	2b02      	cmp	r3, #2
 800811e:	d108      	bne.n	8008132 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800812e:	605a      	str	r2, [r3, #4]
 8008130:	e007      	b.n	8008142 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008140:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	6812      	ldr	r2, [r2, #0]
 800814c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008154:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008164:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691a      	ldr	r2, [r3, #16]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	430a      	orrs	r2, r1
 800817e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	69d9      	ldr	r1, [r3, #28]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a1a      	ldr	r2, [r3, #32]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0201 	orr.w	r2, r2, #1
 800819e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af02      	add	r7, sp, #8
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	607a      	str	r2, [r7, #4]
 80081d2:	461a      	mov	r2, r3
 80081d4:	460b      	mov	r3, r1
 80081d6:	817b      	strh	r3, [r7, #10]
 80081d8:	4613      	mov	r3, r2
 80081da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b20      	cmp	r3, #32
 80081e6:	f040 80fd 	bne.w	80083e4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d101      	bne.n	80081f8 <HAL_I2C_Master_Transmit+0x30>
 80081f4:	2302      	movs	r3, #2
 80081f6:	e0f6      	b.n	80083e6 <HAL_I2C_Master_Transmit+0x21e>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008200:	f7fd f828 	bl	8005254 <HAL_GetTick>
 8008204:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	2319      	movs	r3, #25
 800820c:	2201      	movs	r2, #1
 800820e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 fce0 	bl	8008bd8 <I2C_WaitOnFlagUntilTimeout>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e0e1      	b.n	80083e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2221      	movs	r2, #33	; 0x21
 8008226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2210      	movs	r2, #16
 800822e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	893a      	ldrh	r2, [r7, #8]
 8008242:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800824e:	b29b      	uxth	r3, r3
 8008250:	2bff      	cmp	r3, #255	; 0xff
 8008252:	d906      	bls.n	8008262 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	22ff      	movs	r2, #255	; 0xff
 8008258:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800825a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800825e:	617b      	str	r3, [r7, #20]
 8008260:	e007      	b.n	8008272 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008266:	b29a      	uxth	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800826c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008270:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008276:	2b00      	cmp	r3, #0
 8008278:	d024      	beq.n	80082c4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	781a      	ldrb	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008294:	b29b      	uxth	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	b29a      	uxth	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a2:	3b01      	subs	r3, #1
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	3301      	adds	r3, #1
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	8979      	ldrh	r1, [r7, #10]
 80082b6:	4b4e      	ldr	r3, [pc, #312]	; (80083f0 <HAL_I2C_Master_Transmit+0x228>)
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 fedb 	bl	8009078 <I2C_TransferConfig>
 80082c2:	e066      	b.n	8008392 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	8979      	ldrh	r1, [r7, #10]
 80082cc:	4b48      	ldr	r3, [pc, #288]	; (80083f0 <HAL_I2C_Master_Transmit+0x228>)
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 fed0 	bl	8009078 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80082d8:	e05b      	b.n	8008392 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	6a39      	ldr	r1, [r7, #32]
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 fcd3 	bl	8008c8a <I2C_WaitOnTXISFlagUntilTimeout>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e07b      	b.n	80083e6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f2:	781a      	ldrb	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008308:	b29b      	uxth	r3, r3
 800830a:	3b01      	subs	r3, #1
 800830c:	b29a      	uxth	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008316:	3b01      	subs	r3, #1
 8008318:	b29a      	uxth	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008322:	b29b      	uxth	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	d034      	beq.n	8008392 <HAL_I2C_Master_Transmit+0x1ca>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800832c:	2b00      	cmp	r3, #0
 800832e:	d130      	bne.n	8008392 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	2200      	movs	r2, #0
 8008338:	2180      	movs	r1, #128	; 0x80
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 fc4c 	bl	8008bd8 <I2C_WaitOnFlagUntilTimeout>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e04d      	b.n	80083e6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800834e:	b29b      	uxth	r3, r3
 8008350:	2bff      	cmp	r3, #255	; 0xff
 8008352:	d90e      	bls.n	8008372 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	22ff      	movs	r2, #255	; 0xff
 8008358:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800835e:	b2da      	uxtb	r2, r3
 8008360:	8979      	ldrh	r1, [r7, #10]
 8008362:	2300      	movs	r3, #0
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 fe84 	bl	8009078 <I2C_TransferConfig>
 8008370:	e00f      	b.n	8008392 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008376:	b29a      	uxth	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008380:	b2da      	uxtb	r2, r3
 8008382:	8979      	ldrh	r1, [r7, #10]
 8008384:	2300      	movs	r3, #0
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 fe73 	bl	8009078 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008396:	b29b      	uxth	r3, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d19e      	bne.n	80082da <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	6a39      	ldr	r1, [r7, #32]
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 fcb9 	bl	8008d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e01a      	b.n	80083e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2220      	movs	r2, #32
 80083b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6859      	ldr	r1, [r3, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	4b0c      	ldr	r3, [pc, #48]	; (80083f4 <HAL_I2C_Master_Transmit+0x22c>)
 80083c4:	400b      	ands	r3, r1
 80083c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2220      	movs	r2, #32
 80083cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	e000      	b.n	80083e6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80083e4:	2302      	movs	r3, #2
  }
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	80002000 	.word	0x80002000
 80083f4:	fe00e800 	.word	0xfe00e800

080083f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af02      	add	r7, sp, #8
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	607a      	str	r2, [r7, #4]
 8008402:	461a      	mov	r2, r3
 8008404:	460b      	mov	r3, r1
 8008406:	817b      	strh	r3, [r7, #10]
 8008408:	4613      	mov	r3, r2
 800840a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b20      	cmp	r3, #32
 8008416:	f040 80db 	bne.w	80085d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008420:	2b01      	cmp	r3, #1
 8008422:	d101      	bne.n	8008428 <HAL_I2C_Master_Receive+0x30>
 8008424:	2302      	movs	r3, #2
 8008426:	e0d4      	b.n	80085d2 <HAL_I2C_Master_Receive+0x1da>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008430:	f7fc ff10 	bl	8005254 <HAL_GetTick>
 8008434:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	2319      	movs	r3, #25
 800843c:	2201      	movs	r2, #1
 800843e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 fbc8 	bl	8008bd8 <I2C_WaitOnFlagUntilTimeout>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e0bf      	b.n	80085d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2222      	movs	r2, #34	; 0x22
 8008456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2210      	movs	r2, #16
 800845e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	893a      	ldrh	r2, [r7, #8]
 8008472:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800847e:	b29b      	uxth	r3, r3
 8008480:	2bff      	cmp	r3, #255	; 0xff
 8008482:	d90e      	bls.n	80084a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	22ff      	movs	r2, #255	; 0xff
 8008488:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800848e:	b2da      	uxtb	r2, r3
 8008490:	8979      	ldrh	r1, [r7, #10]
 8008492:	4b52      	ldr	r3, [pc, #328]	; (80085dc <HAL_I2C_Master_Receive+0x1e4>)
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 fdec 	bl	8009078 <I2C_TransferConfig>
 80084a0:	e06d      	b.n	800857e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	8979      	ldrh	r1, [r7, #10]
 80084b4:	4b49      	ldr	r3, [pc, #292]	; (80085dc <HAL_I2C_Master_Receive+0x1e4>)
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 fddb 	bl	8009078 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80084c2:	e05c      	b.n	800857e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	6a39      	ldr	r1, [r7, #32]
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 fc69 	bl	8008da0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e07c      	b.n	80085d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	b2d2      	uxtb	r2, r2
 80084e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008500:	b29b      	uxth	r3, r3
 8008502:	3b01      	subs	r3, #1
 8008504:	b29a      	uxth	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800850e:	b29b      	uxth	r3, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	d034      	beq.n	800857e <HAL_I2C_Master_Receive+0x186>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008518:	2b00      	cmp	r3, #0
 800851a:	d130      	bne.n	800857e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	2200      	movs	r2, #0
 8008524:	2180      	movs	r1, #128	; 0x80
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 fb56 	bl	8008bd8 <I2C_WaitOnFlagUntilTimeout>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e04d      	b.n	80085d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800853a:	b29b      	uxth	r3, r3
 800853c:	2bff      	cmp	r3, #255	; 0xff
 800853e:	d90e      	bls.n	800855e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	22ff      	movs	r2, #255	; 0xff
 8008544:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800854a:	b2da      	uxtb	r2, r3
 800854c:	8979      	ldrh	r1, [r7, #10]
 800854e:	2300      	movs	r3, #0
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 fd8e 	bl	8009078 <I2C_TransferConfig>
 800855c:	e00f      	b.n	800857e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008562:	b29a      	uxth	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800856c:	b2da      	uxtb	r2, r3
 800856e:	8979      	ldrh	r1, [r7, #10]
 8008570:	2300      	movs	r3, #0
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 fd7d 	bl	8009078 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008582:	b29b      	uxth	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d19d      	bne.n	80084c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	6a39      	ldr	r1, [r7, #32]
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 fbc3 	bl	8008d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e01a      	b.n	80085d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2220      	movs	r2, #32
 80085a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6859      	ldr	r1, [r3, #4]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	4b0c      	ldr	r3, [pc, #48]	; (80085e0 <HAL_I2C_Master_Receive+0x1e8>)
 80085b0:	400b      	ands	r3, r1
 80085b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2220      	movs	r2, #32
 80085b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	e000      	b.n	80085d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80085d0:	2302      	movs	r3, #2
  }
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3718      	adds	r7, #24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	80002400 	.word	0x80002400
 80085e0:	fe00e800 	.word	0xfe00e800

080085e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b088      	sub	sp, #32
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	4608      	mov	r0, r1
 80085ee:	4611      	mov	r1, r2
 80085f0:	461a      	mov	r2, r3
 80085f2:	4603      	mov	r3, r0
 80085f4:	817b      	strh	r3, [r7, #10]
 80085f6:	460b      	mov	r3, r1
 80085f8:	813b      	strh	r3, [r7, #8]
 80085fa:	4613      	mov	r3, r2
 80085fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b20      	cmp	r3, #32
 8008608:	f040 80f9 	bne.w	80087fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <HAL_I2C_Mem_Write+0x34>
 8008612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008614:	2b00      	cmp	r3, #0
 8008616:	d105      	bne.n	8008624 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800861e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e0ed      	b.n	8008800 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800862a:	2b01      	cmp	r3, #1
 800862c:	d101      	bne.n	8008632 <HAL_I2C_Mem_Write+0x4e>
 800862e:	2302      	movs	r3, #2
 8008630:	e0e6      	b.n	8008800 <HAL_I2C_Mem_Write+0x21c>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800863a:	f7fc fe0b 	bl	8005254 <HAL_GetTick>
 800863e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	2319      	movs	r3, #25
 8008646:	2201      	movs	r2, #1
 8008648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 fac3 	bl	8008bd8 <I2C_WaitOnFlagUntilTimeout>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e0d1      	b.n	8008800 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2221      	movs	r2, #33	; 0x21
 8008660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2240      	movs	r2, #64	; 0x40
 8008668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6a3a      	ldr	r2, [r7, #32]
 8008676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800867c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008684:	88f8      	ldrh	r0, [r7, #6]
 8008686:	893a      	ldrh	r2, [r7, #8]
 8008688:	8979      	ldrh	r1, [r7, #10]
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	9301      	str	r3, [sp, #4]
 800868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	4603      	mov	r3, r0
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 f9d3 	bl	8008a40 <I2C_RequestMemoryWrite>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d005      	beq.n	80086ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e0a9      	b.n	8008800 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2bff      	cmp	r3, #255	; 0xff
 80086b4:	d90e      	bls.n	80086d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	22ff      	movs	r2, #255	; 0xff
 80086ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	8979      	ldrh	r1, [r7, #10]
 80086c4:	2300      	movs	r3, #0
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 fcd3 	bl	8009078 <I2C_TransferConfig>
 80086d2:	e00f      	b.n	80086f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d8:	b29a      	uxth	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	8979      	ldrh	r1, [r7, #10]
 80086e6:	2300      	movs	r3, #0
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 fcc2 	bl	8009078 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 fac6 	bl	8008c8a <I2C_WaitOnTXISFlagUntilTimeout>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d001      	beq.n	8008708 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e07b      	b.n	8008800 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	781a      	ldrb	r2, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008730:	3b01      	subs	r3, #1
 8008732:	b29a      	uxth	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800873c:	b29b      	uxth	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d034      	beq.n	80087ac <HAL_I2C_Mem_Write+0x1c8>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008746:	2b00      	cmp	r3, #0
 8008748:	d130      	bne.n	80087ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	2200      	movs	r2, #0
 8008752:	2180      	movs	r1, #128	; 0x80
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 fa3f 	bl	8008bd8 <I2C_WaitOnFlagUntilTimeout>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d001      	beq.n	8008764 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e04d      	b.n	8008800 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008768:	b29b      	uxth	r3, r3
 800876a:	2bff      	cmp	r3, #255	; 0xff
 800876c:	d90e      	bls.n	800878c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	22ff      	movs	r2, #255	; 0xff
 8008772:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008778:	b2da      	uxtb	r2, r3
 800877a:	8979      	ldrh	r1, [r7, #10]
 800877c:	2300      	movs	r3, #0
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f000 fc77 	bl	8009078 <I2C_TransferConfig>
 800878a:	e00f      	b.n	80087ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008790:	b29a      	uxth	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800879a:	b2da      	uxtb	r2, r3
 800879c:	8979      	ldrh	r1, [r7, #10]
 800879e:	2300      	movs	r3, #0
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f000 fc66 	bl	8009078 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d19e      	bne.n	80086f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 faac 	bl	8008d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e01a      	b.n	8008800 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2220      	movs	r2, #32
 80087d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	6859      	ldr	r1, [r3, #4]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <HAL_I2C_Mem_Write+0x224>)
 80087de:	400b      	ands	r3, r1
 80087e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2220      	movs	r2, #32
 80087e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	e000      	b.n	8008800 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80087fe:	2302      	movs	r3, #2
  }
}
 8008800:	4618      	mov	r0, r3
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	fe00e800 	.word	0xfe00e800

0800880c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af02      	add	r7, sp, #8
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	4608      	mov	r0, r1
 8008816:	4611      	mov	r1, r2
 8008818:	461a      	mov	r2, r3
 800881a:	4603      	mov	r3, r0
 800881c:	817b      	strh	r3, [r7, #10]
 800881e:	460b      	mov	r3, r1
 8008820:	813b      	strh	r3, [r7, #8]
 8008822:	4613      	mov	r3, r2
 8008824:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b20      	cmp	r3, #32
 8008830:	f040 80fd 	bne.w	8008a2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d002      	beq.n	8008840 <HAL_I2C_Mem_Read+0x34>
 800883a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800883c:	2b00      	cmp	r3, #0
 800883e:	d105      	bne.n	800884c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008846:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e0f1      	b.n	8008a30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008852:	2b01      	cmp	r3, #1
 8008854:	d101      	bne.n	800885a <HAL_I2C_Mem_Read+0x4e>
 8008856:	2302      	movs	r3, #2
 8008858:	e0ea      	b.n	8008a30 <HAL_I2C_Mem_Read+0x224>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008862:	f7fc fcf7 	bl	8005254 <HAL_GetTick>
 8008866:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	2319      	movs	r3, #25
 800886e:	2201      	movs	r2, #1
 8008870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 f9af 	bl	8008bd8 <I2C_WaitOnFlagUntilTimeout>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e0d5      	b.n	8008a30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2222      	movs	r2, #34	; 0x22
 8008888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2240      	movs	r2, #64	; 0x40
 8008890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6a3a      	ldr	r2, [r7, #32]
 800889e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80088a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088ac:	88f8      	ldrh	r0, [r7, #6]
 80088ae:	893a      	ldrh	r2, [r7, #8]
 80088b0:	8979      	ldrh	r1, [r7, #10]
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	9301      	str	r3, [sp, #4]
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	4603      	mov	r3, r0
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 f913 	bl	8008ae8 <I2C_RequestMemoryRead>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d005      	beq.n	80088d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e0ad      	b.n	8008a30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088d8:	b29b      	uxth	r3, r3
 80088da:	2bff      	cmp	r3, #255	; 0xff
 80088dc:	d90e      	bls.n	80088fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	22ff      	movs	r2, #255	; 0xff
 80088e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	8979      	ldrh	r1, [r7, #10]
 80088ec:	4b52      	ldr	r3, [pc, #328]	; (8008a38 <HAL_I2C_Mem_Read+0x22c>)
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 fbbf 	bl	8009078 <I2C_TransferConfig>
 80088fa:	e00f      	b.n	800891c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008900:	b29a      	uxth	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800890a:	b2da      	uxtb	r2, r3
 800890c:	8979      	ldrh	r1, [r7, #10]
 800890e:	4b4a      	ldr	r3, [pc, #296]	; (8008a38 <HAL_I2C_Mem_Read+0x22c>)
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 fbae 	bl	8009078 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	2200      	movs	r2, #0
 8008924:	2104      	movs	r1, #4
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 f956 	bl	8008bd8 <I2C_WaitOnFlagUntilTimeout>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e07c      	b.n	8008a30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	b2d2      	uxtb	r2, r2
 8008942:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	1c5a      	adds	r2, r3, #1
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008952:	3b01      	subs	r3, #1
 8008954:	b29a      	uxth	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800895e:	b29b      	uxth	r3, r3
 8008960:	3b01      	subs	r3, #1
 8008962:	b29a      	uxth	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800896c:	b29b      	uxth	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d034      	beq.n	80089dc <HAL_I2C_Mem_Read+0x1d0>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008976:	2b00      	cmp	r3, #0
 8008978:	d130      	bne.n	80089dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008980:	2200      	movs	r2, #0
 8008982:	2180      	movs	r1, #128	; 0x80
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 f927 	bl	8008bd8 <I2C_WaitOnFlagUntilTimeout>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e04d      	b.n	8008a30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008998:	b29b      	uxth	r3, r3
 800899a:	2bff      	cmp	r3, #255	; 0xff
 800899c:	d90e      	bls.n	80089bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	22ff      	movs	r2, #255	; 0xff
 80089a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	8979      	ldrh	r1, [r7, #10]
 80089ac:	2300      	movs	r3, #0
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 fb5f 	bl	8009078 <I2C_TransferConfig>
 80089ba:	e00f      	b.n	80089dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	8979      	ldrh	r1, [r7, #10]
 80089ce:	2300      	movs	r3, #0
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 fb4e 	bl	8009078 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d19a      	bne.n	800891c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 f994 	bl	8008d18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e01a      	b.n	8008a30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2220      	movs	r2, #32
 8008a00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6859      	ldr	r1, [r3, #4]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <HAL_I2C_Mem_Read+0x230>)
 8008a0e:	400b      	ands	r3, r1
 8008a10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	e000      	b.n	8008a30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008a2e:	2302      	movs	r3, #2
  }
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	80002400 	.word	0x80002400
 8008a3c:	fe00e800 	.word	0xfe00e800

08008a40 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af02      	add	r7, sp, #8
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	4608      	mov	r0, r1
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4603      	mov	r3, r0
 8008a50:	817b      	strh	r3, [r7, #10]
 8008a52:	460b      	mov	r3, r1
 8008a54:	813b      	strh	r3, [r7, #8]
 8008a56:	4613      	mov	r3, r2
 8008a58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008a5a:	88fb      	ldrh	r3, [r7, #6]
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	8979      	ldrh	r1, [r7, #10]
 8008a60:	4b20      	ldr	r3, [pc, #128]	; (8008ae4 <I2C_RequestMemoryWrite+0xa4>)
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 fb05 	bl	8009078 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a6e:	69fa      	ldr	r2, [r7, #28]
 8008a70:	69b9      	ldr	r1, [r7, #24]
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 f909 	bl	8008c8a <I2C_WaitOnTXISFlagUntilTimeout>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e02c      	b.n	8008adc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a82:	88fb      	ldrh	r3, [r7, #6]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d105      	bne.n	8008a94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a88:	893b      	ldrh	r3, [r7, #8]
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	629a      	str	r2, [r3, #40]	; 0x28
 8008a92:	e015      	b.n	8008ac0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008a94:	893b      	ldrh	r3, [r7, #8]
 8008a96:	0a1b      	lsrs	r3, r3, #8
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008aa2:	69fa      	ldr	r2, [r7, #28]
 8008aa4:	69b9      	ldr	r1, [r7, #24]
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 f8ef 	bl	8008c8a <I2C_WaitOnTXISFlagUntilTimeout>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e012      	b.n	8008adc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ab6:	893b      	ldrh	r3, [r7, #8]
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	2180      	movs	r1, #128	; 0x80
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 f884 	bl	8008bd8 <I2C_WaitOnFlagUntilTimeout>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e000      	b.n	8008adc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	80002000 	.word	0x80002000

08008ae8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af02      	add	r7, sp, #8
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	4608      	mov	r0, r1
 8008af2:	4611      	mov	r1, r2
 8008af4:	461a      	mov	r2, r3
 8008af6:	4603      	mov	r3, r0
 8008af8:	817b      	strh	r3, [r7, #10]
 8008afa:	460b      	mov	r3, r1
 8008afc:	813b      	strh	r3, [r7, #8]
 8008afe:	4613      	mov	r3, r2
 8008b00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	8979      	ldrh	r1, [r7, #10]
 8008b08:	4b20      	ldr	r3, [pc, #128]	; (8008b8c <I2C_RequestMemoryRead+0xa4>)
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 fab2 	bl	8009078 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b14:	69fa      	ldr	r2, [r7, #28]
 8008b16:	69b9      	ldr	r1, [r7, #24]
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 f8b6 	bl	8008c8a <I2C_WaitOnTXISFlagUntilTimeout>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e02c      	b.n	8008b82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b28:	88fb      	ldrh	r3, [r7, #6]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d105      	bne.n	8008b3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b2e:	893b      	ldrh	r3, [r7, #8]
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	629a      	str	r2, [r3, #40]	; 0x28
 8008b38:	e015      	b.n	8008b66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b3a:	893b      	ldrh	r3, [r7, #8]
 8008b3c:	0a1b      	lsrs	r3, r3, #8
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b48:	69fa      	ldr	r2, [r7, #28]
 8008b4a:	69b9      	ldr	r1, [r7, #24]
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 f89c 	bl	8008c8a <I2C_WaitOnTXISFlagUntilTimeout>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e012      	b.n	8008b82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b5c:	893b      	ldrh	r3, [r7, #8]
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2140      	movs	r1, #64	; 0x40
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f000 f831 	bl	8008bd8 <I2C_WaitOnFlagUntilTimeout>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e000      	b.n	8008b82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	80002000 	.word	0x80002000

08008b90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d103      	bne.n	8008bae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2200      	movs	r2, #0
 8008bac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	f003 0301 	and.w	r3, r3, #1
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d007      	beq.n	8008bcc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	699a      	ldr	r2, [r3, #24]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f042 0201 	orr.w	r2, r2, #1
 8008bca:	619a      	str	r2, [r3, #24]
  }
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	603b      	str	r3, [r7, #0]
 8008be4:	4613      	mov	r3, r2
 8008be6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008be8:	e03b      	b.n	8008c62 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bea:	69ba      	ldr	r2, [r7, #24]
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f000 f962 	bl	8008eb8 <I2C_IsErrorOccurred>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e041      	b.n	8008c82 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c04:	d02d      	beq.n	8008c62 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c06:	f7fc fb25 	bl	8005254 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d302      	bcc.n	8008c1c <I2C_WaitOnFlagUntilTimeout+0x44>
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d122      	bne.n	8008c62 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	699a      	ldr	r2, [r3, #24]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	4013      	ands	r3, r2
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	bf0c      	ite	eq
 8008c2c:	2301      	moveq	r3, #1
 8008c2e:	2300      	movne	r3, #0
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	461a      	mov	r2, r3
 8008c34:	79fb      	ldrb	r3, [r7, #7]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d113      	bne.n	8008c62 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3e:	f043 0220 	orr.w	r2, r3, #32
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e00f      	b.n	8008c82 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	699a      	ldr	r2, [r3, #24]
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	bf0c      	ite	eq
 8008c72:	2301      	moveq	r3, #1
 8008c74:	2300      	movne	r3, #0
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	461a      	mov	r2, r3
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d0b4      	beq.n	8008bea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c96:	e033      	b.n	8008d00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 f90b 	bl	8008eb8 <I2C_IsErrorOccurred>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d001      	beq.n	8008cac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e031      	b.n	8008d10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb2:	d025      	beq.n	8008d00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cb4:	f7fc face 	bl	8005254 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d302      	bcc.n	8008cca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d11a      	bne.n	8008d00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d013      	beq.n	8008d00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cdc:	f043 0220 	orr.w	r2, r3, #32
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e007      	b.n	8008d10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	f003 0302 	and.w	r3, r3, #2
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d1c4      	bne.n	8008c98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d24:	e02f      	b.n	8008d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	68b9      	ldr	r1, [r7, #8]
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 f8c4 	bl	8008eb8 <I2C_IsErrorOccurred>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e02d      	b.n	8008d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d3a:	f7fc fa8b 	bl	8005254 <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d302      	bcc.n	8008d50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d11a      	bne.n	8008d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	f003 0320 	and.w	r3, r3, #32
 8008d5a:	2b20      	cmp	r3, #32
 8008d5c:	d013      	beq.n	8008d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d62:	f043 0220 	orr.w	r2, r3, #32
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e007      	b.n	8008d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	f003 0320 	and.w	r3, r3, #32
 8008d90:	2b20      	cmp	r3, #32
 8008d92:	d1c8      	bne.n	8008d26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008db0:	e071      	b.n	8008e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	68b9      	ldr	r1, [r7, #8]
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 f87e 	bl	8008eb8 <I2C_IsErrorOccurred>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	f003 0320 	and.w	r3, r3, #32
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	d13b      	bne.n	8008e4c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d138      	bne.n	8008e4c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	d105      	bne.n	8008df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	f003 0310 	and.w	r3, r3, #16
 8008dfe:	2b10      	cmp	r3, #16
 8008e00:	d121      	bne.n	8008e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2210      	movs	r2, #16
 8008e08:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2204      	movs	r2, #4
 8008e0e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2220      	movs	r2, #32
 8008e16:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6859      	ldr	r1, [r3, #4]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	4b24      	ldr	r3, [pc, #144]	; (8008eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008e24:	400b      	ands	r3, r1
 8008e26:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	75fb      	strb	r3, [r7, #23]
 8008e44:	e002      	b.n	8008e4c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008e4c:	f7fc fa02 	bl	8005254 <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d302      	bcc.n	8008e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d119      	bne.n	8008e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d116      	bne.n	8008e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	f003 0304 	and.w	r3, r3, #4
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d00f      	beq.n	8008e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7a:	f043 0220 	orr.w	r2, r3, #32
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2220      	movs	r2, #32
 8008e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d002      	beq.n	8008eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d083      	beq.n	8008db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	fe00e800 	.word	0xfe00e800

08008eb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08a      	sub	sp, #40	; 0x28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	f003 0310 	and.w	r3, r3, #16
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d068      	beq.n	8008fb6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2210      	movs	r2, #16
 8008eea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008eec:	e049      	b.n	8008f82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef4:	d045      	beq.n	8008f82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ef6:	f7fc f9ad 	bl	8005254 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d302      	bcc.n	8008f0c <I2C_IsErrorOccurred+0x54>
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d13a      	bne.n	8008f82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f2e:	d121      	bne.n	8008f74 <I2C_IsErrorOccurred+0xbc>
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f36:	d01d      	beq.n	8008f74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008f38:	7cfb      	ldrb	r3, [r7, #19]
 8008f3a:	2b20      	cmp	r3, #32
 8008f3c:	d01a      	beq.n	8008f74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685a      	ldr	r2, [r3, #4]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008f4e:	f7fc f981 	bl	8005254 <HAL_GetTick>
 8008f52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f54:	e00e      	b.n	8008f74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008f56:	f7fc f97d 	bl	8005254 <HAL_GetTick>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	2b19      	cmp	r3, #25
 8008f62:	d907      	bls.n	8008f74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	f043 0320 	orr.w	r3, r3, #32
 8008f6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008f72:	e006      	b.n	8008f82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	f003 0320 	and.w	r3, r3, #32
 8008f7e:	2b20      	cmp	r3, #32
 8008f80:	d1e9      	bne.n	8008f56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	f003 0320 	and.w	r3, r3, #32
 8008f8c:	2b20      	cmp	r3, #32
 8008f8e:	d003      	beq.n	8008f98 <I2C_IsErrorOccurred+0xe0>
 8008f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d0aa      	beq.n	8008eee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d103      	bne.n	8008fa8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2220      	movs	r2, #32
 8008fa6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	f043 0304 	orr.w	r3, r3, #4
 8008fae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00b      	beq.n	8008fe0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	f043 0301 	orr.w	r3, r3, #1
 8008fce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008fd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00b      	beq.n	8009002 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	f043 0308 	orr.w	r3, r3, #8
 8008ff0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ffa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00b      	beq.n	8009024 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	f043 0302 	orr.w	r3, r3, #2
 8009012:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800901c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009028:	2b00      	cmp	r3, #0
 800902a:	d01c      	beq.n	8009066 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f7ff fdaf 	bl	8008b90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6859      	ldr	r1, [r3, #4]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <I2C_IsErrorOccurred+0x1bc>)
 800903e:	400b      	ands	r3, r1
 8009040:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	431a      	orrs	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2220      	movs	r2, #32
 8009052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800906a:	4618      	mov	r0, r3
 800906c:	3728      	adds	r7, #40	; 0x28
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	fe00e800 	.word	0xfe00e800

08009078 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009078:	b480      	push	{r7}
 800907a:	b087      	sub	sp, #28
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	607b      	str	r3, [r7, #4]
 8009082:	460b      	mov	r3, r1
 8009084:	817b      	strh	r3, [r7, #10]
 8009086:	4613      	mov	r3, r2
 8009088:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800908a:	897b      	ldrh	r3, [r7, #10]
 800908c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009090:	7a7b      	ldrb	r3, [r7, #9]
 8009092:	041b      	lsls	r3, r3, #16
 8009094:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009098:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800909e:	6a3b      	ldr	r3, [r7, #32]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	0d5b      	lsrs	r3, r3, #21
 80090b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80090b6:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <I2C_TransferConfig+0x60>)
 80090b8:	430b      	orrs	r3, r1
 80090ba:	43db      	mvns	r3, r3
 80090bc:	ea02 0103 	and.w	r1, r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80090ca:	bf00      	nop
 80090cc:	371c      	adds	r7, #28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	03ff63ff 	.word	0x03ff63ff

080090dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b20      	cmp	r3, #32
 80090f0:	d138      	bne.n	8009164 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d101      	bne.n	8009100 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e032      	b.n	8009166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2224      	movs	r2, #36	; 0x24
 800910c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f022 0201 	bic.w	r2, r2, #1
 800911e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800912e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6819      	ldr	r1, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	430a      	orrs	r2, r1
 800913e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f042 0201 	orr.w	r2, r2, #1
 800914e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2220      	movs	r2, #32
 8009154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	e000      	b.n	8009166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009164:	2302      	movs	r3, #2
  }
}
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009172:	b480      	push	{r7}
 8009174:	b085      	sub	sp, #20
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b20      	cmp	r3, #32
 8009186:	d139      	bne.n	80091fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800918e:	2b01      	cmp	r3, #1
 8009190:	d101      	bne.n	8009196 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009192:	2302      	movs	r3, #2
 8009194:	e033      	b.n	80091fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2224      	movs	r2, #36	; 0x24
 80091a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 0201 	bic.w	r2, r2, #1
 80091b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80091c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f042 0201 	orr.w	r2, r2, #1
 80091e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2220      	movs	r2, #32
 80091ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	e000      	b.n	80091fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80091fc:	2302      	movs	r3, #2
  }
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e041      	b.n	80092a0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009224:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f245 5255 	movw	r2, #21845	; 0x5555
 800922e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	6852      	ldr	r2, [r2, #4]
 8009238:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	6892      	ldr	r2, [r2, #8]
 8009242:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009244:	f7fc f806 	bl	8005254 <HAL_GetTick>
 8009248:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800924a:	e00f      	b.n	800926c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800924c:	f7fc f802 	bl	8005254 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	2b31      	cmp	r3, #49	; 0x31
 8009258:	d908      	bls.n	800926c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	f003 0307 	and.w	r3, r3, #7
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009268:	2303      	movs	r3, #3
 800926a:	e019      	b.n	80092a0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	f003 0307 	and.w	r3, r3, #7
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e8      	bne.n	800924c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	691a      	ldr	r2, [r3, #16]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	429a      	cmp	r2, r3
 8009286:	d005      	beq.n	8009294 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	68d2      	ldr	r2, [r2, #12]
 8009290:	611a      	str	r2, [r3, #16]
 8009292:	e004      	b.n	800929e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800929c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e0c0      	b.n	800943c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d106      	bne.n	80092d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7fb faea 	bl	80048a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2203      	movs	r2, #3
 80092d8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f002 fe29 	bl	800bf38 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092e6:	2300      	movs	r3, #0
 80092e8:	73fb      	strb	r3, [r7, #15]
 80092ea:	e03e      	b.n	800936a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80092ec:	7bfa      	ldrb	r2, [r7, #15]
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	4613      	mov	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	00db      	lsls	r3, r3, #3
 80092f8:	440b      	add	r3, r1
 80092fa:	3311      	adds	r3, #17
 80092fc:	2201      	movs	r2, #1
 80092fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009300:	7bfa      	ldrb	r2, [r7, #15]
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	00db      	lsls	r3, r3, #3
 800930c:	440b      	add	r3, r1
 800930e:	3310      	adds	r3, #16
 8009310:	7bfa      	ldrb	r2, [r7, #15]
 8009312:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009314:	7bfa      	ldrb	r2, [r7, #15]
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	4613      	mov	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	00db      	lsls	r3, r3, #3
 8009320:	440b      	add	r3, r1
 8009322:	3313      	adds	r3, #19
 8009324:	2200      	movs	r2, #0
 8009326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009328:	7bfa      	ldrb	r2, [r7, #15]
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	4613      	mov	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	00db      	lsls	r3, r3, #3
 8009334:	440b      	add	r3, r1
 8009336:	3320      	adds	r3, #32
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800933c:	7bfa      	ldrb	r2, [r7, #15]
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	4613      	mov	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	440b      	add	r3, r1
 800934a:	3324      	adds	r3, #36	; 0x24
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009350:	7bfb      	ldrb	r3, [r7, #15]
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	1c5a      	adds	r2, r3, #1
 8009356:	4613      	mov	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	00db      	lsls	r3, r3, #3
 800935e:	440b      	add	r3, r1
 8009360:	2200      	movs	r2, #0
 8009362:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	3301      	adds	r3, #1
 8009368:	73fb      	strb	r3, [r7, #15]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	791b      	ldrb	r3, [r3, #4]
 800936e:	7bfa      	ldrb	r2, [r7, #15]
 8009370:	429a      	cmp	r2, r3
 8009372:	d3bb      	bcc.n	80092ec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009374:	2300      	movs	r3, #0
 8009376:	73fb      	strb	r3, [r7, #15]
 8009378:	e044      	b.n	8009404 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800937a:	7bfa      	ldrb	r2, [r7, #15]
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	4613      	mov	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	00db      	lsls	r3, r3, #3
 8009386:	440b      	add	r3, r1
 8009388:	f203 1351 	addw	r3, r3, #337	; 0x151
 800938c:	2200      	movs	r2, #0
 800938e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009390:	7bfa      	ldrb	r2, [r7, #15]
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	4613      	mov	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	00db      	lsls	r3, r3, #3
 800939c:	440b      	add	r3, r1
 800939e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093a2:	7bfa      	ldrb	r2, [r7, #15]
 80093a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80093a6:	7bfa      	ldrb	r2, [r7, #15]
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	4613      	mov	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	00db      	lsls	r3, r3, #3
 80093b2:	440b      	add	r3, r1
 80093b4:	f203 1353 	addw	r3, r3, #339	; 0x153
 80093b8:	2200      	movs	r2, #0
 80093ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80093bc:	7bfa      	ldrb	r2, [r7, #15]
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	4613      	mov	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	440b      	add	r3, r1
 80093ca:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80093ce:	2200      	movs	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80093d2:	7bfa      	ldrb	r2, [r7, #15]
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	4613      	mov	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	00db      	lsls	r3, r3, #3
 80093de:	440b      	add	r3, r1
 80093e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80093e8:	7bfa      	ldrb	r2, [r7, #15]
 80093ea:	6879      	ldr	r1, [r7, #4]
 80093ec:	4613      	mov	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	00db      	lsls	r3, r3, #3
 80093f4:	440b      	add	r3, r1
 80093f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80093fa:	2200      	movs	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	3301      	adds	r3, #1
 8009402:	73fb      	strb	r3, [r7, #15]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	791b      	ldrb	r3, [r3, #4]
 8009408:	7bfa      	ldrb	r2, [r7, #15]
 800940a:	429a      	cmp	r2, r3
 800940c:	d3b5      	bcc.n	800937a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3304      	adds	r3, #4
 8009416:	e893 0006 	ldmia.w	r3, {r1, r2}
 800941a:	f002 fda8 	bl	800bf6e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	7a9b      	ldrb	r3, [r3, #10]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d102      	bne.n	800943a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f805 	bl	8009444 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009468:	b29b      	uxth	r3, r3
 800946a:	f043 0301 	orr.w	r3, r3, #1
 800946e:	b29a      	uxth	r2, r3
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800947c:	b29b      	uxth	r3, r3
 800947e:	f043 0302 	orr.w	r3, r3, #2
 8009482:	b29a      	uxth	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d141      	bne.n	800952a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80094a6:	4b4b      	ldr	r3, [pc, #300]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80094ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094b2:	d131      	bne.n	8009518 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80094b4:	4b47      	ldr	r3, [pc, #284]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094ba:	4a46      	ldr	r2, [pc, #280]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80094c4:	4b43      	ldr	r3, [pc, #268]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80094cc:	4a41      	ldr	r2, [pc, #260]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80094d4:	4b40      	ldr	r3, [pc, #256]	; (80095d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2232      	movs	r2, #50	; 0x32
 80094da:	fb02 f303 	mul.w	r3, r2, r3
 80094de:	4a3f      	ldr	r2, [pc, #252]	; (80095dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80094e0:	fba2 2303 	umull	r2, r3, r2, r3
 80094e4:	0c9b      	lsrs	r3, r3, #18
 80094e6:	3301      	adds	r3, #1
 80094e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80094ea:	e002      	b.n	80094f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3b01      	subs	r3, #1
 80094f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80094f2:	4b38      	ldr	r3, [pc, #224]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094fe:	d102      	bne.n	8009506 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1f2      	bne.n	80094ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009506:	4b33      	ldr	r3, [pc, #204]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800950e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009512:	d158      	bne.n	80095c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e057      	b.n	80095c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009518:	4b2e      	ldr	r3, [pc, #184]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800951a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800951e:	4a2d      	ldr	r2, [pc, #180]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009524:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009528:	e04d      	b.n	80095c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009530:	d141      	bne.n	80095b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009532:	4b28      	ldr	r3, [pc, #160]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800953a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800953e:	d131      	bne.n	80095a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009540:	4b24      	ldr	r3, [pc, #144]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009546:	4a23      	ldr	r2, [pc, #140]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800954c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009550:	4b20      	ldr	r3, [pc, #128]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009558:	4a1e      	ldr	r2, [pc, #120]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800955a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800955e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009560:	4b1d      	ldr	r3, [pc, #116]	; (80095d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2232      	movs	r2, #50	; 0x32
 8009566:	fb02 f303 	mul.w	r3, r2, r3
 800956a:	4a1c      	ldr	r2, [pc, #112]	; (80095dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800956c:	fba2 2303 	umull	r2, r3, r2, r3
 8009570:	0c9b      	lsrs	r3, r3, #18
 8009572:	3301      	adds	r3, #1
 8009574:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009576:	e002      	b.n	800957e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3b01      	subs	r3, #1
 800957c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800957e:	4b15      	ldr	r3, [pc, #84]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800958a:	d102      	bne.n	8009592 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1f2      	bne.n	8009578 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009592:	4b10      	ldr	r3, [pc, #64]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800959a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800959e:	d112      	bne.n	80095c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e011      	b.n	80095c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80095a4:	4b0b      	ldr	r3, [pc, #44]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095aa:	4a0a      	ldr	r2, [pc, #40]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80095b4:	e007      	b.n	80095c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80095b6:	4b07      	ldr	r3, [pc, #28]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80095be:	4a05      	ldr	r2, [pc, #20]	; (80095d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80095c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80095c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	40007000 	.word	0x40007000
 80095d8:	20000000 	.word	0x20000000
 80095dc:	431bde83 	.word	0x431bde83

080095e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80095e0:	b480      	push	{r7}
 80095e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80095e4:	4b05      	ldr	r3, [pc, #20]	; (80095fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	4a04      	ldr	r2, [pc, #16]	; (80095fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80095ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095ee:	6093      	str	r3, [r2, #8]
}
 80095f0:	bf00      	nop
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	40007000 	.word	0x40007000

08009600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e2fe      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	2b00      	cmp	r3, #0
 800961c:	d075      	beq.n	800970a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800961e:	4b97      	ldr	r3, [pc, #604]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f003 030c 	and.w	r3, r3, #12
 8009626:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009628:	4b94      	ldr	r3, [pc, #592]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	f003 0303 	and.w	r3, r3, #3
 8009630:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	2b0c      	cmp	r3, #12
 8009636:	d102      	bne.n	800963e <HAL_RCC_OscConfig+0x3e>
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	2b03      	cmp	r3, #3
 800963c:	d002      	beq.n	8009644 <HAL_RCC_OscConfig+0x44>
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	2b08      	cmp	r3, #8
 8009642:	d10b      	bne.n	800965c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009644:	4b8d      	ldr	r3, [pc, #564]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d05b      	beq.n	8009708 <HAL_RCC_OscConfig+0x108>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d157      	bne.n	8009708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e2d9      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009664:	d106      	bne.n	8009674 <HAL_RCC_OscConfig+0x74>
 8009666:	4b85      	ldr	r3, [pc, #532]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a84      	ldr	r2, [pc, #528]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 800966c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009670:	6013      	str	r3, [r2, #0]
 8009672:	e01d      	b.n	80096b0 <HAL_RCC_OscConfig+0xb0>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800967c:	d10c      	bne.n	8009698 <HAL_RCC_OscConfig+0x98>
 800967e:	4b7f      	ldr	r3, [pc, #508]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a7e      	ldr	r2, [pc, #504]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009688:	6013      	str	r3, [r2, #0]
 800968a:	4b7c      	ldr	r3, [pc, #496]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a7b      	ldr	r2, [pc, #492]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	e00b      	b.n	80096b0 <HAL_RCC_OscConfig+0xb0>
 8009698:	4b78      	ldr	r3, [pc, #480]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a77      	ldr	r2, [pc, #476]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 800969e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	4b75      	ldr	r3, [pc, #468]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a74      	ldr	r2, [pc, #464]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 80096aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d013      	beq.n	80096e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096b8:	f7fb fdcc 	bl	8005254 <HAL_GetTick>
 80096bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096be:	e008      	b.n	80096d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096c0:	f7fb fdc8 	bl	8005254 <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	2b64      	cmp	r3, #100	; 0x64
 80096cc:	d901      	bls.n	80096d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e29e      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096d2:	4b6a      	ldr	r3, [pc, #424]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0f0      	beq.n	80096c0 <HAL_RCC_OscConfig+0xc0>
 80096de:	e014      	b.n	800970a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e0:	f7fb fdb8 	bl	8005254 <HAL_GetTick>
 80096e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80096e6:	e008      	b.n	80096fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096e8:	f7fb fdb4 	bl	8005254 <HAL_GetTick>
 80096ec:	4602      	mov	r2, r0
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	2b64      	cmp	r3, #100	; 0x64
 80096f4:	d901      	bls.n	80096fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e28a      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80096fa:	4b60      	ldr	r3, [pc, #384]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1f0      	bne.n	80096e8 <HAL_RCC_OscConfig+0xe8>
 8009706:	e000      	b.n	800970a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d075      	beq.n	8009802 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009716:	4b59      	ldr	r3, [pc, #356]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f003 030c 	and.w	r3, r3, #12
 800971e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009720:	4b56      	ldr	r3, [pc, #344]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f003 0303 	and.w	r3, r3, #3
 8009728:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	2b0c      	cmp	r3, #12
 800972e:	d102      	bne.n	8009736 <HAL_RCC_OscConfig+0x136>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	2b02      	cmp	r3, #2
 8009734:	d002      	beq.n	800973c <HAL_RCC_OscConfig+0x13c>
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	2b04      	cmp	r3, #4
 800973a:	d11f      	bne.n	800977c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800973c:	4b4f      	ldr	r3, [pc, #316]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009744:	2b00      	cmp	r3, #0
 8009746:	d005      	beq.n	8009754 <HAL_RCC_OscConfig+0x154>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d101      	bne.n	8009754 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e25d      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009754:	4b49      	ldr	r3, [pc, #292]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	061b      	lsls	r3, r3, #24
 8009762:	4946      	ldr	r1, [pc, #280]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009764:	4313      	orrs	r3, r2
 8009766:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009768:	4b45      	ldr	r3, [pc, #276]	; (8009880 <HAL_RCC_OscConfig+0x280>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4618      	mov	r0, r3
 800976e:	f7fb fd25 	bl	80051bc <HAL_InitTick>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d043      	beq.n	8009800 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e249      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d023      	beq.n	80097cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009784:	4b3d      	ldr	r3, [pc, #244]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a3c      	ldr	r2, [pc, #240]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 800978a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800978e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009790:	f7fb fd60 	bl	8005254 <HAL_GetTick>
 8009794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009796:	e008      	b.n	80097aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009798:	f7fb fd5c 	bl	8005254 <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d901      	bls.n	80097aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e232      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80097aa:	4b34      	ldr	r3, [pc, #208]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d0f0      	beq.n	8009798 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097b6:	4b31      	ldr	r3, [pc, #196]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	061b      	lsls	r3, r3, #24
 80097c4:	492d      	ldr	r1, [pc, #180]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	604b      	str	r3, [r1, #4]
 80097ca:	e01a      	b.n	8009802 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097cc:	4b2b      	ldr	r3, [pc, #172]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a2a      	ldr	r2, [pc, #168]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 80097d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097d8:	f7fb fd3c 	bl	8005254 <HAL_GetTick>
 80097dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097de:	e008      	b.n	80097f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097e0:	f7fb fd38 	bl	8005254 <HAL_GetTick>
 80097e4:	4602      	mov	r2, r0
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d901      	bls.n	80097f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80097ee:	2303      	movs	r3, #3
 80097f0:	e20e      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097f2:	4b22      	ldr	r3, [pc, #136]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1f0      	bne.n	80097e0 <HAL_RCC_OscConfig+0x1e0>
 80097fe:	e000      	b.n	8009802 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009800:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0308 	and.w	r3, r3, #8
 800980a:	2b00      	cmp	r3, #0
 800980c:	d041      	beq.n	8009892 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d01c      	beq.n	8009850 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009816:	4b19      	ldr	r3, [pc, #100]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800981c:	4a17      	ldr	r2, [pc, #92]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 800981e:	f043 0301 	orr.w	r3, r3, #1
 8009822:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009826:	f7fb fd15 	bl	8005254 <HAL_GetTick>
 800982a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800982c:	e008      	b.n	8009840 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800982e:	f7fb fd11 	bl	8005254 <HAL_GetTick>
 8009832:	4602      	mov	r2, r0
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	2b02      	cmp	r3, #2
 800983a:	d901      	bls.n	8009840 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800983c:	2303      	movs	r3, #3
 800983e:	e1e7      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009840:	4b0e      	ldr	r3, [pc, #56]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009846:	f003 0302 	and.w	r3, r3, #2
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0ef      	beq.n	800982e <HAL_RCC_OscConfig+0x22e>
 800984e:	e020      	b.n	8009892 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009850:	4b0a      	ldr	r3, [pc, #40]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009856:	4a09      	ldr	r2, [pc, #36]	; (800987c <HAL_RCC_OscConfig+0x27c>)
 8009858:	f023 0301 	bic.w	r3, r3, #1
 800985c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009860:	f7fb fcf8 	bl	8005254 <HAL_GetTick>
 8009864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009866:	e00d      	b.n	8009884 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009868:	f7fb fcf4 	bl	8005254 <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	2b02      	cmp	r3, #2
 8009874:	d906      	bls.n	8009884 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e1ca      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
 800987a:	bf00      	nop
 800987c:	40021000 	.word	0x40021000
 8009880:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009884:	4b8c      	ldr	r3, [pc, #560]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800988a:	f003 0302 	and.w	r3, r3, #2
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1ea      	bne.n	8009868 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 0304 	and.w	r3, r3, #4
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 80a6 	beq.w	80099ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098a0:	2300      	movs	r3, #0
 80098a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80098a4:	4b84      	ldr	r3, [pc, #528]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 80098a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <HAL_RCC_OscConfig+0x2b4>
 80098b0:	2301      	movs	r3, #1
 80098b2:	e000      	b.n	80098b6 <HAL_RCC_OscConfig+0x2b6>
 80098b4:	2300      	movs	r3, #0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00d      	beq.n	80098d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098ba:	4b7f      	ldr	r3, [pc, #508]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 80098bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098be:	4a7e      	ldr	r2, [pc, #504]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 80098c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098c4:	6593      	str	r3, [r2, #88]	; 0x58
 80098c6:	4b7c      	ldr	r3, [pc, #496]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 80098c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80098d2:	2301      	movs	r3, #1
 80098d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098d6:	4b79      	ldr	r3, [pc, #484]	; (8009abc <HAL_RCC_OscConfig+0x4bc>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d118      	bne.n	8009914 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098e2:	4b76      	ldr	r3, [pc, #472]	; (8009abc <HAL_RCC_OscConfig+0x4bc>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a75      	ldr	r2, [pc, #468]	; (8009abc <HAL_RCC_OscConfig+0x4bc>)
 80098e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098ee:	f7fb fcb1 	bl	8005254 <HAL_GetTick>
 80098f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098f4:	e008      	b.n	8009908 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098f6:	f7fb fcad 	bl	8005254 <HAL_GetTick>
 80098fa:	4602      	mov	r2, r0
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	2b02      	cmp	r3, #2
 8009902:	d901      	bls.n	8009908 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009904:	2303      	movs	r3, #3
 8009906:	e183      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009908:	4b6c      	ldr	r3, [pc, #432]	; (8009abc <HAL_RCC_OscConfig+0x4bc>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009910:	2b00      	cmp	r3, #0
 8009912:	d0f0      	beq.n	80098f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d108      	bne.n	800992e <HAL_RCC_OscConfig+0x32e>
 800991c:	4b66      	ldr	r3, [pc, #408]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 800991e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009922:	4a65      	ldr	r2, [pc, #404]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009924:	f043 0301 	orr.w	r3, r3, #1
 8009928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800992c:	e024      	b.n	8009978 <HAL_RCC_OscConfig+0x378>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	2b05      	cmp	r3, #5
 8009934:	d110      	bne.n	8009958 <HAL_RCC_OscConfig+0x358>
 8009936:	4b60      	ldr	r3, [pc, #384]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800993c:	4a5e      	ldr	r2, [pc, #376]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 800993e:	f043 0304 	orr.w	r3, r3, #4
 8009942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009946:	4b5c      	ldr	r3, [pc, #368]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800994c:	4a5a      	ldr	r2, [pc, #360]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 800994e:	f043 0301 	orr.w	r3, r3, #1
 8009952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009956:	e00f      	b.n	8009978 <HAL_RCC_OscConfig+0x378>
 8009958:	4b57      	ldr	r3, [pc, #348]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 800995a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800995e:	4a56      	ldr	r2, [pc, #344]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009960:	f023 0301 	bic.w	r3, r3, #1
 8009964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009968:	4b53      	ldr	r3, [pc, #332]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 800996a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800996e:	4a52      	ldr	r2, [pc, #328]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009970:	f023 0304 	bic.w	r3, r3, #4
 8009974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d016      	beq.n	80099ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009980:	f7fb fc68 	bl	8005254 <HAL_GetTick>
 8009984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009986:	e00a      	b.n	800999e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009988:	f7fb fc64 	bl	8005254 <HAL_GetTick>
 800998c:	4602      	mov	r2, r0
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	f241 3288 	movw	r2, #5000	; 0x1388
 8009996:	4293      	cmp	r3, r2
 8009998:	d901      	bls.n	800999e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800999a:	2303      	movs	r3, #3
 800999c:	e138      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800999e:	4b46      	ldr	r3, [pc, #280]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 80099a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a4:	f003 0302 	and.w	r3, r3, #2
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d0ed      	beq.n	8009988 <HAL_RCC_OscConfig+0x388>
 80099ac:	e015      	b.n	80099da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099ae:	f7fb fc51 	bl	8005254 <HAL_GetTick>
 80099b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80099b4:	e00a      	b.n	80099cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099b6:	f7fb fc4d 	bl	8005254 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d901      	bls.n	80099cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e121      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80099cc:	4b3a      	ldr	r3, [pc, #232]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 80099ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099d2:	f003 0302 	and.w	r3, r3, #2
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1ed      	bne.n	80099b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80099da:	7ffb      	ldrb	r3, [r7, #31]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d105      	bne.n	80099ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099e0:	4b35      	ldr	r3, [pc, #212]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 80099e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099e4:	4a34      	ldr	r2, [pc, #208]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 80099e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0320 	and.w	r3, r3, #32
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d03c      	beq.n	8009a72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d01c      	beq.n	8009a3a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009a00:	4b2d      	ldr	r3, [pc, #180]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a06:	4a2c      	ldr	r2, [pc, #176]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009a08:	f043 0301 	orr.w	r3, r3, #1
 8009a0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a10:	f7fb fc20 	bl	8005254 <HAL_GetTick>
 8009a14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009a16:	e008      	b.n	8009a2a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009a18:	f7fb fc1c 	bl	8005254 <HAL_GetTick>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d901      	bls.n	8009a2a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e0f2      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009a2a:	4b23      	ldr	r3, [pc, #140]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a30:	f003 0302 	and.w	r3, r3, #2
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d0ef      	beq.n	8009a18 <HAL_RCC_OscConfig+0x418>
 8009a38:	e01b      	b.n	8009a72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009a3a:	4b1f      	ldr	r3, [pc, #124]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a40:	4a1d      	ldr	r2, [pc, #116]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009a42:	f023 0301 	bic.w	r3, r3, #1
 8009a46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a4a:	f7fb fc03 	bl	8005254 <HAL_GetTick>
 8009a4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009a50:	e008      	b.n	8009a64 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009a52:	f7fb fbff 	bl	8005254 <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d901      	bls.n	8009a64 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e0d5      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009a64:	4b14      	ldr	r3, [pc, #80]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1ef      	bne.n	8009a52 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 80c9 	beq.w	8009c0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a7c:	4b0e      	ldr	r3, [pc, #56]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	f003 030c 	and.w	r3, r3, #12
 8009a84:	2b0c      	cmp	r3, #12
 8009a86:	f000 8083 	beq.w	8009b90 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	69db      	ldr	r3, [r3, #28]
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d15e      	bne.n	8009b50 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a92:	4b09      	ldr	r3, [pc, #36]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a08      	ldr	r2, [pc, #32]	; (8009ab8 <HAL_RCC_OscConfig+0x4b8>)
 8009a98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a9e:	f7fb fbd9 	bl	8005254 <HAL_GetTick>
 8009aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009aa4:	e00c      	b.n	8009ac0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009aa6:	f7fb fbd5 	bl	8005254 <HAL_GetTick>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d905      	bls.n	8009ac0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e0ab      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
 8009ab8:	40021000 	.word	0x40021000
 8009abc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ac0:	4b55      	ldr	r3, [pc, #340]	; (8009c18 <HAL_RCC_OscConfig+0x618>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1ec      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009acc:	4b52      	ldr	r3, [pc, #328]	; (8009c18 <HAL_RCC_OscConfig+0x618>)
 8009ace:	68da      	ldr	r2, [r3, #12]
 8009ad0:	4b52      	ldr	r3, [pc, #328]	; (8009c1c <HAL_RCC_OscConfig+0x61c>)
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	6a11      	ldr	r1, [r2, #32]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009adc:	3a01      	subs	r2, #1
 8009ade:	0112      	lsls	r2, r2, #4
 8009ae0:	4311      	orrs	r1, r2
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009ae6:	0212      	lsls	r2, r2, #8
 8009ae8:	4311      	orrs	r1, r2
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009aee:	0852      	lsrs	r2, r2, #1
 8009af0:	3a01      	subs	r2, #1
 8009af2:	0552      	lsls	r2, r2, #21
 8009af4:	4311      	orrs	r1, r2
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009afa:	0852      	lsrs	r2, r2, #1
 8009afc:	3a01      	subs	r2, #1
 8009afe:	0652      	lsls	r2, r2, #25
 8009b00:	4311      	orrs	r1, r2
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009b06:	06d2      	lsls	r2, r2, #27
 8009b08:	430a      	orrs	r2, r1
 8009b0a:	4943      	ldr	r1, [pc, #268]	; (8009c18 <HAL_RCC_OscConfig+0x618>)
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b10:	4b41      	ldr	r3, [pc, #260]	; (8009c18 <HAL_RCC_OscConfig+0x618>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a40      	ldr	r2, [pc, #256]	; (8009c18 <HAL_RCC_OscConfig+0x618>)
 8009b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b1a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009b1c:	4b3e      	ldr	r3, [pc, #248]	; (8009c18 <HAL_RCC_OscConfig+0x618>)
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	4a3d      	ldr	r2, [pc, #244]	; (8009c18 <HAL_RCC_OscConfig+0x618>)
 8009b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b28:	f7fb fb94 	bl	8005254 <HAL_GetTick>
 8009b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b2e:	e008      	b.n	8009b42 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b30:	f7fb fb90 	bl	8005254 <HAL_GetTick>
 8009b34:	4602      	mov	r2, r0
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d901      	bls.n	8009b42 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e066      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b42:	4b35      	ldr	r3, [pc, #212]	; (8009c18 <HAL_RCC_OscConfig+0x618>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d0f0      	beq.n	8009b30 <HAL_RCC_OscConfig+0x530>
 8009b4e:	e05e      	b.n	8009c0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b50:	4b31      	ldr	r3, [pc, #196]	; (8009c18 <HAL_RCC_OscConfig+0x618>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a30      	ldr	r2, [pc, #192]	; (8009c18 <HAL_RCC_OscConfig+0x618>)
 8009b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b5c:	f7fb fb7a 	bl	8005254 <HAL_GetTick>
 8009b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b62:	e008      	b.n	8009b76 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b64:	f7fb fb76 	bl	8005254 <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d901      	bls.n	8009b76 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e04c      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b76:	4b28      	ldr	r3, [pc, #160]	; (8009c18 <HAL_RCC_OscConfig+0x618>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1f0      	bne.n	8009b64 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009b82:	4b25      	ldr	r3, [pc, #148]	; (8009c18 <HAL_RCC_OscConfig+0x618>)
 8009b84:	68da      	ldr	r2, [r3, #12]
 8009b86:	4924      	ldr	r1, [pc, #144]	; (8009c18 <HAL_RCC_OscConfig+0x618>)
 8009b88:	4b25      	ldr	r3, [pc, #148]	; (8009c20 <HAL_RCC_OscConfig+0x620>)
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	60cb      	str	r3, [r1, #12]
 8009b8e:	e03e      	b.n	8009c0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	69db      	ldr	r3, [r3, #28]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d101      	bne.n	8009b9c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e039      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009b9c:	4b1e      	ldr	r3, [pc, #120]	; (8009c18 <HAL_RCC_OscConfig+0x618>)
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	f003 0203 	and.w	r2, r3, #3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a1b      	ldr	r3, [r3, #32]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d12c      	bne.n	8009c0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d123      	bne.n	8009c0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d11b      	bne.n	8009c0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bdc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d113      	bne.n	8009c0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bec:	085b      	lsrs	r3, r3, #1
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d109      	bne.n	8009c0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c00:	085b      	lsrs	r3, r3, #1
 8009c02:	3b01      	subs	r3, #1
 8009c04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d001      	beq.n	8009c0e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e000      	b.n	8009c10 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3720      	adds	r7, #32
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	40021000 	.word	0x40021000
 8009c1c:	019f800c 	.word	0x019f800c
 8009c20:	feeefffc 	.word	0xfeeefffc

08009c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e11e      	b.n	8009e7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c3c:	4b91      	ldr	r3, [pc, #580]	; (8009e84 <HAL_RCC_ClockConfig+0x260>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 030f 	and.w	r3, r3, #15
 8009c44:	683a      	ldr	r2, [r7, #0]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d910      	bls.n	8009c6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c4a:	4b8e      	ldr	r3, [pc, #568]	; (8009e84 <HAL_RCC_ClockConfig+0x260>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f023 020f 	bic.w	r2, r3, #15
 8009c52:	498c      	ldr	r1, [pc, #560]	; (8009e84 <HAL_RCC_ClockConfig+0x260>)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c5a:	4b8a      	ldr	r3, [pc, #552]	; (8009e84 <HAL_RCC_ClockConfig+0x260>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 030f 	and.w	r3, r3, #15
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d001      	beq.n	8009c6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e106      	b.n	8009e7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d073      	beq.n	8009d60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	2b03      	cmp	r3, #3
 8009c7e:	d129      	bne.n	8009cd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c80:	4b81      	ldr	r3, [pc, #516]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d101      	bne.n	8009c90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e0f4      	b.n	8009e7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009c90:	f000 f9ca 	bl	800a028 <RCC_GetSysClockFreqFromPLLSource>
 8009c94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	4a7c      	ldr	r2, [pc, #496]	; (8009e8c <HAL_RCC_ClockConfig+0x268>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d93f      	bls.n	8009d1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009c9e:	4b7a      	ldr	r3, [pc, #488]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d009      	beq.n	8009cbe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d033      	beq.n	8009d1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d12f      	bne.n	8009d1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009cbe:	4b72      	ldr	r3, [pc, #456]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cc6:	4a70      	ldr	r2, [pc, #448]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ccc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009cce:	2380      	movs	r3, #128	; 0x80
 8009cd0:	617b      	str	r3, [r7, #20]
 8009cd2:	e024      	b.n	8009d1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d107      	bne.n	8009cec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009cdc:	4b6a      	ldr	r3, [pc, #424]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d109      	bne.n	8009cfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e0c6      	b.n	8009e7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009cec:	4b66      	ldr	r3, [pc, #408]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d101      	bne.n	8009cfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e0be      	b.n	8009e7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009cfc:	f000 f8ce 	bl	8009e9c <HAL_RCC_GetSysClockFreq>
 8009d00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	4a61      	ldr	r2, [pc, #388]	; (8009e8c <HAL_RCC_ClockConfig+0x268>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d909      	bls.n	8009d1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009d0a:	4b5f      	ldr	r3, [pc, #380]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d12:	4a5d      	ldr	r2, [pc, #372]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009d1a:	2380      	movs	r3, #128	; 0x80
 8009d1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d1e:	4b5a      	ldr	r3, [pc, #360]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f023 0203 	bic.w	r2, r3, #3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	4957      	ldr	r1, [pc, #348]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d30:	f7fb fa90 	bl	8005254 <HAL_GetTick>
 8009d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d36:	e00a      	b.n	8009d4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d38:	f7fb fa8c 	bl	8005254 <HAL_GetTick>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d901      	bls.n	8009d4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	e095      	b.n	8009e7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d4e:	4b4e      	ldr	r3, [pc, #312]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f003 020c 	and.w	r2, r3, #12
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d1eb      	bne.n	8009d38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0302 	and.w	r3, r3, #2
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d023      	beq.n	8009db4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0304 	and.w	r3, r3, #4
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d005      	beq.n	8009d84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d78:	4b43      	ldr	r3, [pc, #268]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	4a42      	ldr	r2, [pc, #264]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009d82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 0308 	and.w	r3, r3, #8
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d007      	beq.n	8009da0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009d90:	4b3d      	ldr	r3, [pc, #244]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009d98:	4a3b      	ldr	r2, [pc, #236]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009d9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009da0:	4b39      	ldr	r3, [pc, #228]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	4936      	ldr	r1, [pc, #216]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	608b      	str	r3, [r1, #8]
 8009db2:	e008      	b.n	8009dc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2b80      	cmp	r3, #128	; 0x80
 8009db8:	d105      	bne.n	8009dc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009dba:	4b33      	ldr	r3, [pc, #204]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	4a32      	ldr	r2, [pc, #200]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009dc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009dc6:	4b2f      	ldr	r3, [pc, #188]	; (8009e84 <HAL_RCC_ClockConfig+0x260>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 030f 	and.w	r3, r3, #15
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d21d      	bcs.n	8009e10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dd4:	4b2b      	ldr	r3, [pc, #172]	; (8009e84 <HAL_RCC_ClockConfig+0x260>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f023 020f 	bic.w	r2, r3, #15
 8009ddc:	4929      	ldr	r1, [pc, #164]	; (8009e84 <HAL_RCC_ClockConfig+0x260>)
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009de4:	f7fb fa36 	bl	8005254 <HAL_GetTick>
 8009de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dea:	e00a      	b.n	8009e02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dec:	f7fb fa32 	bl	8005254 <HAL_GetTick>
 8009df0:	4602      	mov	r2, r0
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d901      	bls.n	8009e02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e03b      	b.n	8009e7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e02:	4b20      	ldr	r3, [pc, #128]	; (8009e84 <HAL_RCC_ClockConfig+0x260>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 030f 	and.w	r3, r3, #15
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d1ed      	bne.n	8009dec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 0304 	and.w	r3, r3, #4
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d008      	beq.n	8009e2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e1c:	4b1a      	ldr	r3, [pc, #104]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	4917      	ldr	r1, [pc, #92]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0308 	and.w	r3, r3, #8
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d009      	beq.n	8009e4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e3a:	4b13      	ldr	r3, [pc, #76]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	490f      	ldr	r1, [pc, #60]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009e4e:	f000 f825 	bl	8009e9c <HAL_RCC_GetSysClockFreq>
 8009e52:	4602      	mov	r2, r0
 8009e54:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <HAL_RCC_ClockConfig+0x264>)
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	091b      	lsrs	r3, r3, #4
 8009e5a:	f003 030f 	and.w	r3, r3, #15
 8009e5e:	490c      	ldr	r1, [pc, #48]	; (8009e90 <HAL_RCC_ClockConfig+0x26c>)
 8009e60:	5ccb      	ldrb	r3, [r1, r3]
 8009e62:	f003 031f 	and.w	r3, r3, #31
 8009e66:	fa22 f303 	lsr.w	r3, r2, r3
 8009e6a:	4a0a      	ldr	r2, [pc, #40]	; (8009e94 <HAL_RCC_ClockConfig+0x270>)
 8009e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009e6e:	4b0a      	ldr	r3, [pc, #40]	; (8009e98 <HAL_RCC_ClockConfig+0x274>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fb f9a2 	bl	80051bc <HAL_InitTick>
 8009e78:	4603      	mov	r3, r0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	40022000 	.word	0x40022000
 8009e88:	40021000 	.word	0x40021000
 8009e8c:	04c4b400 	.word	0x04c4b400
 8009e90:	0800cf88 	.word	0x0800cf88
 8009e94:	20000000 	.word	0x20000000
 8009e98:	20000004 	.word	0x20000004

08009e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b087      	sub	sp, #28
 8009ea0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009ea2:	4b2c      	ldr	r3, [pc, #176]	; (8009f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	f003 030c 	and.w	r3, r3, #12
 8009eaa:	2b04      	cmp	r3, #4
 8009eac:	d102      	bne.n	8009eb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009eae:	4b2a      	ldr	r3, [pc, #168]	; (8009f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009eb0:	613b      	str	r3, [r7, #16]
 8009eb2:	e047      	b.n	8009f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009eb4:	4b27      	ldr	r3, [pc, #156]	; (8009f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	f003 030c 	and.w	r3, r3, #12
 8009ebc:	2b08      	cmp	r3, #8
 8009ebe:	d102      	bne.n	8009ec6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009ec0:	4b26      	ldr	r3, [pc, #152]	; (8009f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009ec2:	613b      	str	r3, [r7, #16]
 8009ec4:	e03e      	b.n	8009f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009ec6:	4b23      	ldr	r3, [pc, #140]	; (8009f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	f003 030c 	and.w	r3, r3, #12
 8009ece:	2b0c      	cmp	r3, #12
 8009ed0:	d136      	bne.n	8009f40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009ed2:	4b20      	ldr	r3, [pc, #128]	; (8009f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	f003 0303 	and.w	r3, r3, #3
 8009eda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009edc:	4b1d      	ldr	r3, [pc, #116]	; (8009f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	091b      	lsrs	r3, r3, #4
 8009ee2:	f003 030f 	and.w	r3, r3, #15
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b03      	cmp	r3, #3
 8009eee:	d10c      	bne.n	8009f0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009ef0:	4a1a      	ldr	r2, [pc, #104]	; (8009f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef8:	4a16      	ldr	r2, [pc, #88]	; (8009f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009efa:	68d2      	ldr	r2, [r2, #12]
 8009efc:	0a12      	lsrs	r2, r2, #8
 8009efe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009f02:	fb02 f303 	mul.w	r3, r2, r3
 8009f06:	617b      	str	r3, [r7, #20]
      break;
 8009f08:	e00c      	b.n	8009f24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009f0a:	4a13      	ldr	r2, [pc, #76]	; (8009f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f12:	4a10      	ldr	r2, [pc, #64]	; (8009f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f14:	68d2      	ldr	r2, [r2, #12]
 8009f16:	0a12      	lsrs	r2, r2, #8
 8009f18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009f1c:	fb02 f303 	mul.w	r3, r2, r3
 8009f20:	617b      	str	r3, [r7, #20]
      break;
 8009f22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009f24:	4b0b      	ldr	r3, [pc, #44]	; (8009f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	0e5b      	lsrs	r3, r3, #25
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	3301      	adds	r3, #1
 8009f30:	005b      	lsls	r3, r3, #1
 8009f32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f3c:	613b      	str	r3, [r7, #16]
 8009f3e:	e001      	b.n	8009f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009f44:	693b      	ldr	r3, [r7, #16]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	371c      	adds	r7, #28
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	40021000 	.word	0x40021000
 8009f58:	00f42400 	.word	0x00f42400
 8009f5c:	007a1200 	.word	0x007a1200

08009f60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f60:	b480      	push	{r7}
 8009f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f64:	4b03      	ldr	r3, [pc, #12]	; (8009f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f66:	681b      	ldr	r3, [r3, #0]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	20000000 	.word	0x20000000

08009f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009f7c:	f7ff fff0 	bl	8009f60 <HAL_RCC_GetHCLKFreq>
 8009f80:	4602      	mov	r2, r0
 8009f82:	4b06      	ldr	r3, [pc, #24]	; (8009f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	0a1b      	lsrs	r3, r3, #8
 8009f88:	f003 0307 	and.w	r3, r3, #7
 8009f8c:	4904      	ldr	r1, [pc, #16]	; (8009fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009f8e:	5ccb      	ldrb	r3, [r1, r3]
 8009f90:	f003 031f 	and.w	r3, r3, #31
 8009f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	40021000 	.word	0x40021000
 8009fa0:	0800cf98 	.word	0x0800cf98

08009fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009fa8:	f7ff ffda 	bl	8009f60 <HAL_RCC_GetHCLKFreq>
 8009fac:	4602      	mov	r2, r0
 8009fae:	4b06      	ldr	r3, [pc, #24]	; (8009fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	0adb      	lsrs	r3, r3, #11
 8009fb4:	f003 0307 	and.w	r3, r3, #7
 8009fb8:	4904      	ldr	r1, [pc, #16]	; (8009fcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8009fba:	5ccb      	ldrb	r3, [r1, r3]
 8009fbc:	f003 031f 	and.w	r3, r3, #31
 8009fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	40021000 	.word	0x40021000
 8009fcc:	0800cf98 	.word	0x0800cf98

08009fd0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8009fd4:	4b05      	ldr	r3, [pc, #20]	; (8009fec <HAL_RCC_EnableCSS+0x1c>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a04      	ldr	r2, [pc, #16]	; (8009fec <HAL_RCC_EnableCSS+0x1c>)
 8009fda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fde:	6013      	str	r3, [r2, #0]
}
 8009fe0:	bf00      	nop
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	40021000 	.word	0x40021000

08009ff0 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009ff4:	4b07      	ldr	r3, [pc, #28]	; (800a014 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a000:	d105      	bne.n	800a00e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a002:	f000 f809 	bl	800a018 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a006:	4b03      	ldr	r3, [pc, #12]	; (800a014 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a00c:	621a      	str	r2, [r3, #32]
  }
}
 800a00e:	bf00      	nop
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	40021000 	.word	0x40021000

0800a018 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a018:	b480      	push	{r7}
 800a01a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800a01c:	bf00      	nop
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
	...

0800a028 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a028:	b480      	push	{r7}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a02e:	4b1e      	ldr	r3, [pc, #120]	; (800a0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	f003 0303 	and.w	r3, r3, #3
 800a036:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a038:	4b1b      	ldr	r3, [pc, #108]	; (800a0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	091b      	lsrs	r3, r3, #4
 800a03e:	f003 030f 	and.w	r3, r3, #15
 800a042:	3301      	adds	r3, #1
 800a044:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	2b03      	cmp	r3, #3
 800a04a:	d10c      	bne.n	800a066 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a04c:	4a17      	ldr	r2, [pc, #92]	; (800a0ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	fbb2 f3f3 	udiv	r3, r2, r3
 800a054:	4a14      	ldr	r2, [pc, #80]	; (800a0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a056:	68d2      	ldr	r2, [r2, #12]
 800a058:	0a12      	lsrs	r2, r2, #8
 800a05a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a05e:	fb02 f303 	mul.w	r3, r2, r3
 800a062:	617b      	str	r3, [r7, #20]
    break;
 800a064:	e00c      	b.n	800a080 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a066:	4a12      	ldr	r2, [pc, #72]	; (800a0b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a06e:	4a0e      	ldr	r2, [pc, #56]	; (800a0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a070:	68d2      	ldr	r2, [r2, #12]
 800a072:	0a12      	lsrs	r2, r2, #8
 800a074:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a078:	fb02 f303 	mul.w	r3, r2, r3
 800a07c:	617b      	str	r3, [r7, #20]
    break;
 800a07e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a080:	4b09      	ldr	r3, [pc, #36]	; (800a0a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	0e5b      	lsrs	r3, r3, #25
 800a086:	f003 0303 	and.w	r3, r3, #3
 800a08a:	3301      	adds	r3, #1
 800a08c:	005b      	lsls	r3, r3, #1
 800a08e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a090:	697a      	ldr	r2, [r7, #20]
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	fbb2 f3f3 	udiv	r3, r2, r3
 800a098:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a09a:	687b      	ldr	r3, [r7, #4]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	371c      	adds	r7, #28
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	40021000 	.word	0x40021000
 800a0ac:	007a1200 	.word	0x007a1200
 800a0b0:	00f42400 	.word	0x00f42400

0800a0b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a0bc:	2300      	movs	r3, #0
 800a0be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f000 8098 	beq.w	800a202 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a0d6:	4b43      	ldr	r3, [pc, #268]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10d      	bne.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0e2:	4b40      	ldr	r3, [pc, #256]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0e6:	4a3f      	ldr	r2, [pc, #252]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0ec:	6593      	str	r3, [r2, #88]	; 0x58
 800a0ee:	4b3d      	ldr	r3, [pc, #244]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a0f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0f6:	60bb      	str	r3, [r7, #8]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0fe:	4b3a      	ldr	r3, [pc, #232]	; (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a39      	ldr	r2, [pc, #228]	; (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a108:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a10a:	f7fb f8a3 	bl	8005254 <HAL_GetTick>
 800a10e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a110:	e009      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a112:	f7fb f89f 	bl	8005254 <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d902      	bls.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	74fb      	strb	r3, [r7, #19]
        break;
 800a124:	e005      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a126:	4b30      	ldr	r3, [pc, #192]	; (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d0ef      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a132:	7cfb      	ldrb	r3, [r7, #19]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d159      	bne.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a138:	4b2a      	ldr	r3, [pc, #168]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a13e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a142:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d01e      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	429a      	cmp	r2, r3
 800a152:	d019      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a154:	4b23      	ldr	r3, [pc, #140]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a15a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a15e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a160:	4b20      	ldr	r3, [pc, #128]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a166:	4a1f      	ldr	r2, [pc, #124]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a16c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a170:	4b1c      	ldr	r3, [pc, #112]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a176:	4a1b      	ldr	r2, [pc, #108]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a17c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a180:	4a18      	ldr	r2, [pc, #96]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d016      	beq.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a192:	f7fb f85f 	bl	8005254 <HAL_GetTick>
 800a196:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a198:	e00b      	b.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a19a:	f7fb f85b 	bl	8005254 <HAL_GetTick>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d902      	bls.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	74fb      	strb	r3, [r7, #19]
            break;
 800a1b0:	e006      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1b2:	4b0c      	ldr	r3, [pc, #48]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1b8:	f003 0302 	and.w	r3, r3, #2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d0ec      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a1c0:	7cfb      	ldrb	r3, [r7, #19]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10b      	bne.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a1c6:	4b07      	ldr	r3, [pc, #28]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1d4:	4903      	ldr	r1, [pc, #12]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a1dc:	e008      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a1de:	7cfb      	ldrb	r3, [r7, #19]
 800a1e0:	74bb      	strb	r3, [r7, #18]
 800a1e2:	e005      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a1e4:	40021000 	.word	0x40021000
 800a1e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ec:	7cfb      	ldrb	r3, [r7, #19]
 800a1ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a1f0:	7c7b      	ldrb	r3, [r7, #17]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d105      	bne.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1f6:	4ba7      	ldr	r3, [pc, #668]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1fa:	4aa6      	ldr	r2, [pc, #664]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a1fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a200:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00a      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a20e:	4ba1      	ldr	r3, [pc, #644]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a214:	f023 0203 	bic.w	r2, r3, #3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	499d      	ldr	r1, [pc, #628]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 0302 	and.w	r3, r3, #2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00a      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a230:	4b98      	ldr	r3, [pc, #608]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a236:	f023 020c 	bic.w	r2, r3, #12
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	4995      	ldr	r1, [pc, #596]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a240:	4313      	orrs	r3, r2
 800a242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 0304 	and.w	r3, r3, #4
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00a      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a252:	4b90      	ldr	r3, [pc, #576]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a258:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	498c      	ldr	r1, [pc, #560]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a262:	4313      	orrs	r3, r2
 800a264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 0308 	and.w	r3, r3, #8
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00a      	beq.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a274:	4b87      	ldr	r3, [pc, #540]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	4984      	ldr	r1, [pc, #528]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a284:	4313      	orrs	r3, r2
 800a286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 0310 	and.w	r3, r3, #16
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00a      	beq.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a296:	4b7f      	ldr	r3, [pc, #508]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a29c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	497b      	ldr	r1, [pc, #492]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0320 	and.w	r3, r3, #32
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00a      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a2b8:	4b76      	ldr	r3, [pc, #472]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	4973      	ldr	r1, [pc, #460]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00a      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a2da:	4b6e      	ldr	r3, [pc, #440]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	496a      	ldr	r1, [pc, #424]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00a      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a2fc:	4b65      	ldr	r3, [pc, #404]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a2fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a302:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	4962      	ldr	r1, [pc, #392]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a30c:	4313      	orrs	r3, r2
 800a30e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a31e:	4b5d      	ldr	r3, [pc, #372]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32c:	4959      	ldr	r1, [pc, #356]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a32e:	4313      	orrs	r3, r2
 800a330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00a      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a340:	4b54      	ldr	r3, [pc, #336]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a346:	f023 0203 	bic.w	r2, r3, #3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34e:	4951      	ldr	r1, [pc, #324]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a350:	4313      	orrs	r3, r2
 800a352:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00a      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a362:	4b4c      	ldr	r3, [pc, #304]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a368:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a370:	4948      	ldr	r1, [pc, #288]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a372:	4313      	orrs	r3, r2
 800a374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a380:	2b00      	cmp	r3, #0
 800a382:	d015      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a384:	4b43      	ldr	r3, [pc, #268]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a38a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a392:	4940      	ldr	r1, [pc, #256]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a394:	4313      	orrs	r3, r2
 800a396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a39e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3a2:	d105      	bne.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a3a4:	4b3b      	ldr	r3, [pc, #236]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	4a3a      	ldr	r2, [pc, #232]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d015      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a3bc:	4b35      	ldr	r3, [pc, #212]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ca:	4932      	ldr	r1, [pc, #200]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3da:	d105      	bne.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a3dc:	4b2d      	ldr	r3, [pc, #180]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	4a2c      	ldr	r2, [pc, #176]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d015      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a3f4:	4b27      	ldr	r3, [pc, #156]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a402:	4924      	ldr	r1, [pc, #144]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a404:	4313      	orrs	r3, r2
 800a406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a412:	d105      	bne.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a414:	4b1f      	ldr	r3, [pc, #124]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	4a1e      	ldr	r2, [pc, #120]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a41a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a41e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d015      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a42c:	4b19      	ldr	r3, [pc, #100]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a432:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a43a:	4916      	ldr	r1, [pc, #88]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a43c:	4313      	orrs	r3, r2
 800a43e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a44a:	d105      	bne.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a44c:	4b11      	ldr	r3, [pc, #68]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	4a10      	ldr	r2, [pc, #64]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a456:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d019      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a464:	4b0b      	ldr	r3, [pc, #44]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a46a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a472:	4908      	ldr	r1, [pc, #32]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a474:	4313      	orrs	r3, r2
 800a476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a47e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a482:	d109      	bne.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a484:	4b03      	ldr	r3, [pc, #12]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	4a02      	ldr	r2, [pc, #8]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a48a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a48e:	60d3      	str	r3, [r2, #12]
 800a490:	e002      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a492:	bf00      	nop
 800a494:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d015      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a4a4:	4b29      	ldr	r3, [pc, #164]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b2:	4926      	ldr	r1, [pc, #152]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4c2:	d105      	bne.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a4c4:	4b21      	ldr	r3, [pc, #132]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	4a20      	ldr	r2, [pc, #128]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a4ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4ce:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d015      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a4dc:	4b1b      	ldr	r3, [pc, #108]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ea:	4918      	ldr	r1, [pc, #96]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4fa:	d105      	bne.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a4fc:	4b13      	ldr	r3, [pc, #76]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	4a12      	ldr	r2, [pc, #72]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a506:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a510:	2b00      	cmp	r3, #0
 800a512:	d015      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a514:	4b0d      	ldr	r3, [pc, #52]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a51a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a522:	490a      	ldr	r1, [pc, #40]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a524:	4313      	orrs	r3, r2
 800a526:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a52e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a532:	d105      	bne.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a534:	4b05      	ldr	r3, [pc, #20]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	4a04      	ldr	r2, [pc, #16]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a53a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a53e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a540:	7cbb      	ldrb	r3, [r7, #18]
}
 800a542:	4618      	mov	r0, r3
 800a544:	3718      	adds	r7, #24
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	40021000 	.word	0x40021000

0800a550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d101      	bne.n	800a562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	e09d      	b.n	800a69e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a566:	2b00      	cmp	r3, #0
 800a568:	d108      	bne.n	800a57c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a572:	d009      	beq.n	800a588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	61da      	str	r2, [r3, #28]
 800a57a:	e005      	b.n	800a588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b00      	cmp	r3, #0
 800a598:	d106      	bne.n	800a5a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7fa f8ca 	bl	800473c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a5c8:	d902      	bls.n	800a5d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	60fb      	str	r3, [r7, #12]
 800a5ce:	e002      	b.n	800a5d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a5d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a5de:	d007      	beq.n	800a5f0 <HAL_SPI_Init+0xa0>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a5e8:	d002      	beq.n	800a5f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a600:	431a      	orrs	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	f003 0302 	and.w	r3, r3, #2
 800a60a:	431a      	orrs	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	695b      	ldr	r3, [r3, #20]
 800a610:	f003 0301 	and.w	r3, r3, #1
 800a614:	431a      	orrs	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a61e:	431a      	orrs	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	69db      	ldr	r3, [r3, #28]
 800a624:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a628:	431a      	orrs	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a632:	ea42 0103 	orr.w	r1, r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a63a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	0c1b      	lsrs	r3, r3, #16
 800a64c:	f003 0204 	and.w	r2, r3, #4
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a654:	f003 0310 	and.w	r3, r3, #16
 800a658:	431a      	orrs	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a65e:	f003 0308 	and.w	r3, r3, #8
 800a662:	431a      	orrs	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a66c:	ea42 0103 	orr.w	r1, r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	430a      	orrs	r2, r1
 800a67c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69da      	ldr	r2, [r3, #28]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a68c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b082      	sub	sp, #8
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e049      	b.n	800a74c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d106      	bne.n	800a6d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f7fa f8ab 	bl	8004828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2202      	movs	r2, #2
 800a6d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4610      	mov	r0, r2
 800a6e6:	f000 fb73 	bl	800add0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a762:	b2db      	uxtb	r3, r3
 800a764:	2b01      	cmp	r3, #1
 800a766:	d001      	beq.n	800a76c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e054      	b.n	800a816 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2202      	movs	r2, #2
 800a770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68da      	ldr	r2, [r3, #12]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f042 0201 	orr.w	r2, r2, #1
 800a782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a26      	ldr	r2, [pc, #152]	; (800a824 <HAL_TIM_Base_Start_IT+0xd0>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d022      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x80>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a796:	d01d      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x80>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a22      	ldr	r2, [pc, #136]	; (800a828 <HAL_TIM_Base_Start_IT+0xd4>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d018      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x80>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a21      	ldr	r2, [pc, #132]	; (800a82c <HAL_TIM_Base_Start_IT+0xd8>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d013      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x80>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a1f      	ldr	r2, [pc, #124]	; (800a830 <HAL_TIM_Base_Start_IT+0xdc>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d00e      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x80>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a1e      	ldr	r2, [pc, #120]	; (800a834 <HAL_TIM_Base_Start_IT+0xe0>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d009      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x80>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a1c      	ldr	r2, [pc, #112]	; (800a838 <HAL_TIM_Base_Start_IT+0xe4>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d004      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x80>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a1b      	ldr	r2, [pc, #108]	; (800a83c <HAL_TIM_Base_Start_IT+0xe8>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d115      	bne.n	800a800 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	689a      	ldr	r2, [r3, #8]
 800a7da:	4b19      	ldr	r3, [pc, #100]	; (800a840 <HAL_TIM_Base_Start_IT+0xec>)
 800a7dc:	4013      	ands	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2b06      	cmp	r3, #6
 800a7e4:	d015      	beq.n	800a812 <HAL_TIM_Base_Start_IT+0xbe>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ec:	d011      	beq.n	800a812 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f042 0201 	orr.w	r2, r2, #1
 800a7fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7fe:	e008      	b.n	800a812 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f042 0201 	orr.w	r2, r2, #1
 800a80e:	601a      	str	r2, [r3, #0]
 800a810:	e000      	b.n	800a814 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a812:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	40012c00 	.word	0x40012c00
 800a828:	40000400 	.word	0x40000400
 800a82c:	40000800 	.word	0x40000800
 800a830:	40000c00 	.word	0x40000c00
 800a834:	40013400 	.word	0x40013400
 800a838:	40014000 	.word	0x40014000
 800a83c:	40015000 	.word	0x40015000
 800a840:	00010007 	.word	0x00010007

0800a844 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68da      	ldr	r2, [r3, #12]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f022 0201 	bic.w	r2, r2, #1
 800a85a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	6a1a      	ldr	r2, [r3, #32]
 800a862:	f241 1311 	movw	r3, #4369	; 0x1111
 800a866:	4013      	ands	r3, r2
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10f      	bne.n	800a88c <HAL_TIM_Base_Stop_IT+0x48>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	6a1a      	ldr	r2, [r3, #32]
 800a872:	f244 4344 	movw	r3, #17476	; 0x4444
 800a876:	4013      	ands	r3, r2
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d107      	bne.n	800a88c <HAL_TIM_Base_Stop_IT+0x48>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f022 0201 	bic.w	r2, r2, #1
 800a88a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	f003 0302 	and.w	r3, r3, #2
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d020      	beq.n	800a906 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f003 0302 	and.w	r3, r3, #2
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d01b      	beq.n	800a906 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f06f 0202 	mvn.w	r2, #2
 800a8d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	699b      	ldr	r3, [r3, #24]
 800a8e4:	f003 0303 	and.w	r3, r3, #3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d003      	beq.n	800a8f4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fa51 	bl	800ad94 <HAL_TIM_IC_CaptureCallback>
 800a8f2:	e005      	b.n	800a900 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fa43 	bl	800ad80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fa54 	bl	800ada8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	f003 0304 	and.w	r3, r3, #4
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d020      	beq.n	800a952 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f003 0304 	and.w	r3, r3, #4
 800a916:	2b00      	cmp	r3, #0
 800a918:	d01b      	beq.n	800a952 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f06f 0204 	mvn.w	r2, #4
 800a922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2202      	movs	r2, #2
 800a928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a934:	2b00      	cmp	r3, #0
 800a936:	d003      	beq.n	800a940 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fa2b 	bl	800ad94 <HAL_TIM_IC_CaptureCallback>
 800a93e:	e005      	b.n	800a94c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fa1d 	bl	800ad80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fa2e 	bl	800ada8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	f003 0308 	and.w	r3, r3, #8
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d020      	beq.n	800a99e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f003 0308 	and.w	r3, r3, #8
 800a962:	2b00      	cmp	r3, #0
 800a964:	d01b      	beq.n	800a99e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f06f 0208 	mvn.w	r2, #8
 800a96e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2204      	movs	r2, #4
 800a974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	69db      	ldr	r3, [r3, #28]
 800a97c:	f003 0303 	and.w	r3, r3, #3
 800a980:	2b00      	cmp	r3, #0
 800a982:	d003      	beq.n	800a98c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fa05 	bl	800ad94 <HAL_TIM_IC_CaptureCallback>
 800a98a:	e005      	b.n	800a998 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f9f7 	bl	800ad80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fa08 	bl	800ada8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	f003 0310 	and.w	r3, r3, #16
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d020      	beq.n	800a9ea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f003 0310 	and.w	r3, r3, #16
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d01b      	beq.n	800a9ea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f06f 0210 	mvn.w	r2, #16
 800a9ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2208      	movs	r2, #8
 800a9c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	69db      	ldr	r3, [r3, #28]
 800a9c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d003      	beq.n	800a9d8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f9df 	bl	800ad94 <HAL_TIM_IC_CaptureCallback>
 800a9d6:	e005      	b.n	800a9e4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f9d1 	bl	800ad80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f9e2 	bl	800ada8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	f003 0301 	and.w	r3, r3, #1
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00c      	beq.n	800aa0e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f003 0301 	and.w	r3, r3, #1
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d007      	beq.n	800aa0e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f06f 0201 	mvn.w	r2, #1
 800aa06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 f9af 	bl	800ad6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d104      	bne.n	800aa22 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00c      	beq.n	800aa3c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d007      	beq.n	800aa3c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800aa34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fbba 	bl	800b1b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00c      	beq.n	800aa60 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d007      	beq.n	800aa60 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fbb2 	bl	800b1c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00c      	beq.n	800aa84 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d007      	beq.n	800aa84 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f99c 	bl	800adbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	f003 0320 	and.w	r3, r3, #32
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00c      	beq.n	800aaa8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f003 0320 	and.w	r3, r3, #32
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d007      	beq.n	800aaa8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f06f 0220 	mvn.w	r2, #32
 800aaa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fb7a 	bl	800b19c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00c      	beq.n	800aacc <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d007      	beq.n	800aacc <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800aac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fb86 	bl	800b1d8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00c      	beq.n	800aaf0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d007      	beq.n	800aaf0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800aae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fb7e 	bl	800b1ec <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00c      	beq.n	800ab14 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d007      	beq.n	800ab14 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ab0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fb76 	bl	800b200 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00c      	beq.n	800ab38 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d007      	beq.n	800ab38 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ab30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fb6e 	bl	800b214 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab38:	bf00      	nop
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d101      	bne.n	800ab5c <HAL_TIM_ConfigClockSource+0x1c>
 800ab58:	2302      	movs	r3, #2
 800ab5a:	e0f6      	b.n	800ad4a <HAL_TIM_ConfigClockSource+0x20a>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2202      	movs	r2, #2
 800ab68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ab7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a6f      	ldr	r2, [pc, #444]	; (800ad54 <HAL_TIM_ConfigClockSource+0x214>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	f000 80c1 	beq.w	800ad1e <HAL_TIM_ConfigClockSource+0x1de>
 800ab9c:	4a6d      	ldr	r2, [pc, #436]	; (800ad54 <HAL_TIM_ConfigClockSource+0x214>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	f200 80c6 	bhi.w	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800aba4:	4a6c      	ldr	r2, [pc, #432]	; (800ad58 <HAL_TIM_ConfigClockSource+0x218>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	f000 80b9 	beq.w	800ad1e <HAL_TIM_ConfigClockSource+0x1de>
 800abac:	4a6a      	ldr	r2, [pc, #424]	; (800ad58 <HAL_TIM_ConfigClockSource+0x218>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	f200 80be 	bhi.w	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800abb4:	4a69      	ldr	r2, [pc, #420]	; (800ad5c <HAL_TIM_ConfigClockSource+0x21c>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	f000 80b1 	beq.w	800ad1e <HAL_TIM_ConfigClockSource+0x1de>
 800abbc:	4a67      	ldr	r2, [pc, #412]	; (800ad5c <HAL_TIM_ConfigClockSource+0x21c>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	f200 80b6 	bhi.w	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800abc4:	4a66      	ldr	r2, [pc, #408]	; (800ad60 <HAL_TIM_ConfigClockSource+0x220>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	f000 80a9 	beq.w	800ad1e <HAL_TIM_ConfigClockSource+0x1de>
 800abcc:	4a64      	ldr	r2, [pc, #400]	; (800ad60 <HAL_TIM_ConfigClockSource+0x220>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	f200 80ae 	bhi.w	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800abd4:	4a63      	ldr	r2, [pc, #396]	; (800ad64 <HAL_TIM_ConfigClockSource+0x224>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	f000 80a1 	beq.w	800ad1e <HAL_TIM_ConfigClockSource+0x1de>
 800abdc:	4a61      	ldr	r2, [pc, #388]	; (800ad64 <HAL_TIM_ConfigClockSource+0x224>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	f200 80a6 	bhi.w	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800abe4:	4a60      	ldr	r2, [pc, #384]	; (800ad68 <HAL_TIM_ConfigClockSource+0x228>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	f000 8099 	beq.w	800ad1e <HAL_TIM_ConfigClockSource+0x1de>
 800abec:	4a5e      	ldr	r2, [pc, #376]	; (800ad68 <HAL_TIM_ConfigClockSource+0x228>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	f200 809e 	bhi.w	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800abf4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800abf8:	f000 8091 	beq.w	800ad1e <HAL_TIM_ConfigClockSource+0x1de>
 800abfc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ac00:	f200 8096 	bhi.w	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac08:	f000 8089 	beq.w	800ad1e <HAL_TIM_ConfigClockSource+0x1de>
 800ac0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac10:	f200 808e 	bhi.w	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac18:	d03e      	beq.n	800ac98 <HAL_TIM_ConfigClockSource+0x158>
 800ac1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac1e:	f200 8087 	bhi.w	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac26:	f000 8086 	beq.w	800ad36 <HAL_TIM_ConfigClockSource+0x1f6>
 800ac2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac2e:	d87f      	bhi.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac30:	2b70      	cmp	r3, #112	; 0x70
 800ac32:	d01a      	beq.n	800ac6a <HAL_TIM_ConfigClockSource+0x12a>
 800ac34:	2b70      	cmp	r3, #112	; 0x70
 800ac36:	d87b      	bhi.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac38:	2b60      	cmp	r3, #96	; 0x60
 800ac3a:	d050      	beq.n	800acde <HAL_TIM_ConfigClockSource+0x19e>
 800ac3c:	2b60      	cmp	r3, #96	; 0x60
 800ac3e:	d877      	bhi.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac40:	2b50      	cmp	r3, #80	; 0x50
 800ac42:	d03c      	beq.n	800acbe <HAL_TIM_ConfigClockSource+0x17e>
 800ac44:	2b50      	cmp	r3, #80	; 0x50
 800ac46:	d873      	bhi.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac48:	2b40      	cmp	r3, #64	; 0x40
 800ac4a:	d058      	beq.n	800acfe <HAL_TIM_ConfigClockSource+0x1be>
 800ac4c:	2b40      	cmp	r3, #64	; 0x40
 800ac4e:	d86f      	bhi.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac50:	2b30      	cmp	r3, #48	; 0x30
 800ac52:	d064      	beq.n	800ad1e <HAL_TIM_ConfigClockSource+0x1de>
 800ac54:	2b30      	cmp	r3, #48	; 0x30
 800ac56:	d86b      	bhi.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac58:	2b20      	cmp	r3, #32
 800ac5a:	d060      	beq.n	800ad1e <HAL_TIM_ConfigClockSource+0x1de>
 800ac5c:	2b20      	cmp	r3, #32
 800ac5e:	d867      	bhi.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d05c      	beq.n	800ad1e <HAL_TIM_ConfigClockSource+0x1de>
 800ac64:	2b10      	cmp	r3, #16
 800ac66:	d05a      	beq.n	800ad1e <HAL_TIM_ConfigClockSource+0x1de>
 800ac68:	e062      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ac7a:	f000 f9d9 	bl	800b030 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	609a      	str	r2, [r3, #8]
      break;
 800ac96:	e04f      	b.n	800ad38 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aca8:	f000 f9c2 	bl	800b030 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	689a      	ldr	r2, [r3, #8]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800acba:	609a      	str	r2, [r3, #8]
      break;
 800acbc:	e03c      	b.n	800ad38 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800acca:	461a      	mov	r2, r3
 800accc:	f000 f934 	bl	800af38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2150      	movs	r1, #80	; 0x50
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f98d 	bl	800aff6 <TIM_ITRx_SetConfig>
      break;
 800acdc:	e02c      	b.n	800ad38 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800acea:	461a      	mov	r2, r3
 800acec:	f000 f953 	bl	800af96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2160      	movs	r1, #96	; 0x60
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 f97d 	bl	800aff6 <TIM_ITRx_SetConfig>
      break;
 800acfc:	e01c      	b.n	800ad38 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f000 f914 	bl	800af38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2140      	movs	r1, #64	; 0x40
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 f96d 	bl	800aff6 <TIM_ITRx_SetConfig>
      break;
 800ad1c:	e00c      	b.n	800ad38 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4619      	mov	r1, r3
 800ad28:	4610      	mov	r0, r2
 800ad2a:	f000 f964 	bl	800aff6 <TIM_ITRx_SetConfig>
      break;
 800ad2e:	e003      	b.n	800ad38 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	73fb      	strb	r3, [r7, #15]
      break;
 800ad34:	e000      	b.n	800ad38 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800ad36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	00100070 	.word	0x00100070
 800ad58:	00100060 	.word	0x00100060
 800ad5c:	00100050 	.word	0x00100050
 800ad60:	00100040 	.word	0x00100040
 800ad64:	00100030 	.word	0x00100030
 800ad68:	00100020 	.word	0x00100020

0800ad6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ad74:	bf00      	nop
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad88:	bf00      	nop
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a4c      	ldr	r2, [pc, #304]	; (800af14 <TIM_Base_SetConfig+0x144>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d017      	beq.n	800ae18 <TIM_Base_SetConfig+0x48>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adee:	d013      	beq.n	800ae18 <TIM_Base_SetConfig+0x48>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a49      	ldr	r2, [pc, #292]	; (800af18 <TIM_Base_SetConfig+0x148>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d00f      	beq.n	800ae18 <TIM_Base_SetConfig+0x48>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a48      	ldr	r2, [pc, #288]	; (800af1c <TIM_Base_SetConfig+0x14c>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d00b      	beq.n	800ae18 <TIM_Base_SetConfig+0x48>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a47      	ldr	r2, [pc, #284]	; (800af20 <TIM_Base_SetConfig+0x150>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d007      	beq.n	800ae18 <TIM_Base_SetConfig+0x48>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a46      	ldr	r2, [pc, #280]	; (800af24 <TIM_Base_SetConfig+0x154>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d003      	beq.n	800ae18 <TIM_Base_SetConfig+0x48>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a45      	ldr	r2, [pc, #276]	; (800af28 <TIM_Base_SetConfig+0x158>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d108      	bne.n	800ae2a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4a39      	ldr	r2, [pc, #228]	; (800af14 <TIM_Base_SetConfig+0x144>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d023      	beq.n	800ae7a <TIM_Base_SetConfig+0xaa>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae38:	d01f      	beq.n	800ae7a <TIM_Base_SetConfig+0xaa>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4a36      	ldr	r2, [pc, #216]	; (800af18 <TIM_Base_SetConfig+0x148>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d01b      	beq.n	800ae7a <TIM_Base_SetConfig+0xaa>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4a35      	ldr	r2, [pc, #212]	; (800af1c <TIM_Base_SetConfig+0x14c>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d017      	beq.n	800ae7a <TIM_Base_SetConfig+0xaa>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4a34      	ldr	r2, [pc, #208]	; (800af20 <TIM_Base_SetConfig+0x150>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d013      	beq.n	800ae7a <TIM_Base_SetConfig+0xaa>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a33      	ldr	r2, [pc, #204]	; (800af24 <TIM_Base_SetConfig+0x154>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d00f      	beq.n	800ae7a <TIM_Base_SetConfig+0xaa>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a33      	ldr	r2, [pc, #204]	; (800af2c <TIM_Base_SetConfig+0x15c>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d00b      	beq.n	800ae7a <TIM_Base_SetConfig+0xaa>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a32      	ldr	r2, [pc, #200]	; (800af30 <TIM_Base_SetConfig+0x160>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d007      	beq.n	800ae7a <TIM_Base_SetConfig+0xaa>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a31      	ldr	r2, [pc, #196]	; (800af34 <TIM_Base_SetConfig+0x164>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d003      	beq.n	800ae7a <TIM_Base_SetConfig+0xaa>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a2c      	ldr	r2, [pc, #176]	; (800af28 <TIM_Base_SetConfig+0x158>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d108      	bne.n	800ae8c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	689a      	ldr	r2, [r3, #8]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a18      	ldr	r2, [pc, #96]	; (800af14 <TIM_Base_SetConfig+0x144>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d013      	beq.n	800aee0 <TIM_Base_SetConfig+0x110>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a1a      	ldr	r2, [pc, #104]	; (800af24 <TIM_Base_SetConfig+0x154>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d00f      	beq.n	800aee0 <TIM_Base_SetConfig+0x110>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a1a      	ldr	r2, [pc, #104]	; (800af2c <TIM_Base_SetConfig+0x15c>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d00b      	beq.n	800aee0 <TIM_Base_SetConfig+0x110>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a19      	ldr	r2, [pc, #100]	; (800af30 <TIM_Base_SetConfig+0x160>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d007      	beq.n	800aee0 <TIM_Base_SetConfig+0x110>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a18      	ldr	r2, [pc, #96]	; (800af34 <TIM_Base_SetConfig+0x164>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d003      	beq.n	800aee0 <TIM_Base_SetConfig+0x110>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a13      	ldr	r2, [pc, #76]	; (800af28 <TIM_Base_SetConfig+0x158>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d103      	bne.n	800aee8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	691a      	ldr	r2, [r3, #16]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	f003 0301 	and.w	r3, r3, #1
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d105      	bne.n	800af06 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	f023 0201 	bic.w	r2, r3, #1
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	611a      	str	r2, [r3, #16]
  }
}
 800af06:	bf00      	nop
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	40012c00 	.word	0x40012c00
 800af18:	40000400 	.word	0x40000400
 800af1c:	40000800 	.word	0x40000800
 800af20:	40000c00 	.word	0x40000c00
 800af24:	40013400 	.word	0x40013400
 800af28:	40015000 	.word	0x40015000
 800af2c:	40014000 	.word	0x40014000
 800af30:	40014400 	.word	0x40014400
 800af34:	40014800 	.word	0x40014800

0800af38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af38:	b480      	push	{r7}
 800af3a:	b087      	sub	sp, #28
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6a1b      	ldr	r3, [r3, #32]
 800af48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	f023 0201 	bic.w	r2, r3, #1
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	699b      	ldr	r3, [r3, #24]
 800af5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	011b      	lsls	r3, r3, #4
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	f023 030a 	bic.w	r3, r3, #10
 800af74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af76:	697a      	ldr	r2, [r7, #20]
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	621a      	str	r2, [r3, #32]
}
 800af8a:	bf00      	nop
 800af8c:	371c      	adds	r7, #28
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af96:	b480      	push	{r7}
 800af98:	b087      	sub	sp, #28
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	60f8      	str	r0, [r7, #12]
 800af9e:	60b9      	str	r1, [r7, #8]
 800afa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6a1b      	ldr	r3, [r3, #32]
 800afac:	f023 0210 	bic.w	r2, r3, #16
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	699b      	ldr	r3, [r3, #24]
 800afb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	031b      	lsls	r3, r3, #12
 800afc6:	693a      	ldr	r2, [r7, #16]
 800afc8:	4313      	orrs	r3, r2
 800afca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800afd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	011b      	lsls	r3, r3, #4
 800afd8:	697a      	ldr	r2, [r7, #20]
 800afda:	4313      	orrs	r3, r2
 800afdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	697a      	ldr	r2, [r7, #20]
 800afe8:	621a      	str	r2, [r3, #32]
}
 800afea:	bf00      	nop
 800afec:	371c      	adds	r7, #28
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr

0800aff6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aff6:	b480      	push	{r7}
 800aff8:	b085      	sub	sp, #20
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b00c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b010:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	4313      	orrs	r3, r2
 800b018:	f043 0307 	orr.w	r3, r3, #7
 800b01c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	609a      	str	r2, [r3, #8]
}
 800b024:	bf00      	nop
 800b026:	3714      	adds	r7, #20
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b030:	b480      	push	{r7}
 800b032:	b087      	sub	sp, #28
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	607a      	str	r2, [r7, #4]
 800b03c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b04a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	021a      	lsls	r2, r3, #8
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	431a      	orrs	r2, r3
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	4313      	orrs	r3, r2
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	697a      	ldr	r2, [r7, #20]
 800b062:	609a      	str	r2, [r3, #8]
}
 800b064:	bf00      	nop
 800b066:	371c      	adds	r7, #28
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b080:	2b01      	cmp	r3, #1
 800b082:	d101      	bne.n	800b088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b084:	2302      	movs	r3, #2
 800b086:	e074      	b.n	800b172 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2202      	movs	r2, #2
 800b094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a34      	ldr	r2, [pc, #208]	; (800b180 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d009      	beq.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a33      	ldr	r2, [pc, #204]	; (800b184 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d004      	beq.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a31      	ldr	r2, [pc, #196]	; (800b188 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d108      	bne.n	800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b0cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b0de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a21      	ldr	r2, [pc, #132]	; (800b180 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d022      	beq.n	800b146 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b108:	d01d      	beq.n	800b146 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a1f      	ldr	r2, [pc, #124]	; (800b18c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d018      	beq.n	800b146 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a1d      	ldr	r2, [pc, #116]	; (800b190 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d013      	beq.n	800b146 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a1c      	ldr	r2, [pc, #112]	; (800b194 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d00e      	beq.n	800b146 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a15      	ldr	r2, [pc, #84]	; (800b184 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d009      	beq.n	800b146 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a18      	ldr	r2, [pc, #96]	; (800b198 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d004      	beq.n	800b146 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a11      	ldr	r2, [pc, #68]	; (800b188 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d10c      	bne.n	800b160 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b14c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	4313      	orrs	r3, r2
 800b156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3714      	adds	r7, #20
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	40012c00 	.word	0x40012c00
 800b184:	40013400 	.word	0x40013400
 800b188:	40015000 	.word	0x40015000
 800b18c:	40000400 	.word	0x40000400
 800b190:	40000800 	.word	0x40000800
 800b194:	40000c00 	.word	0x40000c00
 800b198:	40014000 	.word	0x40014000

0800b19c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b22c:	b08c      	sub	sp, #48	; 0x30
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b232:	2300      	movs	r3, #0
 800b234:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	689a      	ldr	r2, [r3, #8]
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	431a      	orrs	r2, r3
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	431a      	orrs	r2, r3
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	69db      	ldr	r3, [r3, #28]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	4baa      	ldr	r3, [pc, #680]	; (800b500 <UART_SetConfig+0x2d8>)
 800b258:	4013      	ands	r3, r2
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	6812      	ldr	r2, [r2, #0]
 800b25e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b260:	430b      	orrs	r3, r1
 800b262:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	68da      	ldr	r2, [r3, #12]
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	430a      	orrs	r2, r1
 800b278:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a9f      	ldr	r2, [pc, #636]	; (800b504 <UART_SetConfig+0x2dc>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d004      	beq.n	800b294 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	6a1b      	ldr	r3, [r3, #32]
 800b28e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b290:	4313      	orrs	r3, r2
 800b292:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b29e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b2a2:	697a      	ldr	r2, [r7, #20]
 800b2a4:	6812      	ldr	r2, [r2, #0]
 800b2a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2a8:	430b      	orrs	r3, r1
 800b2aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b2:	f023 010f 	bic.w	r1, r3, #15
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	430a      	orrs	r2, r1
 800b2c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a90      	ldr	r2, [pc, #576]	; (800b508 <UART_SetConfig+0x2e0>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d125      	bne.n	800b318 <UART_SetConfig+0xf0>
 800b2cc:	4b8f      	ldr	r3, [pc, #572]	; (800b50c <UART_SetConfig+0x2e4>)
 800b2ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2d2:	f003 0303 	and.w	r3, r3, #3
 800b2d6:	2b03      	cmp	r3, #3
 800b2d8:	d81a      	bhi.n	800b310 <UART_SetConfig+0xe8>
 800b2da:	a201      	add	r2, pc, #4	; (adr r2, 800b2e0 <UART_SetConfig+0xb8>)
 800b2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e0:	0800b2f1 	.word	0x0800b2f1
 800b2e4:	0800b301 	.word	0x0800b301
 800b2e8:	0800b2f9 	.word	0x0800b2f9
 800b2ec:	0800b309 	.word	0x0800b309
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2f6:	e116      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b2f8:	2302      	movs	r3, #2
 800b2fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2fe:	e112      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b300:	2304      	movs	r3, #4
 800b302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b306:	e10e      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b308:	2308      	movs	r3, #8
 800b30a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b30e:	e10a      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b310:	2310      	movs	r3, #16
 800b312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b316:	e106      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a7c      	ldr	r2, [pc, #496]	; (800b510 <UART_SetConfig+0x2e8>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d138      	bne.n	800b394 <UART_SetConfig+0x16c>
 800b322:	4b7a      	ldr	r3, [pc, #488]	; (800b50c <UART_SetConfig+0x2e4>)
 800b324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b328:	f003 030c 	and.w	r3, r3, #12
 800b32c:	2b0c      	cmp	r3, #12
 800b32e:	d82d      	bhi.n	800b38c <UART_SetConfig+0x164>
 800b330:	a201      	add	r2, pc, #4	; (adr r2, 800b338 <UART_SetConfig+0x110>)
 800b332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b336:	bf00      	nop
 800b338:	0800b36d 	.word	0x0800b36d
 800b33c:	0800b38d 	.word	0x0800b38d
 800b340:	0800b38d 	.word	0x0800b38d
 800b344:	0800b38d 	.word	0x0800b38d
 800b348:	0800b37d 	.word	0x0800b37d
 800b34c:	0800b38d 	.word	0x0800b38d
 800b350:	0800b38d 	.word	0x0800b38d
 800b354:	0800b38d 	.word	0x0800b38d
 800b358:	0800b375 	.word	0x0800b375
 800b35c:	0800b38d 	.word	0x0800b38d
 800b360:	0800b38d 	.word	0x0800b38d
 800b364:	0800b38d 	.word	0x0800b38d
 800b368:	0800b385 	.word	0x0800b385
 800b36c:	2300      	movs	r3, #0
 800b36e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b372:	e0d8      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b374:	2302      	movs	r3, #2
 800b376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b37a:	e0d4      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b37c:	2304      	movs	r3, #4
 800b37e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b382:	e0d0      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b384:	2308      	movs	r3, #8
 800b386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b38a:	e0cc      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b38c:	2310      	movs	r3, #16
 800b38e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b392:	e0c8      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a5e      	ldr	r2, [pc, #376]	; (800b514 <UART_SetConfig+0x2ec>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d125      	bne.n	800b3ea <UART_SetConfig+0x1c2>
 800b39e:	4b5b      	ldr	r3, [pc, #364]	; (800b50c <UART_SetConfig+0x2e4>)
 800b3a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b3a8:	2b30      	cmp	r3, #48	; 0x30
 800b3aa:	d016      	beq.n	800b3da <UART_SetConfig+0x1b2>
 800b3ac:	2b30      	cmp	r3, #48	; 0x30
 800b3ae:	d818      	bhi.n	800b3e2 <UART_SetConfig+0x1ba>
 800b3b0:	2b20      	cmp	r3, #32
 800b3b2:	d00a      	beq.n	800b3ca <UART_SetConfig+0x1a2>
 800b3b4:	2b20      	cmp	r3, #32
 800b3b6:	d814      	bhi.n	800b3e2 <UART_SetConfig+0x1ba>
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <UART_SetConfig+0x19a>
 800b3bc:	2b10      	cmp	r3, #16
 800b3be:	d008      	beq.n	800b3d2 <UART_SetConfig+0x1aa>
 800b3c0:	e00f      	b.n	800b3e2 <UART_SetConfig+0x1ba>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3c8:	e0ad      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b3ca:	2302      	movs	r3, #2
 800b3cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3d0:	e0a9      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b3d2:	2304      	movs	r3, #4
 800b3d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3d8:	e0a5      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b3da:	2308      	movs	r3, #8
 800b3dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3e0:	e0a1      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b3e2:	2310      	movs	r3, #16
 800b3e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b3e8:	e09d      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a4a      	ldr	r2, [pc, #296]	; (800b518 <UART_SetConfig+0x2f0>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d125      	bne.n	800b440 <UART_SetConfig+0x218>
 800b3f4:	4b45      	ldr	r3, [pc, #276]	; (800b50c <UART_SetConfig+0x2e4>)
 800b3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b3fe:	2bc0      	cmp	r3, #192	; 0xc0
 800b400:	d016      	beq.n	800b430 <UART_SetConfig+0x208>
 800b402:	2bc0      	cmp	r3, #192	; 0xc0
 800b404:	d818      	bhi.n	800b438 <UART_SetConfig+0x210>
 800b406:	2b80      	cmp	r3, #128	; 0x80
 800b408:	d00a      	beq.n	800b420 <UART_SetConfig+0x1f8>
 800b40a:	2b80      	cmp	r3, #128	; 0x80
 800b40c:	d814      	bhi.n	800b438 <UART_SetConfig+0x210>
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d002      	beq.n	800b418 <UART_SetConfig+0x1f0>
 800b412:	2b40      	cmp	r3, #64	; 0x40
 800b414:	d008      	beq.n	800b428 <UART_SetConfig+0x200>
 800b416:	e00f      	b.n	800b438 <UART_SetConfig+0x210>
 800b418:	2300      	movs	r3, #0
 800b41a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b41e:	e082      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b420:	2302      	movs	r3, #2
 800b422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b426:	e07e      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b428:	2304      	movs	r3, #4
 800b42a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b42e:	e07a      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b430:	2308      	movs	r3, #8
 800b432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b436:	e076      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b438:	2310      	movs	r3, #16
 800b43a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b43e:	e072      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a35      	ldr	r2, [pc, #212]	; (800b51c <UART_SetConfig+0x2f4>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d12a      	bne.n	800b4a0 <UART_SetConfig+0x278>
 800b44a:	4b30      	ldr	r3, [pc, #192]	; (800b50c <UART_SetConfig+0x2e4>)
 800b44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b458:	d01a      	beq.n	800b490 <UART_SetConfig+0x268>
 800b45a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b45e:	d81b      	bhi.n	800b498 <UART_SetConfig+0x270>
 800b460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b464:	d00c      	beq.n	800b480 <UART_SetConfig+0x258>
 800b466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b46a:	d815      	bhi.n	800b498 <UART_SetConfig+0x270>
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d003      	beq.n	800b478 <UART_SetConfig+0x250>
 800b470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b474:	d008      	beq.n	800b488 <UART_SetConfig+0x260>
 800b476:	e00f      	b.n	800b498 <UART_SetConfig+0x270>
 800b478:	2300      	movs	r3, #0
 800b47a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b47e:	e052      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b480:	2302      	movs	r3, #2
 800b482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b486:	e04e      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b488:	2304      	movs	r3, #4
 800b48a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b48e:	e04a      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b490:	2308      	movs	r3, #8
 800b492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b496:	e046      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b498:	2310      	movs	r3, #16
 800b49a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b49e:	e042      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a17      	ldr	r2, [pc, #92]	; (800b504 <UART_SetConfig+0x2dc>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d13a      	bne.n	800b520 <UART_SetConfig+0x2f8>
 800b4aa:	4b18      	ldr	r3, [pc, #96]	; (800b50c <UART_SetConfig+0x2e4>)
 800b4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b4b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4b8:	d01a      	beq.n	800b4f0 <UART_SetConfig+0x2c8>
 800b4ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4be:	d81b      	bhi.n	800b4f8 <UART_SetConfig+0x2d0>
 800b4c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4c4:	d00c      	beq.n	800b4e0 <UART_SetConfig+0x2b8>
 800b4c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4ca:	d815      	bhi.n	800b4f8 <UART_SetConfig+0x2d0>
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d003      	beq.n	800b4d8 <UART_SetConfig+0x2b0>
 800b4d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4d4:	d008      	beq.n	800b4e8 <UART_SetConfig+0x2c0>
 800b4d6:	e00f      	b.n	800b4f8 <UART_SetConfig+0x2d0>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4de:	e022      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4e6:	e01e      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b4e8:	2304      	movs	r3, #4
 800b4ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ee:	e01a      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b4f0:	2308      	movs	r3, #8
 800b4f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4f6:	e016      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b4f8:	2310      	movs	r3, #16
 800b4fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4fe:	e012      	b.n	800b526 <UART_SetConfig+0x2fe>
 800b500:	cfff69f3 	.word	0xcfff69f3
 800b504:	40008000 	.word	0x40008000
 800b508:	40013800 	.word	0x40013800
 800b50c:	40021000 	.word	0x40021000
 800b510:	40004400 	.word	0x40004400
 800b514:	40004800 	.word	0x40004800
 800b518:	40004c00 	.word	0x40004c00
 800b51c:	40005000 	.word	0x40005000
 800b520:	2310      	movs	r3, #16
 800b522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4aae      	ldr	r2, [pc, #696]	; (800b7e4 <UART_SetConfig+0x5bc>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	f040 8097 	bne.w	800b660 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b532:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b536:	2b08      	cmp	r3, #8
 800b538:	d823      	bhi.n	800b582 <UART_SetConfig+0x35a>
 800b53a:	a201      	add	r2, pc, #4	; (adr r2, 800b540 <UART_SetConfig+0x318>)
 800b53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b540:	0800b565 	.word	0x0800b565
 800b544:	0800b583 	.word	0x0800b583
 800b548:	0800b56d 	.word	0x0800b56d
 800b54c:	0800b583 	.word	0x0800b583
 800b550:	0800b573 	.word	0x0800b573
 800b554:	0800b583 	.word	0x0800b583
 800b558:	0800b583 	.word	0x0800b583
 800b55c:	0800b583 	.word	0x0800b583
 800b560:	0800b57b 	.word	0x0800b57b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b564:	f7fe fd08 	bl	8009f78 <HAL_RCC_GetPCLK1Freq>
 800b568:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b56a:	e010      	b.n	800b58e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b56c:	4b9e      	ldr	r3, [pc, #632]	; (800b7e8 <UART_SetConfig+0x5c0>)
 800b56e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b570:	e00d      	b.n	800b58e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b572:	f7fe fc93 	bl	8009e9c <HAL_RCC_GetSysClockFreq>
 800b576:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b578:	e009      	b.n	800b58e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b57a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b57e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b580:	e005      	b.n	800b58e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b582:	2300      	movs	r3, #0
 800b584:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b58c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 8130 	beq.w	800b7f6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59a:	4a94      	ldr	r2, [pc, #592]	; (800b7ec <UART_SetConfig+0x5c4>)
 800b59c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	685a      	ldr	r2, [r3, #4]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	4413      	add	r3, r2
 800b5b4:	69ba      	ldr	r2, [r7, #24]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d305      	bcc.n	800b5c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5c0:	69ba      	ldr	r2, [r7, #24]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d903      	bls.n	800b5ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b5cc:	e113      	b.n	800b7f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	60bb      	str	r3, [r7, #8]
 800b5d4:	60fa      	str	r2, [r7, #12]
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5da:	4a84      	ldr	r2, [pc, #528]	; (800b7ec <UART_SetConfig+0x5c4>)
 800b5dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	603b      	str	r3, [r7, #0]
 800b5e6:	607a      	str	r2, [r7, #4]
 800b5e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b5f0:	f7f4 fe12 	bl	8000218 <__aeabi_uldivmod>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	f04f 0200 	mov.w	r2, #0
 800b600:	f04f 0300 	mov.w	r3, #0
 800b604:	020b      	lsls	r3, r1, #8
 800b606:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b60a:	0202      	lsls	r2, r0, #8
 800b60c:	6979      	ldr	r1, [r7, #20]
 800b60e:	6849      	ldr	r1, [r1, #4]
 800b610:	0849      	lsrs	r1, r1, #1
 800b612:	2000      	movs	r0, #0
 800b614:	460c      	mov	r4, r1
 800b616:	4605      	mov	r5, r0
 800b618:	eb12 0804 	adds.w	r8, r2, r4
 800b61c:	eb43 0905 	adc.w	r9, r3, r5
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	469a      	mov	sl, r3
 800b628:	4693      	mov	fp, r2
 800b62a:	4652      	mov	r2, sl
 800b62c:	465b      	mov	r3, fp
 800b62e:	4640      	mov	r0, r8
 800b630:	4649      	mov	r1, r9
 800b632:	f7f4 fdf1 	bl	8000218 <__aeabi_uldivmod>
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	4613      	mov	r3, r2
 800b63c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b63e:	6a3b      	ldr	r3, [r7, #32]
 800b640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b644:	d308      	bcc.n	800b658 <UART_SetConfig+0x430>
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b64c:	d204      	bcs.n	800b658 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	6a3a      	ldr	r2, [r7, #32]
 800b654:	60da      	str	r2, [r3, #12]
 800b656:	e0ce      	b.n	800b7f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b65e:	e0ca      	b.n	800b7f6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	69db      	ldr	r3, [r3, #28]
 800b664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b668:	d166      	bne.n	800b738 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b66a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b66e:	2b08      	cmp	r3, #8
 800b670:	d827      	bhi.n	800b6c2 <UART_SetConfig+0x49a>
 800b672:	a201      	add	r2, pc, #4	; (adr r2, 800b678 <UART_SetConfig+0x450>)
 800b674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b678:	0800b69d 	.word	0x0800b69d
 800b67c:	0800b6a5 	.word	0x0800b6a5
 800b680:	0800b6ad 	.word	0x0800b6ad
 800b684:	0800b6c3 	.word	0x0800b6c3
 800b688:	0800b6b3 	.word	0x0800b6b3
 800b68c:	0800b6c3 	.word	0x0800b6c3
 800b690:	0800b6c3 	.word	0x0800b6c3
 800b694:	0800b6c3 	.word	0x0800b6c3
 800b698:	0800b6bb 	.word	0x0800b6bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b69c:	f7fe fc6c 	bl	8009f78 <HAL_RCC_GetPCLK1Freq>
 800b6a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6a2:	e014      	b.n	800b6ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6a4:	f7fe fc7e 	bl	8009fa4 <HAL_RCC_GetPCLK2Freq>
 800b6a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6aa:	e010      	b.n	800b6ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6ac:	4b4e      	ldr	r3, [pc, #312]	; (800b7e8 <UART_SetConfig+0x5c0>)
 800b6ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6b0:	e00d      	b.n	800b6ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6b2:	f7fe fbf3 	bl	8009e9c <HAL_RCC_GetSysClockFreq>
 800b6b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6b8:	e009      	b.n	800b6ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6c0:	e005      	b.n	800b6ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b6cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f000 8090 	beq.w	800b7f6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6da:	4a44      	ldr	r2, [pc, #272]	; (800b7ec <UART_SetConfig+0x5c4>)
 800b6dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6e8:	005a      	lsls	r2, r3, #1
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	085b      	lsrs	r3, r3, #1
 800b6f0:	441a      	add	r2, r3
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6fc:	6a3b      	ldr	r3, [r7, #32]
 800b6fe:	2b0f      	cmp	r3, #15
 800b700:	d916      	bls.n	800b730 <UART_SetConfig+0x508>
 800b702:	6a3b      	ldr	r3, [r7, #32]
 800b704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b708:	d212      	bcs.n	800b730 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	f023 030f 	bic.w	r3, r3, #15
 800b712:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b714:	6a3b      	ldr	r3, [r7, #32]
 800b716:	085b      	lsrs	r3, r3, #1
 800b718:	b29b      	uxth	r3, r3
 800b71a:	f003 0307 	and.w	r3, r3, #7
 800b71e:	b29a      	uxth	r2, r3
 800b720:	8bfb      	ldrh	r3, [r7, #30]
 800b722:	4313      	orrs	r3, r2
 800b724:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	8bfa      	ldrh	r2, [r7, #30]
 800b72c:	60da      	str	r2, [r3, #12]
 800b72e:	e062      	b.n	800b7f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b736:	e05e      	b.n	800b7f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b738:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b73c:	2b08      	cmp	r3, #8
 800b73e:	d828      	bhi.n	800b792 <UART_SetConfig+0x56a>
 800b740:	a201      	add	r2, pc, #4	; (adr r2, 800b748 <UART_SetConfig+0x520>)
 800b742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b746:	bf00      	nop
 800b748:	0800b76d 	.word	0x0800b76d
 800b74c:	0800b775 	.word	0x0800b775
 800b750:	0800b77d 	.word	0x0800b77d
 800b754:	0800b793 	.word	0x0800b793
 800b758:	0800b783 	.word	0x0800b783
 800b75c:	0800b793 	.word	0x0800b793
 800b760:	0800b793 	.word	0x0800b793
 800b764:	0800b793 	.word	0x0800b793
 800b768:	0800b78b 	.word	0x0800b78b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b76c:	f7fe fc04 	bl	8009f78 <HAL_RCC_GetPCLK1Freq>
 800b770:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b772:	e014      	b.n	800b79e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b774:	f7fe fc16 	bl	8009fa4 <HAL_RCC_GetPCLK2Freq>
 800b778:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b77a:	e010      	b.n	800b79e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b77c:	4b1a      	ldr	r3, [pc, #104]	; (800b7e8 <UART_SetConfig+0x5c0>)
 800b77e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b780:	e00d      	b.n	800b79e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b782:	f7fe fb8b 	bl	8009e9c <HAL_RCC_GetSysClockFreq>
 800b786:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b788:	e009      	b.n	800b79e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b78a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b78e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b790:	e005      	b.n	800b79e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b79c:	bf00      	nop
    }

    if (pclk != 0U)
 800b79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d028      	beq.n	800b7f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a8:	4a10      	ldr	r2, [pc, #64]	; (800b7ec <UART_SetConfig+0x5c4>)
 800b7aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	085b      	lsrs	r3, r3, #1
 800b7bc:	441a      	add	r2, r3
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7c8:	6a3b      	ldr	r3, [r7, #32]
 800b7ca:	2b0f      	cmp	r3, #15
 800b7cc:	d910      	bls.n	800b7f0 <UART_SetConfig+0x5c8>
 800b7ce:	6a3b      	ldr	r3, [r7, #32]
 800b7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d4:	d20c      	bcs.n	800b7f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b7d6:	6a3b      	ldr	r3, [r7, #32]
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	60da      	str	r2, [r3, #12]
 800b7e0:	e009      	b.n	800b7f6 <UART_SetConfig+0x5ce>
 800b7e2:	bf00      	nop
 800b7e4:	40008000 	.word	0x40008000
 800b7e8:	00f42400 	.word	0x00f42400
 800b7ec:	0800cfb0 	.word	0x0800cfb0
      }
      else
      {
        ret = HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	2201      	movs	r2, #1
 800b802:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2200      	movs	r2, #0
 800b80a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	2200      	movs	r2, #0
 800b810:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b812:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b816:	4618      	mov	r0, r3
 800b818:	3730      	adds	r7, #48	; 0x30
 800b81a:	46bd      	mov	sp, r7
 800b81c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b82c:	f003 0308 	and.w	r3, r3, #8
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00a      	beq.n	800b84a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	430a      	orrs	r2, r1
 800b848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b84e:	f003 0301 	and.w	r3, r3, #1
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00a      	beq.n	800b86c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	430a      	orrs	r2, r1
 800b86a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b870:	f003 0302 	and.w	r3, r3, #2
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00a      	beq.n	800b88e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	430a      	orrs	r2, r1
 800b88c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b892:	f003 0304 	and.w	r3, r3, #4
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00a      	beq.n	800b8b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	430a      	orrs	r2, r1
 800b8ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b4:	f003 0310 	and.w	r3, r3, #16
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00a      	beq.n	800b8d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	430a      	orrs	r2, r1
 800b8d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d6:	f003 0320 	and.w	r3, r3, #32
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00a      	beq.n	800b8f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	430a      	orrs	r2, r1
 800b8f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d01a      	beq.n	800b936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	430a      	orrs	r2, r1
 800b914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b91a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b91e:	d10a      	bne.n	800b936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	430a      	orrs	r2, r1
 800b934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00a      	beq.n	800b958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	430a      	orrs	r2, r1
 800b956:	605a      	str	r2, [r3, #4]
  }
}
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b098      	sub	sp, #96	; 0x60
 800b968:	af02      	add	r7, sp, #8
 800b96a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b974:	f7f9 fc6e 	bl	8005254 <HAL_GetTick>
 800b978:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 0308 	and.w	r3, r3, #8
 800b984:	2b08      	cmp	r3, #8
 800b986:	d12f      	bne.n	800b9e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b988:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b990:	2200      	movs	r2, #0
 800b992:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 f88e 	bl	800bab8 <UART_WaitOnFlagUntilTimeout>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d022      	beq.n	800b9e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9aa:	e853 3f00 	ldrex	r3, [r3]
 800b9ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9b6:	653b      	str	r3, [r7, #80]	; 0x50
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	461a      	mov	r2, r3
 800b9be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9c0:	647b      	str	r3, [r7, #68]	; 0x44
 800b9c2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9c8:	e841 2300 	strex	r3, r2, [r1]
 800b9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d1e6      	bne.n	800b9a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e063      	b.n	800bab0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 0304 	and.w	r3, r3, #4
 800b9f2:	2b04      	cmp	r3, #4
 800b9f4:	d149      	bne.n	800ba8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f857 	bl	800bab8 <UART_WaitOnFlagUntilTimeout>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d03c      	beq.n	800ba8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba18:	e853 3f00 	ldrex	r3, [r3]
 800ba1c:	623b      	str	r3, [r7, #32]
   return(result);
 800ba1e:	6a3b      	ldr	r3, [r7, #32]
 800ba20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba2e:	633b      	str	r3, [r7, #48]	; 0x30
 800ba30:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba36:	e841 2300 	strex	r3, r2, [r1]
 800ba3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1e6      	bne.n	800ba10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3308      	adds	r3, #8
 800ba48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	e853 3f00 	ldrex	r3, [r3]
 800ba50:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f023 0301 	bic.w	r3, r3, #1
 800ba58:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	3308      	adds	r3, #8
 800ba60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba62:	61fa      	str	r2, [r7, #28]
 800ba64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba66:	69b9      	ldr	r1, [r7, #24]
 800ba68:	69fa      	ldr	r2, [r7, #28]
 800ba6a:	e841 2300 	strex	r3, r2, [r1]
 800ba6e:	617b      	str	r3, [r7, #20]
   return(result);
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1e5      	bne.n	800ba42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2220      	movs	r2, #32
 800ba7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e012      	b.n	800bab0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2220      	movs	r2, #32
 800ba8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2220      	movs	r2, #32
 800ba96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3758      	adds	r7, #88	; 0x58
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	603b      	str	r3, [r7, #0]
 800bac4:	4613      	mov	r3, r2
 800bac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bac8:	e04f      	b.n	800bb6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad0:	d04b      	beq.n	800bb6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bad2:	f7f9 fbbf 	bl	8005254 <HAL_GetTick>
 800bad6:	4602      	mov	r2, r0
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	69ba      	ldr	r2, [r7, #24]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d302      	bcc.n	800bae8 <UART_WaitOnFlagUntilTimeout+0x30>
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bae8:	2303      	movs	r3, #3
 800baea:	e04e      	b.n	800bb8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f003 0304 	and.w	r3, r3, #4
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d037      	beq.n	800bb6a <UART_WaitOnFlagUntilTimeout+0xb2>
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	2b80      	cmp	r3, #128	; 0x80
 800bafe:	d034      	beq.n	800bb6a <UART_WaitOnFlagUntilTimeout+0xb2>
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	2b40      	cmp	r3, #64	; 0x40
 800bb04:	d031      	beq.n	800bb6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	69db      	ldr	r3, [r3, #28]
 800bb0c:	f003 0308 	and.w	r3, r3, #8
 800bb10:	2b08      	cmp	r3, #8
 800bb12:	d110      	bne.n	800bb36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2208      	movs	r2, #8
 800bb1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f000 f838 	bl	800bb92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2208      	movs	r2, #8
 800bb26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	e029      	b.n	800bb8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	69db      	ldr	r3, [r3, #28]
 800bb3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb44:	d111      	bne.n	800bb6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 f81e 	bl	800bb92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2220      	movs	r2, #32
 800bb5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bb66:	2303      	movs	r3, #3
 800bb68:	e00f      	b.n	800bb8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	69da      	ldr	r2, [r3, #28]
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	4013      	ands	r3, r2
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	bf0c      	ite	eq
 800bb7a:	2301      	moveq	r3, #1
 800bb7c:	2300      	movne	r3, #0
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	461a      	mov	r2, r3
 800bb82:	79fb      	ldrb	r3, [r7, #7]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d0a0      	beq.n	800baca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb92:	b480      	push	{r7}
 800bb94:	b095      	sub	sp, #84	; 0x54
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba2:	e853 3f00 	ldrex	r3, [r3]
 800bba6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb8:	643b      	str	r3, [r7, #64]	; 0x40
 800bbba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bbbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbc0:	e841 2300 	strex	r3, r2, [r1]
 800bbc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1e6      	bne.n	800bb9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3308      	adds	r3, #8
 800bbd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	e853 3f00 	ldrex	r3, [r3]
 800bbda:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbe2:	f023 0301 	bic.w	r3, r3, #1
 800bbe6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	3308      	adds	r3, #8
 800bbee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bbf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbf8:	e841 2300 	strex	r3, r2, [r1]
 800bbfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1e3      	bne.n	800bbcc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d118      	bne.n	800bc3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	e853 3f00 	ldrex	r3, [r3]
 800bc18:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	f023 0310 	bic.w	r3, r3, #16
 800bc20:	647b      	str	r3, [r7, #68]	; 0x44
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	461a      	mov	r2, r3
 800bc28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc2a:	61bb      	str	r3, [r7, #24]
 800bc2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2e:	6979      	ldr	r1, [r7, #20]
 800bc30:	69ba      	ldr	r2, [r7, #24]
 800bc32:	e841 2300 	strex	r3, r2, [r1]
 800bc36:	613b      	str	r3, [r7, #16]
   return(result);
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1e6      	bne.n	800bc0c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2220      	movs	r2, #32
 800bc42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bc52:	bf00      	nop
 800bc54:	3754      	adds	r7, #84	; 0x54
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b086      	sub	sp, #24
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	60f8      	str	r0, [r7, #12]
 800bc66:	60b9      	str	r1, [r7, #8]
 800bc68:	607a      	str	r2, [r7, #4]
 800bc6a:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d101      	bne.n	800bc76 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800bc72:	2301      	movs	r3, #1
 800bc74:	e058      	b.n	800bd28 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d106      	bne.n	800bc8e <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f7f8 fcdf 	bl	800464c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2224      	movs	r2, #36	; 0x24
 800bc92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f022 0201 	bic.w	r2, r2, #1
 800bca4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d002      	beq.n	800bcb4 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f7ff fdb6 	bl	800b820 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f7ff fab7 	bl	800b228 <UART_SetConfig>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d101      	bne.n	800bcc4 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e031      	b.n	800bd28 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	689a      	ldr	r2, [r3, #8]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcd2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68ba      	ldr	r2, [r7, #8]
 800bce4:	430a      	orrs	r2, r1
 800bce6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	055b      	lsls	r3, r3, #21
 800bcec:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	041b      	lsls	r3, r3, #16
 800bcf2:	697a      	ldr	r2, [r7, #20]
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800bd02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	6812      	ldr	r2, [r2, #0]
 800bd0a:	6979      	ldr	r1, [r7, #20]
 800bd0c:	430b      	orrs	r3, r1
 800bd0e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f042 0201 	orr.w	r2, r2, #1
 800bd1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f7ff fe1f 	bl	800b964 <UART_CheckIdleState>
 800bd26:	4603      	mov	r3, r0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d101      	bne.n	800bd46 <HAL_UARTEx_DisableFifoMode+0x16>
 800bd42:	2302      	movs	r3, #2
 800bd44:	e027      	b.n	800bd96 <HAL_UARTEx_DisableFifoMode+0x66>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2224      	movs	r2, #36	; 0x24
 800bd52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f022 0201 	bic.w	r2, r2, #1
 800bd6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bd74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2220      	movs	r2, #32
 800bd88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3714      	adds	r7, #20
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b084      	sub	sp, #16
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d101      	bne.n	800bdba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bdb6:	2302      	movs	r3, #2
 800bdb8:	e02d      	b.n	800be16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2224      	movs	r2, #36	; 0x24
 800bdc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f022 0201 	bic.w	r2, r2, #1
 800bde0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	683a      	ldr	r2, [r7, #0]
 800bdf2:	430a      	orrs	r2, r1
 800bdf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 f850 	bl	800be9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2220      	movs	r2, #32
 800be08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be1e:	b580      	push	{r7, lr}
 800be20:	b084      	sub	sp, #16
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d101      	bne.n	800be36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800be32:	2302      	movs	r3, #2
 800be34:	e02d      	b.n	800be92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2201      	movs	r2, #1
 800be3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2224      	movs	r2, #36	; 0x24
 800be42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f022 0201 	bic.w	r2, r2, #1
 800be5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	683a      	ldr	r2, [r7, #0]
 800be6e:	430a      	orrs	r2, r1
 800be70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f812 	bl	800be9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2220      	movs	r2, #32
 800be84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
	...

0800be9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d108      	bne.n	800bebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bebc:	e031      	b.n	800bf22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bebe:	2308      	movs	r3, #8
 800bec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bec2:	2308      	movs	r3, #8
 800bec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	0e5b      	lsrs	r3, r3, #25
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	f003 0307 	and.w	r3, r3, #7
 800bed4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	0f5b      	lsrs	r3, r3, #29
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	f003 0307 	and.w	r3, r3, #7
 800bee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bee6:	7bbb      	ldrb	r3, [r7, #14]
 800bee8:	7b3a      	ldrb	r2, [r7, #12]
 800beea:	4911      	ldr	r1, [pc, #68]	; (800bf30 <UARTEx_SetNbDataToProcess+0x94>)
 800beec:	5c8a      	ldrb	r2, [r1, r2]
 800beee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bef2:	7b3a      	ldrb	r2, [r7, #12]
 800bef4:	490f      	ldr	r1, [pc, #60]	; (800bf34 <UARTEx_SetNbDataToProcess+0x98>)
 800bef6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bef8:	fb93 f3f2 	sdiv	r3, r3, r2
 800befc:	b29a      	uxth	r2, r3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
 800bf06:	7b7a      	ldrb	r2, [r7, #13]
 800bf08:	4909      	ldr	r1, [pc, #36]	; (800bf30 <UARTEx_SetNbDataToProcess+0x94>)
 800bf0a:	5c8a      	ldrb	r2, [r1, r2]
 800bf0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bf10:	7b7a      	ldrb	r2, [r7, #13]
 800bf12:	4908      	ldr	r1, [pc, #32]	; (800bf34 <UARTEx_SetNbDataToProcess+0x98>)
 800bf14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf16:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bf22:	bf00      	nop
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	0800cfc8 	.word	0x0800cfc8
 800bf34:	0800cfd0 	.word	0x0800cfd0

0800bf38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bf40:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800bf44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	43db      	mvns	r3, r3
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	4013      	ands	r3, r2
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3714      	adds	r7, #20
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr

0800bf6e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bf6e:	b480      	push	{r7}
 800bf70:	b085      	sub	sp, #20
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	60f8      	str	r0, [r7, #12]
 800bf76:	1d3b      	adds	r3, r7, #4
 800bf78:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3714      	adds	r7, #20
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
	...

0800bfac <roundf>:
 800bfac:	ee10 0a10 	vmov	r0, s0
 800bfb0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800bfb4:	3a7f      	subs	r2, #127	; 0x7f
 800bfb6:	2a16      	cmp	r2, #22
 800bfb8:	dc15      	bgt.n	800bfe6 <roundf+0x3a>
 800bfba:	2a00      	cmp	r2, #0
 800bfbc:	da08      	bge.n	800bfd0 <roundf+0x24>
 800bfbe:	3201      	adds	r2, #1
 800bfc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800bfc4:	d101      	bne.n	800bfca <roundf+0x1e>
 800bfc6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800bfca:	ee00 3a10 	vmov	s0, r3
 800bfce:	4770      	bx	lr
 800bfd0:	4907      	ldr	r1, [pc, #28]	; (800bff0 <roundf+0x44>)
 800bfd2:	4111      	asrs	r1, r2
 800bfd4:	4208      	tst	r0, r1
 800bfd6:	d0fa      	beq.n	800bfce <roundf+0x22>
 800bfd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bfdc:	4113      	asrs	r3, r2
 800bfde:	4403      	add	r3, r0
 800bfe0:	ea23 0301 	bic.w	r3, r3, r1
 800bfe4:	e7f1      	b.n	800bfca <roundf+0x1e>
 800bfe6:	2a80      	cmp	r2, #128	; 0x80
 800bfe8:	d1f1      	bne.n	800bfce <roundf+0x22>
 800bfea:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bfee:	4770      	bx	lr
 800bff0:	007fffff 	.word	0x007fffff

0800bff4 <atoi>:
 800bff4:	220a      	movs	r2, #10
 800bff6:	2100      	movs	r1, #0
 800bff8:	f000 b882 	b.w	800c100 <strtol>

0800bffc <_strtol_l.constprop.0>:
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c002:	d001      	beq.n	800c008 <_strtol_l.constprop.0+0xc>
 800c004:	2b24      	cmp	r3, #36	; 0x24
 800c006:	d906      	bls.n	800c016 <_strtol_l.constprop.0+0x1a>
 800c008:	f000 fac8 	bl	800c59c <__errno>
 800c00c:	2316      	movs	r3, #22
 800c00e:	6003      	str	r3, [r0, #0]
 800c010:	2000      	movs	r0, #0
 800c012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c016:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c0fc <_strtol_l.constprop.0+0x100>
 800c01a:	460d      	mov	r5, r1
 800c01c:	462e      	mov	r6, r5
 800c01e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c022:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c026:	f017 0708 	ands.w	r7, r7, #8
 800c02a:	d1f7      	bne.n	800c01c <_strtol_l.constprop.0+0x20>
 800c02c:	2c2d      	cmp	r4, #45	; 0x2d
 800c02e:	d132      	bne.n	800c096 <_strtol_l.constprop.0+0x9a>
 800c030:	782c      	ldrb	r4, [r5, #0]
 800c032:	2701      	movs	r7, #1
 800c034:	1cb5      	adds	r5, r6, #2
 800c036:	2b00      	cmp	r3, #0
 800c038:	d05b      	beq.n	800c0f2 <_strtol_l.constprop.0+0xf6>
 800c03a:	2b10      	cmp	r3, #16
 800c03c:	d109      	bne.n	800c052 <_strtol_l.constprop.0+0x56>
 800c03e:	2c30      	cmp	r4, #48	; 0x30
 800c040:	d107      	bne.n	800c052 <_strtol_l.constprop.0+0x56>
 800c042:	782c      	ldrb	r4, [r5, #0]
 800c044:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c048:	2c58      	cmp	r4, #88	; 0x58
 800c04a:	d14d      	bne.n	800c0e8 <_strtol_l.constprop.0+0xec>
 800c04c:	786c      	ldrb	r4, [r5, #1]
 800c04e:	2310      	movs	r3, #16
 800c050:	3502      	adds	r5, #2
 800c052:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c056:	f108 38ff 	add.w	r8, r8, #4294967295
 800c05a:	f04f 0e00 	mov.w	lr, #0
 800c05e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c062:	4676      	mov	r6, lr
 800c064:	fb03 8a19 	mls	sl, r3, r9, r8
 800c068:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c06c:	f1bc 0f09 	cmp.w	ip, #9
 800c070:	d816      	bhi.n	800c0a0 <_strtol_l.constprop.0+0xa4>
 800c072:	4664      	mov	r4, ip
 800c074:	42a3      	cmp	r3, r4
 800c076:	dd24      	ble.n	800c0c2 <_strtol_l.constprop.0+0xc6>
 800c078:	f1be 3fff 	cmp.w	lr, #4294967295
 800c07c:	d008      	beq.n	800c090 <_strtol_l.constprop.0+0x94>
 800c07e:	45b1      	cmp	r9, r6
 800c080:	d31c      	bcc.n	800c0bc <_strtol_l.constprop.0+0xc0>
 800c082:	d101      	bne.n	800c088 <_strtol_l.constprop.0+0x8c>
 800c084:	45a2      	cmp	sl, r4
 800c086:	db19      	blt.n	800c0bc <_strtol_l.constprop.0+0xc0>
 800c088:	fb06 4603 	mla	r6, r6, r3, r4
 800c08c:	f04f 0e01 	mov.w	lr, #1
 800c090:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c094:	e7e8      	b.n	800c068 <_strtol_l.constprop.0+0x6c>
 800c096:	2c2b      	cmp	r4, #43	; 0x2b
 800c098:	bf04      	itt	eq
 800c09a:	782c      	ldrbeq	r4, [r5, #0]
 800c09c:	1cb5      	addeq	r5, r6, #2
 800c09e:	e7ca      	b.n	800c036 <_strtol_l.constprop.0+0x3a>
 800c0a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c0a4:	f1bc 0f19 	cmp.w	ip, #25
 800c0a8:	d801      	bhi.n	800c0ae <_strtol_l.constprop.0+0xb2>
 800c0aa:	3c37      	subs	r4, #55	; 0x37
 800c0ac:	e7e2      	b.n	800c074 <_strtol_l.constprop.0+0x78>
 800c0ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c0b2:	f1bc 0f19 	cmp.w	ip, #25
 800c0b6:	d804      	bhi.n	800c0c2 <_strtol_l.constprop.0+0xc6>
 800c0b8:	3c57      	subs	r4, #87	; 0x57
 800c0ba:	e7db      	b.n	800c074 <_strtol_l.constprop.0+0x78>
 800c0bc:	f04f 3eff 	mov.w	lr, #4294967295
 800c0c0:	e7e6      	b.n	800c090 <_strtol_l.constprop.0+0x94>
 800c0c2:	f1be 3fff 	cmp.w	lr, #4294967295
 800c0c6:	d105      	bne.n	800c0d4 <_strtol_l.constprop.0+0xd8>
 800c0c8:	2322      	movs	r3, #34	; 0x22
 800c0ca:	6003      	str	r3, [r0, #0]
 800c0cc:	4646      	mov	r6, r8
 800c0ce:	b942      	cbnz	r2, 800c0e2 <_strtol_l.constprop.0+0xe6>
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	e79e      	b.n	800c012 <_strtol_l.constprop.0+0x16>
 800c0d4:	b107      	cbz	r7, 800c0d8 <_strtol_l.constprop.0+0xdc>
 800c0d6:	4276      	negs	r6, r6
 800c0d8:	2a00      	cmp	r2, #0
 800c0da:	d0f9      	beq.n	800c0d0 <_strtol_l.constprop.0+0xd4>
 800c0dc:	f1be 0f00 	cmp.w	lr, #0
 800c0e0:	d000      	beq.n	800c0e4 <_strtol_l.constprop.0+0xe8>
 800c0e2:	1e69      	subs	r1, r5, #1
 800c0e4:	6011      	str	r1, [r2, #0]
 800c0e6:	e7f3      	b.n	800c0d0 <_strtol_l.constprop.0+0xd4>
 800c0e8:	2430      	movs	r4, #48	; 0x30
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1b1      	bne.n	800c052 <_strtol_l.constprop.0+0x56>
 800c0ee:	2308      	movs	r3, #8
 800c0f0:	e7af      	b.n	800c052 <_strtol_l.constprop.0+0x56>
 800c0f2:	2c30      	cmp	r4, #48	; 0x30
 800c0f4:	d0a5      	beq.n	800c042 <_strtol_l.constprop.0+0x46>
 800c0f6:	230a      	movs	r3, #10
 800c0f8:	e7ab      	b.n	800c052 <_strtol_l.constprop.0+0x56>
 800c0fa:	bf00      	nop
 800c0fc:	0800cfd9 	.word	0x0800cfd9

0800c100 <strtol>:
 800c100:	4613      	mov	r3, r2
 800c102:	460a      	mov	r2, r1
 800c104:	4601      	mov	r1, r0
 800c106:	4802      	ldr	r0, [pc, #8]	; (800c110 <strtol+0x10>)
 800c108:	6800      	ldr	r0, [r0, #0]
 800c10a:	f7ff bf77 	b.w	800bffc <_strtol_l.constprop.0>
 800c10e:	bf00      	nop
 800c110:	20000064 	.word	0x20000064

0800c114 <std>:
 800c114:	2300      	movs	r3, #0
 800c116:	b510      	push	{r4, lr}
 800c118:	4604      	mov	r4, r0
 800c11a:	e9c0 3300 	strd	r3, r3, [r0]
 800c11e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c122:	6083      	str	r3, [r0, #8]
 800c124:	8181      	strh	r1, [r0, #12]
 800c126:	6643      	str	r3, [r0, #100]	; 0x64
 800c128:	81c2      	strh	r2, [r0, #14]
 800c12a:	6183      	str	r3, [r0, #24]
 800c12c:	4619      	mov	r1, r3
 800c12e:	2208      	movs	r2, #8
 800c130:	305c      	adds	r0, #92	; 0x5c
 800c132:	f000 f9e5 	bl	800c500 <memset>
 800c136:	4b0d      	ldr	r3, [pc, #52]	; (800c16c <std+0x58>)
 800c138:	6263      	str	r3, [r4, #36]	; 0x24
 800c13a:	4b0d      	ldr	r3, [pc, #52]	; (800c170 <std+0x5c>)
 800c13c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c13e:	4b0d      	ldr	r3, [pc, #52]	; (800c174 <std+0x60>)
 800c140:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c142:	4b0d      	ldr	r3, [pc, #52]	; (800c178 <std+0x64>)
 800c144:	6323      	str	r3, [r4, #48]	; 0x30
 800c146:	4b0d      	ldr	r3, [pc, #52]	; (800c17c <std+0x68>)
 800c148:	6224      	str	r4, [r4, #32]
 800c14a:	429c      	cmp	r4, r3
 800c14c:	d006      	beq.n	800c15c <std+0x48>
 800c14e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c152:	4294      	cmp	r4, r2
 800c154:	d002      	beq.n	800c15c <std+0x48>
 800c156:	33d0      	adds	r3, #208	; 0xd0
 800c158:	429c      	cmp	r4, r3
 800c15a:	d105      	bne.n	800c168 <std+0x54>
 800c15c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c164:	f000 ba44 	b.w	800c5f0 <__retarget_lock_init_recursive>
 800c168:	bd10      	pop	{r4, pc}
 800c16a:	bf00      	nop
 800c16c:	0800c351 	.word	0x0800c351
 800c170:	0800c373 	.word	0x0800c373
 800c174:	0800c3ab 	.word	0x0800c3ab
 800c178:	0800c3cf 	.word	0x0800c3cf
 800c17c:	20000ce0 	.word	0x20000ce0

0800c180 <stdio_exit_handler>:
 800c180:	4a02      	ldr	r2, [pc, #8]	; (800c18c <stdio_exit_handler+0xc>)
 800c182:	4903      	ldr	r1, [pc, #12]	; (800c190 <stdio_exit_handler+0x10>)
 800c184:	4803      	ldr	r0, [pc, #12]	; (800c194 <stdio_exit_handler+0x14>)
 800c186:	f000 b869 	b.w	800c25c <_fwalk_sglue>
 800c18a:	bf00      	nop
 800c18c:	2000000c 	.word	0x2000000c
 800c190:	0800c911 	.word	0x0800c911
 800c194:	20000018 	.word	0x20000018

0800c198 <cleanup_stdio>:
 800c198:	6841      	ldr	r1, [r0, #4]
 800c19a:	4b0c      	ldr	r3, [pc, #48]	; (800c1cc <cleanup_stdio+0x34>)
 800c19c:	4299      	cmp	r1, r3
 800c19e:	b510      	push	{r4, lr}
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	d001      	beq.n	800c1a8 <cleanup_stdio+0x10>
 800c1a4:	f000 fbb4 	bl	800c910 <_fflush_r>
 800c1a8:	68a1      	ldr	r1, [r4, #8]
 800c1aa:	4b09      	ldr	r3, [pc, #36]	; (800c1d0 <cleanup_stdio+0x38>)
 800c1ac:	4299      	cmp	r1, r3
 800c1ae:	d002      	beq.n	800c1b6 <cleanup_stdio+0x1e>
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f000 fbad 	bl	800c910 <_fflush_r>
 800c1b6:	68e1      	ldr	r1, [r4, #12]
 800c1b8:	4b06      	ldr	r3, [pc, #24]	; (800c1d4 <cleanup_stdio+0x3c>)
 800c1ba:	4299      	cmp	r1, r3
 800c1bc:	d004      	beq.n	800c1c8 <cleanup_stdio+0x30>
 800c1be:	4620      	mov	r0, r4
 800c1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1c4:	f000 bba4 	b.w	800c910 <_fflush_r>
 800c1c8:	bd10      	pop	{r4, pc}
 800c1ca:	bf00      	nop
 800c1cc:	20000ce0 	.word	0x20000ce0
 800c1d0:	20000d48 	.word	0x20000d48
 800c1d4:	20000db0 	.word	0x20000db0

0800c1d8 <global_stdio_init.part.0>:
 800c1d8:	b510      	push	{r4, lr}
 800c1da:	4b0b      	ldr	r3, [pc, #44]	; (800c208 <global_stdio_init.part.0+0x30>)
 800c1dc:	4c0b      	ldr	r4, [pc, #44]	; (800c20c <global_stdio_init.part.0+0x34>)
 800c1de:	4a0c      	ldr	r2, [pc, #48]	; (800c210 <global_stdio_init.part.0+0x38>)
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	2104      	movs	r1, #4
 800c1e8:	f7ff ff94 	bl	800c114 <std>
 800c1ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	2109      	movs	r1, #9
 800c1f4:	f7ff ff8e 	bl	800c114 <std>
 800c1f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c202:	2112      	movs	r1, #18
 800c204:	f7ff bf86 	b.w	800c114 <std>
 800c208:	20000e18 	.word	0x20000e18
 800c20c:	20000ce0 	.word	0x20000ce0
 800c210:	0800c181 	.word	0x0800c181

0800c214 <__sfp_lock_acquire>:
 800c214:	4801      	ldr	r0, [pc, #4]	; (800c21c <__sfp_lock_acquire+0x8>)
 800c216:	f000 b9ec 	b.w	800c5f2 <__retarget_lock_acquire_recursive>
 800c21a:	bf00      	nop
 800c21c:	20000e21 	.word	0x20000e21

0800c220 <__sfp_lock_release>:
 800c220:	4801      	ldr	r0, [pc, #4]	; (800c228 <__sfp_lock_release+0x8>)
 800c222:	f000 b9e7 	b.w	800c5f4 <__retarget_lock_release_recursive>
 800c226:	bf00      	nop
 800c228:	20000e21 	.word	0x20000e21

0800c22c <__sinit>:
 800c22c:	b510      	push	{r4, lr}
 800c22e:	4604      	mov	r4, r0
 800c230:	f7ff fff0 	bl	800c214 <__sfp_lock_acquire>
 800c234:	6a23      	ldr	r3, [r4, #32]
 800c236:	b11b      	cbz	r3, 800c240 <__sinit+0x14>
 800c238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c23c:	f7ff bff0 	b.w	800c220 <__sfp_lock_release>
 800c240:	4b04      	ldr	r3, [pc, #16]	; (800c254 <__sinit+0x28>)
 800c242:	6223      	str	r3, [r4, #32]
 800c244:	4b04      	ldr	r3, [pc, #16]	; (800c258 <__sinit+0x2c>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1f5      	bne.n	800c238 <__sinit+0xc>
 800c24c:	f7ff ffc4 	bl	800c1d8 <global_stdio_init.part.0>
 800c250:	e7f2      	b.n	800c238 <__sinit+0xc>
 800c252:	bf00      	nop
 800c254:	0800c199 	.word	0x0800c199
 800c258:	20000e18 	.word	0x20000e18

0800c25c <_fwalk_sglue>:
 800c25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c260:	4607      	mov	r7, r0
 800c262:	4688      	mov	r8, r1
 800c264:	4614      	mov	r4, r2
 800c266:	2600      	movs	r6, #0
 800c268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c26c:	f1b9 0901 	subs.w	r9, r9, #1
 800c270:	d505      	bpl.n	800c27e <_fwalk_sglue+0x22>
 800c272:	6824      	ldr	r4, [r4, #0]
 800c274:	2c00      	cmp	r4, #0
 800c276:	d1f7      	bne.n	800c268 <_fwalk_sglue+0xc>
 800c278:	4630      	mov	r0, r6
 800c27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c27e:	89ab      	ldrh	r3, [r5, #12]
 800c280:	2b01      	cmp	r3, #1
 800c282:	d907      	bls.n	800c294 <_fwalk_sglue+0x38>
 800c284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c288:	3301      	adds	r3, #1
 800c28a:	d003      	beq.n	800c294 <_fwalk_sglue+0x38>
 800c28c:	4629      	mov	r1, r5
 800c28e:	4638      	mov	r0, r7
 800c290:	47c0      	blx	r8
 800c292:	4306      	orrs	r6, r0
 800c294:	3568      	adds	r5, #104	; 0x68
 800c296:	e7e9      	b.n	800c26c <_fwalk_sglue+0x10>

0800c298 <_puts_r>:
 800c298:	6a03      	ldr	r3, [r0, #32]
 800c29a:	b570      	push	{r4, r5, r6, lr}
 800c29c:	6884      	ldr	r4, [r0, #8]
 800c29e:	4605      	mov	r5, r0
 800c2a0:	460e      	mov	r6, r1
 800c2a2:	b90b      	cbnz	r3, 800c2a8 <_puts_r+0x10>
 800c2a4:	f7ff ffc2 	bl	800c22c <__sinit>
 800c2a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2aa:	07db      	lsls	r3, r3, #31
 800c2ac:	d405      	bmi.n	800c2ba <_puts_r+0x22>
 800c2ae:	89a3      	ldrh	r3, [r4, #12]
 800c2b0:	0598      	lsls	r0, r3, #22
 800c2b2:	d402      	bmi.n	800c2ba <_puts_r+0x22>
 800c2b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2b6:	f000 f99c 	bl	800c5f2 <__retarget_lock_acquire_recursive>
 800c2ba:	89a3      	ldrh	r3, [r4, #12]
 800c2bc:	0719      	lsls	r1, r3, #28
 800c2be:	d513      	bpl.n	800c2e8 <_puts_r+0x50>
 800c2c0:	6923      	ldr	r3, [r4, #16]
 800c2c2:	b18b      	cbz	r3, 800c2e8 <_puts_r+0x50>
 800c2c4:	3e01      	subs	r6, #1
 800c2c6:	68a3      	ldr	r3, [r4, #8]
 800c2c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c2cc:	3b01      	subs	r3, #1
 800c2ce:	60a3      	str	r3, [r4, #8]
 800c2d0:	b9e9      	cbnz	r1, 800c30e <_puts_r+0x76>
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	da2e      	bge.n	800c334 <_puts_r+0x9c>
 800c2d6:	4622      	mov	r2, r4
 800c2d8:	210a      	movs	r1, #10
 800c2da:	4628      	mov	r0, r5
 800c2dc:	f000 f87b 	bl	800c3d6 <__swbuf_r>
 800c2e0:	3001      	adds	r0, #1
 800c2e2:	d007      	beq.n	800c2f4 <_puts_r+0x5c>
 800c2e4:	250a      	movs	r5, #10
 800c2e6:	e007      	b.n	800c2f8 <_puts_r+0x60>
 800c2e8:	4621      	mov	r1, r4
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	f000 f8b0 	bl	800c450 <__swsetup_r>
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	d0e7      	beq.n	800c2c4 <_puts_r+0x2c>
 800c2f4:	f04f 35ff 	mov.w	r5, #4294967295
 800c2f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2fa:	07da      	lsls	r2, r3, #31
 800c2fc:	d405      	bmi.n	800c30a <_puts_r+0x72>
 800c2fe:	89a3      	ldrh	r3, [r4, #12]
 800c300:	059b      	lsls	r3, r3, #22
 800c302:	d402      	bmi.n	800c30a <_puts_r+0x72>
 800c304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c306:	f000 f975 	bl	800c5f4 <__retarget_lock_release_recursive>
 800c30a:	4628      	mov	r0, r5
 800c30c:	bd70      	pop	{r4, r5, r6, pc}
 800c30e:	2b00      	cmp	r3, #0
 800c310:	da04      	bge.n	800c31c <_puts_r+0x84>
 800c312:	69a2      	ldr	r2, [r4, #24]
 800c314:	429a      	cmp	r2, r3
 800c316:	dc06      	bgt.n	800c326 <_puts_r+0x8e>
 800c318:	290a      	cmp	r1, #10
 800c31a:	d004      	beq.n	800c326 <_puts_r+0x8e>
 800c31c:	6823      	ldr	r3, [r4, #0]
 800c31e:	1c5a      	adds	r2, r3, #1
 800c320:	6022      	str	r2, [r4, #0]
 800c322:	7019      	strb	r1, [r3, #0]
 800c324:	e7cf      	b.n	800c2c6 <_puts_r+0x2e>
 800c326:	4622      	mov	r2, r4
 800c328:	4628      	mov	r0, r5
 800c32a:	f000 f854 	bl	800c3d6 <__swbuf_r>
 800c32e:	3001      	adds	r0, #1
 800c330:	d1c9      	bne.n	800c2c6 <_puts_r+0x2e>
 800c332:	e7df      	b.n	800c2f4 <_puts_r+0x5c>
 800c334:	6823      	ldr	r3, [r4, #0]
 800c336:	250a      	movs	r5, #10
 800c338:	1c5a      	adds	r2, r3, #1
 800c33a:	6022      	str	r2, [r4, #0]
 800c33c:	701d      	strb	r5, [r3, #0]
 800c33e:	e7db      	b.n	800c2f8 <_puts_r+0x60>

0800c340 <puts>:
 800c340:	4b02      	ldr	r3, [pc, #8]	; (800c34c <puts+0xc>)
 800c342:	4601      	mov	r1, r0
 800c344:	6818      	ldr	r0, [r3, #0]
 800c346:	f7ff bfa7 	b.w	800c298 <_puts_r>
 800c34a:	bf00      	nop
 800c34c:	20000064 	.word	0x20000064

0800c350 <__sread>:
 800c350:	b510      	push	{r4, lr}
 800c352:	460c      	mov	r4, r1
 800c354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c358:	f000 f8fc 	bl	800c554 <_read_r>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	bfab      	itete	ge
 800c360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c362:	89a3      	ldrhlt	r3, [r4, #12]
 800c364:	181b      	addge	r3, r3, r0
 800c366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c36a:	bfac      	ite	ge
 800c36c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c36e:	81a3      	strhlt	r3, [r4, #12]
 800c370:	bd10      	pop	{r4, pc}

0800c372 <__swrite>:
 800c372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c376:	461f      	mov	r7, r3
 800c378:	898b      	ldrh	r3, [r1, #12]
 800c37a:	05db      	lsls	r3, r3, #23
 800c37c:	4605      	mov	r5, r0
 800c37e:	460c      	mov	r4, r1
 800c380:	4616      	mov	r6, r2
 800c382:	d505      	bpl.n	800c390 <__swrite+0x1e>
 800c384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c388:	2302      	movs	r3, #2
 800c38a:	2200      	movs	r2, #0
 800c38c:	f000 f8d0 	bl	800c530 <_lseek_r>
 800c390:	89a3      	ldrh	r3, [r4, #12]
 800c392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c39a:	81a3      	strh	r3, [r4, #12]
 800c39c:	4632      	mov	r2, r6
 800c39e:	463b      	mov	r3, r7
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a6:	f000 b8e7 	b.w	800c578 <_write_r>

0800c3aa <__sseek>:
 800c3aa:	b510      	push	{r4, lr}
 800c3ac:	460c      	mov	r4, r1
 800c3ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3b2:	f000 f8bd 	bl	800c530 <_lseek_r>
 800c3b6:	1c43      	adds	r3, r0, #1
 800c3b8:	89a3      	ldrh	r3, [r4, #12]
 800c3ba:	bf15      	itete	ne
 800c3bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3c6:	81a3      	strheq	r3, [r4, #12]
 800c3c8:	bf18      	it	ne
 800c3ca:	81a3      	strhne	r3, [r4, #12]
 800c3cc:	bd10      	pop	{r4, pc}

0800c3ce <__sclose>:
 800c3ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d2:	f000 b89d 	b.w	800c510 <_close_r>

0800c3d6 <__swbuf_r>:
 800c3d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d8:	460e      	mov	r6, r1
 800c3da:	4614      	mov	r4, r2
 800c3dc:	4605      	mov	r5, r0
 800c3de:	b118      	cbz	r0, 800c3e8 <__swbuf_r+0x12>
 800c3e0:	6a03      	ldr	r3, [r0, #32]
 800c3e2:	b90b      	cbnz	r3, 800c3e8 <__swbuf_r+0x12>
 800c3e4:	f7ff ff22 	bl	800c22c <__sinit>
 800c3e8:	69a3      	ldr	r3, [r4, #24]
 800c3ea:	60a3      	str	r3, [r4, #8]
 800c3ec:	89a3      	ldrh	r3, [r4, #12]
 800c3ee:	071a      	lsls	r2, r3, #28
 800c3f0:	d525      	bpl.n	800c43e <__swbuf_r+0x68>
 800c3f2:	6923      	ldr	r3, [r4, #16]
 800c3f4:	b31b      	cbz	r3, 800c43e <__swbuf_r+0x68>
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	6922      	ldr	r2, [r4, #16]
 800c3fa:	1a98      	subs	r0, r3, r2
 800c3fc:	6963      	ldr	r3, [r4, #20]
 800c3fe:	b2f6      	uxtb	r6, r6
 800c400:	4283      	cmp	r3, r0
 800c402:	4637      	mov	r7, r6
 800c404:	dc04      	bgt.n	800c410 <__swbuf_r+0x3a>
 800c406:	4621      	mov	r1, r4
 800c408:	4628      	mov	r0, r5
 800c40a:	f000 fa81 	bl	800c910 <_fflush_r>
 800c40e:	b9e0      	cbnz	r0, 800c44a <__swbuf_r+0x74>
 800c410:	68a3      	ldr	r3, [r4, #8]
 800c412:	3b01      	subs	r3, #1
 800c414:	60a3      	str	r3, [r4, #8]
 800c416:	6823      	ldr	r3, [r4, #0]
 800c418:	1c5a      	adds	r2, r3, #1
 800c41a:	6022      	str	r2, [r4, #0]
 800c41c:	701e      	strb	r6, [r3, #0]
 800c41e:	6962      	ldr	r2, [r4, #20]
 800c420:	1c43      	adds	r3, r0, #1
 800c422:	429a      	cmp	r2, r3
 800c424:	d004      	beq.n	800c430 <__swbuf_r+0x5a>
 800c426:	89a3      	ldrh	r3, [r4, #12]
 800c428:	07db      	lsls	r3, r3, #31
 800c42a:	d506      	bpl.n	800c43a <__swbuf_r+0x64>
 800c42c:	2e0a      	cmp	r6, #10
 800c42e:	d104      	bne.n	800c43a <__swbuf_r+0x64>
 800c430:	4621      	mov	r1, r4
 800c432:	4628      	mov	r0, r5
 800c434:	f000 fa6c 	bl	800c910 <_fflush_r>
 800c438:	b938      	cbnz	r0, 800c44a <__swbuf_r+0x74>
 800c43a:	4638      	mov	r0, r7
 800c43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c43e:	4621      	mov	r1, r4
 800c440:	4628      	mov	r0, r5
 800c442:	f000 f805 	bl	800c450 <__swsetup_r>
 800c446:	2800      	cmp	r0, #0
 800c448:	d0d5      	beq.n	800c3f6 <__swbuf_r+0x20>
 800c44a:	f04f 37ff 	mov.w	r7, #4294967295
 800c44e:	e7f4      	b.n	800c43a <__swbuf_r+0x64>

0800c450 <__swsetup_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4b2a      	ldr	r3, [pc, #168]	; (800c4fc <__swsetup_r+0xac>)
 800c454:	4605      	mov	r5, r0
 800c456:	6818      	ldr	r0, [r3, #0]
 800c458:	460c      	mov	r4, r1
 800c45a:	b118      	cbz	r0, 800c464 <__swsetup_r+0x14>
 800c45c:	6a03      	ldr	r3, [r0, #32]
 800c45e:	b90b      	cbnz	r3, 800c464 <__swsetup_r+0x14>
 800c460:	f7ff fee4 	bl	800c22c <__sinit>
 800c464:	89a3      	ldrh	r3, [r4, #12]
 800c466:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c46a:	0718      	lsls	r0, r3, #28
 800c46c:	d422      	bmi.n	800c4b4 <__swsetup_r+0x64>
 800c46e:	06d9      	lsls	r1, r3, #27
 800c470:	d407      	bmi.n	800c482 <__swsetup_r+0x32>
 800c472:	2309      	movs	r3, #9
 800c474:	602b      	str	r3, [r5, #0]
 800c476:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c47a:	81a3      	strh	r3, [r4, #12]
 800c47c:	f04f 30ff 	mov.w	r0, #4294967295
 800c480:	e034      	b.n	800c4ec <__swsetup_r+0x9c>
 800c482:	0758      	lsls	r0, r3, #29
 800c484:	d512      	bpl.n	800c4ac <__swsetup_r+0x5c>
 800c486:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c488:	b141      	cbz	r1, 800c49c <__swsetup_r+0x4c>
 800c48a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c48e:	4299      	cmp	r1, r3
 800c490:	d002      	beq.n	800c498 <__swsetup_r+0x48>
 800c492:	4628      	mov	r0, r5
 800c494:	f000 f8be 	bl	800c614 <_free_r>
 800c498:	2300      	movs	r3, #0
 800c49a:	6363      	str	r3, [r4, #52]	; 0x34
 800c49c:	89a3      	ldrh	r3, [r4, #12]
 800c49e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c4a2:	81a3      	strh	r3, [r4, #12]
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	6063      	str	r3, [r4, #4]
 800c4a8:	6923      	ldr	r3, [r4, #16]
 800c4aa:	6023      	str	r3, [r4, #0]
 800c4ac:	89a3      	ldrh	r3, [r4, #12]
 800c4ae:	f043 0308 	orr.w	r3, r3, #8
 800c4b2:	81a3      	strh	r3, [r4, #12]
 800c4b4:	6923      	ldr	r3, [r4, #16]
 800c4b6:	b94b      	cbnz	r3, 800c4cc <__swsetup_r+0x7c>
 800c4b8:	89a3      	ldrh	r3, [r4, #12]
 800c4ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c4be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4c2:	d003      	beq.n	800c4cc <__swsetup_r+0x7c>
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	f000 fa70 	bl	800c9ac <__smakebuf_r>
 800c4cc:	89a0      	ldrh	r0, [r4, #12]
 800c4ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4d2:	f010 0301 	ands.w	r3, r0, #1
 800c4d6:	d00a      	beq.n	800c4ee <__swsetup_r+0x9e>
 800c4d8:	2300      	movs	r3, #0
 800c4da:	60a3      	str	r3, [r4, #8]
 800c4dc:	6963      	ldr	r3, [r4, #20]
 800c4de:	425b      	negs	r3, r3
 800c4e0:	61a3      	str	r3, [r4, #24]
 800c4e2:	6923      	ldr	r3, [r4, #16]
 800c4e4:	b943      	cbnz	r3, 800c4f8 <__swsetup_r+0xa8>
 800c4e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4ea:	d1c4      	bne.n	800c476 <__swsetup_r+0x26>
 800c4ec:	bd38      	pop	{r3, r4, r5, pc}
 800c4ee:	0781      	lsls	r1, r0, #30
 800c4f0:	bf58      	it	pl
 800c4f2:	6963      	ldrpl	r3, [r4, #20]
 800c4f4:	60a3      	str	r3, [r4, #8]
 800c4f6:	e7f4      	b.n	800c4e2 <__swsetup_r+0x92>
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	e7f7      	b.n	800c4ec <__swsetup_r+0x9c>
 800c4fc:	20000064 	.word	0x20000064

0800c500 <memset>:
 800c500:	4402      	add	r2, r0
 800c502:	4603      	mov	r3, r0
 800c504:	4293      	cmp	r3, r2
 800c506:	d100      	bne.n	800c50a <memset+0xa>
 800c508:	4770      	bx	lr
 800c50a:	f803 1b01 	strb.w	r1, [r3], #1
 800c50e:	e7f9      	b.n	800c504 <memset+0x4>

0800c510 <_close_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	4d06      	ldr	r5, [pc, #24]	; (800c52c <_close_r+0x1c>)
 800c514:	2300      	movs	r3, #0
 800c516:	4604      	mov	r4, r0
 800c518:	4608      	mov	r0, r1
 800c51a:	602b      	str	r3, [r5, #0]
 800c51c:	f7f8 fad3 	bl	8004ac6 <_close>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d102      	bne.n	800c52a <_close_r+0x1a>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	b103      	cbz	r3, 800c52a <_close_r+0x1a>
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	20000e1c 	.word	0x20000e1c

0800c530 <_lseek_r>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	4d07      	ldr	r5, [pc, #28]	; (800c550 <_lseek_r+0x20>)
 800c534:	4604      	mov	r4, r0
 800c536:	4608      	mov	r0, r1
 800c538:	4611      	mov	r1, r2
 800c53a:	2200      	movs	r2, #0
 800c53c:	602a      	str	r2, [r5, #0]
 800c53e:	461a      	mov	r2, r3
 800c540:	f7f8 fae8 	bl	8004b14 <_lseek>
 800c544:	1c43      	adds	r3, r0, #1
 800c546:	d102      	bne.n	800c54e <_lseek_r+0x1e>
 800c548:	682b      	ldr	r3, [r5, #0]
 800c54a:	b103      	cbz	r3, 800c54e <_lseek_r+0x1e>
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	bd38      	pop	{r3, r4, r5, pc}
 800c550:	20000e1c 	.word	0x20000e1c

0800c554 <_read_r>:
 800c554:	b538      	push	{r3, r4, r5, lr}
 800c556:	4d07      	ldr	r5, [pc, #28]	; (800c574 <_read_r+0x20>)
 800c558:	4604      	mov	r4, r0
 800c55a:	4608      	mov	r0, r1
 800c55c:	4611      	mov	r1, r2
 800c55e:	2200      	movs	r2, #0
 800c560:	602a      	str	r2, [r5, #0]
 800c562:	461a      	mov	r2, r3
 800c564:	f7f8 fa76 	bl	8004a54 <_read>
 800c568:	1c43      	adds	r3, r0, #1
 800c56a:	d102      	bne.n	800c572 <_read_r+0x1e>
 800c56c:	682b      	ldr	r3, [r5, #0]
 800c56e:	b103      	cbz	r3, 800c572 <_read_r+0x1e>
 800c570:	6023      	str	r3, [r4, #0]
 800c572:	bd38      	pop	{r3, r4, r5, pc}
 800c574:	20000e1c 	.word	0x20000e1c

0800c578 <_write_r>:
 800c578:	b538      	push	{r3, r4, r5, lr}
 800c57a:	4d07      	ldr	r5, [pc, #28]	; (800c598 <_write_r+0x20>)
 800c57c:	4604      	mov	r4, r0
 800c57e:	4608      	mov	r0, r1
 800c580:	4611      	mov	r1, r2
 800c582:	2200      	movs	r2, #0
 800c584:	602a      	str	r2, [r5, #0]
 800c586:	461a      	mov	r2, r3
 800c588:	f7f8 fa81 	bl	8004a8e <_write>
 800c58c:	1c43      	adds	r3, r0, #1
 800c58e:	d102      	bne.n	800c596 <_write_r+0x1e>
 800c590:	682b      	ldr	r3, [r5, #0]
 800c592:	b103      	cbz	r3, 800c596 <_write_r+0x1e>
 800c594:	6023      	str	r3, [r4, #0]
 800c596:	bd38      	pop	{r3, r4, r5, pc}
 800c598:	20000e1c 	.word	0x20000e1c

0800c59c <__errno>:
 800c59c:	4b01      	ldr	r3, [pc, #4]	; (800c5a4 <__errno+0x8>)
 800c59e:	6818      	ldr	r0, [r3, #0]
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	20000064 	.word	0x20000064

0800c5a8 <__libc_init_array>:
 800c5a8:	b570      	push	{r4, r5, r6, lr}
 800c5aa:	4d0d      	ldr	r5, [pc, #52]	; (800c5e0 <__libc_init_array+0x38>)
 800c5ac:	4c0d      	ldr	r4, [pc, #52]	; (800c5e4 <__libc_init_array+0x3c>)
 800c5ae:	1b64      	subs	r4, r4, r5
 800c5b0:	10a4      	asrs	r4, r4, #2
 800c5b2:	2600      	movs	r6, #0
 800c5b4:	42a6      	cmp	r6, r4
 800c5b6:	d109      	bne.n	800c5cc <__libc_init_array+0x24>
 800c5b8:	4d0b      	ldr	r5, [pc, #44]	; (800c5e8 <__libc_init_array+0x40>)
 800c5ba:	4c0c      	ldr	r4, [pc, #48]	; (800c5ec <__libc_init_array+0x44>)
 800c5bc:	f000 fa64 	bl	800ca88 <_init>
 800c5c0:	1b64      	subs	r4, r4, r5
 800c5c2:	10a4      	asrs	r4, r4, #2
 800c5c4:	2600      	movs	r6, #0
 800c5c6:	42a6      	cmp	r6, r4
 800c5c8:	d105      	bne.n	800c5d6 <__libc_init_array+0x2e>
 800c5ca:	bd70      	pop	{r4, r5, r6, pc}
 800c5cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5d0:	4798      	blx	r3
 800c5d2:	3601      	adds	r6, #1
 800c5d4:	e7ee      	b.n	800c5b4 <__libc_init_array+0xc>
 800c5d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5da:	4798      	blx	r3
 800c5dc:	3601      	adds	r6, #1
 800c5de:	e7f2      	b.n	800c5c6 <__libc_init_array+0x1e>
 800c5e0:	0800d0e4 	.word	0x0800d0e4
 800c5e4:	0800d0e4 	.word	0x0800d0e4
 800c5e8:	0800d0e4 	.word	0x0800d0e4
 800c5ec:	0800d0e8 	.word	0x0800d0e8

0800c5f0 <__retarget_lock_init_recursive>:
 800c5f0:	4770      	bx	lr

0800c5f2 <__retarget_lock_acquire_recursive>:
 800c5f2:	4770      	bx	lr

0800c5f4 <__retarget_lock_release_recursive>:
 800c5f4:	4770      	bx	lr

0800c5f6 <memcpy>:
 800c5f6:	440a      	add	r2, r1
 800c5f8:	4291      	cmp	r1, r2
 800c5fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5fe:	d100      	bne.n	800c602 <memcpy+0xc>
 800c600:	4770      	bx	lr
 800c602:	b510      	push	{r4, lr}
 800c604:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c608:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c60c:	4291      	cmp	r1, r2
 800c60e:	d1f9      	bne.n	800c604 <memcpy+0xe>
 800c610:	bd10      	pop	{r4, pc}
	...

0800c614 <_free_r>:
 800c614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c616:	2900      	cmp	r1, #0
 800c618:	d044      	beq.n	800c6a4 <_free_r+0x90>
 800c61a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c61e:	9001      	str	r0, [sp, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	f1a1 0404 	sub.w	r4, r1, #4
 800c626:	bfb8      	it	lt
 800c628:	18e4      	addlt	r4, r4, r3
 800c62a:	f000 f8df 	bl	800c7ec <__malloc_lock>
 800c62e:	4a1e      	ldr	r2, [pc, #120]	; (800c6a8 <_free_r+0x94>)
 800c630:	9801      	ldr	r0, [sp, #4]
 800c632:	6813      	ldr	r3, [r2, #0]
 800c634:	b933      	cbnz	r3, 800c644 <_free_r+0x30>
 800c636:	6063      	str	r3, [r4, #4]
 800c638:	6014      	str	r4, [r2, #0]
 800c63a:	b003      	add	sp, #12
 800c63c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c640:	f000 b8da 	b.w	800c7f8 <__malloc_unlock>
 800c644:	42a3      	cmp	r3, r4
 800c646:	d908      	bls.n	800c65a <_free_r+0x46>
 800c648:	6825      	ldr	r5, [r4, #0]
 800c64a:	1961      	adds	r1, r4, r5
 800c64c:	428b      	cmp	r3, r1
 800c64e:	bf01      	itttt	eq
 800c650:	6819      	ldreq	r1, [r3, #0]
 800c652:	685b      	ldreq	r3, [r3, #4]
 800c654:	1949      	addeq	r1, r1, r5
 800c656:	6021      	streq	r1, [r4, #0]
 800c658:	e7ed      	b.n	800c636 <_free_r+0x22>
 800c65a:	461a      	mov	r2, r3
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	b10b      	cbz	r3, 800c664 <_free_r+0x50>
 800c660:	42a3      	cmp	r3, r4
 800c662:	d9fa      	bls.n	800c65a <_free_r+0x46>
 800c664:	6811      	ldr	r1, [r2, #0]
 800c666:	1855      	adds	r5, r2, r1
 800c668:	42a5      	cmp	r5, r4
 800c66a:	d10b      	bne.n	800c684 <_free_r+0x70>
 800c66c:	6824      	ldr	r4, [r4, #0]
 800c66e:	4421      	add	r1, r4
 800c670:	1854      	adds	r4, r2, r1
 800c672:	42a3      	cmp	r3, r4
 800c674:	6011      	str	r1, [r2, #0]
 800c676:	d1e0      	bne.n	800c63a <_free_r+0x26>
 800c678:	681c      	ldr	r4, [r3, #0]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	6053      	str	r3, [r2, #4]
 800c67e:	440c      	add	r4, r1
 800c680:	6014      	str	r4, [r2, #0]
 800c682:	e7da      	b.n	800c63a <_free_r+0x26>
 800c684:	d902      	bls.n	800c68c <_free_r+0x78>
 800c686:	230c      	movs	r3, #12
 800c688:	6003      	str	r3, [r0, #0]
 800c68a:	e7d6      	b.n	800c63a <_free_r+0x26>
 800c68c:	6825      	ldr	r5, [r4, #0]
 800c68e:	1961      	adds	r1, r4, r5
 800c690:	428b      	cmp	r3, r1
 800c692:	bf04      	itt	eq
 800c694:	6819      	ldreq	r1, [r3, #0]
 800c696:	685b      	ldreq	r3, [r3, #4]
 800c698:	6063      	str	r3, [r4, #4]
 800c69a:	bf04      	itt	eq
 800c69c:	1949      	addeq	r1, r1, r5
 800c69e:	6021      	streq	r1, [r4, #0]
 800c6a0:	6054      	str	r4, [r2, #4]
 800c6a2:	e7ca      	b.n	800c63a <_free_r+0x26>
 800c6a4:	b003      	add	sp, #12
 800c6a6:	bd30      	pop	{r4, r5, pc}
 800c6a8:	20000e24 	.word	0x20000e24

0800c6ac <sbrk_aligned>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	4e0e      	ldr	r6, [pc, #56]	; (800c6e8 <sbrk_aligned+0x3c>)
 800c6b0:	460c      	mov	r4, r1
 800c6b2:	6831      	ldr	r1, [r6, #0]
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	b911      	cbnz	r1, 800c6be <sbrk_aligned+0x12>
 800c6b8:	f000 f9d6 	bl	800ca68 <_sbrk_r>
 800c6bc:	6030      	str	r0, [r6, #0]
 800c6be:	4621      	mov	r1, r4
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	f000 f9d1 	bl	800ca68 <_sbrk_r>
 800c6c6:	1c43      	adds	r3, r0, #1
 800c6c8:	d00a      	beq.n	800c6e0 <sbrk_aligned+0x34>
 800c6ca:	1cc4      	adds	r4, r0, #3
 800c6cc:	f024 0403 	bic.w	r4, r4, #3
 800c6d0:	42a0      	cmp	r0, r4
 800c6d2:	d007      	beq.n	800c6e4 <sbrk_aligned+0x38>
 800c6d4:	1a21      	subs	r1, r4, r0
 800c6d6:	4628      	mov	r0, r5
 800c6d8:	f000 f9c6 	bl	800ca68 <_sbrk_r>
 800c6dc:	3001      	adds	r0, #1
 800c6de:	d101      	bne.n	800c6e4 <sbrk_aligned+0x38>
 800c6e0:	f04f 34ff 	mov.w	r4, #4294967295
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	bd70      	pop	{r4, r5, r6, pc}
 800c6e8:	20000e28 	.word	0x20000e28

0800c6ec <_malloc_r>:
 800c6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6f0:	1ccd      	adds	r5, r1, #3
 800c6f2:	f025 0503 	bic.w	r5, r5, #3
 800c6f6:	3508      	adds	r5, #8
 800c6f8:	2d0c      	cmp	r5, #12
 800c6fa:	bf38      	it	cc
 800c6fc:	250c      	movcc	r5, #12
 800c6fe:	2d00      	cmp	r5, #0
 800c700:	4607      	mov	r7, r0
 800c702:	db01      	blt.n	800c708 <_malloc_r+0x1c>
 800c704:	42a9      	cmp	r1, r5
 800c706:	d905      	bls.n	800c714 <_malloc_r+0x28>
 800c708:	230c      	movs	r3, #12
 800c70a:	603b      	str	r3, [r7, #0]
 800c70c:	2600      	movs	r6, #0
 800c70e:	4630      	mov	r0, r6
 800c710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c714:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c7e8 <_malloc_r+0xfc>
 800c718:	f000 f868 	bl	800c7ec <__malloc_lock>
 800c71c:	f8d8 3000 	ldr.w	r3, [r8]
 800c720:	461c      	mov	r4, r3
 800c722:	bb5c      	cbnz	r4, 800c77c <_malloc_r+0x90>
 800c724:	4629      	mov	r1, r5
 800c726:	4638      	mov	r0, r7
 800c728:	f7ff ffc0 	bl	800c6ac <sbrk_aligned>
 800c72c:	1c43      	adds	r3, r0, #1
 800c72e:	4604      	mov	r4, r0
 800c730:	d155      	bne.n	800c7de <_malloc_r+0xf2>
 800c732:	f8d8 4000 	ldr.w	r4, [r8]
 800c736:	4626      	mov	r6, r4
 800c738:	2e00      	cmp	r6, #0
 800c73a:	d145      	bne.n	800c7c8 <_malloc_r+0xdc>
 800c73c:	2c00      	cmp	r4, #0
 800c73e:	d048      	beq.n	800c7d2 <_malloc_r+0xe6>
 800c740:	6823      	ldr	r3, [r4, #0]
 800c742:	4631      	mov	r1, r6
 800c744:	4638      	mov	r0, r7
 800c746:	eb04 0903 	add.w	r9, r4, r3
 800c74a:	f000 f98d 	bl	800ca68 <_sbrk_r>
 800c74e:	4581      	cmp	r9, r0
 800c750:	d13f      	bne.n	800c7d2 <_malloc_r+0xe6>
 800c752:	6821      	ldr	r1, [r4, #0]
 800c754:	1a6d      	subs	r5, r5, r1
 800c756:	4629      	mov	r1, r5
 800c758:	4638      	mov	r0, r7
 800c75a:	f7ff ffa7 	bl	800c6ac <sbrk_aligned>
 800c75e:	3001      	adds	r0, #1
 800c760:	d037      	beq.n	800c7d2 <_malloc_r+0xe6>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	442b      	add	r3, r5
 800c766:	6023      	str	r3, [r4, #0]
 800c768:	f8d8 3000 	ldr.w	r3, [r8]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d038      	beq.n	800c7e2 <_malloc_r+0xf6>
 800c770:	685a      	ldr	r2, [r3, #4]
 800c772:	42a2      	cmp	r2, r4
 800c774:	d12b      	bne.n	800c7ce <_malloc_r+0xe2>
 800c776:	2200      	movs	r2, #0
 800c778:	605a      	str	r2, [r3, #4]
 800c77a:	e00f      	b.n	800c79c <_malloc_r+0xb0>
 800c77c:	6822      	ldr	r2, [r4, #0]
 800c77e:	1b52      	subs	r2, r2, r5
 800c780:	d41f      	bmi.n	800c7c2 <_malloc_r+0xd6>
 800c782:	2a0b      	cmp	r2, #11
 800c784:	d917      	bls.n	800c7b6 <_malloc_r+0xca>
 800c786:	1961      	adds	r1, r4, r5
 800c788:	42a3      	cmp	r3, r4
 800c78a:	6025      	str	r5, [r4, #0]
 800c78c:	bf18      	it	ne
 800c78e:	6059      	strne	r1, [r3, #4]
 800c790:	6863      	ldr	r3, [r4, #4]
 800c792:	bf08      	it	eq
 800c794:	f8c8 1000 	streq.w	r1, [r8]
 800c798:	5162      	str	r2, [r4, r5]
 800c79a:	604b      	str	r3, [r1, #4]
 800c79c:	4638      	mov	r0, r7
 800c79e:	f104 060b 	add.w	r6, r4, #11
 800c7a2:	f000 f829 	bl	800c7f8 <__malloc_unlock>
 800c7a6:	f026 0607 	bic.w	r6, r6, #7
 800c7aa:	1d23      	adds	r3, r4, #4
 800c7ac:	1af2      	subs	r2, r6, r3
 800c7ae:	d0ae      	beq.n	800c70e <_malloc_r+0x22>
 800c7b0:	1b9b      	subs	r3, r3, r6
 800c7b2:	50a3      	str	r3, [r4, r2]
 800c7b4:	e7ab      	b.n	800c70e <_malloc_r+0x22>
 800c7b6:	42a3      	cmp	r3, r4
 800c7b8:	6862      	ldr	r2, [r4, #4]
 800c7ba:	d1dd      	bne.n	800c778 <_malloc_r+0x8c>
 800c7bc:	f8c8 2000 	str.w	r2, [r8]
 800c7c0:	e7ec      	b.n	800c79c <_malloc_r+0xb0>
 800c7c2:	4623      	mov	r3, r4
 800c7c4:	6864      	ldr	r4, [r4, #4]
 800c7c6:	e7ac      	b.n	800c722 <_malloc_r+0x36>
 800c7c8:	4634      	mov	r4, r6
 800c7ca:	6876      	ldr	r6, [r6, #4]
 800c7cc:	e7b4      	b.n	800c738 <_malloc_r+0x4c>
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	e7cc      	b.n	800c76c <_malloc_r+0x80>
 800c7d2:	230c      	movs	r3, #12
 800c7d4:	603b      	str	r3, [r7, #0]
 800c7d6:	4638      	mov	r0, r7
 800c7d8:	f000 f80e 	bl	800c7f8 <__malloc_unlock>
 800c7dc:	e797      	b.n	800c70e <_malloc_r+0x22>
 800c7de:	6025      	str	r5, [r4, #0]
 800c7e0:	e7dc      	b.n	800c79c <_malloc_r+0xb0>
 800c7e2:	605b      	str	r3, [r3, #4]
 800c7e4:	deff      	udf	#255	; 0xff
 800c7e6:	bf00      	nop
 800c7e8:	20000e24 	.word	0x20000e24

0800c7ec <__malloc_lock>:
 800c7ec:	4801      	ldr	r0, [pc, #4]	; (800c7f4 <__malloc_lock+0x8>)
 800c7ee:	f7ff bf00 	b.w	800c5f2 <__retarget_lock_acquire_recursive>
 800c7f2:	bf00      	nop
 800c7f4:	20000e20 	.word	0x20000e20

0800c7f8 <__malloc_unlock>:
 800c7f8:	4801      	ldr	r0, [pc, #4]	; (800c800 <__malloc_unlock+0x8>)
 800c7fa:	f7ff befb 	b.w	800c5f4 <__retarget_lock_release_recursive>
 800c7fe:	bf00      	nop
 800c800:	20000e20 	.word	0x20000e20

0800c804 <__sflush_r>:
 800c804:	898a      	ldrh	r2, [r1, #12]
 800c806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c80a:	4605      	mov	r5, r0
 800c80c:	0710      	lsls	r0, r2, #28
 800c80e:	460c      	mov	r4, r1
 800c810:	d458      	bmi.n	800c8c4 <__sflush_r+0xc0>
 800c812:	684b      	ldr	r3, [r1, #4]
 800c814:	2b00      	cmp	r3, #0
 800c816:	dc05      	bgt.n	800c824 <__sflush_r+0x20>
 800c818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	dc02      	bgt.n	800c824 <__sflush_r+0x20>
 800c81e:	2000      	movs	r0, #0
 800c820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c826:	2e00      	cmp	r6, #0
 800c828:	d0f9      	beq.n	800c81e <__sflush_r+0x1a>
 800c82a:	2300      	movs	r3, #0
 800c82c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c830:	682f      	ldr	r7, [r5, #0]
 800c832:	6a21      	ldr	r1, [r4, #32]
 800c834:	602b      	str	r3, [r5, #0]
 800c836:	d032      	beq.n	800c89e <__sflush_r+0x9a>
 800c838:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	075a      	lsls	r2, r3, #29
 800c83e:	d505      	bpl.n	800c84c <__sflush_r+0x48>
 800c840:	6863      	ldr	r3, [r4, #4]
 800c842:	1ac0      	subs	r0, r0, r3
 800c844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c846:	b10b      	cbz	r3, 800c84c <__sflush_r+0x48>
 800c848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c84a:	1ac0      	subs	r0, r0, r3
 800c84c:	2300      	movs	r3, #0
 800c84e:	4602      	mov	r2, r0
 800c850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c852:	6a21      	ldr	r1, [r4, #32]
 800c854:	4628      	mov	r0, r5
 800c856:	47b0      	blx	r6
 800c858:	1c43      	adds	r3, r0, #1
 800c85a:	89a3      	ldrh	r3, [r4, #12]
 800c85c:	d106      	bne.n	800c86c <__sflush_r+0x68>
 800c85e:	6829      	ldr	r1, [r5, #0]
 800c860:	291d      	cmp	r1, #29
 800c862:	d82b      	bhi.n	800c8bc <__sflush_r+0xb8>
 800c864:	4a29      	ldr	r2, [pc, #164]	; (800c90c <__sflush_r+0x108>)
 800c866:	410a      	asrs	r2, r1
 800c868:	07d6      	lsls	r6, r2, #31
 800c86a:	d427      	bmi.n	800c8bc <__sflush_r+0xb8>
 800c86c:	2200      	movs	r2, #0
 800c86e:	6062      	str	r2, [r4, #4]
 800c870:	04d9      	lsls	r1, r3, #19
 800c872:	6922      	ldr	r2, [r4, #16]
 800c874:	6022      	str	r2, [r4, #0]
 800c876:	d504      	bpl.n	800c882 <__sflush_r+0x7e>
 800c878:	1c42      	adds	r2, r0, #1
 800c87a:	d101      	bne.n	800c880 <__sflush_r+0x7c>
 800c87c:	682b      	ldr	r3, [r5, #0]
 800c87e:	b903      	cbnz	r3, 800c882 <__sflush_r+0x7e>
 800c880:	6560      	str	r0, [r4, #84]	; 0x54
 800c882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c884:	602f      	str	r7, [r5, #0]
 800c886:	2900      	cmp	r1, #0
 800c888:	d0c9      	beq.n	800c81e <__sflush_r+0x1a>
 800c88a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c88e:	4299      	cmp	r1, r3
 800c890:	d002      	beq.n	800c898 <__sflush_r+0x94>
 800c892:	4628      	mov	r0, r5
 800c894:	f7ff febe 	bl	800c614 <_free_r>
 800c898:	2000      	movs	r0, #0
 800c89a:	6360      	str	r0, [r4, #52]	; 0x34
 800c89c:	e7c0      	b.n	800c820 <__sflush_r+0x1c>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	47b0      	blx	r6
 800c8a4:	1c41      	adds	r1, r0, #1
 800c8a6:	d1c8      	bne.n	800c83a <__sflush_r+0x36>
 800c8a8:	682b      	ldr	r3, [r5, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d0c5      	beq.n	800c83a <__sflush_r+0x36>
 800c8ae:	2b1d      	cmp	r3, #29
 800c8b0:	d001      	beq.n	800c8b6 <__sflush_r+0xb2>
 800c8b2:	2b16      	cmp	r3, #22
 800c8b4:	d101      	bne.n	800c8ba <__sflush_r+0xb6>
 800c8b6:	602f      	str	r7, [r5, #0]
 800c8b8:	e7b1      	b.n	800c81e <__sflush_r+0x1a>
 800c8ba:	89a3      	ldrh	r3, [r4, #12]
 800c8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8c0:	81a3      	strh	r3, [r4, #12]
 800c8c2:	e7ad      	b.n	800c820 <__sflush_r+0x1c>
 800c8c4:	690f      	ldr	r7, [r1, #16]
 800c8c6:	2f00      	cmp	r7, #0
 800c8c8:	d0a9      	beq.n	800c81e <__sflush_r+0x1a>
 800c8ca:	0793      	lsls	r3, r2, #30
 800c8cc:	680e      	ldr	r6, [r1, #0]
 800c8ce:	bf08      	it	eq
 800c8d0:	694b      	ldreq	r3, [r1, #20]
 800c8d2:	600f      	str	r7, [r1, #0]
 800c8d4:	bf18      	it	ne
 800c8d6:	2300      	movne	r3, #0
 800c8d8:	eba6 0807 	sub.w	r8, r6, r7
 800c8dc:	608b      	str	r3, [r1, #8]
 800c8de:	f1b8 0f00 	cmp.w	r8, #0
 800c8e2:	dd9c      	ble.n	800c81e <__sflush_r+0x1a>
 800c8e4:	6a21      	ldr	r1, [r4, #32]
 800c8e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8e8:	4643      	mov	r3, r8
 800c8ea:	463a      	mov	r2, r7
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	47b0      	blx	r6
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	dc06      	bgt.n	800c902 <__sflush_r+0xfe>
 800c8f4:	89a3      	ldrh	r3, [r4, #12]
 800c8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8fa:	81a3      	strh	r3, [r4, #12]
 800c8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c900:	e78e      	b.n	800c820 <__sflush_r+0x1c>
 800c902:	4407      	add	r7, r0
 800c904:	eba8 0800 	sub.w	r8, r8, r0
 800c908:	e7e9      	b.n	800c8de <__sflush_r+0xda>
 800c90a:	bf00      	nop
 800c90c:	dfbffffe 	.word	0xdfbffffe

0800c910 <_fflush_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	690b      	ldr	r3, [r1, #16]
 800c914:	4605      	mov	r5, r0
 800c916:	460c      	mov	r4, r1
 800c918:	b913      	cbnz	r3, 800c920 <_fflush_r+0x10>
 800c91a:	2500      	movs	r5, #0
 800c91c:	4628      	mov	r0, r5
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	b118      	cbz	r0, 800c92a <_fflush_r+0x1a>
 800c922:	6a03      	ldr	r3, [r0, #32]
 800c924:	b90b      	cbnz	r3, 800c92a <_fflush_r+0x1a>
 800c926:	f7ff fc81 	bl	800c22c <__sinit>
 800c92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d0f3      	beq.n	800c91a <_fflush_r+0xa>
 800c932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c934:	07d0      	lsls	r0, r2, #31
 800c936:	d404      	bmi.n	800c942 <_fflush_r+0x32>
 800c938:	0599      	lsls	r1, r3, #22
 800c93a:	d402      	bmi.n	800c942 <_fflush_r+0x32>
 800c93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c93e:	f7ff fe58 	bl	800c5f2 <__retarget_lock_acquire_recursive>
 800c942:	4628      	mov	r0, r5
 800c944:	4621      	mov	r1, r4
 800c946:	f7ff ff5d 	bl	800c804 <__sflush_r>
 800c94a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c94c:	07da      	lsls	r2, r3, #31
 800c94e:	4605      	mov	r5, r0
 800c950:	d4e4      	bmi.n	800c91c <_fflush_r+0xc>
 800c952:	89a3      	ldrh	r3, [r4, #12]
 800c954:	059b      	lsls	r3, r3, #22
 800c956:	d4e1      	bmi.n	800c91c <_fflush_r+0xc>
 800c958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c95a:	f7ff fe4b 	bl	800c5f4 <__retarget_lock_release_recursive>
 800c95e:	e7dd      	b.n	800c91c <_fflush_r+0xc>

0800c960 <__swhatbuf_r>:
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	460c      	mov	r4, r1
 800c964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c968:	2900      	cmp	r1, #0
 800c96a:	b096      	sub	sp, #88	; 0x58
 800c96c:	4615      	mov	r5, r2
 800c96e:	461e      	mov	r6, r3
 800c970:	da0d      	bge.n	800c98e <__swhatbuf_r+0x2e>
 800c972:	89a3      	ldrh	r3, [r4, #12]
 800c974:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c978:	f04f 0100 	mov.w	r1, #0
 800c97c:	bf0c      	ite	eq
 800c97e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c982:	2340      	movne	r3, #64	; 0x40
 800c984:	2000      	movs	r0, #0
 800c986:	6031      	str	r1, [r6, #0]
 800c988:	602b      	str	r3, [r5, #0]
 800c98a:	b016      	add	sp, #88	; 0x58
 800c98c:	bd70      	pop	{r4, r5, r6, pc}
 800c98e:	466a      	mov	r2, sp
 800c990:	f000 f848 	bl	800ca24 <_fstat_r>
 800c994:	2800      	cmp	r0, #0
 800c996:	dbec      	blt.n	800c972 <__swhatbuf_r+0x12>
 800c998:	9901      	ldr	r1, [sp, #4]
 800c99a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c99e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c9a2:	4259      	negs	r1, r3
 800c9a4:	4159      	adcs	r1, r3
 800c9a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9aa:	e7eb      	b.n	800c984 <__swhatbuf_r+0x24>

0800c9ac <__smakebuf_r>:
 800c9ac:	898b      	ldrh	r3, [r1, #12]
 800c9ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9b0:	079d      	lsls	r5, r3, #30
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	d507      	bpl.n	800c9c8 <__smakebuf_r+0x1c>
 800c9b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	6123      	str	r3, [r4, #16]
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	6163      	str	r3, [r4, #20]
 800c9c4:	b002      	add	sp, #8
 800c9c6:	bd70      	pop	{r4, r5, r6, pc}
 800c9c8:	ab01      	add	r3, sp, #4
 800c9ca:	466a      	mov	r2, sp
 800c9cc:	f7ff ffc8 	bl	800c960 <__swhatbuf_r>
 800c9d0:	9900      	ldr	r1, [sp, #0]
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f7ff fe89 	bl	800c6ec <_malloc_r>
 800c9da:	b948      	cbnz	r0, 800c9f0 <__smakebuf_r+0x44>
 800c9dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9e0:	059a      	lsls	r2, r3, #22
 800c9e2:	d4ef      	bmi.n	800c9c4 <__smakebuf_r+0x18>
 800c9e4:	f023 0303 	bic.w	r3, r3, #3
 800c9e8:	f043 0302 	orr.w	r3, r3, #2
 800c9ec:	81a3      	strh	r3, [r4, #12]
 800c9ee:	e7e3      	b.n	800c9b8 <__smakebuf_r+0xc>
 800c9f0:	89a3      	ldrh	r3, [r4, #12]
 800c9f2:	6020      	str	r0, [r4, #0]
 800c9f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f8:	81a3      	strh	r3, [r4, #12]
 800c9fa:	9b00      	ldr	r3, [sp, #0]
 800c9fc:	6163      	str	r3, [r4, #20]
 800c9fe:	9b01      	ldr	r3, [sp, #4]
 800ca00:	6120      	str	r0, [r4, #16]
 800ca02:	b15b      	cbz	r3, 800ca1c <__smakebuf_r+0x70>
 800ca04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca08:	4630      	mov	r0, r6
 800ca0a:	f000 f81d 	bl	800ca48 <_isatty_r>
 800ca0e:	b128      	cbz	r0, 800ca1c <__smakebuf_r+0x70>
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	f023 0303 	bic.w	r3, r3, #3
 800ca16:	f043 0301 	orr.w	r3, r3, #1
 800ca1a:	81a3      	strh	r3, [r4, #12]
 800ca1c:	89a3      	ldrh	r3, [r4, #12]
 800ca1e:	431d      	orrs	r5, r3
 800ca20:	81a5      	strh	r5, [r4, #12]
 800ca22:	e7cf      	b.n	800c9c4 <__smakebuf_r+0x18>

0800ca24 <_fstat_r>:
 800ca24:	b538      	push	{r3, r4, r5, lr}
 800ca26:	4d07      	ldr	r5, [pc, #28]	; (800ca44 <_fstat_r+0x20>)
 800ca28:	2300      	movs	r3, #0
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	4608      	mov	r0, r1
 800ca2e:	4611      	mov	r1, r2
 800ca30:	602b      	str	r3, [r5, #0]
 800ca32:	f7f8 f854 	bl	8004ade <_fstat>
 800ca36:	1c43      	adds	r3, r0, #1
 800ca38:	d102      	bne.n	800ca40 <_fstat_r+0x1c>
 800ca3a:	682b      	ldr	r3, [r5, #0]
 800ca3c:	b103      	cbz	r3, 800ca40 <_fstat_r+0x1c>
 800ca3e:	6023      	str	r3, [r4, #0]
 800ca40:	bd38      	pop	{r3, r4, r5, pc}
 800ca42:	bf00      	nop
 800ca44:	20000e1c 	.word	0x20000e1c

0800ca48 <_isatty_r>:
 800ca48:	b538      	push	{r3, r4, r5, lr}
 800ca4a:	4d06      	ldr	r5, [pc, #24]	; (800ca64 <_isatty_r+0x1c>)
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	4604      	mov	r4, r0
 800ca50:	4608      	mov	r0, r1
 800ca52:	602b      	str	r3, [r5, #0]
 800ca54:	f7f8 f853 	bl	8004afe <_isatty>
 800ca58:	1c43      	adds	r3, r0, #1
 800ca5a:	d102      	bne.n	800ca62 <_isatty_r+0x1a>
 800ca5c:	682b      	ldr	r3, [r5, #0]
 800ca5e:	b103      	cbz	r3, 800ca62 <_isatty_r+0x1a>
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	bd38      	pop	{r3, r4, r5, pc}
 800ca64:	20000e1c 	.word	0x20000e1c

0800ca68 <_sbrk_r>:
 800ca68:	b538      	push	{r3, r4, r5, lr}
 800ca6a:	4d06      	ldr	r5, [pc, #24]	; (800ca84 <_sbrk_r+0x1c>)
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	4604      	mov	r4, r0
 800ca70:	4608      	mov	r0, r1
 800ca72:	602b      	str	r3, [r5, #0]
 800ca74:	f7f8 f85c 	bl	8004b30 <_sbrk>
 800ca78:	1c43      	adds	r3, r0, #1
 800ca7a:	d102      	bne.n	800ca82 <_sbrk_r+0x1a>
 800ca7c:	682b      	ldr	r3, [r5, #0]
 800ca7e:	b103      	cbz	r3, 800ca82 <_sbrk_r+0x1a>
 800ca80:	6023      	str	r3, [r4, #0]
 800ca82:	bd38      	pop	{r3, r4, r5, pc}
 800ca84:	20000e1c 	.word	0x20000e1c

0800ca88 <_init>:
 800ca88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8a:	bf00      	nop
 800ca8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca8e:	bc08      	pop	{r3}
 800ca90:	469e      	mov	lr, r3
 800ca92:	4770      	bx	lr

0800ca94 <_fini>:
 800ca94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca96:	bf00      	nop
 800ca98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca9a:	bc08      	pop	{r3}
 800ca9c:	469e      	mov	lr, r3
 800ca9e:	4770      	bx	lr
